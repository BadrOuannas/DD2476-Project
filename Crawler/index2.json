[{"method_name": "isValid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isValid() {    return valid;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/JBoss6VFS.java", "stars": "15", "class": {"name": "JBoss6VFS", "extends": "VFS", "implements": null, "modifiers": ["public"]}}, {"method_name": "list", "params": ["URL", "String"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "List<String>", "snippet": "  public List<String> list(URL url, String path) throws IOException {    VirtualFile directory;    directory = VFS.getChild(url);    if (directory == null) {      return Collections.emptyList();    }    if (!path.endsWith(\"/\")) {      path += \"/\";    }    List<VirtualFile> children = directory.getChildren();    List<String> names = new ArrayList<>(children.size());    for (VirtualFile vf : children) {      names.add(path + vf.getPathNameRelativeTo(directory));    }    return names;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/JBoss6VFS.java", "stars": "15", "class": {"name": "JBoss6VFS", "extends": "VFS", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPathNameRelativeTo", "params": ["VirtualFile"], "throws": null, "modifiers": [], "return_type": "String", "snippet": "    String getPathNameRelativeTo(VirtualFile parent) {      try {        return invoke(getPathNameRelativeTo, virtualFile, parent.virtualFile);      } catch (IOException e) {        // This exception is not thrown by the called method        log.error(\"This should not be possible. VirtualFile.getPathNameRelativeTo() threw IOException.\");        return null;      }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/JBoss6VFS.java", "stars": "15", "class": {"name": "VirtualFile", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "getChildren", "params": [], "throws": ["IOException"], "modifiers": [], "return_type": "List<VirtualFile>", "snippet": "    List<VirtualFile> getChildren() throws IOException {      List<?> objects = invoke(getChildrenRecursively, virtualFile);      List<VirtualFile> children = new ArrayList<>(objects.size());      for (Object object : objects) {        children.add(new VirtualFile(object));      }      return children;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/JBoss6VFS.java", "stars": "15", "class": {"name": "VirtualFile", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "getChild", "params": ["URL"], "throws": ["IOException"], "modifiers": ["static"], "return_type": "VirtualFile", "snippet": "    static VirtualFile getChild(URL url) throws IOException {      Object o = invoke(getChild, VFS, url);      return o == null ? null : new VirtualFile(o);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/JBoss6VFS.java", "stars": "15", "class": {"name": "VFS", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "validate", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "ValidationResult", "snippet": "    public ValidationResult validate(Object bean) {        ValidationResult validationResult = new ValidationResult();        Set<ConstraintViolation<Object>> constraintViolationSet = validator.validate(bean);        if (constraintViolationSet.size() > 0) {            validationResult.setHasErrors(true);            Map<String, String> errorMsgMap = new HashMap<>();            constraintViolationSet.forEach((constraintViolation) -> {                String propertyName = constraintViolation.getPropertyPath().toString();                String errMsg = constraintViolation.getMessage();                errorMsgMap.put(propertyName, errMsg);            });            validationResult.setErrorMsgMap(errorMsgMap);        }        return validationResult;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/validator/ValidatorImpl.java", "stars": "1", "class": {"name": "ValidatorImpl", "extends": null, "implements": ["InitializingBean"], "modifiers": ["public"]}}, {"method_name": "afterPropertiesSet", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void afterPropertiesSet() throws Exception {        validator = Validation.buildDefaultValidatorFactory().getValidator();    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/validator/ValidatorImpl.java", "stars": "1", "class": {"name": "ValidatorImpl", "extends": null, "implements": ["InitializingBean"], "modifiers": ["public"]}}, {"method_name": "getElement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "Element", "snippet": "    public Element getElement() throws Exception {        if(e == null)e = Engine.getEngine().findElement(fullpath);        return e;    }", "url": "https://raw.githubusercontent.com/qintianchen/GAutomatorView/master/src/sample/Node.java", "stars": "2", "class": {"name": "Node", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return name;    }", "url": "https://raw.githubusercontent.com/qintianchen/GAutomatorView/master/src/sample/Node.java", "stars": "2", "class": {"name": "Node", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "attrsInfo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String attrsInfo()    {        if(attrs == null)return \"\";        StringBuilder ret = new StringBuilder();        for(String value : attrs.values())        {            ret.append(value);        }        return ret.toString();    }", "url": "https://raw.githubusercontent.com/qintianchen/GAutomatorView/master/src/sample/Node.java", "stars": "2", "class": {"name": "Node", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    Thread.setDefaultUncaughtExceptionHandler(new UnhandledExceptionHandler(this));    // Set window styles for fullscreen-window size. Needs to be done before    // adding content.    requestWindowFeature(Window.FEATURE_NO_TITLE);    getWindow().addFlags(LayoutParams.FLAG_FULLSCREEN | LayoutParams.FLAG_KEEP_SCREEN_ON        | LayoutParams.FLAG_SHOW_WHEN_LOCKED | LayoutParams.FLAG_TURN_SCREEN_ON);    getWindow().getDecorView().setSystemUiVisibility(getSystemUiVisibility());    setContentView(R.layout.activity_call);    connected = false;    signalingParameters = null;    // Create UI controls.    pipRenderer = findViewById(R.id.pip_video_view);    fullscreenRenderer = findViewById(R.id.fullscreen_video_view);    callFragment = new CallFragment();    hudFragment = new HudFragment();    // Show/hide call control fragment on view click.    View.OnClickListener listener = new View.OnClickListener() {      @Override      public void onClick(View view) {        toggleCallControlFragmentVisibility();      }    };    // Swap feeds on pip view click.    pipRenderer.setOnClickListener(new View.OnClickListener() {      @Override      public void onClick(View view) {        setSwappedFeeds(!isSwappedFeeds);      }    });    fullscreenRenderer.setOnClickListener(listener);    remoteSinks.add(remoteProxyRenderer);    final Intent intent = getIntent();    final EglBase eglBase = EglBase.create();    // Create video renderers.    pipRenderer.init(eglBase.getEglBaseContext(), null);    pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT);    String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE);    // When saveRemoteVideoToFile is set we save the video from the remote to a file.    if (saveRemoteVideoToFile != null) {      int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE_WIDTH, 0);      int videoOutHeight = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE_HEIGHT, 0);      try {        videoFileRenderer = new VideoFileRenderer(            saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext());        remoteSinks.add(videoFileRenderer);      } catch (IOException e) {        throw new RuntimeException(            \"Failed to open video file for output: \" + saveRemoteVideoToFile, e);      }    }    fullscreenRenderer.init(eglBase.getEglBaseContext(), null);    fullscreenRenderer.setScalingType(ScalingType.SCALE_ASPECT_FILL);    pipRenderer.setZOrderMediaOverlay(true);    pipRenderer.setEnableHardwareScaler(true /* enabled */);    fullscreenRenderer.setEnableHardwareScaler(false /* enabled */);    // Start with local feed in fullscreen and swap it to the pip when the call is connected.    setSwappedFeeds(true /* isSwappedFeeds */);    // Check for mandatory permissions.    for (String permission : MANDATORY_PERMISSIONS) {      if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {        logAndToast(\"Permission \" + permission + \" is not granted\");        setResult(RESULT_CANCELED);        finish();        return;      }    }    Uri roomUri = intent.getData();    if (roomUri == null) {      logAndToast(getString(R.string.missing_url));      Log.e(TAG, \"Didn't get any URL in intent!\");      setResult(RESULT_CANCELED);      finish();      return;    }    // Get Intent parameters.    String roomId = intent.getStringExtra(EXTRA_ROOMID);    Log.d(TAG, \"Room ID: \" + roomId);    if (roomId == null || roomId.length() == 0) {      logAndToast(getString(R.string.missing_url));      Log.e(TAG, \"Incorrect room ID in intent!\");      setResult(RESULT_CANCELED);      finish();      return;    }    boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, false);    boolean tracing = intent.getBooleanExtra(EXTRA_TRACING, false);    int videoWidth = intent.getIntExtra(EXTRA_VIDEO_WIDTH, 0);    int videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);    screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false);    // If capturing format is not specified for screencapture, use screen resolution.    if (screencaptureEnabled && videoWidth == 0 && videoHeight == 0) {      DisplayMetrics displayMetrics = getDisplayMetrics();      videoWidth = displayMetrics.widthPixels;      videoHeight = displayMetrics.heightPixels;    }    DataChannelParameters dataChannelParameters = null;    if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) {      dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true),          intent.getIntExtra(EXTRA_MAX_RETRANSMITS_MS, -1),          intent.getIntExtra(EXTRA_MAX_RETRANSMITS, -1), intent.getStringExtra(EXTRA_PROTOCOL),          intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1));    }    peerConnectionParameters =        new PeerConnectionParameters(intent.getBooleanExtra(EXTRA_VIDEO_CALL, true), loopback,            tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO_FPS, 0),            intent.getIntExtra(EXTRA_VIDEO_BITRATE, 0), intent.getStringExtra(EXTRA_VIDEOCODEC),            intent.getBooleanExtra(EXTRA_HWCODEC_ENABLED, true),            intent.getBooleanExtra(EXTRA_FLEXFEC_ENABLED, false),            intent.getIntExtra(EXTRA_AUDIO_BITRATE, 0), intent.getStringExtra(EXTRA_AUDIOCODEC),            intent.getBooleanExtra(EXTRA_NOAUDIOPROCESSING_ENABLED, false),            intent.getBooleanExtra(EXTRA_AECDUMP_ENABLED, false),            intent.getBooleanExtra(EXTRA_SAVE_INPUT_AUDIO_TO_FILE_ENABLED, false),            intent.getBooleanExtra(EXTRA_OPENSLES_ENABLED, false),            intent.getBooleanExtra(EXTRA_DISABLE_BUILT_IN_AEC, false),            intent.getBooleanExtra(EXTRA_DISABLE_BUILT_IN_AGC, false),            intent.getBooleanExtra(EXTRA_DISABLE_BUILT_IN_NS, false),            intent.getBooleanExtra(EXTRA_DISABLE_WEBRTC_AGC_AND_HPF, false),            intent.getBooleanExtra(EXTRA_ENABLE_RTCEVENTLOG, false), dataChannelParameters);    commandLineRun = intent.getBooleanExtra(EXTRA_CMDLINE, false);    int runTimeMs = intent.getIntExtra(EXTRA_RUNTIME, 0);    Log.d(TAG, \"VIDEO_FILE: '\" + intent.getStringExtra(EXTRA_VIDEO_FILE_AS_CAMERA) + \"'\");    // Create connection client. Use DirectRTCClient if room name is an IP otherwise use the    // standard WebSocketRTCClient.    if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) {      appRtcClient = new WebSocketRTCClient(this);    } else {      Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\");      appRtcClient = new DirectRTCClient(this);    }    // Create connection parameters.    String urlParameters = intent.getStringExtra(EXTRA_URLPARAMETERS);    roomConnectionParameters =        new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters);    // Create CPU monitor    if (CpuMonitor.isSupported()) {      cpuMonitor = new CpuMonitor(this);      hudFragment.setCpuMonitor(cpuMonitor);    }    // Send intent arguments to fragments.    callFragment.setArguments(intent.getExtras());    hudFragment.setArguments(intent.getExtras());    // Activate call and HUD fragments and start the call.    FragmentTransaction ft = getFragmentManager().beginTransaction();    ft.add(R.id.call_fragment_container, callFragment);    ft.add(R.id.hud_fragment_container, hudFragment);    ft.commit();    // For command line execution run connection for <runTimeMs> and exit.    if (commandLineRun && runTimeMs > 0) {      (new Handler()).postDelayed(new Runnable() {        @Override        public void run() {          disconnect();        }      }, runTimeMs);    }    // Create peer connection client.    peerConnectionClient = new PeerConnectionClient(        getApplicationContext(), eglBase, peerConnectionParameters, CallActivity.this);    PeerConnectionFactory.Options options = new PeerConnectionFactory.Options();    if (loopback) {      options.networkIgnoreMask = 0;    }    peerConnectionClient.createPeerConnectionFactory(options);    if (screencaptureEnabled) {      startScreenCapture();    } else {      startCall();    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "getDisplayMetrics", "params": [], "throws": null, "modifiers": ["private"], "return_type": "DisplayMetrics", "snippet": "  private DisplayMetrics getDisplayMetrics() {    DisplayMetrics displayMetrics = new DisplayMetrics();    WindowManager windowManager =        (WindowManager) getApplication().getSystemService(Context.WINDOW_SERVICE);    windowManager.getDefaultDisplay().getRealMetrics(displayMetrics);    return displayMetrics;  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "getSystemUiVisibility", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "int", "snippet": "  private static int getSystemUiVisibility() {    int flags = View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_FULLSCREEN;    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {      flags |= View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;    }    return flags;  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "startScreenCapture", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void startScreenCapture() {    MediaProjectionManager mediaProjectionManager =        (MediaProjectionManager) getApplication().getSystemService(            Context.MEDIA_PROJECTION_SERVICE);    startActivityForResult(        mediaProjectionManager.createScreenCaptureIntent(), CAPTURE_PERMISSION_REQUEST_CODE);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "onActivityResult", "params": ["int", "int", "Intent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onActivityResult(int requestCode, int resultCode, Intent data) {    if (requestCode != CAPTURE_PERMISSION_REQUEST_CODE)      return;    mediaProjectionPermissionResultCode = resultCode;    mediaProjectionPermissionResultData = data;    startCall();  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "useCamera2", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean useCamera2() {    return Camera2Enumerator.isSupported(this) && getIntent().getBooleanExtra(EXTRA_CAMERA2, true);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "captureToTexture", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean captureToTexture() {    return getIntent().getBooleanExtra(EXTRA_CAPTURETOTEXTURE_ENABLED, false);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "createCameraCapturer", "params": ["CameraEnumerator"], "throws": null, "modifiers": ["private"], "return_type": "VideoCapturer", "snippet": "  private @Nullable VideoCapturer createCameraCapturer(CameraEnumerator enumerator) {    final String[] deviceNames = enumerator.getDeviceNames();    // First, try to find front facing camera    Logging.d(TAG, \"Looking for front facing cameras.\");    for (String deviceName : deviceNames) {      if (enumerator.isFrontFacing(deviceName)) {        Logging.d(TAG, \"Creating front facing camera capturer.\");        VideoCapturer videoCapturer = enumerator.createCapturer(deviceName, null);        if (videoCapturer != null) {          return videoCapturer;        }      }    }    // Front facing camera not found, try something else    Logging.d(TAG, \"Looking for other cameras.\");    for (String deviceName : deviceNames) {      if (!enumerator.isFrontFacing(deviceName)) {        Logging.d(TAG, \"Creating other camera capturer.\");        VideoCapturer videoCapturer = enumerator.createCapturer(deviceName, null);        if (videoCapturer != null) {          return videoCapturer;        }      }    }    return null;  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "createScreenCapturer", "params": [], "throws": null, "modifiers": ["private"], "return_type": "VideoCapturer", "snippet": "  private @Nullable VideoCapturer createScreenCapturer() {    if (mediaProjectionPermissionResultCode != Activity.RESULT_OK) {      reportError(\"User didn't give permission to capture the screen.\");      return null;    }    return new ScreenCapturerAndroid(        mediaProjectionPermissionResultData, new MediaProjection.Callback() {      @Override      public void onStop() {        reportError(\"User revoked permission to capture the screen.\");      }    });  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "onStop", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onStop() {    super.onStop();    activityRunning = false;    // Don't stop the video when using screencapture to allow user to show other apps to the remote    // end.    if (peerConnectionClient != null && !screencaptureEnabled) {      peerConnectionClient.stopVideoSource();    }    if (cpuMonitor != null) {      cpuMonitor.pause();    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "onStart", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onStart() {    super.onStart();    activityRunning = true;    // Video is not paused for screencapture. See onPause.    if (peerConnectionClient != null && !screencaptureEnabled) {      peerConnectionClient.startVideoSource();    }    if (cpuMonitor != null) {      cpuMonitor.resume();    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void onDestroy() {    Thread.setDefaultUncaughtExceptionHandler(null);    disconnect();    if (logToast != null) {      logToast.cancel();    }    activityRunning = false;    super.onDestroy();  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "onCallHangUp", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onCallHangUp() {    disconnect();  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "onCameraSwitch", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onCameraSwitch() {    if (peerConnectionClient != null) {      peerConnectionClient.switchCamera();    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "onVideoScalingSwitch", "params": ["ScalingType"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onVideoScalingSwitch(ScalingType scalingType) {    fullscreenRenderer.setScalingType(scalingType);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "onCaptureFormatChange", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onCaptureFormatChange(int width, int height, int framerate) {    if (peerConnectionClient != null) {      peerConnectionClient.changeCaptureFormat(width, height, framerate);    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "onToggleMic", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean onToggleMic() {    if (peerConnectionClient != null) {      micEnabled = !micEnabled;      peerConnectionClient.setAudioEnabled(micEnabled);    }    return micEnabled;  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "toggleCallControlFragmentVisibility", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void toggleCallControlFragmentVisibility() {    if (!connected || !callFragment.isAdded()) {      return;    }    // Show/hide call control fragment    callControlFragmentVisible = !callControlFragmentVisible;    FragmentTransaction ft = getFragmentManager().beginTransaction();    if (callControlFragmentVisible) {      ft.show(callFragment);      ft.show(hudFragment);    } else {      ft.hide(callFragment);      ft.hide(hudFragment);    }    ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);    ft.commit();  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "startCall", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void startCall() {    if (appRtcClient == null) {      Log.e(TAG, \"AppRTC client is not allocated for a call.\");      return;    }    callStartedTimeMs = System.currentTimeMillis();    // Start room connection.    logAndToast(getString(R.string.connecting_to, roomConnectionParameters.roomUrl));    appRtcClient.connectToRoom(roomConnectionParameters);    // Create and audio manager that will take care of audio routing,    // audio modes, audio device enumeration etc.    audioManager = AppRTCAudioManager.create(getApplicationContext());    // Store existing audio settings and change audio mode to    // MODE_IN_COMMUNICATION for best possible VoIP performance.    Log.d(TAG, \"Starting the audio manager...\");    audioManager.start(new AudioManagerEvents() {      // This method will be called each time the number of available audio      // devices has changed.      @Override      public void onAudioDeviceChanged(          AudioDevice audioDevice, Set<AudioDevice> availableAudioDevices) {        onAudioManagerDevicesChanged(audioDevice, availableAudioDevices);      }    });  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "callConnected", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void callConnected() {    final long delta = System.currentTimeMillis() - callStartedTimeMs;    Log.i(TAG, \"Call connected: delay=\" + delta + \"ms\");    if (peerConnectionClient == null || isError) {      Log.w(TAG, \"Call is connected in closed or error state\");      return;    }    // Enable statistics callback.    peerConnectionClient.enableStatsEvents(true, STAT_CALLBACK_PERIOD);    setSwappedFeeds(false /* isSwappedFeeds */);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "onAudioManagerDevicesChanged", "params": ["AudioDevice", "Set<AudioDevice>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void onAudioManagerDevicesChanged(      final AudioDevice device, final Set<AudioDevice> availableDevices) {    Log.d(TAG, \"onAudioManagerDevicesChanged: \" + availableDevices + \", \"            + \"selected: \" + device);    // TODO(henrika): add callback handler.  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "disconnect", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void disconnect() {    activityRunning = false;    remoteProxyRenderer.setTarget(null);    localProxyVideoSink.setTarget(null);    if (appRtcClient != null) {      appRtcClient.disconnectFromRoom();      appRtcClient = null;    }    if (pipRenderer != null) {      pipRenderer.release();      pipRenderer = null;    }    if (videoFileRenderer != null) {      videoFileRenderer.release();      videoFileRenderer = null;    }    if (fullscreenRenderer != null) {      fullscreenRenderer.release();      fullscreenRenderer = null;    }    if (peerConnectionClient != null) {      peerConnectionClient.close();      peerConnectionClient = null;    }    if (audioManager != null) {      audioManager.stop();      audioManager = null;    }    if (connected && !isError) {      setResult(RESULT_OK);    } else {      setResult(RESULT_CANCELED);    }    finish();  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "disconnectWithErrorMessage", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void disconnectWithErrorMessage(final String errorMessage) {    if (commandLineRun || !activityRunning) {      Log.e(TAG, \"Critical error: \" + errorMessage);      disconnect();    } else {      new AlertDialog.Builder(this)          .setTitle(getText(R.string.channel_error_title))          .setMessage(errorMessage)          .setCancelable(false)          .setNeutralButton(R.string.ok,              new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int id) {                  dialog.cancel();                  disconnect();                }              })          .create()          .show();    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "logAndToast", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void logAndToast(String msg) {    Log.d(TAG, msg);    if (logToast != null) {      logToast.cancel();    }    logToast = Toast.makeText(this, msg, Toast.LENGTH_SHORT);    logToast.show();  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "reportError", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void reportError(final String description) {    runOnUiThread(new Runnable() {      @Override      public void run() {        if (!isError) {          isError = true;          disconnectWithErrorMessage(description);        }      }    });  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "createVideoCapturer", "params": [], "throws": null, "modifiers": ["private"], "return_type": "VideoCapturer", "snippet": "  private @Nullable VideoCapturer createVideoCapturer() {    final VideoCapturer videoCapturer;    String videoFileAsCamera = getIntent().getStringExtra(EXTRA_VIDEO_FILE_AS_CAMERA);    if (videoFileAsCamera != null) {      try {        videoCapturer = new FileVideoCapturer(videoFileAsCamera);      } catch (IOException e) {        reportError(\"Failed to open video file for emulated camera\");        return null;      }    } else if (screencaptureEnabled) {      return createScreenCapturer();    } else if (useCamera2()) {      if (!captureToTexture()) {        reportError(getString(R.string.camera2_texture_only_error));        return null;      }      Logging.d(TAG, \"Creating capturer using camera2 API.\");      videoCapturer = createCameraCapturer(new Camera2Enumerator(this));    } else {      Logging.d(TAG, \"Creating capturer using camera1 API.\");      videoCapturer = createCameraCapturer(new Camera1Enumerator(captureToTexture()));    }    if (videoCapturer == null) {      reportError(\"Failed to open camera\");      return null;    }    return videoCapturer;  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "setSwappedFeeds", "params": ["boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void setSwappedFeeds(boolean isSwappedFeeds) {    Logging.d(TAG, \"setSwappedFeeds: \" + isSwappedFeeds);    this.isSwappedFeeds = isSwappedFeeds;    localProxyVideoSink.setTarget(isSwappedFeeds ? fullscreenRenderer : pipRenderer);    remoteProxyRenderer.setTarget(isSwappedFeeds ? pipRenderer : fullscreenRenderer);    fullscreenRenderer.setMirror(isSwappedFeeds);    pipRenderer.setMirror(!isSwappedFeeds);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "onConnectedToRoomInternal", "params": ["SignalingParameters"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void onConnectedToRoomInternal(final SignalingParameters params) {    final long delta = System.currentTimeMillis() - callStartedTimeMs;    signalingParameters = params;    logAndToast(\"Creating peer connection, delay=\" + delta + \"ms\");    VideoCapturer videoCapturer = null;    if (peerConnectionParameters.videoCallEnabled) {      videoCapturer = createVideoCapturer();    }    peerConnectionClient.createPeerConnection(        localProxyVideoSink, remoteSinks, videoCapturer, signalingParameters);    if (signalingParameters.initiator) {      logAndToast(\"Creating OFFER...\");      // Create offer. Offer SDP will be sent to answering client in      // PeerConnectionEvents.onLocalDescription event.      peerConnectionClient.createOffer();    } else {      if (params.offerSdp != null) {        peerConnectionClient.setRemoteDescription(params.offerSdp);        logAndToast(\"Creating ANSWER...\");        // Create answer. Answer SDP will be sent to offering client in        // PeerConnectionEvents.onLocalDescription event.        peerConnectionClient.createAnswer();      }      if (params.iceCandidates != null) {        // Add remote ICE candidates from room.        for (IceCandidate iceCandidate : params.iceCandidates) {          peerConnectionClient.addRemoteIceCandidate(iceCandidate);        }      }    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "onConnectedToRoom", "params": ["SignalingParameters"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onConnectedToRoom(final SignalingParameters params) {    runOnUiThread(new Runnable() {      @Override      public void run() {        onConnectedToRoomInternal(params);      }    });  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "onRemoteDescription", "params": ["SessionDescription"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onRemoteDescription(final SessionDescription sdp) {    final long delta = System.currentTimeMillis() - callStartedTimeMs;    runOnUiThread(new Runnable() {      @Override      public void run() {        if (peerConnectionClient == null) {          Log.e(TAG, \"Received remote SDP for non-initilized peer connection.\");          return;        }        logAndToast(\"Received remote \" + sdp.type + \", delay=\" + delta + \"ms\");        peerConnectionClient.setRemoteDescription(sdp);        if (!signalingParameters.initiator) {          logAndToast(\"Creating ANSWER...\");          // Create answer. Answer SDP will be sent to offering client in          // PeerConnectionEvents.onLocalDescription event.          peerConnectionClient.createAnswer();        }      }    });  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "onRemoteIceCandidate", "params": ["IceCandidate"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onRemoteIceCandidate(final IceCandidate candidate) {    runOnUiThread(new Runnable() {      @Override      public void run() {        if (peerConnectionClient == null) {          Log.e(TAG, \"Received ICE candidate for a non-initialized peer connection.\");          return;        }        peerConnectionClient.addRemoteIceCandidate(candidate);      }    });  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "onRemoteIceCandidatesRemoved", "params": ["IceCandidate"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onRemoteIceCandidatesRemoved(final IceCandidate[] candidates) {    runOnUiThread(new Runnable() {      @Override      public void run() {        if (peerConnectionClient == null) {          Log.e(TAG, \"Received ICE candidate removals for a non-initialized peer connection.\");          return;        }        peerConnectionClient.removeRemoteIceCandidates(candidates);      }    });  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "onChannelClose", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onChannelClose() {    runOnUiThread(new Runnable() {      @Override      public void run() {        logAndToast(\"Remote end hung up; dropping PeerConnection\");        disconnect();      }    });  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "onChannelError", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onChannelError(final String description) {    reportError(description);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "onLocalDescription", "params": ["SessionDescription"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onLocalDescription(final SessionDescription sdp) {    final long delta = System.currentTimeMillis() - callStartedTimeMs;    runOnUiThread(new Runnable() {      @Override      public void run() {        if (appRtcClient != null) {          logAndToast(\"Sending \" + sdp.type + \", delay=\" + delta + \"ms\");          if (signalingParameters.initiator) {            appRtcClient.sendOfferSdp(sdp);          } else {            appRtcClient.sendAnswerSdp(sdp);          }        }        if (peerConnectionParameters.videoMaxBitrate > 0) {          Log.d(TAG, \"Set video maximum bitrate: \" + peerConnectionParameters.videoMaxBitrate);          peerConnectionClient.setVideoMaxBitrate(peerConnectionParameters.videoMaxBitrate);        }      }    });  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "onIceCandidate", "params": ["IceCandidate"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onIceCandidate(final IceCandidate candidate) {    runOnUiThread(new Runnable() {      @Override      public void run() {        if (appRtcClient != null) {          appRtcClient.sendLocalIceCandidate(candidate);        }      }    });  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "onIceCandidatesRemoved", "params": ["IceCandidate"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onIceCandidatesRemoved(final IceCandidate[] candidates) {    runOnUiThread(new Runnable() {      @Override      public void run() {        if (appRtcClient != null) {          appRtcClient.sendLocalIceCandidateRemovals(candidates);        }      }    });  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "onIceConnected", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onIceConnected() {    final long delta = System.currentTimeMillis() - callStartedTimeMs;    runOnUiThread(new Runnable() {      @Override      public void run() {        logAndToast(\"ICE connected, delay=\" + delta + \"ms\");      }    });  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "onIceDisconnected", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onIceDisconnected() {    runOnUiThread(new Runnable() {      @Override      public void run() {        logAndToast(\"ICE disconnected\");      }    });  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "onConnected", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onConnected() {    final long delta = System.currentTimeMillis() - callStartedTimeMs;    runOnUiThread(new Runnable() {      @Override      public void run() {        logAndToast(\"DTLS connected, delay=\" + delta + \"ms\");        connected = true;        callConnected();      }    });  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "onDisconnected", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onDisconnected() {    runOnUiThread(new Runnable() {      @Override      public void run() {        logAndToast(\"DTLS disconnected\");        connected = false;        disconnect();      }    });  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "onPeerConnectionClosed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onPeerConnectionClosed() {}", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "onPeerConnectionStatsReady", "params": ["StatsReport"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onPeerConnectionStatsReady(final StatsReport[] reports) {    runOnUiThread(new Runnable() {      @Override      public void run() {        if (!isError && connected) {          hudFragment.updateEncoderStatistics(reports);        }      }    });  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "onPeerConnectionError", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onPeerConnectionError(final String description) {    reportError(description);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "CallActivity", "extends": "Activity", "implements": ["AppRTCClient", "PeerConnectionClient", "CallFragment"], "modifiers": ["public"]}}, {"method_name": "onFrame", "params": ["VideoFrame"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    synchronized public void onFrame(VideoFrame frame) {      if (target == null) {        Logging.d(TAG, \"Dropping frame in proxy because target is null.\");        return;      }      target.onFrame(frame);    }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "ProxyVideoSink", "extends": null, "implements": ["VideoSink"], "modifiers": ["private", "static"]}}, {"method_name": "setTarget", "params": ["VideoSink"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    synchronized public void setTarget(VideoSink target) {      this.target = target;    }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CallActivity.java", "stars": "2", "class": {"name": "ProxyVideoSink", "extends": null, "implements": ["VideoSink"], "modifiers": ["private", "static"]}}, {"method_name": "beforeHandshake", "params": ["ServerHttpRequest", "ServerHttpResponse", "WebSocketHandler", "Map<String,Object>"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean beforeHandshake(ServerHttpRequest request,                                   ServerHttpResponse response,                                   WebSocketHandler webSocketHandler,                                   @NonNull Map<String, Object> attributes) throws Exception {        HttpServletRequest servletRequest = ((ServletServerHttpRequest) request).getServletRequest();        final String name = servletRequest.getParameter(\"name\");        if (StringUtils.isEmpty(name)) {            throw new ExceptionUtil.BadRequestException(ExceptionUtil.Type.INVALID_USER_NAME);        }        if (onlineUserService.exists(name)) {            throw new ExceptionUtil.ForbiddenException(ExceptionUtil.Type.USER_NAME_ALREADY_EXISTS);        }        return super.beforeHandshake(request, response, webSocketHandler, attributes);    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/interceptor/WebSocketHandshakeInterceptor.java", "stars": "2", "class": {"name": "WebSocketHandshakeInterceptor", "extends": "HttpSessionHandshakeInterceptor", "implements": null, "modifiers": ["public"]}}, {"method_name": "afterHandshake", "params": ["ServerHttpRequest", "ServerHttpResponse", "WebSocketHandler", "Exception"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void afterHandshake(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Exception e) {        super.afterHandshake(request, response, wsHandler, e);    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/interceptor/WebSocketHandshakeInterceptor.java", "stars": "2", "class": {"name": "WebSocketHandshakeInterceptor", "extends": "HttpSessionHandshakeInterceptor", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onCreate(Bundle savedInstanceState) {\t\tsuper.onCreate(savedInstanceState);\t\tsetContentView(R.layout.ac_image_list);\t\tBundle bundle = getIntent().getExtras();\t\timageUrls = bundle.getStringArray(Extra.IMAGES);\t\toptions = new DisplayImageOptions.Builder()\t\t\t.showStubImage(R.drawable.ic_stub)\t\t\t.showImageForEmptyUri(R.drawable.ic_empty)\t\t\t.showImageOnFail(R.drawable.ic_error)\t\t\t.cacheInMemory(true)\t\t\t.cacheOnDisc(true)\t\t\t.displayer(new RoundedBitmapDisplayer(20))\t\t\t.build();\t\tlistView = (ListView) findViewById(android.R.id.list);\t\t((ListView) listView).setAdapter(new ItemAdapter());\t\tlistView.setOnItemClickListener(new OnItemClickListener() {\t\t\t@Override\t\t\tpublic void onItemClick(AdapterView<?> parent, View view, int position, long id) {\t\t\t\tstartImagePagerActivity(position);\t\t\t}\t\t});\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/sample/src/com/imageloader/example/universalimageloader/ImageListActivity.java", "stars": "74", "class": {"name": "ImageListActivity", "extends": "AbsListViewBaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBackPressed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onBackPressed() {\t\tAnimateFirstDisplayListener.displayedImages.clear();\t\tsuper.onBackPressed();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/sample/src/com/imageloader/example/universalimageloader/ImageListActivity.java", "stars": "74", "class": {"name": "ImageListActivity", "extends": "AbsListViewBaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "startImagePagerActivity", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void startImagePagerActivity(int position) {\t\tIntent intent = new Intent(this, ImagePagerActivity.class);\t\tintent.putExtra(Extra.IMAGES, imageUrls);\t\tintent.putExtra(Extra.IMAGE_POSITION, position);\t\tstartActivity(intent);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/sample/src/com/imageloader/example/universalimageloader/ImageListActivity.java", "stars": "74", "class": {"name": "ImageListActivity", "extends": "AbsListViewBaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\t\tpublic int getCount() {\t\t\treturn imageUrls.length;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/sample/src/com/imageloader/example/universalimageloader/ImageListActivity.java", "stars": "74", "class": {"name": "ItemAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": []}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "\t\tpublic Object getItem(int position) {\t\t\treturn position;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/sample/src/com/imageloader/example/universalimageloader/ImageListActivity.java", "stars": "74", "class": {"name": "ItemAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": []}}, {"method_name": "getItemId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "\t\tpublic long getItemId(int position) {\t\t\treturn position;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/sample/src/com/imageloader/example/universalimageloader/ImageListActivity.java", "stars": "74", "class": {"name": "ItemAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": []}}, {"method_name": "getView", "params": ["int", "View", "ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "\t\tpublic View getView(final int position, View convertView, ViewGroup parent) {\t\t\tView view = convertView;\t\t\tfinal ViewHolder holder;\t\t\tif (convertView == null) {\t\t\t\tview = getLayoutInflater().inflate(R.layout.item_list_image, parent, false);\t\t\t\tholder = new ViewHolder();\t\t\t\tholder.text = (TextView) view.findViewById(R.id.text);\t\t\t\tholder.image = (ImageView) view.findViewById(R.id.image);\t\t\t\tview.setTag(holder);\t\t\t} else {\t\t\t\tholder = (ViewHolder) view.getTag();\t\t\t}\t\t\tholder.text.setText(\"Item \" + (position + 1));\t\t\timageLoader.displayImage(imageUrls[position], holder.image, options, animateFirstListener);\t\t\treturn view;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/sample/src/com/imageloader/example/universalimageloader/ImageListActivity.java", "stars": "74", "class": {"name": "ItemAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": []}}, {"method_name": "onLoadingComplete", "params": ["String", "View", "Bitmap"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {\t\t\tif (loadedImage != null) {\t\t\t\tImageView imageView = (ImageView) view;\t\t\t\tboolean firstDisplay = !displayedImages.contains(imageUri);\t\t\t\tif (firstDisplay) {\t\t\t\t\tFadeInBitmapDisplayer.animate(imageView, 500);\t\t\t\t\tdisplayedImages.add(imageUri);\t\t\t\t}\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/sample/src/com/imageloader/example/universalimageloader/ImageListActivity.java", "stars": "74", "class": {"name": "AnimateFirstDisplayListener", "extends": "SimpleImageLoadingListener", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items\t\t\t\t.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.BUILDING_BLOCKS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/SpruceTanBarkBlock.java", "stars": "2", "class": {"name": "SpruceTanBarkBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/SpruceTanBarkBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "FallingBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create an SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/raw_sql_source/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/raw_sql_source/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/raw_sql_source/RawSqlSourceTest.java", "stars": "15", "class": {"name": "RawSqlSourceTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldUseRawSqlSourceForAnStaticStatement", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldUseRawSqlSourceForAnStaticStatement() {    test(\"getUser1\", RawSqlSource.class);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/raw_sql_source/RawSqlSourceTest.java", "stars": "15", "class": {"name": "RawSqlSourceTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldUseDynamicSqlSourceForAnStatementWithInlineArguments", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldUseDynamicSqlSourceForAnStatementWithInlineArguments() {    test(\"getUser2\", DynamicSqlSource.class);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/raw_sql_source/RawSqlSourceTest.java", "stars": "15", "class": {"name": "RawSqlSourceTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldUseDynamicSqlSourceForAnStatementWithXmlTags", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldUseDynamicSqlSourceForAnStatementWithXmlTags() {    test(\"getUser3\", DynamicSqlSource.class);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/raw_sql_source/RawSqlSourceTest.java", "stars": "15", "class": {"name": "RawSqlSourceTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "test", "params": ["String", "Class<SqlSource>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void test(String statement, Class<? extends SqlSource> sqlSource) {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Assertions.assertEquals(sqlSource, sqlSession.getConfiguration().getMappedStatement(statement).getSqlSource().getClass());      String sql = sqlSession.getConfiguration().getMappedStatement(statement).getSqlSource().getBoundSql('?').getSql();      Assertions.assertEquals(\"select * from users where id = ?\", sql);      User user = sqlSession.selectOne(statement, 1);      Assertions.assertEquals(\"User1\", user.getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/raw_sql_source/RawSqlSourceTest.java", "stars": "15", "class": {"name": "RawSqlSourceTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getErrorMsg", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getErrorMsg() {        return errorMsg;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/util/VLCUtil.java", "stars": "4", "class": {"name": "VLCUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hasCompatibleCPU", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean hasCompatibleCPU(Context context) {        // If already checked return cached result        if (errorMsg != null || isCompatible) return isCompatible;        final File lib = searchLibrary(context.getApplicationInfo());        if (lib == null)            return true;        ElfData elf = readLib(lib);        if (elf == null) {            Log.e(TAG, \"WARNING: Unable to read libvlcjni.so; cannot check device ABI!\");            Log.e(TAG, \"WARNING: Cannot guarantee correct ABI for this build (may crash)!\");            return true;        }        String CPU_ABI = android.os.Build.CPU_ABI;        String CPU_ABI2 = \"none\";        if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.FROYO) { // CPU_ABI2 since 2.2            try {                CPU_ABI2 = (String) android.os.Build.class.getDeclaredField(\"CPU_ABI2\").get(null);            } catch (Exception e) {            }        }        final boolean elfHasX86 = elf.e_machine == EM_386 || elf.e_machine == EM_X86_64;        final boolean elfHasArm = elf.e_machine == EM_ARM || elf.e_machine == EM_AARCH64;        final boolean elfHasMips = elf.e_machine == EM_MIPS;        final boolean elfIs64bits = elf.is64bits;        Log.i(TAG, \"ELF ABI = \" + (elfHasArm ? \"arm\" : elfHasX86 ? \"x86\" : \"mips\") + \", \" +                (elfIs64bits ? \"64bits\" : \"32bits\"));        Log.i(TAG, \"ELF arch = \" + elf.att_arch);        Log.i(TAG, \"ELF fpu = \" + elf.att_fpu);        boolean hasNeon = false, hasFpu = false, hasArmV6 = false,                hasArmV7 = false, hasMips = false, hasX86 = false, is64bits = false;        float bogoMIPS = -1;        int processors = 0;        if (CPU_ABI.equals(\"x86\") ||                CPU_ABI2.equals(\"x86\")) {            hasX86 = true;        } else if (CPU_ABI.equals(\"x86_64\") ||                CPU_ABI2.equals(\"x86_64\")) {            hasX86 = true;            is64bits = true;        } else if (CPU_ABI.equals(\"armeabi-v7a\") ||                CPU_ABI2.equals(\"armeabi-v7a\")) {            hasArmV7 = true;            hasArmV6 = true; /* Armv7 is backwards compatible to < v6 */        } else if (CPU_ABI.equals(\"armeabi\") ||                CPU_ABI2.equals(\"armeabi\")) {            hasArmV6 = true;        } else if (CPU_ABI.equals(\"arm64-v8a\") ||                CPU_ABI2.equals(\"arm64-v8a\")) {            hasNeon = true;            hasArmV6 = true;            hasArmV7 = true;            is64bits = true;        }        FileReader fileReader = null;        BufferedReader br = null;        try {            fileReader = new FileReader(\"/proc/cpuinfo\");            br = new BufferedReader(fileReader);            String line;            while ((line = br.readLine()) != null) {                if (!hasArmV7 && line.contains(\"AArch64\")) {                    hasArmV7 = true;                    hasArmV6 = true; /* Armv8 is backwards compatible to < v7 */                }                if (!hasArmV7 && line.contains(\"ARMv7\")) {                    hasArmV7 = true;                    hasArmV6 = true; /* Armv7 is backwards compatible to < v6 */                }                if (!hasArmV7 && !hasArmV6 && line.contains(\"ARMv6\"))                    hasArmV6 = true;                // \"clflush size\" is a x86-specific cpuinfo tag.                // (see kernel sources arch/x86/kernel/cpu/proc.c)                if (line.contains(\"clflush size\"))                    hasX86 = true;                if (line.contains(\"GenuineIntel\"))                    hasX86 = true;                // \"microsecond timers\" is specific to MIPS.                // see arch/mips/kernel/proc.c                if (line.contains(\"microsecond timers\"))                    hasMips = true;                if (!hasNeon && (line.contains(\"neon\") || line.contains(\"asimd\")))                    hasNeon = true;                if (!hasFpu && (line.contains(\"vfp\") || (line.contains(\"Features\") && line.contains(\"fp\"))))                    hasFpu = true;                if (line.startsWith(\"processor\"))                    processors++;                if (bogoMIPS < 0 && line.toLowerCase(Locale.ENGLISH).contains(\"bogomips\")) {                    String[] bogo_parts = line.split(\":\");                    try {                        bogoMIPS = Float.parseFloat(bogo_parts[1].trim());                    } catch (NumberFormatException e) {                        bogoMIPS = -1; // invalid bogomips                    }                }            }        } catch (IOException ex) {            ex.printStackTrace();            errorMsg = \"IOException whilst reading cpuinfo flags\";            isCompatible = false;            return false;        } finally {            if (br != null) {                try {                    br.close();                } catch (IOException e) {                }            }            if (fileReader != null) {                try {                    fileReader.close();                } catch (IOException e) {                }            }        }        if (processors == 0)            processors = 1; // possibly borked cpuinfo?        // Enforce proper architecture to prevent problems        if (elfHasX86 && !hasX86) {            errorMsg = \"x86 build on non-x86 device\";            isCompatible = false;            return false;        } else if (elfHasArm && hasX86) {            errorMsg = \"ARM build on x86 device\";            isCompatible = false;            return false;        }        if (elfHasMips && !hasMips) {            errorMsg = \"MIPS build on non-MIPS device\";            isCompatible = false;            return false;        } else if (elfHasArm && hasMips) {            errorMsg = \"ARM build on MIPS device\";            isCompatible = false;            return false;        }        if (elf.e_machine == EM_ARM && elf.att_arch.startsWith(\"v7\") && !hasArmV7) {            errorMsg = \"ARMv7 build on non-ARMv7 device\";            isCompatible = false;            return false;        }        if (elf.e_machine == EM_ARM) {            if (elf.att_arch.startsWith(\"v6\") && !hasArmV6) {                errorMsg = \"ARMv6 build on non-ARMv6 device\";                isCompatible = false;                return false;            } else if (elf.att_fpu && !hasFpu) {                errorMsg = \"FPU-enabled build on non-FPU device\";                isCompatible = false;                return false;            }        }        if (elfIs64bits && !is64bits) {            errorMsg = \"64bits build on 32bits device\";            isCompatible = false;        }        float frequency = -1;        fileReader = null;        br = null;        String line = \"\";        try {            fileReader = new FileReader(\"/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq\");            br = new BufferedReader(fileReader);            line = br.readLine();            if (line != null)                frequency = Float.parseFloat(line) / 1000.f; /* Convert to MHz */        } catch (IOException ex) {            Log.w(TAG, \"Could not find maximum CPU frequency!\");        } catch (NumberFormatException e) {            Log.w(TAG, \"Could not parse maximum CPU frequency!\");            Log.w(TAG, \"Failed to parse: \" + line);        } finally {            if (br != null) {                try {                    br.close();                } catch (IOException e) {                }            }            if (fileReader != null) {                try {                    fileReader.close();                } catch (IOException e) {                }            }        }        errorMsg = null;        isCompatible = true;        // Store into MachineSpecs        machineSpecs = new MachineSpecs();        machineSpecs.hasArmV6 = hasArmV6;        machineSpecs.hasArmV7 = hasArmV7;        machineSpecs.hasFpu = hasFpu;        machineSpecs.hasMips = hasMips;        machineSpecs.hasNeon = hasNeon;        machineSpecs.hasX86 = hasX86;        machineSpecs.is64bits = is64bits;        machineSpecs.bogoMIPS = bogoMIPS;        machineSpecs.processors = processors;        machineSpecs.frequency = frequency;        return true;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/util/VLCUtil.java", "stars": "4", "class": {"name": "VLCUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMachineSpecs", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "MachineSpecs", "snippet": "    public static MachineSpecs getMachineSpecs() {        return machineSpecs;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/util/VLCUtil.java", "stars": "4", "class": {"name": "VLCUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "searchLibrary", "params": ["ApplicationInfo"], "throws": null, "modifiers": ["private", "static"], "return_type": "File", "snippet": "    private static File searchLibrary(ApplicationInfo applicationInfo) {        // Search for library path        String[] libraryPaths;        if ((applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0) {            final String property = System.getProperty(\"java.library.path\");            libraryPaths = property.split(\":\");        } else {            libraryPaths = new String[1];            if (AndroidUtil.isGingerbreadOrLater())                libraryPaths[0] = applicationInfo.nativeLibraryDir;            else                libraryPaths[0] = applicationInfo.dataDir + \"/lib\";        }        if (libraryPaths[0] == null) {            Log.e(TAG, \"can't find library path\");            return null;        }        // Search for libvlcjni.so        File lib;        for (String libraryPath : libraryPaths) {            lib = new File(libraryPath, \"libvlcjni.so\");            if (lib.exists() && lib.canRead())                return lib;        }        Log.e(TAG, \"WARNING: Can't find shared library\");        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/util/VLCUtil.java", "stars": "4", "class": {"name": "VLCUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readLib", "params": ["File"], "throws": null, "modifiers": ["private", "static"], "return_type": "ElfData", "snippet": "    private static ElfData readLib(File file) {        RandomAccessFile in = null;        try {            in = new RandomAccessFile(file, \"r\");            ElfData elf = new ElfData();            if (!readHeader(in, elf))                return null;            switch (elf.e_machine) {                case EM_386:                case EM_MIPS:                case EM_X86_64:                case EM_AARCH64:                    return elf;                case EM_ARM:                    in.close();                    in = new RandomAccessFile(file, \"r\");                    if (!readSection(in, elf))                        return null;                    in.close();                    in = new RandomAccessFile(file, \"r\");                    if (!readArmAttributes(in, elf))                        return null;                    break;                default:                    return null;            }            return elf;        } catch (FileNotFoundException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        } finally {            try {                if (in != null)                    in.close();            } catch (IOException e) {            }        }        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/util/VLCUtil.java", "stars": "4", "class": {"name": "VLCUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readHeader", "params": ["RandomAccessFile", "ElfData"], "throws": ["IOException"], "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "    private static boolean readHeader(RandomAccessFile in, ElfData elf) throws IOException {        // http://www.sco.com/developers/gabi/1998-04-29/ch4.eheader.html        byte[] bytes = new byte[ELF_HEADER_SIZE];        in.readFully(bytes);        if (bytes[0] != 127 ||                bytes[1] != 'E' ||                bytes[2] != 'L' ||                bytes[3] != 'F' ||                (bytes[4] != 1 && bytes[4] != 2)) {            Log.e(TAG, \"ELF header invalid\");            return false;        }        elf.is64bits = bytes[4] == 2;        elf.order = bytes[5] == 1                ? ByteOrder.LITTLE_ENDIAN // ELFDATA2LSB                : ByteOrder.BIG_ENDIAN;   // ELFDATA2MSB        // wrap bytes in a ByteBuffer to force endianess        ByteBuffer buffer = ByteBuffer.wrap(bytes);        buffer.order(elf.order);        elf.e_machine = buffer.getShort(18);    /* Architecture */        elf.e_shoff = buffer.getInt(32);        /* Section header table file offset */        elf.e_shnum = buffer.getShort(48);      /* Section header table entry count */        return true;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/util/VLCUtil.java", "stars": "4", "class": {"name": "VLCUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readSection", "params": ["RandomAccessFile", "ElfData"], "throws": ["IOException"], "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "    private static boolean readSection(RandomAccessFile in, ElfData elf) throws IOException {        byte[] bytes = new byte[SECTION_HEADER_SIZE];        in.seek(elf.e_shoff);        for (int i = 0; i < elf.e_shnum; ++i) {            in.readFully(bytes);            // wrap bytes in a ByteBuffer to force endianess            ByteBuffer buffer = ByteBuffer.wrap(bytes);            buffer.order(elf.order);            int sh_type = buffer.getInt(4); /* Section type */            if (sh_type != SHT_ARM_ATTRIBUTES)                continue;            elf.sh_offset = buffer.getInt(16);  /* Section file offset */            elf.sh_size = buffer.getInt(20);    /* Section size in bytes */            return true;        }        return false;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/util/VLCUtil.java", "stars": "4", "class": {"name": "VLCUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readArmAttributes", "params": ["RandomAccessFile", "ElfData"], "throws": ["IOException"], "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "    private static boolean readArmAttributes(RandomAccessFile in, ElfData elf) throws IOException {        byte[] bytes = new byte[elf.sh_size];        in.seek(elf.sh_offset);        in.readFully(bytes);        // wrap bytes in a ByteBuffer to force endianess        ByteBuffer buffer = ByteBuffer.wrap(bytes);        buffer.order(elf.order);        //http://infocenter.arm.com/help/topic/com.arm.doc.ihi0044e/IHI0044E_aaelf.pdf        //http://infocenter.arm.com/help/topic/com.arm.doc.ihi0045d/IHI0045D_ABI_addenda.pdf        if (buffer.get() != 'A') // format-version            return false;        // sub-sections loop        while (buffer.remaining() > 0) {            int start_section = buffer.position();            int length = buffer.getInt();            String vendor = getString(buffer);            if (vendor.equals(\"aeabi\")) {                // tags loop                while (buffer.position() < start_section + length) {                    int start = buffer.position();                    int tag = buffer.get();                    int size = buffer.getInt();                    // skip if not Tag_File, we don't care about others                    if (tag != 1) {                        buffer.position(start + size);                        continue;                    }                    // attributes loop                    while (buffer.position() < start + size) {                        tag = getUleb128(buffer);                        if (tag == 6) { // CPU_arch                            int arch = getUleb128(buffer);                            elf.att_arch = CPU_archs[arch];                        } else if (tag == 27) { // ABI_HardFP_use                            getUleb128(buffer);                            elf.att_fpu = true;                        } else {                            // string for 4=CPU_raw_name / 5=CPU_name / 32=compatibility                            // string for >32 && odd tags                            // uleb128 for other                            tag %= 128;                            if (tag == 4 || tag == 5 || tag == 32 || (tag > 32 && (tag & 1) != 0))                                getString(buffer);                            else                                getUleb128(buffer);                        }                    }                }                break;            }        }        return true;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/util/VLCUtil.java", "stars": "4", "class": {"name": "VLCUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getString", "params": ["ByteBuffer"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "    private static String getString(ByteBuffer buffer) {        StringBuilder sb = new StringBuilder(buffer.limit());        while (buffer.remaining() > 0) {            char c = (char) buffer.get();            if (c == 0)                break;            sb.append(c);        }        return sb.toString();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/util/VLCUtil.java", "stars": "4", "class": {"name": "VLCUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUleb128", "params": ["ByteBuffer"], "throws": null, "modifiers": ["private", "static"], "return_type": "int", "snippet": "    private static int getUleb128(ByteBuffer buffer) {        int ret = 0;        int c;        do {            ret <<= 7;            c = buffer.get();            ret |= c & 0x7f;        } while ((c & 0x80) > 0);        return ret;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/util/VLCUtil.java", "stars": "4", "class": {"name": "VLCUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getThumbnail", "params": ["LibVLC", "Uri", "int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "byte", "snippet": "    public static byte[] getThumbnail(LibVLC libVLC, Uri uri, int i_width, int i_height) {        final Media media = new Media(libVLC, uri);        byte[] bytes = getThumbnail(media, i_width, i_height);        media.release();        return bytes;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/util/VLCUtil.java", "stars": "4", "class": {"name": "VLCUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getThumbnail", "params": ["LibVLC", "String", "int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "byte", "snippet": "    public static byte[] getThumbnail(LibVLC libVLC, String path, int i_width, int i_height) {        final Media media = new Media(libVLC, path);        byte[] bytes = getThumbnail(media, i_width, i_height);        media.release();        return bytes;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/util/VLCUtil.java", "stars": "4", "class": {"name": "VLCUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getThumbnail", "params": ["Media", "int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "byte", "snippet": "    public static byte[] getThumbnail(Media media, int i_width, int i_height) {        media.addOption(\":no-audio\");        media.addOption(\":no-spu\");        media.addOption(\":no-osd\");        return nativeGetThumbnail(media, i_width, i_height);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/util/VLCUtil.java", "stars": "4", "class": {"name": "VLCUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "nativeGetThumbnail", "params": ["Media", "int", "int"], "throws": null, "modifiers": ["native", "private", "static"], "return_type": "byte", "snippet": "    private static native byte[] nativeGetThumbnail(Media media, int i_width, int i_height);}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/util/VLCUtil.java", "stars": "4", "class": {"name": "VLCUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getId() {        return id;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Long id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getBrandId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getBrandId() {        return brandId;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setBrandId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setBrandId(Long brandId) {        this.brandId = brandId;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getProductCategoryId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getProductCategoryId() {        return productCategoryId;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setProductCategoryId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setProductCategoryId(Long productCategoryId) {        this.productCategoryId = productCategoryId;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getFeightTemplateId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getFeightTemplateId() {        return feightTemplateId;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setFeightTemplateId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFeightTemplateId(Long feightTemplateId) {        this.feightTemplateId = feightTemplateId;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getProductAttributeCategoryId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getProductAttributeCategoryId() {        return productAttributeCategoryId;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setProductAttributeCategoryId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setProductAttributeCategoryId(Long productAttributeCategoryId) {        this.productAttributeCategoryId = productAttributeCategoryId;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getPic", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPic() {        return pic;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setPic", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPic(String pic) {        this.pic = pic;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getProductSn", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getProductSn() {        return productSn;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setProductSn", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setProductSn(String productSn) {        this.productSn = productSn;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getDeleteStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getDeleteStatus() {        return deleteStatus;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setDeleteStatus", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDeleteStatus(Integer deleteStatus) {        this.deleteStatus = deleteStatus;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getPublishStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getPublishStatus() {        return publishStatus;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setPublishStatus", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPublishStatus(Integer publishStatus) {        this.publishStatus = publishStatus;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getNewStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getNewStatus() {        return newStatus;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setNewStatus", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setNewStatus(Integer newStatus) {        this.newStatus = newStatus;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getRecommandStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getRecommandStatus() {        return recommandStatus;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setRecommandStatus", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRecommandStatus(Integer recommandStatus) {        this.recommandStatus = recommandStatus;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getVerifyStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getVerifyStatus() {        return verifyStatus;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setVerifyStatus", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setVerifyStatus(Integer verifyStatus) {        this.verifyStatus = verifyStatus;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getSort", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getSort() {        return sort;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setSort", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSort(Integer sort) {        this.sort = sort;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getSale", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getSale() {        return sale;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setSale", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSale(Integer sale) {        this.sale = sale;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getPrice", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BigDecimal", "snippet": "    public BigDecimal getPrice() {        return price;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setPrice", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPrice(BigDecimal price) {        this.price = price;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getPromotionPrice", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BigDecimal", "snippet": "    public BigDecimal getPromotionPrice() {        return promotionPrice;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setPromotionPrice", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPromotionPrice(BigDecimal promotionPrice) {        this.promotionPrice = promotionPrice;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getGiftGrowth", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getGiftGrowth() {        return giftGrowth;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setGiftGrowth", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGiftGrowth(Integer giftGrowth) {        this.giftGrowth = giftGrowth;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getGiftPoint", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getGiftPoint() {        return giftPoint;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setGiftPoint", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGiftPoint(Integer giftPoint) {        this.giftPoint = giftPoint;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getUsePointLimit", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getUsePointLimit() {        return usePointLimit;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setUsePointLimit", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUsePointLimit(Integer usePointLimit) {        this.usePointLimit = usePointLimit;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getSubTitle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getSubTitle() {        return subTitle;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setSubTitle", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSubTitle(String subTitle) {        this.subTitle = subTitle;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getOriginalPrice", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BigDecimal", "snippet": "    public BigDecimal getOriginalPrice() {        return originalPrice;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setOriginalPrice", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOriginalPrice(BigDecimal originalPrice) {        this.originalPrice = originalPrice;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getStock", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getStock() {        return stock;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setStock", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStock(Integer stock) {        this.stock = stock;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getLowStock", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getLowStock() {        return lowStock;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setLowStock", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLowStock(Integer lowStock) {        this.lowStock = lowStock;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getUnit", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getUnit() {        return unit;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setUnit", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUnit(String unit) {        this.unit = unit;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getWeight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BigDecimal", "snippet": "    public BigDecimal getWeight() {        return weight;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setWeight", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setWeight(BigDecimal weight) {        this.weight = weight;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getPreviewStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getPreviewStatus() {        return previewStatus;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setPreviewStatus", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPreviewStatus(Integer previewStatus) {        this.previewStatus = previewStatus;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getServiceIds", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getServiceIds() {        return serviceIds;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setServiceIds", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setServiceIds(String serviceIds) {        this.serviceIds = serviceIds;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getKeywords", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getKeywords() {        return keywords;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setKeywords", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setKeywords(String keywords) {        this.keywords = keywords;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getNote", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getNote() {        return note;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setNote", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setNote(String note) {        this.note = note;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getAlbumPics", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getAlbumPics() {        return albumPics;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setAlbumPics", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAlbumPics(String albumPics) {        this.albumPics = albumPics;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getDetailTitle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDetailTitle() {        return detailTitle;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setDetailTitle", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDetailTitle(String detailTitle) {        this.detailTitle = detailTitle;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getPromotionStartTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date getPromotionStartTime() {        return promotionStartTime;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setPromotionStartTime", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPromotionStartTime(Date promotionStartTime) {        this.promotionStartTime = promotionStartTime;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getPromotionEndTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date getPromotionEndTime() {        return promotionEndTime;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setPromotionEndTime", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPromotionEndTime(Date promotionEndTime) {        this.promotionEndTime = promotionEndTime;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getPromotionPerLimit", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getPromotionPerLimit() {        return promotionPerLimit;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setPromotionPerLimit", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPromotionPerLimit(Integer promotionPerLimit) {        this.promotionPerLimit = promotionPerLimit;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getPromotionType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getPromotionType() {        return promotionType;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setPromotionType", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPromotionType(Integer promotionType) {        this.promotionType = promotionType;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getBrandName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getBrandName() {        return brandName;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setBrandName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setBrandName(String brandName) {        this.brandName = brandName;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getProductCategoryName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getProductCategoryName() {        return productCategoryName;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setProductCategoryName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setProductCategoryName(String productCategoryName) {        this.productCategoryName = productCategoryName;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getDescription", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDescription() {        return description;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setDescription", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDescription(String description) {        this.description = description;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getDetailDesc", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDetailDesc() {        return detailDesc;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setDetailDesc", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDetailDesc(String detailDesc) {        this.detailDesc = detailDesc;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getDetailHtml", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDetailHtml() {        return detailHtml;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setDetailHtml", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDetailHtml(String detailHtml) {        this.detailHtml = detailHtml;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getDetailMobileHtml", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDetailMobileHtml() {        return detailMobileHtml;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setDetailMobileHtml", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDetailMobileHtml(String detailMobileHtml) {        this.detailMobileHtml = detailMobileHtml;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        StringBuilder sb = new StringBuilder();        sb.append(getClass().getSimpleName());        sb.append(\" [\");        sb.append(\"Hash = \").append(hashCode());        sb.append(\", id=\").append(id);        sb.append(\", brandId=\").append(brandId);        sb.append(\", productCategoryId=\").append(productCategoryId);        sb.append(\", feightTemplateId=\").append(feightTemplateId);        sb.append(\", productAttributeCategoryId=\").append(productAttributeCategoryId);        sb.append(\", name=\").append(name);        sb.append(\", pic=\").append(pic);        sb.append(\", productSn=\").append(productSn);        sb.append(\", deleteStatus=\").append(deleteStatus);        sb.append(\", publishStatus=\").append(publishStatus);        sb.append(\", newStatus=\").append(newStatus);        sb.append(\", recommandStatus=\").append(recommandStatus);        sb.append(\", verifyStatus=\").append(verifyStatus);        sb.append(\", sort=\").append(sort);        sb.append(\", sale=\").append(sale);        sb.append(\", price=\").append(price);        sb.append(\", promotionPrice=\").append(promotionPrice);        sb.append(\", giftGrowth=\").append(giftGrowth);        sb.append(\", giftPoint=\").append(giftPoint);        sb.append(\", usePointLimit=\").append(usePointLimit);        sb.append(\", subTitle=\").append(subTitle);        sb.append(\", originalPrice=\").append(originalPrice);        sb.append(\", stock=\").append(stock);        sb.append(\", lowStock=\").append(lowStock);        sb.append(\", unit=\").append(unit);        sb.append(\", weight=\").append(weight);        sb.append(\", previewStatus=\").append(previewStatus);        sb.append(\", serviceIds=\").append(serviceIds);        sb.append(\", keywords=\").append(keywords);        sb.append(\", note=\").append(note);        sb.append(\", albumPics=\").append(albumPics);        sb.append(\", detailTitle=\").append(detailTitle);        sb.append(\", promotionStartTime=\").append(promotionStartTime);        sb.append(\", promotionEndTime=\").append(promotionEndTime);        sb.append(\", promotionPerLimit=\").append(promotionPerLimit);        sb.append(\", promotionType=\").append(promotionType);        sb.append(\", brandName=\").append(brandName);        sb.append(\", productCategoryName=\").append(productCategoryName);        sb.append(\", description=\").append(description);        sb.append(\", detailDesc=\").append(detailDesc);        sb.append(\", detailHtml=\").append(detailHtml);        sb.append(\", detailMobileHtml=\").append(detailMobileHtml);        sb.append(\", serialVersionUID=\").append(serialVersionUID);        sb.append(\"]\");        return sb.toString();    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProduct.java", "stars": "2", "class": {"name": "PmsProduct", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getBest", "params": ["Collection<K>", "V"], "throws": null, "modifiers": ["public"], "return_type": "K", "snippet": "  public K getBest(final Collection<K> candidateList, final V dispatchingObject) {    // shortcut if the candidateList is empty.    if (null == candidateList || candidateList.size() == 0) {      logger.error(\"failed to getNext candidate as the passed candidateList is null or empty.\");      return null;    }    logger.debug(\"start candidate selection logic.\");    logger.debug(String.format(\"candidate count before filtering: %s\", candidateList.size()));    // to keep the input untouched, we will form up a new list based off the filtering result.    Collection<K> filteredList = new ArrayList<>();    if (null != this.filter) {      for (final K candidateInfo : candidateList) {        if (this.filter.filterTarget(candidateInfo, dispatchingObject)) {          filteredList.add(candidateInfo);        }      }    } else {      filteredList = candidateList;      logger.debug(\"skipping the candidate filtering as the filter object is not specifed.\");    }    logger.debug(String.format(\"candidate count after filtering: %s\", filteredList.size()));    if (filteredList.size() == 0) {      logger.debug(\"failed to select candidate as the filtered candidate list is empty.\");      return null;    }    if (null == this.comparator) {      logger.debug(          \"candidate comparator is not specified, default hash code comparator class will be used.\");    }    // final work - find the best candidate from the filtered list.    final K executor = Collections.max(filteredList, this.comparator);    logger.debug(String.format(\"candidate selected %s\",        null == executor ? \"(null)\" : executor.toString()));    return executor;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/selector/CandidateSelector.java", "stars": "18", "class": {"name": "CandidateSelector", "extends": null, "implements": ["Selector"], "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getName() {    return \"CandidateSelector\";  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/selector/CandidateSelector.java", "stars": "18", "class": {"name": "CandidateSelector", "extends": null, "implements": ["Selector"], "modifiers": ["public"]}}, {"method_name": "contextLoads", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid contextLoads() {\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/test/java/com/capgemini/drinkanddelight/DrinkandDelightsprintOracleApplicationTests.java", "stars": "1", "class": {"name": "DrinkandDelightsprintOracleApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "call", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "String", "snippet": "    public String call() throws Exception {        Thread.sleep(1000);        //\u8fd4\u56de\u6267\u884c\u5f53\u524d Callable \u7684\u7ebf\u7a0b\u540d\u5b57        return Thread.currentThread().getName();    }", "url": "https://raw.githubusercontent.com/Snailclimb/JavaGuide/master/code/java/ThreadPoolExecutorDemo/src/callable/MyCallable.java", "stars": "78246", "class": {"name": "MyCallable", "extends": null, "implements": ["Callable"], "modifiers": ["public"]}}, {"method_name": "nextStream", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "InputStream", "snippet": "    public InputStream nextStream() throws IOException {        if(shutdown){            return null;        }        if(null != stream){            closeStream();        }        if(byteBlock != ByteBlock.TERMINATE){            //set byteBlock null            byteBlock = null;            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();            int len = -1;            while((len = read0(tmpBuf, 0, tmpBuf.length)) > 0){                byteArrayOutputStream.write(tmpBuf, 0, len);            }            if( byteBlock != ByteBlock.TERMINATE){                streamMeta = byteArrayOutputStream.toByteArray();                byteBlock = null;                stream =  new ChannelInputStream();                return stream;            }        }        return null;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/stream/ChannelInput.java", "stars": "23", "class": {"name": "ChannelInput", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "streamMetaData", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "StreamMeta", "snippet": "    public StreamMeta streamMetaData(String encoding){        try{            String metaJson = new String(streamMeta, encoding);            return JSON.parseObject(metaJson, StreamMeta.class);        }catch(Exception e){            throw DataXException.asDataXException(FrameworkErrorCode.RUNTIME_ERROR, e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/stream/ChannelInput.java", "stars": "23", "class": {"name": "ChannelInput", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shutdown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void shutdown(){        try {            if (null != stream) {                stream.close();            }        }catch(Exception e){            throw new RuntimeException(e);        }        this.shutdown = true;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/stream/ChannelInput.java", "stars": "23", "class": {"name": "ChannelInput", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "closeStream", "params": [], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void closeStream() throws IOException {        while(stream.read(this.tmpBuf, 0, this.tmpBuf.length) != -1){            ;        }        stream.close();        stream = null;        streamMeta = null;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/stream/ChannelInput.java", "stars": "23", "class": {"name": "ChannelInput", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "read0", "params": ["byte", "int", "int"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int read0(byte[] b, int off, int len){        pullFromChannel();        if(byteBuffer.remaining() <= 0){            return -1;        }        int start = off;        while(len > 0 && byteBuffer.remaining() > 0){            int rest = byteBuffer.remaining();            if(rest > len){                byteBuffer.get(b, off, len);                break;            }else{                byteBuffer.get(b, off, rest);                off += rest;                len -= rest;            }            pullFromChannel();        }        return off - start;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/stream/ChannelInput.java", "stars": "23", "class": {"name": "ChannelInput", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pullFromChannel", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void pullFromChannel(){        if(byteBlock != ByteBlock.SEPARATOR && byteBlock != ByteBlock.TERMINATE){            if(null == byteBuffer || byteBuffer.remaining() <= 0){                byteBlock = streamChannel.pull();                byteBuffer = byteBlock.getByteStored();                if(null == byteBuffer){                    byteBuffer = ByteBuffer.allocate(0);                }            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/stream/ChannelInput.java", "stars": "23", "class": {"name": "ChannelInput", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "read", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "int", "snippet": "        public int read() throws IOException {            if(isClosed){                throw DataXException.asDataXException(CommonErrorCode.SHUT_DOWN_TASK, \"channel input stream has been closed\");            }            pullFromChannel();            return byteBuffer.remaining() > 0? byteBuffer.get() & 0xFF : -1;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/stream/ChannelInput.java", "stars": "23", "class": {"name": "ChannelInputStream", "extends": "InputStream", "implements": null, "modifiers": ["public"]}}, {"method_name": "read", "params": ["byte", "int", "int"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "int", "snippet": "        public int read(byte[] b, int off, int len) throws IOException {            if(isClosed){                throw DataXException.asDataXException(CommonErrorCode.SHUT_DOWN_TASK, \"channel input stream has been closed\");            }            if(b == null){                throw new NullPointerException();            }else if(off < 0 || len < 0 || len > b.length - off){                throw new IndexOutOfBoundsException();            }else if(len == 0){                return 0;            }            return read0(b, off, len);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/stream/ChannelInput.java", "stars": "23", "class": {"name": "ChannelInputStream", "extends": "InputStream", "implements": null, "modifiers": ["public"]}}, {"method_name": "close", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "        public void close() throws IOException {            isClosed = true;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/stream/ChannelInput.java", "stars": "23", "class": {"name": "ChannelInputStream", "extends": "InputStream", "implements": null, "modifiers": ["public"]}}, {"method_name": "available", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "int", "snippet": "        public int available() throws IOException {            throw DataXException.asDataXException(CommonErrorCode.RUNTIME_ERROR, \"channel input stream doesn't support method named 'available'\");        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/stream/ChannelInput.java", "stars": "23", "class": {"name": "ChannelInputStream", "extends": "InputStream", "implements": null, "modifiers": ["public"]}}, {"method_name": "getAuthentication", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Authentication", "snippet": "    public Authentication getAuthentication() {        return this.authentication;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/security/context/SecurityContextImpl.java", "stars": "1", "class": {"name": "SecurityContextImpl", "extends": null, "implements": ["SecurityContext"], "modifiers": ["public"]}}, {"method_name": "setAuthentication", "params": ["Authentication"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAuthentication(Authentication authentication) {        this.authentication = authentication;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/security/context/SecurityContextImpl.java", "stars": "1", "class": {"name": "SecurityContextImpl", "extends": null, "implements": ["SecurityContext"], "modifiers": ["public"]}}, {"method_name": "onActivityCreated", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onActivityCreated(Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);        mItem = getArguments().getParcelable(EXTRA_ITEM);        mHeroImage = mItem.image;        setupAdapter();        setupDetailsOverviewRowPresenter();        final DetailsOverviewRow detailRow = createDetailsOverviewRow();        mAdapter.add(detailRow);        loadDetails();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVBaseDetailsFragment.java", "stars": "4", "class": {"name": "TVBaseDetailsFragment", "extends": "DetailsSupportFragment", "implements": ["MediaProvider", "OnActionClickedListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "loadDetails", "params": [], "throws": null, "modifiers": ["abstract"], "return_type": "void", "snippet": "    abstract void loadDetails();    abstract AbstractDetailsDescriptionPresenter getDetailPresenter();    abstract void onDetailLoaded();    protected ArrayObjectAdapter getObjectArrayAdapter() {        return mAdapter;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVBaseDetailsFragment.java", "stars": "4", "class": {"name": "TVBaseDetailsFragment", "extends": "DetailsSupportFragment", "implements": ["MediaProvider", "OnActionClickedListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "getDetailPresenter", "params": [], "throws": null, "modifiers": ["abstract"], "return_type": "AbstractDetailsDescriptionPresenter", "snippet": "    abstract AbstractDetailsDescriptionPresenter getDetailPresenter();    abstract void onDetailLoaded();    protected ArrayObjectAdapter getObjectArrayAdapter() {        return mAdapter;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVBaseDetailsFragment.java", "stars": "4", "class": {"name": "TVBaseDetailsFragment", "extends": "DetailsSupportFragment", "implements": ["MediaProvider", "OnActionClickedListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "onDetailLoaded", "params": [], "throws": null, "modifiers": ["abstract"], "return_type": "void", "snippet": "    abstract void onDetailLoaded();    protected ArrayObjectAdapter getObjectArrayAdapter() {        return mAdapter;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVBaseDetailsFragment.java", "stars": "4", "class": {"name": "TVBaseDetailsFragment", "extends": "DetailsSupportFragment", "implements": ["MediaProvider", "OnActionClickedListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "getObjectArrayAdapter", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "ArrayObjectAdapter", "snippet": "    protected ArrayObjectAdapter getObjectArrayAdapter() {        return mAdapter;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVBaseDetailsFragment.java", "stars": "4", "class": {"name": "TVBaseDetailsFragment", "extends": "DetailsSupportFragment", "implements": ["MediaProvider", "OnActionClickedListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "getMediaItem", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Media", "snippet": "    public Media getMediaItem() {        return mItem;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVBaseDetailsFragment.java", "stars": "4", "class": {"name": "TVBaseDetailsFragment", "extends": "DetailsSupportFragment", "implements": ["MediaProvider", "OnActionClickedListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDestroy() {        super.onDestroy();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVBaseDetailsFragment.java", "stars": "4", "class": {"name": "TVBaseDetailsFragment", "extends": "DetailsSupportFragment", "implements": ["MediaProvider", "OnActionClickedListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "setupAdapter", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setupAdapter() {        mPresenterSelector = new ClassPresenterSelector();        createPresenters(mPresenterSelector);        mAdapter = createAdapter(mPresenterSelector);        setAdapter(mAdapter);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVBaseDetailsFragment.java", "stars": "4", "class": {"name": "TVBaseDetailsFragment", "extends": "DetailsSupportFragment", "implements": ["MediaProvider", "OnActionClickedListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "createPresenters", "params": ["ClassPresenterSelector"], "throws": null, "modifiers": ["abstract"], "return_type": "ClassPresenterSelector", "snippet": "    abstract ClassPresenterSelector createPresenters(ClassPresenterSelector selector);    protected ArrayObjectAdapter createAdapter(PresenterSelector selector) {        return new ArrayObjectAdapter(selector);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVBaseDetailsFragment.java", "stars": "4", "class": {"name": "TVBaseDetailsFragment", "extends": "DetailsSupportFragment", "implements": ["MediaProvider", "OnActionClickedListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "createAdapter", "params": ["PresenterSelector"], "throws": null, "modifiers": ["protected"], "return_type": "ArrayObjectAdapter", "snippet": "    protected ArrayObjectAdapter createAdapter(PresenterSelector selector) {        return new ArrayObjectAdapter(selector);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVBaseDetailsFragment.java", "stars": "4", "class": {"name": "TVBaseDetailsFragment", "extends": "DetailsSupportFragment", "implements": ["MediaProvider", "OnActionClickedListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "setupDetailsOverviewRowPresenter", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setupDetailsOverviewRowPresenter() {        // Set detail background and style.        FullWidthDetailsOverviewRowPresenter headerPresenter = new FullWidthDetailsOverviewRowPresenter(getDetailPresenter(),                new DetailsOverviewLogoPresenter());        headerPresenter.setBackgroundColor(mItem.color);        headerPresenter.setOnActionClickedListener(this);        FullWidthDetailsOverviewSharedElementHelper helper = new FullWidthDetailsOverviewSharedElementHelper();        helper.setSharedElementEnterTransition(getActivity(), TVMediaDetailActivity.SHARED_ELEMENT_NAME);        headerPresenter.setListener(helper);        headerPresenter.setParticipatingEntranceTransition(false);        mPresenterSelector.addClassPresenter(DetailsOverviewRow.class, headerPresenter);        mPresenterSelector.addClassPresenter(ListRow.class, new ListRowPresenter());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVBaseDetailsFragment.java", "stars": "4", "class": {"name": "TVBaseDetailsFragment", "extends": "DetailsSupportFragment", "implements": ["MediaProvider", "OnActionClickedListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "createDetailsOverviewRow", "params": [], "throws": null, "modifiers": ["private"], "return_type": "DetailsOverviewRow", "snippet": "    private DetailsOverviewRow createDetailsOverviewRow() {        final DetailsOverviewRow detailsRow = new DetailsOverviewRow(mItem);        Picasso.get().load(mHeroImage).into(new Target() {            @Override            public void onBitmapLoaded(Bitmap bitmap, Picasso.LoadedFrom from) {                detailsRow.setImageBitmap(getActivity(), bitmap);                mAdapter.notifyArrayItemRangeChanged(0, mAdapter.size());            }            @TargetApi(Build.VERSION_CODES.LOLLIPOP)            @Override            public void onBitmapFailed(Exception exc, Drawable errorDrawable) {                if(VersionUtils.isLollipop())                    getActivity().startPostponedEnterTransition();            }            @Override            public void onPrepareLoad(Drawable placeHolderDrawable) {            }        });        return detailsRow;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVBaseDetailsFragment.java", "stars": "4", "class": {"name": "TVBaseDetailsFragment", "extends": "DetailsSupportFragment", "implements": ["MediaProvider", "OnActionClickedListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "addAction", "params": ["Action"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void addAction(Action action) {        DetailsOverviewRow detailRow = (DetailsOverviewRow) mAdapter.get(0);        detailRow.addAction(action);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVBaseDetailsFragment.java", "stars": "4", "class": {"name": "TVBaseDetailsFragment", "extends": "DetailsSupportFragment", "implements": ["MediaProvider", "OnActionClickedListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "addActions", "params": ["Media"], "throws": null, "modifiers": ["abstract"], "return_type": "void", "snippet": "    abstract void addActions(Media item);    @Override    public void onSuccess(MediaProvider.Filters filters, ArrayList<Media> items) {        if (!isAdded()) return;        if (null == items || items.size() == 0) return;        Media itemDetail = items.get(0);        mItem = itemDetail;        ThreadUtils.runOnUiThread(new Runnable() {            @Override public void run() {                final DetailsOverviewRow detailRow = createDetailsOverviewRow();                mAdapter.replace(0, detailRow);                onDetailLoaded();            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVBaseDetailsFragment.java", "stars": "4", "class": {"name": "TVBaseDetailsFragment", "extends": "DetailsSupportFragment", "implements": ["MediaProvider", "OnActionClickedListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "onSuccess", "params": ["MediaProvider", "ArrayList<Media>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSuccess(MediaProvider.Filters filters, ArrayList<Media> items) {        if (!isAdded()) return;        if (null == items || items.size() == 0) return;        Media itemDetail = items.get(0);        mItem = itemDetail;        ThreadUtils.runOnUiThread(new Runnable() {            @Override public void run() {                final DetailsOverviewRow detailRow = createDetailsOverviewRow();                mAdapter.replace(0, detailRow);                onDetailLoaded();            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVBaseDetailsFragment.java", "stars": "4", "class": {"name": "TVBaseDetailsFragment", "extends": "DetailsSupportFragment", "implements": ["MediaProvider", "OnActionClickedListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "onFailure", "params": ["Exception"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onFailure(Exception e) {        //todo: on load failure    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVBaseDetailsFragment.java", "stars": "4", "class": {"name": "TVBaseDetailsFragment", "extends": "DetailsSupportFragment", "implements": ["MediaProvider", "OnActionClickedListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "doValidate", "params": ["Configuration"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void doValidate(Configuration allConfig) {        Validate.isTrue(allConfig != null, \"\");        coreValidate(allConfig);        pluginValidate(allConfig);        jobValidate(allConfig);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/util/ConfigurationValidate.java", "stars": "23", "class": {"name": "ConfigurationValidate", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "coreValidate", "params": ["Configuration"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void coreValidate(Configuration allconfig) {        return;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/util/ConfigurationValidate.java", "stars": "23", "class": {"name": "ConfigurationValidate", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pluginValidate", "params": ["Configuration"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void pluginValidate(Configuration allConfig) {        return;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/util/ConfigurationValidate.java", "stars": "23", "class": {"name": "ConfigurationValidate", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "jobValidate", "params": ["Configuration"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void jobValidate(Configuration allConfig) {        return;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/util/ConfigurationValidate.java", "stars": "23", "class": {"name": "ConfigurationValidate", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "test", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void test(){        List<XxlJobLog> list = xxlJobLogDao.pageList(0, 10, 1, 1, null, null, 1);        int list_count = xxlJobLogDao.pageListCount(0, 10, 1, 1, null, null, 1);        XxlJobLog log = new XxlJobLog();        log.setJobGroup(1);        log.setJobId(1);        long ret1 = xxlJobLogDao.save(log);        XxlJobLog dto = xxlJobLogDao.load(log.getId());        log.setTriggerTime(new Date());        log.setTriggerCode(1);        log.setTriggerMsg(\"1\");        log.setExecutorAddress(\"1\");        log.setExecutorHandler(\"1\");        log.setExecutorParam(\"1\");        ret1 = xxlJobLogDao.updateTriggerInfo(log);        dto = xxlJobLogDao.load(log.getId());        log.setHandleTime(new Date());        log.setHandleCode(2);        log.setHandleMsg(\"2\");        ret1 = xxlJobLogDao.updateHandleInfo(log);        dto = xxlJobLogDao.load(log.getId());        List<Long> ret4 = xxlJobLogDao.findClearLogIds(1, 1, new Date(), 100, 100);        int ret2 = xxlJobLogDao.delete(log.getJobId());    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/test/java/com/avon/rga/dao/XxlJobLogDaoTest.java", "stars": "1", "class": {"name": "XxlJobLogDaoTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onDrawerClosed", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDrawerClosed (android.view.View p0)\t{\t\tn_onDrawerClosed (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/NavigationPageRenderer_DrawerMultiplexedListener.java", "stars": "2", "class": {"name": "NavigationPageRenderer_DrawerMultiplexedListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onDrawerClosed", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDrawerClosed (android.view.View p0);\tpublic void onDrawerOpened (android.view.View p0)\t{\t\tn_onDrawerOpened (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/NavigationPageRenderer_DrawerMultiplexedListener.java", "stars": "2", "class": {"name": "NavigationPageRenderer_DrawerMultiplexedListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onDrawerOpened", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDrawerOpened (android.view.View p0)\t{\t\tn_onDrawerOpened (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/NavigationPageRenderer_DrawerMultiplexedListener.java", "stars": "2", "class": {"name": "NavigationPageRenderer_DrawerMultiplexedListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onDrawerOpened", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDrawerOpened (android.view.View p0);\tpublic void onDrawerSlide (android.view.View p0, float p1)\t{\t\tn_onDrawerSlide (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/NavigationPageRenderer_DrawerMultiplexedListener.java", "stars": "2", "class": {"name": "NavigationPageRenderer_DrawerMultiplexedListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onDrawerSlide", "params": ["android", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDrawerSlide (android.view.View p0, float p1)\t{\t\tn_onDrawerSlide (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/NavigationPageRenderer_DrawerMultiplexedListener.java", "stars": "2", "class": {"name": "NavigationPageRenderer_DrawerMultiplexedListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onDrawerSlide", "params": ["android", "float"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDrawerSlide (android.view.View p0, float p1);\tpublic void onDrawerStateChanged (int p0)\t{\t\tn_onDrawerStateChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/NavigationPageRenderer_DrawerMultiplexedListener.java", "stars": "2", "class": {"name": "NavigationPageRenderer_DrawerMultiplexedListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onDrawerStateChanged", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDrawerStateChanged (int p0)\t{\t\tn_onDrawerStateChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/NavigationPageRenderer_DrawerMultiplexedListener.java", "stars": "2", "class": {"name": "NavigationPageRenderer_DrawerMultiplexedListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onDrawerStateChanged", "params": ["int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDrawerStateChanged (int p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/NavigationPageRenderer_DrawerMultiplexedListener.java", "stars": "2", "class": {"name": "NavigationPageRenderer_DrawerMultiplexedListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/NavigationPageRenderer_DrawerMultiplexedListener.java", "stars": "2", "class": {"name": "NavigationPageRenderer_DrawerMultiplexedListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/NavigationPageRenderer_DrawerMultiplexedListener.java", "stars": "2", "class": {"name": "NavigationPageRenderer_DrawerMultiplexedListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //2.\u4f7f\u7528Scanner\u83b7\u53d6\u7528\u6237\u8f93\u5165\u7684\u6ce8\u518c\u7684\u7528\u6237\u540d(\u524d\u7aef,\u9875\u9762)        Scanner sc = new Scanner(System.in);        System.out.println(\"\u8bf7\u8f93\u5165\u60a8\u8981\u6ce8\u518c\u7684\u7528\u6237\u540d:\");        String username = sc.next();        checkUsername(username);    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/16.%E3%80%90%E5%BC%82%E5%B8%B8%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%91-%E7%AC%94%E8%AE%B0/code/05_ExceptionAndThread/src/com/itheima/demo04/MyException/Demo02RegisterException.java", "stars": "2", "class": {"name": "Demo02RegisterException", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkUsername", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void checkUsername(String username)  {        //\u904d\u5386\u5b58\u50a8\u5df2\u7ecf\u6ce8\u518c\u8fc7\u7528\u6237\u540d\u7684\u6570\u7ec4,\u83b7\u53d6\u6bcf\u4e00\u4e2a\u7528\u6237\u540d        for (String name : usernames) {            //\u4f7f\u7528\u83b7\u53d6\u5230\u7684\u7528\u6237\u540d\u548c\u7528\u6237\u8f93\u5165\u7684\u7528\u6237\u540d\u6bd4\u8f83            if(name.equals(username)){                //true:\u7528\u6237\u540d\u5df2\u7ecf\u5b58\u5728,\u629b\u51faRegisterException\u5f02\u5e38,\u544a\u77e5\u7528\u6237\"\u4eb2\uff0c\u8be5\u7528\u6237\u540d\u5df2\u7ecf\u88ab\u6ce8\u518c\";                throw new RegisterException(\"\u4eb2\uff0c\u8be5\u7528\u6237\u540d\u5df2\u7ecf\u88ab\u6ce8\u518c\");//\u629b\u51fa\u8fd0\u884c\u671f\u5f02\u5e38,\u65e0\u9700\u5904\u7406,\u4ea4\u7ed9JVM\u5904\u7406,\u4e2d\u65ad\u5904\u7406            }        }        //\u5982\u679c\u5faa\u73af\u7ed3\u675f\u4e86,\u8fd8\u6ca1\u6709\u627e\u5230\u91cd\u590d\u7684\u7528\u6237\u540d,\u63d0\u793a\u7528\u6237\"\u606d\u559c\u60a8,\u6ce8\u518c\u6210\u529f!\";        System.out.println(\"\u606d\u559c\u60a8,\u6ce8\u518c\u6210\u529f!\");    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/16.%E3%80%90%E5%BC%82%E5%B8%B8%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%91-%E7%AC%94%E8%AE%B0/code/05_ExceptionAndThread/src/com/itheima/demo04/MyException/Demo02RegisterException.java", "stars": "2", "class": {"name": "Demo02RegisterException", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTopStack", "params": ["Frame<AbstractValue>"], "throws": null, "modifiers": ["public", "static"], "return_type": "AbstractValue", "snippet": "\tpublic static AbstractValue getTopStack(Frame<AbstractValue> frame) {\t\treturn frame.getStack(frame.getStackSize() - 1);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/util/FrameUtil.java", "stars": "12", "class": {"name": "FrameUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTopStackLiteral", "params": ["Frame<AbstractValue>"], "throws": null, "modifiers": ["public", "static"], "return_type": "T", "snippet": "\tpublic static <T> T getTopStackLiteral(Frame<AbstractValue> frame) {\t\treturn (T) getTopStack(frame).getValue();\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/util/FrameUtil.java", "stars": "12", "class": {"name": "FrameUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStackFromTop", "params": ["Frame<AbstractValue>", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "AbstractValue", "snippet": "\tpublic static AbstractValue getStackFromTop(Frame<AbstractValue> frame, int offset) {\t\treturn frame.getStack(frame.getStackSize() - (1 + offset));\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/util/FrameUtil.java", "stars": "12", "class": {"name": "FrameUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStackLiteralFromTop", "params": ["Frame<AbstractValue>", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "T", "snippet": "\tpublic static <T> T getStackLiteralFromTop(Frame<AbstractValue> frame, int offset) {\t\treturn (T) getStackFromTop(frame, offset).getValue();\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/util/FrameUtil.java", "stars": "12", "class": {"name": "FrameUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStackArgumentLiterals", "params": ["Frame<AbstractValue>", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "Object", "snippet": "\tpublic static Object[] getStackArgumentLiterals(Frame<AbstractValue> frame, int argCount) {\t\tObject[] args = new Object[argCount];\t\tfor (int i = 0; i < argCount; i++)\t\t\targs[i] = getStackLiteralFromTop(frame, (argCount - i) - 1);\t\treturn args;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/util/FrameUtil.java", "stars": "12", "class": {"name": "FrameUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        SpringApplication.run(KafkaProducerApplication.class, args);    }", "url": "https://raw.githubusercontent.com/camelya58/kafka-sample/master/kafka-producer/src/main/java/com/example/kafkaproducer/KafkaProducerApplication.java", "stars": "2", "class": {"name": "KafkaProducerApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "rank", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "\tpublic long rank( long pos ) {\t\t//Commented by FC> if ( ASSERTS ) assert pos >= 0;\t\t//Commented by FC> if ( ASSERTS ) assert pos <= bitVector.length();\t\t// This test can be eliminated if there is always an additional word at the end of the bit array.\t\tif ( pos > lastOne ) return numOnes;\t\tfinal int word = (int)( pos / 64 );\t\tfinal int block = word / 4 & ~1;\t\tfinal int offset = word % 8 - 1;\t\treturn count[ block ] + ( count[ block + 1 ] >>> ( offset + ( offset >>> 32 - 4 & 0x8 ) ) * 9 & 0x1FF ) + Long.bitCount( bits[ word ] & ( ( 1L << pos % 64 ) - 1 ) );\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Rank9.java", "stars": "2", "class": {"name": "Rank9", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "numBits", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "\tpublic long numBits() {\t\treturn count.length * (long)Long.SIZE;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Rank9.java", "stars": "2", "class": {"name": "Rank9", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "count", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "\tpublic long count() {\t\treturn numOnes;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Rank9.java", "stars": "2", "class": {"name": "Rank9", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "rank", "params": ["long", "long"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "\tpublic long rank( long from, long to ) {\t\treturn rank( to ) - rank( from );\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Rank9.java", "stars": "2", "class": {"name": "Rank9", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "lastOne", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "\tpublic long lastOne() {\t\treturn lastOne;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Rank9.java", "stars": "2", "class": {"name": "Rank9", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSquare", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getSquare() {        return square;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/model/Region.java", "stars": "2", "class": {"name": "Region", "extends": "AnyData", "implements": null, "modifiers": ["public"]}}, {"method_name": "getAdminCenter", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getAdminCenter() {        return adminCenter;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/model/Region.java", "stars": "2", "class": {"name": "Region", "extends": "AnyData", "implements": null, "modifiers": ["public"]}}, {"method_name": "getGovernor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getGovernor() {        return governor;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/model/Region.java", "stars": "2", "class": {"name": "Region", "extends": "AnyData", "implements": null, "modifiers": ["public"]}}, {"method_name": "showDialog", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "Dlg", "snippet": "    public Dlg showDialog(boolean editable) {        final Dlg dlg = new RegionDlg(this);        dlg.setEditable(editable);        dlg.setVisible(true);        return dlg;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/model/Region.java", "stars": "2", "class": {"name": "Region", "extends": "AnyData", "implements": null, "modifiers": ["public"]}}, {"method_name": "showSonDialog", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Dlg", "snippet": "    public Dlg showSonDialog() {        final Dlg dlg = new DistrictDlg();        dlg.setVisible(true);        return dlg;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/model/Region.java", "stars": "2", "class": {"name": "Region", "extends": "AnyData", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBackPressed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBackPressed() {        int count = getSupportFragmentManager().getBackStackEntryCount();        if (count == 0) {            super.onBackPressed();        }        else {            getSupportFragmentManager().beginTransaction().replace(R.id.main_hu_container,new home_fragment()).commit();            getSupportFragmentManager().popBackStack();        }    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/home.java", "stars": "2", "class": {"name": "home", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        requestWindowFeature(Window.FEATURE_NO_TITLE);        this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_home);        getSupportFragmentManager().beginTransaction().replace(R.id.main_hu_container,new home_fragment()).commit();        SharedPreferences sf=getSharedPreferences(\"Login data\",MODE_PRIVATE);        s=sf.getString(\"user\",\"unable to fetch\");        drawer = findViewById(R.id.drawer_layout);        navigationView = findViewById(R.id.nav_view);        ConstraintLayout c= findViewById(R.id.bcontrol);        Button b1=c.findViewById(R.id.navbarcoming);        b1.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                AlphaAnimation buttonClick = new AlphaAnimation(1F, 0.8F);                v.startAnimation(buttonClick);                Vibrator vv = (Vibrator) getApplicationContext().getSystemService(Context.VIBRATOR_SERVICE);                vv.vibrate(100);                drawer.openDrawer(GravityCompat.START);                lt=findViewById(R.id.nameo);                lt.setText(s);                TextDrawable drawable = TextDrawable.builder().buildRound(s.substring(0,1), Color.BLUE);                CircleImageView iv=findViewById(R.id.photoo);                iv.setBackground(drawable);            }        });        Button b2=c.findViewById(R.id.noticoming);        b2.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Toast.makeText(getApplicationContext(),\"Notifications\",Toast.LENGTH_SHORT).show();                AlphaAnimation buttonClick = new AlphaAnimation(1F, 0.8F);                v.startAnimation(buttonClick);                Vibrator vv = (Vibrator) getApplicationContext().getSystemService(Context.VIBRATOR_SERVICE);                vv.vibrate(100);                getSupportFragmentManager().beginTransaction().replace(R.id.main_hu_container,new notification_fragment()).addToBackStack(null).commit();                getSupportFragmentManager().beginTransaction().addToBackStack(\"notification\").commit();            }        });        navigationView.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() {            @Override            public boolean onNavigationItemSelected(@NonNull MenuItem menuItem) {                int l=menuItem.getItemId();                if(l==R.id.nav_home){                    getSupportFragmentManager().beginTransaction().replace(R.id.main_hu_container,new home_fragment()).addToBackStack(null).commit();                }                if(l==R.id.nav_logout){                    Toast.makeText(getApplicationContext(),\"Logging Out\",Toast.LENGTH_SHORT);                    SharedPreferences sf=getSharedPreferences(\"Login Data\",MODE_PRIVATE);                    SharedPreferences.Editor edit=sf.edit();                    edit.putInt(\"islogged\",0);                    edit.commit();                    Intent i = new Intent(getApplicationContext(),login.class);                    startActivity(i);                    finish();                }                if(l==R.id.nav_about){                    getSupportFragmentManager().beginTransaction().replace(R.id.main_hu_container,new about_fragment()).addToBackStack(null).commit();                    getSupportFragmentManager().beginTransaction().addToBackStack(\"about\").commit();                }                drawer.closeDrawer(GravityCompat.START);                return true;            }        });    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/home.java", "stars": "2", "class": {"name": "home", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getChannel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ChannelInfo", "snippet": "    public ChannelInfo getChannel() {        return channel;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/ProgramList.java", "stars": "4", "class": {"name": "ProgramList", "extends": null, "implements": ["JSONSerializable"], "modifiers": ["public"]}}, {"method_name": "getProgramList", "params": [], "throws": null, "modifiers": ["public"], "return_type": "JSONArray", "snippet": "    public JSONArray getProgramList() {        return programList;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/ProgramList.java", "stars": "4", "class": {"name": "ProgramList", "extends": null, "implements": ["JSONSerializable"], "modifiers": ["public"]}}, {"method_name": "toJSONObject", "params": [], "throws": ["JSONException"], "modifiers": ["public"], "return_type": "JSONObject", "snippet": "    public JSONObject toJSONObject() throws JSONException {        JSONObject obj = new JSONObject();        obj.put(\"channel\", channel != null ? channel.toString() : null);        obj.put(\"programList\", programList != null ? programList.toString() : null);        return obj;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/ProgramList.java", "stars": "4", "class": {"name": "ProgramList", "extends": null, "implements": ["JSONSerializable"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ProgressBarRenderer.java", "stars": "2", "class": {"name": "ProgressBarRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ProgressBarRenderer.java", "stars": "2", "class": {"name": "ProgressBarRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "accept", "params": ["File"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean accept(File file) {        return accept(file, file.getName());    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/listen/ConfigFilter.java", "stars": "2", "class": {"name": "ConfigFilter", "extends": null, "implements": ["IOFileFilter"], "modifiers": ["public"]}}, {"method_name": "accept", "params": ["File", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean accept(File file, String name) {        return \"config.toml\".equals(name);    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/listen/ConfigFilter.java", "stars": "2", "class": {"name": "ConfigFilter", "extends": null, "implements": ["IOFileFilter"], "modifiers": ["public"]}}, {"method_name": "mainMethod", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String mainMethod(@RequestParam(value = \"name\", defaultValue = \"Util\") String name,                             @RequestParam(value = \"author\", defaultValue = \"Vin\") String author) {        return MessageUtil.get(\"welcome\", author, name);    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/util/src/main/java/com/integration/util/controller/UtilController.java", "stars": "2", "class": {"name": "UtilController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args)\t{\t\tint a = 1;\t\tint k = 3;\t\tint n = 5;\t\tfor(int i = 1;i <= k;i++)\t\t\ta = a * (n - i +1) / i;\t\tSystem.out.println(a);\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/ray/Fordemo.java", "stars": "2", "class": {"name": "Fordemo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": ["InitConfigEntity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run(InitConfigEntity configEntity) {        // log.info(\"\u4e3b\u8282\u70b9\u5f00\u59cb\u5b89\u88c5\u6d41\u7a0b...\");        log.info(\"The master node starts the installation process...\");        // \u5c06\u6240\u6709\u7684\u4ece\u8282\u70b9\u6ce8\u518c\u5230\u89d2\u8272\u5217\u8868        registerSlaveServers(configEntity);        // log.info(\"\u4e3b\u8282\u70b9\u6dfb\u52a0\u5230\u89d2\u8272\u5217\u8868\");        log.info(\"Add the master node to the role list\");        // \u4e5f\u628a\u81ea\u5df1\u6dfb\u52a0\u5230\u89d2\u8272\u5217\u8868\u91cc        List<String> allMyIps = NetUtil.getLocalIPList();        for (String ip : allMyIps) {            roleService.addServerRole(ip, this.httpServerPort, configEntity);        }        List<RoleEnum> allMyRoles = this.getAllMyRoles();        // log.info(\"\u4e3b\u8282\u70b9\u590d\u5236\u5b89\u88c5\u6587\u4ef6\");        log.info(\"Copy the installation file to the master node\");        // \u4e3a\u81ea\u5df1\u590d\u5236\u5b89\u88c5\u6587\u4ef6        fileService.copyInstallFiles(allMyIps, allMyRoles, configEntity);        // \u4fee\u6539\u81ea\u5df1\u7684\u72b6\u6001        // log.info(\"\u4e3b\u8282\u70b9\u4fee\u6539\u5b89\u88c5\u72b6\u6001\");        log.info(\"Modify the master node status\");        for (String ip : allMyIps) {            this.rolesBiz.setServerStatus(ip, InstallStatusEnum.DOWNLOADED);        }        // \u4e3b\u8282\u70b9\u9700\u8981\u6240\u6709\u7684\u8bc1\u4e66\u6587\u4ef6        fileService.masterCopyCryptoConfig();        // \u542f\u52a8 fabric \u7f51\u7edc        if (this.globalConfig.getMaster() == 1) {            fileService.masterCopyConfigtxFile();            // \u542f\u52a8fabric\u7f51\u7edc            if (!createFabricGenesis(configEntity)) {                return;            }        }        // log.info(\"\u5c06\u5b89\u88c5\u5305\u63a8\u7ed9\u6bcf\u4e2a\u4ece\u8282\u70b9\");        log.info(\"Push the installation package to each slave node\");        pushInstallPackages(configEntity);        // log.info(\"\u5b89\u88c5 orderer\");        log.info(\"Install orderer\");        // \u9996\u5148\u5b89\u88c5 Orderer        installService.install(RoleEnum.ORDER, configEntity);        // log.info(\"\u5b89\u88c5 peer\");        log.info(\"Install peer\");        // \u5b89\u88c5 Peer        installService.install(RoleEnum.PEER, configEntity);        // log.info(\"\u7b49\u5f85\u6240\u6709\u8282\u70b9\u5b8c\u6210\u5b89\u88c5...\");        log.info(\"Wait for all nodes to complete the installation...\");        int retryCount = 1;        int retryTotal = 7;        while (true) {            if (checkAllServersSuccess()) {                break;            }            if (retryCount == retryTotal) {                // log.info(\"\u5b89\u88c5\u72b6\u6001\u67e5\u8be2\u8d85\u65f6\uff0c\u90e8\u7f72\u53ef\u80fd\u51fa\u73b0\u5f02\u5e38\uff0c\u8bf7\u6392\u67e5\uff01\");                log.info(\"Installation status query timed out, deployment may be abnormal, please check!\");                break;            }            try {                Thread.sleep(10000);            } catch (InterruptedException e) {                e.printStackTrace();            }            retryCount++;        }        // log.info(\"\u901a\u77e5\u6240\u6709\u670d\u52a1\u5668\u5b89\u88c5\u7ed3\u675f\");        log.info(\"Notify all servers that installation is complete\");        // \u901a\u77e5\u6240\u6709\u670d\u52a1\u5668\u7ed3\u675f        Set<String> serverUrl = getServersUrl();        remoteService.notifyNodesToEnd(serverUrl);    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/NewInstallBiz.java", "stars": "7", "class": {"name": "NewInstallBiz", "extends": null, "implements": ["InstallMode"], "modifiers": ["public"]}}, {"method_name": "registerSlaveServers", "params": ["InitConfigEntity"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void registerSlaveServers(InitConfigEntity configEntity) {        List<String> slaveServers = parseAllSlaveIps(configEntity);        for (String ip : slaveServers) {            roleService.addServerRole(ip, \"8080\", configEntity);        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/NewInstallBiz.java", "stars": "7", "class": {"name": "NewInstallBiz", "extends": null, "implements": ["InstallMode"], "modifiers": ["public"]}}, {"method_name": "getAllMyRoles", "params": [], "throws": null, "modifiers": ["private"], "return_type": "List<RoleEnum>", "snippet": "    private List<RoleEnum> getAllMyRoles() {        List<RoleEnum> roleList = new ArrayList<>();        Map<RoleEnum, List<ServerEntity>> allServers = this.rolesBiz.getRolesMap();        List<String> ipList = NetUtil.getLocalIPList();        for (String ip : ipList) {            for (RoleEnum role : allServers.keySet()) {                List<ServerEntity> serverList = allServers.get(role);                if (serverList.stream().anyMatch(s -> s.getHost().equals(ip))) {                    roleList.add(role);                }            }        }        return roleList;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/NewInstallBiz.java", "stars": "7", "class": {"name": "NewInstallBiz", "extends": null, "implements": ["InstallMode"], "modifiers": ["public"]}}, {"method_name": "createFabricGenesis", "params": ["InitConfigEntity"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean createFabricGenesis(InitConfigEntity configEntity) {        // log.info(\"\u5f00\u59cb fabric \u521b\u4e16\");        log.info(\"begin to create the genesis block\");        String fabricDir = modeService.getInstallPath() + \"channel-artifacts\" + File.separator;        FileUtil.makeFilePath(fabricDir, true);        String sysChannelName = configEntity.getNetwork() + \"-sys-channel\";        String cmd = CacheUtil.getConfigtxgenFilePath() + \" -profile SampleMultiNodeEtcdRaft -channelID \" + sysChannelName + \" -outputBlock \" + fabricDir + \"genesis.block\";        // log.info(\"\u751f\u6210\u521b\u4e16\u5757-\u6267\u884c\u547d\u4ee4\uff1a\" + cmd);        log.info(\"Generate genesis block -- execute command\uff1a\" + cmd);        try {            ProcessUtil.Result res = ProcessUtil.execCmd(cmd, null, modeService.getInstallPath());            if (res.getCode() == 0) {                // log.info(\"\u521b\u4e16\u6210\u529f\");                log.info(\"Genesis block create success\");                return true;            } else {                // log.warn(\"\u521b\u4e16\u5931\u8d25\");                log.warn(\"Genesis block create failed\");            }        } catch (Exception e) {            // log.error(\"\u751f\u6210\u521b\u4e16\u5757\u5f02\u5e38\", e);            log.error(\"Exception occur when the Genesis block create \", e);            e.printStackTrace();        }        return false;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/NewInstallBiz.java", "stars": "7", "class": {"name": "NewInstallBiz", "extends": null, "implements": ["InstallMode"], "modifiers": ["public"]}}, {"method_name": "pushInstallPackages", "params": ["InitConfigEntity"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void pushInstallPackages(InitConfigEntity configEntity) {        //\u83b7\u53d6\u6240\u6709\u7684\u4ece\u8282\u70b9ip        List<String> allSlaveIps = parseAllSlaveIps(configEntity);        //\u63a8\u9001\u5b89\u88c5\u5305        for (String slaveIp : allSlaveIps) {            // log.info(String.format(\"\u5411\u4ece\u8282\u70b9 %s \u63a8\u9001\u5b89\u88c5\u5305\", slaveIp));            log.info(String.format(\"Push the installation package to the master node %s\", slaveIp));            remoteService.pushSlaveInstallPackage(slaveIp, configEntity);        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/NewInstallBiz.java", "stars": "7", "class": {"name": "NewInstallBiz", "extends": null, "implements": ["InstallMode"], "modifiers": ["public"]}}, {"method_name": "checkAllServersSuccess", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean checkAllServersSuccess() {        // \u68c0\u67e5\u662f\u5426\u6240\u6709\u670d\u52a1\u5668\u5b8c\u6210\u5b89\u88c5        Map<RoleEnum, List<ServerEntity>> rolesMap = this.rolesBiz.getRolesMap();        for (RoleEnum role : rolesMap.keySet()) {            List<ServerEntity> serverList = rolesMap.get(role);            for (ServerEntity s : serverList) {                if (s.getStatus() != InstallStatusEnum.SUCCESS) {                    return false;                }            }        }        return true;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/NewInstallBiz.java", "stars": "7", "class": {"name": "NewInstallBiz", "extends": null, "implements": ["InstallMode"], "modifiers": ["public"]}}, {"method_name": "getServersUrl", "params": [], "throws": null, "modifiers": ["private"], "return_type": "Set<String>", "snippet": "    private Set<String> getServersUrl() {        Set<String> serverUrls = new HashSet<>();        Map<RoleEnum, List<ServerEntity>> rolesMap = this.rolesBiz.getRolesMap();        for (RoleEnum role : rolesMap.keySet()) {            List<ServerEntity> serverList = rolesMap.get(role);            for (ServerEntity s : serverList) {                if (!NetUtil.ipIsMine(s.getHost())) {                    serverUrls.add(s.getHttpUrl());                }            }        }        return serverUrls;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/NewInstallBiz.java", "stars": "7", "class": {"name": "NewInstallBiz", "extends": null, "implements": ["InstallMode"], "modifiers": ["public"]}}, {"method_name": "parseAllSlaveIps", "params": ["InitConfigEntity"], "throws": null, "modifiers": ["private"], "return_type": "List<String>", "snippet": "    private List<String> parseAllSlaveIps(InitConfigEntity configEntity) {        List<String> allSlaveIps = new ArrayList<>();        parseSlaveIps(allSlaveIps, configEntity.getOrdererHostConfig());        parseSlaveIps(allSlaveIps, configEntity.getPeerHostConfig());        return allSlaveIps;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/NewInstallBiz.java", "stars": "7", "class": {"name": "NewInstallBiz", "extends": null, "implements": ["InstallMode"], "modifiers": ["public"]}}, {"method_name": "parseSlaveIps", "params": ["List<String>", "Map<String,String>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void parseSlaveIps(List<String> allSlaveIps, Map<String, String> hostConfig) {        for (String host : hostConfig.keySet()) {            String origIp = hostConfig.get(host);            int index = origIp.lastIndexOf(\":\");            String ip = origIp.substring(0, index);            if (!NetUtil.ipIsMine(ip)) {                allSlaveIps.add(ip);            }        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/biz/NewInstallBiz.java", "stars": "7", "class": {"name": "NewInstallBiz", "extends": null, "implements": ["InstallMode"], "modifiers": ["public"]}}, {"method_name": "processRequest", "params": ["GetRequest", "Socket"], "throws": ["ProxyCacheException", "IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void processRequest(GetRequest request, Socket socket) throws ProxyCacheException, IOException {        startProcessRequest();        try {            clientsCount.incrementAndGet();            proxyCache.processRequest(request, socket);        } finally {            finishProcessRequest();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServerClients.java", "stars": "2", "class": {"name": "HttpProxyCacheServerClients", "extends": null, "implements": null, "modifiers": ["final"]}}, {"method_name": "startProcessRequest", "params": [], "throws": ["ProxyCacheException"], "modifiers": ["synchronized", "private"], "return_type": "void", "snippet": "    private synchronized void startProcessRequest() throws ProxyCacheException {        proxyCache = proxyCache == null ? newHttpProxyCache() : proxyCache;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServerClients.java", "stars": "2", "class": {"name": "HttpProxyCacheServerClients", "extends": null, "implements": null, "modifiers": ["final"]}}, {"method_name": "finishProcessRequest", "params": [], "throws": null, "modifiers": ["synchronized", "private"], "return_type": "void", "snippet": "    private synchronized void finishProcessRequest() {        if (clientsCount.decrementAndGet() <= 0) {            proxyCache.shutdown();            proxyCache = null;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServerClients.java", "stars": "2", "class": {"name": "HttpProxyCacheServerClients", "extends": null, "implements": null, "modifiers": ["final"]}}, {"method_name": "registerCacheListener", "params": ["CacheListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void registerCacheListener(CacheListener cacheListener) {        listeners.add(cacheListener);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServerClients.java", "stars": "2", "class": {"name": "HttpProxyCacheServerClients", "extends": null, "implements": null, "modifiers": ["final"]}}, {"method_name": "unregisterCacheListener", "params": ["CacheListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void unregisterCacheListener(CacheListener cacheListener) {        listeners.remove(cacheListener);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServerClients.java", "stars": "2", "class": {"name": "HttpProxyCacheServerClients", "extends": null, "implements": null, "modifiers": ["final"]}}, {"method_name": "shutdown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void shutdown() {        listeners.clear();        if (proxyCache != null) {            proxyCache.registerCacheListener(null);            proxyCache.shutdown();            proxyCache = null;        }        clientsCount.set(0);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServerClients.java", "stars": "2", "class": {"name": "HttpProxyCacheServerClients", "extends": null, "implements": null, "modifiers": ["final"]}}, {"method_name": "getClientsCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getClientsCount() {        return clientsCount.get();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServerClients.java", "stars": "2", "class": {"name": "HttpProxyCacheServerClients", "extends": null, "implements": null, "modifiers": ["final"]}}, {"method_name": "newHttpProxyCache", "params": [], "throws": ["ProxyCacheException"], "modifiers": ["private"], "return_type": "HttpProxyCache", "snippet": "    private HttpProxyCache newHttpProxyCache() throws ProxyCacheException {        HttpUrlSource source = new HttpUrlSource(url, config.sourceInfoStorage, config.headerInjector);        FileCache cache = new FileCache(config.generateCacheFile(url), config.diskUsage);        HttpProxyCache httpProxyCache = new HttpProxyCache(source, cache);        httpProxyCache.registerCacheListener(uiCacheListener);        return httpProxyCache;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServerClients.java", "stars": "2", "class": {"name": "HttpProxyCacheServerClients", "extends": null, "implements": null, "modifiers": ["final"]}}, {"method_name": "onCacheAvailable", "params": ["File", "String", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onCacheAvailable(File file, String url, int percentsAvailable) {            Message message = obtainMessage();            message.arg1 = percentsAvailable;            message.obj = file;            sendMessage(message);        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServerClients.java", "stars": "2", "class": {"name": "UiListenerHandler", "extends": "Handler", "implements": ["CacheListener"], "modifiers": ["private", "static", "final"]}}, {"method_name": "handleMessage", "params": ["Message"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void handleMessage(Message msg) {            for (CacheListener cacheListener : listeners) {                cacheListener.onCacheAvailable((File) msg.obj, url, msg.arg1);            }        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServerClients.java", "stars": "2", "class": {"name": "UiListenerHandler", "extends": "Handler", "implements": ["CacheListener"], "modifiers": ["private", "static", "final"]}}, {"method_name": "indent", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void indent() {\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/Stm.java", "stars": "3", "class": {"name": "Stm", "extends": "Code", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "generateCode", "params": [], "throws": ["CodeException"], "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String generateCode() throws CodeException {\t\t// Produit un commentaire sommaire pour rappeler\t\t// l'instruction du langage L\u00e9a\t\treturn NL + tab() + \"/* \" + this.toString() + \" */\" + NL;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/Stm.java", "stars": "3", "class": {"name": "Stm", "extends": "Code", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        paint.setUnderlineText(true);        canvas.drawText(text, 50, 100, paint);    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson3/Practice07SetUnderlineTextView.java", "stars": "2", "class": {"name": "Practice07SetUnderlineTextView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "disconnect", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void disconnect() {    executorThreadCheck.checkIsOnValidThread();    socket.disconnect();  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/TCPChannelClient.java", "stars": "2", "class": {"name": "TCPChannelClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "send", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void send(String message) {    executorThreadCheck.checkIsOnValidThread();    socket.send(message);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/TCPChannelClient.java", "stars": "2", "class": {"name": "TCPChannelClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "reportError", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void reportError(final String message) {    Log.e(TAG, \"TCP Error: \" + message);    executor.execute(new Runnable() {      @Override      public void run() {        eventListener.onTCPError(message);      }    });  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/TCPChannelClient.java", "stars": "2", "class": {"name": "TCPChannelClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "connect", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "Socket", "snippet": "    public abstract Socket connect();    /** Returns true if sockets is a server rawSocket. */    public abstract boolean isServer();    TCPSocket() {      rawSocketLock = new Object();    }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/TCPChannelClient.java", "stars": "2", "class": {"name": "TCPSocket", "extends": "Thread", "implements": null, "modifiers": ["private", "abstract"]}}, {"method_name": "isServer", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "boolean", "snippet": "    public abstract boolean isServer();    TCPSocket() {      rawSocketLock = new Object();    }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/TCPChannelClient.java", "stars": "2", "class": {"name": "TCPSocket", "extends": "Thread", "implements": null, "modifiers": ["private", "abstract"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run() {      Log.d(TAG, \"Listening thread started...\");      // Receive connection to temporary variable first, so we don't block.      Socket tempSocket = connect();      BufferedReader in;      Log.d(TAG, \"TCP connection established.\");      synchronized (rawSocketLock) {        if (rawSocket != null) {          Log.e(TAG, \"Socket already existed and will be replaced.\");        }        rawSocket = tempSocket;        // Connecting failed, error has already been reported, just exit.        if (rawSocket == null) {          return;        }        try {          out = new PrintWriter(              new OutputStreamWriter(rawSocket.getOutputStream(), Charset.forName(\"UTF-8\")), true);          in = new BufferedReader(              new InputStreamReader(rawSocket.getInputStream(), Charset.forName(\"UTF-8\")));        } catch (IOException e) {          reportError(\"Failed to open IO on rawSocket: \" + e.getMessage());          return;        }      }      Log.v(TAG, \"Execute onTCPConnected\");      executor.execute(new Runnable() {        @Override        public void run() {          Log.v(TAG, \"Run onTCPConnected\");          eventListener.onTCPConnected(isServer());        }      });      while (true) {        final String message;        try {          message = in.readLine();        } catch (IOException e) {          synchronized (rawSocketLock) {            // If socket was closed, this is expected.            if (rawSocket == null) {              break;            }          }          reportError(\"Failed to read from rawSocket: \" + e.getMessage());          break;        }        // No data received, rawSocket probably closed.        if (message == null) {          break;        }        executor.execute(new Runnable() {          @Override          public void run() {            Log.v(TAG, \"Receive: \" + message);            eventListener.onTCPMessage(message);          }        });      }      Log.d(TAG, \"Receiving thread exiting...\");      // Close the rawSocket if it is still open.      disconnect();    }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/TCPChannelClient.java", "stars": "2", "class": {"name": "TCPSocket", "extends": "Thread", "implements": null, "modifiers": ["private", "abstract"]}}, {"method_name": "disconnect", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void disconnect() {      try {        synchronized (rawSocketLock) {          if (rawSocket != null) {            rawSocket.close();            rawSocket = null;            out = null;            executor.execute(new Runnable() {              @Override              public void run() {                eventListener.onTCPClose();              }            });          }        }      } catch (IOException e) {        reportError(\"Failed to close rawSocket: \" + e.getMessage());      }    }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/TCPChannelClient.java", "stars": "2", "class": {"name": "TCPSocket", "extends": "Thread", "implements": null, "modifiers": ["private", "abstract"]}}, {"method_name": "send", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void send(String message) {      Log.v(TAG, \"Send: \" + message);      synchronized (rawSocketLock) {        if (out == null) {          reportError(\"Sending data on closed socket.\");          return;        }        out.write(message + \"\\n\");        out.flush();      }    }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/TCPChannelClient.java", "stars": "2", "class": {"name": "TCPSocket", "extends": "Thread", "implements": null, "modifiers": ["private", "abstract"]}}, {"method_name": "connect", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Socket", "snippet": "    public Socket connect() {      Log.d(TAG, \"Listening on [\" + address.getHostAddress() + \"]:\" + Integer.toString(port));      final ServerSocket tempSocket;      try {        tempSocket = new ServerSocket(port, 0, address);      } catch (IOException e) {        reportError(\"Failed to create server socket: \" + e.getMessage());        return null;      }      synchronized (rawSocketLock) {        if (serverSocket != null) {          Log.e(TAG, \"Server rawSocket was already listening and new will be opened.\");        }        serverSocket = tempSocket;      }      try {        return tempSocket.accept();      } catch (IOException e) {        reportError(\"Failed to receive connection: \" + e.getMessage());        return null;      }    }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/TCPChannelClient.java", "stars": "2", "class": {"name": "TCPSocketServer", "extends": "TCPSocket", "implements": null, "modifiers": ["private"]}}, {"method_name": "disconnect", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void disconnect() {      try {        synchronized (rawSocketLock) {          if (serverSocket != null) {            serverSocket.close();            serverSocket = null;          }        }      } catch (IOException e) {        reportError(\"Failed to close server socket: \" + e.getMessage());      }      super.disconnect();    }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/TCPChannelClient.java", "stars": "2", "class": {"name": "TCPSocketServer", "extends": "TCPSocket", "implements": null, "modifiers": ["private"]}}, {"method_name": "isServer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isServer() {      return true;    }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/TCPChannelClient.java", "stars": "2", "class": {"name": "TCPSocketServer", "extends": "TCPSocket", "implements": null, "modifiers": ["private"]}}, {"method_name": "connect", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Socket", "snippet": "    public Socket connect() {      Log.d(TAG, \"Connecting to [\" + address.getHostAddress() + \"]:\" + Integer.toString(port));      try {        return new Socket(address, port);      } catch (IOException e) {        reportError(\"Failed to connect: \" + e.getMessage());        return null;      }    }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/TCPChannelClient.java", "stars": "2", "class": {"name": "TCPSocketClient", "extends": "TCPSocket", "implements": null, "modifiers": ["private"]}}, {"method_name": "isServer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isServer() {      return false;    }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/TCPChannelClient.java", "stars": "2", "class": {"name": "TCPSocketClient", "extends": "TCPSocket", "implements": null, "modifiers": ["private"]}}, {"method_name": "onDraw", "params": ["ScaledResolution"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDraw(ScaledResolution scaledResolution) {    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/gui/hudeditor/HudComponent.java", "stars": "12", "class": {"name": "HudComponent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onResize", "params": ["ScaledResolution"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onResize(ScaledResolution scaledResolution) {        if (sr.getScaledWidth() < scaledResolution.getScaledWidth() && getX() > sr.getScaledWidth() - getW() - 20) {            setX(scaledResolution.getScaledWidth() - getW() - 2);        }        if (sr.getScaledHeight() < scaledResolution.getScaledHeight() && getY() > sr.getScaledHeight() - getH() - 20) {            setY(scaledResolution.getScaledHeight() - getH() - 2);        }        if (sr.getScaledHeight() != scaledResolution.getScaledHeight() || sr.getScaledWidth() != scaledResolution.getScaledWidth()) {            sr = scaledResolution;        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/gui/hudeditor/HudComponent.java", "stars": "12", "class": {"name": "HudComponent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onFullScreen", "params": ["float", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onFullScreen(float w, float h) {        if (sr.getScaledWidth() < w && getX() > sr.getScaledWidth() - getW() - 20) {            setX(w - (sr.getScaledWidth() - getW()) - 2);        }        if (sr.getScaledHeight() < h && getY() > sr.getScaledHeight() - getH() - 20) {            setY(h - (sr.getScaledHeight() - getH()) - 2);        }        if (sr.getScaledHeight() != new ScaledResolution(Minecraft.getMinecraft()).getScaledHeight() || sr.getScaledWidth() != new ScaledResolution(Minecraft.getMinecraft()).getScaledWidth()) {            sr = new ScaledResolution(Minecraft.getMinecraft());        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/gui/hudeditor/HudComponent.java", "stars": "12", "class": {"name": "HudComponent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "save", "params": ["JsonObject"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void save(JsonObject directory) {        directory.addProperty(\"x\", x);        directory.addProperty(\"y\", y);        directory.addProperty(\"shown\", shown);        if (Mercury.INSTANCE.getPropertyManager().getPropertiesFromObject(this) != null) {            Mercury.INSTANCE.getPropertyManager().getPropertiesFromObject(this).forEach(property -> directory.addProperty(property.getLabel(), property.getValue().toString()));        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/gui/hudeditor/HudComponent.java", "stars": "12", "class": {"name": "HudComponent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "load", "params": ["JsonObject"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void load(JsonObject directory) {        directory.entrySet().forEach(data -> {            switch (data.getKey()) {                case \"name\":                    return;                case \"x\":                    setX(data.getValue().getAsInt());                    return;                case \"y\":                    setY(data.getValue().getAsInt());                    return;                case \"shown\":                    setShown(data.getValue().getAsBoolean());                    return;            }        });        if (Mercury.INSTANCE.getPropertyManager().getPropertiesFromObject(this) != null) {            directory.entrySet().forEach(entry -> Mercury.INSTANCE.getPropertyManager().getProperty(this, entry.getKey()).ifPresent(property -> property.setValue(entry.getValue().getAsString())));        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/gui/hudeditor/HudComponent.java", "stars": "12", "class": {"name": "HudComponent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init() {        Mercury.INSTANCE.getPropertyManager().scan(this);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/gui/hudeditor/HudComponent.java", "stars": "12", "class": {"name": "HudComponent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getX", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getX() {        return this.x;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/gui/hudeditor/HudComponent.java", "stars": "12", "class": {"name": "HudComponent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setX", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setX(float x) {        this.x = x;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/gui/hudeditor/HudComponent.java", "stars": "12", "class": {"name": "HudComponent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getY", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getY() {        return this.y;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/gui/hudeditor/HudComponent.java", "stars": "12", "class": {"name": "HudComponent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setY", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setY(float y) {        this.y = y;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/gui/hudeditor/HudComponent.java", "stars": "12", "class": {"name": "HudComponent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getW", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getW() {        return this.width;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/gui/hudeditor/HudComponent.java", "stars": "12", "class": {"name": "HudComponent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getH", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getH() {        return this.height;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/gui/hudeditor/HudComponent.java", "stars": "12", "class": {"name": "HudComponent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLabel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getLabel() {        return this.label;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/gui/hudeditor/HudComponent.java", "stars": "12", "class": {"name": "HudComponent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLastX", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getLastX() {        return lastX;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/gui/hudeditor/HudComponent.java", "stars": "12", "class": {"name": "HudComponent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLastX", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLastX(float lastX) {        this.lastX = lastX;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/gui/hudeditor/HudComponent.java", "stars": "12", "class": {"name": "HudComponent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLastY", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getLastY() {        return lastY;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/gui/hudeditor/HudComponent.java", "stars": "12", "class": {"name": "HudComponent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLastY", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLastY(float lastY) {        this.lastY = lastY;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/gui/hudeditor/HudComponent.java", "stars": "12", "class": {"name": "HudComponent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isDragging", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isDragging() {        return dragging;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/gui/hudeditor/HudComponent.java", "stars": "12", "class": {"name": "HudComponent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDragging", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDragging(boolean dragging) {        this.dragging = dragging;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/gui/hudeditor/HudComponent.java", "stars": "12", "class": {"name": "HudComponent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isShown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isShown() {        return shown;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/gui/hudeditor/HudComponent.java", "stars": "12", "class": {"name": "HudComponent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setShown", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setShown(boolean shown) {        this.shown = shown;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/gui/hudeditor/HudComponent.java", "stars": "12", "class": {"name": "HudComponent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isLabelShown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isLabelShown() {        return this.showLabel;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/gui/hudeditor/HudComponent.java", "stars": "12", "class": {"name": "HudComponent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLabelShown", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLabelShown(boolean shown) {        this.showLabel = shown;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/gui/hudeditor/HudComponent.java", "stars": "12", "class": {"name": "HudComponent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNewType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "PacmanType", "snippet": "    public PacmanType getNewType() {        return type;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/action/SwitchAction.java", "stars": "15", "class": {"name": "SwitchAction", "extends": null, "implements": ["Action"], "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "PacmanType", "snippet": "    public PacmanType getType() {        return type;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/action/SwitchAction.java", "stars": "15", "class": {"name": "SwitchAction", "extends": null, "implements": ["Action"], "modifiers": ["public"]}}, {"method_name": "getActionType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ActionType", "snippet": "    public ActionType getActionType() {        return ActionType.SWITCH;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/action/SwitchAction.java", "stars": "15", "class": {"name": "SwitchAction", "extends": null, "implements": ["Action"], "modifiers": ["public"]}}, {"method_name": "process", "params": ["Channel", "MqttUnsubscribeMessage"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void process(Channel channel, MqttUnsubscribeMessage msg) {        List<String> topicFilters = msg.payload().topics();        String clientId = channel.attr(NettyUtil.NAME).get();        for (String topicFilter : topicFilters) {            ChannelGroup channels = NettyMqttHandler.TOPICS.get(topicFilter);            if (channels != null) {                channels.remove(channel);            }            log.debug(\"UNSUBSCRIBE - clientId: {}, topicFilter: {}\", clientId, topicFilter);        }        MqttUnsubAckMessage unSubAckMessage = (MqttUnsubAckMessage) MqttMessageFactory.newMessage(                new MqttFixedHeader(MqttMessageType.UNSUBACK, false, MqttQoS.AT_MOST_ONCE, false, 0),                MqttMessageIdVariableHeader.from(msg.variableHeader().messageId()), null);        channel.writeAndFlush(unSubAckMessage);    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/netty/mqtt/impl/MqttUnsubscribeHandler.java", "stars": "6", "class": {"name": "MqttUnsubscribeHandler", "extends": null, "implements": ["MqttHandler"], "modifiers": ["public"]}}, {"method_name": "onEnable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onEnable() {        // Plugin startup logic    }", "url": "https://raw.githubusercontent.com/sbanerjee13/Cyber/master/src/main/java/com/cyberdev/cyberplugin/CyberPlugin.java", "stars": "1", "class": {"name": "CyberPlugin", "extends": "JavaPlugin", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onDisable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDisable() {        // Plugin shutdown logic    }", "url": "https://raw.githubusercontent.com/sbanerjee13/Cyber/master/src/main/java/com/cyberdev/cyberplugin/CyberPlugin.java", "stars": "1", "class": {"name": "CyberPlugin", "extends": "JavaPlugin", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "initData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String initData(){        issApiControllers.getIssPosition();        savings++;        if(savings%2==0) {            initDataSavings();        }        return \"OK\";    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/controller/Init.java", "stars": "1", "class": {"name": "Init", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initDataSavings", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initDataSavings(){        sunRistSetController.getSunRistSet();        dayNightController.getDayNight();        timeIssController.getTimeZone();    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/controller/Init.java", "stars": "1", "class": {"name": "Init", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "size", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int size() {        return list.size();    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONArray.java", "stars": "2", "class": {"name": "JSONArray", "extends": null, "implements": ["List", "Serializable"], "modifiers": ["public"]}}, {"method_name": "isEmpty", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isEmpty() {        return list.isEmpty();    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONArray.java", "stars": "2", "class": {"name": "JSONArray", "extends": null, "implements": ["List", "Serializable"], "modifiers": ["public"]}}, {"method_name": "contains", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean contains(Object o) {        return list.contains(o);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONArray.java", "stars": "2", "class": {"name": "JSONArray", "extends": null, "implements": ["List", "Serializable"], "modifiers": ["public"]}}, {"method_name": "iterator", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Iterator<Object>", "snippet": "    public Iterator<Object> iterator() {        return list.iterator();    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONArray.java", "stars": "2", "class": {"name": "JSONArray", "extends": null, "implements": ["List", "Serializable"], "modifiers": ["public"]}}, {"method_name": "toArray", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object[] toArray() {        return list.toArray();    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONArray.java", "stars": "2", "class": {"name": "JSONArray", "extends": null, "implements": ["List", "Serializable"], "modifiers": ["public"]}}, {"method_name": "toArray", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public <T> T[] toArray(@NotNull T[] a) {        return list.toArray(a);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONArray.java", "stars": "2", "class": {"name": "JSONArray", "extends": null, "implements": ["List", "Serializable"], "modifiers": ["public"]}}, {"method_name": "add", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean add(Object o) {        return list.add(o);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONArray.java", "stars": "2", "class": {"name": "JSONArray", "extends": null, "implements": ["List", "Serializable"], "modifiers": ["public"]}}, {"method_name": "remove", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean remove(Object o) {        return list.remove(o);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONArray.java", "stars": "2", "class": {"name": "JSONArray", "extends": null, "implements": ["List", "Serializable"], "modifiers": ["public"]}}, {"method_name": "containsAll", "params": ["Collection<?>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean containsAll(@NotNull Collection<?> c) {        return list.containsAll(c);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONArray.java", "stars": "2", "class": {"name": "JSONArray", "extends": null, "implements": ["List", "Serializable"], "modifiers": ["public"]}}, {"method_name": "addAll", "params": ["Collection<?>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean addAll(@NotNull Collection<?> c) {        return list.addAll(c);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONArray.java", "stars": "2", "class": {"name": "JSONArray", "extends": null, "implements": ["List", "Serializable"], "modifiers": ["public"]}}, {"method_name": "addAll", "params": ["int", "Collection<?>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean addAll(int index, @NotNull Collection<?> c) {        return list.addAll(index, c);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONArray.java", "stars": "2", "class": {"name": "JSONArray", "extends": null, "implements": ["List", "Serializable"], "modifiers": ["public"]}}, {"method_name": "removeAll", "params": ["Collection<?>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean removeAll(@NotNull Collection<?> c) {        return list.removeAll(c);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONArray.java", "stars": "2", "class": {"name": "JSONArray", "extends": null, "implements": ["List", "Serializable"], "modifiers": ["public"]}}, {"method_name": "retainAll", "params": ["Collection<?>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean retainAll(@NotNull Collection<?> c) {        return list.retainAll(c);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONArray.java", "stars": "2", "class": {"name": "JSONArray", "extends": null, "implements": ["List", "Serializable"], "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clear() {        list.clear();    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONArray.java", "stars": "2", "class": {"name": "JSONArray", "extends": null, "implements": ["List", "Serializable"], "modifiers": ["public"]}}, {"method_name": "get", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object get(int index) {        return list.get(index);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONArray.java", "stars": "2", "class": {"name": "JSONArray", "extends": null, "implements": ["List", "Serializable"], "modifiers": ["public"]}}, {"method_name": "set", "params": ["int", "Object"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object set(int index, Object element) {        return list.set(index, element);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONArray.java", "stars": "2", "class": {"name": "JSONArray", "extends": null, "implements": ["List", "Serializable"], "modifiers": ["public"]}}, {"method_name": "add", "params": ["int", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void add(int index, Object element) {        list.add(index, element);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONArray.java", "stars": "2", "class": {"name": "JSONArray", "extends": null, "implements": ["List", "Serializable"], "modifiers": ["public"]}}, {"method_name": "remove", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object remove(int index) {        return list.remove(index);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONArray.java", "stars": "2", "class": {"name": "JSONArray", "extends": null, "implements": ["List", "Serializable"], "modifiers": ["public"]}}, {"method_name": "indexOf", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int indexOf(Object o) {        return list.indexOf(o);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONArray.java", "stars": "2", "class": {"name": "JSONArray", "extends": null, "implements": ["List", "Serializable"], "modifiers": ["public"]}}, {"method_name": "lastIndexOf", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int lastIndexOf(Object o) {        return list.lastIndexOf(o);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONArray.java", "stars": "2", "class": {"name": "JSONArray", "extends": null, "implements": ["List", "Serializable"], "modifiers": ["public"]}}, {"method_name": "listIterator", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ListIterator<Object>", "snippet": "    public ListIterator<Object> listIterator() {        return list.listIterator();    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONArray.java", "stars": "2", "class": {"name": "JSONArray", "extends": null, "implements": ["List", "Serializable"], "modifiers": ["public"]}}, {"method_name": "listIterator", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "ListIterator<Object>", "snippet": "    public ListIterator<Object> listIterator(int index) {        return list.listIterator(index);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONArray.java", "stars": "2", "class": {"name": "JSONArray", "extends": null, "implements": ["List", "Serializable"], "modifiers": ["public"]}}, {"method_name": "subList", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "List<Object>", "snippet": "    public List<Object> subList(int fromIndex, int toIndex) {        return list.subList(fromIndex, toIndex);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONArray.java", "stars": "2", "class": {"name": "JSONArray", "extends": null, "implements": ["List", "Serializable"], "modifiers": ["public"]}}, {"method_name": "getString", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getString(int index) {        Object obj = list.get(index);        if (!(obj instanceof String)) {            throw new JSONTypeException(\"Type of value is not String\");        }        return (String) obj;    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONArray.java", "stars": "2", "class": {"name": "JSONArray", "extends": null, "implements": ["List", "Serializable"], "modifiers": ["public"]}}, {"method_name": "getLong", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getLong(int index) {        Object obj = list.get(index);        if (!(obj instanceof Long)) {            throw new JSONTypeException(\"Type of value is not Long\");        }        return (Long) obj;    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONArray.java", "stars": "2", "class": {"name": "JSONArray", "extends": null, "implements": ["List", "Serializable"], "modifiers": ["public"]}}, {"method_name": "getInteger", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getInteger(int index) {        Object obj = list.get(index);        if (!(obj instanceof Integer)) {            throw new JSONTypeException(\"Type of value is not Integer\");        }        return (Integer) obj;    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONArray.java", "stars": "2", "class": {"name": "JSONArray", "extends": null, "implements": ["List", "Serializable"], "modifiers": ["public"]}}, {"method_name": "getShort", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Short", "snippet": "    public Short getShort(int index) {        Object obj = list.get(index);        if (!(obj instanceof Short)) {            throw new JSONTypeException(\"Type of value is not Short\");        }        return (Short) obj;    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONArray.java", "stars": "2", "class": {"name": "JSONArray", "extends": null, "implements": ["List", "Serializable"], "modifiers": ["public"]}}, {"method_name": "getByte", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Byte", "snippet": "    public Byte getByte(int index) {        Object obj = list.get(index);        if (!(obj instanceof Byte)) {            throw new JSONTypeException(\"Type of value is not Byte\");        }        return (Byte) obj;    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONArray.java", "stars": "2", "class": {"name": "JSONArray", "extends": null, "implements": ["List", "Serializable"], "modifiers": ["public"]}}, {"method_name": "getCharacter", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Character", "snippet": "    public Character getCharacter(int index) {        Object obj = list.get(index);        if (!(obj instanceof Character)) {            throw new JSONTypeException(\"Type of value is not Character\");        }        return (Character) obj;    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONArray.java", "stars": "2", "class": {"name": "JSONArray", "extends": null, "implements": ["List", "Serializable"], "modifiers": ["public"]}}, {"method_name": "getDouble", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Double", "snippet": "    public Double getDouble(int index) {        Object obj = list.get(index);        if (!(obj instanceof Double)) {            throw new JSONTypeException(\"Type of value is not Double\");        }        return (Double) obj;    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONArray.java", "stars": "2", "class": {"name": "JSONArray", "extends": null, "implements": ["List", "Serializable"], "modifiers": ["public"]}}, {"method_name": "getFloat", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Float", "snippet": "    public Float getFloat(int index) {        Object obj = list.get(index);        if (!(obj instanceof Float)) {            throw new JSONTypeException(\"Type of value is not Float\");        }        return (Float) obj;    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONArray.java", "stars": "2", "class": {"name": "JSONArray", "extends": null, "implements": ["List", "Serializable"], "modifiers": ["public"]}}, {"method_name": "getBoolean", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Boolean", "snippet": "    public Boolean getBoolean(int index) {        Object obj = list.get(index);        if (!(obj instanceof Boolean)) {            throw new JSONTypeException(\"Type of value is not Boolean\");        }        return (Boolean) obj;    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONArray.java", "stars": "2", "class": {"name": "JSONArray", "extends": null, "implements": ["List", "Serializable"], "modifiers": ["public"]}}, {"method_name": "getJSONObject", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "JSONObject", "snippet": "    public JSONObject getJSONObject(int index) {        Object obj = list.get(index);        if (!(obj instanceof JSONObject)) {            throw new JSONTypeException(\"Type of value is not JSONObject\");        }        return (JSONObject) obj;    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONArray.java", "stars": "2", "class": {"name": "JSONArray", "extends": null, "implements": ["List", "Serializable"], "modifiers": ["public"]}}, {"method_name": "getJSONArray", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "JSONArray", "snippet": "    public JSONArray getJSONArray(int index) {        Object obj = list.get(index);        if (!(obj instanceof JSONArray)) {            throw new JSONTypeException(\"Type of value is not JSONArray\");        }        return (JSONArray) obj;    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONArray.java", "stars": "2", "class": {"name": "JSONArray", "extends": null, "implements": ["List", "Serializable"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return JSON.toJSONString(this);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONArray.java", "stars": "2", "class": {"name": "JSONArray", "extends": null, "implements": ["List", "Serializable"], "modifiers": ["public"]}}, {"method_name": "toString", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString(int indent) {        return JSON.toJSONString(this, indent);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/model/JSONArray.java", "stars": "2", "class": {"name": "JSONArray", "extends": null, "implements": ["List", "Serializable"], "modifiers": ["public"]}}, {"method_name": "getPosition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "PointF", "snippet": "    public PointF getPosition() {        return position;    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson6/practice03/Practice03OfObjectView.java", "stars": "2", "class": {"name": "Practice03OfObjectView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "setPosition", "params": ["PointF"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPosition(PointF position) {        if (position != null) {            this.position.set(position);            invalidate();        }    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson6/practice03/Practice03OfObjectView.java", "stars": "2", "class": {"name": "Practice03OfObjectView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDraw(Canvas canvas) {        super.onDraw(canvas);        float innerPaddingLeft = RADIUS * 1;        float innterPaddingRight = RADIUS * 1;        float innterPaddingTop = RADIUS * 1;        float innterPaddingBottom = RADIUS * 3;        float width = getWidth() - innerPaddingLeft - innterPaddingRight - RADIUS * 2;        float height = getHeight() - innterPaddingTop - innterPaddingBottom - RADIUS * 2;        canvas.drawCircle(innerPaddingLeft + RADIUS + width * position.x, innterPaddingTop + RADIUS + height * position.y, RADIUS, paint);    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson6/practice03/Practice03OfObjectView.java", "stars": "2", "class": {"name": "Practice03OfObjectView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tjava.awt.EventQueue.invokeLater(new Runnable() {\t\t\tpublic void run() {\t\t\t\t// The GUIWindow object does not need to be used in the run method\t\t\t\t@SuppressWarnings(\"unused\")\t\t\t\tGUIWindow Main = new GUIWindow();\t\t\t}\t\t});\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/UI/GUIWindow.java", "stars": "1", "class": {"name": "GUIWindow", "extends": "JFrame", "implements": null, "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items\t\t\t\t.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.BUILDING_BLOCKS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/CharredNetherBrickBlock.java", "stars": "2", "class": {"name": "CharredNetherBrickBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 0));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/CharredNetherBrickBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onMeasure", "params": ["int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {        super.onMeasure(SquareDelegate.measureWidth(widthMeasureSpec, heightMeasureSpec),                SquareDelegate.measureHeight(widthMeasureSpec, heightMeasureSpec));    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/square/SquareLinearLayout.java", "stars": "1", "class": {"name": "SquareLinearLayout", "extends": "LinearLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "\tpublic long getId() {\t\treturn id;\t}", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/MusicEntity.java", "stars": "2", "class": {"name": "MusicEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setId", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setId(long id) {\t\tthis.id = id;\t}", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/MusicEntity.java", "stars": "2", "class": {"name": "MusicEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getUuid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getUuid() {\t\treturn uuid;\t}", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/MusicEntity.java", "stars": "2", "class": {"name": "MusicEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setUuid", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setUuid(String uuid) {\t\tthis.uuid = uuid;\t}", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/MusicEntity.java", "stars": "2", "class": {"name": "MusicEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getMusic", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getMusic() {\t\treturn music;\t}", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/MusicEntity.java", "stars": "2", "class": {"name": "MusicEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setMusic", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setMusic(String music) {\t\tthis.music = music;\t}", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/MusicEntity.java", "stars": "2", "class": {"name": "MusicEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getName() {\t\treturn name;\t}", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/MusicEntity.java", "stars": "2", "class": {"name": "MusicEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setName(String name) {\t\tthis.name = name;\t}", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/MusicEntity.java", "stars": "2", "class": {"name": "MusicEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getDescription", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getDescription() {\t\treturn description;\t}", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/MusicEntity.java", "stars": "2", "class": {"name": "MusicEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setDescription", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setDescription(String description) {\t\tthis.description = description;\t}", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/MusicEntity.java", "stars": "2", "class": {"name": "MusicEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getNo_of_likes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "\tpublic long getNo_of_likes() {\t\treturn no_of_likes;\t}", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/MusicEntity.java", "stars": "2", "class": {"name": "MusicEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setNo_of_likes", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setNo_of_likes(long no_of_likes) {\t\tthis.no_of_likes = no_of_likes;\t}", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/MusicEntity.java", "stars": "2", "class": {"name": "MusicEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "UserEntity", "snippet": "\tpublic UserEntity getUser() {\t\treturn user;\t}", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/MusicEntity.java", "stars": "2", "class": {"name": "MusicEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setUser", "params": ["UserEntity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setUser(UserEntity user) {\t\tthis.user = user;\t}", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/MusicEntity.java", "stars": "2", "class": {"name": "MusicEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getCreated_at", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ZonedDateTime", "snippet": "\tpublic ZonedDateTime getCreated_at() {\t\treturn created_at;\t}", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/MusicEntity.java", "stars": "2", "class": {"name": "MusicEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setCreated_at", "params": ["ZonedDateTime"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setCreated_at(ZonedDateTime created_at) {\t\tthis.created_at = created_at;\t}", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/MusicEntity.java", "stars": "2", "class": {"name": "MusicEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getStatus() {\t\treturn status;\t}", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/MusicEntity.java", "stars": "2", "class": {"name": "MusicEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setStatus", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setStatus(String status) {\t\tthis.status = status;\t}", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/entity/MusicEntity.java", "stars": "2", "class": {"name": "MusicEntity", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getPairingKey", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPairingKey() {        return pairingKey;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/NetcastTVServiceConfig.java", "stars": "4", "class": {"name": "NetcastTVServiceConfig", "extends": "ServiceConfig", "implements": null, "modifiers": ["public"]}}, {"method_name": "setPairingKey", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPairingKey(String pairingKey) {        this.pairingKey = pairingKey;        notifyUpdate();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/NetcastTVServiceConfig.java", "stars": "4", "class": {"name": "NetcastTVServiceConfig", "extends": "ServiceConfig", "implements": null, "modifiers": ["public"]}}, {"method_name": "toJSONObject", "params": [], "throws": null, "modifiers": ["public"], "return_type": "JSONObject", "snippet": "    public JSONObject toJSONObject() {        JSONObject jsonObj = super.toJSONObject();        try {            jsonObj.put(KEY_PAIRING, pairingKey);        } catch (JSONException e) {            e.printStackTrace();        }        return jsonObj;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/config/NetcastTVServiceConfig.java", "stars": "4", "class": {"name": "NetcastTVServiceConfig", "extends": "ServiceConfig", "implements": null, "modifiers": ["public"]}}, {"method_name": "getJVMArguments", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "  protected String getJVMArguments() {    String args = super.getJVMArguments();    String typeUserGlobalJVMArgs =        getJobProps().getString(\"jobtype.global.jvm.args\", null);    if (typeUserGlobalJVMArgs != null) {      args += \" \" + typeUserGlobalJVMArgs;    }    String typeSysGlobalJVMArgs =        getSysProps().getString(\"jobtype.global.jvm.args\", null);    if (typeSysGlobalJVMArgs != null) {      args += \" \" + typeSysGlobalJVMArgs;    }    String typeUserJVMArgs = getJobProps().getString(\"jobtype.jvm.args\", null);    if (typeUserJVMArgs != null) {      args += \" \" + typeUserJVMArgs;    }    String typeSysJVMArgs = getSysProps().getString(\"jobtype.jvm.args\", null);    if (typeSysJVMArgs != null) {      args += \" \" + typeSysJVMArgs;    }    return args;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopJavaJob.java", "stars": "18", "class": {"name": "HadoopJavaJob", "extends": "JavaProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "getClassPaths", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "List<String>", "snippet": "  protected List<String> getClassPaths() {    List<String> classPath;    if (!noUserClasspath) {      classPath = super.getClassPaths();    } else {      getLog().info(\"Supressing user supplied classpath settings.\");      classPath = new ArrayList<String>();    }    classPath.add(getSourcePathFromClass(HadoopJavaJobRunnerMain.class));    classPath.add(getSourcePathFromClass(Props.class));    classPath.add(getSourcePathFromClass(HadoopSecurityManager.class));    classPath.add(HadoopConfigurationInjector.getPath(getJobProps(),        getWorkingDirectory()));    // merging classpaths from plugin.properties    mergeClassPaths(classPath,        getJobProps().getStringList(\"jobtype.classpath\", null, \",\"));    // merging classpaths from private.properties    mergeClassPaths(classPath,        getSysProps().getStringList(\"jobtype.classpath\", null, \",\"));    List<String> typeGlobalClassPath =        getSysProps().getStringList(\"jobtype.global.classpath\", null, \",\");    if (typeGlobalClassPath != null) {      for (String jar : typeGlobalClassPath) {        if (!classPath.contains(jar)) {          classPath.add(jar);        }      }    }    return classPath;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopJavaJob.java", "stars": "18", "class": {"name": "HadoopJavaJob", "extends": "JavaProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "mergeClassPaths", "params": ["List<String>", "List<String>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void mergeClassPaths(List<String> classPath,      List<String> typeClassPath) {    if (typeClassPath != null) {      // fill in this when load this jobtype      String pluginDir = getSysProps().get(\"plugin.dir\");      for (String jar : typeClassPath) {        File jarFile = new File(jar);        if (!jarFile.isAbsolute()) {          jarFile = new File(pluginDir + File.separatorChar + jar);        }        File tempFile = jarFile.getAbsoluteFile();        if (!classPath.contains(tempFile.getPath())) {          classPath.add(tempFile.getPath());        }      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopJavaJob.java", "stars": "18", "class": {"name": "HadoopJavaJob", "extends": "JavaProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void run() throws Exception {    HadoopConfigurationInjector.prepareResourcesToInject(getJobProps(),        getWorkingDirectory());    if (shouldProxy && obtainTokens) {      userToProxy = getJobProps().getString(\"user.to.proxy\");      getLog().info(\"Need to proxy. Getting tokens.\");      Props props = new Props();      props.putAll(getJobProps());      props.putAll(getSysProps());      tokenFile =          HadoopJobUtils              .getHadoopTokens(hadoopSecurityManager, props, getLog());      getJobProps().put(\"env.\" + HADOOP_TOKEN_FILE_LOCATION,          tokenFile.getAbsolutePath());    }    try {      super.run();    } catch (Exception e) {      throw new Exception(e);    } finally {      if (tokenFile != null) {        try {          HadoopJobUtils.cancelHadoopTokens(hadoopSecurityManager, userToProxy,              tokenFile, getLog());        } catch (Throwable t) {          getLog().error(\"Failed to cancel tokens, caused by:\" + t);        }        if (tokenFile.exists()) {          tokenFile.delete();        }      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopJavaJob.java", "stars": "18", "class": {"name": "HadoopJavaJob", "extends": "JavaProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "getSourcePathFromClass", "params": ["Class<?>"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String getSourcePathFromClass(Class<?> containedClass) {    File file =        new File(containedClass.getProtectionDomain().getCodeSource()            .getLocation().getPath());    if (!file.isDirectory() && file.getName().endsWith(\".class\")) {      String name = containedClass.getName();      StringTokenizer tokenizer = new StringTokenizer(name, \".\");      while (tokenizer.hasMoreTokens()) {        tokenizer.nextElement();        file = file.getParentFile();      }      return file.getPath();    } else {      return containedClass.getProtectionDomain().getCodeSource().getLocation().getPath();    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopJavaJob.java", "stars": "18", "class": {"name": "HadoopJavaJob", "extends": "JavaProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "getJavaClass", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "  protected String getJavaClass() {    return HadoopJavaJobRunnerMain.class.getName();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopJavaJob.java", "stars": "18", "class": {"name": "HadoopJavaJob", "extends": "JavaProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    return \"JavaJob{\" + \"_runMethod='\" + _runMethod + '\\''        + \", _cancelMethod='\" + _cancelMethod + '\\'' + \", _progressMethod='\"        + _progressMethod + '\\'' + \", _javaObject=\" + _javaObject + \", props=\"        + getJobProps() + '}';  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopJavaJob.java", "stars": "18", "class": {"name": "HadoopJavaJob", "extends": "JavaProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "cancel", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void cancel() throws InterruptedException {    super.cancel();    info(\"Cancel called.  Killing the launched MR jobs on the cluster\");    String azExecId = jobProps.getString(CommonJobProperties.EXEC_ID);    final String logFilePath =        String.format(\"%s/_job.%s.%s.log\", getWorkingDirectory(), azExecId,            getId());    info(\"log file path is: \" + logFilePath);    HadoopJobUtils.proxyUserKillAllSpawnedHadoopJobs(logFilePath, jobProps,        tokenFile, getLog());    info(\"cancel job done.\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopJavaJob.java", "stars": "18", "class": {"name": "HadoopJavaJob", "extends": "JavaProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["ScaledResolution"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDraw(ScaledResolution scaledResolution) {        super.onDraw(scaledResolution);        if (mc.world == null || mc.player == null)            return;        float x = getX();        float y = getY();        //if (getX() > scaledResolution.getScaledHeight())       //     x = getX() + getW()        font.drawStringWithShadow(Mercury.NAME, x, y, Color.WHITE.getRGB());    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/hudcomponents/Watermark.java", "stars": "12", "class": {"name": "Watermark", "extends": "HudComponent", "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void start(){        fastTriggerPool = new ThreadPoolExecutor(                10,                XxlJobAdminConfig.getAdminConfig().getTriggerPoolFastMax(),                60L,                TimeUnit.SECONDS,                new LinkedBlockingQueue<Runnable>(1000),                new ThreadFactory() {                    @Override                    public Thread newThread(Runnable r) {                        return new Thread(r, \"xxl-job, admin JobTriggerPoolHelper-fastTriggerPool-\" + r.hashCode());                    }                });        slowTriggerPool = new ThreadPoolExecutor(                10,                XxlJobAdminConfig.getAdminConfig().getTriggerPoolSlowMax(),                60L,                TimeUnit.SECONDS,                new LinkedBlockingQueue<Runnable>(2000),                new ThreadFactory() {                    @Override                    public Thread newThread(Runnable r) {                        return new Thread(r, \"xxl-job, admin JobTriggerPoolHelper-slowTriggerPool-\" + r.hashCode());                    }                });    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/thread/JobTriggerPoolHelper.java", "stars": "1", "class": {"name": "JobTriggerPoolHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "stop", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void stop() {        //triggerPool.shutdown();        fastTriggerPool.shutdownNow();        slowTriggerPool.shutdownNow();        logger.info(\">>>>>>>>> xxl-job trigger thread pool shutdown success.\");    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/thread/JobTriggerPoolHelper.java", "stars": "1", "class": {"name": "JobTriggerPoolHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addTrigger", "params": ["int", "TriggerTypeEnum", "int", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addTrigger(final int jobId, final TriggerTypeEnum triggerType, final int failRetryCount, final String executorShardingParam, final String executorParam) {        // choose thread pool        ThreadPoolExecutor triggerPool_ = fastTriggerPool;        AtomicInteger jobTimeoutCount = jobTimeoutCountMap.get(jobId);        if (jobTimeoutCount!=null && jobTimeoutCount.get() > 10) {      // job-timeout 10 times in 1 min            triggerPool_ = slowTriggerPool;        }        // trigger        triggerPool_.execute(() -> {            long start = System.currentTimeMillis();            logger.debug(\"now time\"+ start);            try {                // do trigger                XxlJobTrigger.trigger(jobId, triggerType, failRetryCount, executorShardingParam, executorParam);            } catch (Exception e) {                logger.error(e.getMessage(), e);            } finally {                // check timeout-count-map                long minTim_now = System.currentTimeMillis()/60000;                if (minTim != minTim_now) {                    minTim = minTim_now;                    jobTimeoutCountMap.clear();                }                // incr timeout-count-map                long cost = System.currentTimeMillis()-start;                if (cost > 500) {       // ob-timeout threshold 500ms                    AtomicInteger timeoutCount = jobTimeoutCountMap.putIfAbsent(jobId, new AtomicInteger(1));                    if (timeoutCount != null) {                        timeoutCount.incrementAndGet();                    }                }            }        });    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/thread/JobTriggerPoolHelper.java", "stars": "1", "class": {"name": "JobTriggerPoolHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toStart", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void toStart() {        helper.start();    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/thread/JobTriggerPoolHelper.java", "stars": "1", "class": {"name": "JobTriggerPoolHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toStop", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void toStop() {        helper.stop();    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/thread/JobTriggerPoolHelper.java", "stars": "1", "class": {"name": "JobTriggerPoolHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "trigger", "params": ["int", "TriggerTypeEnum", "int", "String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void trigger(int jobId, TriggerTypeEnum triggerType, int failRetryCount, String executorShardingParam, String executorParam) {        helper.addTrigger(jobId, triggerType, failRetryCount, executorShardingParam, executorParam);    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/thread/JobTriggerPoolHelper.java", "stars": "1", "class": {"name": "JobTriggerPoolHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Integer id) {      this.id = id;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/dynsql/DynSqlMapper.java", "stars": "15", "class": {"name": "Conditions", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getId() {      return id;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/dynsql/DynSqlMapper.java", "stars": "15", "class": {"name": "Conditions", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "findByJobId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "List<XxlJobLogGlue>", "snippet": "    public List<XxlJobLogGlue> findByJobId(int jobId){        Query query = new Query(where(\"jobId\").is(jobId));        return super.find(query);    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/dao/XxlJobLogGlueDao.java", "stars": "1", "class": {"name": "XxlJobLogGlueDao", "extends": "BaseMongoServiceImpl", "implements": null, "modifiers": ["public"]}}, {"method_name": "removeOld", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int removeOld(int jobId, int limit){        return 0;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/dao/XxlJobLogGlueDao.java", "stars": "1", "class": {"name": "XxlJobLogGlueDao", "extends": "BaseMongoServiceImpl", "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteByJobId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int deleteByJobId(int jobId){        Query query = new Query(where(\"jobId\").is(jobId));        DeleteResult deleteResult = super.remove(query);        return (int)deleteResult.getDeletedCount();    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/dao/XxlJobLogGlueDao.java", "stars": "1", "class": {"name": "XxlJobLogGlueDao", "extends": "BaseMongoServiceImpl", "implements": null, "modifiers": ["public"]}}, {"method_name": "generateCode", "params": [], "throws": ["CodeException"], "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String generateCode() throws CodeException {\t\treturn id;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprVARIABLE.java", "stars": "3", "class": {"name": "ExprVARIABLE", "extends": "Expr", "implements": null, "modifiers": ["public"]}}, {"method_name": "checkType", "params": [], "throws": ["TypeException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void checkType() throws TypeException {\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprVARIABLE.java", "stars": "3", "class": {"name": "ExprVARIABLE", "extends": "Expr", "implements": null, "modifiers": ["public"]}}, {"method_name": "constEval", "params": ["Environment<ExprVALUE>"], "throws": ["EnvironmentException", "TypeException"], "modifiers": ["public"], "return_type": "Object", "snippet": "\tpublic Object constEval(Environment<ExprVALUE> environment) throws EnvironmentException, TypeException {\t\tObject o = environment.get(id);\t\tif (o == null)\t\t\tthrow new EnvironmentException(id + \" non trouv\u00e9 dans \" + environment);\t\treturn o;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprVARIABLE.java", "stars": "3", "class": {"name": "ExprVARIABLE", "extends": "Expr", "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\treturn id;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprVARIABLE.java", "stars": "3", "class": {"name": "ExprVARIABLE", "extends": "Expr", "implements": null, "modifiers": ["public"]}}, {"method_name": "save", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void save() {        if (path == null || path.equals(\"\")) {            for (Map.Entry<String, Object> entry : getValues(true).entrySet()) {                config.set(entry.getKey(), entry.getValue());            }        } else {            config.set(path, getValues(true));        }        config.save();    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/YamlDataMap.java", "stars": "3", "class": {"name": "YamlDataMap", "extends": "DataMap", "implements": null, "modifiers": ["public"]}}, {"method_name": "onClientPongEvent", "params": ["ClientPongEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClientPongEvent(ClientPongEvent event) {    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/communication/messages/listeners/ClientMessagesListener.java", "stars": "2", "class": {"name": "ClientMessagesListener", "extends": null, "implements": ["IMessageListener"], "modifiers": ["public"]}}, {"method_name": "onClientReleaseVersionEvent", "params": ["ClientReleaseVersionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClientReleaseVersionEvent(ClientReleaseVersionEvent event) {    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/communication/messages/listeners/ClientMessagesListener.java", "stars": "2", "class": {"name": "ClientMessagesListener", "extends": null, "implements": ["IMessageListener"], "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Type", "snippet": "    public Type getType() {        return this.type;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/events/PacketEvent.java", "stars": "12", "class": {"name": "PacketEvent", "extends": "Event", "implements": null, "modifiers": ["public"]}}, {"method_name": "setPacket", "params": ["Packet"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPacket(final Packet packet) {        this.packet = packet;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/events/PacketEvent.java", "stars": "12", "class": {"name": "PacketEvent", "extends": "Event", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPacket", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Packet", "snippet": "    public Packet getPacket() {        return this.packet;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/events/PacketEvent.java", "stars": "12", "class": {"name": "PacketEvent", "extends": "Event", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCommands", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Collection<Command>", "snippet": "\tpublic Collection<Command> getCommands() {\t\treturn Collections.singleton(new CustomCommand());\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot-cli/src/test/java/cli/command/CustomCommandFactory.java", "stars": "47572", "class": {"name": "CustomCommandFactory", "extends": null, "implements": ["CommandFactory"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tint count = 0;\t\tScanner sc = new Scanner(System.in);\t\tSystem.out.print(\"Enter a number:\");\t\tint n = sc.nextInt();\t\tfor(int i = 2 ;i <= Math.sqrt(n); i++) {\t\t\tif(n%i == 0) {\t\t\t\tcount = count + 1;\t\t\t}\t\t}\t\tif(count == 0) {\t\t\tSystem.out.println(\"Prime number\");\t\t}\t\telse {\t\t\tSystem.out.println(\"not\");\t\t}\t\tsc.close();\t\t\t}", "url": "https://raw.githubusercontent.com/likith22/java-programs/master/PrimeNumber.java", "stars": "3", "class": {"name": "PrimeNumber", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLdapProperties", "params": [], "throws": null, "modifiers": ["synchronized", "public", "static"], "return_type": "Properties", "snippet": "    public static synchronized Properties getLdapProperties() {        if (properties == null && new File(CoreConstant.DATAX_LDAP_PATH).exists()) {            InputStream secretStream = null;            try {                secretStream = new FileInputStream(                        CoreConstant.DATAX_LDAP_PATH);            } catch (FileNotFoundException e) {                throw DataXException.asDataXException(                        FrameworkErrorCode.LDAP_ERROR,                        \"DataX LDAP\u914d\u7f6e\u9519\u8bef\");            }            properties = new Properties();            try {                properties.load(secretStream);                secretStream.close();            } catch (IOException e) {                throw DataXException.asDataXException(                        FrameworkErrorCode.SECRET_ERROR, \"\u8bfb\u53d6LDAP\u7f6e\u6587\u4ef6\u51fa\u9519\", e);            }        }        return properties;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/util/LdapUtil.java", "stars": "23", "class": {"name": "LdapUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSeek", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSeek(int seek) {        if (seek < 0) throw new IllegalArgumentException(\"Seek speed must be larger than 0\");        this.seek = seek;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/events/SeekForwardEvent.java", "stars": "4", "class": {"name": "SeekForwardEvent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSeek", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getSeek() {        return seek;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/events/SeekForwardEvent.java", "stars": "4", "class": {"name": "SeekForwardEvent", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "registerAccount", "params": ["ManagedUserVM"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void registerAccount(@Valid @RequestBody ManagedUserVM managedUserVM) {        if (!checkPasswordLength(managedUserVM.getPassword())) {            throw new InvalidPasswordException();        }        User user = userService.registerUser(managedUserVM, managedUserVM.getPassword());        mailService.sendActivationEmail(user);    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/main/java/com/meimos/myapp/web/rest/AccountResource.java", "stars": "2", "class": {"name": "AccountResource", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "activateAccount", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void activateAccount(@RequestParam(value = \"key\") String key) {        Optional<User> user = userService.activateRegistration(key);        if (!user.isPresent()) {            throw new AccountResourceException(\"No user was found for this activation key\");        }    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/main/java/com/meimos/myapp/web/rest/AccountResource.java", "stars": "2", "class": {"name": "AccountResource", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isAuthenticated", "params": ["HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String isAuthenticated(HttpServletRequest request) {        log.debug(\"REST request to check if the current user is authenticated\");        return request.getRemoteUser();    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/main/java/com/meimos/myapp/web/rest/AccountResource.java", "stars": "2", "class": {"name": "AccountResource", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAccount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "UserDTO", "snippet": "    public UserDTO getAccount() {        return userService            .getUserWithAuthorities()            .map(UserDTO::new)            .orElseThrow(() -> new AccountResourceException(\"User could not be found\"));    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/main/java/com/meimos/myapp/web/rest/AccountResource.java", "stars": "2", "class": {"name": "AccountResource", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "saveAccount", "params": ["UserDTO"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void saveAccount(@Valid @RequestBody UserDTO userDTO) {        String userLogin = SecurityUtils            .getCurrentUserLogin()            .orElseThrow(() -> new AccountResourceException(\"Current user login not found\"));        Optional<User> existingUser = userRepository.findOneByEmailIgnoreCase(userDTO.getEmail());        if (existingUser.isPresent() && (!existingUser.get().getLogin().equalsIgnoreCase(userLogin))) {            throw new EmailAlreadyUsedException();        }        Optional<User> user = userRepository.findOneByLogin(userLogin);        if (!user.isPresent()) {            throw new AccountResourceException(\"User could not be found\");        }        userService.updateUser(            userDTO.getFirstName(),            userDTO.getLastName(),            userDTO.getEmail(),            userDTO.getLangKey(),            userDTO.getImageUrl()        );    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/main/java/com/meimos/myapp/web/rest/AccountResource.java", "stars": "2", "class": {"name": "AccountResource", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "changePassword", "params": ["PasswordChangeDTO"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void changePassword(@RequestBody PasswordChangeDTO passwordChangeDto) {        if (!checkPasswordLength(passwordChangeDto.getNewPassword())) {            throw new InvalidPasswordException();        }        userService.changePassword(passwordChangeDto.getCurrentPassword(), passwordChangeDto.getNewPassword());    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/main/java/com/meimos/myapp/web/rest/AccountResource.java", "stars": "2", "class": {"name": "AccountResource", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "requestPasswordReset", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void requestPasswordReset(@RequestBody String mail) {        Optional<User> user = userService.requestPasswordReset(mail);        if (user.isPresent()) {            mailService.sendPasswordResetMail(user.get());        } else {            // Pretend the request has been successful to prevent checking which emails really exist            // but log that an invalid attempt has been made            log.warn(\"Password reset requested for non existing mail '{}'\", mail);        }    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/main/java/com/meimos/myapp/web/rest/AccountResource.java", "stars": "2", "class": {"name": "AccountResource", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "finishPasswordReset", "params": ["KeyAndPasswordVM"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void finishPasswordReset(@RequestBody KeyAndPasswordVM keyAndPassword) {        if (!checkPasswordLength(keyAndPassword.getNewPassword())) {            throw new InvalidPasswordException();        }        Optional<User> user = userService.completePasswordReset(keyAndPassword.getNewPassword(), keyAndPassword.getKey());        if (!user.isPresent()) {            throw new AccountResourceException(\"No user was found for this reset key\");        }    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/main/java/com/meimos/myapp/web/rest/AccountResource.java", "stars": "2", "class": {"name": "AccountResource", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkPasswordLength", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "    private static boolean checkPasswordLength(String password) {        return (            !StringUtils.isEmpty(password) &&            password.length() >= ManagedUserVM.PASSWORD_MIN_LENGTH &&            password.length() <= ManagedUserVM.PASSWORD_MAX_LENGTH        );    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/main/java/com/meimos/myapp/web/rest/AccountResource.java", "stars": "2", "class": {"name": "AccountResource", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testHome", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testHome() {\t\tResponseEntity<Map<String, Object>> entity = asMapEntity(\t\t\t\tthis.restTemplate.withBasicAuth(\"user\", \"password\").getForEntity(\"/\", Map.class));\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\t\tassertThat(entity.getBody().get(\"message\")).isEqualTo(\"Hello Phil\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/NoManagementSampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "NoManagementSampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testMetricsNotAvailable", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testMetricsNotAvailable() {\t\ttestHome(); // makes sure some requests have been made\t\tResponseEntity<Map<String, Object>> entity = asMapEntity(\t\t\t\tthis.restTemplate.withBasicAuth(\"user\", \"password\").getForEntity(\"/metrics\", Map.class));\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/NoManagementSampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "NoManagementSampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "asMapEntity", "params": ["ResponseEntity<Map>"], "throws": null, "modifiers": ["static"], "return_type": "ResponseEntity<Map>", "snippet": "\tstatic <K, V> ResponseEntity<Map<K, V>> asMapEntity(ResponseEntity<Map> entity) {\t\treturn (ResponseEntity) entity;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/NoManagementSampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "NoManagementSampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setMediaMeta", "params": ["IjkMediaMeta"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMediaMeta(IjkMediaMeta.IjkStreamMeta streamMeta) {        mStreamMeta = streamMeta;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/misc/IjkTrackInfo.java", "stars": "2", "class": {"name": "IjkTrackInfo", "extends": null, "implements": ["ITrackInfo"], "modifiers": ["public"]}}, {"method_name": "getFormat", "params": [], "throws": null, "modifiers": ["public"], "return_type": "IMediaFormat", "snippet": "    public IMediaFormat getFormat() {        return new IjkMediaFormat(mStreamMeta);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/misc/IjkTrackInfo.java", "stars": "2", "class": {"name": "IjkTrackInfo", "extends": null, "implements": ["ITrackInfo"], "modifiers": ["public"]}}, {"method_name": "getLanguage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getLanguage() {        if (mStreamMeta == null || TextUtils.isEmpty(mStreamMeta.mLanguage))            return \"und\";        return mStreamMeta.mLanguage;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/misc/IjkTrackInfo.java", "stars": "2", "class": {"name": "IjkTrackInfo", "extends": null, "implements": ["ITrackInfo"], "modifiers": ["public"]}}, {"method_name": "getTrackType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getTrackType() {        return mTrackType;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/misc/IjkTrackInfo.java", "stars": "2", "class": {"name": "IjkTrackInfo", "extends": null, "implements": ["ITrackInfo"], "modifiers": ["public"]}}, {"method_name": "setTrackType", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTrackType(int trackType) {        mTrackType = trackType;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/misc/IjkTrackInfo.java", "stars": "2", "class": {"name": "IjkTrackInfo", "extends": null, "implements": ["ITrackInfo"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return getClass().getSimpleName() + '{' + getInfoInline() + \"}\";    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/misc/IjkTrackInfo.java", "stars": "2", "class": {"name": "IjkTrackInfo", "extends": null, "implements": ["ITrackInfo"], "modifiers": ["public"]}}, {"method_name": "getInfoInline", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getInfoInline() {        StringBuilder out = new StringBuilder(128);        switch (mTrackType) {            case MEDIA_TRACK_TYPE_VIDEO:                out.append(\"VIDEO\");                out.append(\", \");                out.append(mStreamMeta.getCodecShortNameInline());                out.append(\", \");                out.append(mStreamMeta.getBitrateInline());                out.append(\", \");                out.append(mStreamMeta.getResolutionInline());                break;            case MEDIA_TRACK_TYPE_AUDIO:                out.append(\"AUDIO\");                out.append(\", \");                out.append(mStreamMeta.getCodecShortNameInline());                out.append(\", \");                out.append(mStreamMeta.getBitrateInline());                out.append(\", \");                out.append(mStreamMeta.getSampleRateInline());                break;            case MEDIA_TRACK_TYPE_TIMEDTEXT:                out.append(\"TIMEDTEXT\");                out.append(\", \");                out.append(mStreamMeta.mLanguage);                break;            case MEDIA_TRACK_TYPE_SUBTITLE:                out.append(\"SUBTITLE\");                break;            default:                out.append(\"UNKNOWN\");                break;        }        return out.toString();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/misc/IjkTrackInfo.java", "stars": "2", "class": {"name": "IjkTrackInfo", "extends": null, "implements": ["ITrackInfo"], "modifiers": ["public"]}}, {"method_name": "onClick", "params": ["android", "int", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onClick (android.content.DialogInterface p0, int p1, boolean p2)\t{\t\tn_onClick (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/android/support/v7/app/AlertDialog_IDialogInterfaceOnMultiChoiceClickListenerImplementor.java", "stars": "2", "class": {"name": "AlertDialog_IDialogInterfaceOnMultiChoiceClickListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onClick", "params": ["android", "int", "boolean"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onClick (android.content.DialogInterface p0, int p1, boolean p2);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/android/support/v7/app/AlertDialog_IDialogInterfaceOnMultiChoiceClickListenerImplementor.java", "stars": "2", "class": {"name": "AlertDialog_IDialogInterfaceOnMultiChoiceClickListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/android/support/v7/app/AlertDialog_IDialogInterfaceOnMultiChoiceClickListenerImplementor.java", "stars": "2", "class": {"name": "AlertDialog_IDialogInterfaceOnMultiChoiceClickListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/android/support/v7/app/AlertDialog_IDialogInterfaceOnMultiChoiceClickListenerImplementor.java", "stars": "2", "class": {"name": "AlertDialog_IDialogInterfaceOnMultiChoiceClickListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "set", "params": ["String", "Object", "long"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean set(String key, Object val, long cacheTime){        // clean timeout cache, before set new cache (avoid cache too much)        cleanTimeoutCache();        // set new cache        if (key==null || key.trim().length()==0) {            return false;        }        if (val == null) {            remove(key);        }        if (cacheTime <= 0) {            remove(key);        }        long timeoutTime = System.currentTimeMillis() + cacheTime;        LocalCacheData localCacheData = new LocalCacheData(key, val, timeoutTime);        cacheRepository.put(localCacheData.getKey(), localCacheData);        return true;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/util/LocalCacheUtil.java", "stars": "1", "class": {"name": "LocalCacheUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "remove", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean remove(String key){        if (key==null || key.trim().length()==0) {            return false;        }        cacheRepository.remove(key);        return true;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/util/LocalCacheUtil.java", "stars": "1", "class": {"name": "LocalCacheUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Object", "snippet": "    public static Object get(String key){        if (key==null || key.trim().length()==0) {            return null;        }        LocalCacheData localCacheData = cacheRepository.get(key);        if (localCacheData!=null && System.currentTimeMillis()<localCacheData.getTimeoutTime()) {            return localCacheData.getVal();        } else {            remove(key);            return null;        }    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/util/LocalCacheUtil.java", "stars": "1", "class": {"name": "LocalCacheUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "cleanTimeoutCache", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean cleanTimeoutCache(){        if (!cacheRepository.keySet().isEmpty()) {            for (String key: cacheRepository.keySet()) {                LocalCacheData localCacheData = cacheRepository.get(key);                if (localCacheData!=null && System.currentTimeMillis()>=localCacheData.getTimeoutTime()) {                    cacheRepository.remove(key);                }            }        }        return true;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/util/LocalCacheUtil.java", "stars": "1", "class": {"name": "LocalCacheUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getKey", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getKey() {            return key;        }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/util/LocalCacheUtil.java", "stars": "1", "class": {"name": "LocalCacheData", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "setKey", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setKey(String key) {            this.key = key;        }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/util/LocalCacheUtil.java", "stars": "1", "class": {"name": "LocalCacheData", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "getVal", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getVal() {            return val;        }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/util/LocalCacheUtil.java", "stars": "1", "class": {"name": "LocalCacheData", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "setVal", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setVal(Object val) {            this.val = val;        }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/util/LocalCacheUtil.java", "stars": "1", "class": {"name": "LocalCacheData", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "getTimeoutTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "        public long getTimeoutTime() {            return timeoutTime;        }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/util/LocalCacheUtil.java", "stars": "1", "class": {"name": "LocalCacheData", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "setTimeoutTime", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setTimeoutTime(long timeoutTime) {            this.timeoutTime = timeoutTime;        }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/util/LocalCacheUtil.java", "stars": "1", "class": {"name": "LocalCacheData", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "volar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void volar() {        System.out.println(\"Tucan Volando\");    }", "url": "https://raw.githubusercontent.com/EduarAlexis/SOLID/master/src/main/java/Solid/I/Tucan.java", "stars": "1", "class": {"name": "Tucan", "extends": null, "implements": ["IAve", "IAveVoladora"], "modifiers": ["public"]}}, {"method_name": "comer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void comer() {        System.out.println(\"Comiendo\");    }", "url": "https://raw.githubusercontent.com/EduarAlexis/SOLID/master/src/main/java/Solid/I/Tucan.java", "stars": "1", "class": {"name": "Tucan", "extends": null, "implements": ["IAve", "IAveVoladora"], "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create a SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/valueinmap/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/valueinmap/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/valueinmap/ValueInMapTest.java", "stars": "15", "class": {"name": "ValueInMapTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldWorkWithAPropertyNamedValue", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldWorkWithAPropertyNamedValue() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Map<String, String> map = new HashMap<>();      map.put(\"table\", \"users\");      map.put(\"column\", \"name\");      map.put(\"value\", \"User1\");      Integer count = sqlSession.selectOne(\"count\", map);      Assertions.assertEquals(Integer.valueOf(1), count);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/valueinmap/ValueInMapTest.java", "stars": "15", "class": {"name": "ValueInMapTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldWorkWithAList", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldWorkWithAList() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      List<String> list = new ArrayList<>();      list.add(\"users\");      Assertions.assertThrows(PersistenceException.class, () -> sqlSession.selectOne(\"count2\",list));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/valueinmap/ValueInMapTest.java", "stars": "15", "class": {"name": "ValueInMapTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onMeasure", "params": ["int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {        if (mSizeRatio != 0) {            int widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);            int widthSpecSize = MeasureSpec.getSize(widthMeasureSpec);            int heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);            int heightSpecSize = MeasureSpec.getSize(heightMeasureSpec);            if (widthSpecMode == MeasureSpec.EXACTLY && heightSpecMode != MeasureSpec.EXACTLY) {                // \u5982\u679c\u5f53\u524d\u5bbd\u5ea6\u662f\u5199\u6b7b\u7684\uff0c\u4f46\u662f\u9ad8\u5ea6\u4e0d\u5199\u6b7b                heightMeasureSpec = MeasureSpec.makeMeasureSpec((int) (widthSpecSize / mSizeRatio), MeasureSpec.EXACTLY);            } else if (heightSpecMode == MeasureSpec.EXACTLY && widthSpecMode != MeasureSpec.EXACTLY) {                // \u5982\u679c\u5f53\u524d\u9ad8\u5ea6\u662f\u5199\u6b7b\u7684\uff0c\u4f46\u662f\u5bbd\u5ea6\u4e0d\u5199\u6b7b                widthMeasureSpec = MeasureSpec.makeMeasureSpec((int) (heightSpecSize * mSizeRatio), MeasureSpec.EXACTLY);            }        }        super.onMeasure(widthMeasureSpec, heightMeasureSpec);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/layout/RatioFrameLayout.java", "stars": "1", "class": {"name": "RatioFrameLayout", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //\u521b\u5efa\u4e00\u4e2aStream\u6d41        Stream<String> stream1 = Stream.of(\"\u5f20\u4e09\u4e30\", \"\u5f20\u7fe0\u5c71\", \"\u8d75\u654f\", \"\u5468\u82b7\u82e5\", \"\u5f20\u65e0\u5fcc\");        //\u83b7\u53d6\u4e00\u4e2aStream\u6d41        String[] arr = {\"\u7f8e\u7f8a\u7f8a\",\"\u559c\u6d0b\u6d0b\",\"\u61d2\u6d0b\u6d0b\",\"\u7070\u592a\u72fc\",\"\u7ea2\u592a\u72fc\"};        Stream<String> stream2 = Stream.of(arr);        //\u628a\u4ee5\u4e0a\u4e24\u4e2a\u6d41\u7ec4\u5408\u4e3a\u4e00\u4e2a\u6d41        Stream<String> concat = Stream.concat(stream1, stream2);        //\u904d\u5386concat\u6d41        concat.forEach(name-> System.out.println(name));    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/24.%E3%80%90Stream%E6%B5%81%E3%80%81%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%E3%80%91%E7%AC%94%E8%AE%B0/code/13_StreamAndMethodReference/src/com/itheima/demo02/Stream/Demo08Stream_concat.java", "stars": "2", "class": {"name": "Demo08Stream_concat", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getId() {        return id;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/controller/viewobject/ItemVO.java", "stars": "1", "class": {"name": "ItemVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Integer id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/controller/viewobject/ItemVO.java", "stars": "1", "class": {"name": "ItemVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTitle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTitle() {        return title;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/controller/viewobject/ItemVO.java", "stars": "1", "class": {"name": "ItemVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTitle", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTitle(String title) {        this.title = title;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/controller/viewobject/ItemVO.java", "stars": "1", "class": {"name": "ItemVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDescription", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDescription() {        return description;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/controller/viewobject/ItemVO.java", "stars": "1", "class": {"name": "ItemVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDescription", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDescription(String description) {        this.description = description;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/controller/viewobject/ItemVO.java", "stars": "1", "class": {"name": "ItemVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getImgUrl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getImgUrl() {        return imgUrl;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/controller/viewobject/ItemVO.java", "stars": "1", "class": {"name": "ItemVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setImgUrl", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setImgUrl(String imgUrl) {        this.imgUrl = imgUrl;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/controller/viewobject/ItemVO.java", "stars": "1", "class": {"name": "ItemVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPrice", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BigDecimal", "snippet": "    public BigDecimal getPrice() {        return price;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/controller/viewobject/ItemVO.java", "stars": "1", "class": {"name": "ItemVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPrice", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPrice(BigDecimal price) {        this.price = price;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/controller/viewobject/ItemVO.java", "stars": "1", "class": {"name": "ItemVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStock", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getStock() {        return stock;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/controller/viewobject/ItemVO.java", "stars": "1", "class": {"name": "ItemVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStock", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStock(Integer stock) {        this.stock = stock;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/controller/viewobject/ItemVO.java", "stars": "1", "class": {"name": "ItemVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSales", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getSales() {        return sales;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/controller/viewobject/ItemVO.java", "stars": "1", "class": {"name": "ItemVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSales", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSales(Integer sales) {        this.sales = sales;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/controller/viewobject/ItemVO.java", "stars": "1", "class": {"name": "ItemVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPromoId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getPromoId() {        return promoId;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/controller/viewobject/ItemVO.java", "stars": "1", "class": {"name": "ItemVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPromoId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPromoId(Integer promoId) {        this.promoId = promoId;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/controller/viewobject/ItemVO.java", "stars": "1", "class": {"name": "ItemVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPromoStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getPromoStatus() {        return promoStatus;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/controller/viewobject/ItemVO.java", "stars": "1", "class": {"name": "ItemVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPromoStatus", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPromoStatus(Integer promoStatus) {        this.promoStatus = promoStatus;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/controller/viewobject/ItemVO.java", "stars": "1", "class": {"name": "ItemVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStartDate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getStartDate() {        return startDate;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/controller/viewobject/ItemVO.java", "stars": "1", "class": {"name": "ItemVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStartDate", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStartDate(String startDate) {        this.startDate = startDate;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/controller/viewobject/ItemVO.java", "stars": "1", "class": {"name": "ItemVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPromoPrice", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BigDecimal", "snippet": "    public BigDecimal getPromoPrice() {        return promoPrice;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/controller/viewobject/ItemVO.java", "stars": "1", "class": {"name": "ItemVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPromoPrice", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPromoPrice(BigDecimal promoPrice) {        this.promoPrice = promoPrice;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/controller/viewobject/ItemVO.java", "stars": "1", "class": {"name": "ItemVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getX", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "    public double getX() {        return this.x;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/events/MotionEvent.java", "stars": "12", "class": {"name": "MotionEvent", "extends": "Event", "implements": null, "modifiers": ["public"]}}, {"method_name": "getY", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "    public double getY() {        return this.y;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/events/MotionEvent.java", "stars": "12", "class": {"name": "MotionEvent", "extends": "Event", "implements": null, "modifiers": ["public"]}}, {"method_name": "getZ", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "    public double getZ() {        return this.z;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/events/MotionEvent.java", "stars": "12", "class": {"name": "MotionEvent", "extends": "Event", "implements": null, "modifiers": ["public"]}}, {"method_name": "setX", "params": ["double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setX(final double x) {        this.x = x;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/events/MotionEvent.java", "stars": "12", "class": {"name": "MotionEvent", "extends": "Event", "implements": null, "modifiers": ["public"]}}, {"method_name": "setY", "params": ["double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setY(final double y) {        this.y = y;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/events/MotionEvent.java", "stars": "12", "class": {"name": "MotionEvent", "extends": "Event", "implements": null, "modifiers": ["public"]}}, {"method_name": "setZ", "params": ["double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setZ(final double z) {        this.z = z;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/events/MotionEvent.java", "stars": "12", "class": {"name": "MotionEvent", "extends": "Event", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_simple);        ButterKnife.bind(this);        boolean hadPermission = PermissionUtils.hasSelfPermissions(this, permissions);        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && !hadPermission) {            String[] permissions = {Manifest.permission.WRITE_EXTERNAL_STORAGE};            requestPermissions(permissions, 1110);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/simple/SimpleActivity.java", "stars": "2", "class": {"name": "SimpleActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onRequestPermissionsResult", "params": ["int", "String", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        super.onRequestPermissionsResult(requestCode, permissions, grantResults);        boolean sdPermissionResult = PermissionUtils.verifyPermissions(grantResults);        if (!sdPermissionResult) {            Toast.makeText(this, \"\u6ca1\u83b7\u53d6\u5230sd\u5361\u6743\u9650\uff0c\u65e0\u6cd5\u64ad\u653e\u672c\u5730\u89c6\u9891\u54e6\", Toast.LENGTH_LONG).show();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/simple/SimpleActivity.java", "stars": "2", "class": {"name": "SimpleActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClick(View view) {        switch (view.getId()) {            case R.id.simple_player:                startActivity(new Intent(this, SimplePlayer.class));                break;            case R.id.simple_list_1:                startActivity(new Intent(this, SimpleListVideoActivityMode1.class));                break;            case R.id.simple_list_2:                startActivity(new Intent(this, SimpleListVideoActivityMode2.class));                break;            case R.id.simple_detail_1:                startActivity(new Intent(this, SimpleDetailActivityMode1.class));                break;            case R.id.simple_detail_2:                startActivity(new Intent(this, SimpleDetailActivityMode2.class));                break;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/simple/SimpleActivity.java", "stars": "2", "class": {"name": "SimpleActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecutableFlow", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ExecutableFlow", "snippet": "  public ExecutableFlow getExecutableFlow() {    if (this.parentFlow == null) {      return null;    }    return this.parentFlow.getExecutableFlow();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getParentFlow", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ExecutableFlowBase", "snippet": "  public ExecutableFlowBase getParentFlow() {    return this.parentFlow;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setParentFlow", "params": ["ExecutableFlowBase"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setParentFlow(final ExecutableFlowBase flow) {    this.parentFlow = flow;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isDependentlinkFailed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isDependentlinkFailed() {    return isDependentlinkFailed;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDependentlinkFailed", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setDependentlinkFailed(boolean dependentlinkFailed) {    isDependentlinkFailed = dependentlinkFailed;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getId() {    return this.id;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setId(final String id) {    this.id = id;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Status", "snippet": "  public Status getStatus() {    return this.status;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStatus", "params": ["Status"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setStatus(final Status status) {    this.status = status;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getType() {    return this.type;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setType(final String type) {    this.type = type;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOuter", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getOuter() {    return this.outer;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOuter", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setOuter(String outer) {    this.outer = outer;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStartTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getStartTime() {    return this.startTime;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStartTime", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setStartTime(final long startTime) {    this.startTime = startTime;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEndTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getEndTime() {    return this.endTime;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEndTime", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setEndTime(final long endTime) {    this.endTime = endTime;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUpdateTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getUpdateTime() {    return this.updateTime;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUpdateTime", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setUpdateTime(final long updateTime) {    this.updateTime = updateTime;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isKilledBySLA", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isKilledBySLA() {    return this.killedBySLA;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setKilledBySLA", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setKilledBySLA(final boolean killedBySLA) {    this.killedBySLA = killedBySLA;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addOutNode", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void addOutNode(final String exNode) {    this.outNodes.add(exNode);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addInNode", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void addInNode(final String exNode) {    this.inNodes.add(exNode);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOutNodes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Set<String>", "snippet": "  public Set<String> getOutNodes() {    return this.outNodes;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInNodes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Set<String>", "snippet": "  public Set<String> getInNodes() {    return this.inNodes;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hasJobSource", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean hasJobSource() {    return this.jobSource != null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hasPropsSource", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean hasPropsSource() {    return this.propsSource != null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getJobSource", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getJobSource() {    return this.jobSource;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPropsSource", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getPropsSource() {    return this.propsSource;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInputProps", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Props", "snippet": "  public Props getInputProps() {    return this.inputProps;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setInputProps", "params": ["Props"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setInputProps(final Props input) {    this.inputProps = input;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOutputProps", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Props", "snippet": "  public Props getOutputProps() {    return this.outputProps;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOutputProps", "params": ["Props"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setOutputProps(final Props output) {    this.outputProps = output;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDelayedExecution", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getDelayedExecution() {    return this.delayExecution;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDelayedExecution", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setDelayedExecution(final long delayMs) {    this.delayExecution = delayMs;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPastAttemptList", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<ExecutionAttempt>", "snippet": "  public List<ExecutionAttempt> getPastAttemptList() {    return this.pastAttempts;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAttempt", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getAttempt() {    return this.attempt.get();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resetForRetry", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void resetForRetry() {    final ExecutionAttempt pastAttempt = new ExecutionAttempt(this.attempt.get(), this);    this.attempt.incrementAndGet();    synchronized (this) {      if (this.pastAttempts == null) {        this.pastAttempts = new ArrayList<>();      }      this.pastAttempts.add(pastAttempt);    }    this.setStartTime(-1);    this.setEndTime(-1);    this.setUpdateTime(System.currentTimeMillis());    this.setStatus(Status.READY);    this.setKilledBySLA(false);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAttemptObjects", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Object>", "snippet": "  public List<Object> getAttemptObjects() {    final ArrayList<Object> array = new ArrayList<>();    for (final ExecutionAttempt attempt : this.pastAttempts) {      array.add(attempt.toObject());    }    return array;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNestedId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getNestedId() {    return getPrintableId(\":\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPrintableId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getPrintableId(final String delimiter) {    if (this.getParentFlow() == null        || this.getParentFlow() instanceof ExecutableFlow) {      return getId();    }    return getParentFlow().getPrintableId(delimiter) + delimiter + getId();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toObject", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "  public Map<String, Object> toObject() {    final Map<String, Object> mapObj = new HashMap<>();    fillMapFromExecutable(mapObj);    return mapObj;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fillMapFromExecutable", "params": ["Map<String,Object>"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void fillMapFromExecutable(final Map<String, Object> objMap) {    objMap.put(ID_PARAM, this.id);    objMap.put(STATUS_PARAM, this.status.toString());    objMap.put(STARTTIME_PARAM, this.startTime);    objMap.put(ENDTIME_PARAM, this.endTime);    objMap.put(UPDATETIME_PARAM, this.updateTime);    objMap.put(TYPE_PARAM, this.type);    objMap.put(OUTER_PARAM, this.outer);    objMap.put(CONDITION_PARAM, this.condition);    if (this.conditionOnJobStatus != null) {      objMap.put(CONDITION_ON_JOB_STATUS_PARAM, this.conditionOnJobStatus.toString());    }    objMap.put(ATTEMPT_PARAM, this.attempt);    if (this.inNodes != null && !this.inNodes.isEmpty()) {      objMap.put(INNODES_PARAM, this.inNodes);    }    if (this.outNodes != null && !this.outNodes.isEmpty()) {      objMap.put(OUTNODES_PARAM, this.outNodes);    }    if (hasPropsSource()) {      objMap.put(PROPS_SOURCE_PARAM, this.propsSource);    }    if (hasJobSource()) {      objMap.put(JOB_SOURCE_PARAM, this.jobSource);    }    if (this.outputProps != null && this.outputProps.size() > 0) {      objMap.put(OUTPUT_PROPS_PARAM, PropsUtils.toStringMap(this.outputProps, true));    }    if (this.pastAttempts != null) {      final ArrayList<Object> attemptsList =          new ArrayList<>(this.pastAttempts.size());      for (final ExecutionAttempt attempts : this.pastAttempts) {        attemptsList.add(attempts.toObject());      }      objMap.put(PASTATTEMPTS_PARAM, attemptsList);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fillExecutableFromMapObject", "params": ["TypedMapWrapper<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void fillExecutableFromMapObject(      final TypedMapWrapper<String, Object> wrappedMap) {    this.id = wrappedMap.getString(ID_PARAM);    this.type = wrappedMap.getString(TYPE_PARAM);    this.outer = wrappedMap.getString(OUTER_PARAM);    this.condition = wrappedMap.getString(CONDITION_PARAM);    this.conditionOnJobStatus = ConditionOnJobStatus.fromString(wrappedMap.getString        (CONDITION_ON_JOB_STATUS_PARAM));    this.status = Status.valueOf(wrappedMap.getString(STATUS_PARAM));    this.startTime = wrappedMap.getLong(STARTTIME_PARAM);    this.endTime = wrappedMap.getLong(ENDTIME_PARAM);    this.updateTime = wrappedMap.getLong(UPDATETIME_PARAM);    this.attempt.set(wrappedMap.getInt(ATTEMPT_PARAM, 0));    this.inNodes = new HashSet<>();    this.inNodes.addAll(wrappedMap.getStringCollection(INNODES_PARAM,        Collections.<String>emptySet()));    this.outNodes = new HashSet<>();    this.outNodes.addAll(wrappedMap.getStringCollection(OUTNODES_PARAM,        Collections.<String>emptySet()));    this.propsSource = wrappedMap.getString(PROPS_SOURCE_PARAM);    this.jobSource = wrappedMap.getString(JOB_SOURCE_PARAM);    final Map<String, String> outputProps =        wrappedMap.<String, String>getMap(OUTPUT_PROPS_PARAM);    if (outputProps != null) {      this.outputProps = new Props(null, outputProps);    }    final Collection<Object> pastAttempts =        wrappedMap.<Object>getCollection(PASTATTEMPTS_PARAM);    if (pastAttempts != null) {      final ArrayList<ExecutionAttempt> attempts = new ArrayList<>();      for (final Object attemptObj : pastAttempts) {        final ExecutionAttempt attempt = ExecutionAttempt.fromObject(attemptObj);        attempts.add(attempt);      }      this.pastAttempts = attempts;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fillExecutableFromMapObject", "params": ["Map<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void fillExecutableFromMapObject(final Map<String, Object> objMap) {    final TypedMapWrapper<String, Object> wrapper =        new TypedMapWrapper<>(objMap);    fillExecutableFromMapObject(wrapper);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toUpdateObject", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "  public Map<String, Object> toUpdateObject() {    final Map<String, Object> updatedNodeMap = new HashMap<>();    updatedNodeMap.put(ID_PARAM, getId());    updatedNodeMap.put(STATUS_PARAM, getStatus().getNumVal());    updatedNodeMap.put(STARTTIME_PARAM, getStartTime());    updatedNodeMap.put(ENDTIME_PARAM, getEndTime());    updatedNodeMap.put(UPDATETIME_PARAM, getUpdateTime());    updatedNodeMap.put(ATTEMPT_PARAM, getAttempt());    if (getAttempt() > 0) {      final ArrayList<Map<String, Object>> pastAttempts =          new ArrayList<>();      for (final ExecutionAttempt attempt : getPastAttemptList()) {        pastAttempts.add(attempt.toObject());      }      updatedNodeMap.put(PASTATTEMPTS_PARAM, pastAttempts);    }    return updatedNodeMap;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "applyUpdateObject", "params": ["TypedMapWrapper<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void applyUpdateObject(final TypedMapWrapper<String, Object> updateData) {    this.status =        Status.fromInteger(updateData.getInt(STATUS_PARAM,            this.status.getNumVal()));    this.startTime = updateData.getLong(STARTTIME_PARAM);    this.updateTime = updateData.getLong(UPDATETIME_PARAM);    this.endTime = updateData.getLong(ENDTIME_PARAM);    if (updateData.containsKey(ATTEMPT_PARAM)) {      this.attempt.set(updateData.getInt(ATTEMPT_PARAM));      if (this.attempt.get() > 0) {        updatePastAttempts(updateData.<Object>getList(PASTATTEMPTS_PARAM,            Collections.<Object>emptyList()));      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "applyUpdateObject", "params": ["Map<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void applyUpdateObject(final Map<String, Object> updateData) {    final TypedMapWrapper<String, Object> wrapper =        new TypedMapWrapper<>(updateData);    applyUpdateObject(wrapper);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "cancelNode", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void cancelNode(final long cancelTime) {    if (this.status == Status.DISABLED) {      skipNode(cancelTime);    } else {      this.setStatus(Status.CANCELLED);      this.setStartTime(cancelTime);      this.setEndTime(cancelTime);      this.setUpdateTime(cancelTime);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "skipNode", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void skipNode(final long skipTime) {    this.setStatus(Status.SKIPPED);    this.setStartTime(skipTime);    this.setEndTime(skipTime);    this.setUpdateTime(skipTime);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "faliedSkipedNode", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void faliedSkipedNode(final long failedSkipedTime) {    this.setStatus(Status.FAILED_SKIPPED);    this.setStartTime(failedSkipedTime);    this.setEndTime(failedSkipedTime);    this.setUpdateTime(failedSkipedTime);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updatePastAttempts", "params": ["List<Object>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void updatePastAttempts(final List<Object> pastAttemptsList) {    if (pastAttemptsList == null) {      return;    }    synchronized (this) {      if (this.pastAttempts == null) {        this.pastAttempts = new ArrayList<>();      }      // We just check size because past attempts don't change      if (pastAttemptsList.size() <= this.pastAttempts.size()) {        return;      }      final Object[] pastAttemptArray = pastAttemptsList.toArray();      for (int i = this.pastAttempts.size(); i < pastAttemptArray.length; ++i) {        final ExecutionAttempt attempt =            ExecutionAttempt.fromObject(pastAttemptArray[i]);        this.pastAttempts.add(attempt);      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRetries", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getRetries() {    return this.inputProps.getInt(\"retries\", 0);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRetryBackoff", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getRetryBackoff() {    return this.inputProps.getLong(\"retry.backoff\", 0);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCondition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getCondition() {    return this.condition;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCondition", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setCondition(final String condition) {    this.condition = condition;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getConditionOnJobStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ConditionOnJobStatus", "snippet": "  public ConditionOnJobStatus getConditionOnJobStatus() {    return this.conditionOnJobStatus == null ? ConditionOnJobStatus.ALL_SUCCESS        : this.conditionOnJobStatus;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setConditionOnJobStatus", "params": ["ConditionOnJobStatus"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setConditionOnJobStatus(final ConditionOnJobStatus conditionOnJobStatus) {    this.conditionOnJobStatus = conditionOnJobStatus;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java", "stars": "18", "class": {"name": "ExecutableNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "copyOfRange", "params": ["T", "int", "int"], "throws": null, "modifiers": ["private", "static"], "return_type": "T", "snippet": "    private static <T> T[] copyOfRange(T[] original, int start, int end) {        final int originalLength = original.length; // For exception priority compatibility.        if (start > end) {            throw new IllegalArgumentException();        }        if (start < 0 || start > originalLength) {            throw new ArrayIndexOutOfBoundsException();        }        final int resultLength = end - start;        final int copyLength = Math.min(resultLength, originalLength - start);        final T[] result = (T[]) Array                .newInstance(original.getClass().getComponentType(), resultLength);        System.arraycopy(original, start, result, 0, copyLength);        return result;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "DiskLruCache", "extends": null, "implements": ["Closeable"], "modifiers": ["public", "final"]}}, {"method_name": "readFully", "params": ["Reader"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String readFully(Reader reader) throws IOException {        try {            StringWriter writer = new StringWriter();            char[] buffer = new char[1024];            int count;            while ((count = reader.read(buffer)) != -1) {                writer.write(buffer, 0, count);            }            return writer.toString();        } finally {            reader.close();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "DiskLruCache", "extends": null, "implements": ["Closeable"], "modifiers": ["public", "final"]}}, {"method_name": "readAsciiLine", "params": ["InputStream"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String readAsciiLine(InputStream in) throws IOException {        // TODO: support UTF-8 here instead        StringBuilder result = new StringBuilder(80);        while (true) {            int c = in.read();            if (c == -1) {                throw new EOFException();            } else if (c == '\\n') {                break;            }            result.append((char) c);        }        int length = result.length();        if (length > 0 && result.charAt(length - 1) == '\\r') {            result.setLength(length - 1);        }        return result.toString();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "DiskLruCache", "extends": null, "implements": ["Closeable"], "modifiers": ["public", "final"]}}, {"method_name": "closeQuietly", "params": ["Closeable"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void closeQuietly(Closeable closeable) {        if (closeable != null) {            try {                closeable.close();            } catch (RuntimeException rethrown) {                throw rethrown;            } catch (Exception ignored) {            }        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "DiskLruCache", "extends": null, "implements": ["Closeable"], "modifiers": ["public", "final"]}}, {"method_name": "deleteContents", "params": ["File"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void deleteContents(File dir) throws IOException {        File[] files = dir.listFiles();        if (files == null) {            throw new IllegalArgumentException(\"not a directory: \" + dir);        }        for (File file : files) {            if (file.isDirectory()) {                deleteContents(file);            }            if (!file.delete()) {                throw new IOException(\"failed to delete file: \" + file);            }        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "DiskLruCache", "extends": null, "implements": ["Closeable"], "modifiers": ["public", "final"]}}, {"method_name": "open", "params": ["File", "int", "int", "long"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "DiskLruCache", "snippet": "    public static DiskLruCache open(File directory, int appVersion, int valueCount, long maxSize)            throws IOException {        if (maxSize <= 0) {            throw new IllegalArgumentException(\"maxSize <= 0\");        }        if (valueCount <= 0) {            throw new IllegalArgumentException(\"valueCount <= 0\");        }        // prefer to pick up where we left off        DiskLruCache cache = new DiskLruCache(directory, appVersion, valueCount, maxSize);        if (cache.journalFile.exists()) {            try {                cache.readJournal();                cache.processJournal();                cache.journalWriter = new BufferedWriter(new FileWriter(cache.journalFile, true),                        IO_BUFFER_SIZE);                return cache;            } catch (IOException journalIsCorrupt) {//                System.logW(\"DiskLruCache \" + directory + \" is corrupt: \"//                        + journalIsCorrupt.getMessage() + \", removing\");                cache.delete();            }        }        // create a new empty cache        directory.mkdirs();        cache = new DiskLruCache(directory, appVersion, valueCount, maxSize);        cache.rebuildJournal();        return cache;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "DiskLruCache", "extends": null, "implements": ["Closeable"], "modifiers": ["public", "final"]}}, {"method_name": "readJournal", "params": [], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void readJournal() throws IOException {        InputStream in = new BufferedInputStream(new FileInputStream(journalFile), IO_BUFFER_SIZE);        try {            String magic = readAsciiLine(in);            String version = readAsciiLine(in);            String appVersionString = readAsciiLine(in);            String valueCountString = readAsciiLine(in);            String blank = readAsciiLine(in);            if (!MAGIC.equals(magic)                    || !VERSION_1.equals(version)                    || !Integer.toString(appVersion).equals(appVersionString)                    || !Integer.toString(valueCount).equals(valueCountString)                    || !\"\".equals(blank)) {                throw new IOException(\"unexpected journal header: [\"                        + magic + \", \" + version + \", \" + valueCountString + \", \" + blank + \"]\");            }            while (true) {                try {                    readJournalLine(readAsciiLine(in));                } catch (EOFException endOfJournal) {                    break;                }            }        } finally {            closeQuietly(in);        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "DiskLruCache", "extends": null, "implements": ["Closeable"], "modifiers": ["public", "final"]}}, {"method_name": "readJournalLine", "params": ["String"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void readJournalLine(String line) throws IOException {        String[] parts = line.split(\" \");        if (parts.length < 2) {            throw new IOException(\"unexpected journal line: \" + line);        }        String key = parts[1];        if (parts[0].equals(REMOVE) && parts.length == 2) {            lruEntries.remove(key);            return;        }        Entry entry = lruEntries.get(key);        if (entry == null) {            entry = new Entry(key);            lruEntries.put(key, entry);        }        if (parts[0].equals(CLEAN) && parts.length == 2 + valueCount) {            entry.readable = true;            entry.currentEditor = null;            entry.setLengths(copyOfRange(parts, 2, parts.length));        } else if (parts[0].equals(DIRTY) && parts.length == 2) {            entry.currentEditor = new Editor(entry);        } else if (parts[0].equals(READ) && parts.length == 2) {            // this work was already done by calling lruEntries.get()        } else {            throw new IOException(\"unexpected journal line: \" + line);        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "DiskLruCache", "extends": null, "implements": ["Closeable"], "modifiers": ["public", "final"]}}, {"method_name": "processJournal", "params": [], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void processJournal() throws IOException {        deleteIfExists(journalFileTmp);        for (Iterator<Entry> i = lruEntries.values().iterator(); i.hasNext(); ) {            Entry entry = i.next();            if (entry.currentEditor == null) {                for (int t = 0; t < valueCount; t++) {                    size += entry.lengths[t];                }            } else {                entry.currentEditor = null;                for (int t = 0; t < valueCount; t++) {                    deleteIfExists(entry.getCleanFile(t));                    deleteIfExists(entry.getDirtyFile(t));                }                i.remove();            }        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "DiskLruCache", "extends": null, "implements": ["Closeable"], "modifiers": ["public", "final"]}}, {"method_name": "rebuildJournal", "params": [], "throws": ["IOException"], "modifiers": ["synchronized", "private"], "return_type": "void", "snippet": "    private synchronized void rebuildJournal() throws IOException {        if (journalWriter != null) {            journalWriter.close();        }        Writer writer = new BufferedWriter(new FileWriter(journalFileTmp), IO_BUFFER_SIZE);        writer.write(MAGIC);        writer.write(\"\\n\");        writer.write(VERSION_1);        writer.write(\"\\n\");        writer.write(Integer.toString(appVersion));        writer.write(\"\\n\");        writer.write(Integer.toString(valueCount));        writer.write(\"\\n\");        writer.write(\"\\n\");        for (Entry entry : lruEntries.values()) {            if (entry.currentEditor != null) {                writer.write(DIRTY + ' ' + entry.key + '\\n');            } else {                writer.write(CLEAN + ' ' + entry.key + entry.getLengths() + '\\n');            }        }        writer.close();        journalFileTmp.renameTo(journalFile);        journalWriter = new BufferedWriter(new FileWriter(journalFile, true), IO_BUFFER_SIZE);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "DiskLruCache", "extends": null, "implements": ["Closeable"], "modifiers": ["public", "final"]}}, {"method_name": "deleteIfExists", "params": ["File"], "throws": ["IOException"], "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void deleteIfExists(File file) throws IOException {//        try {//            Libcore.os.remove(file.getPath());//        } catch (ErrnoException errnoException) {//            if (errnoException.errno != OsConstants.ENOENT) {//                throw errnoException.rethrowAsIOException();//            }//        }        if (file.exists() && !file.delete()) {            throw new IOException();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "DiskLruCache", "extends": null, "implements": ["Closeable"], "modifiers": ["public", "final"]}}, {"method_name": "get", "params": ["String"], "throws": ["IOException"], "modifiers": ["synchronized", "public"], "return_type": "Snapshot", "snippet": "    public synchronized Snapshot get(String key) throws IOException {        checkNotClosed();        validateKey(key);        Entry entry = lruEntries.get(key);        if (entry == null) {            return null;        }        if (!entry.readable) {            return null;        }        /*         * Open all streams eagerly to guarantee that we see a single published         * snapshot. If we opened streams lazily then the streams could come         * from different edits.         */        InputStream[] ins = new InputStream[valueCount];        try {            for (int i = 0; i < valueCount; i++) {                ins[i] = new FileInputStream(entry.getCleanFile(i));            }        } catch (FileNotFoundException e) {            // a file must have been deleted manually!            return null;        }        redundantOpCount++;        journalWriter.append(READ + ' ' + key + '\\n');        if (journalRebuildRequired()) {            executorService.submit(cleanupCallable);        }        return new Snapshot(key, entry.sequenceNumber, ins);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "DiskLruCache", "extends": null, "implements": ["Closeable"], "modifiers": ["public", "final"]}}, {"method_name": "edit", "params": ["String"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "Editor", "snippet": "    public Editor edit(String key) throws IOException {        return edit(key, ANY_SEQUENCE_NUMBER);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "DiskLruCache", "extends": null, "implements": ["Closeable"], "modifiers": ["public", "final"]}}, {"method_name": "edit", "params": ["String", "long"], "throws": ["IOException"], "modifiers": ["synchronized", "private"], "return_type": "Editor", "snippet": "    private synchronized Editor edit(String key, long expectedSequenceNumber) throws IOException {        checkNotClosed();        validateKey(key);        Entry entry = lruEntries.get(key);        if (expectedSequenceNumber != ANY_SEQUENCE_NUMBER                && (entry == null || entry.sequenceNumber != expectedSequenceNumber)) {            return null; // snapshot is stale        }        if (entry == null) {            entry = new Entry(key);            lruEntries.put(key, entry);        } else if (entry.currentEditor != null) {            return null; // another edit is in progress        }        Editor editor = new Editor(entry);        entry.currentEditor = editor;        // flush the journal before creating files to prevent file leaks        journalWriter.write(DIRTY + ' ' + key + '\\n');        journalWriter.flush();        return editor;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "DiskLruCache", "extends": null, "implements": ["Closeable"], "modifiers": ["public", "final"]}}, {"method_name": "getDirectory", "params": [], "throws": null, "modifiers": ["public"], "return_type": "File", "snippet": "    public File getDirectory() {        return directory;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "DiskLruCache", "extends": null, "implements": ["Closeable"], "modifiers": ["public", "final"]}}, {"method_name": "maxSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long maxSize() {        return maxSize;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "DiskLruCache", "extends": null, "implements": ["Closeable"], "modifiers": ["public", "final"]}}, {"method_name": "size", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "long", "snippet": "    public synchronized long size() {        return size;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "DiskLruCache", "extends": null, "implements": ["Closeable"], "modifiers": ["public", "final"]}}, {"method_name": "completeEdit", "params": ["Editor", "boolean"], "throws": ["IOException"], "modifiers": ["synchronized", "private"], "return_type": "void", "snippet": "    private synchronized void completeEdit(Editor editor, boolean success) throws IOException {        Entry entry = editor.entry;        if (entry.currentEditor != editor) {            throw new IllegalStateException();        }        // if this edit is creating the entry for the first time, every index must have a value        if (success && !entry.readable) {            for (int i = 0; i < valueCount; i++) {                if (!entry.getDirtyFile(i).exists()) {                    editor.abort();                    throw new IllegalStateException(\"edit didn't create file \" + i);                }            }        }        for (int i = 0; i < valueCount; i++) {            File dirty = entry.getDirtyFile(i);            if (success) {                if (dirty.exists()) {                    File clean = entry.getCleanFile(i);                    dirty.renameTo(clean);                    long oldLength = entry.lengths[i];                    long newLength = clean.length();                    entry.lengths[i] = newLength;                    size = size - oldLength + newLength;                }            } else {                deleteIfExists(dirty);            }        }        redundantOpCount++;        entry.currentEditor = null;        if (entry.readable | success) {            entry.readable = true;            journalWriter.write(CLEAN + ' ' + entry.key + entry.getLengths() + '\\n');            if (success) {                entry.sequenceNumber = nextSequenceNumber++;            }        } else {            lruEntries.remove(entry.key);            journalWriter.write(REMOVE + ' ' + entry.key + '\\n');        }        if (size > maxSize || journalRebuildRequired()) {            executorService.submit(cleanupCallable);        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "DiskLruCache", "extends": null, "implements": ["Closeable"], "modifiers": ["public", "final"]}}, {"method_name": "journalRebuildRequired", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean journalRebuildRequired() {        final int REDUNDANT_OP_COMPACT_THRESHOLD = 2000;        return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD                && redundantOpCount >= lruEntries.size();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "DiskLruCache", "extends": null, "implements": ["Closeable"], "modifiers": ["public", "final"]}}, {"method_name": "remove", "params": ["String"], "throws": ["IOException"], "modifiers": ["synchronized", "public"], "return_type": "boolean", "snippet": "    public synchronized boolean remove(String key) throws IOException {        checkNotClosed();        validateKey(key);        Entry entry = lruEntries.get(key);        if (entry == null || entry.currentEditor != null) {            return false;        }        for (int i = 0; i < valueCount; i++) {            File file = entry.getCleanFile(i);            if (!file.delete()) {                throw new IOException(\"failed to delete \" + file);            }            size -= entry.lengths[i];            entry.lengths[i] = 0;        }        redundantOpCount++;        journalWriter.append(REMOVE + ' ' + key + '\\n');        lruEntries.remove(key);        if (journalRebuildRequired()) {            executorService.submit(cleanupCallable);        }        return true;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "DiskLruCache", "extends": null, "implements": ["Closeable"], "modifiers": ["public", "final"]}}, {"method_name": "isClosed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isClosed() {        return journalWriter == null;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "DiskLruCache", "extends": null, "implements": ["Closeable"], "modifiers": ["public", "final"]}}, {"method_name": "checkNotClosed", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void checkNotClosed() {        if (journalWriter == null) {            throw new IllegalStateException(\"cache is closed\");        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "DiskLruCache", "extends": null, "implements": ["Closeable"], "modifiers": ["public", "final"]}}, {"method_name": "flush", "params": [], "throws": ["IOException"], "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void flush() throws IOException {        checkNotClosed();        trimToSize();        journalWriter.flush();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "DiskLruCache", "extends": null, "implements": ["Closeable"], "modifiers": ["public", "final"]}}, {"method_name": "close", "params": [], "throws": ["IOException"], "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void close() throws IOException {        if (journalWriter == null) {            return; // already closed        }        for (Entry entry : new ArrayList<Entry>(lruEntries.values())) {            if (entry.currentEditor != null) {                entry.currentEditor.abort();            }        }        trimToSize();        journalWriter.close();        journalWriter = null;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "DiskLruCache", "extends": null, "implements": ["Closeable"], "modifiers": ["public", "final"]}}, {"method_name": "trimToSize", "params": [], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void trimToSize() throws IOException {        while (size > maxSize) {//            Map.Entry<String, Entry> toEvict = lruEntries.eldest();            final Map.Entry<String, Entry> toEvict = lruEntries.entrySet().iterator().next();            remove(toEvict.getKey());        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "DiskLruCache", "extends": null, "implements": ["Closeable"], "modifiers": ["public", "final"]}}, {"method_name": "delete", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void delete() throws IOException {        close();        deleteContents(directory);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "DiskLruCache", "extends": null, "implements": ["Closeable"], "modifiers": ["public", "final"]}}, {"method_name": "validateKey", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void validateKey(String key) {        if (key.contains(\" \") || key.contains(\"\\n\") || key.contains(\"\\r\")) {            throw new IllegalArgumentException(                    \"keys must not contain spaces or newlines: \\\"\" + key + \"\\\"\");        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "DiskLruCache", "extends": null, "implements": ["Closeable"], "modifiers": ["public", "final"]}}, {"method_name": "inputStreamToString", "params": ["InputStream"], "throws": ["IOException"], "modifiers": ["private", "static"], "return_type": "String", "snippet": "    private static String inputStreamToString(InputStream in) throws IOException {        return readFully(new InputStreamReader(in, UTF_8));    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "DiskLruCache", "extends": null, "implements": ["Closeable"], "modifiers": ["public", "final"]}}, {"method_name": "edit", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "Editor", "snippet": "        public Editor edit() throws IOException {            return DiskLruCache.this.edit(key, sequenceNumber);        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "Snapshot", "extends": null, "implements": ["Closeable"], "modifiers": ["public", "final"]}}, {"method_name": "getInputStream", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "InputStream", "snippet": "        public InputStream getInputStream(int index) {            return ins[index];        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "Snapshot", "extends": null, "implements": ["Closeable"], "modifiers": ["public", "final"]}}, {"method_name": "getString", "params": ["int"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "String", "snippet": "        public String getString(int index) throws IOException {            return inputStreamToString(getInputStream(index));        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "Snapshot", "extends": null, "implements": ["Closeable"], "modifiers": ["public", "final"]}}, {"method_name": "close", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        @Override public void close() {            for (InputStream in : ins) {                closeQuietly(in);            }        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "Snapshot", "extends": null, "implements": ["Closeable"], "modifiers": ["public", "final"]}}, {"method_name": "newInputStream", "params": ["int"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "InputStream", "snippet": "        public InputStream newInputStream(int index) throws IOException {            synchronized (DiskLruCache.this) {                if (entry.currentEditor != this) {                    throw new IllegalStateException();                }                if (!entry.readable) {                    return null;                }                return new FileInputStream(entry.getCleanFile(index));            }        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "Editor", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getString", "params": ["int"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "String", "snippet": "        public String getString(int index) throws IOException {            InputStream in = newInputStream(index);            return in != null ? inputStreamToString(in) : null;        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "Editor", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "newOutputStream", "params": ["int"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "OutputStream", "snippet": "        public OutputStream newOutputStream(int index) throws IOException {            synchronized (DiskLruCache.this) {                if (entry.currentEditor != this) {                    throw new IllegalStateException();                }                return new FaultHidingOutputStream(new FileOutputStream(entry.getDirtyFile(index)));            }        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "Editor", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "set", "params": ["int", "String"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "        public void set(int index, String value) throws IOException {            Writer writer = null;            try {                writer = new OutputStreamWriter(newOutputStream(index), UTF_8);                writer.write(value);            } finally {                closeQuietly(writer);            }        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "Editor", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "commit", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "        public void commit() throws IOException {            if (hasErrors) {                completeEdit(this, false);                remove(entry.key); // the previous entry is stale            } else {                completeEdit(this, true);            }        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "Editor", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "abort", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "        public void abort() throws IOException {            completeEdit(this, false);        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "Editor", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "write", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "            @Override public void write(int oneByte) {                try {                    out.write(oneByte);                } catch (IOException e) {                    hasErrors = true;                }            }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "FaultHidingOutputStream", "extends": "FilterOutputStream", "implements": null, "modifiers": ["private"]}}, {"method_name": "write", "params": ["byte", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "            @Override public void write(byte[] buffer, int offset, int length) {                try {                    out.write(buffer, offset, length);                } catch (IOException e) {                    hasErrors = true;                }            }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "FaultHidingOutputStream", "extends": "FilterOutputStream", "implements": null, "modifiers": ["private"]}}, {"method_name": "close", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "            @Override public void close() {                try {                    out.close();                } catch (IOException e) {                    hasErrors = true;                }            }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "FaultHidingOutputStream", "extends": "FilterOutputStream", "implements": null, "modifiers": ["private"]}}, {"method_name": "flush", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "            @Override public void flush() {                try {                    out.flush();                } catch (IOException e) {                    hasErrors = true;                }            }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "FaultHidingOutputStream", "extends": "FilterOutputStream", "implements": null, "modifiers": ["private"]}}, {"method_name": "getLengths", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "String", "snippet": "        public String getLengths() throws IOException {            StringBuilder result = new StringBuilder();            for (long size : lengths) {                result.append(' ').append(size);            }            return result.toString();        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "Entry", "extends": null, "implements": null, "modifiers": ["private", "final"]}}, {"method_name": "setLengths", "params": ["String"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "        private void setLengths(String[] strings) throws IOException {            if (strings.length != valueCount) {                throw invalidLengths(strings);            }            try {                for (int i = 0; i < strings.length; i++) {                    lengths[i] = Long.parseLong(strings[i]);                }            } catch (NumberFormatException e) {                throw invalidLengths(strings);            }        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "Entry", "extends": null, "implements": null, "modifiers": ["private", "final"]}}, {"method_name": "invalidLengths", "params": ["String"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "IOException", "snippet": "        private IOException invalidLengths(String[] strings) throws IOException {            throw new IOException(\"unexpected journal line: \" + Arrays.toString(strings));        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "Entry", "extends": null, "implements": null, "modifiers": ["private", "final"]}}, {"method_name": "getCleanFile", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "File", "snippet": "        public File getCleanFile(int i) {            return new File(directory, key + \".\" + i);        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "Entry", "extends": null, "implements": null, "modifiers": ["private", "final"]}}, {"method_name": "getDirtyFile", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "File", "snippet": "        public File getDirtyFile(int i) {            return new File(directory, key + \".\" + i + \".tmp\");        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/DiskLruCache.java", "stars": "74", "class": {"name": "Entry", "extends": null, "implements": null, "modifiers": ["private", "final"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {//        greeting();        int a = 10;        int b = 20;        int ans = sum(a, b);        String name = \"Kunal\";        System.out.println(\"The sum is \" + ans);    }", "url": "https://raw.githubusercontent.com/kunal-kushwaha/Progate-Java-101/master/src/com/kunal/Functions.java", "stars": "1", "class": {"name": "Functions", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sum", "params": ["int", "int"], "throws": null, "modifiers": ["static"], "return_type": "int", "snippet": "    static int sum(int num1, int num2){        return num1 + num2;    }", "url": "https://raw.githubusercontent.com/kunal-kushwaha/Progate-Java-101/master/src/com/kunal/Functions.java", "stars": "1", "class": {"name": "Functions", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "greeting", "params": [], "throws": null, "modifiers": ["static"], "return_type": "void", "snippet": "    static void greeting() {        System.out.println(\"Hello World\");    }", "url": "https://raw.githubusercontent.com/kunal-kushwaha/Progate-Java-101/master/src/com/kunal/Functions.java", "stars": "1", "class": {"name": "Functions", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "draw", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void draw (android.graphics.Canvas p0)\t{\t\tn_draw (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CircularProgress.java", "stars": "2", "class": {"name": "CircularProgress", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_draw", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_draw (android.graphics.Canvas p0);\tpublic void layout (int p0, int p1, int p2, int p3)\t{\t\tn_layout (p0, p1, p2, p3);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CircularProgress.java", "stars": "2", "class": {"name": "CircularProgress", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "layout", "params": ["int", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void layout (int p0, int p1, int p2, int p3)\t{\t\tn_layout (p0, p1, p2, p3);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CircularProgress.java", "stars": "2", "class": {"name": "CircularProgress", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_layout", "params": ["int", "int", "int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_layout (int p0, int p1, int p2, int p3);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CircularProgress.java", "stars": "2", "class": {"name": "CircularProgress", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CircularProgress.java", "stars": "2", "class": {"name": "CircularProgress", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CircularProgress.java", "stars": "2", "class": {"name": "CircularProgress", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "write", "params": ["JSONSerializer", "Object", "Object", "Type", "int"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void write(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, int features) throws IOException {        SerializeWriter out = serializer.out;        StatusCode value = (StatusCode) object;        if (value == null) {            out.writeNull();        } else {            out.writeString((String) value.code());        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/fastJson/StatusCodeSerializer.java", "stars": "7", "class": {"name": "StatusCodeSerializer", "extends": null, "implements": ["ObjectSerializer"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws IOException {        show03();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/16.%E3%80%90%E5%BC%82%E5%B8%B8%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%91-%E7%AC%94%E8%AE%B0/20.%E3%80%90%E5%AD%97%E8%8A%82%E6%B5%81%E3%80%81%E5%AD%97%E7%AC%A6%E6%B5%81%E3%80%91-%E7%AC%94%E8%AE%B0/code/09_IOAndProperties/src/com/itheima/demo07/Prop/Demo01Properties.java", "stars": "2", "class": {"name": "Demo01Properties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show03", "params": [], "throws": ["IOException"], "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void show03() throws IOException {        //1.\u521b\u5efaProperties\u96c6\u5408\u5bf9\u8c61        Properties prop = new Properties();        //2.\u4f7f\u7528Properties\u96c6\u5408\u5bf9\u8c61\u4e2d\u7684\u65b9\u6cd5load\u8bfb\u53d6\u4fdd\u5b58\u952e\u503c\u5bf9\u7684\u6587\u4ef6        prop.load(new FileReader(\"09_IOAndProperties\\\\prop.txt\"));        //prop.load(new FileInputStream(\"09_IOAndProperties\\\\prop.txt\"));        //3.\u904d\u5386Properties\u96c6\u5408        Set<String> set = prop.stringPropertyNames();        for (String key : set) {            String value = prop.getProperty(key);            System.out.println(key+\"=\"+value);        }    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/16.%E3%80%90%E5%BC%82%E5%B8%B8%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%91-%E7%AC%94%E8%AE%B0/20.%E3%80%90%E5%AD%97%E8%8A%82%E6%B5%81%E3%80%81%E5%AD%97%E7%AC%A6%E6%B5%81%E3%80%91-%E7%AC%94%E8%AE%B0/code/09_IOAndProperties/src/com/itheima/demo07/Prop/Demo01Properties.java", "stars": "2", "class": {"name": "Demo01Properties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show02", "params": [], "throws": ["IOException"], "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void show02() throws IOException {        //1.\u521b\u5efaProperties\u96c6\u5408\u5bf9\u8c61,\u6dfb\u52a0\u6570\u636e        Properties prop = new Properties();        prop.setProperty(\"\u8d75\u4e3d\u9896\",\"168\");        prop.setProperty(\"\u8fea\u4e3d\u70ed\u5df4\",\"165\");        prop.setProperty(\"\u53e4\u529b\u5a1c\u624e\",\"160\");        //2.\u521b\u5efa\u5b57\u8282\u8f93\u51fa\u6d41/\u5b57\u7b26\u8f93\u51fa\u6d41\u5bf9\u8c61,\u6784\u9020\u65b9\u6cd5\u4e2d\u7ed1\u5b9a\u8981\u8f93\u51fa\u7684\u76ee\u7684\u5730        //FileWriter fw = new FileWriter(\"09_IOAndProperties\\\\prop.txt\");        //3.\u4f7f\u7528Properties\u96c6\u5408\u4e2d\u7684\u65b9\u6cd5store,\u628a\u96c6\u5408\u4e2d\u7684\u4e34\u65f6\u6570\u636e,\u6301\u4e45\u5316\u5199\u5165\u5230\u786c\u76d8\u4e2d\u5b58\u50a8        //prop.store(fw,\"save data\");        //4.\u91ca\u653e\u8d44\u6e90        //fw.close();        prop.store(new FileOutputStream(\"09_IOAndProperties\\\\prop2.txt\"),\"\");    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/16.%E3%80%90%E5%BC%82%E5%B8%B8%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%91-%E7%AC%94%E8%AE%B0/20.%E3%80%90%E5%AD%97%E8%8A%82%E6%B5%81%E3%80%81%E5%AD%97%E7%AC%A6%E6%B5%81%E3%80%91-%E7%AC%94%E8%AE%B0/code/09_IOAndProperties/src/com/itheima/demo07/Prop/Demo01Properties.java", "stars": "2", "class": {"name": "Demo01Properties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show01", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void show01() {        //\u521b\u5efaProperties\u96c6\u5408\u5bf9\u8c61        Properties prop = new Properties();        //\u4f7f\u7528setProperty\u5f80\u96c6\u5408\u4e2d\u6dfb\u52a0\u6570\u636e        prop.setProperty(\"\u8d75\u4e3d\u9896\",\"168\");        prop.setProperty(\"\u8fea\u4e3d\u70ed\u5df4\",\"165\");        prop.setProperty(\"\u53e4\u529b\u5a1c\u624e\",\"160\");        //prop.put(1,true);        //\u4f7f\u7528stringPropertyNames\u628aProperties\u96c6\u5408\u4e2d\u7684\u952e\u53d6\u51fa,\u5b58\u50a8\u5230\u4e00\u4e2aSet\u96c6\u5408\u4e2d        Set<String> set = prop.stringPropertyNames();        //\u904d\u5386Set\u96c6\u5408,\u53d6\u51faProperties\u96c6\u5408\u7684\u6bcf\u4e00\u4e2a\u952e        for (String key : set) {            //\u4f7f\u7528getProperty\u65b9\u6cd5\u901a\u8fc7key\u83b7\u53d6value            String value = prop.getProperty(key);            System.out.println(key+\"=\"+value);        }    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/16.%E3%80%90%E5%BC%82%E5%B8%B8%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%91-%E7%AC%94%E8%AE%B0/20.%E3%80%90%E5%AD%97%E8%8A%82%E6%B5%81%E3%80%81%E5%AD%97%E7%AC%A6%E6%B5%81%E3%80%91-%E7%AC%94%E8%AE%B0/code/09_IOAndProperties/src/com/itheima/demo07/Prop/Demo01Properties.java", "stars": "2", "class": {"name": "Demo01Properties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initialize", "params": ["Context", "StarDriverResult"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initialize(Context context, StarDriverResult result) {        try {            Thread.sleep(66);        } catch (InterruptedException e) {            result.success = false;            result.errorMessage = e.toString();            return;        }        result.success = true;    }", "url": "https://raw.githubusercontent.com/succlz123/StarDriver-APT/master/app/src/main/java/org/succlz123/stardriver/app/task/AppInitTaskInfoReporting.java", "stars": "4", "class": {"name": "AppInitTaskInfoReporting", "extends": "IStarDriver", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //\u7b2c\u4e00\u652f\u961f\u4f0d        ArrayList<String> one = new ArrayList<>();        one.add(\"\u8fea\u4e3d\u70ed\u5df4\");        one.add(\"\u5b8b\u8fdc\u6865\");        one.add(\"\u82cf\u661f\u6cb3\");        one.add(\"\u77f3\u7834\u5929\");        one.add(\"\u77f3\u4e2d\u7389\");        one.add(\"\u8001\u5b50\");        one.add(\"\u5e84\u5b50\");        one.add(\"\u6d2a\u4e03\u516c\");        //1. \u7b2c\u4e00\u4e2a\u961f\u4f0d\u53ea\u8981\u540d\u5b57\u4e3a3\u4e2a\u5b57\u7684\u6210\u5458\u59d3\u540d\uff1b\u5b58\u50a8\u5230\u4e00\u4e2a\u65b0\u96c6\u5408\u4e2d\u3002        //2. \u7b2c\u4e00\u4e2a\u961f\u4f0d\u7b5b\u9009\u4e4b\u540e\u53ea\u8981\u524d3\u4e2a\u4eba\uff1b\u5b58\u50a8\u5230\u4e00\u4e2a\u65b0\u96c6\u5408\u4e2d\u3002        Stream<String> oneStream = one.stream().filter(name -> name.length() == 3).limit(3);        //\u7b2c\u4e8c\u652f\u961f\u4f0d        ArrayList<String> two = new ArrayList<>();        two.add(\"\u53e4\u529b\u5a1c\u624e\");        two.add(\"\u5f20\u65e0\u5fcc\");        two.add(\"\u8d75\u4e3d\u9896\");        two.add(\"\u5f20\u4e09\u4e30\");        two.add(\"\u5c3c\u53e4\u62c9\u65af\u8d75\u56db\");        two.add(\"\u5f20\u5929\u7231\");        two.add(\"\u5f20\u4e8c\u72d7\");        //3. \u7b2c\u4e8c\u4e2a\u961f\u4f0d\u53ea\u8981\u59d3\u5f20\u7684\u6210\u5458\u59d3\u540d\uff1b\u5b58\u50a8\u5230\u4e00\u4e2a\u65b0\u96c6\u5408\u4e2d\u3002        //4. \u7b2c\u4e8c\u4e2a\u961f\u4f0d\u7b5b\u9009\u4e4b\u540e\u4e0d\u8981\u524d2\u4e2a\u4eba\uff1b\u5b58\u50a8\u5230\u4e00\u4e2a\u65b0\u96c6\u5408\u4e2d\u3002        Stream<String> twoStream = two.stream().filter(name -> name.startsWith(\"\u5f20\")).skip(2);        //5. \u5c06\u4e24\u4e2a\u961f\u4f0d\u5408\u5e76\u4e3a\u4e00\u4e2a\u961f\u4f0d\uff1b\u5b58\u50a8\u5230\u4e00\u4e2a\u65b0\u96c6\u5408\u4e2d\u3002        //6. \u6839\u636e\u59d3\u540d\u521b\u5efaPerson\u5bf9\u8c61\uff1b\u5b58\u50a8\u5230\u4e00\u4e2a\u65b0\u96c6\u5408\u4e2d\u3002        //7. \u6253\u5370\u6574\u4e2a\u961f\u4f0d\u7684Person\u5bf9\u8c61\u4fe1\u606f\u3002        Stream.concat(oneStream,twoStream).map(name->new Person(name)).forEach(p-> System.out.println(p));    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/24.%E3%80%90Stream%E6%B5%81%E3%80%81%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%E3%80%91%E7%AC%94%E8%AE%B0/code/13_StreamAndMethodReference/src/com/itheima/demo03/Stream/Demo02StreamTest.java", "stars": "2", "class": {"name": "Demo02StreamTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void init() {\t\t\t\t// Look&Feel der Anwendung auf das \"System-Look&Feel\" des\t\t// Betriebssystems festlegen...\t\ttry {\t\t\tUIManager.setLookAndFeel(\t\t\t        UIManager.getSystemLookAndFeelClassName());\t\t} catch (Exception e) {\t\t\tSystem.err.println(\"Warning: Cannot load system Look&Feel\");\t\t}\t\t\t\t//ein paar Einstellungen zum Fenster\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); //was passiert beim Schlie\u00dfen des Fensters?\t\tsetTitle(\"JMines\"); //der Text f\u00fcr den Titel des Fensters\t\t\t\t//// Fenster-Men\u00fc initialisieren ////\t\tJMenuBar menuBar = new JMenuBar();\t\tJMenu menu = new JMenu(\"Game\");\t\t\t\t// Menu-Item f\u00fcr \"new game\" erstellen und Aktion festlegen\t\tJMenuItem menuItemNewGame = new JMenuItem(\"New Game\");\t\tmenuItemNewGame.setActionCommand(\"new\");\t\tmenuItemNewGame.addActionListener(this);\t\t\t\t// Menu-Item f\u00fcr \"quit game\" erstellen und Aktion festlegen\t\tJMenuItem menuItemQuitGame = new JMenuItem(\"Quit Game\");\t\tmenuItemQuitGame.setActionCommand(\"quit\");\t\tmenuItemQuitGame.addActionListener(this);\t\t\t\t//Men\u00fc zusammensetzen\t\tmenuBar.add(menu);\t\tmenu.add(menuItemNewGame);\t\tmenu.add(menuItemQuitGame);\t\tsetJMenuBar(menuBar);\t\t\t\t//Titel-Grafik\t\twelcomeScreen = new JLabel();\t\twelcomeScreen.setIcon(AssetsHelper.getIcon(\"title-graphic.png\"));\t\twelcomeScreen.setHorizontalAlignment(SwingConstants.CENTER);\t\twelcomeScreen.setVerticalAlignment(SwingConstants.CENTER);\t\tshowWelcomeScreen();\t\t\t\tpack(); //Fenstergr\u00f6\u00dfe anpassen\t\tsetLocationRelativeTo(null); //Fenster auf Bildschrim zentrieren\t\t\t\t//Fenster sichtbar machen\t\tsetVisible(true);\t}", "url": "https://raw.githubusercontent.com/bkis/JMines/master/src/idh/java/jmines/ui/gui/JMinesGui.java", "stars": "1", "class": {"name": "JMinesGui", "extends": "JFrame", "implements": ["JMinesUi", "ActionListener", "MouseClickListener"], "modifiers": ["public"]}}, {"method_name": "draw", "params": ["GameState"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void draw(GameState state) {\t\t//ist das board panel noch nicht initialisiert?\t\tif (boardPanel == null) initBoard(state);\t\t\t\tfor (int y = 0; y < state.getDimensions(); y++) {\t\t\tfor (int x = 0; x < state.getDimensions(); x++) {\t\t\t\t// den richtigen Button finden\t\t\t\tCellButton cell = (CellButton) boardPanel.getComponent((state.getDimensions()*y) + x);\t\t\t\t// Button-Zustand updaten!\t\t\t\tcell.updateState(state.isWon());\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/bkis/JMines/master/src/idh/java/jmines/ui/gui/JMinesGui.java", "stars": "1", "class": {"name": "JMinesGui", "extends": "JFrame", "implements": ["JMinesUi", "ActionListener", "MouseClickListener"], "modifiers": ["public"]}}, {"method_name": "initBoard", "params": ["GameState"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void initBoard(GameState state) {\t\tSystem.out.println(\"[JMines] initializing: \" + state);\t\t// neues Panel f\u00fcr Buttons mit GridLayout anlegen (Gr\u00f6\u00dfe nach dimensions)\t\tboardPanel = new JPanel(new GridLayout(state.getDimensions(), state.getDimensions(), 2, 2));\t\tboardPanel.setBackground(new Color(200, 200, 200)); // panel background\t\tboardPanel.setBorder(new EmptyBorder(2, 2, 2, 2)); // panel padding\t\t\t\tfor (int y = 0; y < state.getDimensions(); y++) {\t\t\tfor (int x = 0; x < state.getDimensions(); x++) {\t\t\t\t// CellButton-Instanz erzeugen (Anzahl angrenzender Minen \u00fcbergeben)\t\t\t\tCellButton button = new CellButton(state.getBoard()[x][y]);\t\t\t\tbutton.setName(\"cell-\" + x + \":\" + y); // \"Name\" des Buttons (den merkt er sich)\t\t\t\tbutton.addMouseListener(this); //MouseListener f\u00fcr Reaktion auf Klick\t\t\t\t//Button dem Panel hinzuf\u00fcgen\t\t\t\tboardPanel.add(button);\t\t\t}\t\t}\t\t\t\tsetPreferredSize(null); //unset preferred window size\t\tgetContentPane().remove(welcomeScreen); //Welcome-Screen entfernen\t\tgetContentPane().add(boardPanel); //Panel dem Fenster hinzuf\u00fcgen\t\tpack(); //Fenstergr\u00f6\u00dfe anpassen\t\tsetLocationRelativeTo(null); //Fenster auf Bildschrim zentrieren\t}", "url": "https://raw.githubusercontent.com/bkis/JMines/master/src/idh/java/jmines/ui/gui/JMinesGui.java", "stars": "1", "class": {"name": "JMinesGui", "extends": "JFrame", "implements": ["JMinesUi", "ActionListener", "MouseClickListener"], "modifiers": ["public"]}}, {"method_name": "registerRevealCallback", "params": ["UiCallback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void registerRevealCallback(UiCallback callback) {\t\treveal = callback;\t}", "url": "https://raw.githubusercontent.com/bkis/JMines/master/src/idh/java/jmines/ui/gui/JMinesGui.java", "stars": "1", "class": {"name": "JMinesGui", "extends": "JFrame", "implements": ["JMinesUi", "ActionListener", "MouseClickListener"], "modifiers": ["public"]}}, {"method_name": "registerMarkCallback", "params": ["UiCallback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void registerMarkCallback(UiCallback callback) {\t\tmark = callback;\t}", "url": "https://raw.githubusercontent.com/bkis/JMines/master/src/idh/java/jmines/ui/gui/JMinesGui.java", "stars": "1", "class": {"name": "JMinesGui", "extends": "JFrame", "implements": ["JMinesUi", "ActionListener", "MouseClickListener"], "modifiers": ["public"]}}, {"method_name": "registerNewGameCallback", "params": ["UiCallback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void registerNewGameCallback(UiCallback callback) {\t\tnewGame = callback;\t}", "url": "https://raw.githubusercontent.com/bkis/JMines/master/src/idh/java/jmines/ui/gui/JMinesGui.java", "stars": "1", "class": {"name": "JMinesGui", "extends": "JFrame", "implements": ["JMinesUi", "ActionListener", "MouseClickListener"], "modifiers": ["public"]}}, {"method_name": "actionPerformed", "params": ["ActionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void actionPerformed(ActionEvent e) {\t\tswitch (e.getActionCommand()) {\t\tcase \"new\":\t\t\t// reset board panel and show welcome screen\t\t\tshowWelcomeScreen();\t\t\t// ask for board dimensions\t\t    Integer dimensions = (Integer) JOptionPane.showInputDialog(null, \"Board dimensions (width = height):\",\t\t        \"Setup New Game\", JOptionPane.QUESTION_MESSAGE, null,\t\t        JMines.OPTIONS_DIMENSIONS, // Array of choices\t\t        JMines.OPTIONS_DIMENSIONS[5]); // Default choice\t\t    if (dimensions == null) return;\t\t    // ask for difficulty\t\t    Integer difficulty = (Integer) JOptionPane.showInputDialog(null, \"Game difficulty:\",\t\t        \"Setup New Game\", JOptionPane.QUESTION_MESSAGE, null,\t\t        JMines.OPTIONS_DIFFICULTY, // Array of choices\t\t        JMines.OPTIONS_DIFFICULTY[4]); // Default choice\t\t    if (difficulty == null) return;\t\t    // create and draw new game\t\t\tdraw(newGame.call(dimensions, difficulty));\t\t\tbreak;\t\tcase \"quit\":\t\t\tSystem.exit(0);\t\t\tbreak;\t\tdefault:\t\t\tbreak;\t\t}\t}", "url": "https://raw.githubusercontent.com/bkis/JMines/master/src/idh/java/jmines/ui/gui/JMinesGui.java", "stars": "1", "class": {"name": "JMinesGui", "extends": "JFrame", "implements": ["JMinesUi", "ActionListener", "MouseClickListener"], "modifiers": ["public"]}}, {"method_name": "mouseClicked", "params": ["MouseEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void mouseClicked(MouseEvent e) {\t\t//handelt es sich um einen Linksklick?\t\tboolean leftClick = e.getButton() == MouseEvent.BUTTON1;\t\t\t\tif (e.getComponent().getName().startsWith(\"cell-\")) {\t\t\tString[] xy = e.getComponent().getName().replaceAll(\"^cell-\", \"\").split(\"\\\\:\");\t\t\tint x = Integer.parseInt(xy[0]);\t\t\tint y = Integer.parseInt(xy[1]);\t\t\t\t\t\tif (leftClick) {\t\t\t\tdraw(reveal.call(x, y)); // bei Linksklick aufdecken\t\t\t} else {\t\t\t\tdraw(mark.call(x, y)); // in allen anderen F\u00e4llen markieren\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/bkis/JMines/master/src/idh/java/jmines/ui/gui/JMinesGui.java", "stars": "1", "class": {"name": "JMinesGui", "extends": "JFrame", "implements": ["JMinesUi", "ActionListener", "MouseClickListener"], "modifiers": ["public"]}}, {"method_name": "showWelcomeScreen", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void showWelcomeScreen() {\t\tif (boardPanel != null) {\t\t\tgetContentPane().remove(boardPanel);\t\t\tboardPanel = null;\t\t}\t\tsetPreferredSize(new Dimension(400, 400));\t\tgetContentPane().add(welcomeScreen);\t\tpack();\t\tsetLocationRelativeTo(null); //Fenster auf Bildschrim zentrieren\t}", "url": "https://raw.githubusercontent.com/bkis/JMines/master/src/idh/java/jmines/ui/gui/JMinesGui.java", "stars": "1", "class": {"name": "JMinesGui", "extends": "JFrame", "implements": ["JMinesUi", "ActionListener", "MouseClickListener"], "modifiers": ["public"]}}, {"method_name": "isSupportStream", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isSupportStream(){            return true;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void init() {            LOG.info(\"init() begin...\");            this.readerOriginConfig = super.getPluginJobConf();            this.validate();            hdfsReaderUtil = new HdfsReaderUtil(this.readerOriginConfig);            LOG.info(\"init() ok and end...\");            for(String eachPath : path) {                if (!hdfsReaderUtil.exists(eachPath)) {                    String message = String.format(\"cannot find the path: [%s], please check your configuration\", eachPath);                    LOG.error(message);                    throw DataXException.asDataXException(HdfsReaderErrorCode.PATH_NOT_FOUND, message);                }            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "syncMetaData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MetaSchema", "snippet": "        public MetaSchema syncMetaData() {            if(StringUtils.isNotBlank(readerOriginConfig.getString(Key.HIVE_METASTORE_URIS, \"\"))){                return hdfsReaderUtil.getHiveMetadata(                        readerOriginConfig.getString(Key.HIVE_DATABASE),                        readerOriginConfig.getString(Key.HIVE_TABLE),                        readerOriginConfig.getString(Key.HIVE_METASTORE_URIS)                );            }            return null;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "validate", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void validate() {            this.defaultFS = this.readerOriginConfig.getNecessaryValue(Key.DEFAULT_FS,                    HdfsReaderErrorCode.DEFAULT_FS_NOT_FIND_ERROR);            // path check            String pathInString = this.readerOriginConfig.getNecessaryValue(Key.PATH, HdfsReaderErrorCode.REQUIRED_VALUE);            if (!pathInString.startsWith(\"[\") && !pathInString.endsWith(\"]\")) {                path = new ArrayList<String>();                path.add(pathInString);            } else {                path = this.readerOriginConfig.getList(Key.PATH, String.class);                if (null == path || path.size() == 0) {                    throw DataXException.asDataXException(HdfsReaderErrorCode.REQUIRED_VALUE, \"\u60a8\u9700\u8981\u6307\u5b9a\u5f85\u8bfb\u53d6\u7684\u6e90\u76ee\u5f55\u6216\u6587\u4ef6\");                }                for (String eachPath : path) {                    if (!eachPath.startsWith(\"/\")) {                        String message = String.format(\"\u8bf7\u68c0\u67e5\u53c2\u6570path:[%s],\u9700\u8981\u914d\u7f6e\u4e3a\u7edd\u5bf9\u8def\u5f84\", eachPath);                        LOG.error(message);                        throw DataXException.asDataXException(HdfsReaderErrorCode.ILLEGAL_VALUE, message);                    }                }            }            if(getTransportType() == TransportType.RECORD) {                specifiedFileType = this.readerOriginConfig.getNecessaryValue(Key.FILETYPE, HdfsReaderErrorCode.REQUIRED_VALUE);                if (!specifiedFileType.equalsIgnoreCase(Constant.ORC) &&                        !specifiedFileType.equalsIgnoreCase(Constant.TEXT) &&                        !specifiedFileType.equalsIgnoreCase(Constant.CSV) &&                        !specifiedFileType.equalsIgnoreCase(Constant.SEQ) &&                        !specifiedFileType.equalsIgnoreCase(Constant.RC)  &&                        !specifiedFileType.equalsIgnoreCase(Constant.HFILE)) {                    String message = \"HdfsReader\u63d2\u4ef6\u76ee\u524d\u652f\u6301ORC, TEXT, CSV, SEQUENCE, RC, HFile \u683c\u5f0f\u7684\u6587\u4ef6,\" +                            \"\u8bf7\u5c06fileType\u9009\u9879\u7684\u503c\u914d\u7f6e\u4e3aORC, TEXT, CSV, SEQUENCE, HFile \u6216\u8005 RC\";                    throw DataXException.asDataXException(HdfsReaderErrorCode.FILE_TYPE_ERROR, message);                }                if (this.specifiedFileType.equalsIgnoreCase(Constant.CSV)) {                    //compress\u6821\u9a8c                    UnstructuredStorageReaderUtil.validateCompress(this.readerOriginConfig);                    UnstructuredStorageReaderUtil.validateCsvReaderConfig(this.readerOriginConfig);                }            }            encoding = this.readerOriginConfig.getString(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.ENCODING, \"UTF-8\");            try {                Charsets.toCharset(encoding);            } catch (UnsupportedCharsetException uce) {                throw DataXException.asDataXException(                        HdfsReaderErrorCode.ILLEGAL_VALUE,                        String.format(\"\u4e0d\u652f\u6301\u7684\u7f16\u7801\u683c\u5f0f : [%s]\", encoding), uce);            } catch (Exception e) {                throw DataXException.asDataXException(                        HdfsReaderErrorCode.ILLEGAL_VALUE,                        String.format(\"\u8fd0\u884c\u914d\u7f6e\u5f02\u5e38 : %s\", e.getMessage()), e);            }            //check Kerberos            Boolean haveKerberos = this.readerOriginConfig.getBool(Key.HAVE_KERBEROS, false);            if (haveKerberos) {                this.readerOriginConfig.getNecessaryValue(Key.KERBEROS_KEYTAB_FILE_PATH, HdfsReaderErrorCode.REQUIRED_VALUE);                this.readerOriginConfig.getNecessaryValue(Key.KERBEROS_PRINCIPAL, HdfsReaderErrorCode.REQUIRED_VALUE);            }            this.incrBeginTime = this.readerOriginConfig.getLong(INCR_BEGIN_TIME, 0);            this.incrEndTime = this.readerOriginConfig.getLong(INCR_END_TIME, DateTime.now().getMillis());            // validate the Columns            validateColumns();        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "validateColumns", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void validateColumns() {            List<Configuration> column = this.readerOriginConfig                    .getListConfiguration(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.COLUMN);            if(null == column){                column = new ArrayList<>();            }            boolean emptyColumn = column.isEmpty() || (1 == column.size() && (\"\\\"*\\\"\".equals(column.get(0).toString()) || \"'*'\"                    .equals(column.get(0).toString())));            if (emptyColumn) {                this.readerOriginConfig                        .set(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.COLUMN, new ArrayList<String>());            } else {                // column: 1. index type 2.value type 3.when type is Data, may have format                List<Configuration> columns = this.readerOriginConfig                        .getListConfiguration(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.COLUMN);                if (null != columns && columns.size() != 0) {                    for (Configuration eachColumnConf : columns) {                        eachColumnConf.getNecessaryValue(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.TYPE, HdfsReaderErrorCode.REQUIRED_VALUE);                        Integer columnIndex = eachColumnConf.getInt(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.INDEX);                        String columnValue = eachColumnConf.getString(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.VALUE);                        if (null == columnIndex && null == columnValue) {                            throw DataXException.asDataXException(                                    HdfsReaderErrorCode.NO_INDEX_VALUE,                                    \"\u7531\u4e8e\u60a8\u914d\u7f6e\u4e86type, \u5219\u81f3\u5c11\u9700\u8981\u914d\u7f6e index \u6216 value\");                        }                        if (null != columnIndex && null != columnValue) {                            throw DataXException.asDataXException(                                    HdfsReaderErrorCode.MIXED_INDEX_VALUE,                                    \"\u60a8\u6df7\u5408\u914d\u7f6e\u4e86index, value, \u6bcf\u4e00\u5217\u540c\u65f6\u4ec5\u80fd\u9009\u62e9\u5176\u4e2d\u4e00\u79cd\");                        }                    }                }            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "prepare", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void prepare() {            if(StringUtils.isNotBlank(readerOriginConfig.getString(Key.HIVE_METASTORE_URIS, \"\"))) {                LOG.info(\"update the configuration dynamically by hive meta...\");                boolean affected = hdfsReaderUtil.updateConfigByHiveMeta( readerOriginConfig.getString(Key.HIVE_DATABASE),                        readerOriginConfig.getString(Key.HIVE_TABLE),                        readerOriginConfig.getString(Key.HIVE_METASTORE_URIS), this.readerOriginConfig);                if(affected){                    //validate the configuration again                    this.validate();                }            }            LOG.info(\"start to getAllFiles...\");            HashSet<String> sourceFiles0 = hdfsReaderUtil.getAllFiles(path, specifiedFileType);            //to find the parent directory of path            Set<String> parents = new HashSet<>();            for(String path0 : path){                boolean find = false;                for(int i = 0; i < path0.length(); i++){                    if('*' == path0.charAt(i) || '?' == path0.charAt(i)){                        int lastDirSeparator = path0.substring(0, i)                                .lastIndexOf(IOUtils.DIR_SEPARATOR);                        parents.add(path0.                                substring(0, lastDirSeparator + 1));                        find = true;                        break;                    }                }                if(!find){                    parents.add(path0);                }            }            for(String sourceFile : sourceFiles0){                if(getTransportType() == TransportType.STREAM ){                    FileStatus status = hdfsReaderUtil.getFileStatus(sourceFile);                    if(status.getModificationTime() <= incrBeginTime                            || status.getModificationTime() > incrEndTime){                        continue;                    }                }                boolean find = false;                for(String parent : parents){                    //0: absolute path, 1: relative path                    if(sourceFile.indexOf(parent) > 0){                        String relativePath = sourceFile.substring(sourceFile.indexOf(parent) + parent.length());                        if(StringUtils.isNotBlank(relativePath)){                            this.sourceFiles.add(new PathMeta(sourceFile,                                    relativePath));                        }else{                            this.sourceFiles.add(new PathMeta(sourceFile,                                    parent.substring(parent.lastIndexOf(IOUtils.DIR_SEPARATOR))));                        }                        find = true;                    }                    if(find){                        break;                    }                }                if(!find){                    throw new DataXException(FrameworkErrorCode.ARGUMENT_ERROR, \"\u8def\u5f84\u53c2\u6570\u914d\u7f6e\u9519\u8bef\");                }            }            String fileSeq = StringUtils.join(sourceFiles0, \",\");            if(fileSeq.length() > 30){                fileSeq = fileSeq.substring(0, 30);            }            LOG.info(String.format(\"\u60a8\u5373\u5c06\u8bfb\u53d6\u7684\u6587\u4ef6\u6570\u4e3a: [%s], \u5217\u8868\u4e3a: [%s]\",                    sourceFiles0.size(), fileSeq));        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "split", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "List<Configuration>", "snippet": "        public List<Configuration> split(int adviceNumber) {            LOG.info(\"split() begin...\");            List<Configuration> readerSplitConfigs = new ArrayList<Configuration>();            // warn:\u6bcf\u4e2aslice\u62d6\u4e14\u4ec5\u62d6\u4e00\u4e2a\u6587\u4ef6,            // int splitNumber = adviceNumber;            int splitNumber = this.sourceFiles.size();            if (0 == splitNumber) {                return new ArrayList<>();            }            List<List<PathMeta>> splitedSourceFiles = this.splitSourceFiles(new ArrayList<>(this.sourceFiles), splitNumber);            for (List<PathMeta> files : splitedSourceFiles) {                Configuration splitedConfig = this.readerOriginConfig.clone();                splitedConfig.set(Constant.SOURCE_FILES, files);                readerSplitConfigs.add(splitedConfig);            }            return readerSplitConfigs;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "splitSourceFiles", "params": ["List<T>", "int"], "throws": null, "modifiers": ["private"], "return_type": "List<List>", "snippet": "        private <T> List<List<T>> splitSourceFiles(final List<T> sourceList, int adviceNumber) {            List<List<T>> splitedList = new ArrayList<List<T>>();            int averageLength = sourceList.size() / adviceNumber;            averageLength = averageLength == 0 ? 1 : averageLength;            for (int begin = 0, end = 0; begin < sourceList.size(); begin = end) {                end = begin + averageLength;                if (end > sourceList.size()) {                    end = sourceList.size();                }                splitedList.add(sourceList.subList(begin, end));            }            return splitedList;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "post", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void post() {        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "destroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void destroy() {            hdfsReaderUtil.closeFileSystem();        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReader.java", "stars": "23", "class": {"name": "Job", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void init() {            this.taskConfig = super.getPluginJobConf();            this.sourceFiles = this.taskConfig.getList(Constant.SOURCE_FILES, Object.class);            this.specifiedFileType = this.taskConfig.getString(Key.FILETYPE, \"\");            this.encoding = this.taskConfig.getString(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.ENCODING, \"UTF-8\");            this.hdfsReaderUtil = new HdfsReaderUtil(this.taskConfig);            this.bufferSize = this.taskConfig.getInt(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.BUFFER_SIZE,                    com.alibaba.datax.plugin.unstructuredstorage.reader.Constant.DEFAULT_BUFFER_SIZE);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReader.java", "stars": "23", "class": {"name": "Task", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "prepare", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void prepare() {        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReader.java", "stars": "23", "class": {"name": "Task", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "startRead", "params": ["RecordSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void startRead(RecordSender recordSender) {            LOG.info(\"Read start\");            hdfsReaderUtil.getUgi().doAs((PrivilegedAction<Object>) () -> {                for (Object sourceFile : sourceFiles) {                    PathMeta pathMeta = JSONObject.parseObject(JSON.toJSONString(sourceFile), PathMeta.class);                    String fileName = pathMeta.getAbsolute();                    LOG.info(String.format(\"Reading file : [%s]\", fileName));                    if (specifiedFileType.equalsIgnoreCase(Constant.TEXT)                            || specifiedFileType.equalsIgnoreCase(Constant.CSV)) {                        InputStream inputStream = hdfsReaderUtil.getInputStream(fileName);                        if(null == taskConfig.getString(com.alibaba.datax.plugin.unstructuredstorage.reader.Key.COMPRESS, null)){                            CompressionCodecFactory factory = new CompressionCodecFactory(hdfsReaderUtil.getConf());                            try {                                CompressionCodec codec = factory.getCodec(new Path(fileName));                                if(null != codec){                                    inputStream = codec.createInputStream(inputStream);                                }                            } catch (IOException e) {                                throw DataXException.asDataXException(HdfsReaderErrorCode.READ_FILE_ERROR, \"Hdfs\u4f7f\u7528\u538b\u7f29\u5de5\u5382\u7c7bCodecFactory\u751f\u6210\u6587\u4ef6\u6d41\u5931\u8d25,message:\"                                        + e.getMessage());                            }                        }                        UnstructuredStorageReaderUtil.readFromStream(inputStream, fileName, taskConfig,                                recordSender, getTaskPluginCollector());                    } else if (specifiedFileType.equalsIgnoreCase(Constant.ORC)) {                        hdfsReaderUtil.orcFileStartRead(fileName, taskConfig, recordSender, getTaskPluginCollector());                    } else if (specifiedFileType.equalsIgnoreCase(Constant.SEQ)) {                        hdfsReaderUtil.sequenceFileStartRead(fileName, taskConfig, recordSender, getTaskPluginCollector());                    } else if (specifiedFileType.equalsIgnoreCase(Constant.RC)) {                        hdfsReaderUtil.rcFileStartRead(fileName, taskConfig, recordSender, getTaskPluginCollector());                    } else if (specifiedFileType.equalsIgnoreCase(Constant.HFILE)) {                        hdfsReaderUtil.hFileStartRead(fileName, taskConfig, recordSender, getTaskPluginCollector());                    }else{                        String message = \"HdfsReader\u63d2\u4ef6\u76ee\u524d\u652f\u6301ORC, TEXT, CSV, SEQUENCE, HFile, RC\u683c\u5f0f\u7684\u6587\u4ef6,\" +                                \"\u8bf7\u5c06fileType\u9009\u9879\u7684\u503c\u914d\u7f6e\u4e3aORC, TEXT, CSV, SEQUENCE, HFile\u6216\u8005 RC\";                        throw DataXException.asDataXException(HdfsReaderErrorCode.FILE_TYPE_UNSUPPORT, message);                    }                    if (recordSender != null) {                        recordSender.flush();                    }                }                return null;            });            LOG.info(\"end read source files...\");        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReader.java", "stars": "23", "class": {"name": "Task", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "post", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void post() {        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReader.java", "stars": "23", "class": {"name": "Task", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "destroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void destroy() {        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReader.java", "stars": "23", "class": {"name": "Task", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "startRead", "params": ["ChannelOutput"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void startRead(ChannelOutput channelOutput) {            LOG.info(\"start read source HDFS files to stream channel...\");            hdfsReaderUtil.getUgi().doAs((PrivilegedAction<Object>) () ->{                for(Object sourceFile : sourceFiles){                    PathMeta pathMeta = JSONObject.parseObject(JSON.toJSONString(sourceFile), PathMeta.class);                    String absolutePath = pathMeta.getAbsolute();                    String relativePath = pathMeta.getRelative();                    LOG.info(String.format(\"reading file : [%s]\", absolutePath));                    InputStream inputStream;                    try{                        Path path = new Path(absolutePath);                        StreamMeta streamMeta = new StreamMeta();                        streamMeta.setName(path.getName());                        streamMeta.setAbsolutePath(absolutePath);                        streamMeta.setRelativePath(relativePath);                        OutputStream outputStream = channelOutput.createStream(streamMeta, encoding);                        inputStream = hdfsReaderUtil.getInputStream(absolutePath);                        UnstructuredStorageReaderUtil.readFromStream(inputStream, outputStream,                                this.taskConfig);                    }catch(IOException e){                        throw DataXException.asDataXException(FrameworkErrorCode.CHANNEL_STREAM_ERROR, e);                    }                }                return null;            });        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/HdfsReader.java", "stars": "23", "class": {"name": "Task", "extends": "Reader", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "linksEndpointShouldBeAvailable", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid linksEndpointShouldBeAvailable() {\t\tResponseEntity<String> entity = new TestRestTemplate(\"user\", \"password\")\t\t\t\t.getForEntity(\"http://localhost:\" + this.managementPort + \"/\", String.class);\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\t\tassertThat(entity.getBody()).contains(\"\\\"_links\\\"\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/ManagementDifferentPortSampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "ManagementDifferentPortSampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "registerJvmMetrics", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void registerJvmMetrics() {    this.registry.register(\"MEMORY_Gauge\", new MemoryUsageGaugeSet());    this.registry.register(\"GC_Gauge\", new GarbageCollectorMetricSet());    this.registry.register(\"Thread_State_Gauge\", new ThreadStatesGaugeSet());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/metrics/MetricsManager.java", "stars": "18", "class": {"name": "MetricsManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addMeter", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Meter", "snippet": "  public Meter addMeter(final String name) {    final Meter curr = this.registry.meter(name);    this.registry.register(name + \"-gauge\", (Gauge<Double>) curr::getOneMinuteRate);    return curr;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/metrics/MetricsManager.java", "stars": "18", "class": {"name": "MetricsManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addGauge", "params": ["String", "Supplier<T>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public <T> void addGauge(final String name, final Supplier<T> gaugeFunc) {    this.registry.register(name, (Gauge<T>) gaugeFunc::get);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/metrics/MetricsManager.java", "stars": "18", "class": {"name": "MetricsManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addHistogram", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Histogram", "snippet": "  public Histogram addHistogram(final String name) { return this.registry.histogram(name); }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/metrics/MetricsManager.java", "stars": "18", "class": {"name": "MetricsManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addTimer", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Timer", "snippet": "  public Timer addTimer(final String name) { return this.registry.timer(name); }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/metrics/MetricsManager.java", "stars": "18", "class": {"name": "MetricsManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "startReporting", "params": ["String", "Props"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "  public synchronized void startReporting(final String reporterName, final Props props) {    final String metricsReporterClassName = props.get(CUSTOM_METRICS_REPORTER_CLASS_NAME);    final String metricsServerURL = props.get(METRICS_SERVER_URL);    if (metricsReporterClassName != null && metricsServerURL != null) {      try {        log.info(\"metricsReporterClassName: \" + metricsReporterClassName);        final Class metricsClass = Class.forName(metricsReporterClassName);        final Constructor[] constructors = metricsClass.getConstructors();        constructors[0].newInstance(reporterName, this.registry, metricsServerURL);      } catch (final Exception e) {        log.error(\"Encountered error while loading and instantiating \"            + metricsReporterClassName, e);        throw new IllegalStateException(\"Encountered error while loading and instantiating \"            + metricsReporterClassName, e);      }    } else {      log.error(String.format(\"No value for property: %s or %s was found\",          CUSTOM_METRICS_REPORTER_CLASS_NAME, METRICS_SERVER_URL));    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/metrics/MetricsManager.java", "stars": "18", "class": {"name": "MetricsManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isInitialized", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean isInitialized() {\t\treturn actionBar.isDisplayed();\t}", "url": "https://raw.githubusercontent.com/vanitha128/appiumTests/master/src/main/java/pageObjects/HomePage.java", "stars": "2", "class": {"name": "HomePage", "extends": "PageObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "OffsetTime", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNonNullParameter(PreparedStatement ps, int i, OffsetTime parameter, JdbcType jdbcType)          throws SQLException {    ps.setObject(i, parameter);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/OffsetTimeTypeHandler.java", "stars": "15", "class": {"name": "OffsetTimeTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "OffsetTime", "snippet": "  public OffsetTime getNullableResult(ResultSet rs, String columnName) throws SQLException {    return rs.getObject(columnName, OffsetTime.class);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/OffsetTimeTypeHandler.java", "stars": "15", "class": {"name": "OffsetTimeTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "OffsetTime", "snippet": "  public OffsetTime getNullableResult(ResultSet rs, int columnIndex) throws SQLException {    return rs.getObject(columnIndex, OffsetTime.class);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/OffsetTimeTypeHandler.java", "stars": "15", "class": {"name": "OffsetTimeTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "OffsetTime", "snippet": "  public OffsetTime getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {    return cs.getObject(columnIndex, OffsetTime.class);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/OffsetTimeTypeHandler.java", "stars": "15", "class": {"name": "OffsetTimeTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "readFileAsString", "params": ["String"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "String", "snippet": "    public String readFileAsString(String fileName)throws Exception    {        String data = \"\";        data = new String(Files.readAllBytes(Paths.get(fileName)));        return data;    }", "url": "https://raw.githubusercontent.com/nikhilbghodke/Simplex/master/src/com/github/nikhilbghodke/parser/Parser.java", "stars": "2", "class": {"name": "Parser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadRules", "params": ["String"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void loadRules(String grammarFile) throws Exception {        String temp= readFileAsString(grammarFile);        System.out.println(temp);        String[] lines= temp.split(\"\\\\n\");        for(String s:lines){            s=s.trim();            // when the there is a empty line            if(s.length()==0)                continue;            if(s.charAt(0)=='#')                continue;            int index=s.indexOf('=');            String key=s.substring(0,index).trim();            nonterminals.add(key);            List<List<String>> cur= rules.getOrDefault(key, new ArrayList<>());            ArrayList<String> list= new ArrayList<>();            cur.add(list);            rules.put(key,cur);            String[] values=s.substring(index+1).trim().split(\"\\\\s\");            for(String value:values) {                value=value.trim();                if(value.length()!=0)                list.add(value);            }        }    }", "url": "https://raw.githubusercontent.com/nikhilbghodke/Simplex/master/src/com/github/nikhilbghodke/parser/Parser.java", "stars": "2", "class": {"name": "Parser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parse", "params": ["String"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "AST_Node", "snippet": "    public AST_Node parse(String start) throws Exception {        List<List<String>> copy= new ArrayList<>(lexer.tokens);        AST_Node ans=solve(copy,start);        if(!copy.isEmpty())            throw new Exception(\"Compilation error\");        return ans;    }", "url": "https://raw.githubusercontent.com/nikhilbghodke/Simplex/master/src/com/github/nikhilbghodke/parser/Parser.java", "stars": "2", "class": {"name": "Parser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "solve", "params": ["List<List>", "String"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "AST_Node", "snippet": "    public AST_Node solve(List<List<String>> tokens, String start) throws Exception {        AST_Node node = null;        //System.out.println(tokens+\" \"+start);        List<AST_Node> children = new ArrayList<>();        if (!nonterminals.contains(start))                throw new Exception(start + \" is not in nonterminal set -->\" + nonterminals);        List<List<String>> productions = rules.get(start);        for (List<String> production : productions) {            List<List<String>> remTokens=new ArrayList<>(tokens);            ArrayList<AST_Node> tempChildren= new ArrayList<>();            boolean broken=false;            System.out.println(production);            for (String cur : production) {                if (terminals.contains(cur)) {                    if(cur.equals(\"epsilon\")) {                        tempChildren.add(new AST_Node(\"epsilon\",\"\"));                        continue;                    }                    if(remTokens.isEmpty()) {                        broken=true;                        break;                    }                    String tokenType=remTokens.get(0).get(0);                    String token=remTokens.get(0).get(1);                    remTokens.remove(0);                    //System.out.println(cur+\" \"+tokenType);                    if(!tokenType.equals(cur)) {                        broken=true;                        break;                    }                    AST_Node leaf= new AST_Node(tokenType,token);                    tempChildren.add(leaf);                } else if (nonterminals.contains(cur)) {                    AST_Node child=solve(remTokens,cur);                    if(child==null)                    {                        System.out.println(\"breaking out\");                        broken=true;                        break;                    }                    tempChildren.add(child);                } else                    throw new Exception(cur + \"in the rules \" + start + \" --> \" + production + \"  is neither a terminal or non terminal\");            }            if(!broken){                //mil gaya                //remove from tokens                int tokensremoved=tokens.size()-remTokens.size();                for(int i=0;i<tokensremoved;i++)                    tokens.remove(0);                node= new AST_Node(start,\"\");                System.out.println(start+\"    matched\"+tokens);                node.children=tempChildren;                return node;            }        }        return node;    }", "url": "https://raw.githubusercontent.com/nikhilbghodke/Simplex/master/src/com/github/nikhilbghodke/parser/Parser.java", "stars": "2", "class": {"name": "Parser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.DECORATIONS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/SettWallBlock.java", "stars": "2", "class": {"name": "SettWallBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "clientLoad", "params": ["FMLClientSetupEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clientLoad(FMLClientSetupEvent event) {\t\tRenderTypeLookup.setRenderLayer(block, RenderType.getCutout());\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/SettWallBlock.java", "stars": "2", "class": {"name": "SettWallBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "func_220113_a", "params": ["BlockState", "boolean", "Direction"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "\t\tprivate boolean func_220113_a(BlockState state, boolean checkattach, Direction face) {\t\t\tboolean flag = state.getBlock() instanceof WallBlock\t\t\t\t\t|| state.getBlock() instanceof FenceGateBlock && FenceGateBlock.isParallel(state, face);\t\t\treturn !cannotAttach(state.getBlock()) && checkattach || flag;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/SettWallBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "WallBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getStateForPlacement", "params": ["BlockItemUseContext"], "throws": null, "modifiers": ["public"], "return_type": "BlockState", "snippet": "\t\tpublic BlockState getStateForPlacement(BlockItemUseContext context) {\t\t\tIWorldReader iworldreader = context.getWorld();\t\t\tBlockPos blockpos = context.getPos();\t\t\tIFluidState ifluidstate = context.getWorld().getFluidState(context.getPos());\t\t\tBlockPos blockpos1 = blockpos.north();\t\t\tBlockPos blockpos2 = blockpos.east();\t\t\tBlockPos blockpos3 = blockpos.south();\t\t\tBlockPos blockpos4 = blockpos.west();\t\t\tBlockState blockstate = iworldreader.getBlockState(blockpos1);\t\t\tBlockState blockstate1 = iworldreader.getBlockState(blockpos2);\t\t\tBlockState blockstate2 = iworldreader.getBlockState(blockpos3);\t\t\tBlockState blockstate3 = iworldreader.getBlockState(blockpos4);\t\t\tboolean flag = this.func_220113_a(blockstate, blockstate.isSolidSide(iworldreader, blockpos1, Direction.SOUTH), Direction.SOUTH);\t\t\tboolean flag1 = this.func_220113_a(blockstate1, blockstate1.isSolidSide(iworldreader, blockpos2, Direction.WEST), Direction.WEST);\t\t\tboolean flag2 = this.func_220113_a(blockstate2, blockstate2.isSolidSide(iworldreader, blockpos3, Direction.NORTH), Direction.NORTH);\t\t\tboolean flag3 = this.func_220113_a(blockstate3, blockstate3.isSolidSide(iworldreader, blockpos4, Direction.EAST), Direction.EAST);\t\t\tboolean flag4 = (!flag || flag1 || !flag2 || flag3) && (flag || !flag1 || flag2 || !flag3);\t\t\treturn this.getDefaultState().with(UP, Boolean.valueOf(flag4 || !iworldreader.isAirBlock(blockpos.up())))\t\t\t\t\t.with(NORTH, Boolean.valueOf(flag)).with(EAST, Boolean.valueOf(flag1)).with(SOUTH, Boolean.valueOf(flag2))\t\t\t\t\t.with(WEST, Boolean.valueOf(flag3)).with(WATERLOGGED, Boolean.valueOf(ifluidstate.getFluid() == Fluids.WATER));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/SettWallBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "WallBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "updatePostPlacement", "params": ["BlockState", "Direction", "BlockState", "IWorld", "BlockPos", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "BlockState", "snippet": "\t\tpublic BlockState updatePostPlacement(BlockState stateIn, Direction facing, BlockState facingState, IWorld worldIn, BlockPos currentPos,\t\t\t\tBlockPos facingPos) {\t\t\tif (stateIn.get(WATERLOGGED)) {\t\t\t\tworldIn.getPendingFluidTicks().scheduleTick(currentPos, Fluids.WATER, Fluids.WATER.getTickRate(worldIn));\t\t\t}\t\t\tif (facing == Direction.DOWN) {\t\t\t\treturn super.updatePostPlacement(stateIn, facing, facingState, worldIn, currentPos, facingPos);\t\t\t} else {\t\t\t\tDirection direction = facing.getOpposite();\t\t\t\tboolean flag = facing == Direction.NORTH\t\t\t\t\t\t? this.func_220113_a(facingState, facingState.isSolidSide(worldIn, facingPos, direction), direction)\t\t\t\t\t\t: stateIn.get(NORTH);\t\t\t\tboolean flag1 = facing == Direction.EAST\t\t\t\t\t\t? this.func_220113_a(facingState, facingState.isSolidSide(worldIn, facingPos, direction), direction)\t\t\t\t\t\t: stateIn.get(EAST);\t\t\t\tboolean flag2 = facing == Direction.SOUTH\t\t\t\t\t\t? this.func_220113_a(facingState, facingState.isSolidSide(worldIn, facingPos, direction), direction)\t\t\t\t\t\t: stateIn.get(SOUTH);\t\t\t\tboolean flag3 = facing == Direction.WEST\t\t\t\t\t\t? this.func_220113_a(facingState, facingState.isSolidSide(worldIn, facingPos, direction), direction)\t\t\t\t\t\t: stateIn.get(WEST);\t\t\t\tboolean flag4 = (!flag || flag1 || !flag2 || flag3) && (flag || !flag1 || flag2 || !flag3);\t\t\t\treturn stateIn.with(UP, Boolean.valueOf(flag4 || !worldIn.isAirBlock(currentPos.up()))).with(NORTH, Boolean.valueOf(flag))\t\t\t\t\t\t.with(EAST, Boolean.valueOf(flag1)).with(SOUTH, Boolean.valueOf(flag2)).with(WEST, Boolean.valueOf(flag3));\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/SettWallBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "WallBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isNormalCube", "params": ["BlockState", "IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean isNormalCube(BlockState state, IBlockReader worldIn, BlockPos pos) {\t\t\treturn false;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/SettWallBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "WallBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "propagatesSkylightDown", "params": ["BlockState", "IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean propagatesSkylightDown(BlockState state, IBlockReader reader, BlockPos pos) {\t\t\treturn true;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/SettWallBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "WallBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 0));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/SettWallBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "WallBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getObject", "params": ["Class<T>"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public <T> T getObject(Class<T> type) {        if (cache.containsKey(type)) {            return (T) cache.get(type);        }        Class<? extends T> implClass = type;        if (type.isInterface()) {            implClass = config.getImplClass(type);        }        T t = factory.createObject(implClass);        if (implClass.isAnnotationPresent(Singleton.class)) {            cache.put(type, t);        }        return t;    }", "url": "https://raw.githubusercontent.com/Jeka1978/coronadesinfectorlifedemo/master/src/main/java/com/epam/ApplicationContext.java", "stars": "60", "class": {"name": "ApplicationContext", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadProps", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Props", "snippet": "  public static Props loadProps(final String[] args) {    azkabanProperties = loadProps(args, new OptionParser());    return azkabanProperties;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/AzkabanServer.java", "stars": "18", "class": {"name": "AzkabanServer", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getAzkabanProperties", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Props", "snippet": "  public static Props getAzkabanProperties() {    return azkabanProperties;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/AzkabanServer.java", "stars": "18", "class": {"name": "AzkabanServer", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "loadProps", "params": ["String", "OptionParser"], "throws": null, "modifiers": ["public", "static"], "return_type": "Props", "snippet": "  public static Props loadProps(final String[] args, final OptionParser parser) {    final OptionSpec<String> configDirectory = parser.acceptsAll(        Arrays.asList(\"c\", \"conf\"), \"The conf directory for Azkaban.\")        .withRequiredArg()        .describedAs(\"conf\")        .ofType(String.class);    // Grabbing the azkaban settings from the conf directory.    Props azkabanSettings = null;    final OptionSet options = parser.parse(args);    if (options.has(configDirectory)) {      final String path = options.valueOf(configDirectory);      logger.info(\"Loading azkaban settings file from \" + path);      final File dir = new File(path);      if (!dir.exists()) {        logger.error(\"Conf directory \" + path + \" doesn't exist.\");      } else if (!dir.isDirectory()) {        logger.error(\"Conf directory \" + path + \" isn't a directory.\");      } else {        azkabanSettings = loadAzkabanConfigurationFromDirectory(dir);      }    } else {      logger          .info(\"Conf parameter not set, attempting to get value from AZKABAN_HOME env.\");      azkabanSettings = loadConfigurationFromAzkabanHome();    }    if (azkabanSettings != null) {      updateDerivedConfigs(azkabanSettings);    }    return azkabanSettings;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/AzkabanServer.java", "stars": "18", "class": {"name": "AzkabanServer", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "updateDerivedConfigs", "params": ["Props"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "  private static void updateDerivedConfigs(final Props azkabanSettings) {    final boolean isSslEnabled = azkabanSettings.getBoolean(\"jetty.use.ssl\", true);    final int port = isSslEnabled        ? azkabanSettings.getInt(\"jetty.ssl.port\", DEFAULT_SSL_PORT_NUMBER)        : azkabanSettings.getInt(\"jetty.port\", DEFAULT_PORT_NUMBER);    // setting stats configuration for connectors    final String hostname = azkabanSettings.getString(\"jetty.hostname\", \"localhost\");    azkabanSettings.put(\"server.hostname\", hostname);    azkabanSettings.put(\"server.port\", port);    azkabanSettings.put(\"server.useSSL\", String.valueOf(isSslEnabled));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/AzkabanServer.java", "stars": "18", "class": {"name": "AzkabanServer", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "loadAzkabanConfigurationFromDirectory", "params": ["File"], "throws": null, "modifiers": ["public", "static"], "return_type": "Props", "snippet": "  public static Props loadAzkabanConfigurationFromDirectory(final File dir) {    final File azkabanPrivatePropsFile = new File(dir, Constants.AZKABAN_PRIVATE_PROPERTIES_FILE);    final File azkabanPropsFile = new File(dir, Constants.AZKABAN_PROPERTIES_FILE);    Props props = null;    try {      // This is purely optional      if (azkabanPrivatePropsFile.exists() && azkabanPrivatePropsFile.isFile()) {        logger.info(\"Loading azkaban private properties file\");        props = new Props(null, azkabanPrivatePropsFile);      }      if (azkabanPropsFile.exists() && azkabanPropsFile.isFile()) {        logger.info(\"Loading azkaban properties file\");        props = new Props(props, azkabanPropsFile);      }    } catch (final FileNotFoundException e) {      logger.error(\"File not found. Could not load azkaban config file\", e);    } catch (final IOException e) {      logger.error(\"File found, but error reading. Could not load azkaban config file\", e);    }    return props;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/AzkabanServer.java", "stars": "18", "class": {"name": "AzkabanServer", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "loadConfigurationFromAzkabanHome", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "Props", "snippet": "  private static Props loadConfigurationFromAzkabanHome() {    final String azkabanHome = System.getenv(\"AZKABAN_HOME\");    if (azkabanHome == null) {      logger.error(\"AZKABAN_HOME not set. Will try default.\");      return null;    }    if (!new File(azkabanHome).isDirectory() || !new File(azkabanHome).canRead()) {      logger.error(azkabanHome + \" is not a readable directory.\");      return null;    }    final File confPath = new File(azkabanHome, Constants.DEFAULT_CONF_PATH);    if (!confPath.exists() || !confPath.isDirectory() || !confPath.canRead()) {      logger.error(azkabanHome + \" does not contain a readable conf directory.\");      return null;    }    return loadAzkabanConfigurationFromDirectory(confPath);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/AzkabanServer.java", "stars": "18", "class": {"name": "AzkabanServer", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getServerProps", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "Props", "snippet": "  public abstract Props getServerProps();  public abstract SessionCache getSessionCache();  public abstract VelocityEngine getVelocityEngine();  public abstract TransitionService getTransitionService();}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/AzkabanServer.java", "stars": "18", "class": {"name": "AzkabanServer", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getSessionCache", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "SessionCache", "snippet": "  public abstract SessionCache getSessionCache();  public abstract VelocityEngine getVelocityEngine();  public abstract TransitionService getTransitionService();}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/AzkabanServer.java", "stars": "18", "class": {"name": "AzkabanServer", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getVelocityEngine", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "VelocityEngine", "snippet": "  public abstract VelocityEngine getVelocityEngine();  public abstract TransitionService getTransitionService();}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/AzkabanServer.java", "stars": "18", "class": {"name": "AzkabanServer", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getTransitionService", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "TransitionService", "snippet": "  public abstract TransitionService getTransitionService();}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/AzkabanServer.java", "stars": "18", "class": {"name": "AzkabanServer", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getContents", "params": [], "throws": null, "modifiers": ["public"], "return_type": "SqlNode", "snippet": "  public SqlNode getContents() {    return contents;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/xmltags/TrimSqlNode.java", "stars": "15", "class": {"name": "TrimSqlNode", "extends": null, "implements": ["SqlNode"], "modifiers": ["public"]}}, {"method_name": "apply", "params": ["DynamicContext"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean apply(DynamicContext context) {    FilteredDynamicContext filteredDynamicContext = new FilteredDynamicContext(context);    boolean result = contents.apply(filteredDynamicContext);    filteredDynamicContext.applyAll();    return result;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/xmltags/TrimSqlNode.java", "stars": "15", "class": {"name": "TrimSqlNode", "extends": null, "implements": ["SqlNode"], "modifiers": ["public"]}}, {"method_name": "parseOverrides", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "List<String>", "snippet": "  private static List<String> parseOverrides(String overrides) {    if (overrides != null) {      final StringTokenizer parser = new StringTokenizer(overrides, \"|\", false);      final List<String> list = new ArrayList<>(parser.countTokens());      while (parser.hasMoreTokens()) {        list.add(parser.nextToken().toUpperCase(Locale.ENGLISH));      }      return list;    }    return Collections.emptyList();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/xmltags/TrimSqlNode.java", "stars": "15", "class": {"name": "TrimSqlNode", "extends": null, "implements": ["SqlNode"], "modifiers": ["public"]}}, {"method_name": "applyAll", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void applyAll() {      sqlBuffer = new StringBuilder(sqlBuffer.toString().trim());      String trimmedUppercaseSql = sqlBuffer.toString().toUpperCase(Locale.ENGLISH);      if (trimmedUppercaseSql.length() > 0) {        applyPrefix(sqlBuffer, trimmedUppercaseSql);        applySuffix(sqlBuffer, trimmedUppercaseSql);      }      delegate.appendSql(sqlBuffer.toString());    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/xmltags/TrimSqlNode.java", "stars": "15", "class": {"name": "FilteredDynamicContext", "extends": "DynamicContext", "implements": null, "modifiers": ["private"]}}, {"method_name": "getBindings", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "    public Map<String, Object> getBindings() {      return delegate.getBindings();    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/xmltags/TrimSqlNode.java", "stars": "15", "class": {"name": "FilteredDynamicContext", "extends": "DynamicContext", "implements": null, "modifiers": ["private"]}}, {"method_name": "bind", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void bind(String name, Object value) {      delegate.bind(name, value);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/xmltags/TrimSqlNode.java", "stars": "15", "class": {"name": "FilteredDynamicContext", "extends": "DynamicContext", "implements": null, "modifiers": ["private"]}}, {"method_name": "getUniqueNumber", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getUniqueNumber() {      return delegate.getUniqueNumber();    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/xmltags/TrimSqlNode.java", "stars": "15", "class": {"name": "FilteredDynamicContext", "extends": "DynamicContext", "implements": null, "modifiers": ["private"]}}, {"method_name": "appendSql", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void appendSql(String sql) {      sqlBuffer.append(sql);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/xmltags/TrimSqlNode.java", "stars": "15", "class": {"name": "FilteredDynamicContext", "extends": "DynamicContext", "implements": null, "modifiers": ["private"]}}, {"method_name": "getSql", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getSql() {      return delegate.getSql();    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/xmltags/TrimSqlNode.java", "stars": "15", "class": {"name": "FilteredDynamicContext", "extends": "DynamicContext", "implements": null, "modifiers": ["private"]}}, {"method_name": "applyPrefix", "params": ["StringBuilder", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void applyPrefix(StringBuilder sql, String trimmedUppercaseSql) {      if (!prefixApplied) {        prefixApplied = true;        if (prefixesToOverride != null) {          for (String toRemove : prefixesToOverride) {            if (trimmedUppercaseSql.startsWith(toRemove)) {              sql.delete(0, toRemove.trim().length());              break;            }          }        }        if (prefix != null) {          sql.insert(0, \" \");          sql.insert(0, prefix);        }      }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/xmltags/TrimSqlNode.java", "stars": "15", "class": {"name": "FilteredDynamicContext", "extends": "DynamicContext", "implements": null, "modifiers": ["private"]}}, {"method_name": "applySuffix", "params": ["StringBuilder", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void applySuffix(StringBuilder sql, String trimmedUppercaseSql) {      if (!suffixApplied) {        suffixApplied = true;        if (suffixesToOverride != null) {          for (String toRemove : suffixesToOverride) {            if (trimmedUppercaseSql.endsWith(toRemove) || trimmedUppercaseSql.endsWith(toRemove.trim())) {              int start = sql.length() - toRemove.trim().length();              int end = sql.length();              sql.delete(start, end);              break;            }          }        }        if (suffix != null) {          sql.append(\" \");          sql.append(suffix);        }      }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/xmltags/TrimSqlNode.java", "stars": "15", "class": {"name": "FilteredDynamicContext", "extends": "DynamicContext", "implements": null, "modifiers": ["private"]}}, {"method_name": "nodesTableEmpty", "params": [], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean nodesTableEmpty() throws SQLException {        return this.findDO(new NodeDO()).isEmpty();    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/db/CheckPointDb.java", "stars": "7", "class": {"name": "CheckPointDb", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addNodeRecord", "params": ["NodeDO"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long addNodeRecord(NodeDO obj) throws SQLException {        synchronized (this) {            return executeInsert(MapperUtil.createMapper(obj.getClass()), MapperUtil.createInsertSql(obj));        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/db/CheckPointDb.java", "stars": "7", "class": {"name": "CheckPointDb", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteNodeRecord", "params": ["NodeDO"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void deleteNodeRecord(NodeDO obj) throws SQLException {        synchronized (this) {            execute(MapperUtil.createMapper(obj.getClass()), MapperUtil.createDeleteByParamSql(obj));        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/db/CheckPointDb.java", "stars": "7", "class": {"name": "CheckPointDb", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "find", "params": ["NodeDO"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<NodeDO>", "snippet": "    public List<NodeDO> find(NodeDO nodeDO) throws SQLException {        synchronized (this) {            return this.findDO(nodeDO);        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/db/CheckPointDb.java", "stars": "7", "class": {"name": "CheckPointDb", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateNode", "params": ["NodeDO"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean updateNode(NodeDO obj) throws SQLException {        synchronized (this) {            Table table = MapperUtil.createMapper(obj.getClass());            NodeDO param = new NodeDO();            param.setOrgMspId(obj.getOrgMspId());            param.setHostName(obj.getHostName());            param.setIp(obj.getIp());            param.setPort(obj.getPort());            List<NodeDO> found = findDO(param);            if (found.isEmpty()) {                return executeInsert(table, MapperUtil.createInsertSql(obj)) != null;            } else {                if (found.size() > 1) {                    execute(table, MapperUtil.createDeleteByParamSql(param));                    return executeInsert(table, MapperUtil.createInsertSql(obj)) != null;                } else {                    NodeDO item = found.get(0);                    if (item.getStatus() == obj.getStatus()) {                        return false;                    }                    obj.setId(found.get(0).getId());                    return executeUpdate(table, MapperUtil.createUpdateByIdSql(obj)) == 1;                }            }        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/db/CheckPointDb.java", "stars": "7", "class": {"name": "CheckPointDb", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findDO", "params": ["T"], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "List<T>", "snippet": "    private <T extends BaseDO> List<T> findDO(T obj) throws SQLException {        return find(obj, null, 0, 0);    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/db/CheckPointDb.java", "stars": "7", "class": {"name": "CheckPointDb", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "find", "params": ["T", "Map<String,Boolean>", "int", "int"], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "List<T>", "snippet": "    private <T extends BaseDO> List<T> find(T obj, Map<String, Boolean> orderBy, int pageIndex, int pageSize) throws SQLException {        List<T> result = new ArrayList<>();        Class clazz = obj.getClass();        Table table = MapperUtil.createMapper(clazz);        checkAndCreateTable(table);        String sql = MapperUtil.generalFindSql(obj);        if (!CollectionUtils.isEmpty(orderBy)) {            StringBuilder orderByStr = new StringBuilder();            Set<String> orderFields = orderBy.keySet();            for (String f: orderFields) {                List<Column> cols = table.getFields().stream()                        .filter(c -> c.getFieldName().equalsIgnoreCase(f) || c.getColumnName().equalsIgnoreCase(f))                        .collect(Collectors.toList());                if (!cols.isEmpty()) {                    if (orderByStr.length() == 0) {                        orderByStr.append(\" order by \");                    }                    orderByStr.append(cols.get(0).getColumnName()).append(orderBy.get(f) ? \" asc,\" : \" desc,\");                }            }            String subSql = orderByStr.toString();            if (subSql.endsWith(\",\")) {                subSql = subSql.substring(0, subSql.length() - 1);            }            if (!subSql.isEmpty()) {                sql = sql + subSql;            }        }        if (pageIndex > 0 && pageSize > 0) {            sql = sql + \" limit \" + (pageIndex - 1) * pageSize + \", \" + pageSize;        }        Connection conn = null;        Statement stmt = null;        ResultSet rs = null;        try {            conn = ConnectionPool.getInstance().getConnection();            stmt = conn.createStatement();            rs = stmt.executeQuery(sql);            List<Column> columns = table.getFields();            while (rs.next()) {                T rtObj = (T)clazz.newInstance();                for (Column col: columns) {                    Object v = rs.getObject(col.getColumnName());                    setFieldValue(rtObj, col, rs);                }                result.add(rtObj);            }        } catch (IllegalAccessException | InstantiationException e) {            e.printStackTrace();        } finally {            ConnectionPool.releaseConnection(conn, stmt, rs);        }        return result;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/db/CheckPointDb.java", "stars": "7", "class": {"name": "CheckPointDb", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "countOf", "params": ["T"], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "int", "snippet": "    private <T extends BaseDO> int countOf(T obj) throws SQLException {        Class clazz = obj.getClass();        Table table = MapperUtil.createMapper(clazz);        checkAndCreateTable(table);        String sql = MapperUtil.generalCountSql(obj);        Connection conn = null;        Statement stmt = null;        ResultSet rs = null;        try {            conn = ConnectionPool.getInstance().getConnection();            stmt = conn.createStatement();            rs = stmt.executeQuery(sql);            if (rs.next()) {                return rs.getInt(\"total\");            }        } finally {            ConnectionPool.releaseConnection(conn, stmt, rs);        }        return 0;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/db/CheckPointDb.java", "stars": "7", "class": {"name": "CheckPointDb", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEnumObject", "params": ["String", "Class<T>"], "throws": null, "modifiers": ["private", "static"], "return_type": "T", "snippet": "    private static <T extends Enum<?>> T getEnumObject(String value, Class<T> clazz) {        if (!clazz.isEnum()) {            return null;        }        try {            T[] enumConstants = clazz.getEnumConstants();            for (T ec : enumConstants) {                if (((Enum<?>) ec).name().equals(value)) {                    return ec;                }            }            return null;        } catch (Exception e) {            e.printStackTrace();        }        return null;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/db/CheckPointDb.java", "stars": "7", "class": {"name": "CheckPointDb", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFieldValue", "params": ["T", "Column", "ResultSet"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private <T extends BaseDO> void setFieldValue(T rtObj, Column col, ResultSet rs) {        Field[] fields = rtObj.getClass().getDeclaredFields();        boolean found = false;        for (Field field: fields) {            field.setAccessible(true);            if (field.getName().equals(col.getFieldName())) {                found = true;                try {                    Class type = field.getType();                    if (type.isEnum()) {                        field.set(rtObj, getEnumObject(col.getColumnName(), type));                    } else if (type.equals(Long.class)) {                        field.set(rtObj, rs.getLong(col.getColumnName()));                    } else if (type.equals(String.class)) {                        field.set(rtObj, rs.getString(col.getColumnName()));                    } else if (type.equals(Date.class)) {                        field.set(rtObj, rs.getDate(col.getColumnName()));                    } else if (type.equals(Integer.class)) {                        field.set(rtObj, rs.getInt(col.getColumnName()));                    } else {                        field.set(rtObj, rs.getObject(col.getColumnName()));                    }                } catch (IllegalAccessException | SQLException e) {                    e.printStackTrace();                }            }        }        if (!found) {            Class parent = rtObj.getClass().getSuperclass();            Field[] fieldsParent = parent.getDeclaredFields();            for (Field field: fieldsParent) {                field.setAccessible(true);                if (field.getName().equals(col.getFieldName())) {                    try {                        Class type = field.getType();                        if (type.equals(Long.class)) {                            field.set(rtObj, rs.getLong(col.getColumnName()));                        } else if (type.equals(String.class)) {                            field.set(rtObj, rs.getString(col.getColumnName()));                        } else if (type.equals(java.util.Date.class)) {                            field.set(rtObj, rs.getTimestamp(col.getColumnName()));                        } else if (type.equals(Integer.class)) {                            field.set(rtObj, rs.getInt(col.getColumnName()));                        } else {                            field.set(rtObj, rs.getObject(col.getColumnName()));                        }                    } catch (IllegalAccessException | SQLException e) {                        e.printStackTrace();                    }                }            }        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/db/CheckPointDb.java", "stars": "7", "class": {"name": "CheckPointDb", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "execute", "params": ["Table", "String"], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean execute(Table table, String sql) throws SQLException {        checkAndCreateTable(table);        Connection conn = null;        Statement stmt = null;        try {            conn = ConnectionPool.getInstance().getConnection();            stmt = conn.createStatement();            return stmt.execute(sql);        } finally {            ConnectionPool.releaseConnection(conn, stmt, null);        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/db/CheckPointDb.java", "stars": "7", "class": {"name": "CheckPointDb", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "executeInsert", "params": ["Table", "String"], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "Long", "snippet": "    private Long executeInsert(Table table, String sql) throws SQLException {        checkAndCreateTable(table);        Connection conn = null;        Statement stmt = null;        ResultSet rs = null;        try {            conn = ConnectionPool.getInstance().getConnection();            stmt = conn.createStatement();            stmt.execute(sql, Statement.RETURN_GENERATED_KEYS);            rs = stmt.getGeneratedKeys();            if (rs.next()) {                return rs.getLong(\"id\");            }            return 0L;        } finally {            ConnectionPool.releaseConnection(conn, stmt, rs);        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/db/CheckPointDb.java", "stars": "7", "class": {"name": "CheckPointDb", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "executeUpdate", "params": ["Table", "String"], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "int", "snippet": "    private int executeUpdate(Table table, String sql) throws SQLException {        checkAndCreateTable(table);        Connection conn = null;        Statement stmt = null;        try {            conn = ConnectionPool.getInstance().getConnection();            stmt = conn.createStatement();            return stmt.executeUpdate(sql);        } finally {            ConnectionPool.releaseConnection(conn, stmt, null);        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/db/CheckPointDb.java", "stars": "7", "class": {"name": "CheckPointDb", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkAndCreateTable", "params": ["Table"], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void checkAndCreateTable(Table table) throws SQLException {        Connection conn = ConnectionPool.getInstance().getConnection();        DatabaseMetaData meta = conn.getMetaData();        ResultSet rsTables = meta.getTables(null, null, table.getTableName(), new String[] { \"TABLE\" });        Statement stmt = null;        if (!rsTables.next()) {            stmt = conn.createStatement();            stmt.execute(MapperUtil.createTableSql(table));        }        ConnectionPool.releaseConnection(conn, stmt, rsTables);    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/db/CheckPointDb.java", "stars": "7", "class": {"name": "CheckPointDb", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "executeInsertWithParametered", "params": ["T", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Long", "snippet": "    public <T extends BaseDO> Long executeInsertWithParametered(T obj, String sql) throws SQLException {        Table table = MapperUtil.createMapper(obj.getClass());        checkAndCreateTable(table);        Connection conn = null;        PreparedStatement stmt = null;        ResultSet rs = null;        try {            conn = ConnectionPool.getInstance().getConnection();            stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);            for (int i = 0; i < table.getFields().size(); ++i) {                Column c = table.getFields().get(i);                if (c.getColumnName().equals(\"id\")) {                    continue;                }                if (c.getColumnName().equals(\"revision\")) {                    stmt.setLong(i, 0);                } else if (c.getColumnName().equals(\"create_time\")) {                    stmt.setTimestamp(i, new Timestamp(System.currentTimeMillis()));                } else if (c.getColumnName().equals(\"modify_time\")) {                    stmt.setTimestamp(i, new Timestamp(System.currentTimeMillis()));                }  else {                    try {                        Object val = MapperUtil.getFieldValue(obj, c.getFieldName());                        if (\"CLOB\".equalsIgnoreCase(c.getDbType())) {                            ByteArrayInputStream byteInputStream = new ByteArrayInputStream(val == null ? \"\".getBytes() : val.toString().getBytes());                            stmt.setAsciiStream(i, byteInputStream);                        }                        else {                            if (String.class.getName().equals(c.getType())) {                                stmt.setString(i, val.toString());                            } else if (java.util.Date.class.getName().equals(c.getType())) {                                if (val == null) {                                    stmt.setTimestamp(i, new Timestamp(System.currentTimeMillis()));                                } else {                                    stmt.setTimestamp(i, new Timestamp(((java.util.Date)val).getTime()));                                }                            } else {                                stmt.setString(i, val == null ? \"\" : val.toString());                            }                        }                    } catch (Exception e) {                        e.printStackTrace();                    }                }            }            stmt.executeUpdate();            rs = stmt.getGeneratedKeys();            if (rs.next()) {                return rs.getLong(\"id\");            }            return 0L;        } finally {            ConnectionPool.releaseConnection(conn, stmt, rs);        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/db/CheckPointDb.java", "stars": "7", "class": {"name": "CheckPointDb", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findOnlyIds", "params": ["T", "Map<String,Boolean>", "int", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<Long>", "snippet": "    public  <T extends BaseDO> List<Long> findOnlyIds(T obj, Map<String, Boolean> orderBy, int pageIndex, int pageSize) throws SQLException {        List<Long> result = new ArrayList<>();        Class clazz = obj.getClass();        Table table = MapperUtil.createMapper(clazz);        checkAndCreateTable(table);        String sql = MapperUtil.generalFindIdSql(obj);        if (!CollectionUtils.isEmpty(orderBy)) {            StringBuilder orderByStr = new StringBuilder();            Set<String> orderFields = orderBy.keySet();            for (String f: orderFields) {                List<Column> cols = table.getFields().stream()                        .filter(c -> c.getFieldName().equalsIgnoreCase(f) || c.getColumnName().equalsIgnoreCase(f))                        .collect(Collectors.toList());                if (!cols.isEmpty()) {                    if (orderByStr.length() == 0) {                        orderByStr.append(\" order by \");                    }                    orderByStr.append(cols.get(0).getColumnName()).append(orderBy.get(f) ? \" asc,\" : \" desc,\");                }            }            String subSql = orderByStr.toString();            if (subSql.endsWith(\",\")) {                subSql = subSql.substring(0, subSql.length() - 1);            }            if (!subSql.isEmpty()) {                sql = sql + subSql;            }        }        if (pageIndex > 0 && pageSize > 0) {            sql = sql + \" limit \" + (pageIndex - 1) * pageSize + \", \" + pageSize;        }        Connection conn = null;        Statement stmt = null;        ResultSet rs = null;        try {            conn = ConnectionPool.getInstance().getConnection();            stmt = conn.createStatement();            rs = stmt.executeQuery(sql);            List<Column> columns = table.getFields();            while (rs.next()) {                Long id = rs.getLong(\"id\");                result.add(id);            }        } finally {            ConnectionPool.releaseConnection(conn, stmt, rs);        }        return result;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/db/CheckPointDb.java", "stars": "7", "class": {"name": "CheckPointDb", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getId() {    return id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/blog/ComplexImmutableAuthorId.java", "stars": "15", "class": {"name": "ComplexImmutableAuthorId", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEmail", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getEmail() {    return email;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/blog/ComplexImmutableAuthorId.java", "stars": "15", "class": {"name": "ComplexImmutableAuthorId", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUsername", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getUsername() {    return username;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/blog/ComplexImmutableAuthorId.java", "stars": "15", "class": {"name": "ComplexImmutableAuthorId", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPassword", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getPassword() {    return password;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/blog/ComplexImmutableAuthorId.java", "stars": "15", "class": {"name": "ComplexImmutableAuthorId", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean equals(Object o) {    if (this == o) {      return true;    }    if (o == null || getClass() != o.getClass()) {      return false;    }    final ComplexImmutableAuthorId that = (ComplexImmutableAuthorId) o;    if (id != that.id) {      return false;    }    if (email != null ? !email.equals(that.email) : that.email != null) {      return false;    }    if (password != null ? !password.equals(that.password) : that.password != null) {      return false;    }    if (username != null ? !username.equals(that.username) : that.username != null) {      return false;    }    return true;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/blog/ComplexImmutableAuthorId.java", "stars": "15", "class": {"name": "ComplexImmutableAuthorId", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int hashCode() {    int myresult = id;    myresult = 31 * myresult + (email != null ? email.hashCode() : 0);    myresult = 31 * myresult + (username != null ? username.hashCode() : 0);    myresult = 31 * myresult + (password != null ? password.hashCode() : 0);    return myresult;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/blog/ComplexImmutableAuthorId.java", "stars": "15", "class": {"name": "ComplexImmutableAuthorId", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tSpringApplication.run(BilibilidanmujiApplication.class, args);\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/BilibilidanmujiApplication.java", "stars": "3", "class": {"name": "BilibilidanmujiApplication", "extends": null, "implements": ["CommandLineRunner"], "modifiers": ["public"]}}, {"method_name": "run", "params": ["String"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void run(String... args) throws Exception {\t\t// TODO \u81ea\u52a8\u751f\u6210\u7684\u65b9\u6cd5\u5b58\u6839\t\tclientService.startService();\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/BilibilidanmujiApplication.java", "stars": "3", "class": {"name": "BilibilidanmujiApplication", "extends": null, "implements": ["CommandLineRunner"], "modifiers": ["public"]}}, {"method_name": "getServer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "IServer", "snippet": "    public IServer getServer() {        return this.server;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/events/server/ServerEvent.java", "stars": "2", "class": {"name": "ServerEvent", "extends": "CommunicationEvent", "implements": null, "modifiers": ["public"]}}, {"method_name": "onAttachedToWindow", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onAttachedToWindow() {        super.onAttachedToWindow();        animator.start();    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson4/Practice12CameraRotateFixedView.java", "stars": "2", "class": {"name": "Practice12CameraRotateFixedView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDetachedFromWindow", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDetachedFromWindow() {        super.onDetachedFromWindow();        animator.end();    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson4/Practice12CameraRotateFixedView.java", "stars": "2", "class": {"name": "Practice12CameraRotateFixedView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "setDegree", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDegree(int degree) {        this.degree = degree;        invalidate();    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson4/Practice12CameraRotateFixedView.java", "stars": "2", "class": {"name": "Practice12CameraRotateFixedView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        int bitmapWidth = bitmap.getWidth();        int bitmapHeight = bitmap.getHeight();        int center1X = point1.x + bitmapWidth / 2;        int center1Y = point1.y + bitmapHeight / 2;        int center2X = point2.x + bitmapWidth / 2;        int center2Y = point2.y + bitmapHeight / 2;        //\u5982\u679c\u4f60\u9700\u8981\u56fe\u5f62\u5de6\u53f3\u5bf9\u79f0\uff0c\u9700\u8981\u914d\u5408\u4e0acanvas.translate()\u6216matrix.preTranslate\u3001matrix.postTranslate\uff0c        // \u5728\u4e09\u7ef4\u65cb\u8f6c\u4e4b\u524d\u628a\u7ed8\u5236\u5185\u5bb9\u7684\u4e2d\u5fc3\u70b9\u79fb\u52a8\u5230\u539f\u70b9\uff0c\u5373\u65cb\u8f6c\u7684\u8f74\u5fc3\uff0c\u7136\u540e\u5728\u4e09\u7ef4\u65cb\u8f6c\u540e\u518d\u628a\u6295\u5f71\u79fb\u52a8\u56de\u6765        canvas.save();        camera.save();        camera.rotateX(degree);        canvas.translate(center1X, center1Y);        camera.applyToCanvas(canvas);        canvas.translate(-center1X, -center1Y);        camera.restore();        canvas.drawBitmap(bitmap, point1.x, point1.y, paint);        canvas.restore();        camera.save();        matrix.reset();        camera.rotateY(degree);        camera.getMatrix(matrix);        camera.restore();        matrix.preTranslate(-center2X, -center2Y);        matrix.postTranslate(center2X, center2Y);        canvas.save();        canvas.concat(matrix);        canvas.drawBitmap(bitmap, point2.x, point2.y, paint);        canvas.restore();    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson4/Practice12CameraRotateFixedView.java", "stars": "2", "class": {"name": "Practice12CameraRotateFixedView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": ["Context", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void start(Context context, String url) {        ArrayList<String> images = new ArrayList<>(1);        images.add(url);        start(context, images);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/ImageActivity.java", "stars": "1", "class": {"name": "ImageActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "start", "params": ["Context", "ArrayList<String>"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void start(Context context, ArrayList<String> urls) {        start(context, urls, 0);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/ImageActivity.java", "stars": "1", "class": {"name": "ImageActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "start", "params": ["Context", "ArrayList<String>", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void start(Context context, ArrayList<String> urls, int index) {        Intent intent = new Intent(context, ImageActivity.class);        intent.putExtra(IntentKey.PICTURE, urls);        intent.putExtra(IntentKey.INDEX, index);        context.startActivity(intent);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/ImageActivity.java", "stars": "1", "class": {"name": "ImageActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getLayoutId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getLayoutId() {        return R.layout.activity_image;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/ImageActivity.java", "stars": "1", "class": {"name": "ImageActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "initView", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initView() {        mIndicatorView.setViewPager(mViewPager);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/ImageActivity.java", "stars": "1", "class": {"name": "ImageActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "createStatusBarConfig", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "ImmersionBar", "snippet": "    protected ImmersionBar createStatusBarConfig() {        return super.createStatusBarConfig()                // \u6709\u5bfc\u822a\u680f\u7684\u60c5\u51b5\u4e0b\uff0cactivity\u5168\u5c4f\u663e\u793a\uff0c\u4e5f\u5c31\u662factivity\u6700\u4e0b\u9762\u88ab\u5bfc\u822a\u680f\u8986\u76d6\uff0c\u4e0d\u5199\u9ed8\u8ba4\u975e\u5168\u5c4f                .fullScreen(true)                // \u9690\u85cf\u72b6\u6001\u680f                .hideBar(BarHide.FLAG_HIDE_STATUS_BAR)                // \u900f\u660e\u5bfc\u822a\u680f\uff0c\u4e0d\u5199\u9ed8\u8ba4\u9ed1\u8272(\u8bbe\u7f6e\u6b64\u65b9\u6cd5\uff0cfullScreen()\u65b9\u6cd5\u81ea\u52a8\u4e3atrue)                .transparentNavigationBar();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/ImageActivity.java", "stars": "1", "class": {"name": "ImageActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "initData", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initData() {        ArrayList<String> images = getStringArrayList(IntentKey.PICTURE);        int index = getInt(IntentKey.INDEX);        if (images != null && images.size() > 0) {            mViewPager.setAdapter(new ImagePagerAdapter(this, images));            if (index != 0 && index <= images.size()) {                mViewPager.setCurrentItem(index);            }        } else {            finish();        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/ImageActivity.java", "stars": "1", "class": {"name": "ImageActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isStatusBarDarkFont", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isStatusBarDarkFont() {        return false;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/ImageActivity.java", "stars": "1", "class": {"name": "ImageActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isSwipeEnable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isSwipeEnable() {        return false;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/ImageActivity.java", "stars": "1", "class": {"name": "ImageActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    return \"TodoLists [id=\" + id + \", todoItems=\" + todoItems + \"]\";  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/emptycollection/TodoLists.java", "stars": "15", "class": {"name": "TodoLists", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getId() {    return id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/emptycollection/TodoLists.java", "stars": "15", "class": {"name": "TodoLists", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setId(int id) {    this.id = id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/emptycollection/TodoLists.java", "stars": "15", "class": {"name": "TodoLists", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTodoItems", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<TodoItem>", "snippet": "  public List<TodoItem> getTodoItems() {    return todoItems;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/emptycollection/TodoLists.java", "stars": "15", "class": {"name": "TodoLists", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTodoItems", "params": ["List<TodoItem>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setTodoItems(List<TodoItem> todoItems) {    this.todoItems = todoItems;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/emptycollection/TodoLists.java", "stars": "15", "class": {"name": "TodoLists", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toMessage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void toMessage() {        Handler integer = map.get(1);        integer.handlerMessage(null,null);    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/socket/SimulationToMessage.java", "stars": "1", "class": {"name": "SimulationToMessage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "index", "params": ["AbstractInsnNode"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "\tpublic static int index(AbstractInsnNode ain) {\t\ttry {\t\t\tint v = (int) INSN_INDEX.get(ain);\t\t\t// Can return -1\t\t\tif (v >= 0)\t\t\t\treturn v;\t\t} catch(Exception ex) { /* Fail */ }\t\t// Fallback\t\tint index = 0;\t\twhile(ain.getPrevious() != null) {\t\t\tain = ain.getPrevious();\t\t\tindex++;\t\t}\t\treturn index;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/util/InsnUtil.java", "stars": "12", "class": {"name": "InsnUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "encode", "params": ["ChannelHandlerContext", "Object", "ByteBuf"], "throws": ["Exception"], "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void encode(ChannelHandlerContext ctx, Object msg, ByteBuf out) throws Exception {    MessagePack pack = new MessagePack();    byte[] write = pack.write(msg);    out.writeBytes(write);  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/MessagePackEncoder.java", "stars": "3", "class": {"name": "MessagePackEncoder", "extends": "MessageToByteEncoder", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws IOException {        //read_utf_8();        read_gbk();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/17.%E3%80%90%E7%BA%BF%E7%A8%8B%E3%80%81%E5%90%8C%E6%AD%A5%E3%80%91-%E7%AC%94%E8%AE%B0/21.%E3%80%90%E7%BC%93%E5%86%B2%E6%B5%81%E3%80%81%E8%BD%AC%E6%8D%A2%E6%B5%81%E3%80%81%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81%E3%80%81%E6%89%93%E5%8D%B0%E6%B5%81%E3%80%91-%E7%AC%94%E8%AE%B0/code/10_IO/src/com/itheima/demo03/ReverseStream/Demo03InputStreamReader.java", "stars": "2", "class": {"name": "Demo03InputStreamReader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "read_gbk", "params": [], "throws": ["IOException"], "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void read_gbk() throws IOException {        //1.\u521b\u5efaInputStreamReader\u5bf9\u8c61,\u6784\u9020\u65b9\u6cd5\u4e2d\u4f20\u9012\u5b57\u8282\u8f93\u5165\u6d41\u548c\u6307\u5b9a\u7684\u7f16\u7801\u8868\u540d\u79f0        //InputStreamReader isr = new InputStreamReader(new FileInputStream(\"10_IO\\\\gbk.txt\"),\"UTF-8\");//???        InputStreamReader isr = new InputStreamReader(new FileInputStream(\"10_IO\\\\gbk.txt\"),\"GBK\");//\u4f60\u597d        //2.\u4f7f\u7528InputStreamReader\u5bf9\u8c61\u4e2d\u7684\u65b9\u6cd5read\u8bfb\u53d6\u6587\u4ef6        int len = 0;        while((len = isr.read())!=-1){            System.out.println((char)len);        }        //3.\u91ca\u653e\u8d44\u6e90        isr.close();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/17.%E3%80%90%E7%BA%BF%E7%A8%8B%E3%80%81%E5%90%8C%E6%AD%A5%E3%80%91-%E7%AC%94%E8%AE%B0/21.%E3%80%90%E7%BC%93%E5%86%B2%E6%B5%81%E3%80%81%E8%BD%AC%E6%8D%A2%E6%B5%81%E3%80%81%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81%E3%80%81%E6%89%93%E5%8D%B0%E6%B5%81%E3%80%91-%E7%AC%94%E8%AE%B0/code/10_IO/src/com/itheima/demo03/ReverseStream/Demo03InputStreamReader.java", "stars": "2", "class": {"name": "Demo03InputStreamReader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "read_utf_8", "params": [], "throws": ["IOException"], "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void read_utf_8() throws IOException {        //1.\u521b\u5efaInputStreamReader\u5bf9\u8c61,\u6784\u9020\u65b9\u6cd5\u4e2d\u4f20\u9012\u5b57\u8282\u8f93\u5165\u6d41\u548c\u6307\u5b9a\u7684\u7f16\u7801\u8868\u540d\u79f0        //InputStreamReader isr = new InputStreamReader(new FileInputStream(\"10_IO\\\\utf_8.txt\"),\"UTF-8\");        InputStreamReader isr = new InputStreamReader(new FileInputStream(\"10_IO\\\\utf_8.txt\"));//\u4e0d\u6307\u5b9a\u9ed8\u8ba4\u4f7f\u7528UTF-8        //2.\u4f7f\u7528InputStreamReader\u5bf9\u8c61\u4e2d\u7684\u65b9\u6cd5read\u8bfb\u53d6\u6587\u4ef6        int len = 0;        while((len = isr.read())!=-1){            System.out.println((char)len);        }        //3.\u91ca\u653e\u8d44\u6e90        isr.close();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/17.%E3%80%90%E7%BA%BF%E7%A8%8B%E3%80%81%E5%90%8C%E6%AD%A5%E3%80%91-%E7%AC%94%E8%AE%B0/21.%E3%80%90%E7%BC%93%E5%86%B2%E6%B5%81%E3%80%81%E8%BD%AC%E6%8D%A2%E6%B5%81%E3%80%81%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81%E3%80%81%E6%89%93%E5%8D%B0%E6%B5%81%E3%80%91-%E7%AC%94%E8%AE%B0/code/10_IO/src/com/itheima/demo03/ReverseStream/Demo03InputStreamReader.java", "stars": "2", "class": {"name": "Demo03InputStreamReader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testSelectListWithNestedResultMap", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "    void testSelectListWithNestedResultMap() throws Exception {        String xmlConfig = \"org/apache/ibatis/submitted/custom_collection_handling/MapperConfig.xml\";        SqlSessionFactory sqlSessionFactory = getSqlSessionFactoryXmlConfig(xmlConfig);        try (SqlSession sqlSession = sqlSessionFactory.openSession()) {            List<Person> list = sqlSession.selectList(\"org.apache.ibatis.submitted.custom_collection_handling.PersonMapper.findWithResultMap\");            assertEquals(2, list.size());            assertEquals(2, list.get(0).getContacts().size());            assertEquals(1, list.get(1).getContacts().size());            assertEquals(\"3 Wall Street\", list.get(0).getContacts().get(1).getAddress());        }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomCollectionHandlingTest.java", "stars": "15", "class": {"name": "CustomCollectionHandlingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testSelectListWithNestedSelect", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "    void testSelectListWithNestedSelect() throws Exception {        String xmlConfig = \"org/apache/ibatis/submitted/custom_collection_handling/MapperConfig.xml\";        SqlSessionFactory sqlSessionFactory = getSqlSessionFactoryXmlConfig(xmlConfig);        try (SqlSession sqlSession = sqlSessionFactory.openSession()) {            List<Person> list = sqlSession.selectList(\"org.apache.ibatis.submitted.custom_collection_handling.PersonMapper.findWithSelect\");            assertEquals(2, list.size());            assertEquals(2, list.get(0).getContacts().size());            assertEquals(1, list.get(1).getContacts().size());            assertEquals(\"3 Wall Street\", list.get(0).getContacts().get(1).getAddress());        }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomCollectionHandlingTest.java", "stars": "15", "class": {"name": "CustomCollectionHandlingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getSqlSessionFactoryXmlConfig", "params": ["String"], "throws": ["Exception"], "modifiers": ["private"], "return_type": "SqlSessionFactory", "snippet": "    private SqlSessionFactory getSqlSessionFactoryXmlConfig(String resource) throws Exception {        try (Reader configReader = Resources.getResourceAsReader(resource)) {            SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configReader);            initDb(sqlSessionFactory);            return sqlSessionFactory;        }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomCollectionHandlingTest.java", "stars": "15", "class": {"name": "CustomCollectionHandlingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "initDb", "params": ["SqlSessionFactory"], "throws": ["IOException", "SQLException"], "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void initDb(SqlSessionFactory sqlSessionFactory) throws IOException, SQLException {        BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),                \"org/apache/ibatis/submitted/custom_collection_handling/CreateDB.sql\");    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomCollectionHandlingTest.java", "stars": "15", "class": {"name": "CustomCollectionHandlingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "compare", "params": ["Pair<ExecutionReference,ExecutableFlow>", "Pair<ExecutionReference,ExecutableFlow>"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int compare(final Pair<ExecutionReference, ExecutableFlow> pair1,      final Pair<ExecutionReference, ExecutableFlow> pair2) {    ExecutableFlow exflow1 = null, exflow2 = null;    if (pair1 != null && pair1.getSecond() != null) {      exflow1 = pair1.getSecond();    }    if (pair2 != null && pair2.getSecond() != null) {      exflow2 = pair2.getSecond();    }    if (exflow1 == null && exflow2 == null) {      return 0;    } else if (exflow1 == null) {      return -1;    } else if (exflow2 == null) {      return 1;    } else {      // descending order of priority      int diff = getPriority(exflow2) - getPriority(exflow1);      if (diff == 0) {        // ascending order of update time, if same priority        diff = Long.compare(exflow1.getUpdateTime(), exflow2.getUpdateTime());      }      if (diff == 0) {        // ascending order of execution id, if same priority and updateTime        diff = exflow1.getExecutionId() - exflow2.getExecutionId();      }      return diff;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlowPriorityComparator.java", "stars": "18", "class": {"name": "ExecutableFlowPriorityComparator", "extends": null, "implements": ["Comparator"], "modifiers": ["public", "final"]}}, {"method_name": "getPriority", "params": ["ExecutableFlow"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "  private int getPriority(final ExecutableFlow exflow) {    final ExecutionOptions options = exflow.getExecutionOptions();    int priority = ExecutionOptions.DEFAULT_FLOW_PRIORITY;    if (options != null        && options.getFlowParameters() != null        && options.getFlowParameters()        .containsKey(ExecutionOptions.FLOW_PRIORITY)) {      try {        priority =            Integer.valueOf(options.getFlowParameters().get(                ExecutionOptions.FLOW_PRIORITY));      } catch (final NumberFormatException ex) {        priority = ExecutionOptions.DEFAULT_FLOW_PRIORITY;        logger.error(            \"Failed to parse flow priority for exec_id = \"                + exflow.getExecutionId(), ex);      }    }    return priority;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlowPriorityComparator.java", "stars": "18", "class": {"name": "ExecutableFlowPriorityComparator", "extends": null, "implements": ["Comparator"], "modifiers": ["public", "final"]}}, {"method_name": "getLayoutId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getLayoutId(int viewType) {        int layoutId = 0;        switch (viewType) {            case TYPE_ITEM_MEMBER:                layoutId = R.layout.item_member;                break;            case TYPE_ITEM_MEMBER_OWNER:                layoutId = R.layout.item_member_owner;                break;        }        return layoutId;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/adapter/RoomMemberAdapter.java", "stars": "2", "class": {"name": "RoomMemberAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemViewType", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getItemViewType(int position) {        if (position == 0) {            return TYPE_ITEM_MEMBER_OWNER;        }        return TYPE_ITEM_MEMBER;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/adapter/RoomMemberAdapter.java", "stars": "2", "class": {"name": "RoomMemberAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "convert", "params": ["VH", "UserInfo", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void convert(VH holder, UserInfo userInfo, int position) {        LogUtil.d(\"zhaochong\", \" rv  position : \" + position);        if (\"owner\".equals(userInfo.getRole())) {            holder.setText(R.id.item_tv_uid, \"\u623f\u4e3b:\" + userInfo.getUid() + (HummerManager.isOwner ? \"(\u6211)\" : \"\"));        } else {            holder.setText(R.id.item_tv_uid, \"\u89c2\u4f17:\" + userInfo.getUid() + (userInfo.getUid() == HMR.getMe().getId() ? \"(\u6211)\" : \"\"));        }        if (position == 0) {            Button btnCloseRoom = holder.getView(R.id.btn_closeroom);            btnCloseRoom.setVisibility(HummerManager.isOwner ? View.VISIBLE : View.GONE);            btnCloseRoom.setOnClickListener(view -> onItemChildClickListener.onItemChildClick(view, position));        } else {            if (HummerManager.isOwner) {                Button btnMuted = holder.getView(R.id.btn_muted);                Button btnKicked = holder.getView(R.id.btn_kicked);                btnMuted.setVisibility(View.VISIBLE);                btnKicked.setVisibility(View.VISIBLE);                btnMuted.setOnClickListener(view -> onItemChildClickListener.onItemChildClick(view, position));                btnKicked.setOnClickListener(view -> onItemChildClickListener.onItemChildClick(view, position));                btnMuted.setText(userInfo.isMuted() ? \"\u6062\u590d\u53d1\u8a00\" : \"\u7981\u8a00\");                btnMuted.setBackground(context.getResources().getDrawable(userInfo.isMuted() ? R.drawable.bg_btn_blue : R.drawable.bg_btn_blue_e0));                btnMuted.setTextColor(context.getResources().getColor(userInfo.isMuted() ? R.color.white95 : R.color.blue_font));            }        }    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/adapter/RoomMemberAdapter.java", "stars": "2", "class": {"name": "RoomMemberAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        GameFileOriginator gameFileOriginator = new GameFileOriginator();        GameCaretaker gameCaretaker = new GameCaretaker();        //\u8bbe\u7f6e\u6e38\u620f\u7684\u72b6\u6001\u5e76\u521b\u5efa\u5907\u5fd8\u5f55\u89d2\u8272        gameFileOriginator.setState(\"\u5df2\u901a\u8fc7\u7b2c\u4e00\u5173\");        gameCaretaker.setGameRoleMemento(gameFileOriginator.createGameRoleMemento());        //\u83b7\u53d6\u73b0\u5728\u7684\u72b6\u6001        System.out.println(gameFileOriginator.getState());        //\u8bbe\u7f6e\u65b0\u7684\u72b6\u6001        gameFileOriginator.setState(\"\u901a\u8fc7\u7b2c\u4e8c\u5173\u5931\u8d25\");        //\u83b7\u53d6\u73b0\u5728\u7684\u72b6\u6001        System.out.println(gameFileOriginator.getState());        //\u901a\u8fc7\u5176\u4ed6\u5173\u5361\u5931\u8d25,\u8bfb\u53d6\u4ee5\u524d\u7684\u5b58\u6863        gameFileOriginator.recoverGameRoleMemento(gameCaretaker.getGameRoleMemento());        System.out.println(gameFileOriginator.getState());    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/memento/MementoTest.java", "stars": "2", "class": {"name": "MementoTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "httpGetConf", "params": ["long"], "throws": null, "modifiers": ["public", "static"], "return_type": "Conf", "snippet": "\tpublic static Conf httpGetConf(long roomid) {\t\tBufferedReader bufferedReader = null;\t\tHttpURLConnection httpURLConnection = null;\t\tString data = null;\t\tJSONObject jsonObject = null;\t\tConf conf =null;\t\tURL url  = null;\t\ttry {\t\t\troomid = httpGetRoomData(roomid)==null?0:Long.valueOf(httpGetRoomData(roomid).getRoomid());\t\t\tString urlString  = \"https://api.live.bilibili.com/room/v1/Danmu/getConf?room_id=\"+roomid+\"&platform=pc&player=web\";\t\t\turl = new URL(urlString);\t\t\thttpURLConnection = (HttpURLConnection) url.openConnection();\t\t\thttpURLConnection.setRequestMethod(\"GET\");\t\t\thttpURLConnection.setRequestProperty(\"user-agent\", \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36\");\t\t\tbufferedReader = new BufferedReader(new InputStreamReader(httpURLConnection.getInputStream(),\"UTF-8\"));\t\t\tString msg = null;\t\t\twhile (null!=(msg=bufferedReader.readLine())) {\t\t\t\tdata =msg;\t\t\t}\t\t} catch (Exception e) {\t\t\t// TODO \u81ea\u52a8\u751f\u6210\u7684 catch \u5757\t\t\te.printStackTrace();\t\t}finally {\t\t\tif(bufferedReader!=null) {\t\t\t\ttry {\t\t\t\t\tbufferedReader.close();\t\t\t\t} catch (IOException e) {\t\t\t\t\t// TODO \u81ea\u52a8\u751f\u6210\u7684 catch \u5757\t\t\t\t\te.printStackTrace();\t\t\t\t}\t\t\t}\t\t\tif(httpURLConnection!=null) {\t\t\t\thttpURLConnection.disconnect();\t\t\t}\t\t}\t\tLOGGER.debug(\"\u83b7\u53d6\u5230\u7684conf:\"+data);\t\tjsonObject = JSONObject.parseObject(data);\t\tif(jsonObject.getInteger(\"code\")==0) {\t\tconf = jsonObject.getObject(\"data\", Conf.class);\t\t}else {\t\tLOGGER.error(\"\u672a\u77e5\u9519\u8bef,\u539f\u56e0:\"+jsonObject.getString(\"message\"));\t\t}\t\treturn conf;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/http/HttpGetData.java", "stars": "3", "class": {"name": "HttpGetData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "httpGetRoomData", "params": ["long"], "throws": null, "modifiers": ["public", "static"], "return_type": "Room", "snippet": "\tpublic static Room httpGetRoomData(long roomid) {\t\tBufferedReader bufferedReader = null;\t\tHttpURLConnection httpURLConnection = null;\t\tString data = null;\t\tJSONObject jsonObject = null;\t\tRoom room =null;\t\tURL url  = null;\t\ttry {\t\t\tString urlString  = \"https://api.live.bilibili.com/room_ex/v1/RoomNews/get?roomid=\"+roomid;\t\t\turl = new URL(urlString);\t\t\thttpURLConnection = (HttpURLConnection) url.openConnection();\t\t\thttpURLConnection.setRequestMethod(\"GET\");\t\t\thttpURLConnection.setRequestProperty(\"user-agent\", \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36\");\t\t\tbufferedReader = new BufferedReader(new InputStreamReader(httpURLConnection.getInputStream(),\"UTF-8\"));\t\t\tString msg = null;\t\t\twhile (null!=(msg=bufferedReader.readLine())) {\t\t\t\tdata =msg;\t\t\t}\t\t} catch (Exception e) {\t\t\t// TODO \u81ea\u52a8\u751f\u6210\u7684 catch \u5757\t\t\te.printStackTrace();\t\t}finally {\t\t\tif(bufferedReader!=null) {\t\t\t\ttry {\t\t\t\t\tbufferedReader.close();\t\t\t\t} catch (IOException e) {\t\t\t\t\t// TODO \u81ea\u52a8\u751f\u6210\u7684 catch \u5757\t\t\t\t\te.printStackTrace();\t\t\t\t}\t\t\t}\t\t\tif(httpURLConnection!=null) {\t\t\t\thttpURLConnection.disconnect();\t\t\t}\t\t}\t\tLOGGER.debug(\"\u83b7\u53d6\u5230\u7684room:\"+data);\t\tjsonObject = JSONObject.parseObject(data);\t\tif(jsonObject.getInteger(\"code\")==0) {\t\troom = jsonObject.getObject(\"data\",Room.class);\t\t}else {\t\tLOGGER.error(\"\u76f4\u64ad\u623f\u95f4\u53f7\u4e0d\u5b58\u5728\uff0c\u6216\u8005\u672a\u77e5\u9519\u8bef\uff0c\u8bf7\u5c1d\u8bd5\u66f4\u6362\u623f\u95f4\u53f7,\u539f\u56e0:\"+jsonObject.getString(\"message\"));\t\t}\t\treturn room;\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/http/HttpGetData.java", "stars": "3", "class": {"name": "HttpGetData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInfo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Info", "snippet": "    public Info getInfo() {        List<Info> infos = infoMapper.selectAll();        return infos.get(0);    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/service/impl/InfoServiceImpl.java", "stars": "1", "class": {"name": "InfoServiceImpl", "extends": null, "implements": ["InfoService"], "modifiers": ["public"]}}, {"method_name": "updateBlogTitle", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateBlogTitle(String title) {        Info info = getInfo();        info.setBlogTitle(title);        infoMapper.updateByPrimaryKey(info);    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/service/impl/InfoServiceImpl.java", "stars": "1", "class": {"name": "InfoServiceImpl", "extends": null, "implements": ["InfoService"], "modifiers": ["public"]}}, {"method_name": "createOrUpdateInfo", "params": ["Info"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void createOrUpdateInfo(Info info) {        if (info.getId() != null) {            infoMapper.updateByPrimaryKey(info);        } else {            infoMapper.insert(info);        }    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/service/impl/InfoServiceImpl.java", "stars": "1", "class": {"name": "InfoServiceImpl", "extends": null, "implements": ["InfoService"], "modifiers": ["public"]}}, {"method_name": "updateSEO", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateSEO(String keywords, String description) {        Info info = getInfo();        info.setSeoKeywords(keywords);        info.setSeoDescription(description);        infoMapper.updateByPrimaryKey(info);    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/service/impl/InfoServiceImpl.java", "stars": "1", "class": {"name": "InfoServiceImpl", "extends": null, "implements": ["InfoService"], "modifiers": ["public"]}}, {"method_name": "getWidth", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getWidth() {        return width;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/events/FullScreenEvent.java", "stars": "12", "class": {"name": "FullScreenEvent", "extends": "Event", "implements": null, "modifiers": ["public"]}}, {"method_name": "setWidth", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setWidth(float width) {        this.width = width;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/events/FullScreenEvent.java", "stars": "12", "class": {"name": "FullScreenEvent", "extends": "Event", "implements": null, "modifiers": ["public"]}}, {"method_name": "getHeight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getHeight() {        return height;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/events/FullScreenEvent.java", "stars": "12", "class": {"name": "FullScreenEvent", "extends": "Event", "implements": null, "modifiers": ["public"]}}, {"method_name": "setHeight", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setHeight(float height) {        this.height = height;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/events/FullScreenEvent.java", "stars": "12", "class": {"name": "FullScreenEvent", "extends": "Event", "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldNotRegisterTheSameDriverMultipleTimes", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldNotRegisterTheSameDriverMultipleTimes() throws Exception {    // https://code.google.com/p/mybatis/issues/detail?id=430    UnpooledDataSource dataSource = null;    dataSource = new UnpooledDataSource(\"org.hsqldb.jdbcDriver\", \"jdbc:hsqldb:mem:multipledrivers\", \"sa\", \"\");    dataSource.getConnection().close();    int before = countRegisteredDrivers();    dataSource = new UnpooledDataSource(\"org.hsqldb.jdbcDriver\", \"jdbc:hsqldb:mem:multipledrivers\", \"sa\", \"\");    dataSource.getConnection().close();    assertEquals(before, countRegisteredDrivers());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSourceTest.java", "stars": "15", "class": {"name": "UnpooledDataSourceTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldRegisterDynamicallyLoadedDriver", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldRegisterDynamicallyLoadedDriver() throws Exception {    int before = countRegisteredDrivers();    ClassLoader driverClassLoader = null;    UnpooledDataSource dataSource = null;    driverClassLoader = new URLClassLoader(new URL[] { new URL(\"jar:file:/PATH_TO/mysql-connector-java-5.1.25.jar!/\") });    dataSource = new UnpooledDataSource(driverClassLoader, \"com.mysql.jdbc.Driver\", \"jdbc:mysql://127.0.0.1/test\", \"root\", \"\");    dataSource.getConnection().close();    assertEquals(before + 1, countRegisteredDrivers());    driverClassLoader = new URLClassLoader(new URL[] { new URL(\"jar:file:/PATH_TO/mysql-connector-java-5.1.25.jar!/\") });    dataSource = new UnpooledDataSource(driverClassLoader, \"com.mysql.jdbc.Driver\", \"jdbc:mysql://127.0.0.1/test\", \"root\", \"\");    dataSource.getConnection().close();    assertEquals(before + 1, countRegisteredDrivers());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSourceTest.java", "stars": "15", "class": {"name": "UnpooledDataSourceTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "countRegisteredDrivers", "params": [], "throws": null, "modifiers": [], "return_type": "int", "snippet": "  int countRegisteredDrivers() {    Enumeration<Driver> drivers = DriverManager.getDrivers();    int count = 0;    while (drivers.hasMoreElements()) {      drivers.nextElement();      count++;    }    return count;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSourceTest.java", "stars": "15", "class": {"name": "UnpooledDataSourceTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onWVRankCommand", "params": ["Execution"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onWVRankCommand(Execution execution) {        execution.sendMessage(new String[]{                \" \",                \" \u00a76\u00a7lWICKEDVIPS \u00a78- \u00a7fRanks Help.\",                \" \",                \" \u00a78\u279f \u00a7e/wv rank give <player> <group> [duration] \u00a78- \u00a7fGives a VIP rank to the player.\",                \" \u00a78\u279f \u00a7e/wv rank remove <player> <group> [duration] \u00a78- \u00a7fRemoves a VIP rank from the player.\",                \" \"        });    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/command/VipRankCommand.java", "stars": "2", "class": {"name": "VipRankCommand", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onWVRankGive", "params": ["Execution", "Player", "VipType", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onWVRankGive(            Execution execution,            Player player,            VipType type,            @Argument(nullable = true) String timeString    ) {        VipPlayer vipPlayer = vipPlayerCache.find(player.getUniqueId());        if (vipPlayer == null) {            System.out.println(\"deu merda men\u00f3\");            return;        }        Long time = TimeUtils.millisFromString(timeString);        if (time == null) {            execution.sendMessage(\"Wrong time\");            return;        }        Vip vip = Vip                .builder()                .type(type)                .time(time)                .build();        vip.activate(vipPlayer);    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/command/VipRankCommand.java", "stars": "2", "class": {"name": "VipRankCommand", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "logFileError", "params": ["String", "File"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void logFileError(String message, File file) {        if (Log.isLoggable(TAG, Log.ERROR)) {            if (Log.isLoggable(TAG, Log.DEBUG)) {                String path = file.getAbsolutePath();                message += \": \" + path;            }            Log.e(TAG, message);        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/FileResponseCache.java", "stars": "74", "class": {"name": "FileResponseCache", "extends": "ResponseCache", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getResponseCode", "params": ["URLConnection"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getResponseCode(URLConnection connection) throws IOException {        HttpURLConnection http = (HttpURLConnection) connection;        int responseCode = http.getResponseCode();        if (responseCode != -1) {            return responseCode;        } else {            String response = connection.getHeaderField(\"status\");            if (response == null) {                return -1;            }            response = response.trim();            int index = response.indexOf(\" \");            if (index == -1) {                return -1;            }            try {                return Integer.parseInt(response.substring(0, index));            } catch (NumberFormatException e) {                return -1;            }        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/FileResponseCache.java", "stars": "74", "class": {"name": "FileResponseCache", "extends": "ResponseCache", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getResponseMessage", "params": ["URLConnection"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getResponseMessage(URLConnection connection) throws IOException {        HttpURLConnection http = (HttpURLConnection) connection;        int responseCode = http.getResponseCode();        if (responseCode != -1) {            return http.getResponseMessage();        } else {            String response = connection.getHeaderField(\"status\");            if (response == null) {                return null;            }            response = response.trim();            int index = response.indexOf(\" \");            if (index != -1) {                return response.substring(index + 1);            } else {                return null;            }        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/FileResponseCache.java", "stars": "74", "class": {"name": "FileResponseCache", "extends": "ResponseCache", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isStale", "params": ["File", "URI", "String", "Map<String,List>", "Object"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean isStale(File file, URI uri, String requestMethod,            Map<String, List<String>> requestHeaders, Object cookie) {        // TODO: Implement a more robust Cache-Control parser        List<String> values = requestHeaders.get(\"cache-control\");        if (values != null) {            for (String value : values) {                if (value.startsWith(MAX_AGE_PREFIX)) {                    try {                        int start = MAX_AGE_PREFIX.length();                        long maxAge = Long.parseLong(value.substring(start));                        if (maxAge == 0L) {                            return true;                        }                        long ageInMillis = System.currentTimeMillis() - file.lastModified();                        long ageInSeconds = ageInMillis / 1000L;                        if (ageInSeconds > maxAge) {                            return true;                        }                    } catch (NumberFormatException e) {                        if (Log.isLoggable(TAG, Log.ERROR)) {                            Log.e(TAG, \"Failed to parse Cache-Control: \" + value, e);                        }                    }                }            }        }        return false;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/FileResponseCache.java", "stars": "74", "class": {"name": "FileResponseCache", "extends": "ResponseCache", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isCacheable", "params": ["URLConnection"], "throws": ["IOException"], "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean isCacheable(URLConnection connection) throws IOException {        if (connection instanceof HttpURLConnection) {            HttpURLConnection http = (HttpURLConnection) connection;            String requestMethod = http.getRequestMethod();            int responseCode = http.getResponseCode();            return \"GET\".equals(requestMethod) && HttpURLConnection.HTTP_OK == responseCode;        } else {            return false;        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/FileResponseCache.java", "stars": "74", "class": {"name": "FileResponseCache", "extends": "ResponseCache", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getFile", "params": ["URI", "String", "Map<String,List>", "Object"], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "File", "snippet": "    protected abstract File getFile(URI uri, String requestMethod,            Map<String, List<String>> requestHeaders, Object cookie);    private File getFile(Frame frame) {        try {            HttpURLConnection http = (HttpURLConnection) frame.getConnection();            String requestMethod = http.getRequestMethod();            URL url = http.getURL();            URI uri = url.toURI();            // URLConnection#getRequestProperties() is not readable after the            // connection has been opened so pass a wrapper class that returns            // values from URLConnection#getRequestProperty(String)            // (which is still readable after the connection has been opened).            Map<String, List<String>> requestHeaders = new RequestPropertiesMap(http);            Object cookie = frame.getCookie();            return getFile(uri, requestMethod, requestHeaders, cookie);        } catch (URISyntaxException e) {            throw new RuntimeException(e);        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/FileResponseCache.java", "stars": "74", "class": {"name": "FileResponseCache", "extends": "ResponseCache", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getFile", "params": ["Frame"], "throws": null, "modifiers": ["private"], "return_type": "File", "snippet": "    private File getFile(Frame frame) {        try {            HttpURLConnection http = (HttpURLConnection) frame.getConnection();            String requestMethod = http.getRequestMethod();            URL url = http.getURL();            URI uri = url.toURI();            // URLConnection#getRequestProperties() is not readable after the            // connection has been opened so pass a wrapper class that returns            // values from URLConnection#getRequestProperty(String)            // (which is still readable after the connection has been opened).            Map<String, List<String>> requestHeaders = new RequestPropertiesMap(http);            Object cookie = frame.getCookie();            return getFile(uri, requestMethod, requestHeaders, cookie);        } catch (URISyntaxException e) {            throw new RuntimeException(e);        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/FileResponseCache.java", "stars": "74", "class": {"name": "FileResponseCache", "extends": "ResponseCache", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "get", "params": ["URI", "String", "Map<String,List>"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "CacheResponse", "snippet": "    public CacheResponse get(URI uri, String requestMethod, Map<String, List<String>> requestHeaders)            throws IOException {        Stack<Frame> stack = mStack.get();        if (stack == null || stack.isEmpty()) {            return null;        }        Frame frame = stack.peek();        URLConnection connection = frame.getConnection();        // There is a bug in Android's HttpURLConnection implementation        // where the response headers are passed to this method instead of        // the request headers.        // Pass a RequestPropertiesMap instead of passing        // URLConnection#getRequestProperies() to be consistent        // with the values passed to getFile(...) from put(...)        // (i.e., case-insensitive, max one value per key).        requestHeaders = new RequestPropertiesMap(connection);        Object cookie = frame.getCookie();        File file = getFile(uri, requestMethod, requestHeaders, cookie);        if (file != null && file.exists()                && !isStale(file, uri, requestMethod, requestHeaders, cookie)) {            return createCacheResponse(file);        } else {            return null;        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/FileResponseCache.java", "stars": "74", "class": {"name": "FileResponseCache", "extends": "ResponseCache", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "put", "params": ["URI", "URLConnection"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "CacheRequest", "snippet": "    public CacheRequest put(URI uri, URLConnection connection) throws IOException {        if (!isCacheable(connection)) {            return null;        }        Stack<Frame> stack = mStack.get();        if (stack == null || stack.isEmpty()) {            return null;        }        Frame frame = stack.peek();        // The Android implementation of HttpURLConnection        // passes an incorrect URI to this method in some cases,        // so let getFile(URLConnection) calculate the        // correct value from URLConnection#getURL().        File file = getFile(frame);        if (file != null) {            File parent = file.getParentFile();            if (parent == null) {                logFileError(\"File has no parent directory\", file);                return null;            }            if (!parent.exists() && !parent.mkdirs()) {                logFileError(\"Unable to create parent directory\", parent);                return null;            }            if (parent.exists() && !parent.isDirectory()) {                logFileError(\"Parent is not a directory\", parent);                return null;            }            if (file.exists() && file.isDirectory()) {                logFileError(\"Destination file is a directory\", file);                return null;            }            CacheRequest cacheRequest = createCacheRequest(file, connection);            frame.setCacheRequest(cacheRequest);            // Disable CacheRequest#abort() because it is called by            // the HttpURLConnection implementation when it should not be.            // FileResponseCacheContentHandler is responsible for            // aborting the CacheRequest instead.            return new UnabortableCacheRequest(cacheRequest);        } else {            return null;        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/FileResponseCache.java", "stars": "74", "class": {"name": "FileResponseCache", "extends": "ResponseCache", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "createCacheResponse", "params": ["File"], "throws": null, "modifiers": ["private"], "return_type": "CacheResponse", "snippet": "    private CacheResponse createCacheResponse(File file) {        return new FileCacheResponse(file);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/FileResponseCache.java", "stars": "74", "class": {"name": "FileResponseCache", "extends": "ResponseCache", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "createCacheRequest", "params": ["File", "URLConnection"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "CacheRequest", "snippet": "    private CacheRequest createCacheRequest(File file, URLConnection connection)            throws IOException {        int responseCode = -1;        String responseMessage = null;        if (connection instanceof HttpURLConnection) {            HttpURLConnection http = (HttpURLConnection) connection;            responseCode = http.getResponseCode();            responseMessage = http.getResponseMessage();        } else if (Log.isLoggable(TAG, Log.WARN)) {            Class<? extends URLConnection> type = connection.getClass();            String className = type.getName();            Log.w(TAG, \"URLConnection is not an HttpURLConnection: \" + className);        }        Map<String, List<String>> responseHeaders = connection.getHeaderFields();        return new FileCacheRequest(file, responseCode, responseMessage, responseHeaders);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/FileResponseCache.java", "stars": "74", "class": {"name": "FileResponseCache", "extends": "ResponseCache", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "capture", "params": ["ContentHandler", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "ContentHandler", "snippet": "    public static ContentHandler capture(ContentHandler handler, Object cookie) {        ResponseCache responseCache = ResponseCache.getDefault();        if (responseCache instanceof FileResponseCache) {            FileResponseCache fileResponseCache = (FileResponseCache) responseCache;            return new FileResponseCacheContentHandler(handler, fileResponseCache, cookie);        } else if (responseCache == null) {            throw new IllegalStateException(\"ResponseCache not found\");        } else {            Class<? extends ResponseCache> type = responseCache.getClass();            String message = \"Installed ResponseCache is not a FileResponseCache: \" + type;            throw new IllegalStateException(message);        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/FileResponseCache.java", "stars": "74", "class": {"name": "FileResponseCache", "extends": "ResponseCache", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "sink", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "ContentHandler", "snippet": "    public static ContentHandler sink() {        return new SinkContentHandler();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/FileResponseCache.java", "stars": "74", "class": {"name": "FileResponseCache", "extends": "ResponseCache", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getContent", "params": ["URLConnection"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getContent(URLConnection connection) throws IOException {            if (connection == null) {                throw new NullPointerException();            }            Frame frame = new Frame(connection, mCookie);            Stack<Frame> stack = mFileResponseCache.mStack.get();            if (stack == null) {                stack = new Stack<Frame>();                mFileResponseCache.mStack.set(stack);            }            stack.push(frame);            try {                Object content = mContentHandler.getContent(connection);                frame.close();                return content;            } catch (IOException e) {                frame.abort();                throw e;            } catch (RuntimeException e) {                frame.abort();                throw e;            } catch (Error e) {                frame.abort();                throw e;            } finally {                stack.pop();            }        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/FileResponseCache.java", "stars": "74", "class": {"name": "FileResponseCacheContentHandler", "extends": "ContentHandler", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "setCacheRequest", "params": ["CacheRequest"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setCacheRequest(CacheRequest cacheRequest) {        \tif (cacheRequest == null) {        \t  throw new NullPointerException();        \t}            mCacheRequest = cacheRequest;        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/FileResponseCache.java", "stars": "74", "class": {"name": "Frame", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "close", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "        public void close() throws IOException {            if (SDK < GINGERBREAD) {                if (mCacheRequest != null) {                    OutputStream output = mCacheRequest.getBody();                    output.close();                }            } else {                // The platform will close the output stream            }        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/FileResponseCache.java", "stars": "74", "class": {"name": "Frame", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "abort", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void abort() {            if (mCacheRequest != null) {                mCacheRequest.abort();            }        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/FileResponseCache.java", "stars": "74", "class": {"name": "Frame", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "getConnection", "params": [], "throws": null, "modifiers": ["public"], "return_type": "URLConnection", "snippet": "        public URLConnection getConnection() {            return mConnection;        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/FileResponseCache.java", "stars": "74", "class": {"name": "Frame", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "getCookie", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getCookie() {            return mCookie;        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/FileResponseCache.java", "stars": "74", "class": {"name": "Frame", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "getBody", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "OutputStream", "snippet": "        public OutputStream getBody() throws IOException {            return mCacheRequest.getBody();        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/FileResponseCache.java", "stars": "74", "class": {"name": "UnabortableCacheRequest", "extends": "CacheRequest", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "abort", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void abort() {            // Drop all calls to abort() from the platform            // because sometimes abort() is called even            // when the request is successful.            // The FileResponseCacheContentHandler will call abort()            // on mCacheRequest directly when appropriate.        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/filecache/FileResponseCache.java", "stars": "74", "class": {"name": "UnabortableCacheRequest", "extends": "CacheRequest", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "addNode", "params": ["Node"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void addNode(final Node node) {    assert (node.getDag() == this);    this.nodes.add(node);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/dag/Dag.java", "stars": "18", "class": {"name": "Dag", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void start() {    assert (this.status == Status.READY);    changeStatus(Status.RUNNING);    for (final Node node : this.nodes) {      node.runIfAllowed();    }    // It's possible that all nodes are disabled. In this rare case the dag should be    // marked success. Otherwise it will be stuck in the the running state.    updateDagStatus();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/dag/Dag.java", "stars": "18", "class": {"name": "Dag", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "kill", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void kill() {    if (this.status.isTerminal() || this.status == Status.KILLING) {      // It is possible that a kill is issued after a dag has finished or multiple kill requests      // are received. Without this check, this method will make duplicate calls to the      // DagProcessor.      return;    }    changeStatus(Status.KILLING);    for (final Node node : this.nodes) {      node.kill();    }    updateDagStatus();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/dag/Dag.java", "stars": "18", "class": {"name": "Dag", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateDagStatus", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void updateDagStatus() {    // A dag may have nodes that are disabled. It's safer to scan all the nodes.    // Assume the overhead is minimal. If it is not the case, we can optimize later.    boolean failed = false;    for (final Node node : this.nodes) {      final Status nodeStatus = node.getStatus();      if (!nodeStatus.isTerminal()) {        return;      }      if (nodeStatus == Status.FAILURE) {        failed = true;      }    }    // Update the dag status only after all nodes have reached terminal states.    updateDagStatusInternal(failed);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/dag/Dag.java", "stars": "18", "class": {"name": "Dag", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateDagStatusInternal", "params": ["boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void updateDagStatusInternal(final boolean failed) {    if (this.status == Status.KILLING) {      /*      It's possible that some nodes have failed when the dag is killed.      Since killing a dag signals an intent from an operator, it is more important to make      the dag status reflect the result of that explict intent. e.g. if the killing is a      result of handing a job failure, users more likely want to know that someone has taken      an action rather than that a job has failed. Operators can still see the individual job      status.      */      changeStatus(Status.KILLED);    } else if (failed) {      changeStatus(Status.FAILURE);    } else {      changeStatus(Status.SUCCESS);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/dag/Dag.java", "stars": "18", "class": {"name": "Dag", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "changeStatus", "params": ["Status"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void changeStatus(final Status status) {    this.status = status;    this.dagProcessor.changeStatus(this, status);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/dag/Dag.java", "stars": "18", "class": {"name": "Dag", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    return String.format(\"dag (%s), status (%s)\", this.name, this.status);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/dag/Dag.java", "stars": "18", "class": {"name": "Dag", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": [], "return_type": "String", "snippet": "  String getName() {    return this.name;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/dag/Dag.java", "stars": "18", "class": {"name": "Dag", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": [], "return_type": "Status", "snippet": "  Status getStatus() {    return this.status;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/dag/Dag.java", "stars": "18", "class": {"name": "Dag", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStatus", "params": ["Status"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void setStatus(final Status status) {    this.status = status;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/dag/Dag.java", "stars": "18", "class": {"name": "Dag", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNodes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Node>", "snippet": "  public List<Node> getNodes() {    return this.nodes;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/dag/Dag.java", "stars": "18", "class": {"name": "Dag", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getServiceId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getServiceId() {        return serviceId;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryFilter.java", "stars": "4", "class": {"name": "DiscoveryFilter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setServiceId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setServiceId(String serviceId) {        this.serviceId = serviceId;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryFilter.java", "stars": "4", "class": {"name": "DiscoveryFilter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getServiceFilter", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getServiceFilter() {        return serviceFilter;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryFilter.java", "stars": "4", "class": {"name": "DiscoveryFilter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setServiceFilter", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setServiceFilter(String serviceFilter) {        this.serviceFilter = serviceFilter;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryFilter.java", "stars": "4", "class": {"name": "DiscoveryFilter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean equals(Object o) {        if (this == o) return true;        if (o == null || getClass() != o.getClass()) return false;        DiscoveryFilter that = (DiscoveryFilter) o;        if (serviceFilter != null ? !serviceFilter.equals(that.serviceFilter) : that.serviceFilter != null)            return false;        if (serviceId != null ? !serviceId.equals(that.serviceId) : that.serviceId != null)            return false;        return true;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryFilter.java", "stars": "4", "class": {"name": "DiscoveryFilter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int hashCode() {        int result = serviceId != null ? serviceId.hashCode() : 0;        result = 31 * result + (serviceFilter != null ? serviceFilter.hashCode() : 0);        return result;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryFilter.java", "stars": "4", "class": {"name": "DiscoveryFilter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addChildNode", "params": ["SqlNode"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addChildNode(SqlNode node){        this.nodes.add(node);    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/scripts/SqlNode.java", "stars": "13", "class": {"name": "SqlNode", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getSql", "params": ["RequestContext"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "String", "snippet": "    public abstract String getSql(RequestContext context);    /**     * \u83b7\u53d6\u5b50\u8282\u70b9SQL     */    public String executeChildren(RequestContext context){        String sql = \"\";        for (SqlNode node : nodes) {            sql += StringUtils.defaultString(node.getSql(context)) + \" \";        }        return sql;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/scripts/SqlNode.java", "stars": "13", "class": {"name": "SqlNode", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "executeChildren", "params": ["RequestContext"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String executeChildren(RequestContext context){        String sql = \"\";        for (SqlNode node : nodes) {            sql += StringUtils.defaultString(node.getSql(context)) + \" \";        }        return sql;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/scripts/SqlNode.java", "stars": "13", "class": {"name": "SqlNode", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "extractParameter", "params": ["Pattern", "String"], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> extractParameter(Pattern pattern, String sql) {        Matcher matcher = pattern.matcher(sql);        List<String> results = new ArrayList<>();        while (matcher.find()) {            results.add(matcher.group(1));        }        return results;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/scripts/SqlNode.java", "stars": "13", "class": {"name": "SqlNode", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "initializeFlipper", "params": ["Context", "ReactInstanceManager"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void initializeFlipper(Context context, ReactInstanceManager reactInstanceManager) {    if (FlipperUtils.shouldEnableFlipper(context)) {      final FlipperClient client = AndroidFlipperClient.getInstance(context);      client.addPlugin(new InspectorFlipperPlugin(context, DescriptorMapping.withDefaults()));      client.addPlugin(new ReactFlipperPlugin());      client.addPlugin(new DatabasesFlipperPlugin(context));      client.addPlugin(new SharedPreferencesFlipperPlugin(context));      client.addPlugin(CrashReporterPlugin.getInstance());      NetworkFlipperPlugin networkFlipperPlugin = new NetworkFlipperPlugin();      NetworkingModule.setCustomClientBuilder(          new NetworkingModule.CustomClientBuilder() {            @Override            public void apply(OkHttpClient.Builder builder) {              builder.addNetworkInterceptor(new FlipperOkhttpInterceptor(networkFlipperPlugin));            }          });      client.addPlugin(networkFlipperPlugin);      client.start();      // Fresco Plugin needs to ensure that ImagePipelineFactory is initialized      // Hence we run if after all native modules have been initialized      ReactContext reactContext = reactInstanceManager.getCurrentReactContext();      if (reactContext == null) {        reactInstanceManager.addReactInstanceEventListener(            new ReactInstanceManager.ReactInstanceEventListener() {              @Override              public void onReactContextInitialized(ReactContext reactContext) {                reactInstanceManager.removeReactInstanceEventListener(this);                reactContext.runOnNativeModulesQueueThread(                    new Runnable() {                      @Override                      public void run() {                        client.addPlugin(new FrescoFlipperPlugin());                      }                    });              }            });      } else {        client.addPlugin(new FrescoFlipperPlugin());      }    }  }", "url": "https://raw.githubusercontent.com/VenkatSBitra/react-native-management-app/master/android/app/src/debug/java/com/management/ReactNativeFlipper.java", "stars": "2", "class": {"name": "ReactNativeFlipper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "adapt", "params": ["File"], "throws": null, "modifiers": ["public"], "return_type": "VipType", "snippet": "    public VipType adapt(File file) {        if (file == null) return null;        if (file.isDirectory()) return null;        String fileName = file.getName();        if (fileName.startsWith(\"_\") || !fileName.endsWith(\".yml\")) return null;        FileConfiguration configuration = YamlConfiguration.loadConfiguration(file);        String identifier = fileName.toLowerCase().substring(0, fileName.length() - 4);        PrettyName prettyName = ADAPTER.adapt(configuration.getString(\"pretty_name\"), String.class, PrettyName.class);        Permissions permissions = ADAPTER.adapt(configuration.getStringList(\"permissions\").toArray(new String[0]), String[].class, Permissions.class);        Commands commands = ADAPTER.adapt(configuration.getStringList(\"commands\").toArray(new String[0]), String[].class, Commands.class);        Items items = ADAPTER.adapt(configuration.getConfigurationSection(\"items\"), MemorySection.class, Items.class);        Title title = ADAPTER.adapt(configuration.getConfigurationSection(\"title\"), MemorySection.class, Title.class);        return VipType                .builder()                .identifier(identifier)                .prettyName(prettyName)                .permissions(permissions)                .commands(commands)                .items(items)                .title(title)                .build();    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/adapter/FileToVipTypeAdapter.java", "stars": "2", "class": {"name": "FileToVipTypeAdapter", "extends": null, "implements": ["ObjectAdapter"], "modifiers": ["public"]}}, {"method_name": "formatDate", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String formatDate(final long timestamp) {    return formatDate(timestamp, \"yyyy-MM-dd HH:mm:ss\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/VelocityUtils.java", "stars": "18", "class": {"name": "VelocityUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "formatDate", "params": ["DateTime"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String formatDate(final DateTime date) {    return formatDate(date, \"yyyy-MM-dd HH:mm:ss\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/VelocityUtils.java", "stars": "18", "class": {"name": "VelocityUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "formatDate", "params": ["long", "String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String formatDate(final long timestamp, final String format) {    final DateTimeFormatter f = DateTimeFormat.forPattern(format);    return f.print(timestamp);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/VelocityUtils.java", "stars": "18", "class": {"name": "VelocityUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "formatDate", "params": ["DateTime", "String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String formatDate(final DateTime date, final String format) {    final DateTimeFormatter f = DateTimeFormat.forPattern(format);    return f.print(date);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/VelocityUtils.java", "stars": "18", "class": {"name": "VelocityUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onLoadingDrawableSet", "params": ["Drawable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onLoadingDrawableSet(Drawable imageDrawable) {\t\tif (null != imageDrawable) {\t\t\tmRotationPivotX = Math.round(imageDrawable.getIntrinsicWidth() / 2f);\t\t\tmRotationPivotY = Math.round(imageDrawable.getIntrinsicHeight() / 2f);\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/internal/RotateLoadingLayout.java", "stars": "74", "class": {"name": "RotateLoadingLayout", "extends": "LoadingLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPullImpl", "params": ["float"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void onPullImpl(float scaleOfLayout) {\t\tfloat angle;\t\tif (mRotateDrawableWhilePulling) {\t\t\tangle = scaleOfLayout * 90f;\t\t} else {\t\t\tangle = Math.max(0f, Math.min(180f, scaleOfLayout * 360f - 180f));\t\t}\t\tmHeaderImageMatrix.setRotate(angle, mRotationPivotX, mRotationPivotY);\t\tmHeaderImage.setImageMatrix(mHeaderImageMatrix);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/internal/RotateLoadingLayout.java", "stars": "74", "class": {"name": "RotateLoadingLayout", "extends": "LoadingLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "refreshingImpl", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void refreshingImpl() {\t\tmHeaderImage.startAnimation(mRotateAnimation);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/internal/RotateLoadingLayout.java", "stars": "74", "class": {"name": "RotateLoadingLayout", "extends": "LoadingLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "resetImpl", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void resetImpl() {\t\tmHeaderImage.clearAnimation();\t\tresetImageRotation();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/internal/RotateLoadingLayout.java", "stars": "74", "class": {"name": "RotateLoadingLayout", "extends": "LoadingLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "resetImageRotation", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void resetImageRotation() {\t\tif (null != mHeaderImageMatrix) {\t\t\tmHeaderImageMatrix.reset();\t\t\tmHeaderImage.setImageMatrix(mHeaderImageMatrix);\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/internal/RotateLoadingLayout.java", "stars": "74", "class": {"name": "RotateLoadingLayout", "extends": "LoadingLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "pullToRefreshImpl", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void pullToRefreshImpl() {\t\t// NO-OP\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/internal/RotateLoadingLayout.java", "stars": "74", "class": {"name": "RotateLoadingLayout", "extends": "LoadingLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "releaseToRefreshImpl", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void releaseToRefreshImpl() {\t\t// NO-OP\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/internal/RotateLoadingLayout.java", "stars": "74", "class": {"name": "RotateLoadingLayout", "extends": "LoadingLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDefaultDrawableResId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "\tprotected int getDefaultDrawableResId() {\t\treturn R.drawable.default_ptr_rotate;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/internal/RotateLoadingLayout.java", "stars": "74", "class": {"name": "RotateLoadingLayout", "extends": "LoadingLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "BleScanner", "snippet": "    public static BleScanner getInstance() {        return BleScannerHolder.sBleScanner;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/scan/BleScanner.java", "stars": "2", "class": {"name": "BleScanner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "scan", "params": ["UUID", "String", "String", "boolean", "long", "BleScanCallback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void scan(UUID[] serviceUuids, String[] names, String mac, boolean fuzzy,                     long timeOut, final BleScanCallback callback) {        startLeScan(serviceUuids, names, mac, fuzzy, false, timeOut, callback);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/scan/BleScanner.java", "stars": "2", "class": {"name": "BleScanner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "scanAndConnect", "params": ["UUID", "String", "String", "boolean", "long", "BleScanAndConnectCallback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void scanAndConnect(UUID[] serviceUuids, String[] names, String mac, boolean fuzzy,                               long timeOut, BleScanAndConnectCallback callback) {        startLeScan(serviceUuids, names, mac, fuzzy, true, timeOut, callback);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/scan/BleScanner.java", "stars": "2", "class": {"name": "BleScanner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "startLeScan", "params": ["UUID", "String", "String", "boolean", "boolean", "long", "BleScanPresenterImp"], "throws": null, "modifiers": ["synchronized", "private"], "return_type": "void", "snippet": "    private synchronized void startLeScan(UUID[] serviceUuids, String[] names, String mac, boolean fuzzy,                                          boolean needConnect, long timeOut, BleScanPresenterImp imp) {        if (mBleScanState != BleScanState.STATE_IDLE) {            BleLog.w(\"scan action already exists, complete the previous scan action first\");            if (imp != null) {                imp.onScanStarted(false);            }            return;        }        mBleScanPresenter.prepare(names, mac, fuzzy, needConnect, timeOut, imp);        boolean success = BleManager.getInstance().getBluetoothAdapter()                .startLeScan(serviceUuids, mBleScanPresenter);        mBleScanState = success ? BleScanState.STATE_SCANNING : BleScanState.STATE_IDLE;        mBleScanPresenter.notifyScanStarted(success);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/scan/BleScanner.java", "stars": "2", "class": {"name": "BleScanner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "stopLeScan", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void stopLeScan() {        BleManager.getInstance().getBluetoothAdapter().stopLeScan(mBleScanPresenter);        mBleScanState = BleScanState.STATE_IDLE;        mBleScanPresenter.notifyScanStopped();    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/scan/BleScanner.java", "stars": "2", "class": {"name": "BleScanner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getScanState", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BleScanState", "snippet": "    public BleScanState getScanState() {        return mBleScanState;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/scan/BleScanner.java", "stars": "2", "class": {"name": "BleScanner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "mostrarNumeros", "params": ["Double", "Double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void mostrarNumeros(Double numeroUno, Double numeroDos){     this.numeroUno=numeroUno;     this.numeroUno=numeroDos;           for(double a=numeroUno;numeroUno<=numeroDos;numeroUno++){             System.out.println(\"Numero:\"+numeroUno);         }    }", "url": "https://raw.githubusercontent.com/asuescun/Matematicas-Locas/master/rangoNumeros.java", "stars": "2", "class": {"name": "rangoNumeros", "extends": "numeros", "implements": null, "modifiers": ["public"]}}, {"method_name": "channelRegistered", "params": ["ChannelHandlerContext"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void channelRegistered(ChannelHandlerContext ctx) {        String ipAddress = NettyConnection.getIpAddress(ctx.channel());        IConnection connection = this.nettyServer.addConnection(new NettyConnection(ctx.channel(), ipAddress));        if(connection != null) {            ctx.channel().attr(Connection.CONNECTION_KEY).set(connection);            return;        }        ctx.channel().close();    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/communication/server/netty/connections/NettyConnectionHandler.java", "stars": "2", "class": {"name": "NettyConnectionHandler", "extends": "SimpleChannelInboundHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "channelUnregistered", "params": ["ChannelHandlerContext"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void channelUnregistered(ChannelHandlerContext ctx) {        IConnection connection = ctx.channel().attr(Connection.CONNECTION_KEY).get();        if(connection != null) this.nettyServer.removeConnection(connection);    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/communication/server/netty/connections/NettyConnectionHandler.java", "stars": "2", "class": {"name": "NettyConnectionHandler", "extends": "SimpleChannelInboundHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "channelRead0", "params": ["ChannelHandlerContext", "IMessageDataWrapper"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void channelRead0(ChannelHandlerContext ctx, IMessageDataWrapper wrapper) {        IConnection connection = ctx.channel().attr(Connection.CONNECTION_KEY).get();        if(connection == null) {            ctx.channel().close();            return;        }        try {            connection.handleEvents(this.getEventsForWrapper(wrapper));        } catch(Exception e) {            System.out.println(e.getMessage());        }    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/communication/server/netty/connections/NettyConnectionHandler.java", "stars": "2", "class": {"name": "NettyConnectionHandler", "extends": "SimpleChannelInboundHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getEventsForWrapper", "params": ["IMessageDataWrapper"], "throws": null, "modifiers": ["private"], "return_type": "List<IMessageEvent>", "snippet": "    private List<IMessageEvent> getEventsForWrapper(IMessageDataWrapper wrapper) {        if((wrapper == null) || (this.nettyServer == null)) return null;        List<IMessageEvent> events = this.nettyServer.getMessages().getEvents(wrapper.getHeader());        if((events == null) || (events.size() == 0)) return null;        IMessageParser parser = events.get(0).getParser();        if((parser == null) || !parser.flush() || !parser.parse(wrapper)) return null;        return events;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/communication/server/netty/connections/NettyConnectionHandler.java", "stars": "2", "class": {"name": "NettyConnectionHandler", "extends": "SimpleChannelInboundHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "provideXmlrpcClient", "params": [], "throws": null, "modifiers": ["public"], "return_type": "XMLRPCClient", "snippet": "    @Provides @Singleton public XMLRPCClient provideXmlrpcClient() {        try {            return new XMLRPCClient(new URL(OpenSubsProvider.API_URL), OpenSubsProvider.USER_AGENT, XMLRPCClient.FLAGS_FORWARD | XMLRPCClient.FLAGS_USE_SYSTEM_PROXY);        } catch (MalformedURLException e) {            throw new RuntimeException(\"Invalid url \" + OpenSubsProvider.API_URL, e);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/subs/open/OpenSubsModule.java", "stars": "4", "class": {"name": "OpenSubsModule", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDao", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "IBaseDao<DataSourceOwner>", "snippet": "    protected IBaseDao<DataSourceOwner> getDao() {        return dataSourceOwnerDao;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/DataSourceOwnerServiceImpl.java", "stars": "23", "class": {"name": "DataSourceOwnerServiceImpl", "extends": "AbstractGenericService", "implements": ["DataSourceOwnerService"], "modifiers": ["public"]}}, {"method_name": "getByName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "DataSourceOwner", "snippet": "    public DataSourceOwner getByName(String ownerName){        return dataSourceOwnerDao.getByName(ownerName);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/service/impl/DataSourceOwnerServiceImpl.java", "stars": "23", "class": {"name": "DataSourceOwnerServiceImpl", "extends": "AbstractGenericService", "implements": ["DataSourceOwnerService"], "modifiers": ["public"]}}, {"method_name": "refreshToken", "params": ["String", "String", "HttpItemCallback<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void refreshToken(String appid, String uid, HttpItemCallback<String> callback) {    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/data/remote/RemoteDataSource.java", "stars": "2", "class": {"name": "RemoteDataSource", "extends": null, "implements": ["IDataSource"], "modifiers": ["public"]}}, {"method_name": "feedback", "params": ["String", "File", "Callback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void feedback(String json, File file, Callback callback) {    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/data/remote/RemoteDataSource.java", "stars": "2", "class": {"name": "RemoteDataSource", "extends": null, "implements": ["IDataSource"], "modifiers": ["public"]}}, {"method_name": "testClasses", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void testClasses(String classPath) {\t\tClassNode node = getFromName(classPath);\t\tfor (MethodNode mn : node.methods)\t\t\tassertDoesNotThrow(() -> TestUtils.getFrames(node.name, mn));\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/test/java/me/coley/analysis/validation/pass/TestCustomLegalClasses.java", "stars": "12", "class": {"name": "TestCustomLegalClasses", "extends": "TestUtils", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws IOException {        //1.\u521b\u5efaObjectOutputStream\u5bf9\u8c61,\u6784\u9020\u65b9\u6cd5\u4e2d\u4f20\u9012\u5b57\u8282\u8f93\u51fa\u6d41        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(\"10_IO\\\\person.txt\"));        //2.\u4f7f\u7528ObjectOutputStream\u5bf9\u8c61\u4e2d\u7684\u65b9\u6cd5writeObject,\u628a\u5bf9\u8c61\u5199\u5165\u5230\u6587\u4ef6\u4e2d        oos.writeObject(new Person(\"\u5c0f\u7f8e\u5973\",18));        //3.\u91ca\u653e\u8d44\u6e90        oos.close();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/17.%E3%80%90%E7%BA%BF%E7%A8%8B%E3%80%81%E5%90%8C%E6%AD%A5%E3%80%91-%E7%AC%94%E8%AE%B0/21.%E3%80%90%E7%BC%93%E5%86%B2%E6%B5%81%E3%80%81%E8%BD%AC%E6%8D%A2%E6%B5%81%E3%80%81%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81%E3%80%81%E6%89%93%E5%8D%B0%E6%B5%81%E3%80%91-%E7%AC%94%E8%AE%B0/code/10_IO/src/com/itheima/demo04/ObjectStream/Demo01ObjectOutputStream.java", "stars": "2", "class": {"name": "Demo01ObjectOutputStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveToFull", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveToFull() {        systemUiVisibility = ((Activity) context).getWindow().getDecorView().getSystemUiVisibility();        CommonUtil.hideSupportActionBar(context, gsyVideoOptionBuilder.isHideActionBar(), gsyVideoOptionBuilder.isHideStatusBar());        if (gsyVideoOptionBuilder.isHideKey()) {            hideNavKey(context);        }        isFull = true;        ViewGroup viewGroup = (ViewGroup) gsyVideoPlayer.getParent();        listParams = gsyVideoPlayer.getLayoutParams();        if (viewGroup != null) {            listParent = viewGroup;            viewGroup.removeView(gsyVideoPlayer);        }        gsyVideoPlayer.setIfCurrentIsFullscreen(true);        gsyVideoPlayer.getFullscreenButton().setImageResource(gsyVideoPlayer.getShrinkImageRes());        gsyVideoPlayer.getBackButton().setVisibility(View.VISIBLE);        //\u8bbe\u7f6e\u65cb\u8f6c        orientationUtils = new OrientationUtils((Activity) context, gsyVideoPlayer);        orientationUtils.setEnable(gsyVideoOptionBuilder.isRotateViewAuto());        gsyVideoPlayer.getBackButton().setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                resolveMaterialToNormal(gsyVideoPlayer);            }        });        if (gsyVideoOptionBuilder.isShowFullAnimation()) {            if (fullViewContainer instanceof FrameLayout) {                //\u76ee\u524d\u53ea\u505a\u4e86frameLoayout\u7684\u5224\u65ad                resolveMaterialAnimation();            } else {                resolveFullAdd();            }        } else {            resolveFullAdd();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "SmallVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveFullAdd", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveFullAdd() {        if (gsyVideoOptionBuilder.isShowFullAnimation()) {            if (fullViewContainer != null) {                fullViewContainer.setBackgroundColor(Color.BLACK);            }        }        resolveChangeFirstLogic(0);        if (fullViewContainer != null) {            fullViewContainer.addView(gsyVideoPlayer);        } else {            windowViewContainer.addView(gsyVideoPlayer);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "SmallVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveMaterialAnimation", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveMaterialAnimation() {        listItemRect = new int[2];        listItemSize = new int[2];        saveLocationStatus(context, gsyVideoOptionBuilder.isHideActionBar(), gsyVideoOptionBuilder.isHideStatusBar());        FrameLayout.LayoutParams lpParent = new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);        FrameLayout frameLayout = new FrameLayout(context);        frameLayout.setBackgroundColor(Color.BLACK);        FrameLayout.LayoutParams lp = new FrameLayout.LayoutParams(listItemSize[0], listItemSize[1]);        lp.setMargins(listItemRect[0], listItemRect[1], 0, 0);        frameLayout.addView(gsyVideoPlayer, lp);        if (fullViewContainer != null) {            fullViewContainer.addView(frameLayout, lpParent);        } else {            windowViewContainer.addView(frameLayout, lpParent);        }        handler.postDelayed(new Runnable() {            @Override            public void run() {                //\u5f00\u59cb\u52a8\u753b                if (fullViewContainer != null) {                    TransitionManager.beginDelayedTransition(fullViewContainer);                } else {                    TransitionManager.beginDelayedTransition(windowViewContainer);                }                resolveMaterialFullVideoShow(gsyVideoPlayer);                resolveChangeFirstLogic(600);            }        }, 300);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "SmallVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveMaterialFullVideoShow", "params": ["GSYBaseVideoPlayer"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveMaterialFullVideoShow(GSYBaseVideoPlayer gsyVideoPlayer) {        FrameLayout.LayoutParams lp = (FrameLayout.LayoutParams) gsyVideoPlayer.getLayoutParams();        lp.setMargins(0, 0, 0, 0);        lp.height = ViewGroup.LayoutParams.MATCH_PARENT;        lp.width = ViewGroup.LayoutParams.MATCH_PARENT;        lp.gravity = Gravity.CENTER;        gsyVideoPlayer.setLayoutParams(lp);        gsyVideoPlayer.setIfCurrentIsFullscreen(true);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "SmallVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveToNormal", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveToNormal() {        int delay = orientationUtils.backToProtVideo();        if (!gsyVideoOptionBuilder.isShowFullAnimation()) {            delay = 0;        }        handler.postDelayed(new Runnable() {            @Override            public void run() {                isFull = false;                removeWindowContainer();                if (fullViewContainer != null) {                    fullViewContainer.removeAllViews();                }                if (gsyVideoPlayer.getParent() != null) {                    ((ViewGroup) gsyVideoPlayer.getParent()).removeView(gsyVideoPlayer);                }                orientationUtils.setEnable(false);                gsyVideoPlayer.setIfCurrentIsFullscreen(false);                if (fullViewContainer != null) {                    fullViewContainer.setBackgroundColor(Color.TRANSPARENT);                }                listParent.addView(gsyVideoPlayer, listParams);                gsyVideoPlayer.getFullscreenButton().setImageResource(gsyVideoPlayer.getEnlargeImageRes());                gsyVideoPlayer.getBackButton().setVisibility(View.GONE);                gsyVideoPlayer.setIfCurrentIsFullscreen(false);                if (gsyVideoOptionBuilder.getVideoAllCallBack() != null) {                    Debuger.printfLog(\"onQuitFullscreen\");                    gsyVideoOptionBuilder.getVideoAllCallBack().onQuitFullscreen(gsyVideoOptionBuilder.getUrl(), gsyVideoOptionBuilder.getVideoTitle(), gsyVideoPlayer);                }                if (gsyVideoOptionBuilder.isHideKey()) {                    showNavKey(context, systemUiVisibility);                }                CommonUtil.showSupportActionBar(context, gsyVideoOptionBuilder.isHideActionBar(), gsyVideoOptionBuilder.isHideStatusBar());            }        }, delay);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "SmallVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveMaterialToNormal", "params": ["GSYVideoPlayer"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveMaterialToNormal(final GSYVideoPlayer gsyVideoPlayer) {        if (gsyVideoOptionBuilder.isShowFullAnimation() && fullViewContainer instanceof FrameLayout) {            int delay = orientationUtils.backToProtVideo();            handler.postDelayed(new Runnable() {                @Override                public void run() {                    TransitionManager.beginDelayedTransition(fullViewContainer);                    FrameLayout.LayoutParams lp = (FrameLayout.LayoutParams) gsyVideoPlayer.getLayoutParams();                    lp.setMargins(listItemRect[0], listItemRect[1], 0, 0);                    lp.width = listItemSize[0];                    lp.height = listItemSize[1];                    //\u6ce8\u610f\u914d\u7f6e\u56de\u6765\uff0c\u4e0d\u7136\u52a8\u753b\u6548\u679c\u4f1a\u4e0d\u5bf9                    lp.gravity = Gravity.NO_GRAVITY;                    gsyVideoPlayer.setLayoutParams(lp);                    handler.postDelayed(new Runnable() {                        @Override                        public void run() {                            resolveToNormal();                        }                    }, 400);                }            }, delay);        } else {            resolveToNormal();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "SmallVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveChangeFirstLogic", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveChangeFirstLogic(int time) {        if (gsyVideoOptionBuilder.isLockLand()) {            if (time > 0) {                handler.postDelayed(new Runnable() {                    @Override                    public void run() {                        if (orientationUtils.getIsLand() != 1) {                            if (fullViewContainer != null) {                                fullViewContainer.setBackgroundColor(Color.BLACK);                            }                            orientationUtils.resolveByClick();                        }                    }                }, time);            } else {                if (orientationUtils.getIsLand() != 1) {                    if (fullViewContainer != null) {                        fullViewContainer.setBackgroundColor(Color.BLACK);                    }                    orientationUtils.resolveByClick();                }            }        }        gsyVideoPlayer.setIfCurrentIsFullscreen(true);        if (gsyVideoOptionBuilder.getVideoAllCallBack() != null) {            Debuger.printfLog(\"onEnterFullscreen\");            gsyVideoOptionBuilder.getVideoAllCallBack().onEnterFullscreen(gsyVideoOptionBuilder.getUrl(), gsyVideoOptionBuilder.getVideoTitle(), gsyVideoPlayer);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "SmallVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "saveLocationStatus", "params": ["Context", "boolean", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void saveLocationStatus(Context context, boolean statusBar, boolean actionBar) {        listParent.getLocationOnScreen(listItemRect);        int statusBarH = getStatusBarHeight(context);        int actionBerH = getActionBarHeight((Activity) context);        if (statusBar) {            listItemRect[1] = listItemRect[1] - statusBarH;        }        if (actionBar) {            listItemRect[1] = listItemRect[1] - actionBerH;        }        listItemSize[0] = listParent.getWidth();        listItemSize[1] = listParent.getHeight();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "SmallVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isPlayView", "params": ["int", "String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isPlayView(int position, String tag) {        return playPosition == position && TAG.equals(tag);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "SmallVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isCurrentViewPlaying", "params": ["int", "String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isCurrentViewPlaying(int position, String tag) {        return isPlayView(position, tag);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "SmallVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeWindowContainer", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean removeWindowContainer() {        if (windowViewContainer != null && windowViewContainer.indexOfChild(gsyVideoPlayer) != -1) {            windowViewContainer.removeView(gsyVideoPlayer);            return true;        }        return false;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "SmallVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addVideoPlayer", "params": ["int", "View", "String", "ViewGroup", "View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addVideoPlayer(final int position, View imgView, String tag,                               ViewGroup container, View playBtn) {        container.removeAllViews();        if (isCurrentViewPlaying(position, tag)) {            if (!isFull) {                ViewGroup viewGroup = (ViewGroup) gsyVideoPlayer.getParent();                if (viewGroup != null)                    viewGroup.removeAllViews();                container.addView(gsyVideoPlayer);                playBtn.setVisibility(View.INVISIBLE);            }        } else {            playBtn.setVisibility(View.VISIBLE);            container.removeAllViews();   //\u589e\u52a0\u5c01\u9762            container.addView(imgView);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "SmallVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPlayPositionAndTag", "params": ["int", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPlayPositionAndTag(int playPosition, String tag) {        this.playPosition = playPosition;        this.TAG = tag;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "SmallVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "startPlay", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void startPlay() {        if (isSmall()) {            smallVideoToNormal();        }        gsyVideoPlayer.release();        if (gsyVideoOptionBuilder == null) {            throw new NullPointerException(\"gsyVideoOptionBuilder can't be null\");        }        gsyVideoOptionBuilder.build(gsyVideoPlayer);        //\u589e\u52a0title        if (gsyVideoPlayer.getTitleTextView() != null) {            gsyVideoPlayer.getTitleTextView().setVisibility(View.GONE);        }        //\u8bbe\u7f6e\u8fd4\u56de\u952e        if (gsyVideoPlayer.getBackButton() != null) {            gsyVideoPlayer.getBackButton().setVisibility(View.GONE);        }        //\u8bbe\u7f6e\u5168\u5c4f\u6309\u952e\u529f\u80fd        if (gsyVideoPlayer.getFullscreenButton() != null) {            gsyVideoPlayer.getFullscreenButton().setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    doFullBtnLogic();                }            });        }        gsyVideoPlayer.startPlayLogic();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "SmallVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "doFullBtnLogic", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void doFullBtnLogic() {        if (!isFull) {            resolveToFull();        } else {            resolveMaterialToNormal(gsyVideoPlayer);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "SmallVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "backFromFull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean backFromFull() {        boolean isFull = false;        if (fullViewContainer != null && fullViewContainer.getChildCount() > 0) {            isFull = true;            resolveMaterialToNormal(gsyVideoPlayer);        } else if (windowViewContainer != null && windowViewContainer.indexOfChild(gsyVideoPlayer) != -1) {            isFull = true;            resolveMaterialToNormal(gsyVideoPlayer);        }        return isFull;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "SmallVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "releaseVideoPlayer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void releaseVideoPlayer() {        removeWindowContainer();        ViewGroup viewGroup = (ViewGroup) gsyVideoPlayer.getParent();        if (viewGroup != null)            viewGroup.removeAllViews();        playPosition = -1;        TAG = \"NULL\";        if (orientationUtils != null)            orientationUtils.releaseListener();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "SmallVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "showSmallVideo", "params": ["Point", "boolean", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void showSmallVideo(Point size, final boolean actionBar, final boolean statusBar) {        if (gsyVideoPlayer.getCurrentState() == GSYVideoPlayer.CURRENT_STATE_PLAYING) {            gsyVideoPlayer.showSmallVideo(size, actionBar, statusBar);            isSmall = true;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "SmallVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "smallVideoToNormal", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void smallVideoToNormal() {        isSmall = false;        gsyVideoPlayer.hideSmallVideo();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "SmallVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFullViewContainer", "params": ["ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFullViewContainer(ViewGroup fullViewContainer) {        this.fullViewContainer = fullViewContainer;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "SmallVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isFull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isFull() {        return isFull;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "SmallVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setGsyVideoOptionBuilder", "params": ["GSYSmallVideoHelperBuilder"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGsyVideoOptionBuilder(GSYSmallVideoHelperBuilder gsyVideoOptionBuilder) {        this.gsyVideoOptionBuilder = gsyVideoOptionBuilder;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "SmallVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGsyVideoOptionBuilder", "params": [], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder getGsyVideoOptionBuilder() {        return gsyVideoOptionBuilder;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "SmallVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPlayPosition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getPlayPosition() {        return playPosition;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "SmallVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPlayTAG", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPlayTAG() {        return TAG;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "SmallVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isSmall", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isSmall() {        return isSmall;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "SmallVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGsyVideoPlayer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "StandardGSYVideoPlayer", "snippet": "    public StandardGSYVideoPlayer getGsyVideoPlayer() {        return gsyVideoPlayer;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "SmallVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isHideActionBar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isHideActionBar() {            return mHideActionBar;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setHideActionBar", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "GSYSmallVideoHelperBuilder", "snippet": "        public GSYSmallVideoHelperBuilder setHideActionBar(boolean hideActionBar) {            this.mHideActionBar = hideActionBar;            return this;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isHideStatusBar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isHideStatusBar() {            return mHideStatusBar;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setHideStatusBar", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "GSYSmallVideoHelperBuilder", "snippet": "        public GSYSmallVideoHelperBuilder setHideStatusBar(boolean hideStatusBar) {            this.mHideStatusBar = hideStatusBar;            return this;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getShrinkImageRes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getShrinkImageRes() {            return mShrinkImageRes;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getEnlargeImageRes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getEnlargeImageRes() {            return mEnlargeImageRes;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getPlayPosition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getPlayPosition() {            return mPlayPosition;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDialogProgressHighLightColor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getDialogProgressHighLightColor() {            return mDialogProgressHighLightColor;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDialogProgressNormalColor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getDialogProgressNormalColor() {            return mDialogProgressNormalColor;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDismissControlTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getDismissControlTime() {            return mDismissControlTime;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSeekOnStart", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "        public long getSeekOnStart() {            return mSeekOnStart;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSeekRatio", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "        public float getSeekRatio() {            return mSeekRatio;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSpeed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "        public float getSpeed() {            return mSpeed;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isHideKey", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isHideKey() {            return mHideKey;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isShowFullAnimation", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isShowFullAnimation() {            return mShowFullAnimation;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isNeedShowWifiTip", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isNeedShowWifiTip() {            return mNeedShowWifiTip;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isRotateViewAuto", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isRotateViewAuto() {            return mRotateViewAuto;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isLockLand", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isLockLand() {            return mLockLand;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isLooping", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isLooping() {            return mLooping;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isIsTouchWiget", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isIsTouchWiget() {            return mIsTouchWiget;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isIsTouchWigetFull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isIsTouchWigetFull() {            return mIsTouchWigetFull;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isShowPauseCover", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isShowPauseCover() {            return mShowPauseCover;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isRotateWithSystem", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isRotateWithSystem() {            return mRotateWithSystem;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isCacheWithPlay", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isCacheWithPlay() {            return mCacheWithPlay;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isNeedLockFull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isNeedLockFull() {            return mNeedLockFull;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isThumbPlay", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isThumbPlay() {            return mThumbPlay;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isSounchTouch", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isSounchTouch() {            return mSounchTouch;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isSetUpLazy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isSetUpLazy() {            return mSetUpLazy;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getPlayTag", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getPlayTag() {            return mPlayTag;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getUrl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getUrl() {            return mUrl;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getVideoTitle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getVideoTitle() {            return mVideoTitle;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getCachePath", "params": [], "throws": null, "modifiers": ["public"], "return_type": "File", "snippet": "        public File getCachePath() {            return mCachePath;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getMapHeadData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,String>", "snippet": "        public Map<String, String> getMapHeadData() {            return mMapHeadData;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getVideoAllCallBack", "params": [], "throws": null, "modifiers": ["public"], "return_type": "VideoAllCallBack", "snippet": "        public VideoAllCallBack getVideoAllCallBack() {            return mVideoAllCallBack;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getLockClickListener", "params": [], "throws": null, "modifiers": ["public"], "return_type": "LockClickListener", "snippet": "        public LockClickListener getLockClickListener() {            return mLockClickListener;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getThumbImageView", "params": [], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "        public View getThumbImageView() {            return mThumbImageView;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getBottomProgressDrawable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Drawable", "snippet": "        public Drawable getBottomProgressDrawable() {            return mBottomProgressDrawable;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getBottomShowProgressDrawable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Drawable", "snippet": "        public Drawable getBottomShowProgressDrawable() {            return mBottomShowProgressDrawable;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getBottomShowProgressThumbDrawable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Drawable", "snippet": "        public Drawable getBottomShowProgressThumbDrawable() {            return mBottomShowProgressThumbDrawable;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getVolumeProgressDrawable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Drawable", "snippet": "        public Drawable getVolumeProgressDrawable() {            return mVolumeProgressDrawable;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDialogProgressBarDrawable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Drawable", "snippet": "        public Drawable getDialogProgressBarDrawable() {            return mDialogProgressBarDrawable;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getEffectFilter", "params": [], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoGLView", "snippet": "        public GSYVideoGLView.ShaderInterface getEffectFilter() {            return mEffectFilter;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getGSYVideoProgressListener", "params": [], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoProgressListener", "snippet": "        public GSYVideoProgressListener getGSYVideoProgressListener() {            return mGSYVideoProgressListener;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/SmallVideoHelper.java", "stars": "2", "class": {"name": "GSYSmallVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getId() {    return id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/manyanno/AnnoPostTag.java", "stars": "15", "class": {"name": "AnnoPostTag", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getName() {    return name;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/manyanno/AnnoPostTag.java", "stars": "15", "class": {"name": "AnnoPostTag", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseFile", "params": ["String", "String"], "throws": ["FatalParsingException"], "modifiers": ["public"], "return_type": "TimedTextObject", "snippet": "    public TimedTextObject parseFile(String fileName, String[] inputString) throws FatalParsingException {        TimedTextObject tto = new TimedTextObject();        Caption caption = new Caption();        int captionNumber = 1;        boolean allGood;        //the file name is saved        tto.fileName = fileName;        int lineCounter = 0;        int stringIndex = 0;        String line;        try {            line = getLine(inputString, stringIndex++);            while (line != null && stringIndex < inputString.length) {                line = line.trim();                lineCounter++;                //if its a blank line, ignore it, otherwise...                if (!line.isEmpty()) {                    allGood = false;                    //the first thing should be an increasing number                    try {                        int num = Integer.parseInt(line);                        if (num != captionNumber)                            throw new Exception();                        else {                            captionNumber++;                            allGood = true;                        }                    } catch (Exception e) {                        tto.warnings += captionNumber + \" expected at line \" + lineCounter;                        tto.warnings += \"\\n skipping to next line\\n\\n\";                    }                    if (allGood) {                        //we go to next line, here the begin and end time should be found                        try {                            lineCounter++;                            line = getLine(inputString, stringIndex++).trim();                            String start = line.substring(0, 12);                            String end = line.substring(line.length() - 12, line.length());                            Time time = new Time(\"hh:mm:ss.ms\", start);                            caption.start = time;                            time = new Time(\"hh:mm:ss.ms\", end);                            caption.end = time;                        } catch (Exception e) {                            tto.warnings += \"incorrect time format at line \" + lineCounter;                            allGood = false;                        }                    }                    if (allGood) {                        //we go to next line where the caption text starts                        lineCounter++;                        line = getLine(inputString, stringIndex++).trim();                        StringBuilder text = new StringBuilder();                        while (!line.isEmpty() && stringIndex < inputString.length) {                            text.append(line).append(\"<br />\");                            line = getLine(inputString, stringIndex++).trim();                            lineCounter++;                        }                        caption.content = text.toString();                        int key = caption.start.mseconds;                        //in case the key is already there, we increase it by a millisecond, since no duplicates are allowed                        while (tto.captions.containsKey(key)) key++;                        if (key != caption.start.mseconds)                            tto.warnings += \"caption with same start time found...\\n\\n\";                        //we add the caption.                        tto.captions.put(key, caption);                    }                    //we go to next blank                    while (!line.isEmpty() && stringIndex < inputString.length) {                        line = getLine(inputString, stringIndex++).trim();                        lineCounter++;                    }                    caption = new Caption();                }                if (stringIndex < inputString.length) {                    line = getLine(inputString, stringIndex++);                }            }        } catch (NullPointerException e) {            tto.warnings += \"unexpected end of file, maybe last caption is not complete.\\n\\n\";        }        tto.built = true;        return tto;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/subs/FormatVTT.java", "stars": "4", "class": {"name": "FormatVTT", "extends": "TimedTextFileFormat", "implements": null, "modifiers": ["public"]}}, {"method_name": "toFile", "params": ["TimedTextObject"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String[] toFile(TimedTextObject tto) {        //first we check if the TimedTextObject had been built, otherwise...        if (!tto.built)            return null;        //we will write the lines in an ArrayList,        int index = 0;        //the minimum size of the file is 4*number of captions, so we'll take some extra space.        ArrayList<String> file = new ArrayList<>(5 * tto.captions.size());        //we iterate over our captions collection, they are ordered since they come from a TreeMap        Collection<Caption> c = tto.captions.values();        Iterator<Caption> itr = c.iterator();        int captionNumber = 1;        file.add(\"WEBVTT\");        file.add(\"\");        index += 2;        while (itr.hasNext()) {            //new caption            Caption current = itr.next();            //number is written            file.add(index++, \"\" + captionNumber++);            //we check for offset value:            if (tto.offset != 0) {                current.start.mseconds += tto.offset;                current.end.mseconds += tto.offset;            }            //time is written            file.add(index++, current.start.getTime(\"hh:mm:ss.ms\") + \" --> \" + current.end.getTime(\"hh:mm:ss.ms\") + \" line:90%\");            //offset is undone            if (tto.offset != 0) {                current.start.mseconds -= tto.offset;                current.end.mseconds -= tto.offset;            }            //text is added            String[] lines = cleanTextForVTT(current);            int i = 0;            while (i < lines.length)                file.add(index++, \"\" + lines[i++]);            //we add the next blank line            file.add(index++, \"\");        }        return file.toArray(new String[file.size()]);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/subs/FormatVTT.java", "stars": "4", "class": {"name": "FormatVTT", "extends": "TimedTextFileFormat", "implements": null, "modifiers": ["public"]}}, {"method_name": "cleanTextForVTT", "params": ["Caption"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String[] cleanTextForVTT(Caption current) {        String[] lines;        String text = current.content;        //add line breaks        lines = text.split(\"<br />\");        //clean XML        for (int i = 0; i < lines.length; i++) {            //this will destroy all remaining XML tags            lines[i] = lines[i].replaceAll(\"<.*?>\", \"\");        }        return lines;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/subs/FormatVTT.java", "stars": "4", "class": {"name": "FormatVTT", "extends": "TimedTextFileFormat", "implements": null, "modifiers": ["public"]}}, {"method_name": "applyIncludes", "params": ["Node"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void applyIncludes(Node source) {    Properties variablesContext = new Properties();    Properties configurationVariables = configuration.getVariables();    Optional.ofNullable(configurationVariables).ifPresent(variablesContext::putAll);    applyIncludes(source, variablesContext, false);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/xml/XMLIncludeTransformer.java", "stars": "15", "class": {"name": "XMLIncludeTransformer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "applyIncludes", "params": ["Node", "Properties", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void applyIncludes(Node source, final Properties variablesContext, boolean included) {    if (source.getNodeName().equals(\"include\")) {      Node toInclude = findSqlFragment(getStringAttribute(source, \"refid\"), variablesContext);      Properties toIncludeContext = getVariablesContext(source, variablesContext);      applyIncludes(toInclude, toIncludeContext, true);      if (toInclude.getOwnerDocument() != source.getOwnerDocument()) {        toInclude = source.getOwnerDocument().importNode(toInclude, true);      }      source.getParentNode().replaceChild(toInclude, source);      while (toInclude.hasChildNodes()) {        toInclude.getParentNode().insertBefore(toInclude.getFirstChild(), toInclude);      }      toInclude.getParentNode().removeChild(toInclude);    } else if (source.getNodeType() == Node.ELEMENT_NODE) {      if (included && !variablesContext.isEmpty()) {        // replace variables in attribute values        NamedNodeMap attributes = source.getAttributes();        for (int i = 0; i < attributes.getLength(); i++) {          Node attr = attributes.item(i);          attr.setNodeValue(PropertyParser.parse(attr.getNodeValue(), variablesContext));        }      }      NodeList children = source.getChildNodes();      for (int i = 0; i < children.getLength(); i++) {        applyIncludes(children.item(i), variablesContext, included);      }    } else if (included && (source.getNodeType() == Node.TEXT_NODE || source.getNodeType() == Node.CDATA_SECTION_NODE)        && !variablesContext.isEmpty()) {      // replace variables in text node      source.setNodeValue(PropertyParser.parse(source.getNodeValue(), variablesContext));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/xml/XMLIncludeTransformer.java", "stars": "15", "class": {"name": "XMLIncludeTransformer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findSqlFragment", "params": ["String", "Properties"], "throws": null, "modifiers": ["private"], "return_type": "Node", "snippet": "  private Node findSqlFragment(String refid, Properties variables) {    refid = PropertyParser.parse(refid, variables);    refid = builderAssistant.applyCurrentNamespace(refid, true);    try {      XNode nodeToInclude = configuration.getSqlFragments().get(refid);      return nodeToInclude.getNode().cloneNode(true);    } catch (IllegalArgumentException e) {      throw new IncompleteElementException(\"Could not find SQL statement to include with refid '\" + refid + \"'\", e);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/xml/XMLIncludeTransformer.java", "stars": "15", "class": {"name": "XMLIncludeTransformer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStringAttribute", "params": ["Node", "String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String getStringAttribute(Node node, String name) {    return node.getAttributes().getNamedItem(name).getNodeValue();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/xml/XMLIncludeTransformer.java", "stars": "15", "class": {"name": "XMLIncludeTransformer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getVariablesContext", "params": ["Node", "Properties"], "throws": null, "modifiers": ["private"], "return_type": "Properties", "snippet": "  private Properties getVariablesContext(Node node, Properties inheritedVariablesContext) {    Map<String, String> declaredProperties = null;    NodeList children = node.getChildNodes();    for (int i = 0; i < children.getLength(); i++) {      Node n = children.item(i);      if (n.getNodeType() == Node.ELEMENT_NODE) {        String name = getStringAttribute(n, \"name\");        // Replace variables inside        String value = PropertyParser.parse(getStringAttribute(n, \"value\"), inheritedVariablesContext);        if (declaredProperties == null) {          declaredProperties = new HashMap<>();        }        if (declaredProperties.put(name, value) != null) {          throw new BuilderException(\"Variable \" + name + \" defined twice in the same include definition\");        }      }    }    if (declaredProperties == null) {      return inheritedVariablesContext;    } else {      Properties newProperties = new Properties();      newProperties.putAll(inheritedVariablesContext);      newProperties.putAll(declaredProperties);      return newProperties;    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/xml/XMLIncludeTransformer.java", "stars": "15", "class": {"name": "XMLIncludeTransformer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getApi", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getApi() {        return \"user/logout\";    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/request/LogoutApi.java", "stars": "1", "class": {"name": "LogoutApi", "extends": null, "implements": ["IRequestApi"], "modifiers": ["public"]}}, {"method_name": "create", "params": ["Class<T>"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public <T> T create(Class<T> type) {    return super.<T> create(type);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/ExampleObjectFactory.java", "stars": "15", "class": {"name": "ExampleObjectFactory", "extends": "DefaultObjectFactory", "implements": null, "modifiers": ["public"]}}, {"method_name": "create", "params": ["Class<T>", "List<Class>", "List<Object>"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public <T> T create(Class<T> type, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {    return super.<T> create(type, constructorArgTypes, constructorArgs);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/ExampleObjectFactory.java", "stars": "15", "class": {"name": "ExampleObjectFactory", "extends": "DefaultObjectFactory", "implements": null, "modifiers": ["public"]}}, {"method_name": "setProperties", "params": ["Properties"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setProperties(Properties properties) {    super.setProperties(properties);    this.properties = properties;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/ExampleObjectFactory.java", "stars": "15", "class": {"name": "ExampleObjectFactory", "extends": "DefaultObjectFactory", "implements": null, "modifiers": ["public"]}}, {"method_name": "getProperties", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Properties", "snippet": "  public Properties getProperties() {    return properties;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/ExampleObjectFactory.java", "stars": "15", "class": {"name": "ExampleObjectFactory", "extends": "DefaultObjectFactory", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args)\t{\t\tScanner in = new \t\t\t\tScanner(System.in);\t\t\t\tSystem.out.print(\"How many numbers do you need draw? \");\t\tint k = in.nextInt();\t\t\t\tSystem.out.print(\"Wwhat is the highest number you can draw? \");\t\tint n = in.nextInt();\t\t\t\t//fill an array with number 1 2 3 . . .n\t\tint[] numbers = new int[n];\t\tfor (int i = 0; i < numbers.length; i++)\t\t\tnumbers[i] = i + 1;\t\t\t\t//draw k numbers and put them into a second array\t\tint[] result = new int[k];\t\tfor (int i = 0; i < result.length; i++)\t\t{\t\t\t//make a random index between 0 ang n-1\t\t\tint r = (int)(Math.random() * n);\t\t\t\t\t\t//pick the element at the random location\t\t\tresult[i] = numbers[r];\t\t\t\t\t\t//move the last element into the random location\t\t\tnumbers[r] = numbers[n - 1];\t\t\tn--;\t\t}\t\t\t\t//print the sorted array\t\tArrays.parallelSort(result);\t\tSystem.out.println(\"Bet the following combination. It'll make you rich!\");\t\tfor (int r : result)\t\t\tSystem.out.println(r);\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/ray/Shuzupaixu.java", "stars": "2", "class": {"name": "Shuzupaixu", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onDiscoveryFailed", "params": ["DiscoveryManager", "ServiceCommandError"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDiscoveryFailed(DiscoveryManager manager, ServiceCommandError error) {        Util.runOnUI(new Runnable () {            @Override            public void run() {                pickerAdapter.clear();            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/DevicePickerListView.java", "stars": "4", "class": {"name": "DevicePickerListView", "extends": "ListView", "implements": ["DiscoveryManagerListener"], "modifiers": ["public"]}}, {"method_name": "onDeviceAdded", "params": ["DiscoveryManager", "ConnectableDevice"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDeviceAdded(DiscoveryManager manager, final ConnectableDevice device) {        Util.runOnUI(new Runnable () {            @Override            public void run() {                int index = -1;                for (int i = 0; i < pickerAdapter.getCount(); i++) {                    ConnectableDevice d = pickerAdapter.getItem(i);                    String newDeviceName = device.getFriendlyName();                    String dName = d.getFriendlyName();                    if (newDeviceName == null) {                        newDeviceName = device.getModelName();                    }                    if (dName == null) {                        dName = d.getModelName();                    }                    if (d.getIpAddress().equals(device.getIpAddress())) {                        pickerAdapter.remove(d);                        pickerAdapter.insert(device, i);                        return;                    }                    if (newDeviceName.compareToIgnoreCase(dName) < 0) {                        index = i;                        pickerAdapter.insert(device, index);                        break;                    }                }                if (index == -1)                    pickerAdapter.add(device);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/DevicePickerListView.java", "stars": "4", "class": {"name": "DevicePickerListView", "extends": "ListView", "implements": ["DiscoveryManagerListener"], "modifiers": ["public"]}}, {"method_name": "onDeviceUpdated", "params": ["DiscoveryManager", "ConnectableDevice"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDeviceUpdated(DiscoveryManager manager, final ConnectableDevice device) {        Util.runOnUI(new Runnable () {            @Override            public void run() {                pickerAdapter.notifyDataSetChanged();            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/DevicePickerListView.java", "stars": "4", "class": {"name": "DevicePickerListView", "extends": "ListView", "implements": ["DiscoveryManagerListener"], "modifiers": ["public"]}}, {"method_name": "onDeviceRemoved", "params": ["DiscoveryManager", "ConnectableDevice"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDeviceRemoved(DiscoveryManager manager, final ConnectableDevice device) {        Util.runOnUI(new Runnable () {            @Override            public void run() {                pickerAdapter.remove(device);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/DevicePickerListView.java", "stars": "4", "class": {"name": "DevicePickerListView", "extends": "ListView", "implements": ["DiscoveryManagerListener"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) \t{\t\tSpringApplication.run(UserRegistration1Application.class, args);\t}", "url": "https://raw.githubusercontent.com/aadeeshjain/User-Registration-Login-SpringBoot/master/UserRegistration1/src/main/java/io/aadeesh/UserRegistration1Application.java", "stars": "1", "class": {"name": "UserRegistration1Application", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getConfiguration", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Configuration", "snippet": "  public Configuration getConfiguration() {    return configuration;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/BaseBuilder.java", "stars": "15", "class": {"name": "BaseBuilder", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "parseExpression", "params": ["String", "String"], "throws": null, "modifiers": ["protected"], "return_type": "Pattern", "snippet": "  protected Pattern parseExpression(String regex, String defaultValue) {    return Pattern.compile(regex == null ? defaultValue : regex);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/BaseBuilder.java", "stars": "15", "class": {"name": "BaseBuilder", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "booleanValueOf", "params": ["String", "Boolean"], "throws": null, "modifiers": ["protected"], "return_type": "Boolean", "snippet": "  protected Boolean booleanValueOf(String value, Boolean defaultValue) {    return value == null ? defaultValue : Boolean.valueOf(value);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/BaseBuilder.java", "stars": "15", "class": {"name": "BaseBuilder", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "integerValueOf", "params": ["String", "Integer"], "throws": null, "modifiers": ["protected"], "return_type": "Integer", "snippet": "  protected Integer integerValueOf(String value, Integer defaultValue) {    return value == null ? defaultValue : Integer.valueOf(value);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/BaseBuilder.java", "stars": "15", "class": {"name": "BaseBuilder", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "stringSetValueOf", "params": ["String", "String"], "throws": null, "modifiers": ["protected"], "return_type": "Set<String>", "snippet": "  protected Set<String> stringSetValueOf(String value, String defaultValue) {    value = value == null ? defaultValue : value;    return new HashSet<>(Arrays.asList(value.split(\",\")));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/BaseBuilder.java", "stars": "15", "class": {"name": "BaseBuilder", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "resolveJdbcType", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "JdbcType", "snippet": "  protected JdbcType resolveJdbcType(String alias) {    if (alias == null) {      return null;    }    try {      return JdbcType.valueOf(alias);    } catch (IllegalArgumentException e) {      throw new BuilderException(\"Error resolving JdbcType. Cause: \" + e, e);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/BaseBuilder.java", "stars": "15", "class": {"name": "BaseBuilder", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "resolveResultSetType", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "ResultSetType", "snippet": "  protected ResultSetType resolveResultSetType(String alias) {    if (alias == null) {      return null;    }    try {      return ResultSetType.valueOf(alias);    } catch (IllegalArgumentException e) {      throw new BuilderException(\"Error resolving ResultSetType. Cause: \" + e, e);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/BaseBuilder.java", "stars": "15", "class": {"name": "BaseBuilder", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "resolveParameterMode", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "ParameterMode", "snippet": "  protected ParameterMode resolveParameterMode(String alias) {    if (alias == null) {      return null;    }    try {      return ParameterMode.valueOf(alias);    } catch (IllegalArgumentException e) {      throw new BuilderException(\"Error resolving ParameterMode. Cause: \" + e, e);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/BaseBuilder.java", "stars": "15", "class": {"name": "BaseBuilder", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "createInstance", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "Object", "snippet": "  protected Object createInstance(String alias) {    Class<?> clazz = resolveClass(alias);    if (clazz == null) {      return null;    }    try {      return clazz.getDeclaredConstructor().newInstance();    } catch (Exception e) {      throw new BuilderException(\"Error creating instance. Cause: \" + e, e);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/BaseBuilder.java", "stars": "15", "class": {"name": "BaseBuilder", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "resolveClass", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "Class<T>", "snippet": "  protected <T> Class<? extends T> resolveClass(String alias) {    if (alias == null) {      return null;    }    try {      return resolveAlias(alias);    } catch (Exception e) {      throw new BuilderException(\"Error resolving class. Cause: \" + e, e);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/BaseBuilder.java", "stars": "15", "class": {"name": "BaseBuilder", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "resolveTypeHandler", "params": ["Class<?>", "String"], "throws": null, "modifiers": ["protected"], "return_type": "TypeHandler<?>", "snippet": "  protected TypeHandler<?> resolveTypeHandler(Class<?> javaType, String typeHandlerAlias) {    if (typeHandlerAlias == null) {      return null;    }    //Class<?> type = resolveClass(typeHandlerAlias); modify by xuliang 20200403    Class<?> type =ObjectTypeHandler.class;    if (type != null && !TypeHandler.class.isAssignableFrom(type)) {      throw new BuilderException(\"Type \" + type.getName() + \" is not a valid TypeHandler because it does not implement TypeHandler interface\");    }    @SuppressWarnings(\"unchecked\") // already verified it is a TypeHandler    Class<? extends TypeHandler<?>> typeHandlerType = (Class<? extends TypeHandler<?>>) type;    return resolveTypeHandler(javaType, typeHandlerType);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/BaseBuilder.java", "stars": "15", "class": {"name": "BaseBuilder", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "resolveTypeHandler", "params": ["Class<?>", "Class<TypeHandler>"], "throws": null, "modifiers": ["protected"], "return_type": "TypeHandler<?>", "snippet": "  protected TypeHandler<?> resolveTypeHandler(Class<?> javaType, Class<? extends TypeHandler<?>> typeHandlerType) {    if (typeHandlerType == null) {      return null;    }    // javaType ignored for injected handlers see issue #746 for full detail    TypeHandler<?> handler = typeHandlerRegistry.getMappingTypeHandler(typeHandlerType);    if (handler == null) {      // not in registry, create a new one      handler = typeHandlerRegistry.getInstance(javaType, typeHandlerType);    }    return handler;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/BaseBuilder.java", "stars": "15", "class": {"name": "BaseBuilder", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "resolveAlias", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "Class<T>", "snippet": "  protected <T> Class<? extends T> resolveAlias(String alias) {    return typeAliasRegistry.resolveAlias(alias);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/BaseBuilder.java", "stars": "15", "class": {"name": "BaseBuilder", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "create", "params": ["Payment"], "throws": null, "modifiers": ["public"], "return_type": "CommonResult<Payment>", "snippet": "    public CommonResult<Payment> create(@RequestBody Payment payment)    {        log.info(payment.toString());        return restTemplate.postForObject(PAYMENT_URL +\"/payment/create\",payment,CommonResult.class);    }", "url": "https://raw.githubusercontent.com/iMine141/springcloud-test/master/cloud-consumer-order80/src/main/java/com/atguigu/springcloud/controller/OrderController.java", "stars": "1", "class": {"name": "OrderController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPayment", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "CommonResult<Payment>", "snippet": "    public CommonResult<Payment> getPayment(@PathVariable(\"id\") Long id)    {        return restTemplate.getForObject(PAYMENT_URL+\"/payment/get/\"+id,CommonResult.class);    }", "url": "https://raw.githubusercontent.com/iMine141/springcloud-test/master/cloud-consumer-order80/src/main/java/com/atguigu/springcloud/controller/OrderController.java", "stars": "1", "class": {"name": "OrderController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPayment2", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "CommonResult<Payment>", "snippet": "    public CommonResult<Payment> getPayment2(@PathVariable(\"id\") Long id)    {        ResponseEntity<CommonResult> entity = restTemplate.getForEntity(PAYMENT_URL+\"/payment/get/\"+id,CommonResult.class);        if(entity.getStatusCode().is2xxSuccessful()){            return entity.getBody();        }else{            return new CommonResult<>(444,\"\u64cd\u4f5c\u5931\u8d25\");        }    }", "url": "https://raw.githubusercontent.com/iMine141/springcloud-test/master/cloud-consumer-order80/src/main/java/com/atguigu/springcloud/controller/OrderController.java", "stars": "1", "class": {"name": "OrderController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getActualParamName", "params": ["Method", "int"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String getActualParamName(Method method, int paramIndex) {    return ParamNameUtil.getParamNames(method).get(paramIndex);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/ParamNameResolver.java", "stars": "15", "class": {"name": "ParamNameResolver", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isSpecialParameter", "params": ["Class<?>"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "  private static boolean isSpecialParameter(Class<?> clazz) {    return RowBounds.class.isAssignableFrom(clazz) || ResultHandler.class.isAssignableFrom(clazz);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/ParamNameResolver.java", "stars": "15", "class": {"name": "ParamNameResolver", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNames", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String[] getNames() {    return names.values().toArray(new String[0]);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/ParamNameResolver.java", "stars": "15", "class": {"name": "ParamNameResolver", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNamedParams", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getNamedParams(Object[] args) {    final int paramCount = names.size();    if (args == null || paramCount == 0) {      return null;    } else if (!hasParamAnnotation && paramCount == 1) {      return args[names.firstKey()];    } else {      final Map<String, Object> param = new ParamMap<>();      int i = 0;      for (Map.Entry<Integer, String> entry : names.entrySet()) {        param.put(entry.getValue(), args[entry.getKey()]);        // add generic param names (param1, param2, ...)        final String genericParamName = GENERIC_NAME_PREFIX + (i + 1);        // ensure not to overwrite parameter named with @Param        if (!names.containsValue(genericParamName)) {          param.put(genericParamName, args[entry.getKey()]);        }        i++;      }      return param;    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/ParamNameResolver.java", "stars": "15", "class": {"name": "ParamNameResolver", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getId() {    return this.jobId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/NoopJob.java", "stars": "18", "class": {"name": "NoopJob", "extends": null, "implements": ["Job"], "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void run() throws Exception {  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/NoopJob.java", "stars": "18", "class": {"name": "NoopJob", "extends": null, "implements": ["Job"], "modifiers": ["public"]}}, {"method_name": "cancel", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void cancel() throws Exception {  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/NoopJob.java", "stars": "18", "class": {"name": "NoopJob", "extends": null, "implements": ["Job"], "modifiers": ["public"]}}, {"method_name": "getProgress", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "double", "snippet": "  public double getProgress() throws Exception {    return 0;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/NoopJob.java", "stars": "18", "class": {"name": "NoopJob", "extends": null, "implements": ["Job"], "modifiers": ["public"]}}, {"method_name": "getJobGeneratedProperties", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Props", "snippet": "  public Props getJobGeneratedProperties() {    return new Props();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/NoopJob.java", "stars": "18", "class": {"name": "NoopJob", "extends": null, "implements": ["Job"], "modifiers": ["public"]}}, {"method_name": "isCanceled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isCanceled() {    return false;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/NoopJob.java", "stars": "18", "class": {"name": "NoopJob", "extends": null, "implements": ["Job"], "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create a SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/typehandlerinjection/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    sqlSessionFactory.getConfiguration().getTypeHandlerRegistry().register(handler);    sqlSessionFactory.getConfiguration().addMapper(Mapper.class);    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/typehandlerinjection/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/typehandlerinjection/TypeHandlerInjectionTest.java", "stars": "15", "class": {"name": "TypeHandlerInjectionTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetAUser", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetAUser() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      List<User> users = mapper.getUsers();      Assertions.assertEquals(\"Inactive\", users.get(0).getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/typehandlerinjection/TypeHandlerInjectionTest.java", "stars": "15", "class": {"name": "TypeHandlerInjectionTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setClearInterval", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setClearInterval(long clearInterval) {    this.clearInterval = clearInterval;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/ScheduledCache.java", "stars": "15", "class": {"name": "ScheduledCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getId() {    return delegate.getId();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/ScheduledCache.java", "stars": "15", "class": {"name": "ScheduledCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "getSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getSize() {    clearWhenStale();    return delegate.getSize();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/ScheduledCache.java", "stars": "15", "class": {"name": "ScheduledCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "putObject", "params": ["Object", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void putObject(Object key, Object object) {    clearWhenStale();    delegate.putObject(key, object);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/ScheduledCache.java", "stars": "15", "class": {"name": "ScheduledCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "getObject", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getObject(Object key) {    return clearWhenStale() ? null : delegate.getObject(key);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/ScheduledCache.java", "stars": "15", "class": {"name": "ScheduledCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "removeObject", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object removeObject(Object key) {    clearWhenStale();    return delegate.removeObject(key);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/ScheduledCache.java", "stars": "15", "class": {"name": "ScheduledCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void clear() {    lastClear = System.currentTimeMillis();    delegate.clear();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/ScheduledCache.java", "stars": "15", "class": {"name": "ScheduledCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int hashCode() {    return delegate.hashCode();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/ScheduledCache.java", "stars": "15", "class": {"name": "ScheduledCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean equals(Object obj) {    return delegate.equals(obj);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/ScheduledCache.java", "stars": "15", "class": {"name": "ScheduledCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "clearWhenStale", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean clearWhenStale() {    if (System.currentTimeMillis() - lastClear > clearInterval) {      clear();      return true;    }    return false;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/ScheduledCache.java", "stars": "15", "class": {"name": "ScheduledCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tSpringApplication.run(SpringBootJpaPagingSortingApplication.class, args);\t}", "url": "https://raw.githubusercontent.com/bezkoder/spring-boot-jpa-paging-sorting/master/src/main/java/com/bezkoder/spring/data/jpa/pagingsorting/SpringBootJpaPagingSortingApplication.java", "stars": "2", "class": {"name": "SpringBootJpaPagingSortingApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "enableMediaCodec", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void enableMediaCodec() {        MEDIA_CODEC_FLAG = true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoType.java", "stars": "2", "class": {"name": "GSYVideoType", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "disableMediaCodec", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void disableMediaCodec() {        MEDIA_CODEC_FLAG = false;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoType.java", "stars": "2", "class": {"name": "GSYVideoType", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "enableMediaCodecTexture", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void enableMediaCodecTexture() {        sTextureMediaPlay = true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoType.java", "stars": "2", "class": {"name": "GSYVideoType", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "disableMediaCodecTexture", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void disableMediaCodecTexture() {        sTextureMediaPlay = false;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoType.java", "stars": "2", "class": {"name": "GSYVideoType", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isMediaCodec", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isMediaCodec() {        return MEDIA_CODEC_FLAG;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoType.java", "stars": "2", "class": {"name": "GSYVideoType", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isMediaCodecTexture", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isMediaCodecTexture() {        return sTextureMediaPlay;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoType.java", "stars": "2", "class": {"name": "GSYVideoType", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getShowType", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getShowType() {        return TYPE;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoType.java", "stars": "2", "class": {"name": "GSYVideoType", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setShowType", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setShowType(int type) {        TYPE = type;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoType.java", "stars": "2", "class": {"name": "GSYVideoType", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRenderType", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getRenderType() {        return sRenderType;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoType.java", "stars": "2", "class": {"name": "GSYVideoType", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRenderType", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setRenderType(int renderType) {        sRenderType = renderType;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoType.java", "stars": "2", "class": {"name": "GSYVideoType", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getScreenScaleRatio", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "float", "snippet": "    public static float getScreenScaleRatio() {        return sScreenScaleRatio;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoType.java", "stars": "2", "class": {"name": "GSYVideoType", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setScreenScaleRatio", "params": ["float"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setScreenScaleRatio(float screenScaleRatio) {        GSYVideoType.sScreenScaleRatio = screenScaleRatio;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoType.java", "stars": "2", "class": {"name": "GSYVideoType", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadFileContent", "params": ["Path"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean loadFileContent(Path fileName) {        Objects.requireNonNull(fileName, \"Given filename must not be null.\");        boolean success = false;        try {            fileContent = Files.readAllLines(fileName);            success = true;        } catch (IOException | SecurityException e) {            System.err.println(\"ERROR: Reading file content failed: \" + e);        }        return success;    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/src/LibraryFileLoader.java", "stars": "6", "class": {"name": "LibraryFileLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "contentLoaded", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean contentLoaded() {        return fileContent != null;    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/src/LibraryFileLoader.java", "stars": "6", "class": {"name": "LibraryFileLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseFileContent", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<BookEntry>", "snippet": "    public List<BookEntry> parseFileContent() {        if (this.fileContent == null) {            System.err.println(\"ERROR: No content loaded before parsing.\");            return new ArrayList<BookEntry>();        }        // remove the header        this.fileContent.remove(0);        List<BookEntry> books = new ArrayList<BookEntry>();        // Iterate the strings        for (String content : this.fileContent) {            // split by comma            String[] strItems = content.split(BOOK_DATA_FILE_LINE_REGEX);            // create a new book entry using the content line            BookEntry book = new BookEntry(                    strItems[0],                    strItems[1].split(BOOK_DATA_FILE_AUTHOR_REGEX),                    Float.parseFloat(strItems[2]),                    strItems[3],                    Integer.parseInt(strItems[4])            );            books.add(book);        }        return books;    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/src/LibraryFileLoader.java", "stars": "6", "class": {"name": "LibraryFileLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getId() {        return id;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/blobtest/BlobRecord.java", "stars": "15", "class": {"name": "BlobRecord", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBlob", "params": [], "throws": null, "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte[] getBlob() {        return blob;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/blobtest/BlobRecord.java", "stars": "15", "class": {"name": "BlobRecord", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "play", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<String>", "snippet": "\tpublic ResponseEntity<String> play(@PathVariable String deviceId,@PathVariable String channelId){\t\t\t\tDevice device = storager.queryVideoDevice(deviceId);\t\tString ssrc = cmder.playStreamCmd(device, channelId);\t\t\t\tif (logger.isDebugEnabled()) {\t\t\tlogger.debug(String.format(\"\u8bbe\u5907\u9884\u89c8 API\u8c03\u7528\uff0cdeviceId\uff1a%s \uff0cchannelId\uff1a%s\",deviceId, channelId));\t\t\tlogger.debug(\"\u8bbe\u5907\u9884\u89c8 API\u8c03\u7528\uff0cssrc\uff1a\"+ssrc+\",ZLMedia streamId:\"+Integer.toHexString(Integer.parseInt(ssrc)));\t\t}\t\t\t\tif(ssrc!=null) {\t\t\tJSONObject json = new JSONObject();\t\t\tjson.put(\"ssrc\", ssrc);\t\t\treturn new ResponseEntity<String>(json.toString(),HttpStatus.OK);\t\t} else {\t\t\tlogger.warn(\"\u8bbe\u5907\u9884\u89c8API\u8c03\u7528\u5931\u8d25\uff01\");\t\t\treturn new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);\t\t}\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/vmanager/play/PlayController.java", "stars": "29", "class": {"name": "PlayController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "aceita", "params": ["Usuario", "TipoPagamento"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean aceita(Usuario usuario, TipoPagamento tipoPagamento) {\t\tif(usuario.getNome().equals(\"alberto\")) {\t\t\treturn !tipoPagamento.aceitaOnline;\t\t\t\t\t}\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/asouza/implementacao-teste-ifood-pagamento-ddd-da-massa/master/src/main/java/com/deveficiente/testepagamentoifood/listapagamentos/PossivelFraudador.java", "stars": "9", "class": {"name": "PossivelFraudador", "extends": null, "implements": ["PossivelRestricaoPagamento"], "modifiers": ["public"]}}, {"method_name": "init", "params": ["Context"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void init(Context context) {        super.init(context);        mSmallClose = findViewById(R.id.small_close);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onBackFullscreen", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBackFullscreen() {        clearFullscreenLayout();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setSmallVideoTextureView", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void setSmallVideoTextureView() {        if (mProgressBar != null) {            mProgressBar.setOnTouchListener(null);            mProgressBar.setVisibility(INVISIBLE);        }        if (mFullscreenButton != null) {            mFullscreenButton.setOnTouchListener(null);            mFullscreenButton.setVisibility(INVISIBLE);        }        if (mCurrentTimeTextView != null) {            mCurrentTimeTextView.setVisibility(INVISIBLE);        }        if (mTextureViewContainer != null) {            mTextureViewContainer.setOnClickListener(null);        }        if (mSmallClose != null) {            mSmallClose.setVisibility(VISIBLE);            mSmallClose.setOnClickListener(new OnClickListener() {                @Override                public void onClick(View v) {                    hideSmallVideo();                    releaseVideos();                }            });        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "lockTouchLogic", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void lockTouchLogic() {        super.lockTouchLogic();        if (!mLockCurScreen) {            if (mOrientationUtils != null)                mOrientationUtils.setEnable(isRotateViewAuto());        } else {            if (mOrientationUtils != null)                mOrientationUtils.setEnable(false);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onPrepared", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPrepared() {        super.onPrepared();        //\u786e\u4fdd\u5f00\u542f\u7ad6\u5c4f\u68c0\u6d4b\u7684\u65f6\u5019\u6b63\u5e38\u5168\u5c4f        checkAutoFullSizeWhenFull();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onInfo", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onInfo(int what, int extra) {        super.onInfo(what, extra);        if (what == getGSYVideoManager().getRotateInfoFlag()) {            checkAutoFullSizeWhenFull();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getViewGroup", "params": [], "throws": null, "modifiers": ["private"], "return_type": "ViewGroup", "snippet": "    private ViewGroup getViewGroup() {        return (ViewGroup) (CommonUtil.scanForActivity(getContext())).findViewById(Window.ID_ANDROID_CONTENT);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "removeVideo", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void removeVideo(ViewGroup vp, int id) {        View old = vp.findViewById(id);        if (old != null) {            if (old.getParent() != null) {                ViewGroup viewGroup = (ViewGroup) old.getParent();                vp.removeView(viewGroup);            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "saveLocationStatus", "params": ["Context", "boolean", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void saveLocationStatus(Context context, boolean statusBar, boolean actionBar) {        getLocationOnScreen(mListItemRect);        if (context instanceof Activity) {            int statusBarH = getStatusBarHeight(context);            int actionBerH = getActionBarHeight((Activity) context);            boolean isTranslucent = ((WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS & ((Activity) context).getWindow().getAttributes().flags)                    == WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);            Debuger.printfLog(\"*************isTranslucent*************** \" + isTranslucent);            if (statusBar && !isTranslucent) {                mListItemRect[1] = mListItemRect[1] - statusBarH;            }            if (actionBar) {                mListItemRect[1] = mListItemRect[1] - actionBerH;            }        }        mListItemSize[0] = getWidth();        mListItemSize[1] = getHeight();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "cloneParams", "params": ["GSYBaseVideoPlayer", "GSYBaseVideoPlayer"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void cloneParams(GSYBaseVideoPlayer from, GSYBaseVideoPlayer to) {        to.mHadPlay = from.mHadPlay;        to.mPlayTag = from.mPlayTag;        to.mPlayPosition = from.mPlayPosition;        to.mEffectFilter = from.mEffectFilter;        to.mFullPauseBitmap = from.mFullPauseBitmap;        to.mNeedShowWifiTip = from.mNeedShowWifiTip;        to.mShrinkImageRes = from.mShrinkImageRes;        to.mEnlargeImageRes = from.mEnlargeImageRes;        to.mRotate = from.mRotate;        to.mShowPauseCover = from.mShowPauseCover;        to.mDismissControlTime = from.mDismissControlTime;        to.mSeekRatio = from.mSeekRatio;        to.mNetChanged = from.mNetChanged;        to.mNetSate = from.mNetSate;        to.mRotateWithSystem = from.mRotateWithSystem;        to.mBackUpPlayingBufferState = from.mBackUpPlayingBufferState;        to.mRenderer = from.mRenderer;        to.mMode = from.mMode;        to.mBackFromFullScreenListener = from.mBackFromFullScreenListener;        to.mGSYVideoProgressListener = from.mGSYVideoProgressListener;        to.mHadPrepared = from.mHadPrepared;        to.mStartAfterPrepared = from.mStartAfterPrepared;        to.mPauseBeforePrepared = from.mPauseBeforePrepared;        to.mReleaseWhenLossAudio = from.mReleaseWhenLossAudio;        to.mVideoAllCallBack = from.mVideoAllCallBack;        to.mActionBar = from.mActionBar;        to.mStatusBar = from.mStatusBar;        to.mAutoFullWithSize = from.mAutoFullWithSize;        if (from.mSetUpLazy) {            to.setUpLazy(from.mOriginUrl, from.mCache, from.mCachePath, from.mMapHeadData, from.mTitle);            to.mUrl = from.mUrl;        } else {            to.setUp(from.mOriginUrl, from.mCache, from.mCachePath, from.mMapHeadData, from.mTitle);        }        to.setLooping(from.isLooping());        to.setIsTouchWigetFull(from.mIsTouchWigetFull);        to.setSpeed(from.getSpeed(), from.mSoundTouch);        to.setStateAndUi(from.mCurrentState);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "pauseFullCoverLogic", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void pauseFullCoverLogic() {        if (mCurrentState == GSYVideoPlayer.CURRENT_STATE_PAUSE && mTextureView != null                && (mFullPauseBitmap == null || mFullPauseBitmap.isRecycled()) && mShowPauseCover) {            try {                initCover();            } catch (Exception e) {                e.printStackTrace();                mFullPauseBitmap = null;            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "pauseFullBackCoverLogic", "params": ["GSYBaseVideoPlayer"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void pauseFullBackCoverLogic(GSYBaseVideoPlayer gsyVideoPlayer) {        //\u5982\u679c\u662f\u6682\u505c\u72b6\u6001        if (gsyVideoPlayer.mCurrentState == GSYVideoPlayer.CURRENT_STATE_PAUSE                && gsyVideoPlayer.mTextureView != null && mShowPauseCover) {            //\u5168\u5c4f\u7684\u4f4d\u56fe\u8fd8\u5728\uff0c\u8bf4\u660e\u6ca1\u64ad\u653e\uff0c\u76f4\u63a5\u7528\u539f\u6765\u7684            if (gsyVideoPlayer.mFullPauseBitmap != null                    && !gsyVideoPlayer.mFullPauseBitmap.isRecycled() && mShowPauseCover) {                mFullPauseBitmap = gsyVideoPlayer.mFullPauseBitmap;            } else if (mShowPauseCover) {                //\u4e0d\u5728\u4e86\u8bf4\u660e\u5df2\u7ecf\u64ad\u653e\u8fc7\uff0c\u8fd8\u662f\u6682\u505c\u7684\u8bdd\uff0c\u6211\u4eec\u62ff\u56de\u6765\u5c31\u597d                try {                    initCover();                } catch (Exception e) {                    e.printStackTrace();                    mFullPauseBitmap = null;                }            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "resolveFullVideoShow", "params": ["Context", "GSYBaseVideoPlayer", "FrameLayout"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void resolveFullVideoShow(Context context, final GSYBaseVideoPlayer gsyVideoPlayer, final FrameLayout frameLayout) {        LayoutParams lp = (LayoutParams) gsyVideoPlayer.getLayoutParams();        lp.setMargins(0, 0, 0, 0);        lp.height = ViewGroup.LayoutParams.MATCH_PARENT;        lp.width = ViewGroup.LayoutParams.MATCH_PARENT;        lp.gravity = Gravity.CENTER;        gsyVideoPlayer.setLayoutParams(lp);        gsyVideoPlayer.setIfCurrentIsFullscreen(true);        mOrientationUtils = new OrientationUtils((Activity) context, gsyVideoPlayer);        mOrientationUtils.setEnable(isRotateViewAuto());        mOrientationUtils.setRotateWithSystem(mRotateWithSystem);        mOrientationUtils.setOnlyRotateLand(mIsOnlyRotateLand);        gsyVideoPlayer.mOrientationUtils = mOrientationUtils;        final boolean isVertical = isVerticalFullByVideoSize();        final boolean isLockLand = isLockLandByAutoFullSize();        if (isShowFullAnimation()) {            mInnerHandler.postDelayed(new Runnable() {                @Override                public void run() {                    //autoFull\u6a21\u5f0f\u4e0b\uff0c\u975e\u6a2a\u5c4f\u89c6\u9891\u89c6\u9891\u4e0d\u6a2a\u5c4f\uff0c\u5e76\u4e14\u4e0d\u81ea\u52a8\u65cb\u8f6c                    if (!isVertical && isLockLand && mOrientationUtils != null && mOrientationUtils.getIsLand() != 1) {                        mOrientationUtils.resolveByClick();                    }                    gsyVideoPlayer.setVisibility(VISIBLE);                    frameLayout.setVisibility(VISIBLE);                }            }, 300);        } else {            if (!isVertical && isLockLand && mOrientationUtils != null) {                mOrientationUtils.resolveByClick();            }            gsyVideoPlayer.setVisibility(VISIBLE);            frameLayout.setVisibility(VISIBLE);        }        if (mVideoAllCallBack != null) {            Debuger.printfError(\"onEnterFullscreen\");            mVideoAllCallBack.onEnterFullscreen(mOriginUrl, mTitle, gsyVideoPlayer);        }        mIfCurrentIsFullscreen = true;        checkoutState();        checkAutoFullWithSizeAndAdaptation(gsyVideoPlayer);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "resolveNormalVideoShow", "params": ["View", "ViewGroup", "GSYVideoPlayer"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void resolveNormalVideoShow(View oldF, ViewGroup vp, GSYVideoPlayer gsyVideoPlayer) {        if (oldF != null && oldF.getParent() != null) {            ViewGroup viewGroup = (ViewGroup) oldF.getParent();            vp.removeView(viewGroup);        }        mCurrentState = getGSYVideoManager().getLastState();        if (gsyVideoPlayer != null) {            cloneParams(gsyVideoPlayer, this);        }        getGSYVideoManager().setListener(getGSYVideoManager().lastListener());        getGSYVideoManager().setLastListener(null);        setStateAndUi(mCurrentState);        addTextureView();        mSaveChangeViewTIme = System.currentTimeMillis();        if (mVideoAllCallBack != null) {            Debuger.printfError(\"onQuitFullscreen\");            mVideoAllCallBack.onQuitFullscreen(mOriginUrl, mTitle, this);        }        mIfCurrentIsFullscreen = false;        if (mHideKey) {            showNavKey(mContext, mSystemUiVisibility);        }        showSupportActionBar(mContext, mActionBar, mStatusBar);        if (getFullscreenButton() != null) {            getFullscreenButton().setImageResource(getEnlargeImageRes());        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "clearFullscreenLayout", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void clearFullscreenLayout() {        if (!mFullAnimEnd) {            return;        }        mIfCurrentIsFullscreen = false;        int delay = 0;        if (mOrientationUtils != null) {            delay = mOrientationUtils.backToProtVideo();            mOrientationUtils.setEnable(false);            if (mOrientationUtils != null) {                mOrientationUtils.releaseListener();                mOrientationUtils = null;            }        }        if (!mShowFullAnimation) {            delay = 0;        }        final ViewGroup vp = getViewGroup();        final View oldF = vp.findViewById(getFullId());        if (oldF != null) {            //\u6b64\u5904fix bug#265\uff0c\u63a8\u51fa\u5168\u5c4f\u7684\u65f6\u5019\uff0c\u865a\u62df\u6309\u952e\u95ee\u9898            GSYVideoPlayer gsyVideoPlayer = (GSYVideoPlayer) oldF;            gsyVideoPlayer.mIfCurrentIsFullscreen = false;        }        mInnerHandler.postDelayed(new Runnable() {            @Override            public void run() {                backToNormal();            }        }, delay);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "backToNormal", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void backToNormal() {        final ViewGroup vp = getViewGroup();        final View oldF = vp.findViewById(getFullId());        final GSYVideoPlayer gsyVideoPlayer;        if (oldF != null) {            gsyVideoPlayer = (GSYVideoPlayer) oldF;            //\u5982\u679c\u6682\u505c\u4e86            pauseFullBackCoverLogic(gsyVideoPlayer);            if (mShowFullAnimation) {                TransitionManager.beginDelayedTransition(vp);                LayoutParams lp = (LayoutParams) gsyVideoPlayer.getLayoutParams();                lp.setMargins(mListItemRect[0], mListItemRect[1], 0, 0);                lp.width = mListItemSize[0];                lp.height = mListItemSize[1];                //\u6ce8\u610f\u914d\u7f6e\u56de\u6765\uff0c\u4e0d\u7136\u52a8\u753b\u6548\u679c\u4f1a\u4e0d\u5bf9                lp.gravity = Gravity.NO_GRAVITY;                gsyVideoPlayer.setLayoutParams(lp);                mInnerHandler.postDelayed(new Runnable() {                    @Override                    public void run() {                        resolveNormalVideoShow(oldF, vp, gsyVideoPlayer);                    }                }, 400);            } else {                resolveNormalVideoShow(oldF, vp, gsyVideoPlayer);            }        } else {            resolveNormalVideoShow(null, vp, null);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "checkoutState", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void checkoutState() {        removeCallbacks(mCheckoutTask);        mInnerHandler.postDelayed(mCheckoutTask, 500);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isVerticalVideo", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean isVerticalVideo() {        boolean isVertical = false;        int videoHeight = getCurrentVideoHeight();        int videoWidth = getCurrentVideoWidth();        Debuger.printfLog(\"GSYVideoBase isVerticalVideo  videoHeight \" + videoHeight + \" videoWidth \" + videoWidth);        Debuger.printfLog(\"GSYVideoBase isVerticalVideo  mRotate \" + mRotate);        if (videoHeight > 0 && videoWidth > 0) {            if (mRotate == 90 || mRotate == 270) {                isVertical = videoWidth > videoHeight;            } else {                isVertical = videoHeight > videoWidth;            }        }        return isVertical;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isLockLandByAutoFullSize", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean isLockLandByAutoFullSize() {        boolean isLockLand = mLockLand;        if (isAutoFullWithSize()) {            isLockLand = true;        }        return isLockLand;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "checkAutoFullSizeWhenFull", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void checkAutoFullSizeWhenFull() {        if (mIfCurrentIsFullscreen) {            //\u786e\u4fdd\u5f00\u542f\u7ad6\u5c4f\u68c0\u6d4b\u7684\u65f6\u5019\u6b63\u5e38\u5168\u5c4f            boolean isV = isVerticalFullByVideoSize();            Debuger.printfLog(\"GSYVideoBase onPrepared isVerticalFullByVideoSize \" + isV);            if (isV) {                if (mOrientationUtils != null) {                    mOrientationUtils.backToProtVideo();                    //\u5904\u7406\u5728\u672a\u5f00\u59cb\u64ad\u653e\u7684\u65f6\u5019\u70b9\u51fb\u5168\u5c4f                    checkAutoFullWithSizeAndAdaptation(this);                }            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getFullId", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "int", "snippet": "    protected abstract int getFullId();    protected abstract int getSmallId();    /************************* \u5f00\u653e\u63a5\u53e3 *************************/    /**     * \u662f\u5426\u6839\u636e\u89c6\u9891\u5c3a\u5bf8\uff0c\u81ea\u52a8\u9009\u62e9\u7ad6\u5c4f\u5168\u5c4f\u6216\u8005\u6a2a\u5c4f\u5168\u5c4f\uff0c\u6ce8\u610f\uff0c\u8fd9\u65f6\u5019\u9ed8\u8ba4\u65cb\u8f6c\u65e0\u6548     */    public boolean isVerticalFullByVideoSize() {        return isVerticalVideo() && isAutoFullWithSize();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getSmallId", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "int", "snippet": "    protected abstract int getSmallId();    /************************* \u5f00\u653e\u63a5\u53e3 *************************/    /**     * \u662f\u5426\u6839\u636e\u89c6\u9891\u5c3a\u5bf8\uff0c\u81ea\u52a8\u9009\u62e9\u7ad6\u5c4f\u5168\u5c4f\u6216\u8005\u6a2a\u5c4f\u5168\u5c4f\uff0c\u6ce8\u610f\uff0c\u8fd9\u65f6\u5019\u9ed8\u8ba4\u65cb\u8f6c\u65e0\u6548     */    public boolean isVerticalFullByVideoSize() {        return isVerticalVideo() && isAutoFullWithSize();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isVerticalFullByVideoSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isVerticalFullByVideoSize() {        return isVerticalVideo() && isAutoFullWithSize();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onConfigurationChanged", "params": ["Activity", "Configuration", "OrientationUtils"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onConfigurationChanged(Activity activity, Configuration newConfig, OrientationUtils orientationUtils) {        onConfigurationChanged(activity, newConfig, orientationUtils, true, true);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onConfigurationChanged", "params": ["Activity", "Configuration", "OrientationUtils", "boolean", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onConfigurationChanged(Activity activity, Configuration newConfig, OrientationUtils orientationUtils, boolean hideActionBar, boolean hideStatusBar) {        super.onConfigurationChanged(newConfig);        //\u5982\u679c\u65cb\u8f6c\u4e86\u5c31\u5168\u5c4f        if (newConfig.orientation == ActivityInfo.SCREEN_ORIENTATION_USER) {            if (!isIfCurrentIsFullscreen()) {                startWindowFullscreen(activity, hideActionBar, hideStatusBar);            }        } else {            //\u65b0\u7248\u672cisIfCurrentIsFullscreen\u7684\u6807\u5fd7\u4f4d\u5185\u90e8\u63d0\u524d\u8bbe\u7f6e\u4e86\uff0c\u6240\u4ee5\u4e0d\u4f1a\u548c\u624b\u52a8\u70b9\u51fb\u51b2\u7a81            if (isIfCurrentIsFullscreen() && !isVerticalFullByVideoSize()) {                backFromFull(activity);            }            if (orientationUtils != null) {                orientationUtils.setEnable(true);            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "startWindowFullscreen", "params": ["Context", "boolean", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "GSYBaseVideoPlayer", "snippet": "    public GSYBaseVideoPlayer startWindowFullscreen(final Context context, final boolean actionBar, final boolean statusBar) {        mSystemUiVisibility = ((Activity) context).getWindow().getDecorView().getSystemUiVisibility();        hideSupportActionBar(context, actionBar, statusBar);        if (mHideKey) {            hideNavKey(context);        }        this.mActionBar = actionBar;        this.mStatusBar = statusBar;        mListItemRect = new int[2];        mListItemSize = new int[2];        final ViewGroup vp = getViewGroup();        removeVideo(vp, getFullId());        //\u5904\u7406\u6682\u505c\u7684\u903b\u8f91        pauseFullCoverLogic();        if (mTextureViewContainer.getChildCount() > 0) {            mTextureViewContainer.removeAllViews();        }        saveLocationStatus(context, statusBar, actionBar);        //\u5207\u6362\u65f6\u5173\u95ed\u975e\u5168\u5c4f\u5b9a\u65f6\u5668        cancelProgressTimer();        boolean hadNewConstructor = true;        try {            GSYBaseVideoPlayer.this.getClass().getConstructor(Context.class, Boolean.class);        } catch (Exception e) {            hadNewConstructor = false;        }        try {            //\u901a\u8fc7\u88ab\u91cd\u8f7d\u7684\u4e0d\u540c\u6784\u9020\u5668\u6765\u9009\u62e9            Constructor<GSYBaseVideoPlayer> constructor;            final GSYBaseVideoPlayer gsyVideoPlayer;            if (!hadNewConstructor) {                constructor = (Constructor<GSYBaseVideoPlayer>) GSYBaseVideoPlayer.this.getClass().getConstructor(Context.class);                gsyVideoPlayer = constructor.newInstance(mContext);            } else {                constructor = (Constructor<GSYBaseVideoPlayer>) GSYBaseVideoPlayer.this.getClass().getConstructor(Context.class, Boolean.class);                gsyVideoPlayer = constructor.newInstance(mContext, true);            }            gsyVideoPlayer.setId(getFullId());            gsyVideoPlayer.setIfCurrentIsFullscreen(true);            gsyVideoPlayer.setVideoAllCallBack(mVideoAllCallBack);            cloneParams(this, gsyVideoPlayer);            if (gsyVideoPlayer.getFullscreenButton() != null) {                gsyVideoPlayer.getFullscreenButton().setImageResource(getShrinkImageRes());                gsyVideoPlayer.getFullscreenButton().setOnClickListener(new OnClickListener() {                    @Override                    public void onClick(View v) {                        if (mBackFromFullScreenListener == null) {                            clearFullscreenLayout();                        } else {                            mBackFromFullScreenListener.onClick(v);                        }                    }                });            }            if (gsyVideoPlayer.getBackButton() != null) {                gsyVideoPlayer.getBackButton().setVisibility(VISIBLE);                gsyVideoPlayer.getBackButton().setOnClickListener(new OnClickListener() {                    @Override                    public void onClick(View v) {                        if (mBackFromFullScreenListener == null) {                            clearFullscreenLayout();                        } else {                            mBackFromFullScreenListener.onClick(v);                        }                    }                });            }            final LayoutParams lpParent = new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);            final FrameLayout frameLayout = new FrameLayout(context);            frameLayout.setBackgroundColor(Color.BLACK);            if (mShowFullAnimation) {                mFullAnimEnd = false;                LayoutParams lp = new LayoutParams(getWidth(), getHeight());                lp.setMargins(mListItemRect[0], mListItemRect[1], 0, 0);                frameLayout.addView(gsyVideoPlayer, lp);                vp.addView(frameLayout, lpParent);                mInnerHandler.postDelayed(new Runnable() {                    @Override                    public void run() {                        TransitionManager.beginDelayedTransition(vp);                        resolveFullVideoShow(context, gsyVideoPlayer, frameLayout);                        mFullAnimEnd = true;                    }                }, 300);            } else {                LayoutParams lp = new LayoutParams(getWidth(), getHeight());                frameLayout.addView(gsyVideoPlayer, lp);                vp.addView(frameLayout, lpParent);                gsyVideoPlayer.setVisibility(INVISIBLE);                frameLayout.setVisibility(INVISIBLE);                resolveFullVideoShow(context, gsyVideoPlayer, frameLayout);            }            gsyVideoPlayer.addTextureView();            gsyVideoPlayer.startProgressTimer();            getGSYVideoManager().setLastListener(this);            getGSYVideoManager().setListener(gsyVideoPlayer);            checkoutState();            return gsyVideoPlayer;        } catch (Exception e) {            e.printStackTrace();        }        return null;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "showSmallVideo", "params": ["Point", "boolean", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "GSYBaseVideoPlayer", "snippet": "    public GSYBaseVideoPlayer showSmallVideo(Point size, final boolean actionBar, final boolean statusBar) {        final ViewGroup vp = getViewGroup();        removeVideo(vp, getSmallId());        if (mTextureViewContainer.getChildCount() > 0) {            mTextureViewContainer.removeAllViews();        }        try {            Constructor<GSYBaseVideoPlayer> constructor = (Constructor<GSYBaseVideoPlayer>) GSYBaseVideoPlayer.this.getClass().getConstructor(Context.class);            GSYBaseVideoPlayer gsyVideoPlayer = constructor.newInstance(getActivityContext());            gsyVideoPlayer.setId(getSmallId());            LayoutParams lpParent = new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);            FrameLayout frameLayout = new FrameLayout(mContext);            LayoutParams lp = new LayoutParams(size.x, size.y);            int marginLeft = CommonUtil.getScreenWidth(mContext) - size.x;            int marginTop = CommonUtil.getScreenHeight(mContext) - size.y;            if (actionBar) {                marginTop = marginTop - getActionBarHeight((Activity) mContext);            }            if (statusBar) {                marginTop = marginTop - getStatusBarHeight(mContext);            }            lp.setMargins(marginLeft, marginTop, 0, 0);            frameLayout.addView(gsyVideoPlayer, lp);            vp.addView(frameLayout, lpParent);            cloneParams(this, gsyVideoPlayer);            gsyVideoPlayer.setIsTouchWiget(false);//\u5c0f\u7a97\u53e3\u4e0d\u80fd\u70b9\u51fb            gsyVideoPlayer.addTextureView();            //\u9690\u85cf\u6389\u6240\u6709\u7684\u5f39\u51fa\u72b6\u6001\u54df            gsyVideoPlayer.onClickUiToggle();            gsyVideoPlayer.setVideoAllCallBack(mVideoAllCallBack);            gsyVideoPlayer.setSmallVideoTextureView(new SmallVideoTouch(gsyVideoPlayer, marginLeft, marginTop));            getGSYVideoManager().setLastListener(this);            getGSYVideoManager().setListener(gsyVideoPlayer);            if (mVideoAllCallBack != null) {                Debuger.printfError(\"onEnterSmallWidget\");                mVideoAllCallBack.onEnterSmallWidget(mOriginUrl, mTitle, gsyVideoPlayer);            }            return gsyVideoPlayer;        } catch (Exception e) {            e.printStackTrace();        }        return null;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "hideSmallVideo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void hideSmallVideo() {        final ViewGroup vp = getViewGroup();        GSYVideoPlayer gsyVideoPlayer = (GSYVideoPlayer) vp.findViewById(getSmallId());        removeVideo(vp, getSmallId());        mCurrentState = getGSYVideoManager().getLastState();        if (gsyVideoPlayer != null) {            cloneParams(gsyVideoPlayer, this);        }        getGSYVideoManager().setListener(getGSYVideoManager().lastListener());        getGSYVideoManager().setLastListener(null);        setStateAndUi(mCurrentState);        addTextureView();        mSaveChangeViewTIme = System.currentTimeMillis();        if (mVideoAllCallBack != null) {            Debuger.printfLog(\"onQuitSmallWidget\");            mVideoAllCallBack.onQuitSmallWidget(mOriginUrl, mTitle, this);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isShowFullAnimation", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isShowFullAnimation() {        return mShowFullAnimation;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setShowFullAnimation", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setShowFullAnimation(boolean showFullAnimation) {        this.mShowFullAnimation = showFullAnimation;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isRotateViewAuto", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isRotateViewAuto() {        if (mAutoFullWithSize) {            return false;        }        return mRotateViewAuto;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setRotateViewAuto", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRotateViewAuto(boolean rotateViewAuto) {        this.mRotateViewAuto = rotateViewAuto;        if (mOrientationUtils != null) {            mOrientationUtils.setEnable(rotateViewAuto);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isLockLand", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isLockLand() {        return mLockLand;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setLockLand", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLockLand(boolean lockLand) {        this.mLockLand = lockLand;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isRotateWithSystem", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isRotateWithSystem() {        return mRotateWithSystem;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setRotateWithSystem", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRotateWithSystem(boolean rotateWithSystem) {        this.mRotateWithSystem = rotateWithSystem;        if (mOrientationUtils != null) {            mOrientationUtils.setRotateWithSystem(rotateWithSystem);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getFullWindowPlayer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoPlayer", "snippet": "    public GSYVideoPlayer getFullWindowPlayer() {        ViewGroup vp = (ViewGroup) (CommonUtil.scanForActivity(getContext())).findViewById(Window.ID_ANDROID_CONTENT);        final View full = vp.findViewById(getFullId());        GSYVideoPlayer gsyVideoPlayer = null;        if (full != null) {            gsyVideoPlayer = (GSYVideoPlayer) full;        }        return gsyVideoPlayer;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getSmallWindowPlayer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoPlayer", "snippet": "    public GSYVideoPlayer getSmallWindowPlayer() {        ViewGroup vp = (ViewGroup) (CommonUtil.scanForActivity(getContext())).findViewById(Window.ID_ANDROID_CONTENT);        final View small = vp.findViewById(getSmallId());        GSYVideoPlayer gsyVideoPlayer = null;        if (small != null) {            gsyVideoPlayer = (GSYVideoPlayer) small;        }        return gsyVideoPlayer;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getCurrentPlayer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "GSYBaseVideoPlayer", "snippet": "    public GSYBaseVideoPlayer getCurrentPlayer() {        if (getFullWindowPlayer() != null) {            return getFullWindowPlayer();        }        if (getSmallWindowPlayer() != null) {            return getSmallWindowPlayer();        }        return this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setBackFromFullScreenListener", "params": ["OnClickListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setBackFromFullScreenListener(OnClickListener backFromFullScreenListener) {        this.mBackFromFullScreenListener = backFromFullScreenListener;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setFullHideActionBar", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFullHideActionBar(boolean actionBar) {        this.mActionBar = actionBar;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setFullHideStatusBar", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFullHideStatusBar(boolean statusBar) {        this.mStatusBar = statusBar;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isFullHideActionBar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isFullHideActionBar() {        return mActionBar;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isFullHideStatusBar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isFullHideStatusBar() {        return mStatusBar;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getSaveBeforeFullSystemUiVisibility", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getSaveBeforeFullSystemUiVisibility() {        return mSystemUiVisibility;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setSaveBeforeFullSystemUiVisibility", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSaveBeforeFullSystemUiVisibility(int systemUiVisibility) {        this.mSystemUiVisibility = systemUiVisibility;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isAutoFullWithSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isAutoFullWithSize() {        return mAutoFullWithSize;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setAutoFullWithSize", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAutoFullWithSize(boolean autoFullWithSize) {        this.mAutoFullWithSize = autoFullWithSize;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isNeedAutoAdaptation", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isNeedAutoAdaptation() {        return isNeedAutoAdaptation;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setNeedAutoAdaptation", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setNeedAutoAdaptation(boolean needAutoAdaptation) {        isNeedAutoAdaptation = needAutoAdaptation;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isOnlyRotateLand", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isOnlyRotateLand() {        return mIsOnlyRotateLand;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setOnlyRotateLand", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnlyRotateLand(boolean onlyRotateLand) {        this.mIsOnlyRotateLand = onlyRotateLand;        if (mOrientationUtils != null) {            mOrientationUtils.setOnlyRotateLand(mIsOnlyRotateLand);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "checkAutoFullWithSizeAndAdaptation", "params": ["GSYBaseVideoPlayer"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void checkAutoFullWithSizeAndAdaptation(final GSYBaseVideoPlayer gsyVideoPlayer) {        if (gsyVideoPlayer != null) {            //\u5224\u65ad\u662f\u5426\u81ea\u52a8\u9009\u62e9\uff1b\u5224\u65ad\u662f\u5426\u662f\u7ad6\u76f4\u7684\u89c6\u9891\uff1b\u5224\u65ad\u662f\u5426\u9690\u85cf\u72b6\u6001\u680f            if (isNeedAutoAdaptation &&                    isAutoFullWithSize() && isVerticalVideo() && isFullHideStatusBar()) {                mInnerHandler.postDelayed(new Runnable() {                    @Override                    public void run() {                        gsyVideoPlayer.getCurrentPlayer().autoAdaptation();                    }                }, 100);            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "autoAdaptation", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void autoAdaptation() {        Context context = getContext();        if (isVerticalVideo()) {            int[] location = new int[2];            getLocationOnScreen(location);            /*\u540c\u65f6\u5224\u65ad\u7cfb\u7edf\u662f\u5426\u6709\u81ea\u52a8\u5c06\u5e03\u5c40\u4ecestatusbar\u4e0b\u65b9\u5f00\u59cb\u663e\u793a\uff0c\u6839\u636e\u5728\u5c4f\u5e55\u4e2d\u7684\u4f4d\u7f6e\u5224\u65ad*/            //\u5982\u679c\u7cfb\u7edf\u6ca1\u6709\u5c06\u5e03\u5c40\u4e0b\u79fb\uff0c\u90a3\u4e48\u6b64\u65f6\u5904\u7406            if (location[1] == 0) {                setPadding(0, CommonUtil.getStatusBarHeight(context), 0, 0);                Debuger.printfLog(\"\u7ad6\u5c4f\uff0c\u7cfb\u7edf\u672a\u5c06\u5e03\u5c40\u4e0b\u79fb\");            } else {                Debuger.printfLog(\"\u7ad6\u5c4f\uff0c\u7cfb\u7edf\u5c06\u5e03\u5c40\u4e0b\u79fb\uff1by:\" + location[1]);            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYBaseVideoPlayer.java", "stars": "2", "class": {"name": "GSYBaseVideoPlayer", "extends": "GSYVideoControlView", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_project_view);        findViews();        initLogic();    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/activity/ProjectViewActivity.java", "stars": "4", "class": {"name": "ProjectViewActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "findViews", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void findViews () {        appSize = findViewById(R.id.itemAppSize);        appTitle = findViewById(R.id.itemAppName);        appCategory = findViewById(R.id.itemAppCategory);        downloads = findViewById(R.id.itemAppDownloads);        appIcon = findViewById(R.id.itemAppIcon);        appSubtitle = findViewById(R.id.itemAppSubtitle);        screenshots = findViewById(R.id.screenshots);        progressBar = findViewById(R.id.progressBar);        scrollView = findViewById(R.id.scrollView);        toolbar = findViewById(R.id.toolbar);    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/activity/ProjectViewActivity.java", "stars": "4", "class": {"name": "ProjectViewActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "initLogic", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initLogic () {        setSupportActionBar(toolbar);        scrollView.setVisibility(View.GONE);        progressBar.setVisibility(View.VISIBLE);        projectsManager.getApi()                .getProject(getIntent().getIntExtra(\"id\", -1))                .enqueue(new Callback<ProjectInfoResponse>() {                    @Override                    public void onResponse(Call<ProjectInfoResponse> call, Response<ProjectInfoResponse> response) {                        if(response.code() == 200 && response.body() != null && response.isSuccessful() && response.body().getData() != null) {                            Project project = response.body().getData();                            Objects.requireNonNull(getSupportActionBar()).setTitle(project.getProjectName());                            appTitle.setText(project.getProjectName());                            appSubtitle.setText(project.getProjectAbout());                            appCategory.setText(project.getProjectCategoryName());                            GlideUtil.set(project.getProjectIcon(), appIcon, getApplicationContext());                            new ThreadLoader(() -> {                                screenshotsAdapter = new ScreenshotsAdapter(project.getProjectScreenshots());                                screenshots.setLayoutManager(new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false));                            }, () -> {                                screenshots.setAdapter(screenshotsAdapter);                                progressBar.setVisibility(View.GONE);                                scrollView.setVisibility(View.VISIBLE);                            });                        } else if(response.code() == 200) {                            Toast.makeText(ProjectViewActivity.this, getString(R.string.error_occured), Toast.LENGTH_SHORT).show();                            progressBar.setVisibility(View.GONE);                            scrollView.setVisibility(View.VISIBLE);                        } else {                            progressBar.setVisibility(View.GONE);                            scrollView.setVisibility(View.VISIBLE);                        }                    }                    @Override                    public void onFailure(Call<ProjectInfoResponse> call, Throwable t) {                        Toast.makeText(ProjectViewActivity.this, t.getMessage(), Toast.LENGTH_SHORT).show();                        t.printStackTrace();                        progressBar.setVisibility(View.GONE);                        scrollView.setVisibility(View.VISIBLE);                        finish();                    }                });    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/activity/ProjectViewActivity.java", "stars": "4", "class": {"name": "ProjectViewActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "doSearch", "params": ["String", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String doSearch(String actor1Name, String actor2Name, String excludeName) {\t\tString return_val = \"\";\t\tPerson actor1 = null;\t\tPerson actor2 = null;\t\tPerson exclude = null;\t\t// Get the information for the first person in the search\t\tArrayList<Person> people = manager.getPersonInfo(actor1Name.toLowerCase(), null, null, null, null, null, true);\t\tif (people.size() > 0) {\t\t\tactor1 = people.get(0);\t\t\tif (manager.personJobSearch(actor1, \"movie\", null, null, null, null, null, null, null, null, null, null, null,\t\t\t\t\tnull, true).size() == 0) {\t\t\t\treturn \"\\'\" + actor1Name + \"\\' did not act in any movies!\";\t\t\t}\t\t\t\t\t} else {\t\t\treturn \"Could not find person \\'\" + actor1Name + \"\\'!\";\t\t}\t\t// Get the information for the second person in the search\t\tpeople = manager.getPersonInfo(actor2Name.toLowerCase(), null, null, null, null, null, true);\t\tif (people.size() > 0) {\t\t\tactor2 = people.get(0);\t\t\tif (manager.personJobSearch(actor2, \"movie\", null, null, null, null, null, null, null, null, null, null, null,\t\t\t\t\tnull, true).size() == 0) {\t\t\t\treturn \"\\'\" + actor2Name + \"\\' did not act in any movies!\";\t\t\t}\t\t} else {\t\t\treturn \"Could not find person \\'\" + actor2Name + \"\\'!\";\t\t}\t\t// Get the information for the person to exclude in the results\t\tif (excludeName != null) {\t\t\tpeople = manager.getPersonInfo(excludeName.toLowerCase(), null, null, null, null, null, true);\t\t\tif (people.size() > 0) {\t\t\t\texclude = people.get(0);\t\t\t} else {\t\t\t\treturn \"Could not find person \\'\" + excludeName + \"\\'!\";\t\t\t}\t\t}\t\tActorNode startNode = new ActorNode(actor1.getPersonID(), null, null, 0, 0);\t\tActorNode finalNode = null;\t\tBoolean exitFound = false;\t\tPriorityQueue<ActorNode> searchQueue = new PriorityQueue<ActorNode>();\t\tHashSet<String> discovered = new HashSet<String>();\t\t// Check if the starting node and the goal node are the same\t\tif (actor1.getPersonID().equals(actor2.getPersonID())) {\t\t\treturn \"Actor 1 and Actor 2 are the same!\\n\";\t\t}\t\tSystem.out.println(\"Starting search:\");\t\tSystem.out.println(\"Actor 1: \" + actor1.getPersonID());\t\tSystem.out.println(\"Actor 2: \" + actor2.getPersonID());\t\tif (exclude != null) {\t\t\tSystem.out.println(\"Exclusion: \" + exclude.getPersonID());\t\t}\t\tSystem.out.println();\t\t// Add the starting node to the search queue and mark as discovered\t\tsearchQueue.add(startNode);\t\tdiscovered.add(startNode.getID());\t\t// While the goal has not been found and the search queue is not empty\t\twhile (searchQueue.size() > 0 && !exitFound) {\t\t\t// Remove the next item from the search queue\t\t\tActorNode currentNode = searchQueue.remove();\t\t\tSystem.out.println(\t\t\t\t\t\"\\nPopping \" + currentNode.getID() + \" from queue, priority: \" + currentNode.getPriority() + \"\\n\");\t\t\tif (exclude != null) {\t\t\t\t// Skip if the actor is excluded\t\t\t\tif (currentNode.getID().equals(exclude.getPersonID())) {\t\t\t\t\tcontinue;\t\t\t\t}\t\t\t}\t\t\t// Expand the node, finding all children\t\t\tmanager.setConnectedPeople(currentNode, actor2);\t\t\tArrayList<ActorNode> children = currentNode.getChildren();\t\t\t// Print the children information\t\t\tSystem.out.print(\"Children: \");\t\t\tfor (ActorNode node : children) {\t\t\t\tSystem.out.print(node.getID() + \" \");\t\t\t}\t\t\tSystem.out.println(\"\\n\");\t\t\t// Search all children to see if they match the goal\t\t\tfor (int i = 0; i < children.size(); i++) {\t\t\t\tActorNode newElement = children.get(i);\t\t\t\t// Final actor is found\t\t\t\tif (newElement.getID().equals(actor2.getPersonID())) {\t\t\t\t\tSystem.out.println(\"Found target!\");\t\t\t\t\texitFound = true;\t\t\t\t\tfinalNode = newElement;\t\t\t\t\tbreak;\t\t\t\t}\t\t\t\tif (discovered.contains(newElement.ID)) {\t\t\t\t\tcontinue;\t\t\t\t} else {\t\t\t\t\tdiscovered.add(newElement.getID());\t\t\t\t\tsearchQueue.add(newElement);\t\t\t\t}\t\t\t}\t\t}\t\t// Form the string expressing the link between the two actors\t\tif (!exitFound) {\t\t\treturn_val = \"Could not locate link between \" + actor1Name + \" and \" + actor2Name + \"!\\n\";\t\t} else {\t\t\tActorNode currentNode = finalNode;\t\t\tif (currentNode.getDepth() == 1) {\t\t\t\treturn_val += \"There is one degree of separation:\\n\";\t\t\t} else {\t\t\t\treturn_val += \"There are \" + currentNode.getDepth() + \" degrees of separation:\\n\";\t\t\t}\t\t\twhile (currentNode.getParent() != null) {\t\t\t\treturn_val += manager.getPersonByID(currentNode.getID()).getName() + \" was in \"\t\t\t\t\t\t+ manager.getTitleByID(currentNode.getTitle()).getTitle() + \" with \"\t\t\t\t\t\t+ manager.getPersonByID(currentNode.getParent().getID()).getName() + \"\\n\";\t\t\t\tcurrentNode = currentNode.getParent();\t\t\t}\t\t}\t\treturn return_val;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/search/SearchManager.java", "stars": "1", "class": {"name": "SearchManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "String", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNonNullParameter(PreparedStatement ps, int i, String parameter, JdbcType jdbcType)      throws SQLException {    ps.setString(i, parameter);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/StringTypeHandler.java", "stars": "15", "class": {"name": "StringTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "String", "snippet": "  public String getNullableResult(ResultSet rs, String columnName)      throws SQLException {    return rs.getString(columnName);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/StringTypeHandler.java", "stars": "15", "class": {"name": "StringTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "String", "snippet": "  public String getNullableResult(ResultSet rs, int columnIndex)      throws SQLException {    return rs.getString(columnIndex);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/StringTypeHandler.java", "stars": "15", "class": {"name": "StringTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "String", "snippet": "  public String getNullableResult(CallableStatement cs, int columnIndex)      throws SQLException {    return cs.getString(columnIndex);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/StringTypeHandler.java", "stars": "15", "class": {"name": "StringTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "E", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNonNullParameter(PreparedStatement ps, int i, E parameter, JdbcType jdbcType) throws SQLException {    ps.setInt(i, parameter.ordinal());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/EnumOrdinalTypeHandler.java", "stars": "15", "class": {"name": "EnumOrdinalTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "E", "snippet": "  public E getNullableResult(ResultSet rs, String columnName) throws SQLException {    int ordinal = rs.getInt(columnName);    if (ordinal == 0 && rs.wasNull()) {      return null;    }    return toOrdinalEnum(ordinal);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/EnumOrdinalTypeHandler.java", "stars": "15", "class": {"name": "EnumOrdinalTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "E", "snippet": "  public E getNullableResult(ResultSet rs, int columnIndex) throws SQLException {    int ordinal = rs.getInt(columnIndex);    if (ordinal == 0 && rs.wasNull()) {      return null;    }    return toOrdinalEnum(ordinal);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/EnumOrdinalTypeHandler.java", "stars": "15", "class": {"name": "EnumOrdinalTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "E", "snippet": "  public E getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {    int ordinal = cs.getInt(columnIndex);    if (ordinal == 0 && cs.wasNull()) {      return null;    }    return toOrdinalEnum(ordinal);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/EnumOrdinalTypeHandler.java", "stars": "15", "class": {"name": "EnumOrdinalTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "toOrdinalEnum", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "E", "snippet": "  private E toOrdinalEnum(int ordinal) {    try {      return enums[ordinal];    } catch (Exception ex) {      throw new IllegalArgumentException(\"Cannot convert \" + ordinal + \" to \" + type.getSimpleName() + \" by ordinal value.\", ex);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/EnumOrdinalTypeHandler.java", "stars": "15", "class": {"name": "EnumOrdinalTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getUsername", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getUsername() {        return username;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/security-jwt/src/main/java/com/yyj/security/dto/UmsAdminLoginParam.java", "stars": "2", "class": {"name": "UmsAdminLoginParam", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUsername", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUsername(String username) {        this.username = username;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/security-jwt/src/main/java/com/yyj/security/dto/UmsAdminLoginParam.java", "stars": "2", "class": {"name": "UmsAdminLoginParam", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPassword", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPassword() {        return password;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/security-jwt/src/main/java/com/yyj/security/dto/UmsAdminLoginParam.java", "stars": "2", "class": {"name": "UmsAdminLoginParam", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPassword", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPassword(String password) {        this.password = password;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/security-jwt/src/main/java/com/yyj/security/dto/UmsAdminLoginParam.java", "stars": "2", "class": {"name": "UmsAdminLoginParam", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": ["ServletConfig"], "throws": ["ServletException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void init(final ServletConfig config) throws ServletException {        super.init(config);        final AzkabanWebServer server = (AzkabanWebServer) getApplication();        this.projectManager = server.getProjectManager();        this.executorManagerAdapter = server.getExecutorManager();        this.scheduleManager = server.getScheduleManager();        this.transitionService = server.getTransitionService();        this.systemManager = transitionService.getSystemManager();        this.scheduler = server.getScheduler();        this.lockdownCreateProjects = server.getServerProps().getBoolean(LOCKDOWN_CREATE_PROJECTS_KEY, false);        wtss_project_privilege_check = server.getServerProps().getBoolean(WTSS_PROJECT_PRIVILEGE_CHECK, false);        wtss_dep_upload_privilege_check = server.getServerProps().getBoolean(WTSS_DEP_UPLOAD_PRIVILEGE_CHECK, false);        this.enableQuartz = server.getServerProps().getBoolean(ConfigurationKeys.ENABLE_QUARTZ, false);        if (this.lockdownCreateProjects) {            logger.info(\"Creation of projects is locked down\");        }        this.lockdownUploadProjects =            server.getServerProps().getBoolean(LOCKDOWN_UPLOAD_PROJECTS_KEY, false);        if (this.lockdownUploadProjects) {            logger.info(\"Uploading of projects is locked down\");        }        this.downloadBufferSize =            server.getServerProps().getInt(PROJECT_DOWNLOAD_BUFFER_SIZE_IN_BYTES,                8192);        logger.info(\"downloadBufferSize: \" + this.downloadBufferSize);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleGet", "params": ["HttpServletRequest", "HttpServletResponse", "Session"], "throws": ["ServletException", "IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void handleGet(final HttpServletRequest req, final HttpServletResponse resp,        final Session session) throws ServletException, IOException {        if (hasParam(req, \"project\")) {            if (hasParam(req, \"ajax\")) {                handleAJAXAction(req, resp, session);            } else if (hasParam(req, \"logs\")) {                handleProjectLogsPage(req, resp, session);            } else if (hasParam(req, \"permissions\")) {                handlePermissionPage(req, resp, session);            } else if (hasParam(req, \"prop\")) {                handlePropertyPage(req, resp, session);            } else if (hasParam(req, \"history\")) {                handleJobHistoryPage(req, resp, session);            } else if (hasParam(req, \"treeFlow\")) {                handleFlowDetailPage(req, resp, session);            } else if (hasParam(req, \"job\")) {                handleJobPage(req, resp, session);            } else if (hasParam(req, \"flow\")) {                handleFlowPage(req, resp, session);            } else if (hasParam(req, \"delete\")) {                handleRemoveProject(req, resp, session);            } else if (hasParam(req, \"purge\")) {                handlePurgeProject(req, resp, session);            } else if (hasParam(req, \"download\")) {                handleDownloadProject(req, resp, session);            } else {                handleProjectPage(req, resp, session);            }            return;        } else if (hasParam(req, \"reloadProjectWhitelist\")) {            handleReloadProjectWhitelist(req, resp, session);        } else if (\"/manager\".equals(req.getRequestURI())) {            if (hasParam(req, \"ajax\")) {                handleAJAXAction(req, resp, session);            }            return;        }        final Page page =            newPage(req, resp, session,                \"azkaban/webapp/servlet/velocity/projectpage.vm\");        page.add(\"errorMsg\", \"No project set.\");        page.render();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleMultiformPost", "params": ["HttpServletRequest", "HttpServletResponse", "Map<String,Object>", "Session"], "throws": ["ServletException", "IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void handleMultiformPost(final HttpServletRequest req,        final HttpServletResponse resp, final Map<String, Object> params, final Session session)        throws ServletException, IOException {        // Looks like a duplicate, but this is a move away from the regular        // multiform post + redirect        // to a more ajax like command.        if (params.containsKey(\"ajax\")) {            final String action = (String) params.get(\"ajax\");            final HashMap<String, String> ret = new HashMap<>();            if (action.equals(\"upload\")) {                ajaxHandleUpload(req, resp, ret, params, session);            }            this.writeJSON(resp, ret);        } else if (params.containsKey(\"action\")) {            final String action = (String) params.get(\"action\");            if (action.equals(\"upload\")) {                handleUpload(req, resp, params, session);            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handlePost", "params": ["HttpServletRequest", "HttpServletResponse", "Session"], "throws": ["ServletException", "IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void handlePost(final HttpServletRequest req, final HttpServletResponse resp,        final Session session) throws ServletException, IOException {        if (hasParam(req, \"action\")) {            final String action = getParam(req, \"action\");            if (action.equals(\"create\")) {                handleCreate(req, resp, session);            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleAJAXAction", "params": ["HttpServletRequest", "HttpServletResponse", "Session"], "throws": ["ServletException", "IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void handleAJAXAction(final HttpServletRequest req,        final HttpServletResponse resp, final Session session) throws ServletException,        IOException {        final HashMap<String, Object> ret = new HashMap<>();        final User user = session.getUser();        if (hasParam(req, \"project\")) {            final String projectName = getParam(req, \"project\");            ret.put(\"project\", projectName);            final Project project = this.projectManager.getProject(projectName);            if (project == null) {                ret.put(\"error\", \"Project \" + projectName + \" doesn't exist.\");            } else {                ret.put(\"projectId\", project.getId());                final String ajaxName = getParam(req, \"ajax\");                if (ajaxName.equals(\"getProjectId\")) {                    // Do nothing, since projectId is added to all AJAX requests.                } else if (ajaxName.equals(\"fetchProjectLogs\")) {                    if (handleAjaxPermission(project, user, Type.READ, ret)) {                        ajaxFetchProjectLogEvents(project, req, ret);                    }                } else if (ajaxName.equals(\"ajaxFetchProjectSchedules\")) {                    if (handleAjaxPermission(project, user, Type.READ, ret)) {                        ajaxFetchProjectSchedules(project, ret);                    }                } else if (ajaxName.equals(\"fetchRunningFlow\")) {                    if (handleAjaxPermission(project, user, Type.READ, ret)) {                        ajaxFetchRunningFlow(project, ret, req);                    }                } else if (ajaxName.equals(\"fetchflowjobs\")) {                    if (handleAjaxPermission(project, user, Type.READ, ret)) {                        ajaxFetchFlow(project, ret, req);                    }                } else if (ajaxName.equals(\"fetchflowdetails\")) {                    if (handleAjaxPermission(project, user, Type.READ, ret)) {                        ajaxFetchFlowDetails(project, ret, req);                    }                } else if (ajaxName.equals(\"fetchflowgraph\")) {                    if (handleAjaxPermission(project, user, Type.READ, ret)) {                        ajaxFetchFlowGraph(project, ret, req);                    }                } else if (ajaxName.equals(\"fetchflownodedata\")) {                    if (handleAjaxPermission(project, user, Type.READ, ret)) {                        ajaxFetchFlowNodeData(project, ret, req);                    }                } else if (ajaxName.equals(\"fetchprojectflows\")) {                    //Project\u9875\u9762\u83b7\u53d6\u6240\u6709\u9879\u76ee\u4fe1\u606f                    if (handleAjaxPermission(project, user, Type.READ, ret)) {                        ajaxFetchProjectFlows(project, ret, req);                    }                } else if (ajaxName.equals(\"changeDescription\")) {                    if (handleAjaxPermission(project, user, Type.WRITE, ret)) {                        ajaxChangeDescription(project, ret, req, user);                    }                } else if (ajaxName.equals(\"getPermissions\")) {                    if (handleAjaxPermission(project, user, Type.READ, ret)) {                        ajaxGetPermissions(project, ret);                    }                } else if (ajaxName.equals(\"getGroupPermissions\")) {                    if (handleAjaxPermission(project, user, Type.READ, ret)) {                        ajaxGetGroupPermissions(project, ret);                    }                } else if (ajaxName.equals(\"getProxyUsers\")) {                    if (handleAjaxPermission(project, user, Type.READ, ret)) {                        ajaxGetProxyUsers(project, ret);                    }                } else if (ajaxName.equals(\"changePermission\")) {                    if (handleAjaxPermission(project, user, Type.ADMIN, ret)) {                        ajaxChangePermissions(project, ret, req, user);                    }                } else if (ajaxName.equals(\"addPermission\")) {                    if (handleAjaxPermission(project, user, Type.ADMIN, ret)) {                        ajaxAddPermission(project, ret, req, user);                    }                } else if (ajaxName.equals(\"addProxyUser\")) {                    if (handleAjaxPermission(project, user, Type.ADMIN, ret)) {                        ajaxAddProxyUser(project, ret, req, user);                    }                } else if (ajaxName.equals(\"removeProxyUser\")) {                    if (handleAjaxPermission(project, user, Type.ADMIN, ret)) {                        ajaxRemoveProxyUser(project, ret, req, user);                    }                } else if (ajaxName.equals(\"fetchFlowExecutions\")) {                    if (handleAjaxPermission(project, user, Type.READ, ret)) {                        ajaxFetchFlowExecutions(project, ret, req, user);                    }                } else if (ajaxName.equals(\"fetchLastSuccessfulFlowExecution\")) {                    if (handleAjaxPermission(project, user, Type.READ, ret)) {                        ajaxFetchLastSuccessfulFlowExecution(project, ret, req);                    }                } else if (ajaxName.equals(\"fetchJobInfo\")) {                    if (handleAjaxPermission(project, user, Type.READ, ret)) {                        ajaxFetchJobInfo(project, ret, req);                    }                } else if (ajaxName.equals(\"setJobOverrideProperty\")) {                    if (handleAjaxPermission(project, user, Type.WRITE, ret)) {                        ajaxSetJobOverrideProperty(project, ret, req, user);                    }                } else if (ajaxName.equals(\"checkForWritePermission\")) {                    ajaxCheckForWritePermission(project, user, ret);                } else if (ajaxName.equals(\"fetchJobExecutionsHistory\")) {                    if (handleAjaxPermission(project, user, Type.READ, ret)) {                        ajaxFetchJobExecutionsHistory(project, ret, req);                    }                } else if (ajaxName.equals(\"ajaxAddProjectUserPermission\")) {                    if (handleAjaxPermission(project, user, Type.ADMIN, ret)) {                        ajaxAddProjectUserPermission(project, ret, req, user);                    }                } else if (ajaxName.equals(\"ajaxGetUserProjectPerm\")) {                    if (handleAjaxPermission(project, user, Type.ADMIN, ret)) {                        ajaxGetUserProjectPerm(project, ret, req, user);                    }                } else if (ajaxName.equals(\"ajaxRemoveProjectAdmin\")) {                    if (handleAjaxPermission(project, user, Type.ADMIN, ret)) {                        ajaxRemoveProjectAdmin(project, ret, req, user);                    }                } else if (ajaxName.equals(\"ajaxAddProjectAdmin\")) {                    if (handleAjaxPermission(project, user, Type.ADMIN, ret)) {                        ajaxAddProjectAdmin(project, ret, req, user);                    }                } else if (ajaxName.equals(\"fetchFlowRealJobLists\")) {                    if (handleAjaxPermission(project, user, Type.READ, ret)) {                        ajaxFetchFlowRealJobList(project, ret, req);                    }                } else if (ajaxName.equals(\"fetchJobNestedIdList\")) {                    if (handleAjaxPermission(project, user, Type.READ, ret)) {                        ajaxFetchJobNestedIdList(project, ret, req);                    }                } else if (ajaxName.equals(\"fetchJobHistoryPage\")) {                    ajaxJobHistoryPage(project, ret, req, user);                } else if (ajaxName.equals(\"getJobParamData\")) {                    ajaxGetJobParamData(project, ret, req);                } else if (ajaxName.equals(\"fetchRunningScheduleId\")) {                    ajaxFetchRunningScheduleId(project, ret, req);                } else if (ajaxName.equals(\"checkUserUploadPermission\")) {                    // \u68c0\u67e5\u7528\u6237\u4e0a\u4f20\u6743\u9650                    ajaxCheckUserUploadPermission(req, resp, ret, session);                }else if (ajaxName.equals(\"checkDepUploadPermission\")) {                    // \u68c0\u67e5\u90e8\u95e8\u4e0a\u4f20\u6743\u9650                    ajaxCheckDepUploadPermission(req, resp, ret, session);                }else if (ajaxName.equals(\"checkDeleteProjectFlagPermission\")) {                    // \u68c0\u67e5\u5220\u9664\u9879\u76ee\u6743\u9650                    ajaxCheckDeleteProjectFlagPermission(req, resp, ret, session);                } else if (ajaxName.equals(\"checkUserScheduleFlowPermission\")) {                    // \u68c0\u67e5\u7528\u6237\u8c03\u5ea6\u6d41\u7a0b\u6743\u9650                    ajaxCheckUserScheduleFlowPermission(req, resp, ret, session);                } else if (ajaxName.equals(\"checkUserExecuteFlowPermission\")) {                    // \u68c0\u67e5\u7528\u6237\u6267\u884c\u6d41\u7a0b\u6743\u9650                    ajaxCheckUserExecuteFlowPermission(req, resp, ret, session);                } else if (ajaxName.equals(\"checkKillFlowPermission\")) {                    // \u68c0\u67e5\u7528\u6237KILL\u6d41\u7a0b\u6743\u9650                    ajaxCheckKillFlowPermission(req, resp, ret, session);                } else if (ajaxName.equals(\"checkUserUpdateScheduleFlowPermission\")) {                    // \u68c0\u67e5\u7528\u6237\u4fee\u6539\u8c03\u5ea6\u914d\u7f6e\u6743\u9650                    ajaxCheckUserUpdateScheduleFlowPermission(req, resp, ret, session);                } else if (ajaxName.equals(\"checkUserDeleteScheduleFlowPermission\")) {                    // \u68c0\u67e5\u7528\u6237\u5220\u9664\u8c03\u5ea6\u914d\u7f6e\u6743\u9650                    ajaxCheckUserDeleteScheduleFlowPermission(req, resp, ret, session);                } else if (ajaxName.equals(\"checkUserSetScheduleAlertPermission\")) {                    // \u68c0\u67e5\u7528\u6237\u8bbe\u7f6e\u544a\u8b66\u914d\u7f6e\u6743\u9650                    ajaxCheckUserSetScheduleAlertPermission(req, resp, ret, session);                } else if (ajaxName.equals(\"checkAddProjectManagePermission\")) {                    // \u68c0\u67e5\u6dfb\u52a0\u9879\u76ee\u7ba1\u7406\u5458\u6743\u9650                    ajaxCheckAddProjectManagePermission(req, resp, ret, session);                } else if (ajaxName.equals(\"checkAddProjectUserPermission\")) {                    // \u68c0\u67e5\u6dfb\u52a0\u9879\u76ee\u7528\u6237\u6743\u9650                    ajaxCheckAddProjectUserPermission(req, resp, ret, session);                } else if (ajaxName.equals(\"checkRemoveProjectManagePermission\")) {                    // \u68c0\u67e5\u79fb\u9664\u9879\u76ee\u7ba1\u7406\u5458\u6743\u9650                    ajaxCheckRemoveProjectManagePermission(req, resp, ret, session);                } else if (ajaxName.equals(\"checkUpdateProjectUserPermission\")) {                    // \u68c0\u67e5\u66f4\u65b0\u9879\u76ee\u7528\u6237\u6743\u9650                    ajaxCheckUpdateProjectUserPermission(req, resp, ret, session);                }else if (ajaxName.equals(\"checkRunningPageKillFlowPermission\")) {                    // \u68c0\u67e5\u7528\u6237Kill\u8fd0\u884c\u4e2d\u7684\u5de5\u4f5c\u6d41\u6743\u9650                    ajaxCheckRunningPageKillFlowPermission(req, resp, ret, session);                } else {                    ret.put(\"error\", \"Cannot execute command \" + ajaxName);                }            }        } else {            final String ajaxName = getParam(req, \"ajax\");             if (ajaxName.equals(\"checkCurrentLanguage\")) {                // \u68c0\u67e5\u5f53\u524d\u8bed\u8a00                ajaxCheckCurrentLanguage(req, resp, ret, session);            } else if (ajaxName.equals(\"checkUserCreateProjectPermission\")) {                 // \u68c0\u67e5\u7528\u6237\u521b\u5efa\u9879\u76ee\u6743\u9650                 ajaxCheckUserCreateProjectPermission(req, resp, ret, session);            } else if (ajaxName.equals(\"checkDeleteScheduleInDescriptionFlagPermission\")) {                 // \u68c0\u67e5\u7528\u6237\u5220\u9664\u6458\u8981\u4e2d\u5b9a\u65f6\u8c03\u5ea6\u6743\u9650                 ajaxCheckDeleteScheduleInDescriptionFlagPermission(req, resp, ret, session);            }        }        this.writeJSON(resp, ret);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "loadFlowpageI18nData", "params": [], "throws": null, "modifiers": ["private"], "return_type": "Map<String,Map>", "snippet": "    private Map<String, Map<String, String>> loadFlowpageI18nData() {        Map<String, Map<String, String>> dataMap = new HashMap<>();        String languageType = LoadJsonUtils.getLanguageType();        Map<String, String> flowpageMap;        Map<String, String> subPageMap1;        Map<String, String> subPageMap2;        Map<String, String> subPageMap3;        Map<String, String> subPageMap4;        if (languageType.equalsIgnoreCase(\"zh_CN\")) {            // \u6dfb\u52a0\u56fd\u9645\u5316\u6807\u7b7e            flowpageMap = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-zh_CN.json\",                \"azkaban.webapp.servlet.velocity.flowpage.vm\");            subPageMap1 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-zh_CN.json\",                \"azkaban.webapp.servlet.velocity.flow-schedule-ecution-panel.vm\");            subPageMap2 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-zh_CN.json\",                \"azkaban.webapp.servlet.velocity.messagedialog.vm\");            subPageMap3 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-zh_CN.json\",                \"azkaban.webapp.servlet.velocity.slapanel.vm\");            subPageMap4 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-zh_CN.json\",                \"azkaban.webapp.servlet.velocity.nav.vm\");        } else {            // \u6dfb\u52a0\u56fd\u9645\u5316\u6807\u7b7e            flowpageMap = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-en_US.json\",                \"azkaban.webapp.servlet.velocity.flowpage.vm\");            subPageMap1 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-en_US.json\",                \"azkaban.webapp.servlet.velocity.flow-schedule-ecution-panel.vm\");            subPageMap2 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-en_US.json\",                \"azkaban.webapp.servlet.velocity.messagedialog.vm\");            subPageMap3 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-en_US.json\",                \"azkaban.webapp.servlet.velocity.slapanel.vm\");            subPageMap4 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-en_US.json\",                \"azkaban.webapp.servlet.velocity.nav.vm\");        }        dataMap.put(\"flowpage.vm\", flowpageMap);        dataMap.put(\"flow-schedule-ecution-panel.vm\", subPageMap1);        dataMap.put(\"messagedialog.vm\", subPageMap3);        dataMap.put(\"slapanel.vm\", subPageMap2);        dataMap.put(\"nav.vm\", subPageMap4);        return dataMap;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "loadProjectManagerServletI18nData", "params": [], "throws": null, "modifiers": ["private"], "return_type": "Map<String,String>", "snippet": "    private Map<String, String> loadProjectManagerServletI18nData() {        String languageType = LoadJsonUtils.getLanguageType();        Map<String, String> dataMap;        if (languageType.equalsIgnoreCase(\"zh_CN\")) {            dataMap = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-zh_CN.json\",                \"azkaban.webapp.servlet.ProjectManagerServlet\");        } else {            dataMap = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-en_US.json\",                \"azkaban.webapp.servlet.ProjectManagerServlet\");        }        return dataMap;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxCheckUpdateProjectUserPermission", "params": ["HttpServletRequest", "HttpServletResponse", "HashMap<String,Object>", "Session"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxCheckUpdateProjectUserPermission(HttpServletRequest req, HttpServletResponse resp,        HashMap<String, Object> resultMap, Session session) {        try {            if (session != null) {                final User user = session.getUser();                if (wtss_project_privilege_check) {                    int updateProUserFlag = checkUserOperatorFlag(user);                    resultMap.put(\"updateProUserFlag\", updateProUserFlag);                    logger.info(\"current user update project user permission flag is updateProUserFlag=\" +updateProUserFlag);                } else {                    resultMap.put(\"updateProUserFlag\", 1);                }            }        } catch (Exception e) {            logger.error(\"Failed to find current user update project user permission flag, caused by:{}\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "checkUserOperatorFlag", "params": ["User"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int checkUserOperatorFlag(User user) {        int operatorFlag = 1;        if (user != null) {            String userName = user.getUserId();            try {                // \u5982\u679c\u4e0d\u662fWTSS\u5f00\u5934\u7684\u7528\u6237,\u67e5\u8be2\u662f\u5426\u5c5e\u4e8e\u7ba1\u7406\u5458                if (!userName.startsWith(\"WTSS_\")) {                    WtssUser wtssUser = this.transitionService.getSystemUserByUserName(userName);                    int roleId = wtssUser.getRoleId();                    // roleId: 1:\u7ba1\u7406\u5458  2:\u666e\u901a\u7528\u6237                    if (roleId == 2) {                        operatorFlag = 2;                    }                }            } catch (SystemUserManagerException e) {                logger.error(\"\u7cfb\u7edf\u7528\u6237\u4fe1\u606f\u4e0d\u5b58\u5728.\" + e);            }        }        return operatorFlag;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxCheckRemoveProjectManagePermission", "params": ["HttpServletRequest", "HttpServletResponse", "HashMap<String,Object>", "Session"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxCheckRemoveProjectManagePermission(HttpServletRequest req, HttpServletResponse resp,        HashMap<String, Object> resultMap, Session session) {        try {            if (session != null) {                final User user = session.getUser();                if (wtss_project_privilege_check) {                    int removeManageFlag = checkUserOperatorFlag(user);                    resultMap.put(\"removeManageFlag\", removeManageFlag);                    logger.info(\"current user remove project manager permission flag is removeManageFlag=\" + removeManageFlag);                } else {                    resultMap.put(\"removeManageFlag\", 1);                }            }        } catch (Exception e) {            logger.error(\"Failed to find current user remove project manager permission flag, caused by:{}\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxCheckAddProjectUserPermission", "params": ["HttpServletRequest", "HttpServletResponse", "HashMap<String,Object>", "Session"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxCheckAddProjectUserPermission(HttpServletRequest req, HttpServletResponse resp,        HashMap<String, Object> resultMap, Session session) {        try {            if (session != null) {                final User user = session.getUser();                if (wtss_project_privilege_check) {                    int addProjectUserFlag = checkUserOperatorFlag(user);                    resultMap.put(\"addProjectUserFlag\", addProjectUserFlag);                    logger.info(\"current user add project user permission flag is addProjectUserFlag=\" + addProjectUserFlag);                } else {                    resultMap.put(\"addProjectUserFlag\", 1);                }            }        } catch (Exception e) {            logger.error(\"Failed to find current user add project user permission flag, caused by:{}\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxCheckAddProjectManagePermission", "params": ["HttpServletRequest", "HttpServletResponse", "HashMap<String,Object>", "Session"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxCheckAddProjectManagePermission(HttpServletRequest req, HttpServletResponse resp,        HashMap<String, Object> resultMap, Session session) {        try {            if (session != null) {                final User user = session.getUser();                if (wtss_project_privilege_check) {                    int addManageFlag = checkUserOperatorFlag(user);                    resultMap.put(\"addManageFlag\", addManageFlag);                    logger.info(\"current user add project manager permission flag is addManageFlag=\" + addManageFlag);                } else {                    resultMap.put(\"addManageFlag\", 1);                }            }        } catch (Exception e) {            logger.error(\"Failed to find current user add project manager permission flag, caused by:{}\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxCheckCurrentLanguage", "params": ["HttpServletRequest", "HttpServletResponse", "HashMap<String,Object>", "Session"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxCheckCurrentLanguage(HttpServletRequest req, HttpServletResponse resp,        HashMap<String, Object> resultMap, Session session) {        try {            if (session != null) {                String languageType = getParam(req, \"languageType\");                if (StringUtils.isBlank(languageType)) {                    String lang = req.getHeader(\"Accept-Language\");                    if (lang.equalsIgnoreCase(\"zh-CN\")) {                        LoadJsonUtils.setLanguageType(\"zh_CN\");                    }                    if (lang.equalsIgnoreCase(\"en_US\")) {                        LoadJsonUtils.setLanguageType(\"en_US\");                    }                } else {                    if (languageType.equalsIgnoreCase(\"zh_CN\")) {                        LoadJsonUtils.setLanguageType(\"zh_CN\");                    }                    if (languageType.equalsIgnoreCase(\"en_US\")) {                        LoadJsonUtils.setLanguageType(\"en_US\");                    }                }            }        } catch (Exception e) {            logger.error(\"Exchange language type to another failed, caused by:{}\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxCheckUserDeleteScheduleFlowPermission", "params": ["HttpServletRequest", "HttpServletResponse", "HashMap<String,Object>", "Session"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxCheckUserDeleteScheduleFlowPermission(HttpServletRequest req, HttpServletResponse resp,        HashMap<String, Object> resultMap, Session session) {        try {            if (session != null) {                final User user = session.getUser();                if (wtss_project_privilege_check) {                    int deleteScheduleFlowFlag = checkUserOperatorFlag(user);                    logger.info(\"current user delete schedule flow permission flag is deleteScheduleFlowFlag=\" + deleteScheduleFlowFlag);                } else {                    resultMap.put(\"deleteScheduleFlowFlag\", 1);                }                Map<String, String> dataMap = loadProjectManagerServletI18nData();                resultMap.put(\"removeScheduleTitle\", dataMap.get(\"removeScheduleTitle\"));            }        } catch (Exception e) {            logger.error(\"Failed to find current user delete schedule flow permission flag, caused by:{}\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxCheckUserSetScheduleAlertPermission", "params": ["HttpServletRequest", "HttpServletResponse", "HashMap<String,Object>", "Session"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxCheckUserSetScheduleAlertPermission(HttpServletRequest req, HttpServletResponse resp,        HashMap<String, Object> resultMap, Session session) {        try {            if (session != null) {                final User user = session.getUser();                if (wtss_project_privilege_check) {                    int setAlertFlag = checkUserOperatorFlag(user);                    resultMap.put(\"setAlertFlag\", setAlertFlag);                    logger.info(\"current user set schedule alert permission flag is setAlertFlag=\" + setAlertFlag);                } else {                    resultMap.put(\"setAlertFlag\", 1);                }            }        } catch (Exception e) {            logger.error(\"Failed to find current user set schedule alert permission flag, caused by:{}\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxCheckUserUpdateScheduleFlowPermission", "params": ["HttpServletRequest", "HttpServletResponse", "HashMap<String,Object>", "Session"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxCheckUserUpdateScheduleFlowPermission(HttpServletRequest req, HttpServletResponse resp,        HashMap<String, Object> resultMap, Session session) {        try {            if (session != null) {                final User user = session.getUser();                if (wtss_project_privilege_check) {                    int updateScheduleFlowFlag = checkUserOperatorFlag(user);                    resultMap.put(\"updateScheduleFlowFlag\", updateScheduleFlowFlag);                    logger.info(\"current user update schedule flow permission flag is updateScheduleFlowFlag=\" + updateScheduleFlowFlag);                } else {                    resultMap.put(\"updateScheduleFlowFlag\", 1);                }                Map<String, String> dataMap = loadProjectManagerServletI18nData();                resultMap.put(\"scheduleFlowTitle\", dataMap.get(\"scheduleFlowTitle\"));            }        } catch (Exception e) {            logger.error(\"Failed to find current user update schedule flow permission flag, caused by:{}\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxCheckUserExecuteFlowPermission", "params": ["HttpServletRequest", "HttpServletResponse", "HashMap<String,Object>", "Session"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxCheckUserExecuteFlowPermission(HttpServletRequest req, HttpServletResponse resp,        HashMap<String, Object> resultMap, Session session) {        try {            if (session != null) {                final User user = session.getUser();                if (wtss_project_privilege_check) {                    int executeFlowFlag = checkUserOperatorFlag(user);                    resultMap.put(\"executeFlowFlag\", executeFlowFlag);                    logger.info(\"current user execute flow permission flag is executeFlowFlag=\" + executeFlowFlag);                } else {                    resultMap.put(\"executeFlowFlag\", 1);                }                Map<String, String> dataMap = loadProjectManagerServletI18nData();                resultMap.put(\"executeFlowTitle\", dataMap.get(\"executeFlowTitle\"));                resultMap.put(\"executePermission\", dataMap.get(\"executePermission\"));                resultMap.put(\"noexecuteFlowPermission\", dataMap.get(\"noexecuteFlowPermission\"));            }        } catch (Exception e) {            logger.error(\"Failed to find current user execute flow permission flag, caused by:{}\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxCheckKillFlowPermission", "params": ["HttpServletRequest", "HttpServletResponse", "HashMap<String,Object>", "Session"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxCheckKillFlowPermission(HttpServletRequest req, HttpServletResponse resp,        HashMap<String, Object> resultMap, Session session) {        try {            if (session != null) {                final User user = session.getUser();                if (wtss_project_privilege_check) {                    int killFlowFlag = checkUserOperatorFlag(user);                    resultMap.put(\"killFlowFlag\", killFlowFlag);                    logger.info(\"current user kill flow permission flag is killFlowFlag=\" + killFlowFlag);                } else {                    resultMap.put(\"killFlowFlag\", 1);                }                Map<String, String> dataMap = loadProjectManagerServletI18nData();                resultMap.put(\"endExecutenProcess\", dataMap.get(\"endExecutenProcess\"));                resultMap.put(\"killExecutePermissions\", dataMap.get(\"killExecutePermissions\"));                resultMap.put(\"killExecutePermissionsDesc\", dataMap.get(\"killExecutePermissionsDesc\"));            }        } catch (Exception e) {            logger.error(\"Failed to find current user kill flow permission flag, caused by:{}.\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxCheckUserScheduleFlowPermission", "params": ["HttpServletRequest", "HttpServletResponse", "HashMap<String,Object>", "Session"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxCheckUserScheduleFlowPermission(HttpServletRequest req, HttpServletResponse resp,        HashMap<String, Object> resultMap, Session session) {        try {            if (session != null) {                final User user = session.getUser();                if (wtss_project_privilege_check) {                    int scheduleFlowFlag = checkUserOperatorFlag(user);                    resultMap.put(\"scheduleFlowFlag\", scheduleFlowFlag);                    logger.info(\"current user schedule flow permission flag is scheduleFlowFlag=\" + scheduleFlowFlag);                } else {                    resultMap.put(\"scheduleFlowFlag\", 1);                }                Map<String, String> dataMap = loadProjectManagerServletI18nData();                resultMap.put(\"scheduleFlowTitle\", dataMap.get(\"scheduleFlowTitle\"));                resultMap.put(\"schFlowPermission\", dataMap.get(\"schFlowPermission\"));                resultMap.put(\"noSchPermissionsFlow\", dataMap.get(\"noSchPermissionsFlow\"));            }        } catch (Exception e) {            logger.error(\"Failed to find current user schedule flow permission flag, caused by:{}\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxCheckDeleteScheduleInDescriptionFlagPermission", "params": ["HttpServletRequest", "HttpServletResponse", "HashMap<String,Object>", "Session"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxCheckDeleteScheduleInDescriptionFlagPermission(HttpServletRequest req, HttpServletResponse resp,        HashMap<String, Object> resultMap, Session session) {        try {            if (session != null) {                final User user = session.getUser();                if (wtss_project_privilege_check) {                    int deleteDescScheduleFlag = checkUserOperatorFlag(user);                    resultMap.put(\"deleteDescScheduleFlag\", deleteDescScheduleFlag);                    logger.info(\"current user create project permission flag is deleteDescScheduleFlag=\" + deleteDescScheduleFlag);                } else {                    resultMap.put(\"deleteDescScheduleFlag\", 1);                }            }        } catch (Exception e) {            logger.error(\"Failed to find current user delete schedule in description tag permission flag, caused by:{}\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxCheckRunningPageKillFlowPermission", "params": ["HttpServletRequest", "HttpServletResponse", "HashMap<String,Object>", "Session"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxCheckRunningPageKillFlowPermission(HttpServletRequest req, HttpServletResponse resp,        HashMap<String, Object> resultMap, Session session) {        try {            if (session != null) {                final User user = session.getUser();                if (wtss_project_privilege_check) {                    int runningPageKillFlowFlag = checkUserOperatorFlag(user);                    resultMap.put(\"runningPageKillFlowFlag\", runningPageKillFlowFlag);                    logger.info(\"current user kill page flow permission flag is runningPageKillFlowFlag=\" + runningPageKillFlowFlag);                } else {                    resultMap.put(\"runningPageKillFlowFlag\", 1);                }            }        } catch (Exception e) {            logger.error(\"Failed to find current user kill page flow permission flag, caused by:{}\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxCheckUserCreateProjectPermission", "params": ["HttpServletRequest", "HttpServletResponse", "HashMap<String,Object>", "Session"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxCheckUserCreateProjectPermission(HttpServletRequest req, HttpServletResponse resp,        HashMap<String, Object> resultMap, Session session) {        try {            if (session != null) {                final User user = session.getUser();                if (wtss_project_privilege_check) {                    int createProjectFlag = checkUserOperatorFlag(user);                    resultMap.put(\"createProjectFlag\", createProjectFlag);                    logger.info(\"current user create project permission flag is createProjectFlag=\" + createProjectFlag);                } else {                    resultMap.put(\"createProjectFlag\", 1);                }            }        } catch (Exception e) {            logger.error(\"Failed to find current user create project permission flag, caused by:{}\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxCheckUserUploadPermission", "params": ["HttpServletRequest", "HttpServletResponse", "HashMap<String,Object>", "Session"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxCheckUserUploadPermission(HttpServletRequest req, HttpServletResponse resp,        HashMap<String, Object> resultMap, Session session) {        try {            if (session != null) {                final User user = session.getUser();                int userUploadFlag = checkUserUploadFlag(user);                logger.info(\"current user upload permission flag is userUploadFlag=\" + userUploadFlag);                resultMap.put(\"userUploadFlag\", userUploadFlag);            }        } catch (Exception e) {            logger.error(\"Failed to find user upload permission flag, caused by:{}\", e);            resultMap.put(\"error\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "checkUserUploadFlag", "params": ["User"], "throws": ["SystemUserManagerException"], "modifiers": ["private"], "return_type": "int", "snippet": "    private int checkUserUploadFlag(User user) throws SystemUserManagerException {        int userUploadFlag = 1;        try {            String userName = user.getUserId();            WtssUser systemUser = this.transitionService.getSystemUserByUserName(userName);            boolean bool = systemUser.getUsername().startsWith(\"WTSS\");            if (systemUser.getRoleId() != 1) {                if (!bool) {                    // \u5982\u679c\u4e0d\u662f\u7ba1\u7406\u5458\u7528\u6237.\u5224\u65ad\u5f00\u5173\u662f\u5426\u6253\u5f00                    if (wtss_project_privilege_check) {                        userUploadFlag = 2;                    }                }            }        } catch (SystemUserManagerException e) {            logger.error(\"\u67e5\u8be2\u7528\u6237\u4fe1\u606f\u5931\u8d25,\u5931\u8d25\u539f\u56e0:{}\", e);        }        return userUploadFlag;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxCheckDeleteProjectFlagPermission", "params": ["HttpServletRequest", "HttpServletResponse", "HashMap<String,Object>", "Session"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxCheckDeleteProjectFlagPermission(HttpServletRequest req, HttpServletResponse resp,        HashMap<String, Object> resultMap, Session session) {        try {            if (session != null) {                final User user = session.getUser();                if (wtss_project_privilege_check) {                    int deleteProjectFlag = checkUserOperatorFlag(user);                    resultMap.put(\"deleteProjectFlag\", deleteProjectFlag);                    logger.info(\"current user delete project permission flag is deleteProjectFlag=\" + deleteProjectFlag);                } else {                    resultMap.put(\"deleteProjectFlag\", 1);                }            }        } catch (Exception e) {            logger.error(\"Failed to find user delete project permission flag, caused by:{}\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxCheckDepUploadPermission", "params": ["HttpServletRequest", "HttpServletResponse", "HashMap<String,Object>", "Session"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxCheckDepUploadPermission(HttpServletRequest req, HttpServletResponse resp,        HashMap<String, Object> resultMap, Session session) {        try {            if (session != null) {                // \u7528\u6237\u90e8\u95e8\u4e0a\u4f20\u7684\u5f00\u5173,\u9ed8\u8ba4\u5173\u95ed,\u6240\u6709\u90e8\u95e8\u90fd\u80fd\u4e0a\u4f20                if (wtss_dep_upload_privilege_check) {                    final User user = session.getUser();                    int uploadFlag = checkDepartmentUploadFlag(user);                    resultMap.put(\"uploadFlag\", uploadFlag);                } else {                    resultMap.put(\"uploadFlag\", \"1\");                }            }        } catch (Exception e) {            logger.error(\"Failed to find current department upload permission flag, caused by:{}\", e);            resultMap.put(\"error\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleAjaxPermission", "params": ["Project", "User", "Type", "Map<String,Object>"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean handleAjaxPermission(final Project project, final User user, final Type type,        final Map<String, Object> ret) {        if (hasPermission(project, user, type)) {            return true;        }        ret.put(\"error\", \"Permission denied. Need \" + type.toString() + \" access.\");        return false;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxFetchProjectLogEvents", "params": ["Project", "HttpServletRequest", "HashMap<String,Object>"], "throws": ["ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxFetchProjectLogEvents(final Project project,        final HttpServletRequest req, final HashMap<String, Object> ret) throws ServletException {        final int num = this.getIntParam(req, \"size\", 1000);        final int skip = this.getIntParam(req, \"skip\", 0);        final List<ProjectLogEvent> logEvents;        try {            logEvents = this.projectManager.getProjectEventLogs(project, num, skip);        } catch (final ProjectManagerException e) {            throw new ServletException(e);        }        final String[] columns = new String[]{\"user\", \"time\", \"type\", \"message\"};        ret.put(\"columns\", columns);        final List<Object[]> eventData = new ArrayList<>();        for (final ProjectLogEvent events : logEvents) {            final Object[] entry = new Object[4];            entry[0] = events.getUser();            entry[1] = events.getTime();            entry[2] = events.getType();            entry[3] = events.getMessage();            eventData.add(entry);        }        ret.put(\"logData\", eventData);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "getFlowJobTypes", "params": ["Flow"], "throws": null, "modifiers": ["private"], "return_type": "List<String>", "snippet": "    private List<String> getFlowJobTypes(final Flow flow) {        final Set<String> jobTypeSet = new HashSet<>();        for (final Node node : flow.getNodes()) {            jobTypeSet.add(node.getType());        }        final List<String> jobTypes = new ArrayList<>();        jobTypes.addAll(jobTypeSet);        return jobTypes;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxFetchFlowDetails", "params": ["Project", "HashMap<String,Object>", "HttpServletRequest"], "throws": ["ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxFetchFlowDetails(final Project project,        final HashMap<String, Object> ret, final HttpServletRequest req)        throws ServletException {        final String flowName = getParam(req, \"flow\");        Flow flow = null;        try {            flow = project.getFlow(flowName);            if (flow == null) {                ret.put(\"error\", \"Flow[ \" + flowName + \" ].\");                return;            }            ret.put(\"jobTypes\", getFlowJobTypes(flow));            if (flow.getCondition() != null) {                ret.put(\"condition\", flow.getCondition());            }        } catch (final AccessControlException e) {            ret.put(\"error\", e.getMessage());        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxFetchRunningFlow", "params": ["Project", "HashMap<String,Object>", "HttpServletRequest"], "throws": ["ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxFetchRunningFlow(final Project project,        final HashMap<String, Object> ret, final HttpServletRequest req)        throws ServletException {        final String flowName = getParam(req, \"flow\");        Flow flow = null;        try {            flow = project.getFlow(flowName);            if (flow == null) {                ret.put(\"error\", \"Flow[ \" + flowName + \" ].\");                return;            }            ret.put(\"jobTypes\", getFlowJobTypes(flow));        } catch (final AccessControlException e) {            ret.put(\"error\", e.getMessage());        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxFetchLastSuccessfulFlowExecution", "params": ["Project", "HashMap<String,Object>", "HttpServletRequest"], "throws": ["ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxFetchLastSuccessfulFlowExecution(final Project project,        final HashMap<String, Object> ret, final HttpServletRequest req)        throws ServletException {        final String flowId = getParam(req, \"flow\");        List<ExecutableFlow> exFlows = null;        try {            exFlows =                this.executorManagerAdapter.getExecutableFlows(project.getId(), flowId, 0, 1,                    Status.SUCCEEDED);        } catch (final ExecutorManagerException e) {            ret.put(\"error\", \"Error retrieving executable flows\");            return;        }        if (exFlows.size() == 0) {            ret.put(\"success\", \"false\");            ret.put(\"message\", \"This flow has no successful run.\");            return;        }        ret.put(\"success\", \"true\");        ret.put(\"message\", \"\");        ret.put(\"execId\", exFlows.get(0).getExecutionId());    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxFetchFlowExecutions", "params": ["Project", "HashMap<String,Object>", "HttpServletRequest"], "throws": ["ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxFetchFlowExecutions(final Project project,        final HashMap<String, Object> ret, final HttpServletRequest req)        throws ServletException {        final String flowId = getParam(req, \"flow\");        final int from = Integer.valueOf(getParam(req, \"start\"));        final int length = Integer.valueOf(getParam(req, \"length\"));        final ArrayList<ExecutableFlow> exFlows = new ArrayList<>();        int total = 0;        try {            total =                this.executorManagerAdapter.getExecutableFlows(project.getId(), flowId, from,                    length, exFlows);        } catch (final ExecutorManagerException e) {            ret.put(\"error\", \"Error retrieving executable flows\");        }        ret.put(\"flow\", flowId);        ret.put(\"total\", total);        ret.put(\"from\", from);        ret.put(\"length\", length);        final ArrayList<Object> history = new ArrayList<>();        for (final ExecutableFlow flow : exFlows) {            final HashMap<String, Object> flowInfo = new HashMap<>();            flowInfo.put(\"execId\", flow.getExecutionId());            flowInfo.put(\"flowId\", flow.getFlowId());            flowInfo.put(\"projectId\", flow.getProjectId());            flowInfo.put(\"status\", flow.getStatus().toString());            flowInfo.put(\"submitTime\", flow.getSubmitTime());            flowInfo.put(\"startTime\", flow.getStartTime());            flowInfo.put(\"endTime\", flow.getEndTime());            flowInfo.put(\"submitUser\", flow.getSubmitUser());\t\t\t      // FIXME\u00a0Add the run_date variable.            Map<String, String> repeatMap = flow.getRepeatOption();            if (!repeatMap.isEmpty()) {                Long recoverRunDate = Long.valueOf(String.valueOf(repeatMap.get(\"startTimeLong\")));                LocalDateTime localDateTime = new LocalDateTime(new Date(recoverRunDate)).minusDays(1);                flowInfo.put(\"runDate\", localDateTime.toString(\"yyyyMMdd\"));            } else {                Long runDate = flow.getStartTime();                LocalDateTime localDateTime = new LocalDateTime(new Date(runDate)).minusDays(1);                flowInfo.put(\"runDate\", localDateTime.toString(\"yyyyMMdd\"));            }            history.add(flowInfo);        }        ret.put(\"executions\", history);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleDownloadProject", "params": ["HttpServletRequest", "HttpServletResponse", "Session"], "throws": ["ServletException", "IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void handleDownloadProject(final HttpServletRequest req,        final HttpServletResponse resp, final Session session) throws ServletException,        IOException {        final User user = session.getUser();        final String projectName = getParam(req, \"project\");        logger.info(user.getUserId() + \" is downloading project: \" + projectName);        final Project project = this.projectManager.getProject(projectName);        if (project == null) {            this.setErrorMessageInCookie(resp, \"Project \" + projectName                + \" doesn't exist.\");            resp.sendRedirect(req.getContextPath());            return;        }        if (!hasPermission(project, user, Type.READ)) {            this.setErrorMessageInCookie(resp, \"No permission to download project \" + projectName                + \".\");            resp.sendRedirect(req.getContextPath());            return;        }        int version = -1;        if (hasParam(req, \"version\")) {            version = getIntParam(req, \"version\");        }        ProjectFileHandler projectFileHandler = null;        FileInputStream inStream = null;        OutputStream outStream = null;        try {            projectFileHandler =                this.projectManager.getProjectFileHandler(project, version);            if (projectFileHandler == null) {                this.setErrorMessageInCookie(resp, \"Project \" + projectName                    + \" with version \" + version + \" doesn't exist\");                resp.sendRedirect(req.getContextPath());                return;            }            final File projectZipFile = projectFileHandler.getLocalFile();            final String logStr =                String.format(                    \"downloading project zip file for project \\\"%s\\\" at \\\"%s\\\"\"                        + \" size: %d type: %s  fileName: \\\"%s\\\"\",                    projectFileHandler.getFileName(),                    projectZipFile.getAbsolutePath(), projectZipFile.length(),                    projectFileHandler.getFileType(),                    projectFileHandler.getFileName());            logger.info(logStr);            // now set up HTTP response for downloading file            inStream = new FileInputStream(projectZipFile);            resp.setContentType(APPLICATION_ZIP_MIME_TYPE);            final String headerKey = \"Content-Disposition\";            final String headerValue =                String.format(\"attachment; filename=\\\"%s\\\"\",                    projectFileHandler.getFileName());            resp.setHeader(headerKey, headerValue);            resp.setHeader(\"version\",                Integer.toString(projectFileHandler.getVersion()));            resp.setHeader(\"projectId\",                Integer.toString(projectFileHandler.getProjectId()));            outStream = resp.getOutputStream();            final byte[] buffer = new byte[this.downloadBufferSize];            int bytesRead = -1;            while ((bytesRead = inStream.read(buffer)) != -1) {                outStream.write(buffer, 0, bytesRead);            }        } catch (final Throwable e) {            logger.error(                \"Encountered error while downloading project zip file for project: \"                    + projectName + \" by user: \" + user.getUserId(), e);            throw new ServletException(e);        } finally {            IOUtils.closeQuietly(inStream);            IOUtils.closeQuietly(outStream);            if (projectFileHandler != null) {                projectFileHandler.deleteLocalFile();            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handlePurgeProject", "params": ["HttpServletRequest", "HttpServletResponse", "Session"], "throws": ["ServletException", "IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void handlePurgeProject(final HttpServletRequest req,        final HttpServletResponse resp, final Session session) throws ServletException,        IOException {        final User user = session.getUser();        final HashMap<String, Object> ret = new HashMap<>();        boolean isOperationSuccessful = true;        try {            Project project = null;            final String projectParam = getParam(req, \"project\");            if (StringUtils.isNumeric(projectParam)) {                project = this.projectManager.getProject(Integer.parseInt(projectParam)); // get                // project                // by                // Id            } else {                project = this.projectManager.getProject(projectParam); // get project by                // name (name cannot                // start                // from ints)            }            // invalid project            if (project == null) {                ret.put(\"error\", \"invalid project\");                isOperationSuccessful = false;            }            // project is already deleted            if (isOperationSuccessful                && this.projectManager.isActiveProject(project.getId())) {                ret.put(\"error\", \"Project \" + project.getName()                    + \" should be deleted before purging\");                isOperationSuccessful = false;            }            // only eligible users can purge a project            if (isOperationSuccessful && !hasPermission(project, user, Type.ADMIN)) {                ret.put(\"error\", \"Cannot purge. User '\" + user.getUserId()                    + \"' is not an ADMIN.\");                isOperationSuccessful = false;            }            if (isOperationSuccessful) {                this.projectManager.purgeProject(project, user);            }        } catch (final Exception e) {            ret.put(\"error\", e.getMessage());            isOperationSuccessful = false;        }        ret.put(\"success\", isOperationSuccessful);        this.writeJSON(resp, ret);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "removeAssociatedSchedules", "params": ["Project"], "throws": ["ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void removeAssociatedSchedules(final Project project) throws ServletException {        // remove regular schedules        try {            for (final Schedule schedule : this.scheduleManager.getSchedules()) {                if (schedule.getProjectId() == project.getId()) {                    logger.info(\"removing schedule \" + schedule.getScheduleId());                    this.scheduleManager.removeSchedule(schedule);                }            }        } catch (final ScheduleManagerException e) {            throw new ServletException(e);        }        // remove flow trigger schedules        try {            if (this.enableQuartz) {                this.scheduler.unscheduleAll(project);            }        } catch (final SchedulerException e) {            throw new ServletException(e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxFetchProjectSchedules", "params": ["Project", "HashMap<String,Object>"], "throws": ["ServletException", "IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxFetchProjectSchedules(final Project project, final HashMap<String, Object> ret) throws ServletException,        IOException {        try {            for (final Schedule schedule : this.scheduleManager.getSchedules()) {                if (schedule.getProjectId() == project.getId()) {                    ret.put(\"hasSchedule\", true);                    break;                }            }        } catch (Exception e) {            logger.error(e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleRemoveProject", "params": ["HttpServletRequest", "HttpServletResponse", "Session"], "throws": ["ServletException", "IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void handleRemoveProject(final HttpServletRequest req,        final HttpServletResponse resp, final Session session) throws ServletException,        IOException {        final User user = session.getUser();        final String projectName = getParam(req, \"project\");        final Project project = this.projectManager.getProject(projectName);        if (project == null) {            this.setErrorMessageInCookie(resp, \"Project \" + projectName + \" doesn't exist.\");            logger.info(\"Project is null, Redirect to ---> \" + req.getContextPath());            resp.sendRedirect(req.getContextPath());            return;        }        if (!hasPermission(project, user, Type.ADMIN)) {            this.setErrorMessageInCookie(resp,\"Cannot delete. User '\" + user.getUserId() + \"' is not an ADMIN.\");            logger.info(\"Have no permission, Redirect to ---> \" + req.getRequestURI() + \"?project=\" + projectName);            resp.sendRedirect(req.getRequestURI() + \"?project=\" + projectName);            return;        }        // FIXME\u00a0Added the judgment that if the job stream is running, the project cannot be deleted.        List<Flow> runningFlows = this.projectManager.getRunningFlow(project);        if (runningFlows != null && runningFlows.size() != 0) {            this.setErrorMessageInCookie(resp,\"\u5de5\u4f5c\u6d41: \" + runningFlows.stream()                .map(Flow::getId).collect(Collectors.toList()).toString() + \" \u6ca1\u6709\u7ed3\u675f, \u4e0d\u80fd\u5220\u9664\u8be5\u5de5\u7a0b.\");            logger.info(\"Flow is not finished, Redirect to ---> \" + req.getRequestURI() + \"?project=\" + projectName);            resp.sendRedirect(req.getRequestURI() + \"?project=\" + projectName);            return;        }        removeAssociatedSchedules(project);        try {            this.projectManager.removeProject(project, user);        } catch (final ProjectManagerException e) {            this.setErrorMessageInCookie(resp, e.getMessage());            logger.info(\"Remove project error, Redirect to ---> \" + req.getRequestURI() + \"?project=\" + projectName);            resp.sendRedirect(req.getRequestURI() + \"?project=\" + projectName);            return;        }        this.setSuccessMessageInCookie(resp, \"Delete Project[\" + projectName + \"] Success.\");        //\u5220\u9664\u6210\u529f\u540e\u63a7\u5236\u524d\u7aef\u9875\u9762\u8df3\u8f6c\u4f4d\u7f6e        resp.sendRedirect(\"/index\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxChangeDescription", "params": ["Project", "HashMap<String,Object>", "HttpServletRequest", "User"], "throws": ["ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxChangeDescription(final Project project,        final HashMap<String, Object> ret, final HttpServletRequest req, final User user)        throws ServletException {        final String description = getParam(req, \"description\");        //FIXME\u00a0HTML escapes to prevent XSS attacks.        String saftyStr = StringEscapeUtils.escapeHtml(description);        project.setDescription(saftyStr);        try {            this.projectManager.updateProjectDescription(project, description, user);        } catch (final ProjectManagerException e) {            ret.put(\"error\", e.getMessage());        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxFetchJobInfo", "params": ["Project", "HashMap<String,Object>", "HttpServletRequest"], "throws": ["ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxFetchJobInfo(final Project project, final HashMap<String, Object> ret,        final HttpServletRequest req) throws ServletException {        final String flowName = getParam(req, \"flowName\");        final String jobName = getParam(req, \"jobName\");        Map<String, String> dataMap = loadProjectManagerServletI18nData();        final Flow flow = project.getFlow(flowName);        if (flow == null) {            ret.put(\"error\", dataMap.get(\"project\") + project.getName() + dataMap.get(\"notExistFlow\") + flowName);            return;        }        final Node node = flow.getNode(jobName);        if (node == null) {            ret.put(\"error\", dataMap.get(\"flow\") + flowName + dataMap.get(\"notExistJob\") + jobName);            return;        }        Props jobProp;        try {            jobProp = this.projectManager.getProperties(project, flow, jobName, node.getJobSource());        } catch (final ProjectManagerException e) {            ret.put(\"error\", \"Failed to retrieve job properties!\");            return;        }        if (jobProp == null) {            jobProp = new Props();        }        Props overrideProp;        try {            overrideProp = this.projectManager                .getJobOverrideProperty(project, flow, jobName, node.getJobSource());        } catch (final ProjectManagerException e) {            ret.put(\"error\", \"Failed to retrieve job override properties!\");            return;        }        ret.put(\"jobName\", node.getId());        ret.put(\"jobType\", jobProp.get(\"type\"));        if (overrideProp == null) {            overrideProp = new Props(jobProp);        }        final Map<String, String> generalParams = new HashMap<>();        final Map<String, String> overrideParams = new HashMap<>();        for (final String ps : jobProp.getKeySet()) {            generalParams.put(ps, jobProp.getString(ps));        }        for (final String ops : overrideProp.getKeySet()) {            overrideParams.put(ops, overrideProp.getString(ops));        }        ret.put(\"generalParams\", generalParams);        ret.put(\"overrideParams\", overrideParams);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxSetJobOverrideProperty", "params": ["Project", "HashMap<String,Object>", "HttpServletRequest", "User"], "throws": ["ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxSetJobOverrideProperty(final Project project,        final HashMap<String, Object> ret, final HttpServletRequest req, final User user)        throws ServletException {        final String flowName = getParam(req, \"flowName\");        final String jobName = getParam(req, \"jobName\");        final Flow flow = project.getFlow(flowName);        Map<String, String> dataMap = loadProjectManagerServletI18nData();        if (flow == null) {            ret.put(\"error\",                dataMap.get(\"project\") + project.getName() + dataMap.get(\"notExistFlow\") + flowName);            return;        }        final Node node = flow.getNode(jobName);        if (node == null) {            ret.put(\"error\", dataMap.get(\"flow\") + flowName + dataMap.get(\"notExistJob\") + jobName);            return;        }        final Map<String, String> jobParamGroup = this.getParamGroup(req, \"jobOverride\");        final Props overrideParams = new Props(null, jobParamGroup);        try {            this.projectManager                .setJobOverrideProperty(project, flow, overrideParams, jobName, node.getJobSource(),                    user);        } catch (final ProjectManagerException e) {            ret.put(\"error\", dataMap.get(\"uploadJobCoverFieldError\"));        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxFetchProjectFlows", "params": ["Project", "HashMap<String,Object>", "HttpServletRequest"], "throws": ["ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxFetchProjectFlows(final Project project, final HashMap<String, Object> ret,        final HttpServletRequest req) throws ServletException {        final ArrayList<Map<String, Object>> flowList = new ArrayList<>();        Map<String, String> dataMap = loadProjectManagerServletI18nData();        for (final Flow flow : project.getFlows()) {            if (!flow.isEmbeddedFlow()) {                final HashMap<String, Object> flowObj = new HashMap<>();                flowObj.put(\"flowId\", flow.getId());\t\t\t\t        // FIXME\u00a0Get the last execution information of the project Flow.                ExecutableFlow exFlow = null;                try {//\u83b7\u53d6\u9879\u76eeFlow\u6700\u540e\u4e00\u6b21\u6267\u884c\u4fe1\u606f                    exFlow = this.executorManagerAdapter.getProjectLastExecutableFlow(project.getId(), flow.getId());                    if (null != exFlow) {                        flowObj.put(\"flowStatus\", exFlow.getStatus().getNumVal());                        flowObj.put(\"flowExecId\", exFlow.getExecutionId());                    } else {                        flowObj.put(\"flowStatus\", \"NoHistory\");                        flowObj.put(\"flowExecId\", \"NoHistory\");                    }                } catch (final ExecutorManagerException e) {                    ret.put(\"error\", dataMap.get(\"getLastRunFailed\"));                    return;                }                flowList.add(flowObj);            }        }        ret.put(\"flows\", flowList);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxFetchFlowGraph", "params": ["Project", "HashMap<String,Object>", "HttpServletRequest"], "throws": ["ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxFetchFlowGraph(final Project project, final HashMap<String, Object> ret,        final HttpServletRequest req) throws ServletException {        final String flowId = getParam(req, \"flow\");        fillFlowInfo(project, flowId, ret);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "fillFlowInfo", "params": ["Project", "String", "HashMap<String,Object>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void fillFlowInfo(final Project project, final String flowId, final HashMap<String, Object> ret) {        final Flow flow = project.getFlow(flowId);        if (flow == null) {            ret.put(\"error\", \"Flow \" + flowId + \" not found in project \" + project.getName());            return;        }        final ArrayList<Map<String, Object>> nodeList = new ArrayList<>();        for (final Node node : flow.getNodes()) {            final HashMap<String, Object> nodeObj = new HashMap<>();            nodeObj.put(\"id\", node.getId());            nodeObj.put(\"type\", node.getType());            if (node.getCondition() != null) {                nodeObj.put(\"condition\", node.getCondition());            }            if (node.getEmbeddedFlowId() != null) {                nodeObj.put(\"flowId\", node.getEmbeddedFlowId());                fillFlowInfo(project, node.getEmbeddedFlowId(), nodeObj);            }            nodeList.add(nodeObj);            final Set<Edge> inEdges = flow.getInEdges(node.getId());            if (inEdges != null && !inEdges.isEmpty()) {                final ArrayList<String> inEdgesList = new ArrayList<>();                for (final Edge edge : inEdges) {                    inEdgesList.add(edge.getSourceId());                }                Collections.sort(inEdgesList);                nodeObj.put(\"in\", inEdgesList);            }        }        Collections.sort(nodeList, (o1, o2) -> {            final String id = (String) o1.get(\"id\");            return id.compareTo((String) o2.get(\"id\"));        });        ret.put(\"flow\", flowId);        ret.put(\"nodes\", nodeList);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxFetchFlowNodeData", "params": ["Project", "HashMap<String,Object>", "HttpServletRequest"], "throws": ["ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxFetchFlowNodeData(final Project project, final HashMap<String, Object> ret,        final HttpServletRequest req) throws ServletException {        final String flowId = getParam(req, \"flow\");        final Flow flow = project.getFlow(flowId);        final String nodeId = getParam(req, \"node\");        final Node node = flow.getNode(nodeId);        if (node == null) {            ret.put(\"error\", \"Job \" + nodeId + \" doesn't exist.\");            return;        }        ret.put(\"id\", nodeId);        ret.put(\"flow\", flowId);        ret.put(\"type\", node.getType());        final Props jobProps;        try {            jobProps = this.projectManager.getProperties(project, flow, nodeId, node.getJobSource());        } catch (final ProjectManagerException e) {            ret.put(\"error\", \"Failed to upload job override property for \" + nodeId);            return;        }        if (jobProps == null) {            ret.put(\"error\", \"Properties for \" + nodeId + \" isn't found.\");            return;        }        final Map<String, String> properties = PropsUtils.toStringMap(jobProps, true);        ret.put(\"props\", properties);        if (node.getType().equals(\"flow\")) {            if (node.getEmbeddedFlowId() != null) {                fillFlowInfo(project, node.getEmbeddedFlowId(), ret);            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxFetchFlow", "params": ["Project", "HashMap<String,Object>", "HttpServletRequest"], "throws": ["ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxFetchFlow(final Project project, final HashMap<String, Object> ret,        final HttpServletRequest req) throws ServletException {        final String flowId = getParam(req, \"flow\");        getProjectNodeTree(project, flowId, ret);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxAddProxyUser", "params": ["Project", "HashMap<String,Object>", "HttpServletRequest", "User"], "throws": ["ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxAddProxyUser(final Project project, final HashMap<String, Object> ret,        final HttpServletRequest req, final User user) throws ServletException {        final String name = getParam(req, \"name\");        logger.info(\"Adding proxy user \" + name + \" by \" + user.getUserId());        if (this.transitionService.validateProxyUser(name, user)) {            try {                this.projectManager.addProjectProxyUser(project, name, user);            } catch (final ProjectManagerException e) {                ret.put(\"error\", e.getMessage());            }        } else {            ret.put(\"error\", \"User \" + user.getUserId()                + \" has no permission to add \" + name + \" as proxy user.\");            return;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxRemoveProxyUser", "params": ["Project", "HashMap<String,Object>", "HttpServletRequest", "User"], "throws": ["ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxRemoveProxyUser(final Project project,        final HashMap<String, Object> ret, final HttpServletRequest req, final User user)        throws ServletException {        final String name = getParam(req, \"name\");        logger.info(\"Removing proxy user \" + name + \" by \" + user.getUserId());        try {            this.projectManager.removeProjectProxyUser(project, name, user);        } catch (final ProjectManagerException e) {            ret.put(\"error\", e.getMessage());        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxAddPermission", "params": ["Project", "HashMap<String,Object>", "HttpServletRequest", "User"], "throws": ["ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxAddPermission(final Project project, final HashMap<String, Object> ret,        final HttpServletRequest req, final User user) throws ServletException {        final String name = getParam(req, \"name\");        final boolean group = Boolean.parseBoolean(getParam(req, \"group\"));        if (group) {            if (project.getGroupPermission(name) != null) {                ret.put(\"error\", \"Group permission already exists.\");                return;            }            if (!this.transitionService.validateGroup(name)) {                ret.put(\"error\", \"Group is invalid.\");                return;            }        } else {            if (project.getUserPermission(name) != null) {                ret.put(\"error\", \"User permission already exists.\");                return;            }            if (!this.transitionService.validateUser(name)) {                ret.put(\"error\", \"User is invalid.\");                return;            }        }        final boolean admin = Boolean.parseBoolean(getParam(req, \"permissions[admin]\"));        final boolean read = Boolean.parseBoolean(getParam(req, \"permissions[read]\"));        final boolean write = Boolean.parseBoolean(getParam(req, \"permissions[write]\"));        final boolean execute =            Boolean.parseBoolean(getParam(req, \"permissions[execute]\"));        final boolean schedule =            Boolean.parseBoolean(getParam(req, \"permissions[schedule]\"));        final Permission perm = new Permission();        if (admin) {            perm.setPermission(Type.ADMIN, true);\t\t\t// FIXME\u00a0admin can READ WRITE EXECUTE SCHEDULE permission.            perm.setPermission(Type.READ, true);            perm.setPermission(Type.WRITE, true);            perm.setPermission(Type.EXECUTE, true);            perm.setPermission(Type.SCHEDULE, true);        } else {            perm.setPermission(Type.READ, read);            perm.setPermission(Type.WRITE, write);            perm.setPermission(Type.EXECUTE, execute);            perm.setPermission(Type.SCHEDULE, schedule);        }        try {            this.projectManager.updateProjectPermission(project, name, perm, group, user);        } catch (final ProjectManagerException e) {            ret.put(\"error\", e.getMessage());        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxChangePermissions", "params": ["Project", "HashMap<String,Object>", "HttpServletRequest", "User"], "throws": ["ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxChangePermissions(final Project project, final HashMap<String, Object> ret,        final HttpServletRequest req, final User user)        throws ServletException {        Map<String, String> dataMap = loadProjectManagerServletI18nData();        final boolean admin = false;//Boolean.parseBoolean(getParam(req, \"permissions[admin]\"));        final boolean read = Boolean.parseBoolean(getParam(req, \"permissions[read]\"));        final boolean write = Boolean.parseBoolean(getParam(req, \"permissions[write]\"));        final boolean execute = Boolean.parseBoolean(getParam(req, \"permissions[execute]\"));        final boolean schedule = Boolean.parseBoolean(getParam(req, \"permissions[schedule]\"));        final boolean group = false;//Boolean.parseBoolean(getParam(req, \"group\"));        final String name = getParam(req, \"name\");        final Permission perm;        if (group) {            perm = project.getGroupPermission(name);        } else {            perm = project.getUserPermission(name);        }        if (perm == null) {            ret.put(\"error\", \"Permissions for \" + name + \" cannot be found.\");            return;        }        if (admin || read || write || execute || schedule) {            if (admin) {                perm.setPermission(Type.ADMIN, true);                perm.setPermission(Type.READ, false);                perm.setPermission(Type.WRITE, false);                perm.setPermission(Type.EXECUTE, false);                perm.setPermission(Type.SCHEDULE, false);            } else {                perm.setPermission(Type.ADMIN, false);                perm.setPermission(Type.READ, read);                perm.setPermission(Type.WRITE, write);                perm.setPermission(Type.EXECUTE, execute);                perm.setPermission(Type.SCHEDULE, schedule);            }            try {                WtssUser wtssUser = this.transitionService.getSystemUserByUserName(name);                if (wtssUser != null) {                    String createUser = project.getCreateUser();                    WtssUser currentUser = this.transitionService.getSystemUserByUserName(wtssUser.getUsername());                    // \u5224\u65ad\u7528\u6237\u89d2\u8272  roleId 1:\u7ba1\u7406\u5458, 2:\u666e\u901a\u7528\u6237                    if (currentUser.getRoleId() != 1) {                        if (createUser.startsWith(\"WTSS\")) {                            String userId = wtssUser.getUserId();                            if (!userId.startsWith(\"wtss_WTSS\")) {                                int roleId = wtssUser.getRoleId();                                // \u53ea\u6821\u9a8c\u975e\u7ba1\u7406\u5458                                if (roleId != 1) {                                    if (Pattern.compile(\"^[0-9]+$\").matcher(userId).matches()) {                                        if (write || execute || schedule) {                                            throw new SystemUserManagerException(dataMap.get(\"cannotpermitrealnamewriteexecsch\"));                                        } else {                                            // \u6267\u884c\u6dfb\u52a0                                            this.projectManager.updateProjectPermission(project, name, perm, group, user);                                        }                                    } else if (userId.startsWith(\"wtss_hduser\")) {                                        if (write || execute || schedule) {                                            throw new SystemUserManagerException(dataMap.get(\"cannotpermitsystemUserwriteexecsch\"));                                        } else {                                            // \u6267\u884c\u6dfb\u52a0                                            this.projectManager.updateProjectPermission(project, name, perm, group, user);                                        }                                    } else {                                        throw new SystemUserManagerException(dataMap.get(\"canNotAddUnknown\"));                                    }                                } else {                                    this.projectManager.updateProjectPermission(project, name, perm, group, user);                                }                            }                        } else {                            this.projectManager.updateProjectPermission(project, name, perm, group, user);                        }                    } else {                        this.projectManager.updateProjectPermission(project, name, perm, group, user);                    }                } else {                    ret.put(\"error\", \"User is not exist.\");                }            } catch (final ProjectManagerException e) {                ret.put(\"error\", e.getMessage());            } catch (SystemUserManagerException e) {                // \u53d1\u751f\u5f02\u5e38\u5219\u56de\u663e\u53ea\u8bfb\u5c5e\u6027\u5373\u53ef                perm.setPermission(Type.ADMIN, false);                perm.setPermission(Type.READ, true);                perm.setPermission(Type.WRITE, false);                perm.setPermission(Type.EXECUTE, false);                perm.setPermission(Type.SCHEDULE, false);                this.projectManager.updateProjectPermission(project, name, perm, group, user);                ret.put(\"error\", e.getMessage());            }        } else {            try {                this.projectManager.removeProjectPermission(project, name, group, user);            } catch (final ProjectManagerException e) {                ret.put(\"error\", e.getMessage());            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxGetPermissions", "params": ["Project", "HashMap<String,Object>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxGetPermissions(final Project project, final HashMap<String, Object> ret) {        final ArrayList<HashMap<String, Object>> permissions = new ArrayList<>();        for (final Pair<String, Permission> perm : project.getUserPermissions()) {            final HashMap<String, Object> permObj = new HashMap<>();            final String userId = perm.getFirst();            permObj.put(\"username\", userId);            permObj.put(\"permission\", perm.getSecond().toStringArray());            permissions.add(permObj);        }        ret.put(\"permissions\", permissions);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxGetGroupPermissions", "params": ["Project", "HashMap<String,Object>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxGetGroupPermissions(final Project project,        final HashMap<String, Object> ret) {        final ArrayList<HashMap<String, Object>> permissions =            new ArrayList<>();        for (final Pair<String, Permission> perm : project.getGroupPermissions()) {            final HashMap<String, Object> permObj = new HashMap<>();            final String userId = perm.getFirst();            permObj.put(\"username\", userId);            permObj.put(\"permission\", perm.getSecond().toStringArray());            permissions.add(permObj);        }        ret.put(\"permissions\", permissions);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxGetProxyUsers", "params": ["Project", "HashMap<String,Object>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxGetProxyUsers(final Project project, final HashMap<String, Object> ret) {        final String[] proxyUsers = project.getProxyUsers().toArray(new String[0]);        ret.put(\"proxyUsers\", proxyUsers);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxCheckForWritePermission", "params": ["Project", "User", "HashMap<String,Object>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxCheckForWritePermission(final Project project, final User user,        final HashMap<String, Object> ret) {        ret.put(\"hasWritePermission\", hasPermission(project, user, Type.WRITE));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleProjectLogsPage", "params": ["HttpServletRequest", "HttpServletResponse", "Session"], "throws": ["ServletException", "IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void handleProjectLogsPage(final HttpServletRequest req, final HttpServletResponse resp,        final Session session) throws ServletException, IOException {        final Page page = newPage(req, resp, session,\"azkaban/webapp/servlet/velocity/projectlogpage.vm\");        Map<String, String> projectlogpageMap;        Map<String, String> subPageMap1;        Map<String, String> subPageMap2;        Map<String, String> subPageMap3;        Map<String, String> subPageMap4;        Map<String, String> subPageMap5;        String languageType = LoadJsonUtils.getLanguageType();        if (languageType.equalsIgnoreCase(\"zh_CN\")) {            // \u6dfb\u52a0\u56fd\u9645\u5316\u6807\u7b7e            projectlogpageMap = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-zh_CN.json\",                \"azkaban.webapp.servlet.velocity.projectlogpage.vm\");            subPageMap1 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-zh_CN.json\",                \"azkaban.webapp.servlet.velocity.nav.vm\");            subPageMap2 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-zh_CN.json\",                \"azkaban.webapp.servlet.velocity.projectpageheader.vm\");            subPageMap3 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-zh_CN.json\",                \"azkaban.webapp.servlet.velocity.projectnav.vm\");            subPageMap4 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-zh_CN.json\",                \"azkaban.webapp.servlet.velocity.projectsidebar.vm\");            subPageMap5 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-zh_CN.json\",                \"azkaban.webapp.servlet.velocity.projectmodals.vm\");        } else {            // \u6dfb\u52a0\u56fd\u9645\u5316\u6807\u7b7e            projectlogpageMap = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-en_US.json\",                \"azkaban.webapp.servlet.velocity.projectlogpage.vm\");            subPageMap1 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-en_US.json\",                \"azkaban.webapp.servlet.velocity.nav.vm\");            subPageMap2 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-en_US.json\",                \"azkaban.webapp.servlet.velocity.projectpageheader.vm\");            subPageMap3 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-en_US.json\",                \"azkaban.webapp.servlet.velocity.projectnav.vm\");            subPageMap4 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-en_US.json\",                \"azkaban.webapp.servlet.velocity.projectsidebar.vm\");            subPageMap5 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-en_US.json\",                \"azkaban.webapp.servlet.velocity.projectmodals.vm\");        }        projectlogpageMap.forEach(page::add);        subPageMap1.forEach(page::add);        subPageMap2.forEach(page::add);        subPageMap3.forEach(page::add);        subPageMap4.forEach(page::add);        subPageMap5.forEach(page::add);        page.add(\"currentlangType\", languageType);        final String projectName = getParam(req, \"project\");        final User user = session.getUser();        PageUtils.hideUploadButtonWhenNeeded(page, session, this.lockdownUploadProjects);        Project project = null;        try {            project = this.projectManager.getProject(projectName);            if (project == null) {                page.add(\"errorMsg\", \"\u9879\u76ee \" + projectName + \" \u4e0d\u5b58\u5728.\");            } else {                if (!hasPermission(project, user, Type.READ)) {                    throw new AccessControlException(\"\u6ca1\u6709\u6743\u9650\u67e5\u770b\u8fd9\u4e2a\u9879\u76ee \" + projectName + \".\");                }                page.add(\"project\", project);                page.add(\"admins\", Utils.flattenToString(project.getUsersWithPermission(Type.ADMIN), \",\"));                final Permission perm = this.getPermissionObject(project, user, Type.ADMIN);                page.add(\"userpermission\", perm);                final boolean adminPerm = perm.isPermissionSet(Type.ADMIN);                if (adminPerm) {                    page.add(\"admin\", true);                }                // Set this so we can display execute buttons only to those who have                // access.                if (perm.isPermissionSet(Type.EXECUTE) || adminPerm) {                    page.add(\"exec\", true);                } else {                    page.add(\"exec\", false);                }                if (user.getRoles().contains(\"admin\")) {                    page.add(\"isSystemAdmin\", true);                }                if (hasPermission(project, user, Type.ADMIN)) {                    page.add(\"isProjectAdmin\", true);                }                int uploadFlag;                // \u5148\u5224\u65ad\u5f00\u5173\u662f\u5426\u6253\u5f00,\u5982\u679c\u5f00\u5173\u6253\u5f00,\u5219\u6821\u9a8c\u90e8\u95e8\u4e0a\u4f20\u6743\u9650,\u5982\u679c\u5173\u95ed,\u5219\u4e0d\u9700\u8981\u6821\u9a8c                // \u5224\u65ad\u662f\u5426\u5177\u6709\u4e0a\u4f20\u6743\u9650  uploadFlag 1:\u5141\u8bb8, 2:\u4e0d\u5141\u8bb8,\u5176\u4ed6\u503c:\u4e0d\u5141\u8bb8                if (wtss_dep_upload_privilege_check) {                    uploadFlag = checkDepartmentUploadFlag(user);                } else {                    uploadFlag = 1;                }                // \u9700\u8981\u9996\u5148\u9a8c\u8bc1\u90e8\u95e8\u4e0a\u4f20\u6743\u9650\u662f\u5426\u88ab\u5141\u8bb8, \u518d\u5224\u65ad\u662f\u5426\u6ee1\u8db3\u539f\u6709\u4e0a\u4f20\u8bb8\u53ef\u7684\u903b\u8f91                if ((uploadFlag == 1) && (perm.isPermissionSet(Type.WRITE) || adminPerm)) {                    page.add(\"isWritePerm\", true);                }            }        } catch (final AccessControlException e) {            page.add(\"errorMsg\", e.getMessage());        } catch (SystemUserManagerException e) {            logger.error(\"\u90e8\u95e8\u4e0a\u4f20\u6743\u9650\u6807\u8bc6\u67e5\u8be2\u5f02\u5e38.\");        }        final int numBytes = 1024;        // Really sucks if we do a lot of these because it'll eat up memory fast.        // But it's expected that this won't be a heavily used thing. If it is,        // then we'll revisit it to make it more stream friendly.        final StringBuffer buffer = new StringBuffer(numBytes);        page.add(\"log\", buffer.toString());        page.render();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleJobHistoryPage", "params": ["HttpServletRequest", "HttpServletResponse", "Session"], "throws": ["ServletException", "IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void handleJobHistoryPage(final HttpServletRequest req,        final HttpServletResponse resp, final Session session) throws ServletException,        IOException {        final Page page =            newPage(req, resp, session,                \"azkaban/webapp/servlet/velocity/jobhistorypage.vm\");        String languageType = LoadJsonUtils.getLanguageType();        Map<String, String> jobhistorypageMap;        Map<String, String> subPageMap1;        if (languageType.equalsIgnoreCase(\"zh_CN\")) {            // \u6dfb\u52a0\u56fd\u9645\u5316\u6807\u7b7e            jobhistorypageMap = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-zh_CN.json\",                \"azkaban.webapp.servlet.velocity.jobhistorypage.vm\");            subPageMap1 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-zh_CN.json\",                \"azkaban.webapp.servlet.velocity.nav.vm\");        } else {            // \u6dfb\u52a0\u56fd\u9645\u5316\u6807\u7b7e            jobhistorypageMap = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-en_US.json\",                \"azkaban.webapp.servlet.velocity.jobhistorypage.vm\");            subPageMap1 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-en_US.json\",                \"azkaban.webapp.servlet.velocity.nav.vm\");        }        jobhistorypageMap.forEach(page::add);        subPageMap1.forEach(page::add);        final String projectName = getParam(req, \"project\");        final User user = session.getUser();        final Project project = this.projectManager.getProject(projectName);        Map<String, String> dataMap = loadProjectManagerServletI18nData();        if (project == null) {            page.add(\"errorMsg\", dataMap.get(\"project\") + projectName + dataMap.get(\"notExist\"));            page.render();            return;        }        if (!hasPermission(project, user, Type.READ)) {            page.add(\"errorMsg\", dataMap.get(\"noPerAccessProject\") + projectName + \".\");            page.render();            return;        }        final String jobId = getParam(req, \"job\");        final int pageNum = getIntParam(req, \"page\", 1);        final int pageSize = getIntParam(req, \"size\", 25);        page.add(\"projectId\", project.getId());        page.add(\"projectName\", project.getName());        page.add(\"jobId\", jobId);        page.add(\"page\", pageNum);        final int skipPage = (pageNum - 1) * pageSize;        int numResults = 0;        try {            numResults = this.executorManagerAdapter.getNumberOfJobExecutions(project, jobId);            final int maxPage = (numResults / pageSize) + 1;            List<ExecutableJobInfo> jobInfo =                this.executorManagerAdapter.getExecutableJobs(project, jobId, skipPage, pageSize);            if (jobInfo == null || jobInfo.isEmpty()) {                jobInfo = null;            }            if (jobInfo != null) {                jobInfo.stream().forEach(executableJobInfo -> {                    ExecutableFlow executionFlow = null;                    try {                        executionFlow = this.executorManagerAdapter.getExecutableFlow(executableJobInfo.getExecId());                    } catch (ExecutorManagerException e) {                        e.printStackTrace();                    }                    Map<String, String> repeatMap = executionFlow.getRepeatOption();                    if (!repeatMap.isEmpty()) {                        Long recoverRunDate = Long.valueOf(String.valueOf(repeatMap.get(\"startTimeLong\")));                        LocalDateTime localDateTime = new LocalDateTime(new Date(recoverRunDate)).minusDays(1);                        Date date = localDateTime.toDate();                        executableJobInfo.setRunDate(date.getTime());                    } else {                        Long runDate = executionFlow.getStartTime();                        if (-1 != runDate) {                            LocalDateTime localDateTime = new LocalDateTime(new Date(runDate)).minusDays(1);                            Date date = localDateTime.toDate();                            executableJobInfo.setRunDate(date.getTime());                        } else {                            executableJobInfo.setRunDate(runDate);                        }                    }                });            }            page.add(\"history\", jobInfo);            page.add(\"previous\", new PageSelection(dataMap.get(\"previousPage\"), pageSize, true, false,                Math.max(pageNum - 1, 1)));            page.add(\"next\", new PageSelection(dataMap.get(\"nextPage\"), pageSize, false, false, Math.min(                pageNum + 1, maxPage)));            if (jobInfo != null) {//        long moyenne = 0;//        long allRunTime = 0;//        int successFlowNum = 0;//        for (final ExecutableJobInfo info : jobInfo) {//          if(Status.SUCCEEDED.equals(info.getStatus())){//            successFlowNum += 1;//            allRunTime += (info.getEndTime() - info.getStartTime());//          }//        }//        if(allRunTime !=0 && successFlowNum !=0){//          moyenne = allRunTime/successFlowNum;//        }                final ArrayList<Object> dataSeries = new ArrayList<>();                for (final ExecutableJobInfo info : jobInfo) {                    final Map<String, Object> map = info.toObject();                    dataSeries.add(map);                }                page.add(\"dataSeries\", JSONUtils.toJSON(dataSeries));            } else {                page.add(\"dataSeries\", \"[]\");            }        } catch (final ExecutorManagerException e) {            page.add(\"errorMsg\", e.getMessage());        }        // Now for the 5 other values.        int pageStartValue = 1;        if (pageNum > 3) {            pageStartValue = pageNum - 2;        }        final int maxPage = (numResults / pageSize) + 1;        page.add(\"page1\",            new PageSelection(String.valueOf(pageStartValue), pageSize,pageStartValue > maxPage,                pageStartValue == pageNum, Math.min(pageStartValue, maxPage)));        pageStartValue++;        page.add(\"page2\",            new PageSelection(String.valueOf(pageStartValue), pageSize,pageStartValue > maxPage,                pageStartValue == pageNum, Math.min(pageStartValue, maxPage)));        pageStartValue++;        page.add(\"page3\",            new PageSelection(String.valueOf(pageStartValue), pageSize,pageStartValue > maxPage,                pageStartValue == pageNum, Math.min(pageStartValue, maxPage)));        pageStartValue++;        page.add(\"page4\",            new PageSelection(String.valueOf(pageStartValue), pageSize,pageStartValue > maxPage,                pageStartValue == pageNum, Math.min(pageStartValue, maxPage)));        pageStartValue++;        page.add(\"page5\",            new PageSelection(String.valueOf(pageStartValue), pageSize,pageStartValue > maxPage,                pageStartValue == pageNum, Math.min(pageStartValue, maxPage)));        page.add(\"currentlangType\", languageType);        page.render();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handlePermissionPage", "params": ["HttpServletRequest", "HttpServletResponse", "Session"], "throws": ["ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void handlePermissionPage(final HttpServletRequest req, final HttpServletResponse resp,        final Session session) throws ServletException {        final Page page = newPage(req, resp, session,\"azkaban/webapp/servlet/velocity/permissionspage.vm\");        String languageType = LoadJsonUtils.getLanguageType();        Map<String, String> permissionspageMap;        Map<String, String> subPageMap1;        Map<String, String> subPageMap2;        Map<String, String> subPageMap3;        Map<String, String> subPageMap4;        Map<String, String> subPageMap5;        if (languageType.equalsIgnoreCase(\"en_US\")) {            // \u6dfb\u52a0\u56fd\u9645\u5316\u6807\u7b7e            permissionspageMap = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-en_US.json\",                \"azkaban.webapp.servlet.velocity.permissionspage.vm\");            subPageMap1 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-en_US.json\",                \"azkaban.webapp.servlet.velocity.nav.vm\");            subPageMap2 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-en_US.json\",                \"azkaban.webapp.servlet.velocity.projectmodals.vm\");            subPageMap3 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-en_US.json\",                \"azkaban.webapp.servlet.velocity.projectsidebar.vm\");            subPageMap4 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-en_US.json\",                \"azkaban.webapp.servlet.velocity.projectnav.vm\");            subPageMap5 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-en_US.json\",                \"azkaban.webapp.servlet.velocity.projectpageheader.vm\");        } else {            permissionspageMap = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-zh_CN.json\",                \"azkaban.webapp.servlet.velocity.permissionspage.vm\");            subPageMap1 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-zh_CN.json\",                \"azkaban.webapp.servlet.velocity.nav.vm\");            subPageMap2 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-zh_CN.json\",                \"azkaban.webapp.servlet.velocity.projectmodals.vm\");            subPageMap3 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-zh_CN.json\",                \"azkaban.webapp.servlet.velocity.projectsidebar.vm\");            subPageMap4 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-zh_CN.json\",                \"azkaban.webapp.servlet.velocity.projectnav.vm\");            subPageMap5 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-zh_CN.json\",                \"azkaban.webapp.servlet.velocity.projectpageheader.vm\");        }        permissionspageMap.forEach(page::add);        subPageMap1.forEach(page::add);        subPageMap2.forEach(page::add);        subPageMap3.forEach(page::add);        subPageMap4.forEach(page::add);        subPageMap5.forEach(page::add);        final String projectName = getParam(req, \"project\");        final User user = session.getUser();        PageUtils.hideUploadButtonWhenNeeded(page, session, this.lockdownUploadProjects);        Project project = null;        Map<String, String> dataMap = loadProjectManagerServletI18nData();        try {            project = this.projectManager.getProject(projectName);            if (project == null) {                page.add(\"errorMsg\", dataMap.get(\"project\") + projectName + dataMap.get(\"notExist\"));            } else {                if (!hasPermission(project, user, Type.READ)) {                    throw new AccessControlException(dataMap.get(\"noPerAccessProject\") + projectName + \".\");                }                page.add(\"project\", project);                page.add(\"username\", user.getUserId());                page.add(\"admins\", Utils.flattenToString(                    project.getUsersWithPermission(Type.ADMIN), \",\"));                final Permission perm = this.getPermissionObject(project, user, Type.ADMIN);                page.add(\"userpermission\", perm);                if (perm.isPermissionSet(Type.ADMIN)) {                    page.add(\"admin\", true);                }                final List<Pair<String, Permission>> userPermission =                    project.getUserPermissions();                if (userPermission != null && !userPermission.isEmpty()) {                    page.add(\"permissions\", userPermission);                }                final List<Pair<String, Permission>> groupPermission =                    project.getGroupPermissions();                if (groupPermission != null && !groupPermission.isEmpty()) {                    page.add(\"groupPermissions\", groupPermission);                }                final Set<String> proxyUsers = project.getProxyUsers();                final List<String> userProxyUsers = user.getProxyUsers();                if (proxyUsers != null && !proxyUsers.isEmpty()) {                    page.add(\"proxyUsers\", userProxyUsers);                }                if (user.getRoles().contains(\"admin\")) {                    page.add(\"isSystemAdmin\", true);                }                if (hasPermission(project, user, Type.ADMIN)) {                    page.add(\"isProjectAdmin\", true);                }                int uploadFlag;                // \u5148\u5224\u65ad\u5f00\u5173\u662f\u5426\u6253\u5f00,\u5982\u679c\u5f00\u5173\u6253\u5f00,\u5219\u6821\u9a8c\u90e8\u95e8\u4e0a\u4f20\u6743\u9650,\u5982\u679c\u5173\u95ed,\u5219\u4e0d\u9700\u8981\u6821\u9a8c                // \u5224\u65ad\u662f\u5426\u5177\u6709\u4e0a\u4f20\u6743\u9650  uploadFlag 1:\u5141\u8bb8, 2:\u4e0d\u5141\u8bb8,\u5176\u4ed6\u503c:\u4e0d\u5141\u8bb8                if (wtss_dep_upload_privilege_check) {                    uploadFlag = checkDepartmentUploadFlag(user);                } else {                    uploadFlag = 1;                }                // \u9700\u8981\u9996\u5148\u9a8c\u8bc1\u90e8\u95e8\u4e0a\u4f20\u6743\u9650\u662f\u5426\u88ab\u5141\u8bb8, \u518d\u5224\u65ad\u662f\u5426\u6ee1\u8db3\u539f\u6709\u4e0a\u4f20\u8bb8\u53ef\u7684\u903b\u8f91                if ((uploadFlag == 1) && (perm.isPermissionSet(Type.WRITE) || hasPermission(project, user, Type.ADMIN))) {                    page.add(\"isWritePerm\", true);                } else {                    page.add(\"isWritePerm\", false);                }                List<Map<String, Object>> projectAdminList = new ArrayList<>();                if (userPermission != null && !userPermission.isEmpty()) {                    for (Pair<String, Permission> pair : userPermission) {                        if (pair.getSecond().isPermissionNameSet(\"ADMIN\")) {                            Map<String, Object> adminMap = new HashMap<>();                            adminMap.put(\"username\", pair.getFirst());                            adminMap.put(\"permission\", pair.getSecond());                            projectAdminList.add(adminMap);                        }                    }                    page.add(\"projectAdminList\", projectAdminList);                }                List<Map<String, Object>> projectUserList = new ArrayList<>();                if (userPermission != null && !userPermission.isEmpty()) {                    for (Pair<String, Permission> pair : userPermission) {                        if (!pair.getSecond().isPermissionNameSet(\"ADMIN\")) {                            Map<String, Object> userMap = new HashMap<>();                            userMap.put(\"username\", pair.getFirst());                            userMap.put(\"permission\", pair.getSecond());                            projectUserList.add(userMap);                        }                    }                    page.add(\"projectUserList\", projectUserList);                }            }        } catch (final AccessControlException e) {            page.add(\"errorMsg\", e.getMessage());        } catch (SystemUserManagerException e) {            logger.error(\"\u90e8\u95e8\u4e0a\u4f20\u6743\u9650\u6807\u8bc6\u67e5\u8be2\u5f02\u5e38.\");        }        page.add(\"currentlangType\", languageType);        page.render();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleJobPage", "params": ["HttpServletRequest", "HttpServletResponse", "Session"], "throws": ["ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void handleJobPage(final HttpServletRequest req, final HttpServletResponse resp,        final Session session) throws ServletException {        final Page page = newPage(req, resp, session,\"azkaban/webapp/servlet/velocity/jobpage.vm\");        String languageType = LoadJsonUtils.getLanguageType();        Map<String, String> jobpageMap;        Map<String, String> subPageMap1;        if (languageType.equalsIgnoreCase(\"zh_CN\")) {            // \u6dfb\u52a0\u56fd\u9645\u5316\u6807\u7b7e            jobpageMap = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-zh_CN.json\",                \"azkaban.webapp.servlet.velocity.jobpage.vm\");            subPageMap1 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-zh_CN.json\",                \"azkaban.webapp.servlet.velocity.nav.vm\");        } else {            // \u6dfb\u52a0\u56fd\u9645\u5316\u6807\u7b7e            jobpageMap = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-en_US.json\",                \"azkaban.webapp.servlet.velocity.jobpage.vm\");            subPageMap1 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-en_US.json\",                \"azkaban.webapp.servlet.velocity.nav.vm\");        }        jobpageMap.forEach(page::add);        subPageMap1.forEach(page::add);        final String projectName = getParam(req, \"project\");        final String flowName = getParam(req, \"flow\");        final String jobName = getParam(req, \"job\");        final User user = session.getUser();        Project project = null;        Flow flow = null;        Map<String, String> dataMap = loadProjectManagerServletI18nData();        try {            project = this.projectManager.getProject(projectName);            logger.info(\"JobPage: project \" + projectName + \" version is \" + project.getVersion()                + \", reference is \" + System.identityHashCode(project));            if (project == null) {                page.add(\"errorMsg\", dataMap.get(\"project\") + projectName + dataMap.get(\"notExist\"));                page.render();                return;            }            if (!hasPermission(project, user, Type.READ)) {                throw new AccessControlException(dataMap.get(\"noPerAccessProject\") + projectName + \".\");            }            page.add(\"project\", project);            flow = project.getFlow(flowName);            if (flow == null) {                page.add(\"errorMsg\", dataMap.get(\"flow\") + flowName + dataMap.get(\"notExist\"));                page.render();                return;            }            page.add(\"flowid\", flow.getId());            page.add(\"flowId\", flow.getId());            final Node node = flow.getNode(jobName);            if (node == null) {                page.add(\"errorMsg\", dataMap.get(\"job\") + jobName + dataMap.get(\"notExist\"));                page.render();                return;            }            Props jobProp = this.projectManager.getJobOverrideProperty(project, flow, jobName, node.getJobSource());            if (jobProp == null) {                jobProp = this.projectManager.getProperties(project, flow, jobName, node.getJobSource());            }            page.add(\"jobid\", node.getId());            page.add(\"jobtype\", node.getType());            if (node.getCondition() != null) {                page.add(\"condition\", node.getCondition());            }            final ArrayList<String> dependencies = new ArrayList<>();            final Set<Edge> inEdges = flow.getInEdges(node.getId());            if (inEdges != null) {                for (final Edge dependency : inEdges) {                    dependencies.add(dependency.getSourceId());                }            }            if (!dependencies.isEmpty()) {                page.add(\"dependencies\", dependencies);            }            final ArrayList<String> dependents = new ArrayList<>();            final Set<Edge> outEdges = flow.getOutEdges(node.getId());            if (outEdges != null) {                for (final Edge dependent : outEdges) {                    dependents.add(dependent.getTargetId());                }            }            if (!dependents.isEmpty()) {                page.add(\"dependents\", dependents);            }            // Resolve property dependencies            final ArrayList<String> source = new ArrayList<>();            final String nodeSource = node.getPropsSource();            if (nodeSource != null) {                source.add(nodeSource);                FlowProps parent = flow.getFlowProps(nodeSource);                while (parent.getInheritedSource() != null) {                    source.add(parent.getInheritedSource());                    parent = flow.getFlowProps(parent.getInheritedSource());                }            }            if (!source.isEmpty()) {                page.add(\"properties\", source);            }            final ArrayList<Pair<String, String>> parameters =                new ArrayList<>();            // Parameter            for (final String key : jobProp.getKeySet()) {                final String value = jobProp.get(key);                parameters.add(new Pair<>(key, value));            }            //TODO \u7248\u672c\u7a33\u5b9a\u540e\u4f18\u5316 source.type \u8ddf data.object \u7684\u6392\u5e8f            //\u524d\u7aef\u6392\u5e8f\u4f18\u5316 Job Properties \u6839\u636e\u5c5e\u6027\u540d\u6392\u5e8f            final List<Pair<String, String>> sortedParameters = parameters.stream().sorted(Comparator.comparing(Pair::getFirst)).collect(                Collectors.toList());            final List<Pair<String, String>> finalParams = new ArrayList<>();            //data.object \u8ddf source.type \u7ec4\u5408\u6392\u5e8f            sortedParameters.stream().forEach(m -> {                    String dnum;                    String dkey = m.getFirst();                    if (dkey.contains(\"data.object\")) {                        dnum = StringUtils.substringAfter(dkey, \"data.object\");                        finalParams.add(m);                        String snum;                        for (Pair<String, String> job : sortedParameters) {                            String skey = job.getFirst();                            if (skey.contains(\"source.type\")) {                                snum = StringUtils.substringAfter(skey, \"source.type\");                                if (dnum.equals(snum)) {                                    finalParams.add(job);                                }                            }                        }                    } else if (!dkey.contains(\"data.object\") && !dkey.contains(\"source.type\")) {                        finalParams.add(m);                    }                }            );            page.add(\"parameters\", finalParams);        } catch (final AccessControlException e) {            page.add(\"errorMsg\", e.getMessage());        } catch (final ProjectManagerException e) {            page.add(\"errorMsg\", e.getMessage());        }        page.add(\"currentlangType\", languageType);        page.render();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handlePropertyPage", "params": ["HttpServletRequest", "HttpServletResponse", "Session"], "throws": ["ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void handlePropertyPage(final HttpServletRequest req,        final HttpServletResponse resp, final Session session) throws ServletException {        final Page page = newPage(req, resp, session,\"azkaban/webapp/servlet/velocity/propertypage.vm\");        String languageType = LoadJsonUtils.getLanguageType();        Map<String, String> propertypageMap;        Map<String, String> subPageMap1;        if (languageType.equalsIgnoreCase(\"zh_CN\")) {            // \u6dfb\u52a0\u56fd\u9645\u5316\u6807\u7b7e            propertypageMap = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-zh_CN.json\",                \"azkaban.webapp.servlet.velocity.propertypage.vm\");            subPageMap1 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-zh_CN.json\",                \"azkaban.webapp.servlet.velocity.nav.vm\");        } else {            // \u6dfb\u52a0\u56fd\u9645\u5316\u6807\u7b7e            propertypageMap = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-en_US.json\",                \"azkaban.webapp.servlet.velocity.propertypage.vm\");            subPageMap1 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-en_US.json\",                \"azkaban.webapp.servlet.velocity.nav.vm\");        }        propertypageMap.forEach(page::add);        subPageMap1.forEach(page::add);        final String projectName = getParam(req, \"project\");        final String flowName = getParam(req, \"flow\");        final String jobName = getParam(req, \"job\");        final String propSource = getParam(req, \"prop\");        final User user = session.getUser();        Project project = null;        Flow flow = null;        Map<String, String> dataMap = loadProjectManagerServletI18nData();        try {            project = this.projectManager.getProject(projectName);            if (project == null) {                page.add(\"errorMsg\", dataMap.get(\"project\") + projectName + dataMap.get(\"notExist\"));                logger.info(\"Display project property. Project \" + projectName + \" not found.\");                page.render();                return;            }            if (!hasPermission(project, user, Type.READ)) {                throw new AccessControlException(dataMap.get(\"noPerAccessProject\") + projectName + \".\");            }            page.add(\"project\", project);            flow = project.getFlow(flowName);            if (flow == null) {                page.add(\"errorMsg\", dataMap.get(\"flow\") + flowName + dataMap.get(\"notExist\"));                logger.info(\"Display project property. Project \" + projectName +                    \" Flow \" + flowName + \" not found.\");                page.render();                return;            }            page.add(\"flowid\", flow.getId());            final Node node = flow.getNode(jobName);            if (node == null) {                page.add(\"errorMsg\", dataMap.get(\"flow\") + jobName + dataMap.get(\"notExist\"));                logger.info(\"Display project property. Project \" + projectName +                    \" Flow \" + flowName + \" Job \" + jobName + \" not found.\");                page.render();                return;            }            final Props prop = this.projectManager.getProperties(project, flow, null, propSource);            if (prop == null) {                page.add(\"errorMsg\", dataMap.get(\"config\") + propSource + dataMap.get(\"notExist\"));                logger.info(\"Display project property. Project \" + projectName +                    \" Flow \" + flowName + \" Job \" + jobName +                    \" Property \" + propSource + \" not found.\");                page.render();                return;            }            page.add(\"property\", propSource);            page.add(\"jobid\", node.getId());            // Resolve property dependencies            final ArrayList<String> inheritProps = new ArrayList<>();            FlowProps parent = flow.getFlowProps(propSource);            while (parent.getInheritedSource() != null) {                inheritProps.add(parent.getInheritedSource());                parent = flow.getFlowProps(parent.getInheritedSource());            }            if (!inheritProps.isEmpty()) {                page.add(\"inheritedproperties\", inheritProps);            }            final ArrayList<String> dependingProps = new ArrayList<>();            FlowProps child = flow.getFlowProps(flow.getNode(jobName).getPropsSource());            while (!child.getSource().equals(propSource)) {                dependingProps.add(child.getSource());                child = flow.getFlowProps(child.getInheritedSource());            }            if (!dependingProps.isEmpty()) {                page.add(\"dependingproperties\", dependingProps);            }            final ArrayList<Pair<String, String>> parameters = new ArrayList<>();            // Parameter            for (final String key : prop.getKeySet()) {                final String value = prop.get(key);                parameters.add(new Pair<>(key, value));            }            page.add(\"parameters\", parameters);        } catch (final AccessControlException e) {            page.add(\"errorMsg\", e.getMessage());        } catch (final ProjectManagerException e) {            page.add(\"errorMsg\", e.getMessage());        }        page.render();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleFlowPage", "params": ["HttpServletRequest", "HttpServletResponse", "Session"], "throws": ["ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void handleFlowPage(final HttpServletRequest req, final HttpServletResponse resp,        final Session session) throws ServletException {        final Page page = newPage(req, resp, session,\"azkaban/webapp/servlet/velocity/flowpage.vm\");        // \u52a0\u8f7d\u56fd\u9645\u5316\u8d44\u6e90        Map<String, Map<String, String>> vmDataMap = loadFlowpageI18nData();        vmDataMap.forEach((vm, data) -> data.forEach(page::add));        final String projectName = getParam(req, \"project\");        final String flowName = getParam(req, \"flow\");        final User user = session.getUser();        page.add(\"loginUser\", user.getUserId());        Project project = null;        Flow flow = null;        Map<String, String> dataMap = loadProjectManagerServletI18nData();        try {            project = this.projectManager.getProject(projectName);            if (project == null) {                page.add(\"errorMsg\", dataMap.get(\"project\") + projectName + dataMap.get(\"notExist\"));                page.render();                return;            }            if (!hasPermission(project, user, Type.READ)) {                throw new AccessControlException(\"No permission Project \" + projectName                    + \".\");            }            final Permission perm = this.getPermissionObject(project, user, Type.ADMIN);            final boolean adminPerm = perm.isPermissionSet(Type.ADMIN);            if (perm.isPermissionSet(Type.EXECUTE) || adminPerm) {                page.add(\"execPerm\", true);            } else {                page.add(\"execPerm\", false);            }            if (perm.isPermissionSet(Type.SCHEDULE) || adminPerm) {                page.add(\"schedulePerm\", true);            } else {                page.add(\"schedulePerm\", false);            }            page.add(\"project\", project);            flow = project.getFlow(flowName);            if (flow == null) {                page.add(\"errorMsg\", dataMap.get(\"flow\") + flowName + dataMap.get(\"notExist\"));            } else {                page.add(\"flowid\", flow.getId());            }        } catch (final AccessControlException e) {            page.add(\"errorMsg\", e.getMessage());        }        String languageType = LoadJsonUtils.getLanguageType();        page.add(\"currentlangType\", languageType);        page.render();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleProjectPage", "params": ["HttpServletRequest", "HttpServletResponse", "Session"], "throws": ["ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void handleProjectPage(final HttpServletRequest req,        final HttpServletResponse resp, final Session session) throws ServletException {        final Page page = newPage(req, resp, session,\"azkaban/webapp/servlet/velocity/projectpage.vm\");        String languageType = LoadJsonUtils.getLanguageType();        Map<String, String> projectpageMap;        Map<String, String> subPageMap1;        Map<String, String> subPageMap2;        Map<String, String> subPageMap3;        Map<String, String> subPageMap4;        Map<String, String> subPageMap5;        Map<String, String> subPageMap6;        Map<String, String> subPageMap7;        if (languageType.equalsIgnoreCase(\"zh_CN\")) {            // \u6dfb\u52a0\u56fd\u9645\u5316\u6807\u7b7e            projectpageMap = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-zh_CN.json\",                \"azkaban.webapp.servlet.velocity.projectpage.vm\");            subPageMap1 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-zh_CN.json\",                \"azkaban.webapp.servlet.velocity.projectpageheader.vm\");            subPageMap2 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-zh_CN.json\",                \"azkaban.webapp.servlet.velocity.projectnav.vm\");            subPageMap3 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-zh_CN.json\",                \"azkaban.webapp.servlet.velocity.projectmodals.vm\");            subPageMap4 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-zh_CN.json\",                \"azkaban.webapp.servlet.velocity.flow-schedule-ecution-panel.vm\");            subPageMap5 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-zh_CN.json\",                \"azkaban.webapp.servlet.velocity.messagedialog.vm\");            subPageMap6 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-zh_CN.json\",                \"azkaban.webapp.servlet.velocity.nav.vm\");            subPageMap7 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-zh_CN.json\",                \"azkaban.webapp.servlet.velocity.projectsidebar.vm\");        } else {            // \u6dfb\u52a0\u56fd\u9645\u5316\u6807\u7b7e            projectpageMap = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-en_US.json\",                \"azkaban.webapp.servlet.velocity.projectpage.vm\");            subPageMap1 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-en_US.json\",                \"azkaban.webapp.servlet.velocity.projectpageheader.vm\");            subPageMap2 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-en_US.json\",                \"azkaban.webapp.servlet.velocity.projectnav.vm\");            subPageMap3 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-en_US.json\",                \"azkaban.webapp.servlet.velocity.projectmodals.vm\");            subPageMap4 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-en_US.json\",                \"azkaban.webapp.servlet.velocity.flow-schedule-ecution-panel.vm\");            subPageMap5 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-en_US.json\",                \"azkaban.webapp.servlet.velocity.messagedialog.vm\");            subPageMap6 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-en_US.json\",                \"azkaban.webapp.servlet.velocity.nav.vm\");            subPageMap7 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-en_US.json\",                \"azkaban.webapp.servlet.velocity.projectsidebar.vm\");        }        projectpageMap.forEach(page::add);        subPageMap1.forEach(page::add);        subPageMap2.forEach(page::add);        subPageMap3.forEach(page::add);        subPageMap4.forEach(page::add);        subPageMap5.forEach(page::add);        subPageMap6.forEach(page::add);        subPageMap7.forEach(page::add);        final String projectName = getParam(req, \"project\");        final User user = session.getUser();        page.add(\"loginUser\", user.getUserId());        page.add(\"currentlangType\", languageType);        PageUtils.hideUploadButtonWhenNeeded(page, session, this.lockdownUploadProjects);        Project project = null;        Map<String, String> dataMap = loadProjectManagerServletI18nData();        try {            project = this.projectManager.getProject(projectName);            if (project == null) {                page.add(\"errorMsg\", StringEscapeUtils.escapeHtml(dataMap.get(\"project\") + projectName + dataMap.get(\"notExist\")));            } else {                if (!hasPermission(project, user, Type.READ)) {                    throw new AccessControlException(dataMap.get(\"noPerAccessProject\") + projectName + \".\");                }                page.add(\"project\", project);                page.add(\"admins\", Utils.flattenToString(                    project.getUsersWithPermission(Type.ADMIN), \",\"));                final Permission perm = this.getPermissionObject(project, user, Type.ADMIN);                page.add(\"userpermission\", perm);                page.add(                    \"validatorFixPrompt\",                    this.projectManager.getProps().getBoolean(                        ValidatorConfigs.VALIDATOR_AUTO_FIX_PROMPT_FLAG_PARAM,                        ValidatorConfigs.DEFAULT_VALIDATOR_AUTO_FIX_PROMPT_FLAG));                page.add(                    \"validatorFixLabel\",                    this.projectManager.getProps().get(                        ValidatorConfigs.VALIDATOR_AUTO_FIX_PROMPT_LABEL_PARAM));                page.add(                    \"validatorFixLink\",                    this.projectManager.getProps().get(                        ValidatorConfigs.VALIDATOR_AUTO_FIX_PROMPT_LINK_PARAM));                final boolean adminPerm = perm.isPermissionSet(Type.ADMIN);                if (adminPerm) {                    page.add(\"admin\", true);                }                // Set this so we can display execute buttons only to those who have                // access.                if (perm.isPermissionSet(Type.EXECUTE) || adminPerm) {                    page.add(\"exec\", true);                } else {                    page.add(\"exec\", false);                }                if (perm.isPermissionSet(Type.SCHEDULE) || adminPerm) {                    page.add(\"schedulePerm\", true);                } else {                    page.add(\"schedulePerm\", false);                }                if (user.getRoles().contains(\"admin\")) {                    page.add(\"isSystemAdmin\", true);                }                if (hasPermission(project, user, Type.ADMIN)) {                    page.add(\"isProjectAdmin\", true);                }                int uploadFlag;                // \u5148\u5224\u65ad\u5f00\u5173\u662f\u5426\u6253\u5f00,\u5982\u679c\u5f00\u5173\u6253\u5f00,\u5219\u6821\u9a8c\u90e8\u95e8\u4e0a\u4f20\u6743\u9650,\u5982\u679c\u5173\u95ed,\u5219\u4e0d\u9700\u8981\u6821\u9a8c                // \u5224\u65ad\u662f\u5426\u5177\u6709\u4e0a\u4f20\u6743\u9650  uploadFlag 1:\u5141\u8bb8, 2:\u4e0d\u5141\u8bb8,\u5176\u4ed6\u503c:\u4e0d\u5141\u8bb8                if (wtss_dep_upload_privilege_check) {                    uploadFlag = checkDepartmentUploadFlag(user);                } else {                    uploadFlag = 1;                }                // \u9700\u8981\u9996\u5148\u9a8c\u8bc1\u90e8\u95e8\u4e0a\u4f20\u6743\u9650\u662f\u5426\u88ab\u5141\u8bb8, \u518d\u5224\u65ad\u662f\u5426\u6ee1\u8db3\u539f\u6709\u4e0a\u4f20\u8bb8\u53ef\u7684\u903b\u8f91                if ((uploadFlag == 1) && (perm.isPermissionSet(Type.WRITE) || adminPerm)) {                    page.add(\"isWritePerm\", true);                }                final List<Flow> flows = project.getFlows().stream().filter(flow -> !flow.isEmbeddedFlow())                    .collect(Collectors.toList());                if (!flows.isEmpty()) {                    //\u83b7\u53d6\u8fc7\u6ee4\u51fa\u6765\u7684Flow\u5b50\u8282\u70b9\u5217\u8868                    List<String> flowName = getProjectFlowListFilter(project, flows);                    //\u83b7\u53d6\u5df2\u7ecf\u5254\u9664\u5b50\u8282\u70b9\u7684Flow\u5217\u8868                    final List<Flow> rootFlows = flows.stream().filter(flow ->                        !flowName.contains(flow.getId())                    ).collect(Collectors.toList());                    //\u6309\u7167ID\u6392\u5e8f                    Collections.sort(rootFlows, FLOW_ID_COMPARATOR);                    page.add(\"flows\", rootFlows);                }            }        } catch (final AccessControlException e) {            page.add(\"errorMsg\", e.getMessage());        } catch (SystemUserManagerException e) {            logger.error(\"Error department upload flag.\");        }        page.render();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "checkDepartmentUploadFlag", "params": ["User"], "throws": ["SystemUserManagerException"], "modifiers": ["private"], "return_type": "int", "snippet": "    private int checkDepartmentUploadFlag(User user) throws SystemUserManagerException {        int uploadFlag = 1;        if (user != null) {            try {                String userName = user.getUserId();                WtssUser systemUser = this.transitionService.getSystemUserByUserName(userName);                if (null != systemUser) {                    Integer departmentId = Integer.valueOf(systemUser.getDepartmentId() + \"\");                    WebankDepartment department = this.transitionService.getWebankDepartmentByDpId(departmentId);                    if (null != department) {                        uploadFlag = department.getUploadFlag();                    }                } else {                    uploadFlag = 2;                    logger.error(\"\u7cfb\u7edf\u7528\u6237\u4fe1\u606f\u4e0d\u5b58\u5728\");                }            } catch (SystemUserManagerException e) {                uploadFlag = 2;                logger.error(\"\u67e5\u8be2\u7528\u6237\u4fe1\u606f\u5931\u8d25,\u5931\u8d25\u539f\u56e0:{}\", e);            }        }        // \u5bf9uploadFlag\u8fdb\u884c\u6821\u9a8c,\u8fc7\u6ee4\u65e0\u6548\u503c  uploadFlag 1:\u5141\u8bb8, 2:\u4e0d\u5141\u8bb8,\u5176\u4ed6\u503c:\u4e0d\u5141\u8bb8        if (uploadFlag == 1 || uploadFlag == 2) {            return uploadFlag;        }else {            throw new SystemUserManagerException(\"Error department upload flag.\");        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleCreate", "params": ["HttpServletRequest", "HttpServletResponse", "Session"], "throws": ["ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void handleCreate(final HttpServletRequest req, final HttpServletResponse resp,        final Session session) throws ServletException {        resp.setCharacterEncoding(\"utf-8\");        final String projectName = hasParam(req, \"name\") ? getParam(req, \"name\") : null;        final String projectDescription =            hasParam(req, \"description\") ? getParam(req, \"description\") : null;        logger.info(\"Create project \" + projectName);        final String projectGroup =            hasParam(req, \"projectGroup\") ? getParam(req, \"projectGroup\") : null;        final User user = session.getUser();        String status = null;        String action = null;        String message = null;        HashMap<String, Object> params = null;        if (this.lockdownCreateProjects && !UserUtils.hasPermissionforAction(user, Type.CREATEPROJECTS)) {            message =                \"User \" + user.getUserId()                    + \" doesn't have permission to create projects.\";            logger.info(message);            status = \"error\";        } else {            try {                //this.projectManager.createProject(projectName, projectDescription, user);                //\u589e\u52a0\u9879\u76ee\u7ec4\u8bbe\u7f6e                this.projectManager.createProject(projectName, projectDescription, projectGroup, user);                status = \"success\";                action = \"redirect\";                final String redirect = \"manager?project=\" + projectName;                params = new HashMap<>();                params.put(\"path\", redirect);            } catch (final ProjectManagerException e) {                message = e.getMessage();                status = \"error\";            }        }        final String response = createJsonResponse(status, message, action, params);        try {            final Writer write = resp.getWriter();            write.append(response);            write.flush();        } catch (final IOException e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "registerError", "params": ["Map<String,String>", "String", "HttpServletResponse", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void registerError(final Map<String, String> ret, final String error,        final HttpServletResponse resp, final int returnCode) {        ret.put(\"error\", error);        resp.setStatus(returnCode);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxHandleUpload", "params": ["HttpServletRequest", "HttpServletResponse", "Map<String,String>", "Map<String,Object>", "Session"], "throws": ["ServletException", "IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxHandleUpload(final HttpServletRequest req, final HttpServletResponse resp,        final Map<String, String> ret, final Map<String, Object> multipart, final Session session)        throws ServletException, IOException {        final User user = session.getUser();        final String projectName = (String) multipart.get(\"project\");        final Project project = this.projectManager.getProject(projectName);        logger.info(            \"Upload: reference of project \" + projectName + \" is \" + System.identityHashCode(project));        final String autoFix = (String) multipart.get(\"fix\");        final Props props = new Props();        if (autoFix != null && autoFix.equals(\"off\")) {            props.put(ValidatorConfigs.CUSTOM_AUTO_FIX_FLAG_PARAM, \"false\");        } else {            props.put(ValidatorConfigs.CUSTOM_AUTO_FIX_FLAG_PARAM, \"true\");        }        Map<String, String> dataMap = loadProjectManagerServletI18nData();        if (this.lockdownUploadProjects && !UserUtils.hasPermissionforAction(user, Type.UPLOADPROJECTS)) {            final String message =                \"Project uploading is locked out. Only admin users and users with special permissions can upload projects. \"                    + \"User \" + user.getUserId() + \" doesn't have permission to upload project.\";            logger.info(message);            registerError(ret, message, resp, 403);        } else if (projectName == null || projectName.isEmpty()) {            registerError(ret, dataMap.get(\"noProgramName\"), resp, 400);        } else if (project == null) {            registerError(ret, dataMap.get(\"uploadProFailed\") + projectName                + dataMap.get(\"notExist\"), resp, 400);        } else if (!hasPermission(project, user, Type.WRITE)) {            registerError(ret, dataMap.get(\"uploadProFailedUser\") + user.getUserId()                + dataMap.get(\"noWritePermission\"), resp, 400);        } else if (!project.isActive()) {            registerError(ret, dataMap.get(\"deletedPro\"), resp, 400);        } else {            ret.put(\"projectId\", String.valueOf(project.getId()));            final FileItem item = (FileItem) multipart.get(\"file\");            final String name = item.getName();            // \u5224\u65adzip\u5305\u662f\u5426\u5305\u542b\u7a7a\u683c            if (Pattern.compile(RE_SPACE).matcher(name).find()) {                item.delete();                registerError(ret, dataMap.get(\"zipFileCannotHaveBlank\"), resp, 400);                return;            }            //\u5224\u65adname\u957f\u5ea6\u662f\u5426\u5927\u4e8e128            if (name.length() > 128) {                registerError(ret, dataMap.get(\"zipFileCannotlength\"), resp, 400);                return;            }            String type = null;            final String contentType = item.getContentType();            if (contentType != null                && (contentType.startsWith(APPLICATION_ZIP_MIME_TYPE)                || contentType.startsWith(\"application/x-zip-compressed\") || contentType                .startsWith(\"application/octet-stream\"))) {                type = \"zip\";            } else {                item.delete();                registerError(ret, \"File type \" + contentType + \" unrecognized.\", resp, 400);                return;            }            final File tempDir = Utils.createTempDir();            OutputStream out = null;            try {                logger.info(\"Uploading file \" + name);                final File archiveFile = new File(tempDir, name);                out = new BufferedOutputStream(new FileOutputStream(archiveFile));                IOUtils.copy(item.getInputStream(), out);                out.close();                //unscheduleall/scheduleall should only work with flow which has defined flow trigger                //unschedule all flows within the old project                if (this.enableQuartz) {                    //todo chengren311: should maintain atomicity,                    // e.g, if uploadProject fails, associated schedule shouldn't be added.                    this.scheduler.unscheduleAll(project);                }                boolean flag = this.projectManager.checkFlowName(project, archiveFile, type, props);                //\u5224\u65adname\u957f\u5ea6\u662f\u5426\u5927\u4e8e128                if (!flag) {                    registerError(ret, dataMap.get(\"jobNamelength\"), resp, 400);                    return;                }                final Map<String, ValidationReport> reports =                    this.projectManager.uploadProject(project, archiveFile, type, user,                        props);                if (this.enableQuartz) {                    //schedule the new project                    this.scheduler.scheduleAll(project, user.getUserId());                }                final StringBuffer errorMsgs = new StringBuffer();                final StringBuffer warnMsgs = new StringBuffer();                for (final Entry<String, ValidationReport> reportEntry : reports.entrySet()) {                    final ValidationReport report = reportEntry.getValue();                    if (!report.getInfoMsgs().isEmpty()) {                        for (final String msg : report.getInfoMsgs()) {                            switch (ValidationReport.getInfoMsgLevel(msg)) {                                case ERROR:                                    errorMsgs.append(ValidationReport.getInfoMsg(msg) + \"<br/>\");                                    break;                                case WARN:                                    warnMsgs.append(ValidationReport.getInfoMsg(msg) + \"<br/>\");                                    break;                                default:                                    break;                            }                        }                    }                    if (!report.getErrorMsgs().isEmpty()) {                        errorMsgs.append(\"Validator \" + reportEntry.getKey()                            + \" reports errors:<ul>\");                        for (final String msg : report.getErrorMsgs()) {                            errorMsgs.append(\"<li>\" + msg + \"</li>\");                        }                        errorMsgs.append(\"</ul>\");                    }                    if (!report.getWarningMsgs().isEmpty()) {                        warnMsgs.append(\"Validator \" + reportEntry.getKey()                            + \" reports warnings:<ul>\");                        for (final String msg : report.getWarningMsgs()) {                            warnMsgs.append(\"<li>\" + msg + \"</li>\");                        }                        warnMsgs.append(\"</ul>\");                    }                }                if (errorMsgs.length() > 0) {                    // If putting more than 4000 characters in the cookie, the entire                    // message                    // will somehow get discarded.                    registerError(ret, errorMsgs.length() > 4000 ? errorMsgs.substring(0, 4000)                        : errorMsgs.toString(), resp, 500);                    //\u4f7f\u7528cookie\u63d0\u793a\u9519\u8bef\u9875\u9762\u624d\u80fd\u663e\u793a\u9519\u8bef                    //setErrorMessageInCookie(resp, errorMsgs.toString());                }                if (warnMsgs.length() > 0) {                    ret.put(                        \"warn\",                        warnMsgs.length() > 4000 ? warnMsgs.substring(0, 4000) : warnMsgs                            .toString());                    //\u4f7f\u7528cookie\u63d0\u793a\u9519\u8bef\u9875\u9762\u624d\u80fd\u663e\u793a\u9519\u8bef                    //setWarnMessageInCookie(resp, warnMsgs.toString());                }            } catch (final Exception e) {                logger.info(\"Installation Failed.\", e);                String error = e.getMessage();                if (error.length() > 512) {                    error =                        error.substring(0, 512) + \"<br>Too many errors to display.<br>\";                }                registerError(ret, dataMap.get(\"uploadFailed\") + \"<br>\" + error, resp, 500);                //\u4f7f\u7528cookie\u63d0\u793a\u9519\u8bef\u9875\u9762\u624d\u80fd\u663e\u793a\u9519\u8bef                //setErrorMessageInCookie(resp, error);            } finally {                if (out != null) {                    out.close();                }                if (tempDir.exists()) {                    FileUtils.deleteDirectory(tempDir);                }            }            logger.info(\"Upload: project \" + projectName + \" version is \" + project.getVersion()                + \", reference is \" + System.identityHashCode(project));            ret.put(\"version\", String.valueOf(project.getVersion()));        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleUpload", "params": ["HttpServletRequest", "HttpServletResponse", "Map<String,Object>", "Session"], "throws": ["ServletException", "IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void handleUpload(final HttpServletRequest req, final HttpServletResponse resp,        final Map<String, Object> multipart, final Session session) throws ServletException,        IOException {        final HashMap<String, String> ret = new HashMap<>();        final String projectName = (String) multipart.get(\"project\");        ajaxHandleUpload(req, resp, ret, multipart, session);        if (ret.containsKey(\"error\")) {            setErrorMessageInCookie(resp, ret.get(\"error\"));        }        if (ret.containsKey(\"warn\")) {            setWarnMessageInCookie(resp, ret.get(\"warn\"));        }        logger.info(\"Upload project, Redirect to ---> \" + req.getRequestURI() + \"?project=\" + projectName);        resp.sendRedirect(req.getRequestURI() + \"?project=\" + projectName);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPermissionObject", "params": ["Project", "User", "Permission"], "throws": null, "modifiers": ["private"], "return_type": "Permission", "snippet": "    private Permission getPermissionObject(final Project project, final User user,        final Permission.Type type) {        final Permission perm = project.getCollectivePermission(user);        for (final String roleName : user.getRoles()) {            if (roleName.equals(\"admin\") || systemManager.isDepartmentMaintainer(user)) {                perm.addPermission(Type.ADMIN);            }        }        return perm;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleReloadProjectWhitelist", "params": ["HttpServletRequest", "HttpServletResponse", "Session"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void handleReloadProjectWhitelist(final HttpServletRequest req,        final HttpServletResponse resp, final Session session) throws IOException {        final HashMap<String, Object> ret = new HashMap<>();        if (hasPermission(session.getUser(), Permission.Type.ADMIN)) {            try {                if (this.projectManager.loadProjectWhiteList()) {                    ret.put(\"success\", \"Project whitelist re-loaded!\");                } else {                    ret.put(\"error\", \"azkaban.properties doesn't contain property \"                        + ProjectWhitelist.XML_FILE_PARAM);                }            } catch (final Exception e) {                ret.put(\"error\",                    \"Exception occurred while trying to re-load project whitelist: \"                        + e);            }        } else {            ret.put(\"error\", \"Provided session doesn't have admin privilege.\");        }        this.writeJSON(resp, ret);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "hasPermission", "params": ["User", "Permission"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean hasPermission(final User user, final Permission.Type type) {        for (final String roleName : user.getRoles()) {            //final Role role = this.userManager.getRole(roleName);            final Role role = user.getRoleMap().get(roleName);            if (role != null && role.getPermission().isPermissionSet(type)                || role.getPermission().isPermissionSet(Permission.Type.ADMIN)) {                return true;            }        }        return false;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "getProjectNodeTree", "params": ["Project", "String", "HashMap<String,Object>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void getProjectNodeTree(final Project project, final String flowId,        final HashMap<String, Object> ret) {        final Flow flow = project.getFlow(flowId);        final ArrayList<Map<String, Object>> nodeList =            new ArrayList<>();        for (final Node node : flow.getNodes()) {            final HashMap<String, Object> nodeObj = new HashMap<>();            nodeObj.put(\"id\", node.getId());            nodeObj.put(\"type\", node.getType());            nodeObj.put(\"projectName\", project.getName());            nodeObj.put(\"level\", node.getLevel());            if (node.getEmbeddedFlowId() != null) {                nodeObj.put(\"flowId\", node.getEmbeddedFlowId());                getProjectNodeTree(project, node.getEmbeddedFlowId(), nodeObj);            }            final ArrayList<String> dependencies = new ArrayList<>();            Collection<Edge> collection = flow.getInEdges(node.getId());            if (collection != null) {                for (final Edge edge : collection) {                    dependencies.add(edge.getSourceId());                }            }            final ArrayList<String> dependents = new ArrayList<>();            collection = flow.getOutEdges(node.getId());            if (collection != null) {                for (final Edge edge : collection) {                    dependents.add(edge.getTargetId());                }            }            nodeObj.put(\"dependencies\", dependencies);            nodeObj.put(\"dependents\", dependents);            nodeList.add(nodeObj);            final Set<Edge> inEdges = flow.getInEdges(node.getId());            if (inEdges != null && !inEdges.isEmpty()) {                final ArrayList<String> inEdgesList = new ArrayList<>();                for (final Edge edge : inEdges) {                    inEdgesList.add(edge.getSourceId());                }                Collections.sort(inEdgesList);                nodeObj.put(\"in\", inEdgesList);            }        }        Collections.sort(nodeList, new Comparator<Map<String, Object>>() {            @Override            public int compare(final Map<String, Object> o1, final Map<String, Object> o2) {                final String id = (String) o1.get(\"id\");                return id.compareTo((String) o2.get(\"id\"));            }        });        ret.put(\"flow\", flowId);        ret.put(\"nodes\", nodeList);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "getProjectFlowListFilter", "params": ["Project", "List<Flow>"], "throws": null, "modifiers": ["private"], "return_type": "List<String>", "snippet": "    private List<String> getProjectFlowListFilter(final Project project, final List<Flow> flows) {        final List<Map<String, Object>> childNodeList = new ArrayList<>();        for (Flow flow : flows) {            getProjectChildNode(project, flow.getId(), childNodeList);        }        List<String> flowNameList = new ArrayList<>();        for (Map<String, Object> nodeMap : childNodeList) {            flowNameList.add(String.valueOf(nodeMap.get(\"flowId\")));        }        return flowNameList;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "getProjectChildNode", "params": ["Project", "String", "List<Map>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void getProjectChildNode(final Project project, final String flowId,        final List<Map<String, Object>> childTreeList) {        final Flow flow = project.getFlow(flowId);        final ArrayList<Map<String, Object>> nodeList =            new ArrayList<>();        for (final Node node : flow.getNodes()) {            final Map<String, Object> nodeObj = new HashMap<>();            if (node.getEmbeddedFlowId() != null) {                nodeObj.put(\"flowId\", node.getEmbeddedFlowId());                getProjectChildNode(project, node.getEmbeddedFlowId(), childTreeList);                childTreeList.add(nodeObj);            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxFetchJobExecutionsHistory", "params": ["Project", "HashMap<String,Object>", "HttpServletRequest"], "throws": ["ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxFetchJobExecutionsHistory(final Project project,        final HashMap<String, Object> ret, final HttpServletRequest req)        throws ServletException {        final String projectName = getParam(req, \"project\");        final String flowId = getParam(req, \"flow\");        final String jobId = getParam(req, \"job\");        final int from = Integer.valueOf(getParam(req, \"start\"));        final int length = Integer.valueOf(getParam(req, \"length\"));        final List<ExecutableJobInfo> jobInfoList = new ArrayList<>();        int total = 0;        try {//      total = this.executorManager.getExecutableFlows(project.getId(), flowId, from,//              length, exFlows);            total = this.executorManagerAdapter.getNumberOfJobExecutions(project, jobId);            final List<ExecutableJobInfo> jobExecList = this.executorManagerAdapter.getExecutableJobs(project, jobId, from, length);            if (null != jobExecList && !jobExecList.isEmpty()) {                jobInfoList.addAll(jobExecList);                if (jobInfoList != null) {                    jobInfoList.stream().forEach(executableJobInfo -> {                        ExecutableFlow executionFlow = null;                        try {                            executionFlow = this.executorManagerAdapter.getExecutableFlow(executableJobInfo.getExecId());                        } catch (ExecutorManagerException e) {                            e.printStackTrace();                        }                        Map<String, String> repeatMap = executionFlow.getRepeatOption();                        if (!repeatMap.isEmpty()) {                            Long recoverRunDate = Long.valueOf(String.valueOf(repeatMap.get(\"startTimeLong\")));                            LocalDateTime localDateTime = new LocalDateTime(new Date(recoverRunDate)).minusDays(1);                            Date date = localDateTime.toDate();                            executableJobInfo.setRunDate(date.getTime());                        } else {                            Long runDate = executionFlow.getStartTime();                            if (-1 != runDate) {                                LocalDateTime localDateTime = new LocalDateTime(new Date(runDate)).minusDays(1);                                Date date = localDateTime.toDate();                                executableJobInfo.setRunDate(date.getTime());                            } else {                                executableJobInfo.setRunDate(runDate);                            }                        }                    });                }            }        } catch (final ExecutorManagerException e) {            ret.put(\"error\", \"Error retrieving executable flows\");        }        ret.put(\"flow\", flowId);        ret.put(\"total\", total);        ret.put(\"from\", from);        ret.put(\"length\", length);        final ArrayList<Object> history = new ArrayList<>();        for (final ExecutableJobInfo job : jobInfoList) {            final HashMap<String, Object> flowInfo = new HashMap<>();            flowInfo.put(\"execId\", job.getExecId());            flowInfo.put(\"jobId\", job.getJobId());            flowInfo.put(\"flowId\", job.getFlowId());            flowInfo.put(\"projectId\", job.getProjectId());            flowInfo.put(\"status\", job.getStatus().toString());            flowInfo.put(\"startTime\", job.getStartTime());            flowInfo.put(\"endTime\", job.getEndTime());            flowInfo.put(\"runDate\", job.getRunDate());            history.add(flowInfo);        }        ret.put(\"jobExecutions\", history);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleFlowDetailPage", "params": ["HttpServletRequest", "HttpServletResponse", "Session"], "throws": ["ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void handleFlowDetailPage(final HttpServletRequest req, final HttpServletResponse resp,        final Session session) throws ServletException {        final Page page = newPage(req, resp, session, \"azkaban/webapp/servlet/velocity/flowpage.vm\");        // \u52a0\u8f7d\u56fd\u9645\u5316\u8d44\u6e90        Map<String, Map<String, String>> vmDataMap = loadFlowpageI18nData();        vmDataMap.forEach((vm, data) -> data.forEach(page::add));        String languageType = LoadJsonUtils.getLanguageType();        page.add(\"currentlangType\", languageType);        final String projectName = getParam(req, \"project\");        final String treeFlow = getParam(req, \"treeFlow\");        final String jobName = getParam(req, \"job\");        final String realFlow = getParam(req, \"flow\");        final User user = session.getUser();        Project project = null;        Flow jobFlow = null;        Flow flow = null;        Map<String, String> dataMap = loadProjectManagerServletI18nData();        try {            //\u83b7\u53d6\u771f\u5b9e\u7684Flow\u7684\u8be6\u7ec6\u4fe1\u606f            project = this.projectManager.getProject(projectName);            if (project == null) {                page.add(\"errorMsg\", \"\u9879\u76ee \" + projectName + \" \u4e0d\u5b58\u5728.\");                page.render();                return;            }            if (!hasPermission(project, user, Type.READ)) {                throw new AccessControlException(\"No permission Project \" + projectName                    + \".\");            }            final Permission perm = this.getPermissionObject(project, user, Type.ADMIN);            final boolean adminPerm = perm.isPermissionSet(Type.ADMIN);            if (perm.isPermissionSet(Type.EXECUTE) || adminPerm) {                page.add(\"execPerm\", true);            } else {                page.add(\"execPerm\", false);            }            if (perm.isPermissionSet(Type.SCHEDULE) || adminPerm) {                page.add(\"schedulePerm\", true);            } else {                page.add(\"schedulePerm\", false);            }            page.add(\"project\", project);            flow = project.getFlow(realFlow);            if (flow == null) {                page.add(\"errorMsg\", dataMap.get(\"flow\") + realFlow + dataMap.get(\"notExist\"));            } else {                page.add(\"flowid\", flow.getId());            }            //\u83b7\u53d6Flow\u7c7b\u578bjob\u8282\u70b9\u7684\u5c5e\u6027\u4fe1\u606f            jobFlow = project.getFlow(treeFlow);            final Node node = jobFlow.getNode(jobName);            if (node == null) {                page.add(\"errorMsg\", dataMap.get(\"job\") + jobName + dataMap.get(\"notExist\"));                page.render();                return;            }            final Props prop = this.projectManager.getProperties(project, jobFlow, jobName, node.getJobSource());            Props overrideProp =                this.projectManager.getJobOverrideProperty(project, jobFlow, jobName, jobName);            if (overrideProp == null) {                overrideProp = new Props();            }            final Props comboProp = new Props(prop);            for (final String key : overrideProp.getKeySet()) {                comboProp.put(key, overrideProp.get(key));            }            page.add(\"jobid\", node.getId());            page.add(\"jobtype\", node.getType());            final ArrayList<Pair<String, String>> parameters =                new ArrayList<>();            // Parameter            for (final String key : comboProp.getKeySet()) {                final String value = comboProp.get(key);                parameters.add(new Pair<>(key, value));            }            //\u524d\u7aef\u6392\u5e8f\u4f18\u5316 Job Properties \u6839\u636e\u5c5e\u6027\u540d\u6392\u5e8f            final List<Pair<String, String>> sortedParameters = parameters.stream().sorted(Comparator.comparing(Pair::getFirst)).collect(                Collectors.toList());            final List<Pair<String, String>> finalParams = new ArrayList<>();            //data.object \u8ddf source.type \u7ec4\u5408\u6392\u5e8f            sortedParameters.stream().forEach(m -> {                    String dnum;                    String dkey = m.getFirst();                    if (dkey.contains(\"data.object\")) {                        dnum = StringUtils.substringAfter(dkey, \"data.object\");                        finalParams.add(m);                        String snum;                        for (Pair<String, String> job : sortedParameters) {                            String skey = job.getFirst();                            if (skey.contains(\"source.type\")) {                                snum = StringUtils.substringAfter(skey, \"source.type\");                                if (dnum.equals(snum)) {                                    finalParams.add(job);                                }                            }                        }                    } else if (!dkey.contains(\"data.object\") && !dkey.contains(\"source.type\")) {                        finalParams.add(m);                    }                }            );            page.add(\"parameters\", finalParams);        } catch (final AccessControlException e) {            page.add(\"errorMsg\", e.getMessage());        }        page.render();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxFetchFlowExecutions", "params": ["Project", "HashMap<String,Object>", "HttpServletRequest", "User"], "throws": ["ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxFetchFlowExecutions(final Project project,        final HashMap<String, Object> ret, final HttpServletRequest req, final User user)        throws ServletException {        final String flowId = getParam(req, \"flow\");        final int from = Integer.valueOf(getParam(req, \"start\"));        final int length = Integer.valueOf(getParam(req, \"length\"));        final ArrayList<ExecutableFlow> exFlows = new ArrayList<>();        int total = 0;//    long moyenne = 0;        try {            if (user.getRoles().contains(\"admin\")) {                total =                    this.executorManagerAdapter.getExecutableFlows(project.getId()                        , flowId, from, length, exFlows);//        moyenne = this.executorManagerAdapter.getExecutableFlowsMoyenneRunTime(//            project.getId(), flowId, null);            } else {                if (hasPermission(project, user, Type.READ)) {                    total =                        this.executorManagerAdapter.getExecutableFlows(project.getId()                            , flowId, from, length, exFlows);                } else {                    total =                        this.executorManagerAdapter.getUserExecutableFlowsTotalByProjectIdAndFlowId(project.getId()                            , flowId, from, length, exFlows, user.getUserId());                }//        moyenne = this.executorManagerAdapter.getExecutableFlowsMoyenneRunTime(//            project.getId(), flowId, null);            }        } catch (final ExecutorManagerException e) {            ret.put(\"error\", \"Error retrieving executable flows\");        }        ret.put(\"flow\", flowId);        ret.put(\"total\", total);        ret.put(\"from\", from);        ret.put(\"length\", length);        final List<Object> execFlowList = new ArrayList<>();//    long allRunTime = 0;//    int successFlowNum = 0;//    for (final ExecutableFlow flow : exFlows) {//      if(Status.SUCCEEDED.equals(flow.getStatus())){//        successFlowNum += 1;//        allRunTime += (flow.getEndTime() - flow.getStartTime());//      }//    }//    if(allRunTime !=0 && successFlowNum !=0){//      moyenne = allRunTime/successFlowNum;//    }        for (final ExecutableFlow flow : exFlows) {            final HashMap<String, Object> flowInfo = new HashMap<>();            flowInfo.put(\"execId\", flow.getExecutionId());            flowInfo.put(\"flowId\", flow.getFlowId());            flowInfo.put(\"projectId\", flow.getProjectId());            flowInfo.put(\"status\", flow.getStatus().toString());            flowInfo.put(\"submitTime\", flow.getSubmitTime());            flowInfo.put(\"startTime\", flow.getStartTime());            flowInfo.put(\"endTime\", flow.getEndTime());            flowInfo.put(\"submitUser\", flow.getSubmitUser());            Map<String, String> repeatMap = flow.getRepeatOption();            if(flow.getRunDate() != null){                logger.info(\"run_date: \" + flow.getRunDate());                flowInfo.put(\"runDate\", flow.getRunDate());            } else if (!repeatMap.isEmpty()) {                Long recoverRunDate = Long.valueOf(String.valueOf(repeatMap.get(\"startTimeLong\")));                LocalDateTime localDateTime = new LocalDateTime(new Date(recoverRunDate)).minusDays(1);                flowInfo.put(\"runDate\", localDateTime.toString(\"yyyyMMdd\"));            } else {                Long runDate = flow.getStartTime();                LocalDateTime localDateTime = new LocalDateTime(new Date(runDate)).minusDays(1);                flowInfo.put(\"runDate\", localDateTime.toString(\"yyyyMMdd\"));            }//      flowInfo.put(\"moyenne\", 0);            execFlowList.add(flowInfo);        }        ret.put(\"executions\", execFlowList);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxAddProjectUserPermission", "params": ["Project", "HashMap<String,Object>", "HttpServletRequest", "User"], "throws": ["ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxAddProjectUserPermission(final Project project, final HashMap<String, Object> ret,        final HttpServletRequest req, final User user) throws ServletException {        final String userId = getParam(req, \"userId\");        WtssUser wtssUser = null;        Map<String, String> dataMap = loadProjectManagerServletI18nData();        //final boolean admin = Boolean.parseBoolean(getParam(req, \"permissions[admin]\"));        final boolean read = Boolean.parseBoolean(getParam(req, \"permissions[read]\"));        final boolean write = Boolean.parseBoolean(getParam(req, \"permissions[write]\"));        final boolean execute = Boolean.parseBoolean(getParam(req, \"permissions[execute]\"));        final boolean schedule = Boolean.parseBoolean(getParam(req, \"permissions[schedule]\"));        try {            wtssUser = this.transitionService.getSystemUserById(userId);            String createUser = project.getCreateUser();            // \u8fd0\u7ef4\u7528\u6237\u521b\u5efa\u7684\u9879\u76ee,\u4e0d\u80fd\u5206\u914d\u7ed9\u5b9e\u540d\u7528\u6237\u548c\u7cfb\u7edf\u7528\u6237\u8c03\u5ea6\u548c\u4fee\u6539\u9879\u76ee\u7684\u6743\u9650            if (wtssUser != null) {                if (createUser.startsWith(\"WTSS\")) {                    WtssUser currentAddUser = this.transitionService.getSystemUserByUserName(wtssUser.getUsername());                    // \u5224\u65ad\u7528\u6237\u89d2\u8272  roleId 1:\u7ba1\u7406\u5458, 2:\u666e\u901a\u7528\u6237                    if (currentAddUser.getRoleId() != 1) {                        if (!userId.startsWith(\"wtss_WTSS\")) {                            // \u53ea\u5bf9\u975e\u7ba1\u7406\u5458\u8fdb\u884c\u6821\u9a8c                            int roleId = wtssUser.getRoleId();                            if (roleId != 1) {                                if (Pattern.compile(\"^[0-9]+$\").matcher(userId).matches()) {                                    if (write || execute || schedule) {                                        ret.put(\"error\", dataMap.get(\"cannotpermitrealnamewriteexecsch\"));                                    } else {                                        // \u6267\u884c\u6dfb\u52a0                                        executeAddProjectUser(wtssUser, project, dataMap, ret, user, read, write, execute, schedule);                                    }                                } else if (userId.startsWith(\"wtss_hduser\")) {                                    if (write || execute || schedule) {                                        ret.put(\"error\", dataMap.get(\"cannotpermitsystemUserwriteexecsch\"));                                    } else {                                        // \u6267\u884c\u6dfb\u52a0                                        executeAddProjectUser(wtssUser, project, dataMap, ret, user, read, write, execute, schedule);                                    }                                } else {                                    ret.put(\"error\", dataMap.get(\"canNotAddUnknown\"));                                }                            } else {                                // \u6267\u884c\u6dfb\u52a0                                executeAddProjectUser(wtssUser, project, dataMap, ret, user, read, write, execute, schedule);                            }                        } else {                            // \u6267\u884c\u6dfb\u52a0                            executeAddProjectUser(wtssUser, project, dataMap, ret, user, read, write, execute, schedule);                        }                    } else {                        // \u6267\u884c\u6dfb\u52a0                        executeAddProjectUser(wtssUser, project, dataMap, ret, user, read, write, execute, schedule);                    }                } else {                    // \u6267\u884c\u6dfb\u52a0                    executeAddProjectUser(wtssUser, project, dataMap, ret, user, read, write, execute, schedule);                }            } else {                ret.put(\"error\", dataMap.get(\"nullUser\"));            }        } catch (SystemUserManagerException e) {            ret.put(\"error\", \"Request Failed\");        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "executeAddProjectUser", "params": ["WtssUser", "Project", "Map<String,String>", "HashMap<String,Object>", "User", "boolean", "boolean", "boolean", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void executeAddProjectUser(WtssUser wtssUser, Project project, Map<String, String> dataMap,        HashMap<String, Object> ret, User user, boolean read, boolean write, boolean execute,boolean schedule) {        final String name = wtssUser.getUsername();        if (project.getUserPermission(name) != null) {            ret.put(\"error\", dataMap.get(\"userPerExist\"));            return;        }        final Permission perm = new Permission();        perm.setPermission(Type.READ, read);        perm.setPermission(Type.WRITE, write);        perm.setPermission(Type.EXECUTE, execute);        perm.setPermission(Type.SCHEDULE, schedule);        final boolean group = false;        try {            this.projectManager.updateProjectPermission(project, name, perm, group, user);        } catch (final ProjectManagerException e) {            ret.put(\"error\", \"Request Failed.\");        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxGetUserProjectPerm", "params": ["Project", "HashMap<String,Object>", "HttpServletRequest", "User"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxGetUserProjectPerm(final Project project, final HashMap<String, Object> ret,        final HttpServletRequest req, final User user) {        try {            String projectUser = getParam(req, \"userId\");            for (final Pair<String, Permission> perm : project.getUserPermissions()) {                final String userId = perm.getFirst();                if (userId.equals(projectUser)) {                    ret.put(\"adminPerm\", perm.getSecond().isPermissionNameSet(\"ADMIN\"));                    ret.put(\"readPerm\", perm.getSecond().isPermissionNameSet(\"READ\"));                    ret.put(\"writePerm\", perm.getSecond().isPermissionNameSet(\"WRITE\"));                    ret.put(\"executePerm\", perm.getSecond().isPermissionNameSet(\"EXECUTE\"));                    ret.put(\"schedulePerm\", perm.getSecond().isPermissionNameSet(\"SCHEDULE\"));                }            }        } catch (ServletException e) {            ret.put(\"error\", \"Request Failed.\");        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxAddProjectAdmin", "params": ["Project", "HashMap<String,Object>", "HttpServletRequest", "User"], "throws": ["ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxAddProjectAdmin(final Project project, final HashMap<String, Object> ret,        final HttpServletRequest req, final User user) throws ServletException {        final String userId = getParam(req, \"userId\");        WtssUser wtssUser = null;        Map<String, String> dataMap = loadProjectManagerServletI18nData();        try {            String createUser = project.getCreateUser();            wtssUser = this.transitionService.getSystemUserById(userId);            if (wtssUser != null) {                if (createUser.startsWith(\"WTSS\")) {                    WtssUser currentToUser = this.transitionService.getSystemUserByUserName(wtssUser.getUsername());                    // \u5224\u65ad\u7528\u6237\u89d2\u8272  roleId 1:\u7ba1\u7406\u5458, 2:\u666e\u901a\u7528\u6237                    if (currentToUser.getRoleId() != 1) {                        if (!userId.startsWith(\"wtss_WTSS\")) {                            int roleId = wtssUser.getRoleId();                            if (roleId != 1) {                                if (Pattern.compile(\"^[0-9]+$\").matcher(userId).matches()) {                                    ret.put(\"error\", dataMap.get(\"canNotAddRealNameUser\"));                                } else if (userId.startsWith(\"wtss_hduser\")) {                                    ret.put(\"error\", dataMap.get(\"canNotAddHduUser\"));                                } else {                                    ret.put(\"error\", dataMap.get(\"canNotAddNotOps\"));                                }                            } else {                                executeAddProjectAdmin(wtssUser, project, ret, dataMap, user);                            }                        } else {                            executeAddProjectAdmin(wtssUser, project, ret, dataMap, user);                        }                    } else {                        executeAddProjectAdmin(wtssUser, project, ret, dataMap, user);                    }                } else {                    executeAddProjectAdmin(wtssUser,project,ret,dataMap,user);                }            } else {                ret.put(\"error\", dataMap.get(\"nullUser\"));            }        } catch (SystemUserManagerException e) {            ret.put(\"error\", \"Request Failed.\");        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "executeAddProjectAdmin", "params": ["WtssUser", "Project", "HashMap<String,Object>", "Map<String,String>", "User"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void executeAddProjectAdmin(WtssUser wtssUser, Project project, HashMap<String, Object> ret, Map<String, String> dataMap, User user) {        final String name = wtssUser.getUsername();        if (project.getUserPermission(name) != null) {            ret.put(\"error\", dataMap.get(\"userPerExist\"));            return;        }        final Permission perm = new Permission();        perm.setPermission(Type.ADMIN, true);        perm.setPermission(Type.READ, true);        perm.setPermission(Type.WRITE, true);        perm.setPermission(Type.EXECUTE, true);        perm.setPermission(Type.SCHEDULE, true);        final boolean group = false;        try {            this.projectManager.updateProjectPermission(project, name, perm, group, user);        } catch (final ProjectManagerException e) {            ret.put(\"error\", \"Request Failed\");        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxRemoveProjectAdmin", "params": ["Project", "HashMap<String,Object>", "HttpServletRequest", "User"], "throws": ["ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxRemoveProjectAdmin(final Project project,        final HashMap<String, Object> ret, final HttpServletRequest req, final User user)        throws ServletException {        final String userId = getParam(req, \"userId\");        final Permission perm;        perm = project.getUserPermission(userId);        if (perm == null) {            ret.put(\"error\", \"User[\" + userId + \" have no permission of this project. \");            return;        }        try {            this.projectManager.removeProjectPermission(project, userId, user);        } catch (final ProjectManagerException e) {            ret.put(\"error\", \"Request Failed\");        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllNodes", "params": ["ExecutableFlowBase", "List<String>"], "throws": null, "modifiers": ["private"], "return_type": "List<String>", "snippet": "    private List<String> getAllNodes(ExecutableFlowBase baseNode, List<String> allNodes){        for(ExecutableNode node: baseNode.getExecutableNodes()){            if(node instanceof ExecutableFlowBase){                getAllNodes((ExecutableFlowBase)node, allNodes);            }            if(!(node instanceof ExecutableFlowBase)){                allNodes.add(node.getNestedId());            }        }        return allNodes;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxFetchJobNestedIdList", "params": ["Project", "HashMap<String,Object>", "HttpServletRequest"], "throws": ["ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxFetchJobNestedIdList(final Project project, final HashMap<String, Object> ret,        final HttpServletRequest req) throws ServletException {        final String flowId = getParam(req, \"flow\");        final Flow flow = project.getFlow(flowId);        if (flow == null) {            logger.error(flowId + \" is not exist\");            return;        }        String searchName = null;        if (hasParam(req, \"serach\")) {            searchName = getParam(req, \"serach\");        }        List<String> jobList = new ArrayList<>();        ExecutableFlow executableFlow = FlowUtils.createExecutableFlow(project, flow);        getAllNodes(executableFlow, jobList);        List<String> filterList = jobList;        if (StringUtils.isNotBlank(searchName)) {            final String flag = searchName;            filterList = jobList.stream().filter(x -> x.contains(flag)).collect(Collectors.toList());        }        List<Map<String, String>> jobSelectDataList = new ArrayList<>();        for (String name : filterList) {            Map<String, String> selectMap = new HashMap<>();            selectMap.put(\"id\", name);            selectMap.put(\"text\", name);            jobSelectDataList.add(selectMap);        }        ret.put(\"jobList\", jobSelectDataList);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxFetchFlowRealJobList", "params": ["Project", "HashMap<String,Object>", "HttpServletRequest"], "throws": ["ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxFetchFlowRealJobList(final Project project, final HashMap<String, Object> ret,        final HttpServletRequest req) throws ServletException {        final String flowId = getParam(req, \"flow\");        //final Flow flow = project.getFlow(flowId);        final Flow flow = project.getFlow(flowId);        if (flow == null) {            logger.error(flowId + \" is not exist\");            return;        }        String searchName = req.getParameter(\"serach\");        List<String> jobList = new ArrayList<>();        jobList.add(\"all_jobs\" + \" \" + flow.getId());        getFlowRealJobTree(project, flowId, jobList);        if (null != searchName && !searchName.isEmpty()) {            List<String> filterList = new ArrayList<>();            for (String jobName : jobList) {                if (jobName.contains(searchName)) {                    filterList.add(jobName);                }            }            jobList.clear();            jobList.addAll(filterList);        }        List<Map<String, String>> jobSelectDataList = new ArrayList<>();        for (String name : jobList) {            Map<String, String> selectMap = new HashMap<>();            selectMap.put(\"id\", name);            selectMap.put(\"text\", name);            jobSelectDataList.add(selectMap);        }        ret.put(\"jobList\", jobSelectDataList);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "getFlowRealJobTree", "params": ["Project", "String", "List<String>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void getFlowRealJobTree(final Project project, final String flowId,        final List<String> jobList) {        final Flow flow = project.getFlow(flowId);        final ArrayList<Map<String, Object>> nodeList =            new ArrayList<>();        for (final Node node : flow.getNodes()) {            //\u53ea\u8bb0\u5f55\u975e flow \u7c7b\u578b job            if (node.getEmbeddedFlowId() == null) {                jobList.add(node.getId());            }            if (node.getEmbeddedFlowId() != null) {                getFlowRealJobTree(project, node.getEmbeddedFlowId(), jobList);            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxJobHistoryPage", "params": ["Project", "HashMap<String,Object>", "HttpServletRequest", "User"], "throws": ["ServletException", "IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxJobHistoryPage(final Project project, final HashMap<String, Object> ret,        final HttpServletRequest req, final User user) throws ServletException, IOException {        final String jobId = getParam(req, \"jobId\");        final int pageNum = getIntParam(req, \"page\", 1);        final int pageSize = getIntParam(req, \"size\", 20);        final int skipPage = (pageNum - 1) * pageSize;        int total = 0;//    long moyenne = 0;        List<ExecutableJobInfo> jobInfo = new ArrayList<>();        try {            total = this.executorManagerAdapter.getNumberOfJobExecutions(project, jobId);            jobInfo = this.executorManagerAdapter.getExecutableJobs(project, jobId, skipPage, pageSize);            if (jobInfo == null || jobInfo.isEmpty()) {                jobInfo = null;            }//      moyenne = this.executorManagerAdapter.getExecutableJobsMoyenneRunTime(project, jobId);            if (jobInfo != null) {                jobInfo.stream().forEach(executableJobInfo -> {                    ExecutableFlow executionFlow = null;                    try {                        executionFlow = this.executorManagerAdapter.getExecutableFlow(executableJobInfo.getExecId());                    } catch (ExecutorManagerException e) {                        e.printStackTrace();                    }                    Map<String, String> repeatMap = executionFlow.getRepeatOption();                    if (!repeatMap.isEmpty()) {                        Long recoverRunDate = Long.valueOf(String.valueOf(repeatMap.get(\"startTimeLong\")));                        LocalDateTime localDateTime = new LocalDateTime(new Date(recoverRunDate)).minusDays(1);                        Date date = localDateTime.toDate();                        executableJobInfo.setRunDate(date.getTime());                    } else {                        Long runDate = executionFlow.getStartTime();                        if (-1 != runDate) {                            LocalDateTime localDateTime = new LocalDateTime(new Date(runDate)).minusDays(1);                            Date date = localDateTime.toDate();                            executableJobInfo.setRunDate(date.getTime());                        } else {                            executableJobInfo.setRunDate(runDate);                        }                    }                });            }        } catch (final ExecutorManagerException e) {        }//    long allRunTime = 0;//    int successFlowNum = 0;//    if (jobInfo != null) {//      for (final ExecutableJobInfo info : jobInfo) {//        if(Status.SUCCEEDED.equals(info.getStatus())){//          successFlowNum += 1;//          allRunTime += (info.getEndTime() - info.getStartTime());//        }//      }//      if(allRunTime !=0 && successFlowNum !=0){//        moyenne = allRunTime/successFlowNum;//      }//    }        final List<Object> jobPageList = new ArrayList<>();        for (final ExecutableJobInfo info : jobInfo) {            final Map<String, Object> map = info.toObject();//      map.put(\"moyenne\", moyenne);            jobPageList.add(map);        }        ret.put(\"jobPageList\", jobPageList);        ret.put(\"total\", total);        ret.put(\"from\", pageNum);        ret.put(\"length\", pageSize);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxGetJobParamData", "params": ["Project", "HashMap<String,Object>", "HttpServletRequest"], "throws": ["ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxGetJobParamData(final Project project, final HashMap<String, Object> ret,        final HttpServletRequest req) throws ServletException {        final String flowName = getParam(req, \"flowName\");        final String jobName = getParam(req, \"jobName\");        final Flow flow = project.getFlow(flowName);        Map<String, String> dataMap = loadProjectManagerServletI18nData();        if (flow == null) {            ret.put(\"error\", dataMap.get(\"project\") + project.getName() + dataMap.get(\"notExistFlow\") + flowName);            return;        }        final Node node = flow.getNode(jobName);        if (node == null) {            ret.put(\"error\", dataMap.get(\"flow\") + flowName + dataMap.get(\"notExistJob\") + jobName);            return;        }        Props jobProp;        try {            jobProp = this.projectManager.getProperties(project, flow, jobName, node.getJobSource());        } catch (final ProjectManagerException e) {            ret.put(\"error\", \"Failed to retrieve job properties!\");            return;        }        if (jobProp == null) {            jobProp = new Props();        }        List<Map<String, String>> jobParamDataList = new ArrayList<>();        for (final String ps : jobProp.getKeySet()) {            final Map<String, String> generalParams = new HashMap<>();            generalParams.put(\"paramName\", ps);            generalParams.put(\"paramValue\", jobProp.getString(ps));            if (ps.equals(\"type\") && jobProp.getString(ps).equals(\"datachecker\")) {                generalParams.put(\"paramNotice\", dataMap.get(\"checkSourceType\"));            }            jobParamDataList.add(generalParams);        }        ret.put(\"jobParamData\", jobParamDataList);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxFetchRunningScheduleId", "params": ["Project", "HashMap<String,Object>", "HttpServletRequest"], "throws": ["ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void ajaxFetchRunningScheduleId(final Project project, final HashMap<String, Object> ret,        final HttpServletRequest req) throws ServletException {        final String flowId = getParam(req, \"flow\");        try {            Schedule schedule = this.scheduleManager.getSchedule(project.getId(), flowId);            if (schedule != null) {                int scheduleId = schedule.getScheduleId();                String cronExpression = schedule.getCronExpression();                ret.put(\"cronExpression\", cronExpression);                ret.put(\"scheduleId\", scheduleId);            } else {                ret.put(\"cronExpression\", \"\");                ret.put(\"scheduleId\", \"\");            }        } catch (ScheduleManagerException e) {            logger.error(\"Fetch running schedule failed, caused by:\" + e);            ret.put(\"error\", \"Fetch running schedule failed, caused by:\" + e.getMessage());        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "getWtssProjectPrivilegeCheck", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean getWtssProjectPrivilegeCheck() {        return wtss_project_privilege_check;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "ProjectManagerServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "compare", "params": ["Node", "Node"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int compare(final Node node1, final Node node2) {            return node1.getLevel() - node2.getLevel();        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "NodeLevelComparator", "extends": null, "implements": ["Comparator"], "modifiers": ["private", "static"]}}, {"method_name": "getPage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getPage() {            return this.page;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "PageSelection", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getSize() {            return this.size;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "PageSelection", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDisabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean getDisabled() {            return this.disabled;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "PageSelection", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isSelected", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isSelected() {            return this.selected;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "PageSelection", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setSelected", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setSelected(final boolean selected) {            this.selected = selected;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "PageSelection", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getNextPage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getNextPage() {            return this.nextPage;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java", "stars": "18", "class": {"name": "PageSelection", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onViewRecycled", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onViewRecycled (android.support.v7.widget.RecyclerView.ViewHolder p0)\t{\t\tn_onViewRecycled (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v7/widget/RecyclerView_RecyclerListenerImplementor.java", "stars": "2", "class": {"name": "RecyclerView_RecyclerListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onViewRecycled", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onViewRecycled (android.support.v7.widget.RecyclerView.ViewHolder p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v7/widget/RecyclerView_RecyclerListenerImplementor.java", "stars": "2", "class": {"name": "RecyclerView_RecyclerListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v7/widget/RecyclerView_RecyclerListenerImplementor.java", "stars": "2", "class": {"name": "RecyclerView_RecyclerListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v7/widget/RecyclerView_RecyclerListenerImplementor.java", "stars": "2", "class": {"name": "RecyclerView_RecyclerListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\t\tSystem.setProperty(ChromeDriverService.CHROME_DRIVER_SILENT_OUTPUT_PROPERTY, \"true\");\t// System.setProperty(\"webdriver.chrome.silentOutput\", \"true\");\tSystem.setProperty(\"webdriver.chrome.driver\", \"drivers/chromedriver.exe\");\tWebDriver driver = new ChromeDriver();\tString url = \"https://ebay.com\";\tdriver.get(url);\tList<WebElement> ebayLinkLists=driver.findElements(By.tagName(\"a\"));\t\tSystem.out.println(\"Size of the links: \"+ebayLinkLists.size());\t\tfor(int i=0; i<ebayLinkLists.size(); i++) {\t\tString linkText= ebayLinkLists.get(i).getText();\t\tif(!linkText.isEmpty()) {\t\tSystem.out.println(linkText);\t\t}\t\t}\tdriver.close();\t\t\t\t}", "url": "https://raw.githubusercontent.com/fadimedibi/SeleniumTurkish/master/src/com/class4/FindElements.java", "stars": "3", "class": {"name": "FindElements", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate() {        super.onCreate();        init();    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/app/src/main/java/com/wxwteam/bleapp/BLEApplication.java", "stars": "2", "class": {"name": "BLEApplication", "extends": "Application", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void init(){        BleManager.getInstance().init(this);        BleManager.getInstance()                .enableLog(true)                .setReConnectCount(1, 5000)                .setConnectOverTime(20000)                .setOperateTimeout(5000);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/app/src/main/java/com/wxwteam/bleapp/BLEApplication.java", "stars": "2", "class": {"name": "BLEApplication", "extends": "Application", "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstanceShouldNotBeNull", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void getInstanceShouldNotBeNull() {    VFS vsf = VFS.getInstance();    Assertions.assertNotNull(vsf);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/VFSTest.java", "stars": "15", "class": {"name": "VFSTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getInstanceShouldNotBeNullInMultiThreadEnv", "params": [], "throws": ["InterruptedException"], "modifiers": [], "return_type": "void", "snippet": "  void getInstanceShouldNotBeNullInMultiThreadEnv() throws InterruptedException {    final int threadCount = 3;    Thread[] threads = new Thread[threadCount];    InstanceGetterProcedure[] procedures = new InstanceGetterProcedure[threadCount];    for (int i = 0; i < threads.length; i++) {      String threadName = \"Thread##\" + i;      procedures[i] = new InstanceGetterProcedure();      threads[i] = new Thread(procedures[i], threadName);    }    for (Thread thread : threads) {      thread.start();    }    for (Thread thread : threads) {      thread.join();    }    // All caller got must be the same instance    for (int i = 0; i < threadCount - 1; i++) {      Assertions.assertEquals(procedures[i].instanceGot, procedures[i + 1].instanceGot);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/VFSTest.java", "stars": "15", "class": {"name": "VFSTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getExistMethod", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void getExistMethod() {    Method method = VFS.getMethod(VFS.class, \"list\", String.class);    Assertions.assertNotNull(method);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/VFSTest.java", "stars": "15", "class": {"name": "VFSTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getNotExistMethod", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void getNotExistMethod() {    Method method = VFS.getMethod(VFS.class, \"listXxx\", String.class);    Assertions.assertNull(method);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/VFSTest.java", "stars": "15", "class": {"name": "VFSTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "invoke", "params": [], "throws": ["IOException", "NoSuchMethodException"], "modifiers": [], "return_type": "void", "snippet": "  void invoke() throws IOException, NoSuchMethodException {    VFS vfs = VFS.invoke(VFS.class.getMethod(\"getInstance\"), VFS.class);    Assertions.assertEquals(vfs, VFS.getInstance());    Assertions.assertThrows(RuntimeException.class, () -> {      //java.lang.IllegalArgumentException: wrong number of arguments      VFS.invoke(VFS.class.getMethod(\"getInstance\"), VFS.class, \"unnecessaryArgument\");    });    Assertions.assertThrows(IOException.class, () -> {      //InvocationTargetException.getTargetException -> IOException      VFS.invoke(Resources.class.getMethod(\"getResourceAsProperties\", String.class), Resources.class, \"invalidResource\");    });    Assertions.assertThrows(RuntimeException.class, () -> {      //Other InvocationTargetException      VFS.invoke(Integer.class.getMethod(\"valueOf\", String.class), Resources.class, \"InvalidIntegerNumber\");    });  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/VFSTest.java", "stars": "15", "class": {"name": "VFSTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run() {      instanceGot = VFS.getInstance();    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/io/VFSTest.java", "stars": "15", "class": {"name": "InstanceGetterProcedure", "extends": null, "implements": ["Runnable"], "modifiers": ["private"]}}, {"method_name": "setColor", "params": ["float", "float", "float", "float"], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "\t@Shadow protected abstract void setColor(float r, float g, float b, float a);\t@Shadow public abstract int getCharWidth(char character);\t@Shadow protected abstract float renderChar(char ch, boolean italic);\t@Shadow protected abstract void doDraw(float f);\t@Shadow public abstract int getStringWidth(String text);\t/**\t * @author Tigermouthbear\t */\t@Overwrite\tprivate void renderStringAtPos(String text, boolean shadow) {\t\tint size = getStringWidth(\"  \");\t\tList<Emoji> emojis = new ArrayList<>();\t\tfor(String possile : text.split(\":\")) {\t\t\tif(Emojis.isEmoji(possile)) emojis.add(new Emoji(possile));\t\t}\t\tfor(Emoji emoji : emojis) {\t\t\tif(!shadow) {\t\t\t\tint index = text.indexOf(\":\" + emoji.getName() + \":\");\t\t\t\tif(index == -1) continue;\t\t\t\tint x = getStringWidth(text.substring(0, index));\t\t\t\tMinecraft.getMinecraft().getTextureManager().bindTexture(Emojis.getEmoji(emoji));\t\t\t\tGlStateManager.color(1, 1, 1, alpha);\t\t\t\tGui.drawScaledCustomSizeModalRect((int) (posX + x), (int) posY, 0, 0, size, size, size, size, size, size);\t\t\t}\t\t\ttext = text.replaceFirst(\":\" + emoji.getName() + \":\", \"  \");\t\t}\t\tfor(int i = 0; i < text.length(); ++i) {\t\t\tchar c0 = text.charAt(i);\t\t\tif(c0 == 167 && i + 1 < text.length()) {\t\t\t\tint i1 = \"0123456789abcdefklmnor\".indexOf(String.valueOf(text.charAt(i + 1)).toLowerCase(Locale.ROOT).charAt(0));\t\t\t\tif(i1 < 16) {\t\t\t\t\tthis.randomStyle = false;\t\t\t\t\tthis.boldStyle = false;\t\t\t\t\tthis.strikethroughStyle = false;\t\t\t\t\tthis.underlineStyle = false;\t\t\t\t\tthis.italicStyle = false;\t\t\t\t\tif(i1 < 0 || i1 > 15) {\t\t\t\t\t\ti1 = 15;\t\t\t\t\t}\t\t\t\t\tif(shadow) {\t\t\t\t\t\ti1 += 16;\t\t\t\t\t}\t\t\t\t\tint j1 = this.colorCode[i1];\t\t\t\t\tthis.textColor = j1;\t\t\t\t\tsetColor((float) (j1 >> 16) / 255.0F, (float) (j1 >> 8 & 255) / 255.0F, (float) (j1 & 255) / 255.0F, this.alpha);\t\t\t\t} else if(i1 == 16) {\t\t\t\t\tthis.randomStyle = true;\t\t\t\t} else if(i1 == 17) {\t\t\t\t\tthis.boldStyle = true;\t\t\t\t} else if(i1 == 18) {\t\t\t\t\tthis.strikethroughStyle = true;\t\t\t\t} else if(i1 == 19) {\t\t\t\t\tthis.underlineStyle = true;\t\t\t\t} else if(i1 == 20) {\t\t\t\t\tthis.italicStyle = true;\t\t\t\t} else if(i1 == 21) {\t\t\t\t\tthis.randomStyle = false;\t\t\t\t\tthis.boldStyle = false;\t\t\t\t\tthis.strikethroughStyle = false;\t\t\t\t\tthis.underlineStyle = false;\t\t\t\t\tthis.italicStyle = false;\t\t\t\t\tsetColor(this.red, this.blue, this.green, this.alpha);\t\t\t\t}\t\t\t\t++i;\t\t\t} else {\t\t\t\tint j = \"\\u00c0\\u00c1\\u00c2\\u00c8\\u00ca\\u00cb\\u00cd\\u00d3\\u00d4\\u00d5\\u00da\\u00df\\u00e3\\u00f5\\u011f\\u0130\\u0131\\u0152\\u0153\\u015e\\u015f\\u0174\\u0175\\u017e\\u0207\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000 !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\\u0000\\u00c7\\u00fc\\u00e9\\u00e2\\u00e4\\u00e0\\u00e5\\u00e7\\u00ea\\u00eb\\u00e8\\u00ef\\u00ee\\u00ec\\u00c4\\u00c5\\u00c9\\u00e6\\u00c6\\u00f4\\u00f6\\u00f2\\u00fb\\u00f9\\u00ff\\u00d6\\u00dc\\u00f8\\u00a3\\u00d8\\u00d7\\u0192\\u00e1\\u00ed\\u00f3\\u00fa\\u00f1\\u00d1\\u00aa\\u00ba\\u00bf\\u00ae\\u00ac\\u00bd\\u00bc\\u00a1\\u00ab\\u00bb\\u2591\\u2592\\u2593\\u2502\\u2524\\u2561\\u2562\\u2556\\u2555\\u2563\\u2551\\u2557\\u255d\\u255c\\u255b\\u2510\\u2514\\u2534\\u252c\\u251c\\u2500\\u253c\\u255e\\u255f\\u255a\\u2554\\u2569\\u2566\\u2560\\u2550\\u256c\\u2567\\u2568\\u2564\\u2565\\u2559\\u2558\\u2552\\u2553\\u256b\\u256a\\u2518\\u250c\\u2588\\u2584\\u258c\\u2590\\u2580\\u03b1\\u03b2\\u0393\\u03c0\\u03a3\\u03c3\\u03bc\\u03c4\\u03a6\\u0398\\u03a9\\u03b4\\u221e\\u2205\\u2208\\u2229\\u2261\\u00b1\\u2265\\u2264\\u2320\\u2321\\u00f7\\u2248\\u00b0\\u2219\\u00b7\\u221a\\u207f\\u00b2\\u25a0\\u0000\".indexOf(c0);\t\t\t\tif(this.randomStyle && j != -1) {\t\t\t\t\tint k = this.getCharWidth(c0);\t\t\t\t\tchar c1;\t\t\t\t\twhile(true) {\t\t\t\t\t\tj = this.fontRandom.nextInt(\"\\u00c0\\u00c1\\u00c2\\u00c8\\u00ca\\u00cb\\u00cd\\u00d3\\u00d4\\u00d5\\u00da\\u00df\\u00e3\\u00f5\\u011f\\u0130\\u0131\\u0152\\u0153\\u015e\\u015f\\u0174\\u0175\\u017e\\u0207\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000 !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\\u0000\\u00c7\\u00fc\\u00e9\\u00e2\\u00e4\\u00e0\\u00e5\\u00e7\\u00ea\\u00eb\\u00e8\\u00ef\\u00ee\\u00ec\\u00c4\\u00c5\\u00c9\\u00e6\\u00c6\\u00f4\\u00f6\\u00f2\\u00fb\\u00f9\\u00ff\\u00d6\\u00dc\\u00f8\\u00a3\\u00d8\\u00d7\\u0192\\u00e1\\u00ed\\u00f3\\u00fa\\u00f1\\u00d1\\u00aa\\u00ba\\u00bf\\u00ae\\u00ac\\u00bd\\u00bc\\u00a1\\u00ab\\u00bb\\u2591\\u2592\\u2593\\u2502\\u2524\\u2561\\u2562\\u2556\\u2555\\u2563\\u2551\\u2557\\u255d\\u255c\\u255b\\u2510\\u2514\\u2534\\u252c\\u251c\\u2500\\u253c\\u255e\\u255f\\u255a\\u2554\\u2569\\u2566\\u2560\\u2550\\u256c\\u2567\\u2568\\u2564\\u2565\\u2559\\u2558\\u2552\\u2553\\u256b\\u256a\\u2518\\u250c\\u2588\\u2584\\u258c\\u2590\\u2580\\u03b1\\u03b2\\u0393\\u03c0\\u03a3\\u03c3\\u03bc\\u03c4\\u03a6\\u0398\\u03a9\\u03b4\\u221e\\u2205\\u2208\\u2229\\u2261\\u00b1\\u2265\\u2264\\u2320\\u2321\\u00f7\\u2248\\u00b0\\u2219\\u00b7\\u221a\\u207f\\u00b2\\u25a0\\u0000\".length());\t\t\t\t\t\tc1 = \"\\u00c0\\u00c1\\u00c2\\u00c8\\u00ca\\u00cb\\u00cd\\u00d3\\u00d4\\u00d5\\u00da\\u00df\\u00e3\\u00f5\\u011f\\u0130\\u0131\\u0152\\u0153\\u015e\\u015f\\u0174\\u0175\\u017e\\u0207\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000 !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\\u0000\\u00c7\\u00fc\\u00e9\\u00e2\\u00e4\\u00e0\\u00e5\\u00e7\\u00ea\\u00eb\\u00e8\\u00ef\\u00ee\\u00ec\\u00c4\\u00c5\\u00c9\\u00e6\\u00c6\\u00f4\\u00f6\\u00f2\\u00fb\\u00f9\\u00ff\\u00d6\\u00dc\\u00f8\\u00a3\\u00d8\\u00d7\\u0192\\u00e1\\u00ed\\u00f3\\u00fa\\u00f1\\u00d1\\u00aa\\u00ba\\u00bf\\u00ae\\u00ac\\u00bd\\u00bc\\u00a1\\u00ab\\u00bb\\u2591\\u2592\\u2593\\u2502\\u2524\\u2561\\u2562\\u2556\\u2555\\u2563\\u2551\\u2557\\u255d\\u255c\\u255b\\u2510\\u2514\\u2534\\u252c\\u251c\\u2500\\u253c\\u255e\\u255f\\u255a\\u2554\\u2569\\u2566\\u2560\\u2550\\u256c\\u2567\\u2568\\u2564\\u2565\\u2559\\u2558\\u2552\\u2553\\u256b\\u256a\\u2518\\u250c\\u2588\\u2584\\u258c\\u2590\\u2580\\u03b1\\u03b2\\u0393\\u03c0\\u03a3\\u03c3\\u03bc\\u03c4\\u03a6\\u0398\\u03a9\\u03b4\\u221e\\u2205\\u2208\\u2229\\u2261\\u00b1\\u2265\\u2264\\u2320\\u2321\\u00f7\\u2248\\u00b0\\u2219\\u00b7\\u221a\\u207f\\u00b2\\u25a0\\u0000\".charAt(j);\t\t\t\t\t\tif(k == this.getCharWidth(c1)) {\t\t\t\t\t\t\tbreak;\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t\tc0 = c1;\t\t\t\t}\t\t\t\tfloat f1 = j == -1 || this.unicodeFlag ? 0.5f: 1f;\t\t\t\tboolean flag = (c0 == 0 || j == -1 || this.unicodeFlag) && shadow;\t\t\t\tif(flag) {\t\t\t\t\tthis.posX -= f1;\t\t\t\t\tthis.posY -= f1;\t\t\t\t}\t\t\t\tfloat f = this.renderChar(c0, this.italicStyle);\t\t\t\tif(flag) {\t\t\t\t\tthis.posX += f1;\t\t\t\t\tthis.posY += f1;\t\t\t\t}\t\t\t\tif(this.boldStyle) {\t\t\t\t\tthis.posX += f1;\t\t\t\t\tif(flag) {\t\t\t\t\t\tthis.posX -= f1;\t\t\t\t\t\tthis.posY -= f1;\t\t\t\t\t}\t\t\t\t\tthis.renderChar(c0, this.italicStyle);\t\t\t\t\tthis.posX -= f1;\t\t\t\t\tif(flag) {\t\t\t\t\t\tthis.posX += f1;\t\t\t\t\t\tthis.posY += f1;\t\t\t\t\t}\t\t\t\t\t++f;\t\t\t\t}\t\t\t\tdoDraw(f);\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/2b2t-Utilities/2b2t-Utilities/master/src/main/java/me/tigermouthbear/utilities/mixin/MixinFontRenderer.java", "stars": "2", "class": {"name": "MixinFontRenderer", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getCharWidth", "params": ["char"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "int", "snippet": "\t@Shadow public abstract int getCharWidth(char character);\t@Shadow protected abstract float renderChar(char ch, boolean italic);\t@Shadow protected abstract void doDraw(float f);\t@Shadow public abstract int getStringWidth(String text);\t/**\t * @author Tigermouthbear\t */\t@Overwrite\tprivate void renderStringAtPos(String text, boolean shadow) {\t\tint size = getStringWidth(\"  \");\t\tList<Emoji> emojis = new ArrayList<>();\t\tfor(String possile : text.split(\":\")) {\t\t\tif(Emojis.isEmoji(possile)) emojis.add(new Emoji(possile));\t\t}\t\tfor(Emoji emoji : emojis) {\t\t\tif(!shadow) {\t\t\t\tint index = text.indexOf(\":\" + emoji.getName() + \":\");\t\t\t\tif(index == -1) continue;\t\t\t\tint x = getStringWidth(text.substring(0, index));\t\t\t\tMinecraft.getMinecraft().getTextureManager().bindTexture(Emojis.getEmoji(emoji));\t\t\t\tGlStateManager.color(1, 1, 1, alpha);\t\t\t\tGui.drawScaledCustomSizeModalRect((int) (posX + x), (int) posY, 0, 0, size, size, size, size, size, size);\t\t\t}\t\t\ttext = text.replaceFirst(\":\" + emoji.getName() + \":\", \"  \");\t\t}\t\tfor(int i = 0; i < text.length(); ++i) {\t\t\tchar c0 = text.charAt(i);\t\t\tif(c0 == 167 && i + 1 < text.length()) {\t\t\t\tint i1 = \"0123456789abcdefklmnor\".indexOf(String.valueOf(text.charAt(i + 1)).toLowerCase(Locale.ROOT).charAt(0));\t\t\t\tif(i1 < 16) {\t\t\t\t\tthis.randomStyle = false;\t\t\t\t\tthis.boldStyle = false;\t\t\t\t\tthis.strikethroughStyle = false;\t\t\t\t\tthis.underlineStyle = false;\t\t\t\t\tthis.italicStyle = false;\t\t\t\t\tif(i1 < 0 || i1 > 15) {\t\t\t\t\t\ti1 = 15;\t\t\t\t\t}\t\t\t\t\tif(shadow) {\t\t\t\t\t\ti1 += 16;\t\t\t\t\t}\t\t\t\t\tint j1 = this.colorCode[i1];\t\t\t\t\tthis.textColor = j1;\t\t\t\t\tsetColor((float) (j1 >> 16) / 255.0F, (float) (j1 >> 8 & 255) / 255.0F, (float) (j1 & 255) / 255.0F, this.alpha);\t\t\t\t} else if(i1 == 16) {\t\t\t\t\tthis.randomStyle = true;\t\t\t\t} else if(i1 == 17) {\t\t\t\t\tthis.boldStyle = true;\t\t\t\t} else if(i1 == 18) {\t\t\t\t\tthis.strikethroughStyle = true;\t\t\t\t} else if(i1 == 19) {\t\t\t\t\tthis.underlineStyle = true;\t\t\t\t} else if(i1 == 20) {\t\t\t\t\tthis.italicStyle = true;\t\t\t\t} else if(i1 == 21) {\t\t\t\t\tthis.randomStyle = false;\t\t\t\t\tthis.boldStyle = false;\t\t\t\t\tthis.strikethroughStyle = false;\t\t\t\t\tthis.underlineStyle = false;\t\t\t\t\tthis.italicStyle = false;\t\t\t\t\tsetColor(this.red, this.blue, this.green, this.alpha);\t\t\t\t}\t\t\t\t++i;\t\t\t} else {\t\t\t\tint j = \"\\u00c0\\u00c1\\u00c2\\u00c8\\u00ca\\u00cb\\u00cd\\u00d3\\u00d4\\u00d5\\u00da\\u00df\\u00e3\\u00f5\\u011f\\u0130\\u0131\\u0152\\u0153\\u015e\\u015f\\u0174\\u0175\\u017e\\u0207\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000 !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\\u0000\\u00c7\\u00fc\\u00e9\\u00e2\\u00e4\\u00e0\\u00e5\\u00e7\\u00ea\\u00eb\\u00e8\\u00ef\\u00ee\\u00ec\\u00c4\\u00c5\\u00c9\\u00e6\\u00c6\\u00f4\\u00f6\\u00f2\\u00fb\\u00f9\\u00ff\\u00d6\\u00dc\\u00f8\\u00a3\\u00d8\\u00d7\\u0192\\u00e1\\u00ed\\u00f3\\u00fa\\u00f1\\u00d1\\u00aa\\u00ba\\u00bf\\u00ae\\u00ac\\u00bd\\u00bc\\u00a1\\u00ab\\u00bb\\u2591\\u2592\\u2593\\u2502\\u2524\\u2561\\u2562\\u2556\\u2555\\u2563\\u2551\\u2557\\u255d\\u255c\\u255b\\u2510\\u2514\\u2534\\u252c\\u251c\\u2500\\u253c\\u255e\\u255f\\u255a\\u2554\\u2569\\u2566\\u2560\\u2550\\u256c\\u2567\\u2568\\u2564\\u2565\\u2559\\u2558\\u2552\\u2553\\u256b\\u256a\\u2518\\u250c\\u2588\\u2584\\u258c\\u2590\\u2580\\u03b1\\u03b2\\u0393\\u03c0\\u03a3\\u03c3\\u03bc\\u03c4\\u03a6\\u0398\\u03a9\\u03b4\\u221e\\u2205\\u2208\\u2229\\u2261\\u00b1\\u2265\\u2264\\u2320\\u2321\\u00f7\\u2248\\u00b0\\u2219\\u00b7\\u221a\\u207f\\u00b2\\u25a0\\u0000\".indexOf(c0);\t\t\t\tif(this.randomStyle && j != -1) {\t\t\t\t\tint k = this.getCharWidth(c0);\t\t\t\t\tchar c1;\t\t\t\t\twhile(true) {\t\t\t\t\t\tj = this.fontRandom.nextInt(\"\\u00c0\\u00c1\\u00c2\\u00c8\\u00ca\\u00cb\\u00cd\\u00d3\\u00d4\\u00d5\\u00da\\u00df\\u00e3\\u00f5\\u011f\\u0130\\u0131\\u0152\\u0153\\u015e\\u015f\\u0174\\u0175\\u017e\\u0207\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000 !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\\u0000\\u00c7\\u00fc\\u00e9\\u00e2\\u00e4\\u00e0\\u00e5\\u00e7\\u00ea\\u00eb\\u00e8\\u00ef\\u00ee\\u00ec\\u00c4\\u00c5\\u00c9\\u00e6\\u00c6\\u00f4\\u00f6\\u00f2\\u00fb\\u00f9\\u00ff\\u00d6\\u00dc\\u00f8\\u00a3\\u00d8\\u00d7\\u0192\\u00e1\\u00ed\\u00f3\\u00fa\\u00f1\\u00d1\\u00aa\\u00ba\\u00bf\\u00ae\\u00ac\\u00bd\\u00bc\\u00a1\\u00ab\\u00bb\\u2591\\u2592\\u2593\\u2502\\u2524\\u2561\\u2562\\u2556\\u2555\\u2563\\u2551\\u2557\\u255d\\u255c\\u255b\\u2510\\u2514\\u2534\\u252c\\u251c\\u2500\\u253c\\u255e\\u255f\\u255a\\u2554\\u2569\\u2566\\u2560\\u2550\\u256c\\u2567\\u2568\\u2564\\u2565\\u2559\\u2558\\u2552\\u2553\\u256b\\u256a\\u2518\\u250c\\u2588\\u2584\\u258c\\u2590\\u2580\\u03b1\\u03b2\\u0393\\u03c0\\u03a3\\u03c3\\u03bc\\u03c4\\u03a6\\u0398\\u03a9\\u03b4\\u221e\\u2205\\u2208\\u2229\\u2261\\u00b1\\u2265\\u2264\\u2320\\u2321\\u00f7\\u2248\\u00b0\\u2219\\u00b7\\u221a\\u207f\\u00b2\\u25a0\\u0000\".length());\t\t\t\t\t\tc1 = \"\\u00c0\\u00c1\\u00c2\\u00c8\\u00ca\\u00cb\\u00cd\\u00d3\\u00d4\\u00d5\\u00da\\u00df\\u00e3\\u00f5\\u011f\\u0130\\u0131\\u0152\\u0153\\u015e\\u015f\\u0174\\u0175\\u017e\\u0207\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000 !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\\u0000\\u00c7\\u00fc\\u00e9\\u00e2\\u00e4\\u00e0\\u00e5\\u00e7\\u00ea\\u00eb\\u00e8\\u00ef\\u00ee\\u00ec\\u00c4\\u00c5\\u00c9\\u00e6\\u00c6\\u00f4\\u00f6\\u00f2\\u00fb\\u00f9\\u00ff\\u00d6\\u00dc\\u00f8\\u00a3\\u00d8\\u00d7\\u0192\\u00e1\\u00ed\\u00f3\\u00fa\\u00f1\\u00d1\\u00aa\\u00ba\\u00bf\\u00ae\\u00ac\\u00bd\\u00bc\\u00a1\\u00ab\\u00bb\\u2591\\u2592\\u2593\\u2502\\u2524\\u2561\\u2562\\u2556\\u2555\\u2563\\u2551\\u2557\\u255d\\u255c\\u255b\\u2510\\u2514\\u2534\\u252c\\u251c\\u2500\\u253c\\u255e\\u255f\\u255a\\u2554\\u2569\\u2566\\u2560\\u2550\\u256c\\u2567\\u2568\\u2564\\u2565\\u2559\\u2558\\u2552\\u2553\\u256b\\u256a\\u2518\\u250c\\u2588\\u2584\\u258c\\u2590\\u2580\\u03b1\\u03b2\\u0393\\u03c0\\u03a3\\u03c3\\u03bc\\u03c4\\u03a6\\u0398\\u03a9\\u03b4\\u221e\\u2205\\u2208\\u2229\\u2261\\u00b1\\u2265\\u2264\\u2320\\u2321\\u00f7\\u2248\\u00b0\\u2219\\u00b7\\u221a\\u207f\\u00b2\\u25a0\\u0000\".charAt(j);\t\t\t\t\t\tif(k == this.getCharWidth(c1)) {\t\t\t\t\t\t\tbreak;\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t\tc0 = c1;\t\t\t\t}\t\t\t\tfloat f1 = j == -1 || this.unicodeFlag ? 0.5f: 1f;\t\t\t\tboolean flag = (c0 == 0 || j == -1 || this.unicodeFlag) && shadow;\t\t\t\tif(flag) {\t\t\t\t\tthis.posX -= f1;\t\t\t\t\tthis.posY -= f1;\t\t\t\t}\t\t\t\tfloat f = this.renderChar(c0, this.italicStyle);\t\t\t\tif(flag) {\t\t\t\t\tthis.posX += f1;\t\t\t\t\tthis.posY += f1;\t\t\t\t}\t\t\t\tif(this.boldStyle) {\t\t\t\t\tthis.posX += f1;\t\t\t\t\tif(flag) {\t\t\t\t\t\tthis.posX -= f1;\t\t\t\t\t\tthis.posY -= f1;\t\t\t\t\t}\t\t\t\t\tthis.renderChar(c0, this.italicStyle);\t\t\t\t\tthis.posX -= f1;\t\t\t\t\tif(flag) {\t\t\t\t\t\tthis.posX += f1;\t\t\t\t\t\tthis.posY += f1;\t\t\t\t\t}\t\t\t\t\t++f;\t\t\t\t}\t\t\t\tdoDraw(f);\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/2b2t-Utilities/2b2t-Utilities/master/src/main/java/me/tigermouthbear/utilities/mixin/MixinFontRenderer.java", "stars": "2", "class": {"name": "MixinFontRenderer", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "renderChar", "params": ["char", "boolean"], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "float", "snippet": "\t@Shadow protected abstract float renderChar(char ch, boolean italic);\t@Shadow protected abstract void doDraw(float f);\t@Shadow public abstract int getStringWidth(String text);\t/**\t * @author Tigermouthbear\t */\t@Overwrite\tprivate void renderStringAtPos(String text, boolean shadow) {\t\tint size = getStringWidth(\"  \");\t\tList<Emoji> emojis = new ArrayList<>();\t\tfor(String possile : text.split(\":\")) {\t\t\tif(Emojis.isEmoji(possile)) emojis.add(new Emoji(possile));\t\t}\t\tfor(Emoji emoji : emojis) {\t\t\tif(!shadow) {\t\t\t\tint index = text.indexOf(\":\" + emoji.getName() + \":\");\t\t\t\tif(index == -1) continue;\t\t\t\tint x = getStringWidth(text.substring(0, index));\t\t\t\tMinecraft.getMinecraft().getTextureManager().bindTexture(Emojis.getEmoji(emoji));\t\t\t\tGlStateManager.color(1, 1, 1, alpha);\t\t\t\tGui.drawScaledCustomSizeModalRect((int) (posX + x), (int) posY, 0, 0, size, size, size, size, size, size);\t\t\t}\t\t\ttext = text.replaceFirst(\":\" + emoji.getName() + \":\", \"  \");\t\t}\t\tfor(int i = 0; i < text.length(); ++i) {\t\t\tchar c0 = text.charAt(i);\t\t\tif(c0 == 167 && i + 1 < text.length()) {\t\t\t\tint i1 = \"0123456789abcdefklmnor\".indexOf(String.valueOf(text.charAt(i + 1)).toLowerCase(Locale.ROOT).charAt(0));\t\t\t\tif(i1 < 16) {\t\t\t\t\tthis.randomStyle = false;\t\t\t\t\tthis.boldStyle = false;\t\t\t\t\tthis.strikethroughStyle = false;\t\t\t\t\tthis.underlineStyle = false;\t\t\t\t\tthis.italicStyle = false;\t\t\t\t\tif(i1 < 0 || i1 > 15) {\t\t\t\t\t\ti1 = 15;\t\t\t\t\t}\t\t\t\t\tif(shadow) {\t\t\t\t\t\ti1 += 16;\t\t\t\t\t}\t\t\t\t\tint j1 = this.colorCode[i1];\t\t\t\t\tthis.textColor = j1;\t\t\t\t\tsetColor((float) (j1 >> 16) / 255.0F, (float) (j1 >> 8 & 255) / 255.0F, (float) (j1 & 255) / 255.0F, this.alpha);\t\t\t\t} else if(i1 == 16) {\t\t\t\t\tthis.randomStyle = true;\t\t\t\t} else if(i1 == 17) {\t\t\t\t\tthis.boldStyle = true;\t\t\t\t} else if(i1 == 18) {\t\t\t\t\tthis.strikethroughStyle = true;\t\t\t\t} else if(i1 == 19) {\t\t\t\t\tthis.underlineStyle = true;\t\t\t\t} else if(i1 == 20) {\t\t\t\t\tthis.italicStyle = true;\t\t\t\t} else if(i1 == 21) {\t\t\t\t\tthis.randomStyle = false;\t\t\t\t\tthis.boldStyle = false;\t\t\t\t\tthis.strikethroughStyle = false;\t\t\t\t\tthis.underlineStyle = false;\t\t\t\t\tthis.italicStyle = false;\t\t\t\t\tsetColor(this.red, this.blue, this.green, this.alpha);\t\t\t\t}\t\t\t\t++i;\t\t\t} else {\t\t\t\tint j = \"\\u00c0\\u00c1\\u00c2\\u00c8\\u00ca\\u00cb\\u00cd\\u00d3\\u00d4\\u00d5\\u00da\\u00df\\u00e3\\u00f5\\u011f\\u0130\\u0131\\u0152\\u0153\\u015e\\u015f\\u0174\\u0175\\u017e\\u0207\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000 !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\\u0000\\u00c7\\u00fc\\u00e9\\u00e2\\u00e4\\u00e0\\u00e5\\u00e7\\u00ea\\u00eb\\u00e8\\u00ef\\u00ee\\u00ec\\u00c4\\u00c5\\u00c9\\u00e6\\u00c6\\u00f4\\u00f6\\u00f2\\u00fb\\u00f9\\u00ff\\u00d6\\u00dc\\u00f8\\u00a3\\u00d8\\u00d7\\u0192\\u00e1\\u00ed\\u00f3\\u00fa\\u00f1\\u00d1\\u00aa\\u00ba\\u00bf\\u00ae\\u00ac\\u00bd\\u00bc\\u00a1\\u00ab\\u00bb\\u2591\\u2592\\u2593\\u2502\\u2524\\u2561\\u2562\\u2556\\u2555\\u2563\\u2551\\u2557\\u255d\\u255c\\u255b\\u2510\\u2514\\u2534\\u252c\\u251c\\u2500\\u253c\\u255e\\u255f\\u255a\\u2554\\u2569\\u2566\\u2560\\u2550\\u256c\\u2567\\u2568\\u2564\\u2565\\u2559\\u2558\\u2552\\u2553\\u256b\\u256a\\u2518\\u250c\\u2588\\u2584\\u258c\\u2590\\u2580\\u03b1\\u03b2\\u0393\\u03c0\\u03a3\\u03c3\\u03bc\\u03c4\\u03a6\\u0398\\u03a9\\u03b4\\u221e\\u2205\\u2208\\u2229\\u2261\\u00b1\\u2265\\u2264\\u2320\\u2321\\u00f7\\u2248\\u00b0\\u2219\\u00b7\\u221a\\u207f\\u00b2\\u25a0\\u0000\".indexOf(c0);\t\t\t\tif(this.randomStyle && j != -1) {\t\t\t\t\tint k = this.getCharWidth(c0);\t\t\t\t\tchar c1;\t\t\t\t\twhile(true) {\t\t\t\t\t\tj = this.fontRandom.nextInt(\"\\u00c0\\u00c1\\u00c2\\u00c8\\u00ca\\u00cb\\u00cd\\u00d3\\u00d4\\u00d5\\u00da\\u00df\\u00e3\\u00f5\\u011f\\u0130\\u0131\\u0152\\u0153\\u015e\\u015f\\u0174\\u0175\\u017e\\u0207\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000 !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\\u0000\\u00c7\\u00fc\\u00e9\\u00e2\\u00e4\\u00e0\\u00e5\\u00e7\\u00ea\\u00eb\\u00e8\\u00ef\\u00ee\\u00ec\\u00c4\\u00c5\\u00c9\\u00e6\\u00c6\\u00f4\\u00f6\\u00f2\\u00fb\\u00f9\\u00ff\\u00d6\\u00dc\\u00f8\\u00a3\\u00d8\\u00d7\\u0192\\u00e1\\u00ed\\u00f3\\u00fa\\u00f1\\u00d1\\u00aa\\u00ba\\u00bf\\u00ae\\u00ac\\u00bd\\u00bc\\u00a1\\u00ab\\u00bb\\u2591\\u2592\\u2593\\u2502\\u2524\\u2561\\u2562\\u2556\\u2555\\u2563\\u2551\\u2557\\u255d\\u255c\\u255b\\u2510\\u2514\\u2534\\u252c\\u251c\\u2500\\u253c\\u255e\\u255f\\u255a\\u2554\\u2569\\u2566\\u2560\\u2550\\u256c\\u2567\\u2568\\u2564\\u2565\\u2559\\u2558\\u2552\\u2553\\u256b\\u256a\\u2518\\u250c\\u2588\\u2584\\u258c\\u2590\\u2580\\u03b1\\u03b2\\u0393\\u03c0\\u03a3\\u03c3\\u03bc\\u03c4\\u03a6\\u0398\\u03a9\\u03b4\\u221e\\u2205\\u2208\\u2229\\u2261\\u00b1\\u2265\\u2264\\u2320\\u2321\\u00f7\\u2248\\u00b0\\u2219\\u00b7\\u221a\\u207f\\u00b2\\u25a0\\u0000\".length());\t\t\t\t\t\tc1 = \"\\u00c0\\u00c1\\u00c2\\u00c8\\u00ca\\u00cb\\u00cd\\u00d3\\u00d4\\u00d5\\u00da\\u00df\\u00e3\\u00f5\\u011f\\u0130\\u0131\\u0152\\u0153\\u015e\\u015f\\u0174\\u0175\\u017e\\u0207\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000 !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\\u0000\\u00c7\\u00fc\\u00e9\\u00e2\\u00e4\\u00e0\\u00e5\\u00e7\\u00ea\\u00eb\\u00e8\\u00ef\\u00ee\\u00ec\\u00c4\\u00c5\\u00c9\\u00e6\\u00c6\\u00f4\\u00f6\\u00f2\\u00fb\\u00f9\\u00ff\\u00d6\\u00dc\\u00f8\\u00a3\\u00d8\\u00d7\\u0192\\u00e1\\u00ed\\u00f3\\u00fa\\u00f1\\u00d1\\u00aa\\u00ba\\u00bf\\u00ae\\u00ac\\u00bd\\u00bc\\u00a1\\u00ab\\u00bb\\u2591\\u2592\\u2593\\u2502\\u2524\\u2561\\u2562\\u2556\\u2555\\u2563\\u2551\\u2557\\u255d\\u255c\\u255b\\u2510\\u2514\\u2534\\u252c\\u251c\\u2500\\u253c\\u255e\\u255f\\u255a\\u2554\\u2569\\u2566\\u2560\\u2550\\u256c\\u2567\\u2568\\u2564\\u2565\\u2559\\u2558\\u2552\\u2553\\u256b\\u256a\\u2518\\u250c\\u2588\\u2584\\u258c\\u2590\\u2580\\u03b1\\u03b2\\u0393\\u03c0\\u03a3\\u03c3\\u03bc\\u03c4\\u03a6\\u0398\\u03a9\\u03b4\\u221e\\u2205\\u2208\\u2229\\u2261\\u00b1\\u2265\\u2264\\u2320\\u2321\\u00f7\\u2248\\u00b0\\u2219\\u00b7\\u221a\\u207f\\u00b2\\u25a0\\u0000\".charAt(j);\t\t\t\t\t\tif(k == this.getCharWidth(c1)) {\t\t\t\t\t\t\tbreak;\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t\tc0 = c1;\t\t\t\t}\t\t\t\tfloat f1 = j == -1 || this.unicodeFlag ? 0.5f: 1f;\t\t\t\tboolean flag = (c0 == 0 || j == -1 || this.unicodeFlag) && shadow;\t\t\t\tif(flag) {\t\t\t\t\tthis.posX -= f1;\t\t\t\t\tthis.posY -= f1;\t\t\t\t}\t\t\t\tfloat f = this.renderChar(c0, this.italicStyle);\t\t\t\tif(flag) {\t\t\t\t\tthis.posX += f1;\t\t\t\t\tthis.posY += f1;\t\t\t\t}\t\t\t\tif(this.boldStyle) {\t\t\t\t\tthis.posX += f1;\t\t\t\t\tif(flag) {\t\t\t\t\t\tthis.posX -= f1;\t\t\t\t\t\tthis.posY -= f1;\t\t\t\t\t}\t\t\t\t\tthis.renderChar(c0, this.italicStyle);\t\t\t\t\tthis.posX -= f1;\t\t\t\t\tif(flag) {\t\t\t\t\t\tthis.posX += f1;\t\t\t\t\t\tthis.posY += f1;\t\t\t\t\t}\t\t\t\t\t++f;\t\t\t\t}\t\t\t\tdoDraw(f);\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/2b2t-Utilities/2b2t-Utilities/master/src/main/java/me/tigermouthbear/utilities/mixin/MixinFontRenderer.java", "stars": "2", "class": {"name": "MixinFontRenderer", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "doDraw", "params": ["float"], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "\t@Shadow protected abstract void doDraw(float f);\t@Shadow public abstract int getStringWidth(String text);\t/**\t * @author Tigermouthbear\t */\t@Overwrite\tprivate void renderStringAtPos(String text, boolean shadow) {\t\tint size = getStringWidth(\"  \");\t\tList<Emoji> emojis = new ArrayList<>();\t\tfor(String possile : text.split(\":\")) {\t\t\tif(Emojis.isEmoji(possile)) emojis.add(new Emoji(possile));\t\t}\t\tfor(Emoji emoji : emojis) {\t\t\tif(!shadow) {\t\t\t\tint index = text.indexOf(\":\" + emoji.getName() + \":\");\t\t\t\tif(index == -1) continue;\t\t\t\tint x = getStringWidth(text.substring(0, index));\t\t\t\tMinecraft.getMinecraft().getTextureManager().bindTexture(Emojis.getEmoji(emoji));\t\t\t\tGlStateManager.color(1, 1, 1, alpha);\t\t\t\tGui.drawScaledCustomSizeModalRect((int) (posX + x), (int) posY, 0, 0, size, size, size, size, size, size);\t\t\t}\t\t\ttext = text.replaceFirst(\":\" + emoji.getName() + \":\", \"  \");\t\t}\t\tfor(int i = 0; i < text.length(); ++i) {\t\t\tchar c0 = text.charAt(i);\t\t\tif(c0 == 167 && i + 1 < text.length()) {\t\t\t\tint i1 = \"0123456789abcdefklmnor\".indexOf(String.valueOf(text.charAt(i + 1)).toLowerCase(Locale.ROOT).charAt(0));\t\t\t\tif(i1 < 16) {\t\t\t\t\tthis.randomStyle = false;\t\t\t\t\tthis.boldStyle = false;\t\t\t\t\tthis.strikethroughStyle = false;\t\t\t\t\tthis.underlineStyle = false;\t\t\t\t\tthis.italicStyle = false;\t\t\t\t\tif(i1 < 0 || i1 > 15) {\t\t\t\t\t\ti1 = 15;\t\t\t\t\t}\t\t\t\t\tif(shadow) {\t\t\t\t\t\ti1 += 16;\t\t\t\t\t}\t\t\t\t\tint j1 = this.colorCode[i1];\t\t\t\t\tthis.textColor = j1;\t\t\t\t\tsetColor((float) (j1 >> 16) / 255.0F, (float) (j1 >> 8 & 255) / 255.0F, (float) (j1 & 255) / 255.0F, this.alpha);\t\t\t\t} else if(i1 == 16) {\t\t\t\t\tthis.randomStyle = true;\t\t\t\t} else if(i1 == 17) {\t\t\t\t\tthis.boldStyle = true;\t\t\t\t} else if(i1 == 18) {\t\t\t\t\tthis.strikethroughStyle = true;\t\t\t\t} else if(i1 == 19) {\t\t\t\t\tthis.underlineStyle = true;\t\t\t\t} else if(i1 == 20) {\t\t\t\t\tthis.italicStyle = true;\t\t\t\t} else if(i1 == 21) {\t\t\t\t\tthis.randomStyle = false;\t\t\t\t\tthis.boldStyle = false;\t\t\t\t\tthis.strikethroughStyle = false;\t\t\t\t\tthis.underlineStyle = false;\t\t\t\t\tthis.italicStyle = false;\t\t\t\t\tsetColor(this.red, this.blue, this.green, this.alpha);\t\t\t\t}\t\t\t\t++i;\t\t\t} else {\t\t\t\tint j = \"\\u00c0\\u00c1\\u00c2\\u00c8\\u00ca\\u00cb\\u00cd\\u00d3\\u00d4\\u00d5\\u00da\\u00df\\u00e3\\u00f5\\u011f\\u0130\\u0131\\u0152\\u0153\\u015e\\u015f\\u0174\\u0175\\u017e\\u0207\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000 !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\\u0000\\u00c7\\u00fc\\u00e9\\u00e2\\u00e4\\u00e0\\u00e5\\u00e7\\u00ea\\u00eb\\u00e8\\u00ef\\u00ee\\u00ec\\u00c4\\u00c5\\u00c9\\u00e6\\u00c6\\u00f4\\u00f6\\u00f2\\u00fb\\u00f9\\u00ff\\u00d6\\u00dc\\u00f8\\u00a3\\u00d8\\u00d7\\u0192\\u00e1\\u00ed\\u00f3\\u00fa\\u00f1\\u00d1\\u00aa\\u00ba\\u00bf\\u00ae\\u00ac\\u00bd\\u00bc\\u00a1\\u00ab\\u00bb\\u2591\\u2592\\u2593\\u2502\\u2524\\u2561\\u2562\\u2556\\u2555\\u2563\\u2551\\u2557\\u255d\\u255c\\u255b\\u2510\\u2514\\u2534\\u252c\\u251c\\u2500\\u253c\\u255e\\u255f\\u255a\\u2554\\u2569\\u2566\\u2560\\u2550\\u256c\\u2567\\u2568\\u2564\\u2565\\u2559\\u2558\\u2552\\u2553\\u256b\\u256a\\u2518\\u250c\\u2588\\u2584\\u258c\\u2590\\u2580\\u03b1\\u03b2\\u0393\\u03c0\\u03a3\\u03c3\\u03bc\\u03c4\\u03a6\\u0398\\u03a9\\u03b4\\u221e\\u2205\\u2208\\u2229\\u2261\\u00b1\\u2265\\u2264\\u2320\\u2321\\u00f7\\u2248\\u00b0\\u2219\\u00b7\\u221a\\u207f\\u00b2\\u25a0\\u0000\".indexOf(c0);\t\t\t\tif(this.randomStyle && j != -1) {\t\t\t\t\tint k = this.getCharWidth(c0);\t\t\t\t\tchar c1;\t\t\t\t\twhile(true) {\t\t\t\t\t\tj = this.fontRandom.nextInt(\"\\u00c0\\u00c1\\u00c2\\u00c8\\u00ca\\u00cb\\u00cd\\u00d3\\u00d4\\u00d5\\u00da\\u00df\\u00e3\\u00f5\\u011f\\u0130\\u0131\\u0152\\u0153\\u015e\\u015f\\u0174\\u0175\\u017e\\u0207\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000 !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\\u0000\\u00c7\\u00fc\\u00e9\\u00e2\\u00e4\\u00e0\\u00e5\\u00e7\\u00ea\\u00eb\\u00e8\\u00ef\\u00ee\\u00ec\\u00c4\\u00c5\\u00c9\\u00e6\\u00c6\\u00f4\\u00f6\\u00f2\\u00fb\\u00f9\\u00ff\\u00d6\\u00dc\\u00f8\\u00a3\\u00d8\\u00d7\\u0192\\u00e1\\u00ed\\u00f3\\u00fa\\u00f1\\u00d1\\u00aa\\u00ba\\u00bf\\u00ae\\u00ac\\u00bd\\u00bc\\u00a1\\u00ab\\u00bb\\u2591\\u2592\\u2593\\u2502\\u2524\\u2561\\u2562\\u2556\\u2555\\u2563\\u2551\\u2557\\u255d\\u255c\\u255b\\u2510\\u2514\\u2534\\u252c\\u251c\\u2500\\u253c\\u255e\\u255f\\u255a\\u2554\\u2569\\u2566\\u2560\\u2550\\u256c\\u2567\\u2568\\u2564\\u2565\\u2559\\u2558\\u2552\\u2553\\u256b\\u256a\\u2518\\u250c\\u2588\\u2584\\u258c\\u2590\\u2580\\u03b1\\u03b2\\u0393\\u03c0\\u03a3\\u03c3\\u03bc\\u03c4\\u03a6\\u0398\\u03a9\\u03b4\\u221e\\u2205\\u2208\\u2229\\u2261\\u00b1\\u2265\\u2264\\u2320\\u2321\\u00f7\\u2248\\u00b0\\u2219\\u00b7\\u221a\\u207f\\u00b2\\u25a0\\u0000\".length());\t\t\t\t\t\tc1 = \"\\u00c0\\u00c1\\u00c2\\u00c8\\u00ca\\u00cb\\u00cd\\u00d3\\u00d4\\u00d5\\u00da\\u00df\\u00e3\\u00f5\\u011f\\u0130\\u0131\\u0152\\u0153\\u015e\\u015f\\u0174\\u0175\\u017e\\u0207\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000 !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\\u0000\\u00c7\\u00fc\\u00e9\\u00e2\\u00e4\\u00e0\\u00e5\\u00e7\\u00ea\\u00eb\\u00e8\\u00ef\\u00ee\\u00ec\\u00c4\\u00c5\\u00c9\\u00e6\\u00c6\\u00f4\\u00f6\\u00f2\\u00fb\\u00f9\\u00ff\\u00d6\\u00dc\\u00f8\\u00a3\\u00d8\\u00d7\\u0192\\u00e1\\u00ed\\u00f3\\u00fa\\u00f1\\u00d1\\u00aa\\u00ba\\u00bf\\u00ae\\u00ac\\u00bd\\u00bc\\u00a1\\u00ab\\u00bb\\u2591\\u2592\\u2593\\u2502\\u2524\\u2561\\u2562\\u2556\\u2555\\u2563\\u2551\\u2557\\u255d\\u255c\\u255b\\u2510\\u2514\\u2534\\u252c\\u251c\\u2500\\u253c\\u255e\\u255f\\u255a\\u2554\\u2569\\u2566\\u2560\\u2550\\u256c\\u2567\\u2568\\u2564\\u2565\\u2559\\u2558\\u2552\\u2553\\u256b\\u256a\\u2518\\u250c\\u2588\\u2584\\u258c\\u2590\\u2580\\u03b1\\u03b2\\u0393\\u03c0\\u03a3\\u03c3\\u03bc\\u03c4\\u03a6\\u0398\\u03a9\\u03b4\\u221e\\u2205\\u2208\\u2229\\u2261\\u00b1\\u2265\\u2264\\u2320\\u2321\\u00f7\\u2248\\u00b0\\u2219\\u00b7\\u221a\\u207f\\u00b2\\u25a0\\u0000\".charAt(j);\t\t\t\t\t\tif(k == this.getCharWidth(c1)) {\t\t\t\t\t\t\tbreak;\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t\tc0 = c1;\t\t\t\t}\t\t\t\tfloat f1 = j == -1 || this.unicodeFlag ? 0.5f: 1f;\t\t\t\tboolean flag = (c0 == 0 || j == -1 || this.unicodeFlag) && shadow;\t\t\t\tif(flag) {\t\t\t\t\tthis.posX -= f1;\t\t\t\t\tthis.posY -= f1;\t\t\t\t}\t\t\t\tfloat f = this.renderChar(c0, this.italicStyle);\t\t\t\tif(flag) {\t\t\t\t\tthis.posX += f1;\t\t\t\t\tthis.posY += f1;\t\t\t\t}\t\t\t\tif(this.boldStyle) {\t\t\t\t\tthis.posX += f1;\t\t\t\t\tif(flag) {\t\t\t\t\t\tthis.posX -= f1;\t\t\t\t\t\tthis.posY -= f1;\t\t\t\t\t}\t\t\t\t\tthis.renderChar(c0, this.italicStyle);\t\t\t\t\tthis.posX -= f1;\t\t\t\t\tif(flag) {\t\t\t\t\t\tthis.posX += f1;\t\t\t\t\t\tthis.posY += f1;\t\t\t\t\t}\t\t\t\t\t++f;\t\t\t\t}\t\t\t\tdoDraw(f);\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/2b2t-Utilities/2b2t-Utilities/master/src/main/java/me/tigermouthbear/utilities/mixin/MixinFontRenderer.java", "stars": "2", "class": {"name": "MixinFontRenderer", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getStringWidth", "params": ["String"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "int", "snippet": "\t@Shadow public abstract int getStringWidth(String text);\t/**\t * @author Tigermouthbear\t */\t@Overwrite\tprivate void renderStringAtPos(String text, boolean shadow) {\t\tint size = getStringWidth(\"  \");\t\tList<Emoji> emojis = new ArrayList<>();\t\tfor(String possile : text.split(\":\")) {\t\t\tif(Emojis.isEmoji(possile)) emojis.add(new Emoji(possile));\t\t}\t\tfor(Emoji emoji : emojis) {\t\t\tif(!shadow) {\t\t\t\tint index = text.indexOf(\":\" + emoji.getName() + \":\");\t\t\t\tif(index == -1) continue;\t\t\t\tint x = getStringWidth(text.substring(0, index));\t\t\t\tMinecraft.getMinecraft().getTextureManager().bindTexture(Emojis.getEmoji(emoji));\t\t\t\tGlStateManager.color(1, 1, 1, alpha);\t\t\t\tGui.drawScaledCustomSizeModalRect((int) (posX + x), (int) posY, 0, 0, size, size, size, size, size, size);\t\t\t}\t\t\ttext = text.replaceFirst(\":\" + emoji.getName() + \":\", \"  \");\t\t}\t\tfor(int i = 0; i < text.length(); ++i) {\t\t\tchar c0 = text.charAt(i);\t\t\tif(c0 == 167 && i + 1 < text.length()) {\t\t\t\tint i1 = \"0123456789abcdefklmnor\".indexOf(String.valueOf(text.charAt(i + 1)).toLowerCase(Locale.ROOT).charAt(0));\t\t\t\tif(i1 < 16) {\t\t\t\t\tthis.randomStyle = false;\t\t\t\t\tthis.boldStyle = false;\t\t\t\t\tthis.strikethroughStyle = false;\t\t\t\t\tthis.underlineStyle = false;\t\t\t\t\tthis.italicStyle = false;\t\t\t\t\tif(i1 < 0 || i1 > 15) {\t\t\t\t\t\ti1 = 15;\t\t\t\t\t}\t\t\t\t\tif(shadow) {\t\t\t\t\t\ti1 += 16;\t\t\t\t\t}\t\t\t\t\tint j1 = this.colorCode[i1];\t\t\t\t\tthis.textColor = j1;\t\t\t\t\tsetColor((float) (j1 >> 16) / 255.0F, (float) (j1 >> 8 & 255) / 255.0F, (float) (j1 & 255) / 255.0F, this.alpha);\t\t\t\t} else if(i1 == 16) {\t\t\t\t\tthis.randomStyle = true;\t\t\t\t} else if(i1 == 17) {\t\t\t\t\tthis.boldStyle = true;\t\t\t\t} else if(i1 == 18) {\t\t\t\t\tthis.strikethroughStyle = true;\t\t\t\t} else if(i1 == 19) {\t\t\t\t\tthis.underlineStyle = true;\t\t\t\t} else if(i1 == 20) {\t\t\t\t\tthis.italicStyle = true;\t\t\t\t} else if(i1 == 21) {\t\t\t\t\tthis.randomStyle = false;\t\t\t\t\tthis.boldStyle = false;\t\t\t\t\tthis.strikethroughStyle = false;\t\t\t\t\tthis.underlineStyle = false;\t\t\t\t\tthis.italicStyle = false;\t\t\t\t\tsetColor(this.red, this.blue, this.green, this.alpha);\t\t\t\t}\t\t\t\t++i;\t\t\t} else {\t\t\t\tint j = \"\\u00c0\\u00c1\\u00c2\\u00c8\\u00ca\\u00cb\\u00cd\\u00d3\\u00d4\\u00d5\\u00da\\u00df\\u00e3\\u00f5\\u011f\\u0130\\u0131\\u0152\\u0153\\u015e\\u015f\\u0174\\u0175\\u017e\\u0207\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000 !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\\u0000\\u00c7\\u00fc\\u00e9\\u00e2\\u00e4\\u00e0\\u00e5\\u00e7\\u00ea\\u00eb\\u00e8\\u00ef\\u00ee\\u00ec\\u00c4\\u00c5\\u00c9\\u00e6\\u00c6\\u00f4\\u00f6\\u00f2\\u00fb\\u00f9\\u00ff\\u00d6\\u00dc\\u00f8\\u00a3\\u00d8\\u00d7\\u0192\\u00e1\\u00ed\\u00f3\\u00fa\\u00f1\\u00d1\\u00aa\\u00ba\\u00bf\\u00ae\\u00ac\\u00bd\\u00bc\\u00a1\\u00ab\\u00bb\\u2591\\u2592\\u2593\\u2502\\u2524\\u2561\\u2562\\u2556\\u2555\\u2563\\u2551\\u2557\\u255d\\u255c\\u255b\\u2510\\u2514\\u2534\\u252c\\u251c\\u2500\\u253c\\u255e\\u255f\\u255a\\u2554\\u2569\\u2566\\u2560\\u2550\\u256c\\u2567\\u2568\\u2564\\u2565\\u2559\\u2558\\u2552\\u2553\\u256b\\u256a\\u2518\\u250c\\u2588\\u2584\\u258c\\u2590\\u2580\\u03b1\\u03b2\\u0393\\u03c0\\u03a3\\u03c3\\u03bc\\u03c4\\u03a6\\u0398\\u03a9\\u03b4\\u221e\\u2205\\u2208\\u2229\\u2261\\u00b1\\u2265\\u2264\\u2320\\u2321\\u00f7\\u2248\\u00b0\\u2219\\u00b7\\u221a\\u207f\\u00b2\\u25a0\\u0000\".indexOf(c0);\t\t\t\tif(this.randomStyle && j != -1) {\t\t\t\t\tint k = this.getCharWidth(c0);\t\t\t\t\tchar c1;\t\t\t\t\twhile(true) {\t\t\t\t\t\tj = this.fontRandom.nextInt(\"\\u00c0\\u00c1\\u00c2\\u00c8\\u00ca\\u00cb\\u00cd\\u00d3\\u00d4\\u00d5\\u00da\\u00df\\u00e3\\u00f5\\u011f\\u0130\\u0131\\u0152\\u0153\\u015e\\u015f\\u0174\\u0175\\u017e\\u0207\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000 !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\\u0000\\u00c7\\u00fc\\u00e9\\u00e2\\u00e4\\u00e0\\u00e5\\u00e7\\u00ea\\u00eb\\u00e8\\u00ef\\u00ee\\u00ec\\u00c4\\u00c5\\u00c9\\u00e6\\u00c6\\u00f4\\u00f6\\u00f2\\u00fb\\u00f9\\u00ff\\u00d6\\u00dc\\u00f8\\u00a3\\u00d8\\u00d7\\u0192\\u00e1\\u00ed\\u00f3\\u00fa\\u00f1\\u00d1\\u00aa\\u00ba\\u00bf\\u00ae\\u00ac\\u00bd\\u00bc\\u00a1\\u00ab\\u00bb\\u2591\\u2592\\u2593\\u2502\\u2524\\u2561\\u2562\\u2556\\u2555\\u2563\\u2551\\u2557\\u255d\\u255c\\u255b\\u2510\\u2514\\u2534\\u252c\\u251c\\u2500\\u253c\\u255e\\u255f\\u255a\\u2554\\u2569\\u2566\\u2560\\u2550\\u256c\\u2567\\u2568\\u2564\\u2565\\u2559\\u2558\\u2552\\u2553\\u256b\\u256a\\u2518\\u250c\\u2588\\u2584\\u258c\\u2590\\u2580\\u03b1\\u03b2\\u0393\\u03c0\\u03a3\\u03c3\\u03bc\\u03c4\\u03a6\\u0398\\u03a9\\u03b4\\u221e\\u2205\\u2208\\u2229\\u2261\\u00b1\\u2265\\u2264\\u2320\\u2321\\u00f7\\u2248\\u00b0\\u2219\\u00b7\\u221a\\u207f\\u00b2\\u25a0\\u0000\".length());\t\t\t\t\t\tc1 = \"\\u00c0\\u00c1\\u00c2\\u00c8\\u00ca\\u00cb\\u00cd\\u00d3\\u00d4\\u00d5\\u00da\\u00df\\u00e3\\u00f5\\u011f\\u0130\\u0131\\u0152\\u0153\\u015e\\u015f\\u0174\\u0175\\u017e\\u0207\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000 !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\\u0000\\u00c7\\u00fc\\u00e9\\u00e2\\u00e4\\u00e0\\u00e5\\u00e7\\u00ea\\u00eb\\u00e8\\u00ef\\u00ee\\u00ec\\u00c4\\u00c5\\u00c9\\u00e6\\u00c6\\u00f4\\u00f6\\u00f2\\u00fb\\u00f9\\u00ff\\u00d6\\u00dc\\u00f8\\u00a3\\u00d8\\u00d7\\u0192\\u00e1\\u00ed\\u00f3\\u00fa\\u00f1\\u00d1\\u00aa\\u00ba\\u00bf\\u00ae\\u00ac\\u00bd\\u00bc\\u00a1\\u00ab\\u00bb\\u2591\\u2592\\u2593\\u2502\\u2524\\u2561\\u2562\\u2556\\u2555\\u2563\\u2551\\u2557\\u255d\\u255c\\u255b\\u2510\\u2514\\u2534\\u252c\\u251c\\u2500\\u253c\\u255e\\u255f\\u255a\\u2554\\u2569\\u2566\\u2560\\u2550\\u256c\\u2567\\u2568\\u2564\\u2565\\u2559\\u2558\\u2552\\u2553\\u256b\\u256a\\u2518\\u250c\\u2588\\u2584\\u258c\\u2590\\u2580\\u03b1\\u03b2\\u0393\\u03c0\\u03a3\\u03c3\\u03bc\\u03c4\\u03a6\\u0398\\u03a9\\u03b4\\u221e\\u2205\\u2208\\u2229\\u2261\\u00b1\\u2265\\u2264\\u2320\\u2321\\u00f7\\u2248\\u00b0\\u2219\\u00b7\\u221a\\u207f\\u00b2\\u25a0\\u0000\".charAt(j);\t\t\t\t\t\tif(k == this.getCharWidth(c1)) {\t\t\t\t\t\t\tbreak;\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t\tc0 = c1;\t\t\t\t}\t\t\t\tfloat f1 = j == -1 || this.unicodeFlag ? 0.5f: 1f;\t\t\t\tboolean flag = (c0 == 0 || j == -1 || this.unicodeFlag) && shadow;\t\t\t\tif(flag) {\t\t\t\t\tthis.posX -= f1;\t\t\t\t\tthis.posY -= f1;\t\t\t\t}\t\t\t\tfloat f = this.renderChar(c0, this.italicStyle);\t\t\t\tif(flag) {\t\t\t\t\tthis.posX += f1;\t\t\t\t\tthis.posY += f1;\t\t\t\t}\t\t\t\tif(this.boldStyle) {\t\t\t\t\tthis.posX += f1;\t\t\t\t\tif(flag) {\t\t\t\t\t\tthis.posX -= f1;\t\t\t\t\t\tthis.posY -= f1;\t\t\t\t\t}\t\t\t\t\tthis.renderChar(c0, this.italicStyle);\t\t\t\t\tthis.posX -= f1;\t\t\t\t\tif(flag) {\t\t\t\t\t\tthis.posX += f1;\t\t\t\t\t\tthis.posY += f1;\t\t\t\t\t}\t\t\t\t\t++f;\t\t\t\t}\t\t\t\tdoDraw(f);\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/2b2t-Utilities/2b2t-Utilities/master/src/main/java/me/tigermouthbear/utilities/mixin/MixinFontRenderer.java", "stars": "2", "class": {"name": "MixinFontRenderer", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "renderStringAtPos", "params": ["String", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void renderStringAtPos(String text, boolean shadow) {\t\tint size = getStringWidth(\"  \");\t\tList<Emoji> emojis = new ArrayList<>();\t\tfor(String possile : text.split(\":\")) {\t\t\tif(Emojis.isEmoji(possile)) emojis.add(new Emoji(possile));\t\t}\t\tfor(Emoji emoji : emojis) {\t\t\tif(!shadow) {\t\t\t\tint index = text.indexOf(\":\" + emoji.getName() + \":\");\t\t\t\tif(index == -1) continue;\t\t\t\tint x = getStringWidth(text.substring(0, index));\t\t\t\tMinecraft.getMinecraft().getTextureManager().bindTexture(Emojis.getEmoji(emoji));\t\t\t\tGlStateManager.color(1, 1, 1, alpha);\t\t\t\tGui.drawScaledCustomSizeModalRect((int) (posX + x), (int) posY, 0, 0, size, size, size, size, size, size);\t\t\t}\t\t\ttext = text.replaceFirst(\":\" + emoji.getName() + \":\", \"  \");\t\t}\t\tfor(int i = 0; i < text.length(); ++i) {\t\t\tchar c0 = text.charAt(i);\t\t\tif(c0 == 167 && i + 1 < text.length()) {\t\t\t\tint i1 = \"0123456789abcdefklmnor\".indexOf(String.valueOf(text.charAt(i + 1)).toLowerCase(Locale.ROOT).charAt(0));\t\t\t\tif(i1 < 16) {\t\t\t\t\tthis.randomStyle = false;\t\t\t\t\tthis.boldStyle = false;\t\t\t\t\tthis.strikethroughStyle = false;\t\t\t\t\tthis.underlineStyle = false;\t\t\t\t\tthis.italicStyle = false;\t\t\t\t\tif(i1 < 0 || i1 > 15) {\t\t\t\t\t\ti1 = 15;\t\t\t\t\t}\t\t\t\t\tif(shadow) {\t\t\t\t\t\ti1 += 16;\t\t\t\t\t}\t\t\t\t\tint j1 = this.colorCode[i1];\t\t\t\t\tthis.textColor = j1;\t\t\t\t\tsetColor((float) (j1 >> 16) / 255.0F, (float) (j1 >> 8 & 255) / 255.0F, (float) (j1 & 255) / 255.0F, this.alpha);\t\t\t\t} else if(i1 == 16) {\t\t\t\t\tthis.randomStyle = true;\t\t\t\t} else if(i1 == 17) {\t\t\t\t\tthis.boldStyle = true;\t\t\t\t} else if(i1 == 18) {\t\t\t\t\tthis.strikethroughStyle = true;\t\t\t\t} else if(i1 == 19) {\t\t\t\t\tthis.underlineStyle = true;\t\t\t\t} else if(i1 == 20) {\t\t\t\t\tthis.italicStyle = true;\t\t\t\t} else if(i1 == 21) {\t\t\t\t\tthis.randomStyle = false;\t\t\t\t\tthis.boldStyle = false;\t\t\t\t\tthis.strikethroughStyle = false;\t\t\t\t\tthis.underlineStyle = false;\t\t\t\t\tthis.italicStyle = false;\t\t\t\t\tsetColor(this.red, this.blue, this.green, this.alpha);\t\t\t\t}\t\t\t\t++i;\t\t\t} else {\t\t\t\tint j = \"\\u00c0\\u00c1\\u00c2\\u00c8\\u00ca\\u00cb\\u00cd\\u00d3\\u00d4\\u00d5\\u00da\\u00df\\u00e3\\u00f5\\u011f\\u0130\\u0131\\u0152\\u0153\\u015e\\u015f\\u0174\\u0175\\u017e\\u0207\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000 !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\\u0000\\u00c7\\u00fc\\u00e9\\u00e2\\u00e4\\u00e0\\u00e5\\u00e7\\u00ea\\u00eb\\u00e8\\u00ef\\u00ee\\u00ec\\u00c4\\u00c5\\u00c9\\u00e6\\u00c6\\u00f4\\u00f6\\u00f2\\u00fb\\u00f9\\u00ff\\u00d6\\u00dc\\u00f8\\u00a3\\u00d8\\u00d7\\u0192\\u00e1\\u00ed\\u00f3\\u00fa\\u00f1\\u00d1\\u00aa\\u00ba\\u00bf\\u00ae\\u00ac\\u00bd\\u00bc\\u00a1\\u00ab\\u00bb\\u2591\\u2592\\u2593\\u2502\\u2524\\u2561\\u2562\\u2556\\u2555\\u2563\\u2551\\u2557\\u255d\\u255c\\u255b\\u2510\\u2514\\u2534\\u252c\\u251c\\u2500\\u253c\\u255e\\u255f\\u255a\\u2554\\u2569\\u2566\\u2560\\u2550\\u256c\\u2567\\u2568\\u2564\\u2565\\u2559\\u2558\\u2552\\u2553\\u256b\\u256a\\u2518\\u250c\\u2588\\u2584\\u258c\\u2590\\u2580\\u03b1\\u03b2\\u0393\\u03c0\\u03a3\\u03c3\\u03bc\\u03c4\\u03a6\\u0398\\u03a9\\u03b4\\u221e\\u2205\\u2208\\u2229\\u2261\\u00b1\\u2265\\u2264\\u2320\\u2321\\u00f7\\u2248\\u00b0\\u2219\\u00b7\\u221a\\u207f\\u00b2\\u25a0\\u0000\".indexOf(c0);\t\t\t\tif(this.randomStyle && j != -1) {\t\t\t\t\tint k = this.getCharWidth(c0);\t\t\t\t\tchar c1;\t\t\t\t\twhile(true) {\t\t\t\t\t\tj = this.fontRandom.nextInt(\"\\u00c0\\u00c1\\u00c2\\u00c8\\u00ca\\u00cb\\u00cd\\u00d3\\u00d4\\u00d5\\u00da\\u00df\\u00e3\\u00f5\\u011f\\u0130\\u0131\\u0152\\u0153\\u015e\\u015f\\u0174\\u0175\\u017e\\u0207\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000 !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\\u0000\\u00c7\\u00fc\\u00e9\\u00e2\\u00e4\\u00e0\\u00e5\\u00e7\\u00ea\\u00eb\\u00e8\\u00ef\\u00ee\\u00ec\\u00c4\\u00c5\\u00c9\\u00e6\\u00c6\\u00f4\\u00f6\\u00f2\\u00fb\\u00f9\\u00ff\\u00d6\\u00dc\\u00f8\\u00a3\\u00d8\\u00d7\\u0192\\u00e1\\u00ed\\u00f3\\u00fa\\u00f1\\u00d1\\u00aa\\u00ba\\u00bf\\u00ae\\u00ac\\u00bd\\u00bc\\u00a1\\u00ab\\u00bb\\u2591\\u2592\\u2593\\u2502\\u2524\\u2561\\u2562\\u2556\\u2555\\u2563\\u2551\\u2557\\u255d\\u255c\\u255b\\u2510\\u2514\\u2534\\u252c\\u251c\\u2500\\u253c\\u255e\\u255f\\u255a\\u2554\\u2569\\u2566\\u2560\\u2550\\u256c\\u2567\\u2568\\u2564\\u2565\\u2559\\u2558\\u2552\\u2553\\u256b\\u256a\\u2518\\u250c\\u2588\\u2584\\u258c\\u2590\\u2580\\u03b1\\u03b2\\u0393\\u03c0\\u03a3\\u03c3\\u03bc\\u03c4\\u03a6\\u0398\\u03a9\\u03b4\\u221e\\u2205\\u2208\\u2229\\u2261\\u00b1\\u2265\\u2264\\u2320\\u2321\\u00f7\\u2248\\u00b0\\u2219\\u00b7\\u221a\\u207f\\u00b2\\u25a0\\u0000\".length());\t\t\t\t\t\tc1 = \"\\u00c0\\u00c1\\u00c2\\u00c8\\u00ca\\u00cb\\u00cd\\u00d3\\u00d4\\u00d5\\u00da\\u00df\\u00e3\\u00f5\\u011f\\u0130\\u0131\\u0152\\u0153\\u015e\\u015f\\u0174\\u0175\\u017e\\u0207\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000 !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\\u0000\\u00c7\\u00fc\\u00e9\\u00e2\\u00e4\\u00e0\\u00e5\\u00e7\\u00ea\\u00eb\\u00e8\\u00ef\\u00ee\\u00ec\\u00c4\\u00c5\\u00c9\\u00e6\\u00c6\\u00f4\\u00f6\\u00f2\\u00fb\\u00f9\\u00ff\\u00d6\\u00dc\\u00f8\\u00a3\\u00d8\\u00d7\\u0192\\u00e1\\u00ed\\u00f3\\u00fa\\u00f1\\u00d1\\u00aa\\u00ba\\u00bf\\u00ae\\u00ac\\u00bd\\u00bc\\u00a1\\u00ab\\u00bb\\u2591\\u2592\\u2593\\u2502\\u2524\\u2561\\u2562\\u2556\\u2555\\u2563\\u2551\\u2557\\u255d\\u255c\\u255b\\u2510\\u2514\\u2534\\u252c\\u251c\\u2500\\u253c\\u255e\\u255f\\u255a\\u2554\\u2569\\u2566\\u2560\\u2550\\u256c\\u2567\\u2568\\u2564\\u2565\\u2559\\u2558\\u2552\\u2553\\u256b\\u256a\\u2518\\u250c\\u2588\\u2584\\u258c\\u2590\\u2580\\u03b1\\u03b2\\u0393\\u03c0\\u03a3\\u03c3\\u03bc\\u03c4\\u03a6\\u0398\\u03a9\\u03b4\\u221e\\u2205\\u2208\\u2229\\u2261\\u00b1\\u2265\\u2264\\u2320\\u2321\\u00f7\\u2248\\u00b0\\u2219\\u00b7\\u221a\\u207f\\u00b2\\u25a0\\u0000\".charAt(j);\t\t\t\t\t\tif(k == this.getCharWidth(c1)) {\t\t\t\t\t\t\tbreak;\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t\tc0 = c1;\t\t\t\t}\t\t\t\tfloat f1 = j == -1 || this.unicodeFlag ? 0.5f: 1f;\t\t\t\tboolean flag = (c0 == 0 || j == -1 || this.unicodeFlag) && shadow;\t\t\t\tif(flag) {\t\t\t\t\tthis.posX -= f1;\t\t\t\t\tthis.posY -= f1;\t\t\t\t}\t\t\t\tfloat f = this.renderChar(c0, this.italicStyle);\t\t\t\tif(flag) {\t\t\t\t\tthis.posX += f1;\t\t\t\t\tthis.posY += f1;\t\t\t\t}\t\t\t\tif(this.boldStyle) {\t\t\t\t\tthis.posX += f1;\t\t\t\t\tif(flag) {\t\t\t\t\t\tthis.posX -= f1;\t\t\t\t\t\tthis.posY -= f1;\t\t\t\t\t}\t\t\t\t\tthis.renderChar(c0, this.italicStyle);\t\t\t\t\tthis.posX -= f1;\t\t\t\t\tif(flag) {\t\t\t\t\t\tthis.posX += f1;\t\t\t\t\t\tthis.posY += f1;\t\t\t\t\t}\t\t\t\t\t++f;\t\t\t\t}\t\t\t\tdoDraw(f);\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/2b2t-Utilities/2b2t-Utilities/master/src/main/java/me/tigermouthbear/utilities/mixin/MixinFontRenderer.java", "stars": "2", "class": {"name": "MixinFontRenderer", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "init", "params": ["ServletConfig"], "throws": ["ServletException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void init(final ServletConfig config) throws ServletException {    super.init(config);    final AzkabanWebServer server = (AzkabanWebServer) getApplication();    this.executorManager = server.getExecutorManager();    this.projectManager = server.getProjectManager();    this.scheduleManager = server.getScheduleManager();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-homepage/src/main/java/com/webank/wedatasphere/schedulis/homepage/servlet/HomePageServlet.java", "stars": "18", "class": {"name": "HomePageServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleGet", "params": ["HttpServletRequest", "HttpServletResponse", "Session"], "throws": ["ServletException", "IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void handleGet(final HttpServletRequest req, final HttpServletResponse resp,      final Session session) throws ServletException, IOException {    if (hasParam(req, \"ajax\")) {      handleAJAXAction(req, resp, session);    } else {      handleHomePage(req, resp, session);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-homepage/src/main/java/com/webank/wedatasphere/schedulis/homepage/servlet/HomePageServlet.java", "stars": "18", "class": {"name": "HomePageServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleAJAXAction", "params": ["HttpServletRequest", "HttpServletResponse", "Session"], "throws": ["ServletException", "IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void handleAJAXAction(final HttpServletRequest req,      final HttpServletResponse resp, final Session session) throws ServletException,      IOException {    final HashMap<String, Object> ret = new HashMap<>();    final String ajaxName = getParam(req, \"ajax\");    if (ajaxName.equals(\"fetch\")) {    } else if (ajaxName.equals(\"getTodayFlowExecuteStatus\")) {      ajaxGetTodayFlowExecuteStatus(req, resp, session, ret);    } else if (ajaxName.equals(\"getRealTimeFlowInfoData\")) {      ajaxGetRealTimeFlowInfoData(req, resp, session, ret);    } else if (ajaxName.equals(\"getTodayAllFlowInfo\")) {      ajaxGetTodayAllFlowInfo(req, resp, session, ret);    } else if (ajaxName.equals(\"getHomePageLanguageType\")) {      ajaxGetHomePageLanguageType(req, resp, session, ret);    }    if (ret != null) {      this.writeJSON(resp, ret);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-homepage/src/main/java/com/webank/wedatasphere/schedulis/homepage/servlet/HomePageServlet.java", "stars": "18", "class": {"name": "HomePageServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handlePost", "params": ["HttpServletRequest", "HttpServletResponse", "Session"], "throws": ["ServletException", "IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void handlePost(final HttpServletRequest req, final HttpServletResponse resp,      final Session session) throws ServletException, IOException {    if (hasParam(req, \"ajax\")) {      handleAJAXAction(req, resp, session);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-homepage/src/main/java/com/webank/wedatasphere/schedulis/homepage/servlet/HomePageServlet.java", "stars": "18", "class": {"name": "HomePageServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleHomePage", "params": ["HttpServletRequest", "HttpServletResponse", "Session"], "throws": ["ServletException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void handleHomePage(final HttpServletRequest req, final HttpServletResponse resp, final Session session)      throws ServletException {    final Page page = newPage(req, resp, session, \"/com.webank.wedatasphere.schedulis.viewer.homepage/home-page.vm\");    String languageType = LoadJsonUtils.getLanguageType();    Map<String, String> singleDataMap;    Map<String, String> subPageMap1;    if (languageType.equalsIgnoreCase(\"zh_CN\")) {// azkaban.webapp.servlet.velocity.nav.vm      singleDataMap = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/az-webank-homepage-zh_CN.json\",              \"com.webank.wedatasphere.schedulis.viewer.homepage.home-page.vm\");        subPageMap1 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-zh_CN.json\",                \"azkaban.webapp.servlet.velocity.nav.vm\");    }else {      singleDataMap = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/az-webank-homepage-en_US.json\",              \"com.webank.wedatasphere.schedulis.viewer.homepage.home-page.vm\");        subPageMap1 = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/azkaban-web-server-en_US.json\",                \"azkaban.webapp.servlet.velocity.nav.vm\");    }    singleDataMap.forEach(page::add);    subPageMap1.forEach(page::add);    page.add(\"currentlangType\", languageType);    page.render();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-homepage/src/main/java/com/webank/wedatasphere/schedulis/homepage/servlet/HomePageServlet.java", "stars": "18", "class": {"name": "HomePageServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxGetTodayFlowExecuteStatus", "params": ["HttpServletRequest", "HttpServletResponse", "Session", "HashMap<String,Object>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void ajaxGetTodayFlowExecuteStatus(final HttpServletRequest req, final HttpServletResponse resp,                                             final Session session, final HashMap<String, Object> ret) {    User user = session.getUser();    List<Map<String, String>> todayFlowExecuteData = new ArrayList<>();    Map<String, String> successMap = new HashMap<>();    Map<String, String> runningMap = new HashMap<>();    Map<String, String> failedMap = new HashMap<>();    Map<String, String> killMap = new HashMap<>();    Map<String, String> queueMap = new HashMap<>();    int successNum = 0;    int runningNum = 0;    int failedNum = 0;    int killNum = 0;    int queueNum = 0;    int finishTotal = 0;    int jobTotal = 0;    String moyneTime = \"\";    Map<String, Integer> exFlowMap = new HashMap<>();    try {      List<ExecutableFlow> execFlowList;      List<Schedule> schedules = new ArrayList<>();      if(user.getRoles().contains(\"admin\")){        execFlowList = this.executorManager.getTodayExecutableFlowData(null);        //newFlowNoRunNum = this.projectManager.getTodayCreateProjectNoRunNum(null);        schedules = this.scheduleManager.getSchedules();      }else {        execFlowList = this.executorManager.getTodayExecutableFlowData(user.getUserId());        //newFlowNoRunNum = this.projectManager.getTodayCreateProjectNoRunNum(user.getUserId());        //schedules = this.scheduleManager.getSchedulesByUser(session.getUser());        List<Project> userProjectList = this.projectManager.getUserAllProjects(session.getUser(), null);        //schedules = this.scheduleManager.getSchedulesByUser(session.getUser());        for(Schedule schedule : this.scheduleManager.getSchedules()){          for(Project project : userProjectList){            if(project.getId() == schedule.getProjectId()){              schedules.add(schedule);            }          }        }      }      //queueNum += newFlowNoRunNum.size();      //flowTotal += newFlowNoRunNum.size();      //flowTotal = execFlowList.size();      long duartion = 0;      for(ExecutableFlow exFlow : execFlowList){        if(Status.SUCCEEDED.equals(exFlow.getStatus())){          successNum += 1;          finishTotal += 1;        }        if(Status.RUNNING.equals(exFlow.getStatus())){          runningNum += 1;        }        if(Status.FAILED.equals(exFlow.getStatus())){          failedNum += 1;          finishTotal += 1;        }        if(Status.KILLED.equals(exFlow.getStatus())){          killNum += 1;          finishTotal += 1;        }        if(Status.QUEUED.equals(exFlow.getStatus())){          queueNum += 1;        }        if(Status.PREPARING.equals(exFlow.getStatus())){          queueNum += 1;        }        if(-1 != exFlow.getEndTime() && -1 != exFlow.getStartTime() && !Status.RUNNING.equals(exFlow.getStatus())) {          duartion += exFlow.getEndTime() - exFlow.getStartTime();        }        //\u83b7\u53d6\u5de5\u4f5c\u6d41\u91cc\u9762\u7684\u4efb\u52a1\u6570\u91cf        //flowTotal += exFlow.getExecutableNodes().size();        exFlowMap.put(exFlow.getProjectId() + exFlow.getFlowId(), exFlow.getExecutableNodes().size());      }      for(Schedule schedule : schedules){        queueNum += getScheduleTodayRunCount(schedule);        if(0 != queueNum && null == exFlowMap.get(schedule.getProjectId() + schedule.getFlowName())){          Project project = this.projectManager.getProject(schedule.getProjectId());          Flow flow = project.getFlow(schedule.getFlowName());          if(flow == null) {            logger.warn(\"flow: {} is not exist in project:{}.\", schedule.getFlowName(), project.getName());            continue;          }          jobTotal += flow.getNodes().size();        }      }      if(finishTotal != 0){        duartion = duartion/finishTotal;      }      moyneTime = TimeUtils.getTimeStrBySecond(duartion);    } catch (Exception e) {      logger.error(\"Get Today Flow Execute Status Error, caused by:\", e);    }    String languageType = LoadJsonUtils.getLanguageType();    Map<String, String> dataMap;    if (languageType.equalsIgnoreCase(\"zh_CN\")) {      dataMap = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/az-webank-homepage-zh_CN.json\",              \"com.webank.wedatasphere.schedulis.homepage.servlet.HomePageServlet\");    }else {      dataMap = LoadJsonUtils.transJson(\"/com.webank.wedatasphere.schedulis.i18n.conf/az-webank-homepage-en_US.json\",              \"com.webank.wedatasphere.schedulis.homepage.servlet.HomePageServlet\");    }    successMap.put(\"name\", dataMap.get(\"successFlow\"));    successMap.put(\"value\", successNum + \"\");    runningMap.put(\"name\", dataMap.get(\"runningFlow\"));    runningMap.put(\"value\", runningNum + \"\");    failedMap.put(\"name\", dataMap.get(\"failedFlow\"));    failedMap.put(\"value\", failedNum + \"\");    killMap.put(\"name\", dataMap.get(\"killedFlow\"));    killMap.put(\"value\", killNum + \"\");    queueMap.put(\"name\", dataMap.get(\"preparingFlow\"));    queueMap.put(\"value\", queueNum + \"\");    todayFlowExecuteData.add(successMap);    todayFlowExecuteData.add(runningMap);    todayFlowExecuteData.add(failedMap);    todayFlowExecuteData.add(killMap);    todayFlowExecuteData.add(queueMap);    Map<String, String> otherFlowExecDataMap = new HashMap<>();    otherFlowExecDataMap.put(\"moyenTime\", moyneTime);    for(String exFlowId : exFlowMap.keySet()){      jobTotal += exFlowMap.get(exFlowId);    }    otherFlowExecDataMap.put(\"jobTotal\", jobTotal+\"\");    ret.put(\"todayFlowExecuteData\", todayFlowExecuteData);    ret.put(\"otherFlowExecData\", otherFlowExecDataMap);    ret.put(\"langType\", languageType);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-homepage/src/main/java/com/webank/wedatasphere/schedulis/homepage/servlet/HomePageServlet.java", "stars": "18", "class": {"name": "HomePageServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxGetHomePageLanguageType", "params": ["HttpServletRequest", "HttpServletResponse", "Session", "HashMap<String,Object>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void ajaxGetHomePageLanguageType(final HttpServletRequest req, final HttpServletResponse resp,                                       final Session session, final HashMap<String, Object> ret) {        try {      String languageType = LoadJsonUtils.getLanguageType();      ret.put(\"langType\", languageType);    } catch (Exception e) {      ret.put(\"error\", e.getMessage());      logger.error(\"languageType load error: caused by:\" + e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-homepage/src/main/java/com/webank/wedatasphere/schedulis/homepage/servlet/HomePageServlet.java", "stars": "18", "class": {"name": "HomePageServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxGetRealTimeFlowInfoData", "params": ["HttpServletRequest", "HttpServletResponse", "Session", "HashMap<String,Object>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void ajaxGetRealTimeFlowInfoData(final HttpServletRequest req, final HttpServletResponse resp,                                           final Session session, final HashMap<String, Object> ret) {    User user = session.getUser();    List<Map<String, String>> realTimeFlowExecuteData = new ArrayList<>();    String languageType = LoadJsonUtils.getLanguageType();    try {      //  KILLED(60), FAILED(70), FAILED_FINISHING(80)      List<ExecutableFlow> errorExecFlowList = new ArrayList<>();      if(user.getRoles().contains(\"admin\")) {        errorExecFlowList = this.executorManager.getRealTimeExecFlowData(null);      }else {        errorExecFlowList = this.executorManager.getRealTimeExecFlowData(user.getUserId());      }      for(ExecutableFlow execFlow : errorExecFlowList){        Status status = execFlow.getStatus();        Map<String, String> realTimeData = new HashMap<>();        realTimeData.put(\"endTime\", TimeUtils.formatEndDateTime(execFlow.getEndTime()));        realTimeData.put(\"flowName\", execFlow.getFlowId());        realTimeData.put(\"execId\", execFlow.getExecutionId() + \"\");        realTimeData.put(\"execStatus\", status + \"\");        realTimeFlowExecuteData.add(realTimeData);      }    } catch (ExecutorManagerException e) {      logger.error(\"get real time flow info data failed, caused by:\" + e);    }    ret.put(\"realTimeData\", realTimeFlowExecuteData);    ret.put(\"langType\", languageType);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-homepage/src/main/java/com/webank/wedatasphere/schedulis/homepage/servlet/HomePageServlet.java", "stars": "18", "class": {"name": "HomePageServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "ajaxGetTodayAllFlowInfo", "params": ["HttpServletRequest", "HttpServletResponse", "Session", "HashMap<String,Object>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void ajaxGetTodayAllFlowInfo(final HttpServletRequest req, final HttpServletResponse resp,                                       final Session session, final HashMap<String, Object> ret) {    User user = session.getUser();    //List<Map<String, String>> todayAllFlowExecInfo = new ArrayList<>();    Map<String, Map<String,String>> todayAllFlowExecInfo = new HashMap<>();    try {      List<ExecutableFlow> execFlowList;      List<Map> newFlowNoRunList;      List<Schedule> schedules = new ArrayList<>();      if(user.getRoles().contains(\"admin\")){        execFlowList = this.executorManager.getTodayExecutableFlowDataNew(null);        //newFlowNoRunList = this.projectManager.getTodayCreateProjectNoRunFlowInfo(null);        schedules = this.scheduleManager.getSchedules();      }else{        execFlowList = this.executorManager.getTodayExecutableFlowDataNew(user.getUserId());        //newFlowNoRunList = this.projectManager.getTodayCreateProjectNoRunFlowInfo(user.getUserId());        //schedules = this.scheduleManager.getSchedulesByUser(session.getUser());        List<Project> userProjectList = this.projectManager.getUserAllProjects(session.getUser(), null);        //schedules = this.scheduleManager.getSchedulesByUser(session.getUser());        for(Schedule schedule : this.scheduleManager.getSchedules()){          for(Project project : userProjectList){            if(project.getId() == schedule.getProjectId()){              schedules.add(schedule);            }          }        }      }      int totalFlowNum = 0;      for(ExecutableFlow exFlow : execFlowList){        //\u7528\u4e0e\u6807\u8bc6\u552f\u4e00Flow \u907f\u514d\u4e0d\u540c\u9879\u76ee\u5de5\u4f5c\u6d41\u91cd\u540d        String mapKey = exFlow.getProjectName() + \":\" + exFlow.getFlowId();        Map<String, String> flowInfo;        if(null != todayAllFlowExecInfo.get(mapKey)){          flowInfo = todayAllFlowExecInfo.get(mapKey);        } else {          flowInfo = new HashMap<>();          flowInfo.put(\"totalFlowNum\", \"0\");          flowInfo.put(\"flowSuccessNum\", \"0\");          flowInfo.put(\"flowRunningNum\", \"0\");          flowInfo.put(\"flowFailedNum\", \"0\");          flowInfo.put(\"flowKilledNum\", \"0\");          flowInfo.put(\"flowNoExecNum\", \"0\");          flowInfo.put(\"jobSuccessNum\", \"0\");          flowInfo.put(\"jobRunningNum\", \"0\");          flowInfo.put(\"jobFailedNum\", \"0\");          flowInfo.put(\"jobNoExecNum\", \"0\");          flowInfo.put(\"jobCancelNum\", \"0\");        }        //\u9879\u76ee\u540d\u79f0        flowInfo.put(\"projectName\", exFlow.getProjectName());        //\u5de5\u4f5c\u6d41\u540d\u79f0        flowInfo.put(\"flowName\", exFlow.getFlowId());        //\u63d0\u4ea4\u4eba        flowInfo.put(\"submitUser\", exFlow.getSubmitUser());        //\u7edf\u8ba1\u5f53\u5929\u5de5\u4f5c\u6d41\u8fd0\u884c\u60c5\u51b5        if(Status.SUCCEEDED.equals(exFlow.getStatus())){          flowInfo.put(\"flowSuccessNum\", Integer.valueOf(flowInfo.get(\"flowSuccessNum\")) + 1 + \"\");          flowInfo.put(\"totalFlowNum\", Integer.valueOf(flowInfo.get(\"totalFlowNum\")) + 1 + \"\");        }        if(Status.RUNNING.equals(exFlow.getStatus())){          flowInfo.put(\"flowRunningNum\", (Integer.valueOf(flowInfo.get(\"flowRunningNum\")) + 1) + \"\");          flowInfo.put(\"totalFlowNum\", Integer.valueOf(flowInfo.get(\"totalFlowNum\")) + 1 + \"\");        }        if(Status.FAILED.equals(exFlow.getStatus())){          flowInfo.put(\"flowFailedNum\", (Integer.valueOf(flowInfo.get(\"flowFailedNum\")) + 1) + \"\");          flowInfo.put(\"totalFlowNum\", Integer.valueOf(flowInfo.get(\"totalFlowNum\")) + 1 + \"\");        }        if(Status.KILLED.equals(exFlow.getStatus())){          flowInfo.put(\"flowKilledNum\", (Integer.valueOf(flowInfo.get(\"flowKilledNum\")) + 1) + \"\");          flowInfo.put(\"totalFlowNum\", Integer.valueOf(flowInfo.get(\"totalFlowNum\")) + 1 + \"\");        }        if(Status.QUEUED.equals(exFlow.getStatus())){          flowInfo.put(\"flowNoExecNum\", (Integer.valueOf(flowInfo.get(\"flowNoExecNum\")) + 1) + \"\");          //flowInfo.put(\"totalFlowNum\", Integer.valueOf(flowInfo.get(\"totalFlowNum\")) + 1 + \"\");        }        if(Status.PREPARING.equals(exFlow.getStatus())){          flowInfo.put(\"flowNoExecNum\", (Integer.valueOf(flowInfo.get(\"flowNoExecNum\")) + 1) + \"\");          //flowInfo.put(\"totalFlowNum\", Integer.valueOf(flowInfo.get(\"totalFlowNum\")) + 1 + \"\");        }        setJobStatus(exFlow.getExecutableNodes(), flowInfo);        flowInfo.put(\"execId\", String.valueOf(exFlow.getExecutionId()));        flowInfo.put(\"totalJobNum\", exFlow.getExecutableNodes().size() + \"\");        int count = 0;        if(exFlow.getExecutableNodes().size() > 1){          for(ExecutableNode exNode :exFlow.getExecutableNodes()){              if(exNode instanceof ExecutableFlowBase ){                  count += this.getExecuNodeCount(exNode);              }              else if(exNode instanceof ExecutableNode ){                count++;            }          }          flowInfo.put(\"totalJobNum\", count + \"\");        }else {          flowInfo.put(\"totalJobNum\", exFlow.getExecutableNodes().size() + \"\");        }        if(user.getRoles().contains(\"admin\")) {          flowInfo.put(\"todayFlowRuntimes\", String.valueOf(this.executorManager.getTodayFlowRunTimesByFlowId(                  String.valueOf(exFlow.getProjectId()), exFlow.getFlowId(), null)));        } else {          flowInfo.put(\"todayFlowRuntimes\", String.valueOf(this.executorManager.getTodayFlowRunTimesByFlowId(                  String.valueOf(exFlow.getProjectId()), exFlow.getFlowId(), user.getUserId())));        }        todayAllFlowExecInfo.put(mapKey, flowInfo);      }      for(Schedule schedule : schedules){        //\u7528\u4e0e\u6807\u8bc6\u552f\u4e00Flow \u907f\u514d\u4e0d\u540c\u9879\u76ee\u5de5\u4f5c\u6d41\u91cd\u540d        String mapKey = schedule.getProjectName() + \":\" + schedule.getFlowName();        Map<String, String> flowInfo;        boolean flag = false;        if(null != todayAllFlowExecInfo.get(mapKey)){          flowInfo = todayAllFlowExecInfo.get(mapKey);        } else {          flag = true;          flowInfo = new HashMap<>();          flowInfo.put(\"totalFlowNum\", \"0\");          flowInfo.put(\"flowSuccessNum\", \"0\");          flowInfo.put(\"flowRunningNum\", \"0\");          flowInfo.put(\"flowFailedNum\", \"0\");          flowInfo.put(\"flowKilledNum\", \"0\");          flowInfo.put(\"flowNoExecNum\", \"0\");          flowInfo.put(\"jobSuccessNum\", \"0\");          flowInfo.put(\"jobRunningNum\", \"0\");          flowInfo.put(\"jobFailedNum\", \"0\");          flowInfo.put(\"jobCancelNum\", \"0\");          flowInfo.put(\"todayFlowRuntimes\", \"0\");        }        //\u9879\u76ee\u540d\u79f0        flowInfo.put(\"projectName\", schedule.getProjectName());        //\u5de5\u4f5c\u6d41\u540d\u79f0        flowInfo.put(\"flowName\", schedule.getFlowName());        //\u9879\u76ee\u63d0\u4ea4\u4eba        flowInfo.put(\"submitUser\", schedule.getSubmitUser());        Project project = this.projectManager.getProject(schedule.getProjectId());        Flow flow = project.getFlow(schedule.getFlowName());        if(flow == null) {          logger.warn(\"flow: {} is not exist in project:{}.\", schedule.getFlowName(), project.getName());          continue;        }        if( flow.getNodes().size() >1){          int count = 0;          for(Node node:flow.getNodes()){            if(StringUtils.isBlank(node.getEmbeddedFlowId())){              count++;            }else {              count += this.getNodeCount(project,node.getEmbeddedFlowId());            }          }          flowInfo.put(\"totalJobNum\", count + \"\");        }else{          flowInfo.put(\"totalJobNum\", flow.getNodes().size() + \"\");        }        // \u5f53\u524d\u6ca1\u6709\u8fd0\u884c\u8fc7        if(flag) {          flowInfo.put(\"jobNoExecNum\", String.valueOf(flow.getNodes().size()));        }        int scheduleCount = getScheduleTodayRunCount(schedule);        if(0 == scheduleCount){          continue;        }else {          flowInfo.put(\"flowNoExecNum\", scheduleCount + \"\");        }        //flowInfo.put(\"totalflowNum\", Integer.valueOf(flowInfo.get(\"totalFlowNum\")) + 1 + \"\");        todayAllFlowExecInfo.put(mapKey, flowInfo);        //queueNum += getScheduleTodayRunCount(schedule);      }    } catch (Exception e) {      logger.error(\"Get Today All Flow Info Error, caused by:\", e);    }    List<Map> todayFlowExecuteInfoList = new ArrayList<>();    for(String key : todayAllFlowExecInfo.keySet()){      todayFlowExecuteInfoList.add(todayAllFlowExecInfo.get(key));    }    ret.put(\"todayFlowExecuteInfo\", todayFlowExecuteInfoList);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-homepage/src/main/java/com/webank/wedatasphere/schedulis/homepage/servlet/HomePageServlet.java", "stars": "18", "class": {"name": "HomePageServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNodeCount", "params": ["Project", "String"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "  private int getNodeCount(Project project,String nodeId){    int count = 0;    Flow flow = project.getFlow(nodeId);    for(Node node:flow.getNodes()){      if(node.getEmbeddedFlowId() !=null){        count +=  this.getNodeCount(project,node.getEmbeddedFlowId());      }else{        count++;      }    }    return count;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-homepage/src/main/java/com/webank/wedatasphere/schedulis/homepage/servlet/HomePageServlet.java", "stars": "18", "class": {"name": "HomePageServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecuNodeCount", "params": ["Object"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "  private int getExecuNodeCount(Object obj){    ExecutableFlowBase exNode = (ExecutableFlowBase) obj;    int count = 0;    List<ExecutableNode> nodeList = exNode.getExecutableNodes();    for(ExecutableNode node:nodeList){      if(node instanceof ExecutableFlowBase){        count += this.getExecuNodeCount(node);      }else if(node instanceof  ExecutableNode){        count++;      }    }    return count;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-homepage/src/main/java/com/webank/wedatasphere/schedulis/homepage/servlet/HomePageServlet.java", "stars": "18", "class": {"name": "HomePageServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "setJobStatus", "params": ["List<ExecutableNode>", "Map<String,String>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void setJobStatus(List<ExecutableNode> executableNodes, Map<String, String> flowInfo){    for (ExecutableNode executableNode : executableNodes){      switch (executableNode.getStatus()){        case SUCCEEDED:        case RETRIED_SUCCEEDED:          flowInfo.put(\"jobSuccessNum\", Integer.valueOf(flowInfo.getOrDefault(\"jobSuccessNum\", \"0\")) + 1 + \"\");          continue;        case RUNNING:          flowInfo.put(\"jobRunningNum\", (Integer.valueOf(flowInfo.getOrDefault(\"jobRunningNum\", \"0\")) + 1) + \"\");          continue;        case FAILED:        case FAILED_FINISHING:        case KILLED:          flowInfo.put(\"jobFailedNum\", (Integer.valueOf(flowInfo.getOrDefault(\"jobFailedNum\", \"0\")) + 1) + \"\");          continue;//        case QUEUED://        case READY://        case PREPARING://          flowInfo.put(\"jobNoExecNum\", (Integer.valueOf(flowInfo.getOrDefault(\"jobNoExecNum\", \"0\")) + 1) + \"\");//          continue;        case CANCELLED:          flowInfo.put(\"jobCancelNum\", (Integer.valueOf(flowInfo.getOrDefault(\"jobCancelNum\", \"0\")) + 1) + \"\");      }    }    int jobNoExecNum = executableNodes.size() - Integer.valueOf(flowInfo.get(\"jobCancelNum\"))                                              - Integer.valueOf(flowInfo.get(\"jobFailedNum\"))                                              - Integer.valueOf(flowInfo.get(\"jobRunningNum\"))                                              - Integer.valueOf(flowInfo.get(\"jobSuccessNum\"));    flowInfo.put(\"jobNoExecNum\", String.valueOf(jobNoExecNum));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-homepage/src/main/java/com/webank/wedatasphere/schedulis/homepage/servlet/HomePageServlet.java", "stars": "18", "class": {"name": "HomePageServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "getScheduleTodayRunCount", "params": ["Schedule"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "  private int getScheduleTodayRunCount(final Schedule schedule){    int runCount = 0;    final DateTimeZone timezone = DateTimeZone.getDefault();    final DateTime nowSchedTime = new DateTime(timezone);    final long todayLong = nowSchedTime.getMillis();    String cronExpression = schedule.getCronExpression();    Calendar calendar = Calendar.getInstance();    //\u83b7\u53d6\u5f53\u5929\u51cc\u6668\u6beb\u79d2\u6570//    calendar.set(Calendar.HOUR_OF_DAY, 0);//    calendar.set(Calendar.MINUTE, 0);//    calendar.set(Calendar.SECOND, 0);//    calendar.set(Calendar.MILLISECOND, 1);    //\u83b7\u53d6\u5f53\u592924\u70b9\u6beb\u79d2\u6570    calendar.set(Calendar.HOUR_OF_DAY, 23);    calendar.set(Calendar.MINUTE, 59);    calendar.set(Calendar.SECOND, 59);    long todayLast = calendar.getTimeInMillis();    //runCount = countTodaySchedule(cronExpression, todayLast, runCount, nowSchedTime.getMillis(), timezone);    final DateTime nextTime = WebUtils.getNextCronRuntime(todayLong        , timezone, Utils.parseCronExpression(cronExpression, timezone));    long nextExecTime = nextTime.getMillis();    while(nextExecTime < todayLast){      runCount += 1;      nextExecTime = WebUtils.getNextCronRuntime(nextExecTime, timezone          , Utils.parseCronExpression(cronExpression, timezone)).getMillis();    }    return runCount;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-homepage/src/main/java/com/webank/wedatasphere/schedulis/homepage/servlet/HomePageServlet.java", "stars": "18", "class": {"name": "HomePageServlet", "extends": "LoginAbstractAzkabanServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getPage() {      return this.page;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-homepage/src/main/java/com/webank/wedatasphere/schedulis/homepage/servlet/HomePageServlet.java", "stars": "18", "class": {"name": "PageSelection", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getSize() {      return this.size;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-homepage/src/main/java/com/webank/wedatasphere/schedulis/homepage/servlet/HomePageServlet.java", "stars": "18", "class": {"name": "PageSelection", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDisabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean getDisabled() {      return this.disabled;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-homepage/src/main/java/com/webank/wedatasphere/schedulis/homepage/servlet/HomePageServlet.java", "stars": "18", "class": {"name": "PageSelection", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isSelected", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isSelected() {      return this.selected;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-homepage/src/main/java/com/webank/wedatasphere/schedulis/homepage/servlet/HomePageServlet.java", "stars": "18", "class": {"name": "PageSelection", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setSelected", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSelected(final boolean selected) {      this.selected = selected;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-homepage/src/main/java/com/webank/wedatasphere/schedulis/homepage/servlet/HomePageServlet.java", "stars": "18", "class": {"name": "PageSelection", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String args[]) {        System.out.println(\"- Downloader started\");        File baseDirectory = new File(args[0]);        System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath());        // If the maven-wrapper.properties exists, read it and check if it contains a custom        // wrapperUrl parameter.        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);        String url = DEFAULT_DOWNLOAD_URL;        if (mavenWrapperPropertyFile.exists()) {            FileInputStream mavenWrapperPropertyFileInputStream = null;            try {                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);                Properties mavenWrapperProperties = new Properties();                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);            } catch (IOException e) {                System.out.println(\"- ERROR loading '\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"'\");            } finally {                try {                    if (mavenWrapperPropertyFileInputStream != null) {                        mavenWrapperPropertyFileInputStream.close();                    }                } catch (IOException e) {                    // Ignore ...                }            }        }        System.out.println(\"- Downloading from: \" + url);        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);        if (!outputFile.getParentFile().exists()) {            if (!outputFile.getParentFile().mkdirs()) {                System.out.println(                        \"- ERROR creating output directory '\" + outputFile.getParentFile().getAbsolutePath() + \"'\");            }        }        System.out.println(\"- Downloading to: \" + outputFile.getAbsolutePath());        try {            downloadFileFromURL(url, outputFile);            System.out.println(\"Done\");            System.exit(0);        } catch (Throwable e) {            System.out.println(\"- Error downloading\");            e.printStackTrace();            System.exit(1);        }    }", "url": "https://raw.githubusercontent.com/zakariaelattar/Cannon-Bank/master/.mvn/wrapper/MavenWrapperDownloader.java", "stars": "1", "class": {"name": "MavenWrapperDownloader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "downloadFileFromURL", "params": ["String", "File"], "throws": ["Exception"], "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void downloadFileFromURL(String urlString, File destination) throws Exception {        if (System.getenv(\"MVNW_USERNAME\") != null && System.getenv(\"MVNW_PASSWORD\") != null) {            String username = System.getenv(\"MVNW_USERNAME\");            char[] password = System.getenv(\"MVNW_PASSWORD\").toCharArray();            Authenticator.setDefault(new Authenticator() {                @Override                protected PasswordAuthentication getPasswordAuthentication() {                    return new PasswordAuthentication(username, password);                }            });        }        URL website = new URL(urlString);        ReadableByteChannel rbc;        rbc = Channels.newChannel(website.openStream());        FileOutputStream fos = new FileOutputStream(destination);        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);        fos.close();        rbc.close();    }", "url": "https://raw.githubusercontent.com/zakariaelattar/Cannon-Bank/master/.mvn/wrapper/MavenWrapperDownloader.java", "stars": "1", "class": {"name": "MavenWrapperDownloader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "configure", "params": ["HttpSecurity"], "throws": ["Exception"], "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void configure(HttpSecurity http) throws Exception {\t\thttp.csrf().disable();\t}", "url": "https://raw.githubusercontent.com/bruinli28/stockmarket/master/cloud-zuul-service/src/main/java/com/iiht/stock/zuul/conf/SecurityConfig.java", "stars": "2", "class": {"name": "SecurityConfig", "extends": "WebSecurityConfigurerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getFamilia", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getFamilia() {        return familia;    }", "url": "https://raw.githubusercontent.com/santiago9739/Ingenieria-del-software-2/master/src/main/java/co/unicauca/tallerpolimorfismo/modelo/ViajeFamiliar.java", "stars": "1", "class": {"name": "ViajeFamiliar", "extends": "Viaje", "implements": null, "modifiers": ["public"]}}, {"method_name": "setFamilia", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFamilia(int familia) {        this.familia = familia;    }", "url": "https://raw.githubusercontent.com/santiago9739/Ingenieria-del-software-2/master/src/main/java/co/unicauca/tallerpolimorfismo/modelo/ViajeFamiliar.java", "stars": "1", "class": {"name": "ViajeFamiliar", "extends": "Viaje", "implements": null, "modifiers": ["public"]}}, {"method_name": "descripcion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String descripcion() {        return \"Viaje para disfrutar con toda tu familia\";    }", "url": "https://raw.githubusercontent.com/santiago9739/Ingenieria-del-software-2/master/src/main/java/co/unicauca/tallerpolimorfismo/modelo/ViajeFamiliar.java", "stars": "1", "class": {"name": "ViajeFamiliar", "extends": "Viaje", "implements": null, "modifiers": ["public"]}}, {"method_name": "cualquierMetodo2", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String cualquierMetodo2() {        return \"M\u00e9todo implementado en la clase hija viaje familiar\";    }", "url": "https://raw.githubusercontent.com/santiago9739/Ingenieria-del-software-2/master/src/main/java/co/unicauca/tallerpolimorfismo/modelo/ViajeFamiliar.java", "stars": "1", "class": {"name": "ViajeFamiliar", "extends": "Viaje", "implements": null, "modifiers": ["public"]}}, {"method_name": "ptzdirectCmd", "params": ["Device", "String", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean ptzdirectCmd(Device device, String channelId, int leftRight, int upDown) {\t\treturn ptzCmd(device, channelId, leftRight, upDown, 0, sipConfig.getSpeed(), 0);\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/cmd/impl/SIPCommander.java", "stars": "29", "class": {"name": "SIPCommander", "extends": null, "implements": ["ISIPCommander"], "modifiers": ["public"]}}, {"method_name": "ptzdirectCmd", "params": ["Device", "String", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean ptzdirectCmd(Device device, String channelId, int leftRight, int upDown, int moveSpeed) {\t\treturn ptzCmd(device, channelId, leftRight, upDown, 0, moveSpeed, 0);\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/cmd/impl/SIPCommander.java", "stars": "29", "class": {"name": "SIPCommander", "extends": null, "implements": ["ISIPCommander"], "modifiers": ["public"]}}, {"method_name": "ptzZoomCmd", "params": ["Device", "String", "int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean ptzZoomCmd(Device device, String channelId, int inOut) {\t\treturn ptzCmd(device, channelId, 0, 0, inOut, 0, sipConfig.getSpeed());\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/cmd/impl/SIPCommander.java", "stars": "29", "class": {"name": "SIPCommander", "extends": null, "implements": ["ISIPCommander"], "modifiers": ["public"]}}, {"method_name": "ptzZoomCmd", "params": ["Device", "String", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean ptzZoomCmd(Device device, String channelId, int inOut, int zoomSpeed) {\t\treturn ptzCmd(device, channelId, 0, 0, inOut, 0, zoomSpeed);\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/cmd/impl/SIPCommander.java", "stars": "29", "class": {"name": "SIPCommander", "extends": null, "implements": ["ISIPCommander"], "modifiers": ["public"]}}, {"method_name": "ptzCmd", "params": ["Device", "String", "int", "int", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean ptzCmd(Device device, String channelId, int leftRight, int upDown, int inOut, int moveSpeed,\t\t\tint zoomSpeed) {\t\ttry {\t\t\tStringBuffer ptzXml = new StringBuffer(200);\t\t\tptzXml.append(\"<?xml version=\\\"1.0\\\" ?>\");\t\t\tptzXml.append(\"<Control>\");\t\t\tptzXml.append(\"<CmdType>DeviceControl</CmdType>\");\t\t\tptzXml.append(\"<SN>\" + (int)((Math.random()*9+1)*100000) + \"</SN>\");\t\t\tptzXml.append(\"<DeviceID>\" + channelId + \"</DeviceID>\");\t\t\tptzXml.append(\"<PTZCmd>\" + PtzCmdHelper.create(leftRight, upDown, inOut, moveSpeed, zoomSpeed) + \"</PTZCmd>\");\t\t\tptzXml.append(\"<Info>\");\t\t\tptzXml.append(\"</Info>\");\t\t\tptzXml.append(\"</Control>\");\t\t\t\t\t\tRequest request = headerProvider.createMessageRequest(device, ptzXml.toString(), \"ViaPtzBranch\", \"FromPtzTag\", \"ToPtzTag\");\t\t\t\t\t\ttransmitRequest(device, request);\t\t\t\t\t\treturn true;\t\t} catch (SipException | ParseException | InvalidArgumentException e) {\t\t\te.printStackTrace();\t\t} \t\treturn false;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/cmd/impl/SIPCommander.java", "stars": "29", "class": {"name": "SIPCommander", "extends": null, "implements": ["ISIPCommander"], "modifiers": ["public"]}}, {"method_name": "playStreamCmd", "params": ["Device", "String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String playStreamCmd(Device device, String channelId) {\t\ttry {\t\t\t\t\t\tString ssrc = SsrcUtil.getPlaySsrc();\t\t\t//\t\t\tStringBuffer content = new StringBuffer(200);\t        content.append(\"v=0\\r\\n\");\t        content.append(\"o=\"+channelId+\" 0 0 IN IP4 \"+sipConfig.getSipIp()+\"\\r\\n\");\t        content.append(\"s=Play\\r\\n\");\t        content.append(\"c=IN IP4 \"+sipConfig.getMediaIp()+\"\\r\\n\");\t        content.append(\"t=0 0\\r\\n\");\t        if(device.getTransport().equals(\"TCP\")) {\t        \tcontent.append(\"m=video \"+sipConfig.getMediaPort()+\" TCP/RTP/AVP 96 98 97\\r\\n\");\t\t\t}\t        if(device.getTransport().equals(\"UDP\")) {\t        \tcontent.append(\"m=video \"+sipConfig.getMediaPort()+\" RTP/AVP 96 98 97\\r\\n\");\t\t\t}\t        content.append(\"a=sendrecv\\r\\n\");\t        content.append(\"a=rtpmap:96 PS/90000\\r\\n\");\t        content.append(\"a=rtpmap:98 H264/90000\\r\\n\");\t        content.append(\"a=rtpmap:97 MPEG4/90000\\r\\n\");\t        if(device.getTransport().equals(\"TCP\")){\t             content.append(\"a=setup:passive\\r\\n\");\t             content.append(\"a=connection:new\\r\\n\");\t        }\t        content.append(\"y=\"+ssrc+\"\\r\\n\");//ssrc\t        \t        Request request = headerProvider.createInviteRequest(device, content.toString(), null, \"live\", null);\t\t        transmitRequest(device, request);\t\t\treturn ssrc;\t\t} catch ( SipException | ParseException | InvalidArgumentException e) {\t\t\te.printStackTrace();\t\t\treturn null;\t\t} \t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/cmd/impl/SIPCommander.java", "stars": "29", "class": {"name": "SIPCommander", "extends": null, "implements": ["ISIPCommander"], "modifiers": ["public"]}}, {"method_name": "playbackStreamCmd", "params": ["Device", "String", "String", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String playbackStreamCmd(Device device, String channelId, String recordId, String startTime, String endTime) {\t\ttry {\t\t\t\t\t\tString ssrc = SsrcUtil.getPlayBackSsrc();\t\t\t//\t\t\tStringBuffer content = new StringBuffer(200);\t        content.append(\"v=0\\r\\n\");\t        content.append(\"o=\"+channelId+\" 0 0 IN IP4 \"+sipConfig.getSipIp()+\"\\r\\n\");\t        content.append(\"s=Playback\\r\\n\");\t        content.append(\"u=\"+recordId+\":3\\r\\n\");\t        content.append(\"c=IN IP4 \"+sipConfig.getMediaIp()+\"\\r\\n\");\t        content.append(\"t=\"+DateUtil.yyyy_MM_dd_HH_mm_ssToTimestamp(startTime)+\" \"+DateUtil.yyyy_MM_dd_HH_mm_ssToTimestamp(endTime) +\"\\r\\n\");\t        if(device.getTransport().equals(\"TCP\")) {\t        \tcontent.append(\"m=video \"+sipConfig.getMediaPort()+\" TCP/RTP/AVP 96 98 97\\r\\n\");\t\t\t}\t        if(device.getTransport().equals(\"UDP\")) {\t        \tcontent.append(\"m=video \"+sipConfig.getMediaPort()+\" RTP/AVP 96 98 97\\r\\n\");\t\t\t}\t        content.append(\"a=recvonly\\r\\n\");\t        content.append(\"a=rtpmap:96 PS/90000\\r\\n\");\t        content.append(\"a=rtpmap:98 H264/90000\\r\\n\");\t        content.append(\"a=rtpmap:97 MPEG4/90000\\r\\n\");\t        if(device.getTransport().equals(\"TCP\")){\t             content.append(\"a=setup:passive\\r\\n\");\t             content.append(\"a=connection:new\\r\\n\");\t        }\t        content.append(\"y=\"+ssrc+\"\\r\\n\");//ssrc\t        \t        Request request = headerProvider.createInviteRequest(device, content.toString(), null, \"live\", null);\t\t        transmitRequest(device, request);\t\t\treturn ssrc;\t\t} catch ( SipException | ParseException | InvalidArgumentException e) {\t\t\te.printStackTrace();\t\t\treturn null;\t\t}\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/cmd/impl/SIPCommander.java", "stars": "29", "class": {"name": "SIPCommander", "extends": null, "implements": ["ISIPCommander"], "modifiers": ["public"]}}, {"method_name": "audioBroadcastCmd", "params": ["Device", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean audioBroadcastCmd(Device device, String channelId) {\t\t// TODO Auto-generated method stub\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/cmd/impl/SIPCommander.java", "stars": "29", "class": {"name": "SIPCommander", "extends": null, "implements": ["ISIPCommander"], "modifiers": ["public"]}}, {"method_name": "recordCmd", "params": ["Device", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean recordCmd(Device device, String channelId) {\t\t// TODO Auto-generated method stub\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/cmd/impl/SIPCommander.java", "stars": "29", "class": {"name": "SIPCommander", "extends": null, "implements": ["ISIPCommander"], "modifiers": ["public"]}}, {"method_name": "guardCmd", "params": ["Device"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean guardCmd(Device device) {\t\t// TODO Auto-generated method stub\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/cmd/impl/SIPCommander.java", "stars": "29", "class": {"name": "SIPCommander", "extends": null, "implements": ["ISIPCommander"], "modifiers": ["public"]}}, {"method_name": "alarmCmd", "params": ["Device"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean alarmCmd(Device device) {\t\t// TODO Auto-generated method stub\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/cmd/impl/SIPCommander.java", "stars": "29", "class": {"name": "SIPCommander", "extends": null, "implements": ["ISIPCommander"], "modifiers": ["public"]}}, {"method_name": "iFameCmd", "params": ["Device", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean iFameCmd(Device device, String channelId) {\t\t// TODO Auto-generated method stub\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/cmd/impl/SIPCommander.java", "stars": "29", "class": {"name": "SIPCommander", "extends": null, "implements": ["ISIPCommander"], "modifiers": ["public"]}}, {"method_name": "homePositionCmd", "params": ["Device"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean homePositionCmd(Device device) {\t\t// TODO Auto-generated method stub\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/cmd/impl/SIPCommander.java", "stars": "29", "class": {"name": "SIPCommander", "extends": null, "implements": ["ISIPCommander"], "modifiers": ["public"]}}, {"method_name": "deviceConfigCmd", "params": ["Device"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean deviceConfigCmd(Device device) {\t\t// TODO Auto-generated method stub\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/cmd/impl/SIPCommander.java", "stars": "29", "class": {"name": "SIPCommander", "extends": null, "implements": ["ISIPCommander"], "modifiers": ["public"]}}, {"method_name": "deviceStatusQuery", "params": ["Device"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean deviceStatusQuery(Device device) {\t\t// TODO Auto-generated method stub\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/cmd/impl/SIPCommander.java", "stars": "29", "class": {"name": "SIPCommander", "extends": null, "implements": ["ISIPCommander"], "modifiers": ["public"]}}, {"method_name": "deviceInfoQuery", "params": ["Device"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean deviceInfoQuery(Device device) {\t\ttry {\t\t\tStringBuffer catalogXml = new StringBuffer(200);\t\t\tcatalogXml.append(\"<?xml version=\\\"1.0\\\" encoding=\\\"GB2312\\\"?>\");\t\t\tcatalogXml.append(\"<Query>\");\t\t\tcatalogXml.append(\"<CmdType>DeviceInfo</CmdType>\");\t\t\tcatalogXml.append(\"<SN>\" + (int)((Math.random()*9+1)*100000) + \"</SN>\");\t\t\tcatalogXml.append(\"<DeviceID>\" + device.getDeviceId() + \"</DeviceID>\");\t\t\tcatalogXml.append(\"</Query>\");\t\t\t\t\t\tRequest request = headerProvider.createMessageRequest(device, catalogXml.toString(), \"ViaDeviceInfoBranch\", \"FromDeviceInfoTag\", \"ToDeviceInfoTag\");\t\t\ttransmitRequest(device, request);\t\t\t\t\t} catch (SipException | ParseException | InvalidArgumentException e) {\t\t\te.printStackTrace();\t\t\treturn false;\t\t}\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/cmd/impl/SIPCommander.java", "stars": "29", "class": {"name": "SIPCommander", "extends": null, "implements": ["ISIPCommander"], "modifiers": ["public"]}}, {"method_name": "catalogQuery", "params": ["Device"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean catalogQuery(Device device) {\t\ttry {\t\t\tStringBuffer catalogXml = new StringBuffer(200);\t\t\tcatalogXml.append(\"<?xml version=\\\"1.0\\\" encoding=\\\"GB2312\\\"?>\");\t\t\tcatalogXml.append(\"<Query>\");\t\t\tcatalogXml.append(\"<CmdType>Catalog</CmdType>\");\t\t\tcatalogXml.append(\"<SN>\" + (int)((Math.random()*9+1)*100000) + \"</SN>\");\t\t\tcatalogXml.append(\"<DeviceID>\" + device.getDeviceId() + \"</DeviceID>\");\t\t\tcatalogXml.append(\"</Query>\");\t\t\t\t\t\tRequest request = headerProvider.createMessageRequest(device, catalogXml.toString(), \"ViaCatalogBranch\", \"FromCatalogTag\", \"ToCatalogTag\");\t\t\ttransmitRequest(device, request);\t\t} catch (SipException | ParseException | InvalidArgumentException e) {\t\t\te.printStackTrace();\t\t\treturn false;\t\t}\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/cmd/impl/SIPCommander.java", "stars": "29", "class": {"name": "SIPCommander", "extends": null, "implements": ["ISIPCommander"], "modifiers": ["public"]}}, {"method_name": "recordInfoQuery", "params": ["Device", "String", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean recordInfoQuery(Device device, String channelId, String startTime, String endTime) {\t\t\t\ttry {\t\t\tStringBuffer recordInfoXml = new StringBuffer(200);\t\t\trecordInfoXml.append(\"<?xml version=\\\"1.0\\\" encoding=\\\"GB2312\\\"?>\");\t\t\trecordInfoXml.append(\"<Query>\");\t\t\trecordInfoXml.append(\"<CmdType>RecordInfo</CmdType>\");\t\t\trecordInfoXml.append(\"<SN>\" + (int)((Math.random()*9+1)*100000) + \"</SN>\");\t\t\trecordInfoXml.append(\"<DeviceID>\" + channelId + \"</DeviceID>\");\t\t\trecordInfoXml.append(\"<StartTime>\" + DateUtil.yyyy_MM_dd_HH_mm_ssToISO8601(startTime) + \"</StartTime>\");\t\t\trecordInfoXml.append(\"<EndTime>\" + DateUtil.yyyy_MM_dd_HH_mm_ssToISO8601(endTime) + \"</EndTime>\");\t\t\trecordInfoXml.append(\"<Secrecy>0</Secrecy>\");\t\t\t// \u5927\u534eNVR\u8981\u6c42\u5fc5\u987b\u589e\u52a0\u4e00\u4e2a\u503c\u4e3aall\u7684\u6587\u672c\u5143\u7d20\u8282\u70b9Type\t\t\trecordInfoXml.append(\"<Type>all</Type>\");\t\t\trecordInfoXml.append(\"</Query>\");\t\t\t\t\t\tRequest request = headerProvider.createMessageRequest(device, recordInfoXml.toString(), \"ViaRecordInfoBranch\", \"FromRecordInfoTag\", \"ToRecordInfoTag\");\t\t\ttransmitRequest(device, request);\t\t} catch (SipException | ParseException | InvalidArgumentException e) {\t\t\te.printStackTrace();\t\t\treturn false;\t\t}\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/cmd/impl/SIPCommander.java", "stars": "29", "class": {"name": "SIPCommander", "extends": null, "implements": ["ISIPCommander"], "modifiers": ["public"]}}, {"method_name": "alarmInfoQuery", "params": ["Device"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean alarmInfoQuery(Device device) {\t\t// TODO Auto-generated method stub\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/cmd/impl/SIPCommander.java", "stars": "29", "class": {"name": "SIPCommander", "extends": null, "implements": ["ISIPCommander"], "modifiers": ["public"]}}, {"method_name": "configQuery", "params": ["Device"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean configQuery(Device device) {\t\t// TODO Auto-generated method stub\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/cmd/impl/SIPCommander.java", "stars": "29", "class": {"name": "SIPCommander", "extends": null, "implements": ["ISIPCommander"], "modifiers": ["public"]}}, {"method_name": "presetQuery", "params": ["Device"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean presetQuery(Device device) {\t\t// TODO Auto-generated method stub\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/cmd/impl/SIPCommander.java", "stars": "29", "class": {"name": "SIPCommander", "extends": null, "implements": ["ISIPCommander"], "modifiers": ["public"]}}, {"method_name": "mobilePostitionQuery", "params": ["Device"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean mobilePostitionQuery(Device device) {\t\t// TODO Auto-generated method stub\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/cmd/impl/SIPCommander.java", "stars": "29", "class": {"name": "SIPCommander", "extends": null, "implements": ["ISIPCommander"], "modifiers": ["public"]}}, {"method_name": "transmitRequest", "params": ["Device", "Request"], "throws": ["SipException"], "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void transmitRequest(Device device, Request request) throws SipException {\t\tif(device.getTransport().equals(\"TCP\")) {\t\t\tsipLayer.getTcpSipProvider().sendRequest(request);\t\t} else if(device.getTransport().equals(\"UDP\")) {\t\t\tsipLayer.getUdpSipProvider().sendRequest(request);\t\t}\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/cmd/impl/SIPCommander.java", "stars": "29", "class": {"name": "SIPCommander", "extends": null, "implements": ["ISIPCommander"], "modifiers": ["public"]}}, {"method_name": "checkLogin", "params": ["Props", "String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "  public static boolean checkLogin(Props props, String userName, String password) {    String ip = props.getString(\"ladp.ip\");    int port = props.getInt(\"ladp.port\");    setupLCF(ip, port);    Connection conn = null;    try {      conn = lcf.getConnection();    } catch (LdapException e) {      logger.error(\"LdapCheckCenter LDAP-->connecting failed. please check ip :\" + ip + \" port: \" + port, e);      return false;    }    logger.info(\"LdapCheckCenter LDAP-->Connect to host: \" + ip + \" success\");    BindRequest request3 = Requests.newSimpleBindRequest(userName , password.getBytes(Charset.defaultCharset()));    try {      conn.bind(request3);      logger.info(\"LdapCheckCenter LDAP-->auth \" + userName + \" success. \");      return true;    } catch (LdapException e) {      logger.error(\"LdapCheckCenter LDAP-->Bind \" + userName + \" failed.\", e);      return false;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/utils/LdapCheckCenter.java", "stars": "18", "class": {"name": "LdapCheckCenter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setupLCF", "params": ["String", "int"], "throws": null, "modifiers": ["private", "static"], "return_type": "LDAPConnectionFactory", "snippet": "  private static LDAPConnectionFactory setupLCF(String ip, int port) {    if (lcf == null) {      synchronized (LDAPConnectionFactory.class) {        if (lcf == null) {          lcf = new LDAPConnectionFactory(ip, port);        }      }    }    return lcf;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/utils/LdapCheckCenter.java", "stars": "18", "class": {"name": "LdapCheckCenter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onReceiveValue", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onReceiveValue (java.lang.Object p0)\t{\t\tn_onReceiveValue (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/WebViewRenderer_JavascriptResult.java", "stars": "2", "class": {"name": "WebViewRenderer_JavascriptResult", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onReceiveValue", "params": ["java"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onReceiveValue (java.lang.Object p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/WebViewRenderer_JavascriptResult.java", "stars": "2", "class": {"name": "WebViewRenderer_JavascriptResult", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/WebViewRenderer_JavascriptResult.java", "stars": "2", "class": {"name": "WebViewRenderer_JavascriptResult", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/WebViewRenderer_JavascriptResult.java", "stars": "2", "class": {"name": "WebViewRenderer_JavascriptResult", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_list_video);        videoList = (ListView)findViewById(R.id.video_list);        listNormalAdapter = new SwitchListVideoAdapter(this);        videoList.setAdapter(listNormalAdapter);        videoList.setOnScrollListener(new AbsListView.OnScrollListener() {            @Override            public void onScrollStateChanged(AbsListView view, int scrollState) {            }            @Override            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {                int lastVisibleItem = firstVisibleItem + visibleItemCount;                //\u5927\u4e8e0\u8bf4\u660e\u6709\u64ad\u653e                if (GSYVideoManager.instance().getPlayPosition() >= 0) {                    //\u5f53\u524d\u64ad\u653e\u7684\u4f4d\u7f6e                    int position = GSYVideoManager.instance().getPlayPosition();                    //\u5bf9\u5e94\u7684\u64ad\u653e\u5217\u8868TAG                    if (GSYVideoManager.instance().getPlayTag().equals(SwitchListVideoAdapter.TAG)                            && (position < firstVisibleItem || position > lastVisibleItem)) {                        if(GSYVideoManager.isFullState(SwitchListVideoActivity.this)) {                            return;                        }                        //\u5982\u679c\u6ed1\u51fa\u53bb\u4e86\u4e0a\u9762\u548c\u4e0b\u9762\u5c31\u662f\u5426\uff0c\u548c\u4eca\u65e5\u5934\u6761\u4e00\u6837                        GSYVideoManager.releaseAllVideos();                        listNormalAdapter.notifyDataSetChanged();                    }                }            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/switchplay/SwitchListVideoActivity.java", "stars": "2", "class": {"name": "SwitchListVideoActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBackPressed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBackPressed() {        if (GSYVideoManager.backFromWindowFull(this)) {            return;        }        super.onBackPressed();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/switchplay/SwitchListVideoActivity.java", "stars": "2", "class": {"name": "SwitchListVideoActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onPause() {        super.onPause();        //GSYVideoManager.onPause();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/switchplay/SwitchListVideoActivity.java", "stars": "2", "class": {"name": "SwitchListVideoActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onResume() {        super.onResume();        //GSYVideoManager.onResume();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/switchplay/SwitchListVideoActivity.java", "stars": "2", "class": {"name": "SwitchListVideoActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDestroy() {        super.onDestroy();        GSYVideoManager.releaseAllVideos();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/switchplay/SwitchListVideoActivity.java", "stars": "2", "class": {"name": "SwitchListVideoActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String [] args){        SpreadSheet frame = new SpreadSheet();        frame.setVisible(true);    }", "url": "https://raw.githubusercontent.com/Collinsbrefo123/DATA-VISUALIZATION/master/src/SpreadSheet.java", "stars": "2", "class": {"name": "SpreadSheet", "extends": "BaseUI", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tSpringApplication.run(CinemaApplication.class, args);\t}", "url": "https://raw.githubusercontent.com/ELATTARIYassine/Angular-SpringBoot-cinema-management/master/backend/src/main/java/com/shanks/cinema/CinemaApplication.java", "stars": "2", "class": {"name": "CinemaApplication", "extends": null, "implements": ["CommandLineRunner"], "modifiers": ["public"]}}, {"method_name": "run", "params": ["String"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void run(String... args) throws Exception {\t\trepositoryRestConfiguration.exposeIdsFor(Film.class, Ticket.class);\t\trepositoryRestConfiguration.exposeIdsFor(Salle.class);\t\t/*iCinemaInitService.initVilles();\t\tiCinemaInitService.initCinemas();\t\tiCinemaInitService.initSalles();\t\tiCinemaInitService.initPlaces();\t\tiCinemaInitService.initSeances();\t\tiCinemaInitService.initCategories();\t\tiCinemaInitService.initFilms();\t\tiCinemaInitService.initProjections();\t\tiCinemaInitService.initTickets();*/\t}", "url": "https://raw.githubusercontent.com/ELATTARIYassine/Angular-SpringBoot-cinema-management/master/backend/src/main/java/com/shanks/cinema/CinemaApplication.java", "stars": "2", "class": {"name": "CinemaApplication", "extends": null, "implements": ["CommandLineRunner"], "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create an SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/collectionparameters/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/collectionparameters/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/collectionparameters/CollectionParametersTest.java", "stars": "15", "class": {"name": "CollectionParametersTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetTwoUsersPassingAList", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetTwoUsersPassingAList() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      ArrayList<Integer> list = new ArrayList<>();      list.add(1);      list.add(2);      List<User> users = mapper.getUsersFromList(list);      Assertions.assertEquals(2, users.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/collectionparameters/CollectionParametersTest.java", "stars": "15", "class": {"name": "CollectionParametersTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetTwoUsersPassingAnArray", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetTwoUsersPassingAnArray() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Integer[] list = new Integer[2];      list[0] = 1;      list[1] = 2;      List<User> users = mapper.getUsersFromArray(list);      Assertions.assertEquals(2, users.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/collectionparameters/CollectionParametersTest.java", "stars": "15", "class": {"name": "CollectionParametersTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetTwoUsersPassingACollection", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetTwoUsersPassingACollection() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Set<Integer> list = new HashSet<>();      list.add(1);      list.add(2);      List<User> users = mapper.getUsersFromCollection(list);      Assertions.assertEquals(2, users.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/collectionparameters/CollectionParametersTest.java", "stars": "15", "class": {"name": "CollectionParametersTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getProgress", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getProgress() {        return progress;    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson6/practice06/Practice06KeyframeView.java", "stars": "2", "class": {"name": "Practice06KeyframeView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "setProgress", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setProgress(float progress) {        this.progress = progress;        invalidate();    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson6/practice06/Practice06KeyframeView.java", "stars": "2", "class": {"name": "Practice06KeyframeView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDraw(Canvas canvas) {        super.onDraw(canvas);        float centerX = getWidth() / 2;        float centerY = getHeight() / 2;        paint.setColor(Color.parseColor(\"#E91E63\"));        paint.setStyle(Paint.Style.STROKE);        paint.setStrokeCap(Paint.Cap.ROUND);        paint.setStrokeWidth(dpToPixel(15));        arcRectF.set(centerX - radius, centerY - radius, centerX + radius, centerY + radius);        canvas.drawArc(arcRectF, 135, progress * 2.7f, false, paint);        paint.setColor(Color.WHITE);        paint.setStyle(Paint.Style.FILL);        canvas.drawText((int) progress + \"%\", centerX, centerY - (paint.ascent() + paint.descent()) / 2, paint);    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson6/practice06/Practice06KeyframeView.java", "stars": "2", "class": {"name": "Practice06KeyframeView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "registerBuiltinCheckers", "params": ["Map<String,Class>"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void registerBuiltinCheckers(      final Map<String, Class<? extends ConditionChecker>> builtinCheckers) {    checkerToClass.putAll(checkerToClass);    for (final String type : builtinCheckers.keySet()) {      logger.info(\"Loaded \" + type + \" checker.\");    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/CheckerTypeLoader.java", "stars": "18", "class": {"name": "CheckerTypeLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": ["Props"], "throws": ["TriggerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void init(final Props props) throws TriggerException {  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/CheckerTypeLoader.java", "stars": "18", "class": {"name": "CheckerTypeLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "registerCheckerType", "params": ["String", "Class<ConditionChecker>"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "  public synchronized void registerCheckerType(final String type,      final Class<? extends ConditionChecker> checkerClass) {    logger.info(\"Registering checker \" + type);    if (!checkerToClass.containsKey(type)) {      checkerToClass.put(type, checkerClass);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/CheckerTypeLoader.java", "stars": "18", "class": {"name": "CheckerTypeLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCheckerFromJson", "params": ["String", "Object"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "ConditionChecker", "snippet": "  public ConditionChecker createCheckerFromJson(final String type, final Object obj)      throws Exception {    ConditionChecker checker = null;    final Class<? extends ConditionChecker> checkerClass = checkerToClass.get(type);    if (checkerClass == null) {      throw new Exception(\"Checker type \" + type + \" not supported!\");    }    checker =        (ConditionChecker) Utils.invokeStaticMethod(            checkerClass.getClassLoader(), checkerClass.getName(),            \"createFromJson\", obj);    return checker;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/CheckerTypeLoader.java", "stars": "18", "class": {"name": "CheckerTypeLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createChecker", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "ConditionChecker", "snippet": "  public ConditionChecker createChecker(final String type, final Object... args) {    ConditionChecker checker = null;    final Class<? extends ConditionChecker> checkerClass = checkerToClass.get(type);    checker = (ConditionChecker) Utils.callConstructor(checkerClass, args);    return checker;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/CheckerTypeLoader.java", "stars": "18", "class": {"name": "CheckerTypeLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSupportedCheckers", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Class>", "snippet": "  public Map<String, Class<? extends ConditionChecker>> getSupportedCheckers() {    return checkerToClass;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/CheckerTypeLoader.java", "stars": "18", "class": {"name": "CheckerTypeLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateDialog", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "Dialog", "snippet": "    public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());        LayoutInflater inflater = getActivity().getLayoutInflater();        View view = inflater.inflate(R.layout.credentials_dialog, null);        builder.setView(view).setTitle(\"Set credentials\").setNegativeButton(\"Cancel\", new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {            }        })        .setPositiveButton(\"Set\", new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                Credentials credentials = new Credentials(                    credentialsHostname.getText().toString(),                    credentialsUsername.getText().toString(),                    credentialsPassword.getText().toString()                );                try {                    CredentialsManager.getInstance().saveCredentials(credentials);                    APIConnector.getInstance().login();                } catch (IOException e) {                    e.printStackTrace();                }            }        });        credentialsUsername = view.findViewById(R.id.credentialsUsername);        credentialsPassword = view.findViewById(R.id.credentialsPassword);        credentialsHostname = view.findViewById(R.id.credentialsHostname);        if (CredentialsManager.getInstance().hasCredentials()) {            Credentials credentials = CredentialsManager.getInstance().getCredentials();            credentialsUsername.setText(credentials.username);            credentialsPassword.setText(credentials.password);            credentialsHostname.setText(credentials.hostname);        }        return builder.create();    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/settings/CredentialsDialog.java", "stars": "1", "class": {"name": "CredentialsDialog", "extends": "AppCompatDialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws IOException {        String tokenOutFilename = \"tokenOut8.txt\";        String syntaxOutFilename = \"syntaxOut8.txt\";        String errorFilename = \"syntaxErrorOut8 .txt\";        System.out.println(32321);        SyntaxAnalysis Syntax = new SyntaxAnalysis();        List<String> tokenList = new ArrayList<>();        File file = new File(tokenOutFilename);        if (file.isFile() && file.exists()) {            BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file)));            String line;            while ((line = br.readLine()) != null) {                tokenList.add(line);            }            br.close();        }        Syntax.setTokenList(tokenList);        Syntax.analysis();        Syntax.output(syntaxOutFilename);        Syntax.errorOutput(errorFilename);        System.out.println(32321);    }", "url": "https://raw.githubusercontent.com/zcy1010/compilerExperimentSyntaxAnalysis/master/src/com/company/syntaxAnalysis/MainS.java", "stars": "2", "class": {"name": "MainS", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "intercept", "params": ["Invocation"], "throws": ["Throwable"], "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object intercept(Invocation invocation) throws Throwable {        ResultSetHandler handler = (ResultSetHandler)invocation.getTarget();        MetaObject metaObject = MetaObject.forObject(handler,                DEFAULT_OBJECT_FACTORY, DEFAULT_OBJECT_WRAPPER_FACTORY, REFLECTOR_FACTORY);        MappedStatement statement = (MappedStatement)metaObject.getValue(\"mappedStatement\");        List<ResultMap> resultMaps = statement.getResultMaps();        if(resultMaps.size() > 0){            String type = resultMaps.get(0).getType().getName();            if(null != type && type.equals(MAP_TYPE)){                logger.trace(MAP_TYPE + \" resultMap\");                String id = statement.getId();                MapRule mapRule = mapRuleHashMap.get(id);                if(null == mapRule){                    String className = id.substring(0, id.lastIndexOf(\".\"));                    Class<?> clz = Class.forName(className);                    String method = id.substring(id.lastIndexOf(\".\") + 1);                    Method[] methods = clz.getMethods();                    for(Method m : methods){                        if(m.getName().equalsIgnoreCase(method)){                            mapRule = m.getAnnotation(MapRule.class);                            mapRuleHashMap.put(className, mapRule);                            break;                        }                    }                }                if(null != mapRule){                    return map((Statement)invocation.getArgs()[0], mapRule);                }            }        }        return invocation.proceed();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/mybatis/plugin/MapInterceptor.java", "stars": "23", "class": {"name": "MapInterceptor", "extends": null, "implements": ["Interceptor"], "modifiers": ["public"]}}, {"method_name": "plugin", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object plugin(Object target) {        if(target instanceof  ResultSetHandler){            return Plugin.wrap(target, this);        }        return target;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/mybatis/plugin/MapInterceptor.java", "stars": "23", "class": {"name": "MapInterceptor", "extends": null, "implements": ["Interceptor"], "modifiers": ["public"]}}, {"method_name": "setProperties", "params": ["Properties"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setProperties(Properties properties) {    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/mybatis/plugin/MapInterceptor.java", "stars": "23", "class": {"name": "MapInterceptor", "extends": null, "implements": ["Interceptor"], "modifiers": ["public"]}}, {"method_name": "map", "params": ["Statement", "MapRule"], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "Object", "snippet": "    private Object map(Statement statement, MapRule mapRule) throws SQLException {        logger.trace(\"Start to build map result\");        Map<Object, Object> buildMap = new HashMap<>(8);        List<Object> result = new ArrayList<>();        try (ResultSet resultSet = statement.getResultSet()) {            if (null != resultSet) {                while (resultSet.next()) {                    buildMap.put(resultSet.getObject(mapRule.key()),                            resultSet.getObject(mapRule.value()));                }            }        }        logger.trace(\"Build map result: \" + Json.toJson(buildMap, null));        result.add(buildMap);        return result;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/mybatis/plugin/MapInterceptor.java", "stars": "23", "class": {"name": "MapInterceptor", "extends": null, "implements": ["Interceptor"], "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "BTManager", "snippet": "    public static BTManager getInstance() {        if (instance == null) {            synchronized (BTManager.class) {                if (instance == null) {                    instance = new BTManager();                }            }        }        return instance;    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBuilder", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Builder", "snippet": "    public static Builder getBuilder() {        return new Builder();    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getContext", "params": [], "throws": null, "modifiers": [], "return_type": "Context", "snippet": "    Context getContext() {        if (application == null) {            tryAutoInit();        }        return application;    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "tryGetApplication", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void tryGetApplication() {        try {            Class<?> cls = Class.forName(\"android.app.ActivityThread\");            Method method = cls.getMethod(\"currentActivityThread\");            method.setAccessible(true);            Object acThread = method.invoke(null);            Method appMethod = acThread.getClass().getMethod(\"getApplication\");            application = (Application) appMethod.invoke(acThread);        } catch (Exception e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBluetoothAdapter", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BluetoothAdapter", "snippet": "    public BluetoothAdapter getBluetoothAdapter() {        return bluetoothAdapter;    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecutorService", "params": [], "throws": null, "modifiers": [], "return_type": "ExecutorService", "snippet": "    ExecutorService getExecutorService() {        return executorService;    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPosterDispatcher", "params": [], "throws": null, "modifiers": [], "return_type": "PosterDispatcher", "snippet": "    PosterDispatcher getPosterDispatcher() {        return posterDispatcher;    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getObservable", "params": [], "throws": null, "modifiers": [], "return_type": "Observable", "snippet": "    Observable getObservable() {        return observable;    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isInitialized", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isInitialized() {        return isInitialized && application != null && instance != null;    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isBluetoothOn", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isBluetoothOn() {        return bluetoothAdapter != null && bluetoothAdapter.isEnabled();    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initialize", "params": ["Application"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void initialize(@NonNull Application application) {        if (isInitialized()) {            return;        }        Objects.requireNonNull(application, \"application can't be null\");        this.application = application;        //\u83b7\u53d6\u84dd\u7259\u914d\u7f6e\u5668        bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();        //\u6ce8\u518c\u84dd\u7259\u5f00\u5173\u72b6\u6001\u5e7f\u64ad\u63a5\u6536\u8005        if (broadcastReceiver == null) {            broadcastReceiver = new InnerBroadcastReceiver();            IntentFilter filter = new IntentFilter();            filter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED);            filter.addAction(BluetoothAdapter.ACTION_DISCOVERY_STARTED);            filter.addAction(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);            filter.addAction(BluetoothDevice.ACTION_FOUND);            filter.addAction(BluetoothDevice.ACTION_BOND_STATE_CHANGED);            application.registerReceiver(broadcastReceiver, filter);        }        isInitialized = true;    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkStatus", "params": [], "throws": null, "modifiers": ["synchronized", "private"], "return_type": "boolean", "snippet": "    private synchronized boolean checkStatus() {        Objects.requireNonNull(instance, \"BTManager instance has been destroyed!\");        if (!isInitialized) {            if (!tryAutoInit()) {                String msg = \"The SDK has not been initialized, make sure to call BTManager.getInstance().initialize(Application) first.\";                if (BTManager.isDebugMode) {                    Log.e(DEBUG_TAG, msg);                }                return false;            }        } else if (application == null) {            return tryAutoInit();        }        return true;    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "tryAutoInit", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean tryAutoInit() {        tryGetApplication();        if (application != null) {            initialize(application);        }        return isInitialized();    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "registerObserver", "params": ["EventObserver"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void registerObserver(@NonNull EventObserver observer) {        if (checkStatus()) {            observable.registerObserver(observer);        }    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isObserverRegistered", "params": ["EventObserver"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isObserverRegistered(@NonNull EventObserver observer) {        return observable.isRegistered(observer);    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "unregisterObserver", "params": ["EventObserver"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void unregisterObserver(@NonNull EventObserver observer) {        observable.unregisterObserver(observer);    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "notifyObservers", "params": ["MethodInfo"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void notifyObservers(@NonNull MethodInfo info) {        if (checkStatus()) {            observable.notifyObservers(info);        }    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addDiscoveryListener", "params": ["DiscoveryListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addDiscoveryListener(@NonNull DiscoveryListener listener) {        if (!discoveryListeners.contains(listener)) {            discoveryListeners.add(listener);        }    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeDiscoveryListener", "params": ["DiscoveryListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeDiscoveryListener(@NonNull DiscoveryListener listener) {        discoveryListeners.remove(listener);    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isLocationEnabled", "params": ["Context"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isLocationEnabled(Context context) {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {            LocationManager locationManager = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);            return locationManager != null && locationManager.isLocationEnabled();        } else {            try {                int locationMode = Settings.Secure.getInt(context.getContentResolver(), Settings.Secure.LOCATION_MODE);                return locationMode != Settings.Secure.LOCATION_MODE_OFF;            } catch (Settings.SettingNotFoundException e) {                return false;            }        }    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "noLocationPermission", "params": ["Context"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean noLocationPermission(Context context) {        int sdkVersion = context.getApplicationInfo().targetSdkVersion;        if (sdkVersion >= 29) {//target sdk\u7248\u672c\u572829\u4ee5\u4e0a\u7684\u9700\u8981\u7cbe\u786e\u5b9a\u4f4d\u6743\u9650\u624d\u80fd\u641c\u7d22\u5230\u84dd\u7259\u8bbe\u5907            return ContextCompat.checkSelfPermission(context, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED;        } else {            return ContextCompat.checkSelfPermission(context, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED &&                    ContextCompat.checkSelfPermission(context, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED;        }    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isDiscovering", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isDiscovering() {        return isDiscovering;    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "startDiscovery", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void startDiscovery() {        if (!checkStatus()) {            return;        }        synchronized (this) {            if (isDiscovering || !isBluetoothOn()) {                return;            }            if (!isLocationEnabled(getContext())) {                String errorMsg = \"Unable to scan for Bluetooth devices, the phone's location service is not turned on.\";                handleDiscoveryCallback(false, null, -120, DiscoveryListener.ERROR_LOCATION_SERVICE_CLOSED, errorMsg);                if (BTManager.isDebugMode) {                    Log.e(DEBUG_TAG, errorMsg);                }                return;            } else if (noLocationPermission(getContext())) {                String errorMsg = \"Unable to scan for Bluetooth devices, lack location permission.\";                handleDiscoveryCallback(false, null, -120, DiscoveryListener.ERROR_LACK_LOCATION_PERMISSION, errorMsg);                if (BTManager.isDebugMode) {                    Log.e(DEBUG_TAG, errorMsg);                }                return;            }        }        bluetoothAdapter.startDiscovery();//\u5f00\u59cb\u641c\u7d22    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "stopDiscovery", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void stopDiscovery() {        if (checkStatus() && bluetoothAdapter != null) {            bluetoothAdapter.cancelDiscovery();        }    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handleDiscoveryCallback", "params": ["boolean", "BluetoothDevice", "int", "int", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void handleDiscoveryCallback(final boolean start, @Nullable final BluetoothDevice device,                                         final int rssi, final int errorCode, final String errorMsg) {        posterDispatcher.post(ThreadMode.MAIN, () -> {            for (DiscoveryListener listener : discoveryListeners) {                if (device != null) {                    listener.onDeviceFound(device, rssi);                } else if (start) {                    listener.onDiscoveryStart();                } else if (errorCode >= 0) {                    listener.onDiscoveryError(errorCode, errorMsg);                } else {                    listener.onDiscoveryStop();                }            }        });    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createConnection", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Connection", "snippet": "    public Connection createConnection(@NonNull String address) {        return createConnection(address, null);    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createConnection", "params": ["BluetoothDevice"], "throws": null, "modifiers": ["public"], "return_type": "Connection", "snippet": "    public Connection createConnection(@NonNull BluetoothDevice device) {        return createConnection(device, null);    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createConnection", "params": ["String", "EventObserver"], "throws": null, "modifiers": ["public"], "return_type": "Connection", "snippet": "    public Connection createConnection(@NonNull String address, EventObserver observer) {        if (checkStatus()) {            Objects.requireNonNull(address, \"address can't be null\");            BluetoothDevice remoteDevice = bluetoothAdapter.getRemoteDevice(address);            if (remoteDevice != null) {                return createConnection(remoteDevice, observer);            }        }        return null;    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createConnection", "params": ["BluetoothDevice", "EventObserver"], "throws": null, "modifiers": ["public"], "return_type": "Connection", "snippet": "    public Connection createConnection(@NonNull BluetoothDevice device, EventObserver observer) {        if (checkStatus()) {            Objects.requireNonNull(device, \"device can't be null\");            Connection connection = connectionMap.remove(device.getAddress());            //\u5982\u679c\u8fde\u63a5\u5df2\u5b58\u5728\uff0c\u5148\u91ca\u653e\u6389            if (connection != null) {                connection.releaseNoEvent();            }            connection = new ConnectionImpl(this, bluetoothAdapter, device, observer);            connectionMap.put(device.getAddress(), connection);            addressList.add(device.getAddress());            return connection;        }        return null;    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getConnections", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Collection<Connection>", "snippet": "    public Collection<Connection> getConnections() {        return connectionMap.values();    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOrderedConnections", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Connection>", "snippet": "    public List<Connection> getOrderedConnections() {        List<Connection> list = new ArrayList<>();        for (String address : addressList) {            Connection connection = connectionMap.get(address);            if (connection != null) {                list.add(connection);            }        }        return list;    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFirstConnection", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Connection", "snippet": "    public Connection getFirstConnection() {        return addressList.isEmpty() ? null : connectionMap.get(addressList.get(0));    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLastConnection", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Connection", "snippet": "    public Connection getLastConnection() {        return addressList.isEmpty() ? null : connectionMap.get(addressList.get(addressList.size() - 1));    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getConnection", "params": ["BluetoothDevice"], "throws": null, "modifiers": ["public"], "return_type": "Connection", "snippet": "    public Connection getConnection(BluetoothDevice device) {        return device == null ? null : connectionMap.get(device.getAddress());    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getConnection", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Connection", "snippet": "    public Connection getConnection(String address) {        return address == null ? null : connectionMap.get(address);    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "disconnectConnection", "params": ["BluetoothDevice"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void disconnectConnection(BluetoothDevice device) {        if (checkStatus() && device != null) {            Connection connection = connectionMap.get(device.getAddress());            if (connection != null) {                connection.disconnect();            }        }    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "disconnectConnection", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void disconnectConnection(String address) {        if (checkStatus() && address != null) {            Connection connection = connectionMap.get(address);            if (connection != null) {                connection.disconnect();            }        }    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "disconnectAllConnections", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void disconnectAllConnections() {        if (checkStatus()) {            for (Connection connection : connectionMap.values()) {                connection.disconnect();            }        }    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "releaseAllConnections", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void releaseAllConnections() {        if (checkStatus()) {            for (Connection connection : connectionMap.values()) {                connection.release();            }            connectionMap.clear();            addressList.clear();        }    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "releaseConnection", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void releaseConnection(String address) {        if (checkStatus() && address != null) {            addressList.remove(address);            Connection connection = connectionMap.remove(address);            if (connection != null) {                connection.release();            }        }    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "releaseConnection", "params": ["BluetoothDevice"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void releaseConnection(BluetoothDevice device) {        if (checkStatus() && device != null) {            addressList.remove(device.getAddress());            Connection connection = connectionMap.remove(device.getAddress());            if (connection != null) {                connection.release();            }        }    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "release", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void release() {        if (broadcastReceiver != null) {            application.unregisterReceiver(broadcastReceiver);            broadcastReceiver = null;        }        isInitialized = false;        if (bluetoothAdapter != null) {            bluetoothAdapter.cancelDiscovery();        }        discoveryListeners.clear();        releaseAllConnections();        if (internalObservable) {            observable.unregisterAll();            posterDispatcher.clearTasks();        }    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "destroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void destroy() {        release();        synchronized (BTManager.class) {            instance = null;        }    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBondState", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getBondState(@NonNull String address) {        checkStatus();        try {            return bluetoothAdapter.getRemoteDevice(address).getBondState();        } catch (Exception e) {            return BluetoothDevice.BOND_NONE;        }    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createBond", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean createBond(@NonNull String address) {        checkStatus();        try {            BluetoothDevice remoteDevice = bluetoothAdapter.getRemoteDevice(address);            return remoteDevice.getBondState() != BluetoothDevice.BOND_NONE || remoteDevice.createBond();        } catch (Exception ignore) {            return false;        }    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clearBondDevices", "params": ["RemoveBondFilter"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clearBondDevices(RemoveBondFilter filter) {        checkStatus();        if (bluetoothAdapter != null) {            Set<BluetoothDevice> devices = bluetoothAdapter.getBondedDevices();            for (BluetoothDevice device : devices) {                if (filter == null || filter.accept(device)) {                    try {                        device.getClass().getMethod(\"removeBond\").invoke(device);                    } catch (Exception ignore) {                    }                }            }        }    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeBond", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeBond(@NonNull String address) {        checkStatus();        try {            BluetoothDevice remoteDevice = bluetoothAdapter.getRemoteDevice(address);            if (remoteDevice.getBondState() != BluetoothDevice.BOND_NONE) {                remoteDevice.getClass().getMethod(\"removeBond\").invoke(remoteDevice);            }        } catch (Exception ignore) {        }    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "BTManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onReceive", "params": ["Context", "Intent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onReceive(Context context, Intent intent) {            String action = intent.getAction();            if (action != null) {                BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);                switch (action) {                    case BluetoothAdapter.ACTION_STATE_CHANGED:                        if (bluetoothAdapter != null) {                            //\u901a\u77e5\u89c2\u5bdf\u8005\u84dd\u7259\u72b6\u6001                            observable.notifyObservers(MethodInfoGenerator.onBluetoothAdapterStateChanged(bluetoothAdapter.getState()));                            if (bluetoothAdapter.getState() == BluetoothAdapter.STATE_OFF) {                                isDiscovering = false;                            }                        }                        break;                    case BluetoothAdapter.ACTION_DISCOVERY_STARTED:                        isDiscovering = true;                        handleDiscoveryCallback(true, null, -120, -1, \"\");                        break;                    case BluetoothAdapter.ACTION_DISCOVERY_FINISHED:                        isDiscovering = false;                        handleDiscoveryCallback(false, null, -120, -1, \"\");                        break;                    case BluetoothDevice.ACTION_FOUND:                        if (device != null) {                            int rssi = -120;                            Bundle extras = intent.getExtras();                            if (extras != null) {                                rssi = extras.getShort(BluetoothDevice.EXTRA_RSSI);                            }                            handleDiscoveryCallback(false, device, rssi, 0, \"\");                        }                        break;                    case BluetoothDevice.ACTION_BOND_STATE_CHANGED:                        if (device != null) {                            int bondState = intent.getIntExtra(BluetoothDevice.EXTRA_BOND_STATE, -1);                            if (bondState == BluetoothDevice.BOND_BONDED ||                                    bondState == BluetoothDevice.BOND_BONDING) {                                Collection<Connection> connections = getConnections();                                for (Connection connection : connections) {                                    if (device.equals(connection.getDevice())) {                                        connection.setState(bondState == BluetoothDevice.BOND_BONDED ?                                                Connection.STATE_PAIRED : Connection.STATE_PAIRING);                                        break;                                    }                                }                            }                                                    }                        break;                }            }        }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "InnerBroadcastReceiver", "extends": "BroadcastReceiver", "implements": null, "modifiers": ["private"]}}, {"method_name": "setExecutorService", "params": ["ExecutorService"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setExecutorService(@NonNull ExecutorService executorService) {            Objects.requireNonNull(executorService, \"executorService can't be null\");            this.executorService = executorService;            return this;        }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setMethodDefaultThreadMode", "params": ["ThreadMode"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setMethodDefaultThreadMode(@NonNull ThreadMode mode) {            Objects.requireNonNull(mode, \"mode can't be null\");            methodDefaultThreadMode = mode;            return this;        }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setObservable", "params": ["Observable"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setObservable(@NonNull Observable observable) {            Objects.requireNonNull(observable, \"observable can't be null\");            this.observable = observable;            return this;        }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setObserveAnnotationRequired", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setObserveAnnotationRequired(boolean observeAnnotationRequired) {            isObserveAnnotationRequired = observeAnnotationRequired;            return this;        }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "build", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BTManager", "snippet": "        public BTManager build() {            synchronized (BTManager.class) {                if (BTManager.instance != null) {                    throw new BTException(\"BTManager instance already exists. It can only be instantiated once.\");                }                BTManager.instance = new BTManager(this);                return BTManager.instance;            }        }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/BTManager.java", "stars": "3", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getId() {    return id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/batch_test/Dept.java", "stars": "15", "class": {"name": "Dept", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setId(Integer id) {    this.id = id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/batch_test/Dept.java", "stars": "15", "class": {"name": "Dept", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getName() {    return name;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/batch_test/Dept.java", "stars": "15", "class": {"name": "Dept", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setName(String name) {    this.name = name;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/batch_test/Dept.java", "stars": "15", "class": {"name": "Dept", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        String pidFile = System.getProperty(\"pid.file\", \"\");        try {            ProcessUtil.mountPIDFile(pidFile);        }catch(Exception e){            LOG.error(\"Fail to store PID file in disk path: [\" + pidFile +\"]\", e);            return;        }        SpringApplication.run(ExecutorApplication.class, args);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/ExecutorApplication.java", "stars": "23", "class": {"name": "ExecutorApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "write", "params": ["int"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void write(int b) throws IOException {        if(null == zipEntry){            this.zipEntry = new ZipEntry(entryName);            this.zipOutputStream.putNextEntry(this.zipEntry);        }        this.zipOutputStream.write(b);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/writer/ZipCollectOutputStream.java", "stars": "23", "class": {"name": "ZipCollectOutputStream", "extends": "OutputStream", "implements": null, "modifiers": ["public"]}}, {"method_name": "close", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void close() throws IOException {        this.zipOutputStream.close();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/writer/ZipCollectOutputStream.java", "stars": "23", "class": {"name": "ZipCollectOutputStream", "extends": "OutputStream", "implements": null, "modifiers": ["public"]}}, {"method_name": "flush", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void flush() throws IOException {        this.zipOutputStream.flush();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/writer/ZipCollectOutputStream.java", "stars": "23", "class": {"name": "ZipCollectOutputStream", "extends": "OutputStream", "implements": null, "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items\t\t\t\t.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.BUILDING_BLOCKS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/MossySettStairsBlock.java", "stars": "2", "class": {"name": "MossySettStairsBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 0));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/MossySettStairsBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "StairsBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "cast", "params": ["Class<?>", "Type", "Object"], "throws": null, "modifiers": ["protected"], "return_type": "Object", "snippet": "    protected Object cast(Class<?> target, Type[] neededGenerics, Object value) {        Set<Object> values = new HashSet<>();        Collection raw = (Collection) value;        for (Object obj : raw) {            values.add(ConfigUtil.smartCast(neededGenerics[0], obj));        }        return values;    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/typeconversions/SetTypeConversion.java", "stars": "3", "class": {"name": "SetTypeConversion", "extends": "TypeConversion", "implements": null, "modifiers": ["public"]}}, {"method_name": "isApplicable", "params": ["Class<?>", "Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isApplicable(Class<?> target, Object value) {        return target.equals(Set.class) && value instanceof Collection;    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/typeconversions/SetTypeConversion.java", "stars": "3", "class": {"name": "SetTypeConversion", "extends": "TypeConversion", "implements": null, "modifiers": ["public"]}}, {"method_name": "getParametersRequired", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getParametersRequired() {        return 1;    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/typeconversions/SetTypeConversion.java", "stars": "3", "class": {"name": "SetTypeConversion", "extends": "TypeConversion", "implements": null, "modifiers": ["public"]}}, {"method_name": "load", "params": ["File"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "NodeBean", "snippet": "  public NodeBean load(final File flowFile) throws Exception {    checkArgument(flowFile != null && flowFile.exists());    checkArgument(flowFile.getName().endsWith(Constants.FLOW_FILE_SUFFIX));    final NodeBean nodeBean = new Yaml().loadAs(new FileInputStream(flowFile), NodeBean.class);    if (nodeBean == null) {      throw new ProjectManagerException(          \"Failed to load flow file \" + flowFile.getName() + \". Node bean is null .\");    }    nodeBean.setName(getFlowName(flowFile));    nodeBean.setType(Constants.FLOW_NODE_TYPE);    return nodeBean;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/NodeBeanLoader.java", "stars": "18", "class": {"name": "NodeBeanLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "validate", "params": ["NodeBean"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean validate(final NodeBean nodeBean) {    final Set<String> nodeNames = new HashSet<>();    for (final NodeBean n : nodeBean.getNodes()) {      if (!nodeNames.add(n.getName())) {        // Duplicate jobs        return false;      }    }    for (final NodeBean n : nodeBean.getNodes()) {      if (n.getDependsOn() != null && !nodeNames.containsAll(n.getDependsOn())) {        // Undefined reference to dependent job        return false;      }    }    return true;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/NodeBeanLoader.java", "stars": "18", "class": {"name": "NodeBeanLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toAzkabanNode", "params": ["NodeBean"], "throws": null, "modifiers": ["public"], "return_type": "AzkabanNode", "snippet": "  public AzkabanNode toAzkabanNode(final NodeBean nodeBean) {    if (nodeBean.getType().equals(Constants.FLOW_NODE_TYPE)) {      return new AzkabanFlow.AzkabanFlowBuilder()          .name(nodeBean.getName())          .props(nodeBean.getProps())          .condition(nodeBean.getCondition())          .dependsOn(nodeBean.getDependsOn())          .nodes(nodeBean.getNodes().stream().map(this::toAzkabanNode).collect(Collectors.toList()))          .flowTrigger(toFlowTrigger(nodeBean.getTrigger()))          .build();    } else {      return new AzkabanJob.AzkabanJobBuilder()          .name(nodeBean.getName())          .props(nodeBean.getProps())          .condition(nodeBean.getCondition())          .type(nodeBean.getType())          .dependsOn(nodeBean.getDependsOn())          .build();    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/NodeBeanLoader.java", "stars": "18", "class": {"name": "NodeBeanLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "validateSchedule", "params": ["FlowTriggerBean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void validateSchedule(final FlowTriggerBean flowTriggerBean) {    final Map<String, String> scheduleMap = flowTriggerBean.getSchedule();    Preconditions.checkNotNull(scheduleMap, \"flow trigger schedule must not be null\");    Preconditions.checkArgument(        scheduleMap.containsKey(FlowTriggerProps.SCHEDULE_TYPE) && scheduleMap.get            (FlowTriggerProps.SCHEDULE_TYPE)            .equals(FlowTriggerProps.CRON_SCHEDULE_TYPE),        \"flow trigger schedule type must be cron\");    Preconditions        .checkArgument(scheduleMap.containsKey(FlowTriggerProps.SCHEDULE_VALUE) && CronExpression                .isValidExpression(scheduleMap.get(FlowTriggerProps.SCHEDULE_VALUE)),            \"flow trigger schedule value must be a valid cron expression\");    final String cronExpression = scheduleMap.get(FlowTriggerProps.SCHEDULE_VALUE).trim();    final String[] cronParts = cronExpression.split(\"\\\\s+\");    Preconditions        .checkArgument(cronParts[0].equals(\"0\"), \"interval of flow trigger schedule has to\"            + \" be larger than 1 min\");    Preconditions.checkArgument(scheduleMap.size() == 2, \"flow trigger schedule must \"        + \"contain type and value only\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/NodeBeanLoader.java", "stars": "18", "class": {"name": "NodeBeanLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "validateFlowTriggerBean", "params": ["FlowTriggerBean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void validateFlowTriggerBean(final FlowTriggerBean flowTriggerBean) {    validateSchedule(flowTriggerBean);    validateTriggerDependencies(flowTriggerBean.getTriggerDependencies());    validateMaxWaitMins(flowTriggerBean);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/NodeBeanLoader.java", "stars": "18", "class": {"name": "NodeBeanLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "validateMaxWaitMins", "params": ["FlowTriggerBean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void validateMaxWaitMins(final FlowTriggerBean flowTriggerBean) {    Preconditions.checkArgument(flowTriggerBean.getTriggerDependencies().isEmpty() ||            flowTriggerBean.getMaxWaitMins() != null,        \"max wait min cannot be null unless no dependency is defined\");    if (flowTriggerBean.getMaxWaitMins() != null) {      Preconditions.checkArgument(flowTriggerBean.getMaxWaitMins() >= Constants          .MIN_FLOW_TRIGGER_WAIT_TIME.toMinutes(), \"max wait min must be at least \" + Constants          .MIN_FLOW_TRIGGER_WAIT_TIME.toMinutes() + \" min(s)\");    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/NodeBeanLoader.java", "stars": "18", "class": {"name": "NodeBeanLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "validateDepNameUniqueness", "params": ["List<TriggerDependencyBean>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void validateDepNameUniqueness(final List<TriggerDependencyBean> dependencies) {    final Set<String> seen = new HashSet<>();    for (final TriggerDependencyBean dep : dependencies) {      // set.add() returns false when there exists duplicate      Preconditions.checkArgument(seen.add(dep.getName()), String.format(\"duplicate dependency\"          + \".name %s found, dependency.name should be unique\", dep.getName()));    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/NodeBeanLoader.java", "stars": "18", "class": {"name": "NodeBeanLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "validateDepDefinitionUniqueness", "params": ["List<TriggerDependencyBean>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void validateDepDefinitionUniqueness(final List<TriggerDependencyBean> dependencies) {    for (int i = 0; i < dependencies.size(); i++) {      for (int j = i + 1; j < dependencies.size(); j++) {        final boolean duplicateDepDefFound =            dependencies.get(i).getType().equals(dependencies.get(j)                .getType()) && dependencies.get(i).getParams()                .equals(dependencies.get(j).getParams());        Preconditions.checkArgument(!duplicateDepDefFound, String.format(\"duplicate dependency\"                + \"config %s found, dependency config should be unique\",            dependencies.get(i).getName()));      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/NodeBeanLoader.java", "stars": "18", "class": {"name": "NodeBeanLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "validateNameAndTypeArePresent", "params": ["List<TriggerDependencyBean>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void validateNameAndTypeArePresent(final List<TriggerDependencyBean> dependencies) {    for (final TriggerDependencyBean dep : dependencies) {      Preconditions.checkNotNull(dep.getName(), \"dependency name is required\");      Preconditions.checkNotNull(dep.getType(), \"dependency type is required for \" + dep.getName());    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/NodeBeanLoader.java", "stars": "18", "class": {"name": "NodeBeanLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "validateTriggerDependencies", "params": ["List<TriggerDependencyBean>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void validateTriggerDependencies(final List<TriggerDependencyBean> dependencies) {    validateNameAndTypeArePresent(dependencies);    validateDepNameUniqueness(dependencies);    validateDepDefinitionUniqueness(dependencies);    validateDepType(dependencies);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/NodeBeanLoader.java", "stars": "18", "class": {"name": "NodeBeanLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "validateDepType", "params": ["List<TriggerDependencyBean>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void validateDepType(final List<TriggerDependencyBean> dependencies) {    //todo chengren311: validate dependencies are of valid dependency type  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/NodeBeanLoader.java", "stars": "18", "class": {"name": "NodeBeanLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toFlowTrigger", "params": ["FlowTriggerBean"], "throws": null, "modifiers": ["public"], "return_type": "FlowTrigger", "snippet": "  public FlowTrigger toFlowTrigger(final FlowTriggerBean flowTriggerBean) {    if (flowTriggerBean == null) {      return null;    } else {      validateFlowTriggerBean(flowTriggerBean);      if (flowTriggerBean.getMaxWaitMins() != null          && flowTriggerBean.getMaxWaitMins() > Constants.DEFAULT_FLOW_TRIGGER_MAX_WAIT_TIME          .toMinutes()) {        flowTriggerBean.setMaxWaitMins(Constants.DEFAULT_FLOW_TRIGGER_MAX_WAIT_TIME.toMinutes());      }      final Duration duration = flowTriggerBean.getMaxWaitMins() == null ? null : Duration          .ofMinutes(flowTriggerBean.getMaxWaitMins());      return new FlowTrigger(          new CronSchedule(flowTriggerBean.getSchedule().get(FlowTriggerProps.SCHEDULE_VALUE)),          flowTriggerBean.getTriggerDependencies().stream()              .map(d -> new FlowTriggerDependency(d.getName(), d.getType(), d.getParams()))              .collect(Collectors.toList()), duration);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/NodeBeanLoader.java", "stars": "18", "class": {"name": "NodeBeanLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFlowName", "params": ["File"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getFlowName(final File flowFile) {    checkArgument(flowFile != null && flowFile.exists());    checkArgument(flowFile.getName().endsWith(Constants.FLOW_FILE_SUFFIX));    return Files.getNameWithoutExtension(flowFile.getName());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/NodeBeanLoader.java", "stars": "18", "class": {"name": "NodeBeanLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_start_screen);        //This is additional feature, used to run a progress bar        splashProgress = findViewById(R.id.pbar);        playProgress();        //Code to start timer and take action after the timer ends        new Handler().postDelayed(new Runnable() {            @Override            public void run() {                //Do any action here. Now we are moving to next page                Intent mySuperIntent = new Intent(StartScreen.this, MainActivity.class);                startActivity(mySuperIntent);                //This 'finish()' is for exiting the app when back button pressed from Home page which is ActivityHome                finish();            }        }, SPLASH_TIME);    }", "url": "https://raw.githubusercontent.com/zhackerx/upi_payment/master/app/src/main/java/com/millionq/upi_payment/StartScreen.java", "stars": "1", "class": {"name": "StartScreen", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "playProgress", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void playProgress() {        ObjectAnimator.ofInt(splashProgress, \"progress\", 100)                .setDuration(5000)                .start();    }", "url": "https://raw.githubusercontent.com/zhackerx/upi_payment/master/app/src/main/java/com/millionq/upi_payment/StartScreen.java", "stars": "1", "class": {"name": "StartScreen", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPlayer", "params": ["PlayerEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPlayer(PlayerEvent event) {        switch (event.getType()) {            case ENTERING:                if (mc.world != null && mc.player != null && !mc.player.isDead && event.getEntity() instanceof EntityPlayer && !event.getEntity().getName().equalsIgnoreCase(mc.player.getName())) {                    final Friend friend = Mercury.INSTANCE.getFriendManager().getFriend(event.getEntity().getName());                    final String msg = (friend != null ? ChatFormatting.DARK_PURPLE : ChatFormatting.RED) + (friend != null ? friend.getAlias() : event.getEntity().getName()) + ChatFormatting.WHITE + \" has entered your visual range.\";                        ChatUtil.print(msg);                    if (sendEnterMessage) {                        if (enterMessage.contains(\"%s\")) {                            mc.player.sendChatMessage(String.format(enterMessage, event.getEntity().getName()));                        } else {                            mc.player.sendChatMessage(enterMessage);                        }                    }                    if (sound) {                        AudioPlayer player = new AudioPlayer(new ResourceLocation(\"assets\\\\mercury\", \"enter.wav\"));                        player.play();                        player.stop();                        player.close();                    }                    if (event.getEntity().getEntityId() == this.prevPlayer) {                        this.prevPlayer = -1;                    }                }                break;            case EXITING:                if (mc.world != null && mc.player != null && !mc.player.isDead && event.getEntity() instanceof EntityPlayer && !event.getEntity().getName().equalsIgnoreCase(mc.player.getName())) {                    if (this.prevPlayer != event.getEntity().getEntityId()) {                        this.prevPlayer = event.getEntity().getEntityId();                        final Friend friend = Mercury.INSTANCE.getFriendManager().getFriend(event.getEntity().getName());                        final String msg = (friend != null ? ChatFormatting.DARK_PURPLE : ChatFormatting.RED) + (friend != null ? friend.getAlias() : event.getEntity().getName()) + ChatFormatting.WHITE + \" has left your visual range.\";                        ChatUtil.print(msg);                        if (sendExitMessage) {                            if (exitMessage.contains(\"%s\")) {                                mc.player.sendChatMessage(String.format(exitMessage, event.getEntity().getName()));                            } else {                                mc.player.sendChatMessage(exitMessage);                            }                        }                        if (sound) {                            AudioPlayer player = new AudioPlayer(new ResourceLocation(\"assets\\\\trident\", \"exit.wav\"));                            player.play();                            player.stop();                            player.close();                        }                    }                    break;                }        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/visual/VisualRange.java", "stars": "12", "class": {"name": "VisualRange", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "buildAccessTokenKey", "params": ["User"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String buildAccessTokenKey(User user) {        return ACCESS_TOKEN_CACHE_PREFIX + user.getId();    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/util/SecurityUtil.java", "stars": "1", "class": {"name": "SecurityUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buildRefreshTokenKey", "params": ["User"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String buildRefreshTokenKey(User user) {        return REFRESH_TOKEN_CACHE_PREFIX + user.getId();    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/util/SecurityUtil.java", "stars": "1", "class": {"name": "SecurityUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buildTokenAccessKey", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String buildTokenAccessKey(String token) {        return TOKEN_ACCESS_CACHE_PREFIX + token;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/util/SecurityUtil.java", "stars": "1", "class": {"name": "SecurityUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buildTokenRefreshKey", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String buildTokenRefreshKey(String token) {        return TOKEN_REFRESH_CACHE_PREFIX + token;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/util/SecurityUtil.java", "stars": "1", "class": {"name": "SecurityUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "printUpperCaseString", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void printUpperCaseString(String str){        System.out.println(str.toUpperCase());    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/24.%E3%80%90Stream%E6%B5%81%E3%80%81%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%E3%80%91%E7%AC%94%E8%AE%B0/code/13_StreamAndMethodReference/src/com/itheima/demo05/ObjectMethodReference/MethodRerObject(1).java", "stars": "2", "class": {"name": "MethodRerObject", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProperty", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getProperty() {    return property;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/ResultMapping.java", "stars": "15", "class": {"name": "ResultMapping", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getColumn", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getColumn() {    return column;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/ResultMapping.java", "stars": "15", "class": {"name": "ResultMapping", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getJavaType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Class<?>", "snippet": "  public Class<?> getJavaType() {    return javaType;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/ResultMapping.java", "stars": "15", "class": {"name": "ResultMapping", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getJdbcType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "JdbcType", "snippet": "  public JdbcType getJdbcType() {    return jdbcType;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/ResultMapping.java", "stars": "15", "class": {"name": "ResultMapping", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTypeHandler", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TypeHandler<?>", "snippet": "  public TypeHandler<?> getTypeHandler() {    return typeHandler;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/ResultMapping.java", "stars": "15", "class": {"name": "ResultMapping", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNestedResultMapId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getNestedResultMapId() {    return nestedResultMapId;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/ResultMapping.java", "stars": "15", "class": {"name": "ResultMapping", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNestedQueryId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getNestedQueryId() {    return nestedQueryId;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/ResultMapping.java", "stars": "15", "class": {"name": "ResultMapping", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNotNullColumns", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Set<String>", "snippet": "  public Set<String> getNotNullColumns() {    return notNullColumns;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/ResultMapping.java", "stars": "15", "class": {"name": "ResultMapping", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getColumnPrefix", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getColumnPrefix() {    return columnPrefix;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/ResultMapping.java", "stars": "15", "class": {"name": "ResultMapping", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFlags", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<ResultFlag>", "snippet": "  public List<ResultFlag> getFlags() {    return flags;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/ResultMapping.java", "stars": "15", "class": {"name": "ResultMapping", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getComposites", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<ResultMapping>", "snippet": "  public List<ResultMapping> getComposites() {    return composites;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/ResultMapping.java", "stars": "15", "class": {"name": "ResultMapping", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isCompositeResult", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isCompositeResult() {    return this.composites != null && !this.composites.isEmpty();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/ResultMapping.java", "stars": "15", "class": {"name": "ResultMapping", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getResultSet", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getResultSet() {    return this.resultSet;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/ResultMapping.java", "stars": "15", "class": {"name": "ResultMapping", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getForeignColumn", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getForeignColumn() {    return foreignColumn;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/ResultMapping.java", "stars": "15", "class": {"name": "ResultMapping", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setForeignColumn", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setForeignColumn(String foreignColumn) {    this.foreignColumn = foreignColumn;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/ResultMapping.java", "stars": "15", "class": {"name": "ResultMapping", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isLazy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isLazy() {    return lazy;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/ResultMapping.java", "stars": "15", "class": {"name": "ResultMapping", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLazy", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setLazy(boolean lazy) {    this.lazy = lazy;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/ResultMapping.java", "stars": "15", "class": {"name": "ResultMapping", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean equals(Object o) {    if (this == o) {      return true;    }    if (o == null || getClass() != o.getClass()) {      return false;    }    ResultMapping that = (ResultMapping) o;    return property != null && property.equals(that.property);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/ResultMapping.java", "stars": "15", "class": {"name": "ResultMapping", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int hashCode() {    if (property != null) {      return property.hashCode();    } else if (column != null) {      return column.hashCode();    } else {      return 0;    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/ResultMapping.java", "stars": "15", "class": {"name": "ResultMapping", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    final StringBuilder sb = new StringBuilder(\"ResultMapping{\");    //sb.append(\"configuration=\").append(configuration); // configuration doesn't have a useful .toString()    sb.append(\"property='\").append(property).append('\\'');    sb.append(\", column='\").append(column).append('\\'');    sb.append(\", javaType=\").append(javaType);    sb.append(\", jdbcType=\").append(jdbcType);    //sb.append(\", typeHandler=\").append(typeHandler); // typeHandler also doesn't have a useful .toString()    sb.append(\", nestedResultMapId='\").append(nestedResultMapId).append('\\'');    sb.append(\", nestedQueryId='\").append(nestedQueryId).append('\\'');    sb.append(\", notNullColumns=\").append(notNullColumns);    sb.append(\", columnPrefix='\").append(columnPrefix).append('\\'');    sb.append(\", flags=\").append(flags);    sb.append(\", composites=\").append(composites);    sb.append(\", resultSet='\").append(resultSet).append('\\'');    sb.append(\", foreignColumn='\").append(foreignColumn).append('\\'');    sb.append(\", lazy=\").append(lazy);    sb.append('}');    return sb.toString();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/ResultMapping.java", "stars": "15", "class": {"name": "ResultMapping", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "javaType", "params": ["Class<?>"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder javaType(Class<?> javaType) {      resultMapping.javaType = javaType;      return this;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/ResultMapping.java", "stars": "15", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "jdbcType", "params": ["JdbcType"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder jdbcType(JdbcType jdbcType) {      resultMapping.jdbcType = jdbcType;      return this;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/ResultMapping.java", "stars": "15", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "nestedResultMapId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder nestedResultMapId(String nestedResultMapId) {      resultMapping.nestedResultMapId = nestedResultMapId;      return this;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/ResultMapping.java", "stars": "15", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "nestedQueryId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder nestedQueryId(String nestedQueryId) {      resultMapping.nestedQueryId = nestedQueryId;      return this;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/ResultMapping.java", "stars": "15", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "resultSet", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder resultSet(String resultSet) {      resultMapping.resultSet = resultSet;      return this;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/ResultMapping.java", "stars": "15", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "foreignColumn", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder foreignColumn(String foreignColumn) {      resultMapping.foreignColumn = foreignColumn;      return this;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/ResultMapping.java", "stars": "15", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "notNullColumns", "params": ["Set<String>"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder notNullColumns(Set<String> notNullColumns) {      resultMapping.notNullColumns = notNullColumns;      return this;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/ResultMapping.java", "stars": "15", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "columnPrefix", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder columnPrefix(String columnPrefix) {      resultMapping.columnPrefix = columnPrefix;      return this;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/ResultMapping.java", "stars": "15", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "flags", "params": ["List<ResultFlag>"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder flags(List<ResultFlag> flags) {      resultMapping.flags = flags;      return this;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/ResultMapping.java", "stars": "15", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "typeHandler", "params": ["TypeHandler<?>"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder typeHandler(TypeHandler<?> typeHandler) {      resultMapping.typeHandler = typeHandler;      return this;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/ResultMapping.java", "stars": "15", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "composites", "params": ["List<ResultMapping>"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder composites(List<ResultMapping> composites) {      resultMapping.composites = composites;      return this;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/ResultMapping.java", "stars": "15", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "lazy", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder lazy(boolean lazy) {      resultMapping.lazy = lazy;      return this;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/ResultMapping.java", "stars": "15", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "build", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ResultMapping", "snippet": "    public ResultMapping build() {      // lock down collections      resultMapping.flags = Collections.unmodifiableList(resultMapping.flags);      resultMapping.composites = Collections.unmodifiableList(resultMapping.composites);      resolveTypeHandler();      validate();      return resultMapping;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/ResultMapping.java", "stars": "15", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "validate", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void validate() {      // Issue #697: cannot define both nestedQueryId and nestedResultMapId      if (resultMapping.nestedQueryId != null && resultMapping.nestedResultMapId != null) {        throw new IllegalStateException(\"Cannot define both nestedQueryId and nestedResultMapId in property \" + resultMapping.property);      }      // Issue #5: there should be no mappings without typehandler      if (resultMapping.nestedQueryId == null && resultMapping.nestedResultMapId == null && resultMapping.typeHandler == null) {        throw new IllegalStateException(\"No typehandler found for property \" + resultMapping.property);      }      // Issue #4 and GH #39: column is optional only in nested resultmaps but not in the rest      if (resultMapping.nestedResultMapId == null && resultMapping.column == null && resultMapping.composites.isEmpty()) {        throw new IllegalStateException(\"Mapping is missing column attribute for property \" + resultMapping.property);      }      if (resultMapping.getResultSet() != null) {        int numColumns = 0;        if (resultMapping.column != null) {          numColumns = resultMapping.column.split(\",\").length;        }        int numForeignColumns = 0;        if (resultMapping.foreignColumn != null) {          numForeignColumns = resultMapping.foreignColumn.split(\",\").length;        }        if (numColumns != numForeignColumns) {          throw new IllegalStateException(\"There should be the same number of columns and foreignColumns in property \" + resultMapping.property);        }      }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/ResultMapping.java", "stars": "15", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "resolveTypeHandler", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveTypeHandler() {      if (resultMapping.typeHandler == null && resultMapping.javaType != null) {        Configuration configuration = resultMapping.configuration;        TypeHandlerRegistry typeHandlerRegistry = configuration.getTypeHandlerRegistry();        resultMapping.typeHandler = typeHandlerRegistry.getTypeHandler(resultMapping.javaType, resultMapping.jdbcType);      }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/ResultMapping.java", "stars": "15", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "column", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder column(String column) {      resultMapping.column = column;      return this;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/ResultMapping.java", "stars": "15", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "executeProcedure", "params": ["java"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void executeProcedure(java.util.HashMap<String, Object> dependencies) {\t\tif (dependencies.get(\"x\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency x for procedure CustomFlowerPotBlockDestroyedByExplosionBlockDestroyedByPlayer!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"y\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency y for procedure CustomFlowerPotBlockDestroyedByExplosionBlockDestroyedByPlayer!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"z\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency z for procedure CustomFlowerPotBlockDestroyedByExplosionBlockDestroyedByPlayer!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"world\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency world for procedure CustomFlowerPotBlockDestroyedByExplosionBlockDestroyedByPlayer!\");\t\t\treturn;\t\t}\t\tint x = (int) dependencies.get(\"x\");\t\tint y = (int) dependencies.get(\"y\");\t\tint z = (int) dependencies.get(\"z\");\t\tWorld world = (World) dependencies.get(\"world\");\t\tif (!world.isRemote) {\t\t\tItemEntity entityToSpawn = new ItemEntity(world, x, y, z, new ItemStack(LavenderBlock.block, (int) (1)));\t\t\tentityToSpawn.setPickupDelay(10);\t\t\tworld.addEntity(entityToSpawn);\t\t}\t\tif (!world.isRemote) {\t\t\tItemEntity entityToSpawn = new ItemEntity(world, x, y, z, new ItemStack(Items.FLOWER_POT, (int) (1)));\t\t\tentityToSpawn.setPickupDelay(10);\t\t\tworld.addEntity(entityToSpawn);\t\t}\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/procedures/CustomFlowerPotBlockDestroyedByExplosionBlockDestroyedByPlayerProcedure.java", "stars": "2", "class": {"name": "CustomFlowerPotBlockDestroyedByExplosionBlockDestroyedByPlayerProcedure", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "write", "params": ["ChannelHandlerContext", "Object", "ChannelPromise"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {    ctx.write(msg, promise.addListener((ChannelFutureListener) future -> {      if (!future.isSuccess()) {        logger.error(\"send data to client exception occur: \", future.cause());      }    }));  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/ExceptionHandler.java", "stars": "3", "class": {"name": "ExceptionHandler", "extends": "ChannelDuplexHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //\u7ebf\u7a0b\u7684\u7236\u7c7b\u662fThread        // new MyThread().start();        new Thread(){            //\u91cd\u5199run\u65b9\u6cd5,\u8bbe\u7f6e\u7ebf\u7a0b\u4efb\u52a1            @Override            public void run() {                for (int i = 0; i <20 ; i++) {                    System.out.println(Thread.currentThread().getName()+\"-->\"+\"\u9ed1\u9a6c\");                }            }        }.start();        //\u7ebf\u7a0b\u7684\u63a5\u53e3Runnable        //Runnable r = new RunnableImpl();//\u591a\u6001        Runnable r = new Runnable(){            //\u91cd\u5199run\u65b9\u6cd5,\u8bbe\u7f6e\u7ebf\u7a0b\u4efb\u52a1            @Override            public void run() {                for (int i = 0; i <20 ; i++) {                    System.out.println(Thread.currentThread().getName()+\"-->\"+\"\u7a0b\u5e8f\u5458\");                }            }        };        new Thread(r).start();        //\u7b80\u5316\u63a5\u53e3\u7684\u65b9\u5f0f        new Thread(new Runnable(){            //\u91cd\u5199run\u65b9\u6cd5,\u8bbe\u7f6e\u7ebf\u7a0b\u4efb\u52a1            @Override            public void run() {                for (int i = 0; i <20 ; i++) {                    System.out.println(Thread.currentThread().getName()+\"-->\"+\"\u4f20\u667a\u64ad\u5ba2\");                }            }        }).start();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/17.%E3%80%90%E7%BA%BF%E7%A8%8B%E3%80%81%E5%90%8C%E6%AD%A5%E3%80%91-%E7%AC%94%E8%AE%B0/code/06_Thread/src/com/itheima/demo05/InnerClassThread/Demo01InnerClassThread.java", "stars": "2", "class": {"name": "Demo01InnerClassThread", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldSetParameter", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldSetParameter() throws Exception {    TYPE_HANDLER.setParameter(ps, 1, INSTANT, null);    verify(ps).setTimestamp(1, TIMESTAMP);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/InstantTypeHandlerTest.java", "stars": "15", "class": {"name": "InstantTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByName() throws Exception {    when(rs.getTimestamp(\"column\")).thenReturn(TIMESTAMP);    assertEquals(INSTANT, TYPE_HANDLER.getResult(rs, \"column\"));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/InstantTypeHandlerTest.java", "stars": "15", "class": {"name": "InstantTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByName() throws Exception {    when(rs.getTimestamp(\"column\")).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(rs, \"column\"));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/InstantTypeHandlerTest.java", "stars": "15", "class": {"name": "InstantTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByPosition() throws Exception {    when(rs.getTimestamp(1)).thenReturn(TIMESTAMP);    assertEquals(INSTANT, TYPE_HANDLER.getResult(rs, 1));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/InstantTypeHandlerTest.java", "stars": "15", "class": {"name": "InstantTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByPosition() throws Exception {    when(rs.getTimestamp(1)).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(rs, 1));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/InstantTypeHandlerTest.java", "stars": "15", "class": {"name": "InstantTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromCallableStatement() throws Exception {    when(cs.getTimestamp(1)).thenReturn(TIMESTAMP);    assertEquals(INSTANT, TYPE_HANDLER.getResult(cs, 1));    verify(cs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/InstantTypeHandlerTest.java", "stars": "15", "class": {"name": "InstantTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromCallableStatement() throws Exception {    when(cs.getTimestamp(1)).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(cs, 1));    verify(cs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/InstantTypeHandlerTest.java", "stars": "15", "class": {"name": "InstantTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "getProductId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getProductId() {\t\treturn productId;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductSpecs.java", "stars": "1", "class": {"name": "ProductSpecs", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setProductId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setProductId(String productId) {\t\tthis.productId = productId;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductSpecs.java", "stars": "1", "class": {"name": "ProductSpecs", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getName() {\t\treturn name;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductSpecs.java", "stars": "1", "class": {"name": "ProductSpecs", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setName(String name) {\t\tthis.name = name;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductSpecs.java", "stars": "1", "class": {"name": "ProductSpecs", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getQuantityValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "\tpublic float getQuantityValue() {\t\treturn quantityValue;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductSpecs.java", "stars": "1", "class": {"name": "ProductSpecs", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setQuantityValue", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setQuantityValue(float quantityValue) {\t\tthis.quantityValue = quantityValue;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductSpecs.java", "stars": "1", "class": {"name": "ProductSpecs", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getQuantityUnit", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getQuantityUnit() {\t\treturn quantityUnit;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductSpecs.java", "stars": "1", "class": {"name": "ProductSpecs", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setQuantityUnit", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setQuantityUnit(String quantityUnit) {\t\tthis.quantityUnit = quantityUnit;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductSpecs.java", "stars": "1", "class": {"name": "ProductSpecs", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPricePerUnit", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "\tpublic double getPricePerUnit() {\t\treturn pricePerUnit;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductSpecs.java", "stars": "1", "class": {"name": "ProductSpecs", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPricePerUnit", "params": ["double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setPricePerUnit(double pricePerUnit) {\t\tthis.pricePerUnit = pricePerUnit;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductSpecs.java", "stars": "1", "class": {"name": "ProductSpecs", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\treturn \"ProductSpecs [productId=\" + productId + \", name=\" + name + \", quantityValue=\" + quantityValue\t\t\t\t+ \", quantityUnit=\" + quantityUnit + \", pricePerUnit=\" + pricePerUnit + \"]\";\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/entity/ProductSpecs.java", "stars": "1", "class": {"name": "ProductSpecs", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "ofDefault", "params": ["AbstractInsnNode", "TypeChecker", "Type"], "throws": null, "modifiers": ["public", "static"], "return_type": "AbstractValue", "snippet": "\tpublic static AbstractValue ofDefault(AbstractInsnNode insn, TypeChecker typeChecker, Type type) {\t\tif (type == null)\t\t\treturn UninitializedValue.UNINITIALIZED_VALUE;\t\tswitch(type.getSort()) {\t\t\tcase Type.VOID:\t\t\t\treturn null;\t\t\tcase Type.BOOLEAN:\t\t\tcase Type.CHAR:\t\t\tcase Type.BYTE:\t\t\tcase Type.SHORT:\t\t\tcase Type.INT:\t\t\t\treturn PrimitiveValue.ofInt(insn, 0);\t\t\tcase Type.FLOAT:\t\t\t\treturn PrimitiveValue.ofFloat(insn, 0F);\t\t\tcase Type.LONG:\t\t\t\treturn PrimitiveValue.ofLong(insn, 0L);\t\t\tcase Type.DOUBLE:\t\t\t\treturn PrimitiveValue.ofDouble(insn, 0D);\t\t\tcase Type.ARRAY:\t\t\tcase Type.OBJECT:\t\t\t\tif (type.equals(NullConstantValue.NULL_VALUE_TYPE))\t\t\t\t\treturn NullConstantValue.newNull(insn);\t\t\t\treturn new VirtualValue(insn, type, null, typeChecker);\t\t\tdefault:\t\t\t\tthrow new IllegalStateException(\"Unsupported type: \" + type);\t\t}\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/AbstractValue.java", "stars": "12", "class": {"name": "AbstractValue", "extends": null, "implements": ["Value"], "modifiers": ["public", "abstract"]}}, {"method_name": "copy", "params": ["AbstractInsnNode"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "AbstractValue", "snippet": "\tpublic abstract AbstractValue copy(AbstractInsnNode insn);\t/**\t * @param other\t * \t\tAnother frame.\t *\t * @return {@code true}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/AbstractValue.java", "stars": "12", "class": {"name": "AbstractValue", "extends": null, "implements": ["Value"], "modifiers": ["public", "abstract"]}}, {"method_name": "canMerge", "params": ["AbstractValue"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "boolean", "snippet": "\tpublic abstract boolean canMerge(AbstractValue other);\t/**\t * @return {@code true}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/AbstractValue.java", "stars": "12", "class": {"name": "AbstractValue", "extends": null, "implements": ["Value"], "modifiers": ["public", "abstract"]}}, {"method_name": "isPrimitive", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "boolean", "snippet": "\tpublic abstract boolean isPrimitive();\t/**\t * @return {@code true}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/AbstractValue.java", "stars": "12", "class": {"name": "AbstractValue", "extends": null, "implements": ["Value"], "modifiers": ["public", "abstract"]}}, {"method_name": "isReference", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "boolean", "snippet": "\tpublic abstract boolean isReference();\t/**\t * @return {@code true}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/AbstractValue.java", "stars": "12", "class": {"name": "AbstractValue", "extends": null, "implements": ["Value"], "modifiers": ["public", "abstract"]}}, {"method_name": "isValueResolved", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "boolean", "snippet": "\tpublic abstract boolean isValueResolved();\t/**\t * @return {@code true}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/AbstractValue.java", "stars": "12", "class": {"name": "AbstractValue", "extends": null, "implements": ["Value"], "modifiers": ["public", "abstract"]}}, {"method_name": "isValueUnresolved", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean isValueUnresolved() {\t\treturn !isValueResolved();\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/AbstractValue.java", "stars": "12", "class": {"name": "AbstractValue", "extends": null, "implements": ["Value"], "modifiers": ["public", "abstract"]}}, {"method_name": "isNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean isNull() {\t\treturn value == null;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/AbstractValue.java", "stars": "12", "class": {"name": "AbstractValue", "extends": null, "implements": ["Value"], "modifiers": ["public", "abstract"]}}, {"method_name": "isArray", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean isArray() {\t\treturn type != null && type.getSort() == Type.ARRAY;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/AbstractValue.java", "stars": "12", "class": {"name": "AbstractValue", "extends": null, "implements": ["Value"], "modifiers": ["public", "abstract"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "\tpublic Object getValue() {\t\treturn value;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/AbstractValue.java", "stars": "12", "class": {"name": "AbstractValue", "extends": null, "implements": ["Value"], "modifiers": ["public", "abstract"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Type", "snippet": "\tpublic Type getType() {\t\treturn type;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/AbstractValue.java", "stars": "12", "class": {"name": "AbstractValue", "extends": null, "implements": ["Value"], "modifiers": ["public", "abstract"]}}, {"method_name": "getInsns", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<AbstractInsnNode>", "snippet": "\tpublic List<AbstractInsnNode> getInsns() {\t\treturn insns;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/AbstractValue.java", "stars": "12", "class": {"name": "AbstractValue", "extends": null, "implements": ["Value"], "modifiers": ["public", "abstract"]}}, {"method_name": "getSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getSize() {\t\tif (type == null)\t\t\treturn 1;\t\treturn TypeUtil.sortToSize(type.getSort());\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/AbstractValue.java", "stars": "12", "class": {"name": "AbstractValue", "extends": null, "implements": ["Value"], "modifiers": ["public", "abstract"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int hashCode() {\t\tif (type == null)\t\t\treturn 0;\t\tif (value == null)\t\t\treturn type.hashCode();\t\treturn Objects.hash(type.getDescriptor(), value);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/AbstractValue.java", "stars": "12", "class": {"name": "AbstractValue", "extends": null, "implements": ["Value"], "modifiers": ["public", "abstract"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "boolean", "snippet": "\tpublic abstract boolean equals(Object other);\t@Override\tpublic String toString() {\t\tif (this == UninitializedValue.UNINITIALIZED_VALUE)\t\t\treturn \"<UNINITIALIZED>\";\t\telse if (this instanceof NullConstantValue)\t\t\treturn \"<NULL>\";\t\telse if (this instanceof ReturnAddressValue)\t\t\treturn \"<JSR_RET>\";\t\telse if (isNull())\t\t\treturn \"<NULL:\" + type + \">\";\t\telse\t\t\treturn \"<\" + type + \":\" + value + \">\";\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/AbstractValue.java", "stars": "12", "class": {"name": "AbstractValue", "extends": null, "implements": ["Value"], "modifiers": ["public", "abstract"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\tif (this == UninitializedValue.UNINITIALIZED_VALUE)\t\t\treturn \"<UNINITIALIZED>\";\t\telse if (this instanceof NullConstantValue)\t\t\treturn \"<NULL>\";\t\telse if (this instanceof ReturnAddressValue)\t\t\treturn \"<JSR_RET>\";\t\telse if (isNull())\t\t\treturn \"<NULL:\" + type + \">\";\t\telse\t\t\treturn \"<\" + type + \":\" + value + \">\";\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/value/AbstractValue.java", "stars": "12", "class": {"name": "AbstractValue", "extends": null, "implements": ["Value"], "modifiers": ["public", "abstract"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        // \u4f7f\u7528 Paint.measureText \u6d4b\u91cf\u51fa\u6587\u5b57\u5bbd\u5ea6\uff0c\u8ba9\u6587\u5b57\u53ef\u4ee5\u76f8\u90bb\u7ed8\u5236        canvas.drawText(text1, 50, 200, paint1);        float text1Width = paint1.measureText(text1);        canvas.drawText(text2, 50 + text1Width, 200, paint2);        float text2Width = paint2.measureText(text2);        canvas.drawText(text3, 50 + text1Width + text2Width, 200, paint1);    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson3/Practice12MeasureTextView.java", "stars": "2", "class": {"name": "Practice12MeasureTextView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "getHost", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getHost() {\t\treturn this.host;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-property-validation/src/main/java/smoketest/propertyvalidation/SampleProperties.java", "stars": "47572", "class": {"name": "SampleProperties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setHost", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setHost(String host) {\t\tthis.host = host;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-property-validation/src/main/java/smoketest/propertyvalidation/SampleProperties.java", "stars": "47572", "class": {"name": "SampleProperties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPort", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "\tpublic Integer getPort() {\t\treturn this.port;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-property-validation/src/main/java/smoketest/propertyvalidation/SampleProperties.java", "stars": "47572", "class": {"name": "SampleProperties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPort", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setPort(Integer port) {\t\tthis.port = port;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-property-validation/src/main/java/smoketest/propertyvalidation/SampleProperties.java", "stars": "47572", "class": {"name": "SampleProperties", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initCapabilities", "params": ["ItemStack", "NBTTagCompound"], "throws": null, "modifiers": ["public"], "return_type": "ICapabilityProvider", "snippet": "    public ICapabilityProvider initCapabilities(ItemStack stack, @Nullable NBTTagCompound nbt) {        return new defaultCapabilities(new ItemStackHandler(3), 1000, 10);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Base/Item/PhaseToolGenXPBase.java", "stars": "2", "class": {"name": "PhaseToolGenXPBase", "extends": "PhaseItemBase", "implements": ["IPhaseToolGenXPlus"], "modifiers": ["public", "abstract"]}}, {"method_name": "hasCapability", "params": ["Capability<?>", "EnumFacing"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean hasCapability(@Nonnull Capability<?> capability, @Nullable EnumFacing facing) {            return capability == CapabilityItemHandler.ITEM_HANDLER_CAPABILITY || capability == CapabilityEnergy.ENERGY;        }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Base/Item/PhaseToolGenXPBase.java", "stars": "2", "class": {"name": "defaultCapabilities", "extends": null, "implements": ["ICapabilitySerializable"], "modifiers": ["protected"]}}, {"method_name": "getCapability", "params": ["Capability<T>", "EnumFacing"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "        public <T> T getCapability(@Nonnull Capability<T> capability, @Nullable EnumFacing facing) {            if (capability == CapabilityItemHandler.ITEM_HANDLER_CAPABILITY)                return CapabilityItemHandler.ITEM_HANDLER_CAPABILITY.cast(invHandler);            else if (capability == CapabilityEnergy.ENERGY)                return CapabilityEnergy.ENERGY.cast(energyHandler);            return null;        }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Base/Item/PhaseToolGenXPBase.java", "stars": "2", "class": {"name": "defaultCapabilities", "extends": null, "implements": ["ICapabilitySerializable"], "modifiers": ["protected"]}}, {"method_name": "serializeNBT", "params": [], "throws": null, "modifiers": ["public"], "return_type": "NBTTagCompound", "snippet": "        public NBTTagCompound serializeNBT() {            NBTTagCompound tag = new NBTTagCompound();            tag.setTag(TAG_ITEMS, CapabilityItemHandler.ITEM_HANDLER_CAPABILITY.writeNBT(invHandler, null));            tag.setTag(TAG_ENERGY, CapabilityEnergy.ENERGY.writeNBT(energyHandler, null));            return tag;        }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Base/Item/PhaseToolGenXPBase.java", "stars": "2", "class": {"name": "defaultCapabilities", "extends": null, "implements": ["ICapabilitySerializable"], "modifiers": ["protected"]}}, {"method_name": "deserializeNBT", "params": ["NBTTagCompound"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void deserializeNBT(NBTTagCompound nbt) {            if (nbt != null) {                CapabilityItemHandler.ITEM_HANDLER_CAPABILITY.readNBT(invHandler, null, nbt.getCompoundTag(TAG_ITEMS));                CapabilityEnergy.ENERGY.readNBT(energyHandler, null, nbt.getCompoundTag(TAG_ENERGY));            }        }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Base/Item/PhaseToolGenXPBase.java", "stars": "2", "class": {"name": "defaultCapabilities", "extends": null, "implements": ["ICapabilitySerializable"], "modifiers": ["protected"]}}, {"method_name": "onTouchEvent", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onTouchEvent (android.view.MotionEvent p0)\t{\t\treturn n_onTouchEvent (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PickerEditText.java", "stars": "2", "class": {"name": "PickerEditText", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onTouchEvent", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onTouchEvent (android.view.MotionEvent p0);\tpublic void onFocusChanged (boolean p0, int p1, android.graphics.Rect p2)\t{\t\tn_onFocusChanged (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PickerEditText.java", "stars": "2", "class": {"name": "PickerEditText", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onFocusChanged", "params": ["boolean", "int", "android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onFocusChanged (boolean p0, int p1, android.graphics.Rect p2)\t{\t\tn_onFocusChanged (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PickerEditText.java", "stars": "2", "class": {"name": "PickerEditText", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onFocusChanged", "params": ["boolean", "int", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onFocusChanged (boolean p0, int p1, android.graphics.Rect p2);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PickerEditText.java", "stars": "2", "class": {"name": "PickerEditText", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PickerEditText.java", "stars": "2", "class": {"name": "PickerEditText", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PickerEditText.java", "stars": "2", "class": {"name": "PickerEditText", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "convertStringToList", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String[] convertStringToList(String string) {        String[] receiversList = string.split(USERNAMES_SEPARATOR);        for (int i = 0; i < receiversList.length; i++) {            receiversList[i] = receiversList[i].substring(receiversList[i].indexOf(\"<\") + 1,                    receiversList[i].lastIndexOf(\">\"));        }        return receiversList;    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/ServerMessageParser.java", "stars": "2", "class": {"name": "ServerMessageParser", "extends": null, "implements": ["Parser"], "modifiers": ["public"]}}, {"method_name": "parse", "params": ["String"], "throws": ["MessageIsNotValid", "MessageTypeIsNotValid", "MessageLengthDoesNotExists", "MessageIsTooLong", "ReceiverDoesNotExists"], "modifiers": ["public"], "return_type": "Message", "snippet": "    public Message parse(String message) throws MessageIsNotValid, MessageTypeIsNotValid,            MessageLengthDoesNotExists,            MessageIsTooLong, ReceiverDoesNotExists {        if (message.equals(GET_USERS_LIST))            return new Message(userName, new String[]{\"Server\"}, message, message.length(),                    MessageTypes.COMMAND);        if (message.equals(SIGN_OUT))            return new Message(userName, new String[]{\"Server\"}, message, message.length(),                    MessageTypes.COMMAND);        else {            String[] messageParts = message.split(TYPE_SEPARATOR, 2);            if (messageParts.length != 2)                throw new MessageIsNotValid(message);            if (messageParts[0].equals(PUBLIC_MESSAGE))                return publicMessageParser(messageParts[1]);            if (messageParts[0].equals(PRIVATE_MESSAGE))                return privateMessageParser(messageParts[1]);            if (messageParts[0].equals(PRIVATE_FILE_MESSAGE))                return privateDataMessageParser(messageParts[1]);            if (messageParts[0].equals(PUBLIC_FILE_MESSAGE))                return publicDataMessageParser(messageParts[1]);            if (messageParts[0].equals(DOWNLOAD))                return downloadRequestParser(messageParts[1]);            throw new MessageTypeIsNotValid(message);        }    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/ServerMessageParser.java", "stars": "2", "class": {"name": "ServerMessageParser", "extends": null, "implements": ["Parser"], "modifiers": ["public"]}}, {"method_name": "downloadRequestParser", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "Message", "snippet": "    private Message downloadRequestParser(String message) {        String fileName = message.substring(0, message.lastIndexOf(\",\"));        String from = message.substring(message.lastIndexOf(\"<\") + 1, message.lastIndexOf(\">\"));        return new Message(userName, new String[]{from}, fileName, fileName.length(), DL);    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/ServerMessageParser.java", "stars": "2", "class": {"name": "ServerMessageParser", "extends": null, "implements": ["Parser"], "modifiers": ["public"]}}, {"method_name": "publicDataMessageParser", "params": ["String"], "throws": ["MessageIsNotValid"], "modifiers": ["public"], "return_type": "Message", "snippet": "    public Message publicDataMessageParser(String message) throws MessageIsNotValid {        String[] parts = message.split(USERNAMES_SEPARATOR);        if (parts.length != 2)            throw new MessageIsNotValid(message);        String fileName = parts[0].substring(parts[0].indexOf(\"<\") + 1, parts[0].indexOf(\">\"));        String length = parts[1].substring(parts[1].indexOf(\"<\") + 1, parts[1].indexOf(\">\"));        return new Message(userName, new String[]{\"All\"}, fileName, Long.parseLong(length), PUBLIC_DATA);    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/ServerMessageParser.java", "stars": "2", "class": {"name": "ServerMessageParser", "extends": null, "implements": ["Parser"], "modifiers": ["public"]}}, {"method_name": "privateDataMessageParser", "params": ["String"], "throws": ["MessageIsNotValid"], "modifiers": ["public"], "return_type": "Message", "snippet": "    public Message privateDataMessageParser(String message) throws MessageIsNotValid {        String[] parts = message.split(USERNAMES_SEPARATOR);        String fileName = parts[0].substring(parts[0].indexOf(\"<\") + 1, parts[0].indexOf(\">\"));        String length = parts[1].substring(parts[1].indexOf(\"<\") + 1, parts[1].indexOf(\">\"));        String rec = parts[2];        return new Message(userName, convertStringToList(rec), fileName, Long.parseLong(length), PRIVATE_DATA);    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/ServerMessageParser.java", "stars": "2", "class": {"name": "ServerMessageParser", "extends": null, "implements": ["Parser"], "modifiers": ["public"]}}, {"method_name": "privateMessageParser", "params": ["String"], "throws": ["MessageLengthDoesNotExists", "ReceiverDoesNotExists", "MessageIsTooLong"], "modifiers": ["public"], "return_type": "Message", "snippet": "    public Message privateMessageParser(String message) throws MessageLengthDoesNotExists,            ReceiverDoesNotExists, MessageIsTooLong {        String length;        int messageLength;        //Take th length of message and convert it to int.        try {            length = message.substring(message.indexOf(\"<\") + 1, message.indexOf(\">\"));        } catch (IndexOutOfBoundsException e) {            throw new MessageLengthDoesNotExists(message);        }        try {            messageLength = Integer.parseInt(length);        } catch (NumberFormatException e) {            throw new MessageIsTooLong(length);        }        // Try to get the receivers of message from the raw message        String[] parts = message.split(RECEIVERS_SEPARATOR, 2);        if (parts.length != 2)            throw new ReceiverDoesNotExists(message);        String rec = parts[1].substring(0, parts[1].indexOf(BODY_SEPARATOR));        // Try to get the body of message.        String[] endSection = parts[1].split(BODY_SEPARATOR, 2);        String body;        if (endSection.length == 2) {            try {                body = endSection[1].substring(endSection[1].indexOf(\"<\") + 1, endSection[1].lastIndexOf(\">\"));            } catch (IndexOutOfBoundsException e) {                return new Message(userName, new String[]{\"None\"}, \"\", 0, MessageTypes.NONE);            }            return new Message(userName, convertStringToList(rec), body, messageLength, PRIVATE);        } else            return new Message(userName, new String[]{\"None\"}, \"\", 0, MessageTypes.NONE);    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/ServerMessageParser.java", "stars": "2", "class": {"name": "ServerMessageParser", "extends": null, "implements": ["Parser"], "modifiers": ["public"]}}, {"method_name": "publicMessageParser", "params": ["String"], "throws": ["MessageLengthDoesNotExists", "MessageIsTooLong"], "modifiers": ["public"], "return_type": "Message", "snippet": "    public Message publicMessageParser(String message) throws MessageLengthDoesNotExists, MessageIsTooLong {        String length;        int messageLength;        try {            length = message.substring(message.indexOf(\"<\") + 1, message.indexOf(\">\"));        } catch (IndexOutOfBoundsException e) {            throw new MessageLengthDoesNotExists(message);        }        try {            messageLength = Integer.parseInt(length);        } catch (NumberFormatException e) {            throw new MessageIsTooLong(length);        }        String[] endSection = message.split(BODY_SEPARATOR, 2);        if (endSection.length == 2) {            String body = \"\";            try {                body = endSection[1].substring(endSection[1].indexOf(\"<\") + 1, endSection[1].lastIndexOf(\">\"));            } catch (IndexOutOfBoundsException e) {                return new Message(userName, new String[]{\"None\"}, \"\", 0, MessageTypes.NONE);            }            return new Message(userName, new String[]{\"All\"}, body, messageLength, MessageTypes.PUBLIC);        } else            return new Message(userName, new String[]{\"None\"}, \"\", 0, MessageTypes.NONE);    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/ServerMessageParser.java", "stars": "2", "class": {"name": "ServerMessageParser", "extends": null, "implements": ["Parser"], "modifiers": ["public"]}}, {"method_name": "format", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String format(String source) {        return new FormatProcess(source).perform();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/util/SqlFormatUtil.java", "stars": "23", "class": {"name": "SqlFormatUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "perform", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String perform() {            result.append(initial);            while (tokens.hasMoreTokens()) {                token = tokens.nextToken();                lcToken = token.toLowerCase();                if (\"'\".equals(token)) {                    String t;                    do {                        t = tokens.nextToken();                        token += t;                    } while (!\"'\".equals(t) && tokens.hasMoreTokens()); // cannot                    // handle                    // single                    // quotes                } else if (\"\\\"\".equals(token)) {                    String t;                    do {                        t = tokens.nextToken();                        token += t;                    } while (!\"\\\"\".equals(t));                }                if (afterByOrSetOrFromOrSelect && \",\".equals(token)) {                    commaAfterByOrFromOrSelect();                } else if (afterOn && \",\".equals(token)) {                    commaAfterOn();                } else if (\"(\".equals(token)) {                    openParen();                } else if (\")\".equals(token)) {                    closeParen();                } else if (BEGIN_CLAUSES.contains(lcToken)) {                    beginNewClause();                } else if (END_CLAUSES.contains(lcToken)) {                    endNewClause();                } else if (\"select\".equals(lcToken)) {                    select();                } else if (DML.contains(lcToken)) {                    updateOrInsertOrDelete();                } else if (\"values\".equals(lcToken)) {                    values();                } else if (\"on\".equals(lcToken)) {                    on();                } else if (afterBetween && lcToken.equals(\"and\")) {                    misc();                    afterBetween = false;                } else if (LOGICAL.contains(lcToken)) {                    logical();                } else if (isWhitespace(token)) {                    white();                } else {                    misc();                }                if (!isWhitespace(token)) {                    lastToken = lcToken;                }            }            return result.toString();        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/util/SqlFormatUtil.java", "stars": "23", "class": {"name": "FormatProcess", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "commaAfterOn", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void commaAfterOn() {            out();            indent--;            newline();            afterOn = false;            afterByOrSetOrFromOrSelect = true;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/util/SqlFormatUtil.java", "stars": "23", "class": {"name": "FormatProcess", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "commaAfterByOrFromOrSelect", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void commaAfterByOrFromOrSelect() {            out();            newline();        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/util/SqlFormatUtil.java", "stars": "23", "class": {"name": "FormatProcess", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "logical", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void logical() {            if (\"end\".equals(lcToken)) {                indent--;            }            newline();            out();            beginLine = false;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/util/SqlFormatUtil.java", "stars": "23", "class": {"name": "FormatProcess", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "on", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void on() {            indent++;            afterOn = true;            newline();            out();            beginLine = false;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/util/SqlFormatUtil.java", "stars": "23", "class": {"name": "FormatProcess", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "misc", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void misc() {            out();            if (\"between\".equals(lcToken)) {                afterBetween = true;            }            if (afterInsert) {                newline();                afterInsert = false;            } else {                beginLine = false;                if (\"case\".equals(lcToken)) {                    indent++;                }            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/util/SqlFormatUtil.java", "stars": "23", "class": {"name": "FormatProcess", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "white", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void white() {            if (!beginLine) {                result.append(\" \");            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/util/SqlFormatUtil.java", "stars": "23", "class": {"name": "FormatProcess", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "updateOrInsertOrDelete", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void updateOrInsertOrDelete() {            out();            indent++;            beginLine = false;            if (\"update\".equals(lcToken)) {                newline();            }            if (\"insert\".equals(lcToken)) {                afterInsert = true;            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/util/SqlFormatUtil.java", "stars": "23", "class": {"name": "FormatProcess", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "select", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void select() {            out();            indent++;            newline();            parenCounts.addLast(Integer.valueOf(parensSinceSelect));            afterByOrFromOrSelects.addLast(Boolean                    .valueOf(afterByOrSetOrFromOrSelect));            parensSinceSelect = 0;            afterByOrSetOrFromOrSelect = true;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/util/SqlFormatUtil.java", "stars": "23", "class": {"name": "FormatProcess", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "out", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void out() {            result.append(token);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/util/SqlFormatUtil.java", "stars": "23", "class": {"name": "FormatProcess", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "endNewClause", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void endNewClause() {            if (!afterBeginBeforeEnd) {                indent--;                if (afterOn) {                    indent--;                    afterOn = false;                }                newline();            }            out();            if (!\"union\".equals(lcToken)) {                indent++;            }            newline();            afterBeginBeforeEnd = false;            afterByOrSetOrFromOrSelect = \"by\".equals(lcToken)                    || \"set\".equals(lcToken) || \"from\".equals(lcToken);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/util/SqlFormatUtil.java", "stars": "23", "class": {"name": "FormatProcess", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "beginNewClause", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void beginNewClause() {            if (!afterBeginBeforeEnd) {                if (afterOn) {                    indent--;                    afterOn = false;                }                indent--;                newline();            }            out();            beginLine = false;            afterBeginBeforeEnd = true;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/util/SqlFormatUtil.java", "stars": "23", "class": {"name": "FormatProcess", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "values", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void values() {            indent--;            newline();            out();            indent++;            newline();            afterValues = true;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/util/SqlFormatUtil.java", "stars": "23", "class": {"name": "FormatProcess", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "closeParen", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void closeParen() {            parensSinceSelect--;            if (parensSinceSelect < 0) {                indent--;                parensSinceSelect = parenCounts.removeLast().intValue();                afterByOrSetOrFromOrSelect = afterByOrFromOrSelects                        .removeLast().booleanValue();            }            if (inFunction > 0) {                inFunction--;                out();            } else {                if (!afterByOrSetOrFromOrSelect) {                    indent--;                    newline();                }                out();            }            beginLine = false;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/util/SqlFormatUtil.java", "stars": "23", "class": {"name": "FormatProcess", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "openParen", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void openParen() {            if (isFunctionName(lastToken) || inFunction > 0) {                inFunction++;            }            beginLine = false;            if (inFunction > 0) {                out();            } else {                out();                if (!afterByOrSetOrFromOrSelect) {                    indent++;                    newline();                    beginLine = true;                }            }            parensSinceSelect++;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/util/SqlFormatUtil.java", "stars": "23", "class": {"name": "FormatProcess", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "isFunctionName", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "        private static boolean isFunctionName(String tok) {            final char begin = tok.charAt(0);            final boolean isIdentifier = Character.isJavaIdentifierStart(begin)                    || '\"' == begin;            return isIdentifier && !LOGICAL.contains(tok)                    && !END_CLAUSES.contains(tok) && !QUANTIFIERS.contains(tok)                    && !DML.contains(tok) && !MISC.contains(tok);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/util/SqlFormatUtil.java", "stars": "23", "class": {"name": "FormatProcess", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "isWhitespace", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "        private static boolean isWhitespace(String token) {            return WHITESPACE.indexOf(token) >= 0;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/util/SqlFormatUtil.java", "stars": "23", "class": {"name": "FormatProcess", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "newline", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void newline() {            result.append(\"\\n\");            for (int i = 0; i < indent; i++) {                result.append(indentString);            }            beginLine = true;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/util/SqlFormatUtil.java", "stars": "23", "class": {"name": "FormatProcess", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "exist_cat", "params": ["MetaDomain", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean exist_cat(MetaDomain category, String cats) {        String[] arr = StringUtils.split(cats, \",\");        if (null != arr && arr.length > 0) {            for (String c : arr) {                if (c.trim().equals(category.getName())) {                    return true;                }            }        }        return false;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/AdminCommons.java", "stars": "2", "class": {"name": "AdminCommons", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "rand_color", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String rand_color() {        int r = Tools.rand(0, COLORS.length - 1);        return COLORS[r];    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/AdminCommons.java", "stars": "2", "class": {"name": "AdminCommons", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "display", "params": ["Color"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void display(Color color) {        System.out.println(\"\u8fd9\u662f\" + shape);        System.out.println(shape + \"\u7684\u989c\u8272\u4e3a\uff1a\" + color.getColor());    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/flyweight/BlockImpl.java", "stars": "2", "class": {"name": "BlockImpl", "extends": null, "implements": ["Block"], "modifiers": ["public"]}}, {"method_name": "shouldSetParameter", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldSetParameter() throws Exception {    TYPE_HANDLER.setParameter(ps, 1, DATE, null);    verify(ps).setDate(1, new java.sql.Date(DATE.getTime()));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/DateOnlyTypeHandlerTest.java", "stars": "15", "class": {"name": "DateOnlyTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByName() throws Exception {    when(rs.getDate(\"column\")).thenReturn(SQL_DATE);    assertEquals(DATE, TYPE_HANDLER.getResult(rs, \"column\"));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/DateOnlyTypeHandlerTest.java", "stars": "15", "class": {"name": "DateOnlyTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByName() throws Exception {    when(rs.getDate(\"column\")).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(rs, \"column\"));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/DateOnlyTypeHandlerTest.java", "stars": "15", "class": {"name": "DateOnlyTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByPosition() throws Exception {    when(rs.getDate(1)).thenReturn(SQL_DATE);    assertEquals(DATE, TYPE_HANDLER.getResult(rs, 1));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/DateOnlyTypeHandlerTest.java", "stars": "15", "class": {"name": "DateOnlyTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByPosition() throws Exception {    when(rs.getDate(1)).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(rs, 1));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/DateOnlyTypeHandlerTest.java", "stars": "15", "class": {"name": "DateOnlyTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromCallableStatement() throws Exception {    when(cs.getDate(1)).thenReturn(SQL_DATE);    assertEquals(DATE, TYPE_HANDLER.getResult(cs, 1));    verify(cs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/DateOnlyTypeHandlerTest.java", "stars": "15", "class": {"name": "DateOnlyTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromCallableStatement() throws Exception {    when(cs.getDate(1)).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(cs, 1));    verify(cs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/DateOnlyTypeHandlerTest.java", "stars": "15", "class": {"name": "DateOnlyTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "getImage", "params": ["HttpServletResponse", "String"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void getImage(HttpServletResponse response, @PathVariable(\"key\") String key) throws Exception {        response.setDateHeader(\"Expires\", 0);        response.setHeader(\"cache-Control\", \"no-cache, must-revalidate\");        response.addHeader(\"cache-Control\", \"post-check=0, pre-check=0\");        response.setHeader(\"Pragma\", \"no-cache\");        response.setContentType(\"image/jpeg\");        try (ServletOutputStream out = response.getOutputStream()) {            ValidateCodeUtil.getCaptcha(key).write(out);            out.flush();        }    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/security/SecurityEndpoint.java", "stars": "6", "class": {"name": "SecurityEndpoint", "extends": null, "implements": ["AuthenticationEntryPoint", "AccessDeniedHandler"], "modifiers": ["public"]}}, {"method_name": "login", "params": ["LoginParams"], "throws": null, "modifiers": ["public"], "return_type": "R<String>", "snippet": "    public R<String> login(@RequestBody LoginParams params) {        Authentication authentication;        try {            // \u7528\u6237\u9a8c\u8bc1            authentication = authenticationManager.authenticate(                    new UsernamePasswordAuthenticationToken(                            params.getUsername(),                            params.getPassword())            );        } catch (Exception e) {            if (e instanceof BadCredentialsException) {                throw new BaseException(\"\u7528\u6237\u540d\u6216\u5bc6\u7801\u9519\u8bef\", 402);            } else if (e instanceof DisabledException) {                throw new BaseException(\"\u8d26\u6237\u88ab\u7981\u7528\", 402);            } else if (e instanceof AccountExpiredException) {                throw new BaseException(\"\u8d26\u6237\u8fc7\u671f\u65e0\u6cd5\u9a8c\u8bc1\", 402);            } else {                throw new BaseException(\"\u8d26\u6237\u88ab\u9501\u5b9a,\u65e0\u6cd5\u767b\u5f55\", 402);            }        }        // \u5b58\u50a8\u8ba4\u8bc1\u4fe1\u606f        SecurityContextHolder.getContext().setAuthentication(authentication);        // \u8fd4\u56de JWT TOKEN        SecurityUser userDetail = (SecurityUser) authentication.getPrincipal();        return R.ok(                JwtUtil.create(                        userDetail.getUsername(),                        securityProperties.getToken().getSecret(),                        securityProperties.getToken().getExpiration()                )        );    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/security/SecurityEndpoint.java", "stars": "6", "class": {"name": "SecurityEndpoint", "extends": null, "implements": ["AuthenticationEntryPoint", "AccessDeniedHandler"], "modifiers": ["public"]}}, {"method_name": "loginByPC", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "R<String>", "snippet": "    public R<String> loginByPC(@PathVariable String uuid) {        String token = UUID_TOKEN_CACHE.get(uuid);        if (token == null) {            return R.err();        }        return R.ok(token, \"\u767b\u5f55\u6210\u529f\");    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/security/SecurityEndpoint.java", "stars": "6", "class": {"name": "SecurityEndpoint", "extends": null, "implements": ["AuthenticationEntryPoint", "AccessDeniedHandler"], "modifiers": ["public"]}}, {"method_name": "authorize", "params": ["String", "String", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String authorize(@RequestParam(value = \"uuid\", defaultValue = \"0\") String uuid, @RequestParam(\"returnUrl\") String returnUrl, HttpServletRequest request) {        String ua = request.getHeader(HttpHeaders.USER_AGENT);        String chart = returnUrl.contains(\"?\") ? \"&\" : \"?\";        returnUrl += chart + \"uuid=\" + uuid;        returnUrl = URLEncoder.encode(returnUrl, \"UTF-8\");        String redirectUrl;        // \u5fae\u4fe1        if (ua.contains(BrowserUAEnum.WECHAT.getBrowserUserAgent())) {            redirectUrl = wxMpService.oauth2buildAuthorizationUrl(                    securityProperties.getWx().getAuth2Url(),                    WxConsts.OAuth2Scope.SNSAPI_BASE, returnUrl);            return \"redirect:\" + redirectUrl;        }        // \u652f\u4ed8\u5b9d        redirectUrl = \"https://openauth.alipay.com/oauth2/publicAppAuthorize.htm?app_id=\" + securityProperties.getAli().getAppId() +                \"&scope=auth_base\" +                \"&redirect_uri=\" + URLEncoder.encode(securityProperties.getAli().getAuth2Url(), \"UTF-8\") +                // \u652f\u4ed8\u5b9d\u4e5f\u4f1a\u89e3\u7801\u4e00\u6b21, \u88ab\u5751\u8fc7\u4e00\u6b21                \"&state=\" + URLEncoder.encode(returnUrl, \"UTF-8\");        return \"redirect:\" + redirectUrl;    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/security/SecurityEndpoint.java", "stars": "6", "class": {"name": "SecurityEndpoint", "extends": null, "implements": ["AuthenticationEntryPoint", "AccessDeniedHandler"], "modifiers": ["public"]}}, {"method_name": "wxUserInfo", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String wxUserInfo(@RequestParam(\"code\") String code, @RequestParam(\"state\") String returnUrl) {        WxMpOAuth2AccessToken accessToken = wxMpService.oauth2getAccessToken(code);        String openId = accessToken.getOpenId();        Boolean subscribe = wxMpService.getUserService().userInfo(openId).getSubscribe();        DbUser user = new DbUser();        user.setUsername(openId);        UserDetails userDetails = securityUserDetailsService.loadUserByWechat(openId);        String token = JwtUtil.create(                userDetails.getUsername(),                securityProperties.getToken().getSecret(),                securityProperties.getToken().getExpiration())                + \"&sub=\" + subscribe;        String uuid = HttpUtil.decodeParamMap(returnUrl, CharsetUtil.UTF_8).get(\"uuid\");        if (uuid != null && !uuid.equals(DEFAULT_UUID)) {            UUID_TOKEN_CACHE.put(uuid, token);        }        String chart = returnUrl.contains(\"?\") ? \"&\" : \"?\";        return \"redirect:\" + returnUrl + chart + \"token=\" + token;    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/security/SecurityEndpoint.java", "stars": "6", "class": {"name": "SecurityEndpoint", "extends": null, "implements": ["AuthenticationEntryPoint", "AccessDeniedHandler"], "modifiers": ["public"]}}, {"method_name": "aliUserInfo", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String aliUserInfo(@RequestParam(\"auth_code\") String code, @RequestParam(\"state\") String returnUrl) {        AlipaySystemOauthTokenRequest request = new AlipaySystemOauthTokenRequest();        request.setCode(code);        request.setGrantType(\"authorization_code\");        AlipaySystemOauthTokenResponse alipaySystemOauthTokenResponse = null;        try {            alipaySystemOauthTokenResponse = alipayClient.execute(request);        } catch (AlipayApiException e) {            e.printStackTrace();        }        assert alipaySystemOauthTokenResponse != null;        String openId = alipaySystemOauthTokenResponse.getUserId();        UserDetails userDetails = securityUserDetailsService.loadUserByAlipay(openId);        String uuid = HttpUtil.decodeParamMap(returnUrl, CharsetUtil.UTF_8).get(\"uuid\");        String token = JwtUtil.create(                userDetails.getUsername(),                securityProperties.getToken().getSecret(),                securityProperties.getToken().getExpiration());        if (uuid != null && !uuid.equals(DEFAULT_UUID)) {            UUID_TOKEN_CACHE.put(uuid, token);        }        String chart = returnUrl.contains(\"?\") ? \"&\" : \"?\";        return \"redirect:\" + returnUrl + chart + \"token=\" + token;    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/security/SecurityEndpoint.java", "stars": "6", "class": {"name": "SecurityEndpoint", "extends": null, "implements": ["AuthenticationEntryPoint", "AccessDeniedHandler"], "modifiers": ["public"]}}, {"method_name": "commence", "params": ["HttpServletRequest", "HttpServletResponse", "AuthenticationException"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) {        SecurityUtil.writeToResponse(R.err(HttpStatus.HTTP_UNAUTHORIZED, \"\u767b\u5f55\u5931\u8d25\"), response);    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/security/SecurityEndpoint.java", "stars": "6", "class": {"name": "SecurityEndpoint", "extends": null, "implements": ["AuthenticationEntryPoint", "AccessDeniedHandler"], "modifiers": ["public"]}}, {"method_name": "handle", "params": ["HttpServletRequest", "HttpServletResponse", "AccessDeniedException"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException) {        SecurityUtil.writeToResponse(R.err(HttpStatus.HTTP_UNAUTHORIZED, \"\u65e0\u6743\u8bbf\u95ee\"), response);    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/security/SecurityEndpoint.java", "stars": "6", "class": {"name": "SecurityEndpoint", "extends": null, "implements": ["AuthenticationEntryPoint", "AccessDeniedHandler"], "modifiers": ["public"]}}, {"method_name": "handleBaseException", "params": ["BaseException"], "throws": null, "modifiers": ["public"], "return_type": "R<Integer>", "snippet": "    public R<Integer> handleBaseException(BaseException e) {        return R.err(e.getCode(), e.getMsg());    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/security/SecurityEndpoint.java", "stars": "6", "class": {"name": "SecurityEndpoint", "extends": null, "implements": ["AuthenticationEntryPoint", "AccessDeniedHandler"], "modifiers": ["public"]}}, {"method_name": "handlerNoFoundException", "params": ["Exception"], "throws": null, "modifiers": ["public"], "return_type": "R<Integer>", "snippet": "    public R<Integer> handlerNoFoundException(Exception e) {        return R.err(HttpStatus.HTTP_NOT_FOUND, \"\u8def\u5f84\u4e0d\u5b58\u5728\");    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/security/SecurityEndpoint.java", "stars": "6", "class": {"name": "SecurityEndpoint", "extends": null, "implements": ["AuthenticationEntryPoint", "AccessDeniedHandler"], "modifiers": ["public"]}}, {"method_name": "handleAuthorizationException", "params": ["AccessDeniedException"], "throws": null, "modifiers": ["public"], "return_type": "R<Integer>", "snippet": "    public R<Integer> handleAuthorizationException(AccessDeniedException e) {        return R.err(HttpStatus.HTTP_UNAUTHORIZED, \"\u6ca1\u6709\u6743\u9650\");    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/security/SecurityEndpoint.java", "stars": "6", "class": {"name": "SecurityEndpoint", "extends": null, "implements": ["AuthenticationEntryPoint", "AccessDeniedHandler"], "modifiers": ["public"]}}, {"method_name": "handleException", "params": ["Exception"], "throws": null, "modifiers": ["public"], "return_type": "R<Integer>", "snippet": "    public R<Integer> handleException(Exception e) {        return R.err(e.getMessage());    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/security/SecurityEndpoint.java", "stars": "6", "class": {"name": "SecurityEndpoint", "extends": null, "implements": ["AuthenticationEntryPoint", "AccessDeniedHandler"], "modifiers": ["public"]}}, {"method_name": "getTarget", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getTarget() {    return target;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/plugin/Invocation.java", "stars": "15", "class": {"name": "Invocation", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMethod", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Method", "snippet": "  public Method getMethod() {    return method;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/plugin/Invocation.java", "stars": "15", "class": {"name": "Invocation", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getArgs", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object[] getArgs() {    return args;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/plugin/Invocation.java", "stars": "15", "class": {"name": "Invocation", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "proceed", "params": [], "throws": ["InvocationTargetException", "IllegalAccessException"], "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object proceed() throws InvocationTargetException, IllegalAccessException {    return method.invoke(target, args);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/plugin/Invocation.java", "stars": "15", "class": {"name": "Invocation", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getId() {    return id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/blog/BlogLite.java", "stars": "15", "class": {"name": "BlogLite", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setId(int id) {    this.id = id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/blog/BlogLite.java", "stars": "15", "class": {"name": "BlogLite", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPosts", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<PostLite>", "snippet": "  public List<PostLite> getPosts() {    return posts;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/blog/BlogLite.java", "stars": "15", "class": {"name": "BlogLite", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPosts", "params": ["List<PostLite>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setPosts(List<PostLite> posts) {    this.posts = posts;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/blog/BlogLite.java", "stars": "15", "class": {"name": "BlogLite", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getIss", "params": ["Model"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getIss(Model model){        model.addAttribute(\"init\", init.initData());        model.addAttribute(\"isspositionLat\", issData.getLat());        model.addAttribute(\"isspositionLon\", issData.getLon());        model.addAttribute(\"isspositionCountry\", issData.getCountryName());        model.addAttribute(\"isspositionTime\", issData.getLocalTimeISS());        model.addAttribute(\"isspositionSunRise\", issData.getSunrise());        model.addAttribute(\"isspositionSunSet\", issData.getSunset());        return \"wherisiss\";    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/controller/IssPositionApiController.java", "stars": "1", "class": {"name": "IssPositionApiController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldSetParameter", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldSetParameter() throws Exception {    TYPE_HANDLER.setParameter(ps, 1, (short) 100, null);    verify(ps).setShort(1, (short) 100);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ShortTypeHandlerTest.java", "stars": "15", "class": {"name": "ShortTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByName() throws Exception {    when(rs.getShort(\"column\")).thenReturn((short) 100);    assertEquals(Short.valueOf((short) 100), TYPE_HANDLER.getResult(rs, \"column\"));    when(rs.getShort(\"column\")).thenReturn((short) 0);    assertEquals(Short.valueOf((short) 0), TYPE_HANDLER.getResult(rs, \"column\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ShortTypeHandlerTest.java", "stars": "15", "class": {"name": "ShortTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByName() throws Exception {    when(rs.getShort(\"column\")).thenReturn((short) 0);    when(rs.wasNull()).thenReturn(true);    assertNull(TYPE_HANDLER.getResult(rs, \"column\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ShortTypeHandlerTest.java", "stars": "15", "class": {"name": "ShortTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByPosition() throws Exception {    when(rs.getShort(1)).thenReturn((short) 100);    assertEquals(Short.valueOf((short) 100), TYPE_HANDLER.getResult(rs, 1));    when(rs.getShort(1)).thenReturn((short) 0);    assertEquals(Short.valueOf((short) 0), TYPE_HANDLER.getResult(rs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ShortTypeHandlerTest.java", "stars": "15", "class": {"name": "ShortTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByPosition() throws Exception {    when(rs.getShort(1)).thenReturn((short) 0);    when(rs.wasNull()).thenReturn(true);    assertNull(TYPE_HANDLER.getResult(rs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ShortTypeHandlerTest.java", "stars": "15", "class": {"name": "ShortTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromCallableStatement() throws Exception {    when(cs.getShort(1)).thenReturn((short) 100);    assertEquals(Short.valueOf((short) 100), TYPE_HANDLER.getResult(cs, 1));    when(cs.getShort(1)).thenReturn((short) 0);    assertEquals(Short.valueOf((short) 0), TYPE_HANDLER.getResult(cs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ShortTypeHandlerTest.java", "stars": "15", "class": {"name": "ShortTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromCallableStatement() throws Exception {    when(cs.getShort(1)).thenReturn((short) 0);    when(cs.wasNull()).thenReturn(true);    assertNull(TYPE_HANDLER.getResult(cs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ShortTypeHandlerTest.java", "stars": "15", "class": {"name": "ShortTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "onBackPressed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onBackPressed ()\t{\t\tn_onBackPressed ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsApplicationActivity.java", "stars": "2", "class": {"name": "FormsApplicationActivity", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onBackPressed", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onBackPressed ();\tpublic void onConfigurationChanged (android.content.res.Configuration p0)\t{\t\tn_onConfigurationChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsApplicationActivity.java", "stars": "2", "class": {"name": "FormsApplicationActivity", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onConfigurationChanged", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onConfigurationChanged (android.content.res.Configuration p0)\t{\t\tn_onConfigurationChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsApplicationActivity.java", "stars": "2", "class": {"name": "FormsApplicationActivity", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onConfigurationChanged", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onConfigurationChanged (android.content.res.Configuration p0);\tpublic boolean onOptionsItemSelected (android.view.MenuItem p0)\t{\t\treturn n_onOptionsItemSelected (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsApplicationActivity.java", "stars": "2", "class": {"name": "FormsApplicationActivity", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onOptionsItemSelected", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onOptionsItemSelected (android.view.MenuItem p0)\t{\t\treturn n_onOptionsItemSelected (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsApplicationActivity.java", "stars": "2", "class": {"name": "FormsApplicationActivity", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onOptionsItemSelected", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onOptionsItemSelected (android.view.MenuItem p0);\tpublic boolean onPrepareOptionsMenu (android.view.Menu p0)\t{\t\treturn n_onPrepareOptionsMenu (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsApplicationActivity.java", "stars": "2", "class": {"name": "FormsApplicationActivity", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onPrepareOptionsMenu", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onPrepareOptionsMenu (android.view.Menu p0)\t{\t\treturn n_onPrepareOptionsMenu (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsApplicationActivity.java", "stars": "2", "class": {"name": "FormsApplicationActivity", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onPrepareOptionsMenu", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onPrepareOptionsMenu (android.view.Menu p0);\tpublic void onActivityResult (int p0, int p1, android.content.Intent p2)\t{\t\tn_onActivityResult (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsApplicationActivity.java", "stars": "2", "class": {"name": "FormsApplicationActivity", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onActivityResult", "params": ["int", "int", "android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onActivityResult (int p0, int p1, android.content.Intent p2)\t{\t\tn_onActivityResult (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsApplicationActivity.java", "stars": "2", "class": {"name": "FormsApplicationActivity", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onActivityResult", "params": ["int", "int", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onActivityResult (int p0, int p1, android.content.Intent p2);\tpublic void onCreate (android.os.Bundle p0)\t{\t\tn_onCreate (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsApplicationActivity.java", "stars": "2", "class": {"name": "FormsApplicationActivity", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onCreate (android.os.Bundle p0)\t{\t\tn_onCreate (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsApplicationActivity.java", "stars": "2", "class": {"name": "FormsApplicationActivity", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onCreate", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onCreate (android.os.Bundle p0);\tpublic void onDestroy ()\t{\t\tn_onDestroy ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsApplicationActivity.java", "stars": "2", "class": {"name": "FormsApplicationActivity", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDestroy ()\t{\t\tn_onDestroy ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsApplicationActivity.java", "stars": "2", "class": {"name": "FormsApplicationActivity", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onDestroy", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDestroy ();\tpublic void onPause ()\t{\t\tn_onPause ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsApplicationActivity.java", "stars": "2", "class": {"name": "FormsApplicationActivity", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onPause ()\t{\t\tn_onPause ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsApplicationActivity.java", "stars": "2", "class": {"name": "FormsApplicationActivity", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onPause", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onPause ();\tpublic void onRestart ()\t{\t\tn_onRestart ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsApplicationActivity.java", "stars": "2", "class": {"name": "FormsApplicationActivity", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onRestart", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onRestart ()\t{\t\tn_onRestart ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsApplicationActivity.java", "stars": "2", "class": {"name": "FormsApplicationActivity", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onRestart", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onRestart ();\tpublic void onResume ()\t{\t\tn_onResume ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsApplicationActivity.java", "stars": "2", "class": {"name": "FormsApplicationActivity", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onResume ()\t{\t\tn_onResume ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsApplicationActivity.java", "stars": "2", "class": {"name": "FormsApplicationActivity", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onResume", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onResume ();\tpublic void onStart ()\t{\t\tn_onStart ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsApplicationActivity.java", "stars": "2", "class": {"name": "FormsApplicationActivity", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onStart", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onStart ()\t{\t\tn_onStart ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsApplicationActivity.java", "stars": "2", "class": {"name": "FormsApplicationActivity", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onStart", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onStart ();\tpublic void onStop ()\t{\t\tn_onStop ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsApplicationActivity.java", "stars": "2", "class": {"name": "FormsApplicationActivity", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onStop", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onStop ()\t{\t\tn_onStop ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsApplicationActivity.java", "stars": "2", "class": {"name": "FormsApplicationActivity", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onStop", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onStop ();\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsApplicationActivity.java", "stars": "2", "class": {"name": "FormsApplicationActivity", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsApplicationActivity.java", "stars": "2", "class": {"name": "FormsApplicationActivity", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsApplicationActivity.java", "stars": "2", "class": {"name": "FormsApplicationActivity", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getId() {    return id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/parent_childs/Child.java", "stars": "15", "class": {"name": "Child", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setId(int id) {    this.id = id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/parent_childs/Child.java", "stars": "15", "class": {"name": "Child", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getName() {    return name;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/parent_childs/Child.java", "stars": "15", "class": {"name": "Child", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setName(String name) {    this.name = name;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/parent_childs/Child.java", "stars": "15", "class": {"name": "Child", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSurName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getSurName() {    return surName;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/parent_childs/Child.java", "stars": "15", "class": {"name": "Child", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSurName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setSurName(String surName) {    this.surName = surName;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/parent_childs/Child.java", "stars": "15", "class": {"name": "Child", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAge", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getAge() {    return age;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/parent_childs/Child.java", "stars": "15", "class": {"name": "Child", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAge", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setAge(int age) {    this.age = age;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/parent_childs/Child.java", "stars": "15", "class": {"name": "Child", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNumJobCallbacks", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getNumJobCallbacks() {    return this.jobCallbackMetrics.getRequestCount();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/jmx/JmxJobCallback.java", "stars": "18", "class": {"name": "JmxJobCallback", "extends": null, "implements": ["JmxJobCallbackMBean"], "modifiers": ["public"]}}, {"method_name": "getNumSuccessfulJobCallbacks", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getNumSuccessfulJobCallbacks() {    return this.jobCallbackMetrics.getSuccessfulConnectionCount();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/jmx/JmxJobCallback.java", "stars": "18", "class": {"name": "JmxJobCallback", "extends": null, "implements": ["JmxJobCallbackMBean"], "modifiers": ["public"]}}, {"method_name": "getNumFailedJobCallbacks", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getNumFailedJobCallbacks() {    return this.jobCallbackMetrics.getFailedConnectionCount();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/jmx/JmxJobCallback.java", "stars": "18", "class": {"name": "JmxJobCallback", "extends": null, "implements": ["JmxJobCallbackMBean"], "modifiers": ["public"]}}, {"method_name": "getNumActiveJobCallbacks", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getNumActiveJobCallbacks() {    return this.jobCallbackMetrics.getActiveConnectionCount();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/jmx/JmxJobCallback.java", "stars": "18", "class": {"name": "JmxJobCallback", "extends": null, "implements": ["JmxJobCallbackMBean"], "modifiers": ["public"]}}, {"method_name": "initDb", "params": [], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void initDb() throws SQLException {        Connection conn = null;        Statement stmt = null;        try {            conn = getConnection();            stmt = conn.createStatement();            Table table = MapperUtil.createMapper(NodeDO.class);            String sql = MapperUtil.createTableSql(table);            stmt.execute(sql);        } catch (Exception e) {            e.printStackTrace();        } finally {            releaseConnection(conn, stmt, null);        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/db/ConnectionPool.java", "stars": "7", "class": {"name": "ConnectionPool", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "releaseConnection", "params": ["Connection", "Statement", "ResultSet"], "throws": ["SQLException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void releaseConnection(Connection conn, Statement stmt,                                         ResultSet rs) throws SQLException {        if (rs != null) {            rs.close();        }        if (stmt != null) {            stmt.close();        }        if (conn != null) {            conn.close();        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/db/ConnectionPool.java", "stars": "7", "class": {"name": "ConnectionPool", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "ConnectionPool", "snippet": "    public static ConnectionPool getInstance() {        if (instance == null) {            instance = new ConnectionPool();        }        return instance;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/db/ConnectionPool.java", "stars": "7", "class": {"name": "ConnectionPool", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getConnection", "params": [], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Connection", "snippet": "    public Connection getConnection() throws SQLException {        return jdbcConnectionPool.getConnection();    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/db/ConnectionPool.java", "stars": "7", "class": {"name": "ConnectionPool", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init() {        auditEventOld = new PersistentAuditEvent();        auditEventOld.setAuditEventDate(Instant.now().minus(jHipsterProperties.getAuditEvents().getRetentionPeriod() + 1, ChronoUnit.DAYS));        auditEventOld.setPrincipal(\"test-user-old\");        auditEventOld.setAuditEventType(\"test-type\");        auditEventWithinRetention = new PersistentAuditEvent();        auditEventWithinRetention.setAuditEventDate(Instant.now().minus(jHipsterProperties.getAuditEvents().getRetentionPeriod() - 1, ChronoUnit.DAYS));        auditEventWithinRetention.setPrincipal(\"test-user-retention\");        auditEventWithinRetention.setAuditEventType(\"test-type\");        auditEventNew = new PersistentAuditEvent();        auditEventNew.setAuditEventDate(Instant.now());        auditEventNew.setPrincipal(\"test-user-new\");        auditEventNew.setAuditEventType(\"test-type\");    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/AuditEventServiceIT.java", "stars": "2", "class": {"name": "AuditEventServiceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "verifyOldAuditEventsAreDeleted", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void verifyOldAuditEventsAreDeleted() {        persistenceAuditEventRepository.deleteAll();        persistenceAuditEventRepository.save(auditEventOld);        persistenceAuditEventRepository.save(auditEventWithinRetention);        persistenceAuditEventRepository.save(auditEventNew);        persistenceAuditEventRepository.flush();        auditEventService.removeOldAuditEvents();        persistenceAuditEventRepository.flush();        assertThat(persistenceAuditEventRepository.findAll().size()).isEqualTo(2);        assertThat(persistenceAuditEventRepository.findByPrincipal(\"test-user-old\")).isEmpty();        assertThat(persistenceAuditEventRepository.findByPrincipal(\"test-user-retention\")).isNotEmpty();        assertThat(persistenceAuditEventRepository.findByPrincipal(\"test-user-new\")).isNotEmpty();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/AuditEventServiceIT.java", "stars": "2", "class": {"name": "AuditEventServiceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_first);        tv1 = findViewById(R.id.tv1);        b1 = findViewById(R.id.b1);        b2 = findViewById(R.id.b2);        animation = AnimationUtils.loadAnimation(this, R.anim.animation);        value = getIntent().getStringExtra(\"pass_value\");        tv1.setText(value);        tv1.setAnimation(animation);        b1.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Intent intent = new Intent(FirstActivity.this,VideoActivity.class);                intent.putExtra(\"value\",value);                startActivity(intent);            }        });        b2.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Intent intent = new Intent(FirstActivity.this,HomeActivity.class);                startActivity(intent);            }        });    }", "url": "https://raw.githubusercontent.com/hashtrojans/SampleApp/master/app/src/main/java/com/expert/splashapp/FirstActivity.java", "stars": "1", "class": {"name": "FirstActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create an SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/keygen/MapperConfig.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/keygen/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Jdbc3KeyGeneratorTest.java", "stars": "15", "class": {"name": "Jdbc3KeyGeneratorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldAssignKeyToBean", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldAssignKeyToBean() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      try {        CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);        Country country = new Country(\"China\", \"CN\");        mapper.insertBean(country);        assertNotNull(country.getId());      } finally {        sqlSession.rollback();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Jdbc3KeyGeneratorTest.java", "stars": "15", "class": {"name": "Jdbc3KeyGeneratorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldAssignKeyToBean_batch", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldAssignKeyToBean_batch() {    try (SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.BATCH)) {      try {        CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);        Country country1 = new Country(\"China\", \"CN\");        mapper.insertBean(country1);        Country country2 = new Country(\"Canada\", \"CA\");        mapper.insertBean(country2);        sqlSession.flushStatements();        sqlSession.clearCache();        assertNotNull(country1.getId());        assertNotNull(country2.getId());      } finally {        sqlSession.rollback();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Jdbc3KeyGeneratorTest.java", "stars": "15", "class": {"name": "Jdbc3KeyGeneratorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldAssignKeyToNamedBean", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldAssignKeyToNamedBean() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      try {        CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);        Country country = new Country(\"China\", \"CN\");        mapper.insertNamedBean(country);        assertNotNull(country.getId());      } finally {        sqlSession.rollback();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Jdbc3KeyGeneratorTest.java", "stars": "15", "class": {"name": "Jdbc3KeyGeneratorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldAssignKeyToNamedBean_batch", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldAssignKeyToNamedBean_batch() {    try (SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.BATCH)) {      try {        CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);        Country country1 = new Country(\"China\", \"CN\");        mapper.insertNamedBean(country1);        Country country2 = new Country(\"Canada\", \"CA\");        mapper.insertNamedBean(country2);        sqlSession.flushStatements();        sqlSession.clearCache();        assertNotNull(country1.getId());        assertNotNull(country2.getId());      } finally {        sqlSession.rollback();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Jdbc3KeyGeneratorTest.java", "stars": "15", "class": {"name": "Jdbc3KeyGeneratorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldAssignKeyToNamedBean_keyPropertyWithParamName", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldAssignKeyToNamedBean_keyPropertyWithParamName() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      try {        CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);        Country country = new Country(\"China\", \"CN\");        mapper.insertNamedBean_keyPropertyWithParamName(country);        assertNotNull(country.getId());      } finally {        sqlSession.rollback();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Jdbc3KeyGeneratorTest.java", "stars": "15", "class": {"name": "Jdbc3KeyGeneratorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldAssignKeyToNamedBean_keyPropertyWithParamName_batch", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldAssignKeyToNamedBean_keyPropertyWithParamName_batch() {    try (SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.BATCH)) {      try {        CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);        Country country1 = new Country(\"China\", \"CN\");        mapper.insertNamedBean_keyPropertyWithParamName(country1);        Country country2 = new Country(\"Canada\", \"CA\");        mapper.insertNamedBean_keyPropertyWithParamName(country2);        sqlSession.flushStatements();        sqlSession.clearCache();        assertNotNull(country1.getId());        assertNotNull(country2.getId());      } finally {        sqlSession.rollback();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Jdbc3KeyGeneratorTest.java", "stars": "15", "class": {"name": "Jdbc3KeyGeneratorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldAssignKeysToList", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldAssignKeysToList() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      try {        CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);        List<Country> countries = new ArrayList<>();        countries.add(new Country(\"China\", \"CN\"));        countries.add(new Country(\"United Kiongdom\", \"GB\"));        countries.add(new Country(\"United States of America\", \"US\"));        mapper.insertList(countries);        for (Country country : countries) {          assertNotNull(country.getId());        }      } finally {        sqlSession.rollback();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Jdbc3KeyGeneratorTest.java", "stars": "15", "class": {"name": "Jdbc3KeyGeneratorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldAssignKeysToNamedList", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldAssignKeysToNamedList() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      try {        CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);        List<Country> countries = new ArrayList<>();        countries.add(new Country(\"China\", \"CN\"));        countries.add(new Country(\"United Kiongdom\", \"GB\"));        countries.add(new Country(\"United States of America\", \"US\"));        mapper.insertNamedList(countries);        for (Country country : countries) {          assertNotNull(country.getId());        }      } finally {        sqlSession.rollback();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Jdbc3KeyGeneratorTest.java", "stars": "15", "class": {"name": "Jdbc3KeyGeneratorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldAssingKeysToCollection", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldAssingKeysToCollection() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      try {        CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);        Set<Country> countries = new HashSet<>();        countries.add(new Country(\"China\", \"CN\"));        countries.add(new Country(\"United Kiongdom\", \"GB\"));        mapper.insertSet(countries);        for (Country country : countries) {          assertNotNull(country.getId());        }      } finally {        sqlSession.rollback();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Jdbc3KeyGeneratorTest.java", "stars": "15", "class": {"name": "Jdbc3KeyGeneratorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldAssingKeysToNamedCollection", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldAssingKeysToNamedCollection() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      try {        CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);        Set<Country> countries = new HashSet<>();        countries.add(new Country(\"China\", \"CN\"));        countries.add(new Country(\"United Kiongdom\", \"GB\"));        mapper.insertNamedSet(countries);        for (Country country : countries) {          assertNotNull(country.getId());        }      } finally {        sqlSession.rollback();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Jdbc3KeyGeneratorTest.java", "stars": "15", "class": {"name": "Jdbc3KeyGeneratorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldAssingKeysToArray", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldAssingKeysToArray() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      try {        CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);        Country[] countries = new Country[2];        countries[0] = new Country(\"China\", \"CN\");        countries[1] = new Country(\"United Kiongdom\", \"GB\");        mapper.insertArray(countries);        for (Country country : countries) {          assertNotNull(country.getId());        }      } finally {        sqlSession.rollback();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Jdbc3KeyGeneratorTest.java", "stars": "15", "class": {"name": "Jdbc3KeyGeneratorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldAssingKeysToNamedArray", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldAssingKeysToNamedArray() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      try {        CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);        Country[] countries = new Country[2];        countries[0] = new Country(\"China\", \"CN\");        countries[1] = new Country(\"United Kiongdom\", \"GB\");        mapper.insertNamedArray(countries);        for (Country country : countries) {          assertNotNull(country.getId());        }      } finally {        sqlSession.rollback();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Jdbc3KeyGeneratorTest.java", "stars": "15", "class": {"name": "Jdbc3KeyGeneratorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldAssignKeyToBean_MultiParams", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldAssignKeyToBean_MultiParams() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      try {        CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);        Country country = new Country(\"China\", \"CN\");        mapper.insertMultiParams(country, 1);        assertNotNull(country.getId());      } finally {        sqlSession.rollback();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Jdbc3KeyGeneratorTest.java", "stars": "15", "class": {"name": "Jdbc3KeyGeneratorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldFailIfKeyPropertyIsInvalid_NoParamName", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFailIfKeyPropertyIsInvalid_NoParamName() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      try {        CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);        Country country = new Country(\"China\", \"CN\");        when(() -> mapper.insertMultiParams_keyPropertyWithoutParamName(country, 1));        then(caughtException()).isInstanceOf(PersistenceException.class).hasMessageContaining(            \"Could not determine which parameter to assign generated keys to. \"                + \"Note that when there are multiple parameters, 'keyProperty' must include the parameter name (e.g. 'param.id'). \"                + \"Specified key properties are [id] and available parameters are [\");      } finally {        sqlSession.rollback();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Jdbc3KeyGeneratorTest.java", "stars": "15", "class": {"name": "Jdbc3KeyGeneratorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldFailIfKeyPropertyIsInvalid_WrongParamName", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFailIfKeyPropertyIsInvalid_WrongParamName() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      try {        CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);        Country country = new Country(\"China\", \"CN\");        when(() -> mapper.insertMultiParams_keyPropertyWithWrongParamName(country, 1));        then(caughtException()).isInstanceOf(PersistenceException.class).hasMessageContaining(            \"Could not find parameter 'bogus'. \"                + \"Note that when there are multiple parameters, 'keyProperty' must include the parameter name (e.g. 'param.id'). \"                + \"Specified key properties are [bogus.id] and available parameters are [\");      } finally {        sqlSession.rollback();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Jdbc3KeyGeneratorTest.java", "stars": "15", "class": {"name": "Jdbc3KeyGeneratorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldAssignKeysToNamedList_MultiParams", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldAssignKeysToNamedList_MultiParams() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      try {        CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);        List<Country> countries = new ArrayList<>();        countries.add(new Country(\"China\", \"CN\"));        countries.add(new Country(\"United Kiongdom\", \"GB\"));        mapper.insertList_MultiParams(countries, 1);        for (Country country : countries) {          assertNotNull(country.getId());        }      } finally {        sqlSession.rollback();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Jdbc3KeyGeneratorTest.java", "stars": "15", "class": {"name": "Jdbc3KeyGeneratorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldAssignKeysToNamedCollection_MultiParams", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldAssignKeysToNamedCollection_MultiParams() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      try {        CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);        Set<Country> countries = new HashSet<>();        countries.add(new Country(\"China\", \"CN\"));        countries.add(new Country(\"United Kiongdom\", \"GB\"));        mapper.insertSet_MultiParams(countries, 1);        for (Country country : countries) {          assertNotNull(country.getId());        }      } finally {        sqlSession.rollback();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Jdbc3KeyGeneratorTest.java", "stars": "15", "class": {"name": "Jdbc3KeyGeneratorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldAssignKeysToNamedArray_MultiParams", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldAssignKeysToNamedArray_MultiParams() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      try {        CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);        Country[] countries = new Country[2];        countries[0] = new Country(\"China\", \"CN\");        countries[1] = new Country(\"United Kiongdom\", \"GB\");        mapper.insertArray_MultiParams(countries, 1);        for (Country country : countries) {          assertNotNull(country.getId());        }      } finally {        sqlSession.rollback();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Jdbc3KeyGeneratorTest.java", "stars": "15", "class": {"name": "Jdbc3KeyGeneratorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldAssignMultipleGeneratedKeysToABean", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldAssignMultipleGeneratedKeysToABean() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      try {        CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);        Planet planet = new Planet();        planet.setName(\"pluto\");        mapper.insertPlanet(planet);        assertEquals(\"pluto-\" + planet.getId(), planet.getCode());      } finally {        sqlSession.rollback();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Jdbc3KeyGeneratorTest.java", "stars": "15", "class": {"name": "Jdbc3KeyGeneratorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldAssignMultipleGeneratedKeysToBeans", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldAssignMultipleGeneratedKeysToBeans() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      try {        CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);        Planet planet1 = new Planet();        planet1.setName(\"pluto\");        Planet planet2 = new Planet();        planet2.setName(\"neptune\");        List<Planet> planets = Arrays.asList(planet1, planet2);        mapper.insertPlanets(planets);        assertEquals(\"pluto-\" + planet1.getId(), planet1.getCode());        assertEquals(\"neptune-\" + planet2.getId(), planet2.getCode());      } finally {        sqlSession.rollback();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Jdbc3KeyGeneratorTest.java", "stars": "15", "class": {"name": "Jdbc3KeyGeneratorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldAssignMultipleGeneratedKeysToABean_MultiParams", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldAssignMultipleGeneratedKeysToABean_MultiParams() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      try {        CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);        Planet planet = new Planet();        planet.setName(\"pluto\");        mapper.insertPlanet_MultiParams(planet, 1);        assertEquals(\"pluto-\" + planet.getId(), planet.getCode());      } finally {        sqlSession.rollback();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Jdbc3KeyGeneratorTest.java", "stars": "15", "class": {"name": "Jdbc3KeyGeneratorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldAssignMultipleGeneratedKeysToABean_MultiParams_batch", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldAssignMultipleGeneratedKeysToABean_MultiParams_batch() {    try (SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.BATCH)) {      try {        CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);        Planet planet1 = new Planet();        planet1.setName(\"pluto\");        mapper.insertPlanet_MultiParams(planet1, 1);        Planet planet2 = new Planet();        planet2.setName(\"neptune\");        mapper.insertPlanet_MultiParams(planet2, 1);        sqlSession.flushStatements();        sqlSession.clearCache();        assertEquals(\"pluto-\" + planet1.getId(), planet1.getCode());        assertEquals(\"neptune-\" + planet2.getId(), planet2.getCode());      } finally {        sqlSession.rollback();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Jdbc3KeyGeneratorTest.java", "stars": "15", "class": {"name": "Jdbc3KeyGeneratorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldAssignMultipleGeneratedKeysToBeans_MultiParams", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldAssignMultipleGeneratedKeysToBeans_MultiParams() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      try {        CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);        Planet planet1 = new Planet();        planet1.setName(\"pluto\");        Planet planet2 = new Planet();        planet2.setName(\"neptune\");        List<Planet> planets = Arrays.asList(planet1, planet2);        mapper.insertPlanets_MultiParams(planets, 1);        assertEquals(\"pluto-\" + planet1.getId(), planet1.getCode());        assertEquals(\"neptune-\" + planet2.getId(), planet2.getCode());      } finally {        sqlSession.rollback();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Jdbc3KeyGeneratorTest.java", "stars": "15", "class": {"name": "Jdbc3KeyGeneratorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "assigningMultipleKeysToDifferentParams", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void assigningMultipleKeysToDifferentParams() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      try {        CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);        Planet planet = new Planet();        planet.setName(\"pluto\");        Map<String, Object> map = new HashMap<>();        mapper.insertAssignKeysToTwoParams(planet, map);        assertNotNull(planet.getId());        assertNotNull(map.get(\"code\"));      } finally {        sqlSession.rollback();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Jdbc3KeyGeneratorTest.java", "stars": "15", "class": {"name": "Jdbc3KeyGeneratorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "assigningMultipleKeysToDifferentParams_batch", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void assigningMultipleKeysToDifferentParams_batch() {    try (SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.BATCH)) {      try {        CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);        Planet planet1 = new Planet();        planet1.setName(\"pluto\");        Map<String, Object> map1 = new HashMap<>();        mapper.insertAssignKeysToTwoParams(planet1, map1);        Planet planet2 = new Planet();        planet2.setName(\"pluto\");        Map<String, Object> map2 = new HashMap<>();        mapper.insertAssignKeysToTwoParams(planet2, map2);        sqlSession.flushStatements();        sqlSession.clearCache();        assertNotNull(planet1.getId());        assertNotNull(map1.get(\"code\"));        assertNotNull(planet2.getId());        assertNotNull(map2.get(\"code\"));      } finally {        sqlSession.rollback();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Jdbc3KeyGeneratorTest.java", "stars": "15", "class": {"name": "Jdbc3KeyGeneratorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldErrorUndefineProperty", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldErrorUndefineProperty() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      try {        CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);        when(() -> mapper.insertUndefineKeyProperty(new Country(\"China\", \"CN\")));        then(caughtException()).isInstanceOf(PersistenceException.class).hasMessageContaining(                \"### Error updating database.  Cause: org.apache.ibatis.executor.ExecutorException: Error getting generated key or setting result to parameter object. Cause: org.apache.ibatis.executor.ExecutorException: No setter found for the keyProperty 'country_id' in 'org.apache.ibatis.submitted.keygen.Country'.\");      } finally {        sqlSession.rollback();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Jdbc3KeyGeneratorTest.java", "stars": "15", "class": {"name": "Jdbc3KeyGeneratorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldFailIfTooManyGeneratedKeys", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFailIfTooManyGeneratedKeys() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      try {        CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);        when(() -> mapper.tooManyGeneratedKeys(new Country()));        then(caughtException()).isInstanceOf(PersistenceException.class).hasMessageContaining(            \"Too many keys are generated. There are only 1 target objects.\");      } finally {        sqlSession.rollback();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Jdbc3KeyGeneratorTest.java", "stars": "15", "class": {"name": "Jdbc3KeyGeneratorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldFailIfTooManyGeneratedKeys_ParamMap", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFailIfTooManyGeneratedKeys_ParamMap() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      try {        CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);        when(() -> mapper.tooManyGeneratedKeysParamMap(new Country(), 1));        then(caughtException()).isInstanceOf(PersistenceException.class).hasMessageContaining(            \"Too many keys are generated. There are only 1 target objects.\");      } finally {        sqlSession.rollback();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Jdbc3KeyGeneratorTest.java", "stars": "15", "class": {"name": "Jdbc3KeyGeneratorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldFailIfTooManyGeneratedKeys_Batch", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFailIfTooManyGeneratedKeys_Batch() {    try (SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.BATCH)) {      try {        CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);        mapper.tooManyGeneratedKeysParamMap(new Country(), 1);        mapper.tooManyGeneratedKeysParamMap(new Country(), 1);        when(sqlSession::flushStatements);        then(caughtException()).isInstanceOf(PersistenceException.class).hasMessageContaining(            \"Too many keys are generated. There are only 2 target objects.\");      } finally {        sqlSession.rollback();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Jdbc3KeyGeneratorTest.java", "stars": "15", "class": {"name": "Jdbc3KeyGeneratorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldAssignKeysToListWithoutInvokingEqualsNorHashCode", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldAssignKeysToListWithoutInvokingEqualsNorHashCode() {    // gh-1719    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      try {        CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);        List<NpeCountry> countries = new ArrayList<>();        countries.add(new NpeCountry(\"China\", \"CN\"));        countries.add(new NpeCountry(\"United Kiongdom\", \"GB\"));        countries.add(new NpeCountry(\"United States of America\", \"US\"));        mapper.insertWeirdCountries(countries);        for (NpeCountry country : countries) {          assertNotNull(country.getId());        }      } finally {        sqlSession.rollback();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Jdbc3KeyGeneratorTest.java", "stars": "15", "class": {"name": "Jdbc3KeyGeneratorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldAssignKeyToAParamWithTrickyName", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldAssignKeyToAParamWithTrickyName() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      try {        CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);        Country country = new Country(\"China\", \"CN\");        mapper.singleParamWithATrickyName(country);        assertNotNull(country.getId());      } finally {        sqlSession.rollback();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Jdbc3KeyGeneratorTest.java", "stars": "15", "class": {"name": "Jdbc3KeyGeneratorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldAssingKeysToAMap", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldAssingKeysToAMap() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      try {        CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);        Map<String, Object> map = new HashMap<>();        map.put(\"countrycode\", \"CN\");        map.put(\"countryname\", \"China\");        mapper.insertMap(map);        assertNotNull(map.get(\"id\"));      } finally {        sqlSession.rollback();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/keygen/Jdbc3KeyGeneratorTest.java", "stars": "15", "class": {"name": "Jdbc3KeyGeneratorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "get", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "InputStream", "snippet": "  public InputStream get(final String key) {    throw new UnsupportedOperationException(        \"Not implemented yet. Use get(projectId, version) instead\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/storage/DatabaseStorage.java", "stars": "18", "class": {"name": "DatabaseStorage", "extends": null, "implements": ["Storage"], "modifiers": ["public"]}}, {"method_name": "get", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "ProjectFileHandler", "snippet": "  public ProjectFileHandler get(final int projectId, final int version) {    return this.projectLoader.getUploadedFile(projectId, version);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/storage/DatabaseStorage.java", "stars": "18", "class": {"name": "DatabaseStorage", "extends": null, "implements": ["Storage"], "modifiers": ["public"]}}, {"method_name": "put", "params": ["StorageMetadata", "File"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String put(final StorageMetadata metadata, final File localFile) {    this.projectLoader.uploadProjectFile(        metadata.getProjectId(),        metadata.getVersion(),        localFile, metadata.getUploader());    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/storage/DatabaseStorage.java", "stars": "18", "class": {"name": "DatabaseStorage", "extends": null, "implements": ["Storage"], "modifiers": ["public"]}}, {"method_name": "delete", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean delete(final String key) {    throw new UnsupportedOperationException(\"Delete is not supported\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/storage/DatabaseStorage.java", "stars": "18", "class": {"name": "DatabaseStorage", "extends": null, "implements": ["Storage"], "modifiers": ["public"]}}, {"method_name": "process", "params": ["RequestEvent", "SipLayer", "ServerTransaction"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void process(RequestEvent evt, SipLayer layer, ServerTransaction transaction) {\t\tRequest request = evt.getRequest();\t\tDialog dialog = evt.getDialog();\t\ttry {\t\t\tRequest ackRequest = null;\t\t\tCSeq csReq = (CSeq) request.getHeader(CSeq.NAME);\t\t\tackRequest = dialog.createAck(csReq.getSeqNumber());\t\t\tdialog.sendAck(ackRequest);\t\t\tSystem.out.println(\"send ack to callee:\" + ackRequest.toString());\t\t} catch (SipException e) {\t\t\te.printStackTrace();\t\t} catch (InvalidArgumentException e) {\t\t\te.printStackTrace();\t\t}\t\t\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/request/impl/AckRequestProcessor.java", "stars": "29", "class": {"name": "AckRequestProcessor", "extends": null, "implements": ["ISIPRequestProcessor"], "modifiers": ["public"]}}, {"method_name": "contextLoads", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void contextLoads() {    }", "url": "https://raw.githubusercontent.com/ihoneymon/rest-template-of-spring/master/server/src/test/java/io/honeymon/study/resttemplate/server/ServerApplicationTests.java", "stars": "4", "class": {"name": "ServerApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "fetchGenesisBlock", "params": ["InitConfigEntity"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean fetchGenesisBlock(InitConfigEntity configEntity) {        try {            FileUtils.copyFile(new File(modeService.getInitDir() + \"template/fetchGenesisBlock.sh\"), new File(modeService.getInstallPath() + \"cli/scripts/fetchGenesisBlock.sh\"));        } catch (IOException e) {            log.error(\"\u590d\u5236\u811a\u672c\u6587\u4ef6\u5f02\u5e38\", e);            e.printStackTrace();            return false;        }        String firstOrdererHost = configEntity.getOrdererHostConfig().keySet().iterator().next();        String ip = configEntity.getOrdererHostConfig().get(firstOrdererHost);        String firstOrdererHostAddress = firstOrdererHost + ip.substring(ip.lastIndexOf(\":\"));        String CHANNEL_NAME = configEntity.getNetwork() + \"-sys-channel\";        String ORDERER_CA = String.format(\"/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/%s/orderers/%s/msp/tlscacerts/tlsca.%s-cert.pem\", configEntity.getOrdererDomain(), firstOrdererHost, configEntity.getOrdererDomain());        String CORE_PEER_LOCALMSPID = \"OrdererMSP\";        String CORE_PEER_ADDRESS = firstOrdererHostAddress;        String CORE_PEER_TLS_ROOTCERT_FILE = String.format(\"/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/%s/orderers/%s/tls/ca.crt\", configEntity.getOrdererDomain(), firstOrdererHost);        String CORE_PEER_MSPCONFIGPATH = String.format(\"/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/%s/users/Admin@%s/msp\", configEntity.getOrdererDomain(), configEntity.getOrdererDomain());        String cmd = \"docker exec cli bash scripts/fetchGenesisBlock.sh \" + CHANNEL_NAME + \" \" + ORDERER_CA + \" \" + CORE_PEER_LOCALMSPID + \" \" + CORE_PEER_ADDRESS + \" \" + CORE_PEER_TLS_ROOTCERT_FILE + \" \" + CORE_PEER_MSPCONFIGPATH;        try {            ProcessUtil.execCmd(cmd, null, modeService.getInstallPath() + \"cli\");            File installGenesisFile = new File(modeService.getInstallPath() + \"channel-artifacts\" + File.separator + \"genesis.block\");            if (installGenesisFile.exists()) {                installGenesisFile.delete();            }            File initPathGenesisFile = new File(modeService.getInitDir() + \"fabric-net/cryptoAndConfig/channel-artifacts\" + File.separator + \"genesis.block\");            if (initPathGenesisFile.exists()) {                initPathGenesisFile.delete();            }            FileUtils.copyFile(new File(\"/var/run/genesis.block\"), new File(modeService.getInstallPath() + \"channel-artifacts\" + File.separator + \"genesis.block\"));            FileUtils.copyFile(new File(\"/var/run/genesis.block\"), initPathGenesisFile);        } catch (Exception e) {            // log.error(String.format(\"\u6267\u884c\u811a\u672c\u83b7\u53d6\u901a\u9053 %s \u914d\u7f6e\u5f02\u5e38\", CHANNEL_NAME), e);            log.error(String.format(\"An exception occurred while executing the script to get the configuration of channel %s\", CHANNEL_NAME), e);            e.printStackTrace();            return false;        }        return true;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/service/FabricCliService.java", "stars": "7", "class": {"name": "FabricCliService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllChannels", "params": ["InitConfigEntity"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> getAllChannels(InitConfigEntity initConfigEntity) throws IOException {        List<String> channelList = new ArrayList<>();        FileUtils.copyFile(new File(modeService.getInitDir() + \"template/list-channels.sh\"), new File(modeService.getInstallPath() + \"cli/scripts/list-channels.sh\"));        for (String host : initConfigEntity.getPeerHostConfig().keySet()) {            String ip = initConfigEntity.getPeerHostConfig().get(host);            int index = ip.lastIndexOf(\":\");            String port = ip.substring(index + 1);            String CORE_PEER_ADDRESS = host + \":\" + port;            String CORE_PEER_TLS_ROOTCERT_FILE = String.format(\"/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/%s/peers/%s/tls/ca.crt\", initConfigEntity.getPeerDomain(), host);            String CORE_PEER_TLS_CERT_FILE = String.format(\"/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/%s/peers/%s/tls/server.crt\", initConfigEntity.getPeerDomain(), host);            String CORE_PEER_TLS_KEY_FILE = String.format(\"/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/%s/peers/%s/tls/server.key\", initConfigEntity.getPeerDomain(), host);            try {                ProcessUtil.Result result = ProcessUtil.execCmd(\"docker exec cli bash scripts/list-channels.sh \" + CORE_PEER_ADDRESS + \" \" + CORE_PEER_TLS_ROOTCERT_FILE + \" \" + CORE_PEER_TLS_CERT_FILE + \" \" + CORE_PEER_TLS_KEY_FILE, null, modeService.getInstallPath() + \"cli\");                if (result.getCode() == 0) {                    String output = result.getData();                    int i = output.indexOf(\"joined:\");                    output = output.substring(i + \"joined:\".length());                    if (!StringUtils.isEmpty(output)) {                        output = output.trim();                        String[] channels = output.split(\"[\\n]\");                        if (channels != null && channels.length > 0) {                            for (String c : channels) {                                c = c.trim();                                if (StringUtils.isEmpty(c)) {                                    continue;                                }                                channelList.add(c);                            }                        }                    }                }            } catch (Exception e) {                // log.error(\"\u6267\u884c docker \u811a\u6b65\u83b7\u53d6\u901a\u9053\u5f02\u5e38\", e);                log.error(\"An exception occurred while executing script to get the channel\", e);                e.printStackTrace();            }        }        return channelList;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/service/FabricCliService.java", "stars": "7", "class": {"name": "FabricCliService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCliContainer", "params": ["String", "InitConfigEntity"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean createCliContainer(String destFilePath, InitConfigEntity initConfigEntity) {        if (!destFilePath.endsWith(File.separator)) {            destFilePath = destFilePath + File.separator;        }        FileUtil.makeFilePath(destFilePath + \"scripts\", true);        try {            if (!this.createCliYamlFile(destFilePath, initConfigEntity)) {                // log.error(\"\u521b\u5efacli\u5bb9\u5668\u76f8\u5173\u6587\u4ef6\u5931\u8d25\");                log.error(\"Failed to create the cli container\");                return false;            }        } catch (IOException e) {            // log.error(\"\u521b\u5efacli\u5bb9\u5668\u76f8\u5173\u6587\u4ef6\u5f02\u5e38\", e);            log.error(\"An exception occurred while creating the cli container \", e);            e.printStackTrace();            return false;        }        try {            ProcessUtil.Result result = ProcessUtil.execCmd(\"bash \" + destFilePath + \"start-peer.sh startCli\", null, destFilePath);            if (result.getCode() == 0) {                // log.info(\"\u542f\u52a8 cli \u5bb9\u5668\u6210\u529f\");                log.info(\"Started cli container successfully\");                return true;            }        } catch (Exception e) {            // log.error(\"\u6267\u884c\u542f\u52a8 cli \u5bb9\u5668\u7684\u811a\u672c\u5f02\u5e38\", e);            log.error(\"An exception occurred while executing the script of the cli container\", e);            e.printStackTrace();        }        return false;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/service/FabricCliService.java", "stars": "7", "class": {"name": "FabricCliService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCliYamlFile", "params": ["String", "InitConfigEntity"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean createCliYamlFile(String destFilePath, InitConfigEntity initConfig) throws IOException {        Map<Object, Object> peerComposeConfig = yamlFileService.loadYamlFile(modeService.getInitDir() + \"template/docker-compose-peer.yaml\");        Map<Object, Object> networks = (Map<Object, Object>) peerComposeConfig.get(\"networks\");        networks.clear();        String network = initConfig.getNetwork() + \"-cli\";        networks.put(network, null);        peerComposeConfig.remove(\"volumes\");        Map<Object, Object> services = (Map<Object, Object>) peerComposeConfig.get(\"services\");        Map<Object, Object> cliConfig = (Map<Object, Object>) services.get(\"cli\");        services.clear();        cliConfig.remove(\"depends_on\");        String orgUrl = initConfig.getPeerDomain();        String peerHost = initConfig.getPeerHostConfig().keySet().iterator().next();        String peerIp = initConfig.getPeerHostConfig().get(peerHost);        String onlyHost = peerHost.substring(0, peerHost.indexOf(\".\"));        List<String> newEnvironment = new ArrayList<>();        List<String> environment = (List<String>) cliConfig.get(\"environment\");        for (String oldEnv : environment) {            String newEnv;            if (oldEnv.contains(\"CORE_PEER_ADDRESS\")) {                newEnv = \"CORE_PEER_ADDRESS=\" + peerHost + peerIp.substring(peerIp.lastIndexOf(\":\"));            } else if (oldEnv.contains(\"CORE_PEER_LOCALMSPID\")) {                newEnv = \"CORE_PEER_LOCALMSPID=\" + initConfig.getOrgMSPID();            } else if (oldEnv.contains(\"CORE_PEER_TLS_CERT_FILE\")) {                newEnv = String.format(oldEnv, orgUrl, onlyHost);            } else if (oldEnv.contains(\"CORE_PEER_TLS_KEY_FILE\")) {                newEnv = String.format(oldEnv, orgUrl, onlyHost);            } else if (oldEnv.contains(\"CORE_PEER_TLS_ROOTCERT_FILE\")) {                newEnv = String.format(oldEnv, orgUrl, onlyHost);            } else if (oldEnv.contains(\"CORE_PEER_MSPCONFIGPATH\")) {                newEnv = String.format(oldEnv, orgUrl, orgUrl);            } else {                newEnv = oldEnv;            }            newEnvironment.add(newEnv);        }        cliConfig.put(\"environment\", newEnvironment);        cliConfig.put(\"networks\", new ArrayList<String>() {{            add(network);        }});        List<String> extraHosts = new ArrayList<>();        for (String eHost : initConfig.getOrdererHostConfig().keySet()) {            String eIp = initConfig.getOrdererHostConfig().get(eHost);            eIp = eIp.substring(0, eIp.lastIndexOf(\":\"));            if (eIp.equalsIgnoreCase(\"127.0.0.1\")) {                eIp = NetUtil.getMyNormalIP();            }            extraHosts.add(eHost + \":\" + eIp);        }        for (String eHost : initConfig.getPeerHostConfig().keySet()) {            String eIp = initConfig.getPeerHostConfig().get(eHost);            eIp = eIp.substring(0, eIp.lastIndexOf(\":\"));            if (eIp.equalsIgnoreCase(\"127.0.0.1\")) {                eIp = NetUtil.getMyNormalIP();            }            extraHosts.add(eHost + \":\" + eIp);        }        cliConfig.put(\"extra_hosts\", extraHosts);        services.put(\"cli\", cliConfig);        if (!destFilePath.endsWith(File.separator)) {            destFilePath = destFilePath + File.separator;        }        FileUtil.makeFilePath(destFilePath, false);        String yamlFilePath = destFilePath + \"docker-compose-peer.yaml\";        if (!yamlFileService.writeObjectToYamlFile(peerComposeConfig, yamlFilePath)) {            return false;        }        // \u751f\u6210 start-peer.sh        /*String content = getFileContent(workingDir + \"template/start-peer.sh\");        String newFilePath = destFilePath + \"start-peer.sh\";        if (!writeFileContent(newFilePath, content)) {            return false;        }*/        String newShFilePath = destFilePath + \"start-peer.sh\";        String srcShFilePat = modeService.getInitDir() + \"template/start-peer.sh\";        FileUtils.copyFile(new File(srcShFilePat), new File(newShFilePath));        return true;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/service/FabricCliService.java", "stars": "7", "class": {"name": "FabricCliService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setParametersThrowsProperException", "params": [], "throws": ["SQLException"], "modifiers": [], "return_type": "void", "snippet": "  void setParametersThrowsProperException() throws SQLException {    final MappedStatement mappedStatement = getMappedStatement();    final Object parameterObject = null;    final BoundSql boundSql = mock(BoundSql.class);    TypeHandler<Object> typeHandler = mock(TypeHandler.class);    doThrow(new SQLException(\"foo\")).when(typeHandler).setParameter(any(PreparedStatement.class), anyInt(), any(), any(JdbcType.class));    ParameterMapping parameterMapping = new ParameterMapping.Builder(mappedStatement.getConfiguration(), \"prop\", typeHandler).build();    List<ParameterMapping> parameterMappings = Collections.singletonList(parameterMapping);    when(boundSql.getParameterMappings()).thenReturn(parameterMappings);    DefaultParameterHandler defaultParameterHandler = new DefaultParameterHandler(mappedStatement, parameterObject, boundSql);    PreparedStatement ps = mock(PreparedStatement.class);    try {      defaultParameterHandler.setParameters(ps);      Assertions.fail(\"Should have thrown TypeException\");    } catch (Exception e) {      Assertions.assertTrue(e instanceof TypeException, \"expected TypeException\");      Assertions.assertTrue(e.getMessage().contains(\"mapping: ParameterMapping\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/scripting/defaults/DefaultParameterHandlerTest.java", "stars": "15", "class": {"name": "DefaultParameterHandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getMappedStatement", "params": [], "throws": null, "modifiers": [], "return_type": "MappedStatement", "snippet": "  MappedStatement getMappedStatement() {    final Configuration config = new Configuration();    final TypeHandlerRegistry registry = config.getTypeHandlerRegistry();    return new MappedStatement.Builder(config, \"testSelect\", new StaticSqlSource(config, \"some select statement\"), SqlCommandType.SELECT).resultMaps(        new ArrayList<ResultMap>() {          {            add(new ResultMap.Builder(config, \"testMap\", HashMap.class, new ArrayList<ResultMapping>() {              {                add(new ResultMapping.Builder(config, \"cOlUmN1\", \"CoLuMn1\", registry.getTypeHandler(Integer.class)).build());              }            }).build());          }        }).build();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/scripting/defaults/DefaultParameterHandlerTest.java", "stars": "15", "class": {"name": "DefaultParameterHandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "set", "params": ["String", "ImageView", "Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void set(String url, ImageView src, Context context) {        try {            RequestOptions requestOptions = new RequestOptions()                    .diskCacheStrategy(DiskCacheStrategy.AUTOMATIC)                    .dontAnimate();            Glide.with(context).load(url.concat(\"&token=\").concat(new SketchcodeUtil.User(context).getToken())).apply(requestOptions).into(src);        } catch (Exception e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/util/GlideUtil.java", "stars": "4", "class": {"name": "GlideUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "set", "params": ["int", "ImageView", "Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void set(int attachmentId, ImageView src, Context context) {        if (context != null) {            RequestOptions requestOptions = new RequestOptions()                    .diskCacheStrategy(DiskCacheStrategy.AUTOMATIC)                    .dontAnimate();            Glide.with(context)                    .load(BASE_HOST.concat(\"attachment/get?id=\").concat(String.valueOf(attachmentId)).concat(\"&token=\").concat(new SketchcodeUtil.User(context).getToken()))                    .apply(requestOptions)                    .into(src);        }    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/util/GlideUtil.java", "stars": "4", "class": {"name": "GlideUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "set", "params": ["File", "ImageView", "Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void set(File file, ImageView src, Context context)    {        if (context != null) {            RequestOptions requestOptions = new RequestOptions()                    .diskCacheStrategy(DiskCacheStrategy.AUTOMATIC)                    .error(R.mipmap.ic_launcher)                    .dontAnimate();            Glide.with(context)                    .load(file)                    .apply(requestOptions)                    .into(src);        }    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/util/GlideUtil.java", "stars": "4", "class": {"name": "GlideUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "inflate", "params": ["Context", "int"], "throws": null, "modifiers": ["static"], "return_type": "View", "snippet": "    static View inflate(Context applicationContext, int layoutId) {        LayoutInflater inflate = (LayoutInflater) applicationContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);        return inflate.inflate(layoutId, null);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/Util.java", "stars": "2", "class": {"name": "Util", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hasPermission", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean hasPermission(Context context) {        return Settings.canDrawOverlays(context);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/Util.java", "stars": "2", "class": {"name": "Util", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getScreenWidth", "params": ["Context"], "throws": null, "modifiers": ["static"], "return_type": "int", "snippet": "    static int getScreenWidth(Context context) {        if (sPoint == null) {            sPoint = new Point();            WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);            wm.getDefaultDisplay().getSize(sPoint);        }        return sPoint.x;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/Util.java", "stars": "2", "class": {"name": "Util", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getScreenHeight", "params": ["Context"], "throws": null, "modifiers": ["static"], "return_type": "int", "snippet": "    static int getScreenHeight(Context context) {        if (sPoint == null) {            sPoint = new Point();            WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);            wm.getDefaultDisplay().getSize(sPoint);        }        return sPoint.y;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/Util.java", "stars": "2", "class": {"name": "Util", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "configure", "params": ["Object", "ApplicationContext"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void configure(Object t,ApplicationContext context) {        Class<?> implClass = t.getClass();        for (Field field : implClass.getDeclaredFields()) {            InjectProperty annotation = field.getAnnotation(InjectProperty.class);           if (annotation != null) {                String value = annotation.value().isEmpty() ? propertiesMap.get(field.getName()) : propertiesMap.get(annotation.value());                field.setAccessible(true);                field.set(t,value);            }        }    }", "url": "https://raw.githubusercontent.com/Jeka1978/coronadesinfectorlifedemo/master/src/main/java/com/epam/InjectPropertyAnnotationObjectConfigurator.java", "stars": "60", "class": {"name": "InjectPropertyAnnotationObjectConfigurator", "extends": null, "implements": ["ObjectConfigurator"], "modifiers": ["public"]}}, {"method_name": "judge", "params": ["Role"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String judge(Role role){        RoleContext roleContext = new RoleContext(role);        String execute = roleContext.execute();        return execute;    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/strategy/JudgeRole.java", "stars": "2", "class": {"name": "JudgeRole", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "optionPlayer", "params": ["SwitchVideo", "String", "boolean", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void optionPlayer(final SwitchVideo gsyVideoPlayer, String url, boolean cache, String title) {        //\u589e\u52a0title        gsyVideoPlayer.getTitleTextView().setVisibility(View.GONE);        //\u8bbe\u7f6e\u8fd4\u56de\u952e        gsyVideoPlayer.getBackButton().setVisibility(View.GONE);        //\u8bbe\u7f6e\u5168\u5c4f\u6309\u952e\u529f\u80fd        gsyVideoPlayer.getFullscreenButton().setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                gsyVideoPlayer.startWindowFullscreen(gsyVideoPlayer.getContext(), false, true);            }        });        //\u662f\u5426\u6839\u636e\u89c6\u9891\u5c3a\u5bf8\uff0c\u81ea\u52a8\u9009\u62e9\u7ad6\u5c4f\u5168\u5c4f\u6216\u8005\u6a2a\u5c4f\u5168\u5c4f        gsyVideoPlayer.setAutoFullWithSize(true);        //\u97f3\u9891\u7126\u70b9\u51b2\u7a81\u65f6\u662f\u5426\u91ca\u653e        gsyVideoPlayer.setReleaseWhenLossAudio(true);        //\u5168\u5c4f\u52a8\u753b        gsyVideoPlayer.setShowFullAnimation(false);        //\u5c0f\u5c4f\u65f6\u4e0d\u89e6\u6478\u6ed1\u52a8        gsyVideoPlayer.setIsTouchWiget(false);        gsyVideoPlayer.setSwitchUrl(url);        gsyVideoPlayer.setSwitchCache(cache);        gsyVideoPlayer.setSwitchTitle(title);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/switchplay/SwitchUtil.java", "stars": "2", "class": {"name": "SwitchUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "savePlayState", "params": ["SwitchVideo"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void savePlayState(SwitchVideo switchVideo) {        sSwitchVideo = switchVideo.saveState();        sMediaPlayerListener = switchVideo;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/switchplay/SwitchUtil.java", "stars": "2", "class": {"name": "SwitchUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clonePlayState", "params": ["SwitchVideo"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void clonePlayState(SwitchVideo switchVideo) {        switchVideo.cloneState(sSwitchVideo);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/switchplay/SwitchUtil.java", "stars": "2", "class": {"name": "SwitchUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "release", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void release() {        if (sMediaPlayerListener != null) {            sMediaPlayerListener.onAutoCompletion();        }        sSwitchVideo = null;        sMediaPlayerListener = null;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/switchplay/SwitchUtil.java", "stars": "2", "class": {"name": "SwitchUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "registerAllExtensions", "params": ["com"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void registerAllExtensions(      com.google.protobuf.ExtensionRegistryLite registry) {  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloWorldProto.java", "stars": "3", "class": {"name": "HelloWorldProto", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "registerAllExtensions", "params": ["com"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void registerAllExtensions(      com.google.protobuf.ExtensionRegistry registry) {    registerAllExtensions(        (com.google.protobuf.ExtensionRegistryLite) registry);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloWorldProto.java", "stars": "3", "class": {"name": "HelloWorldProto", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getDescriptor", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "com", "snippet": "  public static com.google.protobuf.Descriptors.FileDescriptor      getDescriptor() {    return descriptor;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/HelloWorldProto.java", "stars": "3", "class": {"name": "HelloWorldProto", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "performFiltering", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "android", "snippet": "\tpublic android.widget.Filter.FilterResults performFiltering (java.lang.CharSequence p0)\t{\t\treturn n_performFiltering (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellSearchViewAdapter_CustomFilter.java", "stars": "2", "class": {"name": "ShellSearchViewAdapter_CustomFilter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_performFiltering", "params": ["java"], "throws": null, "modifiers": ["native", "private"], "return_type": "android", "snippet": "\tprivate native android.widget.Filter.FilterResults n_performFiltering (java.lang.CharSequence p0);\tpublic void publishResults (java.lang.CharSequence p0, android.widget.Filter.FilterResults p1)\t{\t\tn_publishResults (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellSearchViewAdapter_CustomFilter.java", "stars": "2", "class": {"name": "ShellSearchViewAdapter_CustomFilter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "publishResults", "params": ["java", "android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void publishResults (java.lang.CharSequence p0, android.widget.Filter.FilterResults p1)\t{\t\tn_publishResults (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellSearchViewAdapter_CustomFilter.java", "stars": "2", "class": {"name": "ShellSearchViewAdapter_CustomFilter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_publishResults", "params": ["java", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_publishResults (java.lang.CharSequence p0, android.widget.Filter.FilterResults p1);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellSearchViewAdapter_CustomFilter.java", "stars": "2", "class": {"name": "ShellSearchViewAdapter_CustomFilter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellSearchViewAdapter_CustomFilter.java", "stars": "2", "class": {"name": "ShellSearchViewAdapter_CustomFilter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellSearchViewAdapter_CustomFilter.java", "stars": "2", "class": {"name": "ShellSearchViewAdapter_CustomFilter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "getConnecttion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Connection", "snippet": "    public Connection getConnecttion() {        return DBUtil.getConnection(dataBaseType, jdbcUrl, userName, password, proxyHost, proxyPort);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/util/JdbcConnectionFactory.java", "stars": "23", "class": {"name": "JdbcConnectionFactory", "extends": null, "implements": ["ConnectionFactory"], "modifiers": ["public"]}}, {"method_name": "getConnecttionWithoutRetry", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Connection", "snippet": "    public Connection getConnecttionWithoutRetry() {        return DBUtil.getConnectionWithoutRetry(dataBaseType, jdbcUrl, userName, password, proxyHost, proxyPort);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/util/JdbcConnectionFactory.java", "stars": "23", "class": {"name": "JdbcConnectionFactory", "extends": null, "implements": ["ConnectionFactory"], "modifiers": ["public"]}}, {"method_name": "getConnectionInfo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getConnectionInfo() {        return \"jdbcUrl:\" + jdbcUrl;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/util/JdbcConnectionFactory.java", "stars": "23", "class": {"name": "JdbcConnectionFactory", "extends": null, "implements": ["ConnectionFactory"], "modifiers": ["public"]}}, {"method_name": "getActiveCases", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getActiveCases() {        return activeCases;    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/model/DataStats.java", "stars": "2", "class": {"name": "DataStats", "extends": null, "implements": ["Parcelable"], "modifiers": ["public"]}}, {"method_name": "setActiveCases", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setActiveCases(int activeCases) {        this.activeCases = activeCases;    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/model/DataStats.java", "stars": "2", "class": {"name": "DataStats", "extends": null, "implements": ["Parcelable"], "modifiers": ["public"]}}, {"method_name": "getCured", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCured() {        return cured;    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/model/DataStats.java", "stars": "2", "class": {"name": "DataStats", "extends": null, "implements": ["Parcelable"], "modifiers": ["public"]}}, {"method_name": "setCured", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCured(int cured) {        this.cured = cured;    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/model/DataStats.java", "stars": "2", "class": {"name": "DataStats", "extends": null, "implements": ["Parcelable"], "modifiers": ["public"]}}, {"method_name": "getDeath", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getDeath() {        return death;    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/model/DataStats.java", "stars": "2", "class": {"name": "DataStats", "extends": null, "implements": ["Parcelable"], "modifiers": ["public"]}}, {"method_name": "setDeath", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDeath(int death) {        this.death = death;    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/model/DataStats.java", "stars": "2", "class": {"name": "DataStats", "extends": null, "implements": ["Parcelable"], "modifiers": ["public"]}}, {"method_name": "getCountry", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getCountry() {        return country;    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/model/DataStats.java", "stars": "2", "class": {"name": "DataStats", "extends": null, "implements": ["Parcelable"], "modifiers": ["public"]}}, {"method_name": "setCountry", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCountry(String country) {        this.country = country;    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/model/DataStats.java", "stars": "2", "class": {"name": "DataStats", "extends": null, "implements": ["Parcelable"], "modifiers": ["public"]}}, {"method_name": "getCountryCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getCountryCode() {        return countryCode;    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/model/DataStats.java", "stars": "2", "class": {"name": "DataStats", "extends": null, "implements": ["Parcelable"], "modifiers": ["public"]}}, {"method_name": "setCountryCode", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCountryCode(String countryCode) {        this.countryCode = countryCode;    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/model/DataStats.java", "stars": "2", "class": {"name": "DataStats", "extends": null, "implements": ["Parcelable"], "modifiers": ["public"]}}, {"method_name": "getDate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDate() {        return date;    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/model/DataStats.java", "stars": "2", "class": {"name": "DataStats", "extends": null, "implements": ["Parcelable"], "modifiers": ["public"]}}, {"method_name": "setDate", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDate(String date) {        this.date = date;    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/model/DataStats.java", "stars": "2", "class": {"name": "DataStats", "extends": null, "implements": ["Parcelable"], "modifiers": ["public"]}}, {"method_name": "getPostive", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getPostive() {        return postive;    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/model/DataStats.java", "stars": "2", "class": {"name": "DataStats", "extends": null, "implements": ["Parcelable"], "modifiers": ["public"]}}, {"method_name": "setPostive", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPostive(int postive) {        this.postive = postive;    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/model/DataStats.java", "stars": "2", "class": {"name": "DataStats", "extends": null, "implements": ["Parcelable"], "modifiers": ["public"]}}, {"method_name": "describeContents", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int describeContents() {        return 0;    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/model/DataStats.java", "stars": "2", "class": {"name": "DataStats", "extends": null, "implements": ["Parcelable"], "modifiers": ["public"]}}, {"method_name": "writeToParcel", "params": ["Parcel", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void writeToParcel(Parcel dest, int flags) {        dest.writeStringArray(new String[] {String.valueOf(this.activeCases), String.valueOf(this.postive),                String.valueOf(this.cured), String.valueOf(this.death), this.countryCode, this.country, this.date});    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/model/DataStats.java", "stars": "2", "class": {"name": "DataStats", "extends": null, "implements": ["Parcelable"], "modifiers": ["public"]}}, {"method_name": "put", "params": ["String", "Bitmap"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean put(String key, Bitmap value) {\t\tif (super.put(key, value)) {\t\t\tusingCounts.put(value, 0);\t\t\treturn true;\t\t} else {\t\t\treturn false;\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/impl/UsingFreqLimitedMemoryCache.java", "stars": "74", "class": {"name": "UsingFreqLimitedMemoryCache", "extends": "LimitedMemoryCache", "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Bitmap", "snippet": "\tpublic Bitmap get(String key) {\t\tBitmap value = super.get(key);\t\t// Increment usage count for value if value is contained in hardCahe\t\tif (value != null) {\t\t\tInteger usageCount = usingCounts.get(value);\t\t\tif (usageCount != null) {\t\t\t\tusingCounts.put(value, usageCount + 1);\t\t\t}\t\t}\t\treturn value;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/impl/UsingFreqLimitedMemoryCache.java", "stars": "74", "class": {"name": "UsingFreqLimitedMemoryCache", "extends": "LimitedMemoryCache", "implements": null, "modifiers": ["public"]}}, {"method_name": "remove", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void remove(String key) {\t\tBitmap value = super.get(key);\t\tif (value != null) {\t\t\tusingCounts.remove(value);\t\t}\t\tsuper.remove(key);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/impl/UsingFreqLimitedMemoryCache.java", "stars": "74", "class": {"name": "UsingFreqLimitedMemoryCache", "extends": "LimitedMemoryCache", "implements": null, "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clear() {\t\tusingCounts.clear();\t\tsuper.clear();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/impl/UsingFreqLimitedMemoryCache.java", "stars": "74", "class": {"name": "UsingFreqLimitedMemoryCache", "extends": "LimitedMemoryCache", "implements": null, "modifiers": ["public"]}}, {"method_name": "getSize", "params": ["Bitmap"], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "\tprotected int getSize(Bitmap value) {\t\treturn value.getRowBytes() * value.getHeight();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/impl/UsingFreqLimitedMemoryCache.java", "stars": "74", "class": {"name": "UsingFreqLimitedMemoryCache", "extends": "LimitedMemoryCache", "implements": null, "modifiers": ["public"]}}, {"method_name": "removeNext", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Bitmap", "snippet": "\tprotected Bitmap removeNext() {\t\tInteger minUsageCount = null;\t\tBitmap leastUsedValue = null;\t\tSet<Entry<Bitmap, Integer>> entries = usingCounts.entrySet();\t\tsynchronized (usingCounts) {\t\t\tfor (Entry<Bitmap, Integer> entry : entries) {\t\t\t\tif (leastUsedValue == null) {\t\t\t\t\tleastUsedValue = entry.getKey();\t\t\t\t\tminUsageCount = entry.getValue();\t\t\t\t} else {\t\t\t\t\tInteger lastValueUsage = entry.getValue();\t\t\t\t\tif (lastValueUsage < minUsageCount) {\t\t\t\t\t\tminUsageCount = lastValueUsage;\t\t\t\t\t\tleastUsedValue = entry.getKey();\t\t\t\t\t}\t\t\t\t}\t\t\t}\t\t}\t\tusingCounts.remove(leastUsedValue);\t\treturn leastUsedValue;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/impl/UsingFreqLimitedMemoryCache.java", "stars": "74", "class": {"name": "UsingFreqLimitedMemoryCache", "extends": "LimitedMemoryCache", "implements": null, "modifiers": ["public"]}}, {"method_name": "createReference", "params": ["Bitmap"], "throws": null, "modifiers": ["protected"], "return_type": "Reference<Bitmap>", "snippet": "\tprotected Reference<Bitmap> createReference(Bitmap value) {\t\treturn new WeakReference<Bitmap>(value);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/impl/UsingFreqLimitedMemoryCache.java", "stars": "74", "class": {"name": "UsingFreqLimitedMemoryCache", "extends": "LimitedMemoryCache", "implements": null, "modifiers": ["public"]}}, {"method_name": "hasMore", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean hasMore () {\t\treturn index < end;\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/CharacterStream.java", "stars": "13", "class": {"name": "CharacterStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "peek", "params": [], "throws": null, "modifiers": ["public"], "return_type": "char", "snippet": "\tpublic char peek () {\t\tif (!hasMore()) {            throw new RuntimeException(\"No more characters in stream.\");        }\t\treturn source.charAt(index++);\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/CharacterStream.java", "stars": "13", "class": {"name": "CharacterStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "consume", "params": [], "throws": null, "modifiers": ["public"], "return_type": "char", "snippet": "\tpublic char consume () {\t\tif (!hasMore()) {            throw new RuntimeException(\"No more characters in stream.\");        }\t\treturn source.charAt(index++);\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/CharacterStream.java", "stars": "13", "class": {"name": "CharacterStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "match", "params": ["String", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean match (String needle, boolean consume) {\t\tint needleLength = needle.length();\t\tif(needleLength + index >end){\t\t\treturn false;\t\t}\t\tfor (int i = 0, j = index; i < needleLength; i++, j++) {\t\t\tif (index >= end) {                return false;            }\t\t\tif (needle.charAt(i) != source.charAt(j)) {                return false;            }\t\t}\t\tif (consume) {            index += needleLength;        }\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/CharacterStream.java", "stars": "13", "class": {"name": "CharacterStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "matchDigit", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean matchDigit (boolean consume) {\t\tif (index >= end) {            return false;        }\t\tchar c = source.charAt(index);\t\tif (Character.isDigit(c)) {\t\t\tif (consume) {                index++;            }\t\t\treturn true;\t\t}\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/CharacterStream.java", "stars": "13", "class": {"name": "CharacterStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "matchIdentifierStart", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean matchIdentifierStart (boolean consume) {\t\tif (index >= end) {            return false;        }\t\tchar c = source.charAt(index);\t\tif (Character.isJavaIdentifierStart(c) || c == '@') {\t\t\tif (consume) {                index++;            }\t\t\treturn true;\t\t}\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/CharacterStream.java", "stars": "13", "class": {"name": "CharacterStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "matchIdentifierPart", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean matchIdentifierPart (boolean consume) {\t\tif (index >= end) {            return false;        }\t\tchar c = source.charAt(index);\t\tif (Character.isJavaIdentifierPart(c)) {\t\t\tif (consume) {                index++;            }\t\t\treturn true;\t\t}\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/CharacterStream.java", "stars": "13", "class": {"name": "CharacterStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "skipWhiteSpace", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void skipWhiteSpace () {\t\twhile (true) {\t\t\tif (index >= end) {                return;            }\t\t\tchar c = source.charAt(index);\t\t\tif (c == ' ' || c == '\\n' || c == '\\r' || c == '\\t') {\t\t\t\tindex++;\t\t\t\tcontinue;\t\t\t} else {\t\t\t\tbreak;\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/CharacterStream.java", "stars": "13", "class": {"name": "CharacterStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "startSpan", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void startSpan () {\t\tspanStart = index;\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/CharacterStream.java", "stars": "13", "class": {"name": "CharacterStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "endSpan", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Span", "snippet": "\tpublic Span endSpan () {\t\treturn new Span(source, spanStart, index);\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/CharacterStream.java", "stars": "13", "class": {"name": "CharacterStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isSpanEmpty", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean isSpanEmpty () {\t\treturn spanStart == this.index;\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/CharacterStream.java", "stars": "13", "class": {"name": "CharacterStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPosition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getPosition () {\t\treturn index;\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/CharacterStream.java", "stars": "13", "class": {"name": "CharacterStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws IOException {        //1.\u521b\u5efaFileOutputStream\u5bf9\u8c61,\u6784\u9020\u65b9\u6cd5\u4e2d\u7ed1\u5b9a\u8981\u8f93\u51fa\u7684\u76ee\u7684\u5730        FileOutputStream fos = new FileOutputStream(\"10_IO\\\\a.txt\");        //2.\u521b\u5efaBufferedOutputStream\u5bf9\u8c61,\u6784\u9020\u65b9\u6cd5\u4e2d\u4f20\u9012FileOutputStream\u5bf9\u8c61\u5bf9\u8c61,\u63d0\u9ad8FileOutputStream\u5bf9\u8c61\u6548\u7387        BufferedOutputStream bos = new BufferedOutputStream(fos);        //3.\u4f7f\u7528BufferedOutputStream\u5bf9\u8c61\u4e2d\u7684\u65b9\u6cd5write,\u628a\u6570\u636e\u5199\u5165\u5230\u5185\u90e8\u7f13\u51b2\u533a\u4e2d        bos.write(\"\u6211\u628a\u6570\u636e\u5199\u5165\u5230\u5185\u90e8\u7f13\u51b2\u533a\u4e2d\".getBytes());        //4.\u4f7f\u7528BufferedOutputStream\u5bf9\u8c61\u4e2d\u7684\u65b9\u6cd5flush,\u628a\u5185\u90e8\u7f13\u51b2\u533a\u4e2d\u7684\u6570\u636e,\u5237\u65b0\u5230\u6587\u4ef6\u4e2d        bos.flush();        //5.\u91ca\u653e\u8d44\u6e90(\u4f1a\u5148\u8c03\u7528flush\u65b9\u6cd5\u5237\u65b0\u6570\u636e,\u7b2c4\u90e8\u53ef\u4ee5\u7701\u7565)        bos.close();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/17.%E3%80%90%E7%BA%BF%E7%A8%8B%E3%80%81%E5%90%8C%E6%AD%A5%E3%80%91-%E7%AC%94%E8%AE%B0/21.%E3%80%90%E7%BC%93%E5%86%B2%E6%B5%81%E3%80%81%E8%BD%AC%E6%8D%A2%E6%B5%81%E3%80%81%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81%E3%80%81%E6%89%93%E5%8D%B0%E6%B5%81%E3%80%91-%E7%AC%94%E8%AE%B0/code/10_IO/src/com/itheima/demo01/BufferedStream/Demo01BufferedOutputStream.java", "stars": "2", "class": {"name": "Demo01BufferedOutputStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setClassLoaderAndJar", "params": ["JobConf", "Class<?>"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void setClassLoaderAndJar(JobConf conf, Class<?> jobClass) {    conf.setClassLoader(Thread.currentThread().getContextClassLoader());    String jar =        findContainingJar(jobClass, Thread.currentThread()            .getContextClassLoader());    if (jar != null) {      conf.setJar(jar);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/javautils/HadoopUtils.java", "stars": "18", "class": {"name": "HadoopUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findContainingJar", "params": ["String", "ClassLoader"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String findContainingJar(String fileName, ClassLoader loader) {    try {      for (Enumeration<?> itr = loader.getResources(fileName); itr          .hasMoreElements();) {        URL url = (URL) itr.nextElement();        logger.info(\"findContainingJar finds url:\" + url);        if (\"jar\".equals(url.getProtocol())) {          String toReturn = url.getPath();          if (toReturn.startsWith(\"file:\")) {            toReturn = toReturn.substring(\"file:\".length());          }          toReturn = URLDecoder.decode(toReturn, \"UTF-8\");          return toReturn.replaceAll(\"!.*$\", \"\");        }      }    } catch (IOException e) {      throw new RuntimeException(e);    }    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/javautils/HadoopUtils.java", "stars": "18", "class": {"name": "HadoopUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findContainingJar", "params": ["Class<?>", "ClassLoader"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String findContainingJar(Class<?> my_class, ClassLoader loader) {    String class_file = my_class.getName().replaceAll(\"\\\\.\", \"/\") + \".class\";    return findContainingJar(class_file, loader);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/javautils/HadoopUtils.java", "stars": "18", "class": {"name": "HadoopUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldPathBeIgnored", "params": ["Path"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "  public static boolean shouldPathBeIgnored(Path path) throws IOException {    return path.getName().startsWith(\"_\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/javautils/HadoopUtils.java", "stars": "18", "class": {"name": "HadoopUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addAllSubPaths", "params": ["JobConf", "Path"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "JobConf", "snippet": "  public static JobConf addAllSubPaths(JobConf conf, Path path)      throws IOException {    if (shouldPathBeIgnored(path)) {      throw new IllegalArgumentException(String.format(          \"Path[%s] should be ignored.\", path));    }    final FileSystem fs = path.getFileSystem(conf);    if (fs.exists(path)) {      for (FileStatus status : fs.listStatus(path)) {        if (!shouldPathBeIgnored(status.getPath())) {          if (status.isDir()) {            addAllSubPaths(conf, status.getPath());          } else {            FileInputFormat.addInputPath(conf, status.getPath());          }        }      }    }    return conf;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/javautils/HadoopUtils.java", "stars": "18", "class": {"name": "HadoopUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPropsInJob", "params": ["Configuration", "Props"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void setPropsInJob(Configuration conf, Props props) {    ByteArrayOutputStream output = new ByteArrayOutputStream();    try {      props.storeFlattened(output);      conf.set(\"azkaban.props\", new String(output.toByteArray(), \"UTF-8\"));    } catch (IOException e) {      throw new RuntimeException(\"This is not possible!\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/javautils/HadoopUtils.java", "stars": "18", "class": {"name": "HadoopUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "saveProps", "params": ["Props", "String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void saveProps(Props props, String file) throws IOException {    Path path = new Path(file);    FileSystem fs = null;    fs = path.getFileSystem(new Configuration());    saveProps(fs, props, file);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/javautils/HadoopUtils.java", "stars": "18", "class": {"name": "HadoopUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "saveProps", "params": ["FileSystem", "Props", "String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void saveProps(FileSystem fs, Props props, String file)      throws IOException {    Path path = new Path(file);    // create directory if it does not exist.    Path parent = path.getParent();    if (!fs.exists(parent))      fs.mkdirs(parent);    // write out properties    OutputStream output = fs.create(path);    try {      props.storeFlattened(output);    } finally {      output.close();    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/javautils/HadoopUtils.java", "stars": "18", "class": {"name": "HadoopUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "draw", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void draw (android.graphics.Canvas p0)\t{\t\tn_draw (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellSearchView_ClipDrawableWrapper.java", "stars": "2", "class": {"name": "ShellSearchView_ClipDrawableWrapper", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_draw", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_draw (android.graphics.Canvas p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellSearchView_ClipDrawableWrapper.java", "stars": "2", "class": {"name": "ShellSearchView_ClipDrawableWrapper", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellSearchView_ClipDrawableWrapper.java", "stars": "2", "class": {"name": "ShellSearchView_ClipDrawableWrapper", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellSearchView_ClipDrawableWrapper.java", "stars": "2", "class": {"name": "ShellSearchView_ClipDrawableWrapper", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void run() {\t\t// TODO \u81ea\u52a8\u751f\u6210\u7684\u65b9\u6cd5\u5b58\u6839\t\twhile (true) {\t\t\ttry {\t\t\t\tThread.sleep(30000);\t\t\t\tclient.send(ByteUtils.hexToByteArray(heartByte));\t\t\t} catch (Exception e) {\t\t\t\t// TODO: handle exception\t\t\t\te.printStackTrace();\t\t\t}\t\t\t\t\t}\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/service/HeartByteService.java", "stars": "3", "class": {"name": "HeartByteService", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "set", "params": ["HttpServletResponse", "String", "String", "boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void set(HttpServletResponse response, String key, String value, boolean ifRemember) {\t\tint age = ifRemember?COOKIE_MAX_AGE:-1;\t\tset(response, key, value, null, COOKIE_PATH, age, true);\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/util/CookieUtil.java", "stars": "1", "class": {"name": "CookieUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "set", "params": ["HttpServletResponse", "String", "String", "String", "String", "int", "boolean"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "\tprivate static void set(HttpServletResponse response, String key, String value, String domain, String path, int maxAge, boolean isHttpOnly) {\t\tCookie cookie = new Cookie(key, value);\t\tif (domain != null) {\t\t\tcookie.setDomain(domain);\t\t}\t\tcookie.setPath(path);\t\tcookie.setMaxAge(maxAge);\t\tcookie.setHttpOnly(isHttpOnly);\t\tresponse.addCookie(cookie);\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/util/CookieUtil.java", "stars": "1", "class": {"name": "CookieUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getValue", "params": ["HttpServletRequest", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String getValue(HttpServletRequest request, String key) {\t\tCookie cookie = get(request, key);\t\tif (cookie != null) {\t\t\treturn cookie.getValue();\t\t}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/util/CookieUtil.java", "stars": "1", "class": {"name": "CookieUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": ["HttpServletRequest", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "Cookie", "snippet": "\tprivate static Cookie get(HttpServletRequest request, String key) {\t\tCookie[] arr_cookie = request.getCookies();\t\tif (arr_cookie != null && arr_cookie.length > 0) {\t\t\tfor (Cookie cookie : arr_cookie) {\t\t\t\tif (cookie.getName().equals(key)) {\t\t\t\t\treturn cookie;\t\t\t\t}\t\t\t}\t\t}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/util/CookieUtil.java", "stars": "1", "class": {"name": "CookieUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "remove", "params": ["HttpServletRequest", "HttpServletResponse", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void remove(HttpServletRequest request, HttpServletResponse response, String key) {\t\tCookie cookie = get(request, key);\t\tif (cookie != null) {\t\t\tset(response, key, \"\", null, COOKIE_PATH, 0, true);\t\t}\t}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/util/CookieUtil.java", "stars": "1", "class": {"name": "CookieUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setReportingInterval", "params": ["long"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "  public synchronized void setReportingInterval(final long val) {    this.timeWindow = val;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/metric/inmemoryemitter/InMemoryMetricEmitter.java", "stars": "18", "class": {"name": "InMemoryMetricEmitter", "extends": null, "implements": ["IMetricEmitter"], "modifiers": ["public"]}}, {"method_name": "setReportingInstances", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setReportingInstances(final long num) {    this.numInstances = num;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/metric/inmemoryemitter/InMemoryMetricEmitter.java", "stars": "18", "class": {"name": "InMemoryMetricEmitter", "extends": null, "implements": ["IMetricEmitter"], "modifiers": ["public"]}}, {"method_name": "reportMetric", "params": ["IMetric<?>"], "throws": ["MetricException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void reportMetric(final IMetric<?> metric) throws MetricException {    final String metricName = metric.getName();    if (!this.historyListMapping.containsKey(metricName)) {      logger.info(\"First time capturing metric: \" + metricName);      this.historyListMapping.put(metricName, new LinkedBlockingDeque<>());    }    synchronized (this.historyListMapping.get(metricName)) {      logger.debug(\"Ingesting metric: \" + metricName);      this.historyListMapping.get(metricName).add(new InMemoryHistoryNode(metric.getValue()));      cleanUsingTime(metricName, this.historyListMapping.get(metricName).peekLast().getTimestamp());    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/metric/inmemoryemitter/InMemoryMetricEmitter.java", "stars": "18", "class": {"name": "InMemoryMetricEmitter", "extends": null, "implements": ["IMetricEmitter"], "modifiers": ["public"]}}, {"method_name": "getMetrics", "params": ["String", "Date", "Date", "Boolean"], "throws": ["ClassCastException"], "modifiers": ["public"], "return_type": "List<InMemoryHistoryNode>", "snippet": "  public List<InMemoryHistoryNode> getMetrics(final String metricName, final Date from,      final Date to,      final Boolean useStats) throws ClassCastException {    final LinkedList<InMemoryHistoryNode> selectedLists = new LinkedList<>();    if (this.historyListMapping.containsKey(metricName)) {      logger.debug(\"selecting snapshots within time frame\");      synchronized (this.historyListMapping.get(metricName)) {        for (final InMemoryHistoryNode node : this.historyListMapping.get(metricName)) {          if (node.getTimestamp().after(from) && node.getTimestamp().before(to)) {            selectedLists.add(node);          }          if (node.getTimestamp().after(to)) {            break;          }        }      }      // selecting nodes if num of nodes > numInstances      if (useStats) {        statBasedSelectMetricHistory(selectedLists);      } else {        generalSelectMetricHistory(selectedLists);      }    }    cleanUsingTime(metricName, new Date());    return selectedLists;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/metric/inmemoryemitter/InMemoryMetricEmitter.java", "stars": "18", "class": {"name": "InMemoryMetricEmitter", "extends": null, "implements": ["IMetricEmitter"], "modifiers": ["public"]}}, {"method_name": "statBasedSelectMetricHistory", "params": ["LinkedList<InMemoryHistoryNode>"], "throws": ["ClassCastException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void statBasedSelectMetricHistory(final LinkedList<InMemoryHistoryNode> selectedLists)      throws ClassCastException {    logger.debug(\"selecting snapshots which are far away from mean value\");    final DescriptiveStatistics descStats = getDescriptiveStatistics(selectedLists);    final Double mean = descStats.getMean();    final Double std = descStats.getStandardDeviation();    final Iterator<InMemoryHistoryNode> ite = selectedLists.iterator();    while (ite.hasNext()) {      final InMemoryHistoryNode currentNode = ite.next();      final double value = ((Number) currentNode.getValue()).doubleValue();      // remove all elements which lies in 95% value band      if (value < mean + this.standardDeviationFactor * std          && value > mean - this.standardDeviationFactor * std) {        ite.remove();      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/metric/inmemoryemitter/InMemoryMetricEmitter.java", "stars": "18", "class": {"name": "InMemoryMetricEmitter", "extends": null, "implements": ["IMetricEmitter"], "modifiers": ["public"]}}, {"method_name": "getDescriptiveStatistics", "params": ["LinkedList<InMemoryHistoryNode>"], "throws": ["ClassCastException"], "modifiers": ["private"], "return_type": "DescriptiveStatistics", "snippet": "  private DescriptiveStatistics getDescriptiveStatistics(      final LinkedList<InMemoryHistoryNode> selectedLists)      throws ClassCastException {    final DescriptiveStatistics descStats = new DescriptiveStatistics();    for (final InMemoryHistoryNode node : selectedLists) {      descStats.addValue(((Number) node.getValue()).doubleValue());    }    return descStats;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/metric/inmemoryemitter/InMemoryMetricEmitter.java", "stars": "18", "class": {"name": "InMemoryMetricEmitter", "extends": null, "implements": ["IMetricEmitter"], "modifiers": ["public"]}}, {"method_name": "generalSelectMetricHistory", "params": ["LinkedList<InMemoryHistoryNode>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void generalSelectMetricHistory(final LinkedList<InMemoryHistoryNode> selectedLists) {    logger.debug(\"selecting snapshots evenly from across the time interval\");    if (selectedLists.size() > this.numInstances) {      final double step = (double) selectedLists.size() / this.numInstances;      long nextIndex = 0, currentIndex = 0, numSelectedInstances = 1;      final Iterator<InMemoryHistoryNode> ite = selectedLists.iterator();      while (ite.hasNext()) {        ite.next();        if (currentIndex == nextIndex) {          nextIndex = (long) Math.floor(numSelectedInstances * step + 0.5);          numSelectedInstances++;        } else {          ite.remove();        }        currentIndex++;      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/metric/inmemoryemitter/InMemoryMetricEmitter.java", "stars": "18", "class": {"name": "InMemoryMetricEmitter", "extends": null, "implements": ["IMetricEmitter"], "modifiers": ["public"]}}, {"method_name": "cleanUsingTime", "params": ["String", "Date"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void cleanUsingTime(final String metricName, final Date firstAllowedDate) {    if (this.historyListMapping.containsKey(metricName)        && this.historyListMapping.get(metricName) != null) {      synchronized (this.historyListMapping.get(metricName)) {        InMemoryHistoryNode firstNode = this.historyListMapping.get(metricName).peekFirst();        long localCopyOfTimeWindow = 0;        // go ahead for clean up using latest possible value of interval        // any interval change will not affect on going clean up        synchronized (this) {          localCopyOfTimeWindow = this.timeWindow;        }        // removing objects older than Interval time from firstAllowedDate        while (firstNode != null            && TimeUnit.MILLISECONDS            .toMillis(firstAllowedDate.getTime() - firstNode.getTimestamp().getTime())            > localCopyOfTimeWindow) {          this.historyListMapping.get(metricName).removeFirst();          firstNode = this.historyListMapping.get(metricName).peekFirst();        }      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/metric/inmemoryemitter/InMemoryMetricEmitter.java", "stars": "18", "class": {"name": "InMemoryMetricEmitter", "extends": null, "implements": ["IMetricEmitter"], "modifiers": ["public"]}}, {"method_name": "purgeAllData", "params": [], "throws": ["MetricException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void purgeAllData() throws MetricException {    this.historyListMapping.clear();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/metric/inmemoryemitter/InMemoryMetricEmitter.java", "stars": "18", "class": {"name": "InMemoryMetricEmitter", "extends": null, "implements": ["IMetricEmitter"], "modifiers": ["public"]}}, {"method_name": "validate", "params": ["DataSourceModel"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void validate(DataSourceModel ma) throws Exception {        // Validate if is Json       Map<String, Object> params = ma.resolveParams();       Set<String> keys = params.keySet();       if(!keys.contains(PARAM_META_STORE_PATH)){            throw new Exception(PARAM_META_STORE_PATH + \" cannot be found\");       }       String metaStorePaths = String.valueOf(params.get(PARAM_META_STORE_PATH));       for(String metaStorePath : metaStorePaths.split(SEPARATOR)){           if(!metaStorePath.trim().startsWith(\"thrift://\")){               throw new Exception(\"The structure of '\" + metaStorePath +\"' is illegal\");           }       }       if(!keys.contains(PARAM_HDFS_PATH)){           throw new Exception(PARAM_HDFS_PATH + \" cannot be found\");       }       String hdfsPath = String.valueOf(params.get(PARAM_HDFS_PATH));       if(!hdfsPath.startsWith(Hdfs.HDFS_PREFIX)){           throw new Exception(\"The structure of '\" + hdfsPath + \"' is illegal\");       }       validateKb(params);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/checks/HiveConnCheck.java", "stars": "23", "class": {"name": "HiveConnCheck", "extends": "AbstractDataSourceConnCheck", "implements": null, "modifiers": ["public"]}}, {"method_name": "check", "params": ["DataSource", "File"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void check(DataSource ds,  File file) throws Exception{        Map<String, Object> parameters = ds.resolveParams();        File kbFileTmp = null;        try {            if(isUseKb(parameters) && null == file){                if(ds.getId() > 0){                    kbFileTmp = getAuthFileFromDataSource(ds, AuthType.KERBERS, conf.getStoreTmp());                    file = kbFileTmp;                }                if(null == file){                    throw new RuntimeException(\"Keytab file has been lost\");                }            }            //Try to get connection of MetaStore            testHiveMeta(parameters, file);            //Try to get FileSystem            testHiveHDFSRelated(parameters, file);        }finally{            if(null != kbFileTmp){                if(!kbFileTmp.delete()){                    logger.info(\"Delete kerberos temp file Failed, Path:\" + kbFileTmp.getPath());                }            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/checks/HiveConnCheck.java", "stars": "23", "class": {"name": "HiveConnCheck", "extends": "AbstractDataSourceConnCheck", "implements": null, "modifiers": ["public"]}}, {"method_name": "testHiveMeta", "params": ["Map<String,Object>", "File"], "throws": ["Exception"], "modifiers": ["synchronized", "private"], "return_type": "void", "snippet": "    private synchronized void testHiveMeta(Map<String, Object> params, File kbFile) throws Exception {        boolean isUseKb = isUseKb(params);        Hive client;        if(isUseKb){            client = HiveMeta.getClient(params, kbFile, conf.getKbPrincipleHive());        }else{            String userName = String.valueOf(params.getOrDefault(PARAM_LADP_USERNAME, \"\"));            String password = String.valueOf(params.getOrDefault(PARAM_LADP_PASSWORD, \"\"));            if(StringUtils.isNotBlank(userName)) {                if (conf.isLdapSwitch()) {                    LdapConnector connector = LdapConnector.getInstance(conf.getLdapUrl(), conf.getLdapBaseDn());                    if (!connector.authenticate(userName, password)) {                        throw new RuntimeException(\"LDAP Authenticate failed\");                    }                } else {                    throw new RuntimeException(\"LDAP module does not be opened\");                }            }            client = HiveMeta.getClient(params, userName);        }        client.getMSC().close();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/checks/HiveConnCheck.java", "stars": "23", "class": {"name": "HiveConnCheck", "extends": "AbstractDataSourceConnCheck", "implements": null, "modifiers": ["public"]}}, {"method_name": "testHiveHDFSRelated", "params": ["Map<String,Object>", "File"], "throws": ["Exception"], "modifiers": ["synchronized", "private"], "return_type": "void", "snippet": "    private synchronized void testHiveHDFSRelated(Map<String, Object> params, File kbFile) throws Exception {        boolean isUseKb = isUseKb(params);        FileSystem fs;        if(isUseKb){            fs = Hdfs.getFileSystem(params, kbFile);        }else {            String userName = String.valueOf(params.getOrDefault(PARAM_LADP_USERNAME, \"\"));            String password = String.valueOf(params.getOrDefault(PARAM_LADP_PASSWORD, \"\"));            if(StringUtils.isNotBlank(userName)) {                if (conf.isLdapSwitch()) {                    LdapConnector connector = LdapConnector.getInstance(conf.getLdapUrl(), conf.getLdapBaseDn());                    if (!connector.authenticate(userName, password)) {                        throw new RuntimeException(\"LDAP Authenticate failed\");                    }                } else {                    throw new RuntimeException(\"LDAP module does not be opened\");                }            }            fs = Hdfs.getFileSystem(params, userName);        }        fs.close();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/checks/HiveConnCheck.java", "stars": "23", "class": {"name": "HiveConnCheck", "extends": "AbstractDataSourceConnCheck", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNodeId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getNodeId() {        return nodeId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/domain/ExecNodeTabRelation.java", "stars": "23", "class": {"name": "ExecNodeTabRelation", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setNodeId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setNodeId(Integer nodeId) {        this.nodeId = nodeId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/domain/ExecNodeTabRelation.java", "stars": "23", "class": {"name": "ExecNodeTabRelation", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTabIds", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Integer>", "snippet": "    public List<Integer> getTabIds() {        return tabIds;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/domain/ExecNodeTabRelation.java", "stars": "23", "class": {"name": "ExecNodeTabRelation", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTabIds", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTabIds(List<Integer> tabIds) {        this.tabIds = tabIds;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/domain/ExecNodeTabRelation.java", "stars": "23", "class": {"name": "ExecNodeTabRelation", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTabNames", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> getTabNames() {        return tabNames;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/domain/ExecNodeTabRelation.java", "stars": "23", "class": {"name": "ExecNodeTabRelation", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTabNames", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTabNames(List<String> tabNames) {        this.tabNames = tabNames;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/domain/ExecNodeTabRelation.java", "stars": "23", "class": {"name": "ExecNodeTabRelation", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/multipleresultsetswithassociation/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    // Could not get the table creation, procedure creation, and data population to work from the same script.    // Once it was in three scripts, all seemed well.    try (SqlSession session = sqlSessionFactory.openSession();         Connection conn = session.getConnection()) {      try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/multipleresultsetswithassociation/CreateDB1.sql\")) {        runReaderScript(conn, reader);      }      try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/multipleresultsetswithassociation/CreateDB2.sql\")) {        runReaderScript(conn, reader);      }      try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/multipleresultsetswithassociation/CreateDB3.sql\")) {        runReaderScript(conn, reader);      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/multipleresultsetswithassociation/MultipleResultSetTest.java", "stars": "15", "class": {"name": "MultipleResultSetTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "runReaderScript", "params": ["Connection", "Reader"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "  private static void runReaderScript(Connection conn, Reader reader) {    ScriptRunner runner = new ScriptRunner(conn);    runner.setLogWriter(null);    runner.setSendFullScript(true);    runner.setAutoCommit(true);    runner.setStopOnError(false);    runner.runScript(reader);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/multipleresultsetswithassociation/MultipleResultSetTest.java", "stars": "15", "class": {"name": "MultipleResultSetTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetOrderDetailsEachHavingAnOrderHeader", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetOrderDetailsEachHavingAnOrderHeader() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      //List<OrderDetail> orderDetails = mapper.getOrderDetailsWithHeaders();      // There are six order detail records in the database      // As long as the data does not change this should be successful      //Assertions.assertEquals(6, orderDetails.size());      // Each order detail should have a corresponding OrderHeader      // Only 2 of 6 orderDetails have orderHeaders     /* for(OrderDetail orderDetail : orderDetails){          Assertions.assertNotNull(orderDetail.getOrderHeader());      }*/    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/multipleresultsetswithassociation/MultipleResultSetTest.java", "stars": "15", "class": {"name": "MultipleResultSetTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetOrderDetailsEachHavingAnOrderHeaderAnnotationBased", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetOrderDetailsEachHavingAnOrderHeaderAnnotationBased() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      //List<OrderDetail> orderDetails = mapper.getOrderDetailsWithHeadersAnnotationBased();      // There are six order detail records in the database      // As long as the data does not change this should be successful      //Assertions.assertEquals(6, orderDetails.size());      // Each order detail should have a corresponding OrderHeader      // Only 2 of 6 orderDetails have orderHeaders     /* for(OrderDetail orderDetail : orderDetails){          Assertions.assertNotNull(orderDetail.getOrderHeader());      }*/    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/multipleresultsetswithassociation/MultipleResultSetTest.java", "stars": "15", "class": {"name": "MultipleResultSetTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "registerEvents", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void registerEvents();    protected abstract void registerComposers();    public Map<Integer, Class<? extends IMessageEvent>> getEvents() {        return this.events;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/messages/MessageConfiguration.java", "stars": "2", "class": {"name": "MessageConfiguration", "extends": null, "implements": ["IMessageConfiguration"], "modifiers": ["public", "abstract"]}}, {"method_name": "registerComposers", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void registerComposers();    public Map<Integer, Class<? extends IMessageEvent>> getEvents() {        return this.events;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/messages/MessageConfiguration.java", "stars": "2", "class": {"name": "MessageConfiguration", "extends": null, "implements": ["IMessageConfiguration"], "modifiers": ["public", "abstract"]}}, {"method_name": "getEvents", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<Integer,Class>", "snippet": "    public Map<Integer, Class<? extends IMessageEvent>> getEvents() {        return this.events;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/messages/MessageConfiguration.java", "stars": "2", "class": {"name": "MessageConfiguration", "extends": null, "implements": ["IMessageConfiguration"], "modifiers": ["public", "abstract"]}}, {"method_name": "getComposers", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<Integer,Class>", "snippet": "    public Map<Integer, Class<? extends IMessageComposer>> getComposers() {        return this.composers;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/messages/MessageConfiguration.java", "stars": "2", "class": {"name": "MessageConfiguration", "extends": null, "implements": ["IMessageConfiguration"], "modifiers": ["public", "abstract"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getId() {        return id;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/ProgramInfo.java", "stars": "4", "class": {"name": "ProgramInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(String id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/ProgramInfo.java", "stars": "4", "class": {"name": "ProgramInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/ProgramInfo.java", "stars": "4", "class": {"name": "ProgramInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/ProgramInfo.java", "stars": "4", "class": {"name": "ProgramInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getChannelInfo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ChannelInfo", "snippet": "    public ChannelInfo getChannelInfo() {        return channelInfo;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/ProgramInfo.java", "stars": "4", "class": {"name": "ProgramInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setChannelInfo", "params": ["ChannelInfo"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setChannelInfo(ChannelInfo channelInfo) {        this.channelInfo = channelInfo;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/ProgramInfo.java", "stars": "4", "class": {"name": "ProgramInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRawData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object getRawData() {        return rawData;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/ProgramInfo.java", "stars": "4", "class": {"name": "ProgramInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRawData", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRawData(Object rawData) {        this.rawData = rawData;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/ProgramInfo.java", "stars": "4", "class": {"name": "ProgramInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean equals(Object o) {        if (o instanceof ProgramInfo) {            ProgramInfo pi = (ProgramInfo) o;            return pi.id.equals(pi.id) &&                    pi.name.equals(pi.name);        }        return super.equals(o);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/ProgramInfo.java", "stars": "4", "class": {"name": "ProgramInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "validateUserName", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "    private static boolean validateUserName(String userName) {        return (!userName.equals(\"\") && (!userName.contains(\",\") && !userName.contains(\":\")                && !userName.contains(\"<\") && !userName.contains(\">\") && !userName.contains(\"=\")                && !userName.contains(\"\\n\") && !userName.contains(\"\\r\") && !userName.contains(\"\\t\")                && !userName.contains(\" \"))) && userName.chars().allMatch(Character::isLetter)                && !userName.equalsIgnoreCase(\"Server\");    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/ClientsManager.java", "stars": "2", "class": {"name": "ClientsManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUser", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "Client", "snippet": "    protected Client getUser(String userName) {        Client client = userTable.get(userName);        if (Optional.ofNullable(client).isPresent())            return client;        else            return null;    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/ClientsManager.java", "stars": "2", "class": {"name": "ClientsManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addClient", "params": ["Client", "String"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean addClient(Client client, String userName) {        if (ClientsManager.validateUserName(userName)) {            if (!userTable.containsKey(userName)) {                client.setUserName(userName);                userTable.put(userName, client);                return true;            } else                return false;        } else            return false;    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/ClientsManager.java", "stars": "2", "class": {"name": "ClientsManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUserNameList", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Set<String>", "snippet": "    protected Set<String> getUserNameList() {        return userTable.keySet();    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/ClientsManager.java", "stars": "2", "class": {"name": "ClientsManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeClient", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean removeClient(String userName) {        return Optional.ofNullable(userTable.remove(userName)).isPresent();    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/ClientsManager.java", "stars": "2", "class": {"name": "ClientsManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "create", "params": ["String", "String"], "throws": null, "modifiers": [], "return_type": "String", "snippet": "    String create(String name, String parameter) {        try (Connection connection = dataSource.getConnection();             PreparedStatement ps = connection.prepareStatement(INSERT_TASK)) {            String id = UUID.randomUUID().toString();            ps.setString(1, id);            ps.setString(2, name);            ps.setString(3, parameter);            ps.setLong(4, 0);            ps.setTimestamp(5, Timestamp.valueOf(systemClock.now()));            ps.setTimestamp(6, Timestamp.valueOf(systemClock.now()));            int insertedRows = ps.executeUpdate();            if (insertedRows != 1) {                throw new RuntimeException(\"Insertion failure\");            }            return id;        } catch (SQLException e) {            throw new RuntimeException(e);        }    }", "url": "https://raw.githubusercontent.com/oliverselinger/failsafe-executor/master/src/main/java/os/failsafe/executor/TaskInstances.java", "stars": "2", "class": {"name": "TaskInstances", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "findNextTask", "params": ["Connection"], "throws": null, "modifiers": [], "return_type": "Optional<TaskInstance>", "snippet": "    Optional<TaskInstance> findNextTask(Connection connection) {        try (PreparedStatement ps = connection.prepareStatement(QUERY_NEXT_TASK)) {            ps.setTimestamp(1, Timestamp.valueOf(systemClock.now().minusMinutes(DEAD_EXECUTIONS_TIMEOUT_IN_MINUTES)));            try (ResultSet rs = ps.executeQuery()) {                if (!rs.next()) {                    return Optional.empty();                } else {                    Timestamp start_time = rs.getTimestamp(\"START_TIME\");                    return Optional.of(new TaskInstance(                            rs.getString(\"ID\"),                            rs.getString(\"PARAMETER\"),                            rs.getString(\"NAME\"),                            rs.getBoolean(\"FAILED\"),                            start_time != null ? start_time.toLocalDateTime() : null,                            rs.getLong(\"VERSION\"),                            rs.getTimestamp(\"LAST_MODIFIED_DATE\").toInstant(),                            rs.getTimestamp(\"CREATED_DATE\").toInstant(),                            dataSource,                            systemClock));//                    do {////                    } while (rs.next());                }            }        } catch (SQLException e) {            throw new RuntimeException(e);        }    }", "url": "https://raw.githubusercontent.com/oliverselinger/failsafe-executor/master/src/main/java/os/failsafe/executor/TaskInstances.java", "stars": "2", "class": {"name": "TaskInstances", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "flush", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean flush() {        return true;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/communication/messages/parser/client/ClientPongParser.java", "stars": "2", "class": {"name": "ClientPongParser", "extends": null, "implements": ["IMessageParser"], "modifiers": ["public"]}}, {"method_name": "parse", "params": ["IMessageDataWrapper"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean parse(IMessageDataWrapper wrapper) {        if(wrapper == null) return false;        return true;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/communication/messages/parser/client/ClientPongParser.java", "stars": "2", "class": {"name": "ClientPongParser", "extends": null, "implements": ["IMessageParser"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        SpringApplication.run(Application.class, args);    }", "url": "https://raw.githubusercontent.com/falvojr/stackoverflow-61560293/master/src/main/java/com/falvojr/Application.java", "stars": "1", "class": {"name": "Application", "extends": null, "implements": ["CommandLineRunner"], "modifiers": ["public"]}}, {"method_name": "mongoClientOption", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MongoClientOptions", "snippet": "    public MongoClientOptions mongoClientOption() {        // I am using the PojoCodec to automatic parse my domain classes:        final CodecRegistry pojoCodecRegistry = fromProviders(PojoCodecProvider.builder().automatic(true).build());        final CodecRegistry fullCodecRegistry = fromRegistries(getDefaultCodecRegistry(), pojoCodecRegistry);        return MongoClientOptions.builder().codecRegistry(fullCodecRegistry).build();    }", "url": "https://raw.githubusercontent.com/falvojr/stackoverflow-61560293/master/src/main/java/com/falvojr/Application.java", "stars": "1", "class": {"name": "Application", "extends": null, "implements": ["CommandLineRunner"], "modifiers": ["public"]}}, {"method_name": "run", "params": ["String"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void run(String... args) throws Exception {        final String key = \"response\";        // Simulate my dynamic of entity insertion (with several domain classes into \"outbound\" field):        final Map<String, Object> map = new HashMap<>();        map.put(key, new MyClass1(\"attr1\", new MyClass2(1L)));        final Log log = new Log();        log.setOutbound(new Document(map));        logRepository.save(log);        // Find saved entity to try specific class conversion (MyClass1):        final Log logSaved = logRepository.findById(log.getId()).orElseThrow(RuntimeException::new);        try {            // Error occurs here, but in Spring Boot 1.X this conversion/cast works...            // Note: In Spring Boot 1, the \"_class\" field is present inside my \"outbound\" field.            final MyClass1 test = logSaved.getOutbound().get(key, MyClass1.class);            System.out.println(test);        } catch (Exception e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/falvojr/stackoverflow-61560293/master/src/main/java/com/falvojr/Application.java", "stars": "1", "class": {"name": "Application", "extends": null, "implements": ["CommandLineRunner"], "modifiers": ["public"]}}, {"method_name": "onActionProviderVisibilityChanged", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onActionProviderVisibilityChanged (boolean p0)\t{\t\tn_onActionProviderVisibilityChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v4/view/ActionProvider_VisibilityListenerImplementor.java", "stars": "2", "class": {"name": "ActionProvider_VisibilityListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onActionProviderVisibilityChanged", "params": ["boolean"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onActionProviderVisibilityChanged (boolean p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v4/view/ActionProvider_VisibilityListenerImplementor.java", "stars": "2", "class": {"name": "ActionProvider_VisibilityListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v4/view/ActionProvider_VisibilityListenerImplementor.java", "stars": "2", "class": {"name": "ActionProvider_VisibilityListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v4/view/ActionProvider_VisibilityListenerImplementor.java", "stars": "2", "class": {"name": "ActionProvider_VisibilityListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "surfaceChanged", "params": ["SurfaceHolder", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {        mSurfaceWidth = width;        mSurfaceHeight = height;        doLayout();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Compass/src/com/google/android/glass/sample/compass/CompassRenderer.java", "stars": "74", "class": {"name": "CompassRenderer", "extends": null, "implements": ["SurfaceHolder"], "modifiers": ["public"]}}, {"method_name": "surfaceCreated", "params": ["SurfaceHolder"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void surfaceCreated(SurfaceHolder holder) {        mHolder = holder;        mOrientationManager.addOnChangedListener(mCompassListener);        mOrientationManager.start();        if (mOrientationManager.hasLocation()) {            Location location = mOrientationManager.getLocation();            List<Place> nearbyPlaces = mLandmarks.getNearbyLandmarks(                    location.getLatitude(), location.getLongitude());            mCompassView.setNearbyPlaces(nearbyPlaces);        }        mRenderThread = new RenderThread();        mRenderThread.start();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Compass/src/com/google/android/glass/sample/compass/CompassRenderer.java", "stars": "74", "class": {"name": "CompassRenderer", "extends": null, "implements": ["SurfaceHolder"], "modifiers": ["public"]}}, {"method_name": "surfaceDestroyed", "params": ["SurfaceHolder"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void surfaceDestroyed(SurfaceHolder holder) {        mRenderThread.quit();        mOrientationManager.removeOnChangedListener(mCompassListener);        mOrientationManager.stop();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Compass/src/com/google/android/glass/sample/compass/CompassRenderer.java", "stars": "74", "class": {"name": "CompassRenderer", "extends": null, "implements": ["SurfaceHolder"], "modifiers": ["public"]}}, {"method_name": "doLayout", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void doLayout() {        // Measure and update the layout so that it will take up the entire surface space        // when it is drawn.        int measuredWidth = View.MeasureSpec.makeMeasureSpec(mSurfaceWidth,                View.MeasureSpec.EXACTLY);        int measuredHeight = View.MeasureSpec.makeMeasureSpec(mSurfaceHeight,                View.MeasureSpec.EXACTLY);        mLayout.measure(measuredWidth, measuredHeight);        mLayout.layout(0, 0, mLayout.getMeasuredWidth(), mLayout.getMeasuredHeight());    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Compass/src/com/google/android/glass/sample/compass/CompassRenderer.java", "stars": "74", "class": {"name": "CompassRenderer", "extends": null, "implements": ["SurfaceHolder"], "modifiers": ["public"]}}, {"method_name": "repaint", "params": [], "throws": null, "modifiers": ["synchronized", "private"], "return_type": "void", "snippet": "    private synchronized void repaint() {        Canvas canvas = null;        try {            canvas = mHolder.lockCanvas();        } catch (RuntimeException e) {            Log.d(TAG, \"lockCanvas failed\", e);        }        if (canvas != null) {            mLayout.draw(canvas);            try {                mHolder.unlockCanvasAndPost(canvas);            } catch (RuntimeException e) {                Log.d(TAG, \"unlockCanvasAndPost failed\", e);            }        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Compass/src/com/google/android/glass/sample/compass/CompassRenderer.java", "stars": "74", "class": {"name": "CompassRenderer", "extends": null, "implements": ["SurfaceHolder"], "modifiers": ["public"]}}, {"method_name": "updateTipsView", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void updateTipsView() {        int stringId = 0;        // Only one message (with magnetic interference being higher priority than pitch too steep)        // will be displayed in the tip.        if (mInterference) {            stringId = R.string.magnetic_interference;        } else if (mTooSteep) {            stringId = R.string.pitch_too_steep;        }        boolean show = (stringId != 0);        if (show) {            mTipsView.setText(stringId);            doLayout();        }        if (mTipsContainer.getAnimation() == null) {            float newAlpha = (show ? 1.0f : 0.0f);            mTipsContainer.animate().alpha(newAlpha).start();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Compass/src/com/google/android/glass/sample/compass/CompassRenderer.java", "stars": "74", "class": {"name": "CompassRenderer", "extends": null, "implements": ["SurfaceHolder"], "modifiers": ["public"]}}, {"method_name": "shouldRun", "params": [], "throws": null, "modifiers": ["synchronized", "private"], "return_type": "boolean", "snippet": "        private synchronized boolean shouldRun() {            return mShouldRun;        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Compass/src/com/google/android/glass/sample/compass/CompassRenderer.java", "stars": "74", "class": {"name": "RenderThread", "extends": "Thread", "implements": null, "modifiers": ["private"]}}, {"method_name": "quit", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "        public synchronized void quit() {            mShouldRun = false;        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Compass/src/com/google/android/glass/sample/compass/CompassRenderer.java", "stars": "74", "class": {"name": "RenderThread", "extends": "Thread", "implements": null, "modifiers": ["private"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void run() {            while (shouldRun()) {                long frameStart = SystemClock.elapsedRealtime();                repaint();                long frameLength = SystemClock.elapsedRealtime() - frameStart;                long sleepTime = FRAME_TIME_MILLIS - frameLength;                if (sleepTime > 0) {                    SystemClock.sleep(sleepTime);                }            }        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Compass/src/com/google/android/glass/sample/compass/CompassRenderer.java", "stars": "74", "class": {"name": "RenderThread", "extends": "Thread", "implements": null, "modifiers": ["private"]}}, {"method_name": "start", "params": [], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void start() throws IOException {        /* The port on which the server should run */        int port = 50051;        server = ServerBuilder.forPort(port)                .addService(new GreeterImpl())                .build()                .start();        logger.info(\"Server started, listening on \" + port);        Runtime.getRuntime().addShutdownHook(new Thread() {            @Override            public void run() {                // Use stderr here since the logger may have been reset by its JVM shutdown hook.                System.err.println(\"*** shutting down gRPC server since JVM is shutting down\");                try {                    HelloWorldServer.this.stop();                } catch (InterruptedException e) {                    e.printStackTrace(System.err);                }                System.err.println(\"*** server shut down\");            }        });    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/server/HelloWorldServer.java", "stars": "3", "class": {"name": "HelloWorldServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "stop", "params": [], "throws": ["InterruptedException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void stop() throws InterruptedException {        if (server != null) {            server.shutdown().awaitTermination(30, TimeUnit.SECONDS);        }    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/server/HelloWorldServer.java", "stars": "3", "class": {"name": "HelloWorldServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "blockUntilShutdown", "params": [], "throws": ["InterruptedException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void blockUntilShutdown() throws InterruptedException {        if (server != null) {            server.awaitTermination();        }    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/server/HelloWorldServer.java", "stars": "3", "class": {"name": "HelloWorldServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["IOException", "InterruptedException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws IOException, InterruptedException {        final HelloWorldServer server = new HelloWorldServer();        server.start();        server.blockUntilShutdown();    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/server/HelloWorldServer.java", "stars": "3", "class": {"name": "HelloWorldServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sayHello", "params": ["HelloRequest", "StreamObserver<HelloReply>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void sayHello(HelloRequest req, StreamObserver<HelloReply> responseObserver) {            HelloReply reply = HelloReply.newBuilder().setMessage(\"Hello \" + req.getName()).build();            logger.info(req.toString());            responseObserver.onNext(reply);            responseObserver.onCompleted();        }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/server/HelloWorldServer.java", "stars": "3", "class": {"name": "GreeterImpl", "extends": "GreeterGrpc", "implements": null, "modifiers": ["static"]}}, {"method_name": "inicializar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void inicializar() {\t\tcategoriaDao = new CategoriaDao();\t\tif (categoria == null) {\t\t\tlimpar();\t\t}\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroCategoriaBean.java", "stars": "1", "class": {"name": "CadastroCategoriaBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "salvar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void salvar() {\t\tcategoriaDao.salvar(categoria);\t\tlimpar();\t\tFacesUtil.addInfoMessage(\"Categoria salvada com sucesso\");\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroCategoriaBean.java", "stars": "1", "class": {"name": "CadastroCategoriaBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "modificaTexto", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void modificaTexto() {\t\tcategoria.setDescricao(categoria.getDescricao().toUpperCase());\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroCategoriaBean.java", "stars": "1", "class": {"name": "CadastroCategoriaBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCategoria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Categoria", "snippet": "\tpublic Categoria getCategoria() {\t\treturn categoria;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroCategoriaBean.java", "stars": "1", "class": {"name": "CadastroCategoriaBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCategoria", "params": ["Categoria"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setCategoria(Categoria categoria) {\t\tthis.categoria = categoria;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroCategoriaBean.java", "stars": "1", "class": {"name": "CadastroCategoriaBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "limpar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void limpar() {\t\tcategoria = new Categoria();\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/bean/CadastroCategoriaBean.java", "stars": "1", "class": {"name": "CadastroCategoriaBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getItemCount ()\t{\t\treturn n_getItemCount ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFlyoutRecyclerAdapter.java", "stars": "2", "class": {"name": "ShellFlyoutRecyclerAdapter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_getItemCount", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "int", "snippet": "\tprivate native int n_getItemCount ();\tpublic int getItemViewType (int p0)\t{\t\treturn n_getItemViewType (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFlyoutRecyclerAdapter.java", "stars": "2", "class": {"name": "ShellFlyoutRecyclerAdapter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "getItemViewType", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getItemViewType (int p0)\t{\t\treturn n_getItemViewType (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFlyoutRecyclerAdapter.java", "stars": "2", "class": {"name": "ShellFlyoutRecyclerAdapter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_getItemViewType", "params": ["int"], "throws": null, "modifiers": ["native", "private"], "return_type": "int", "snippet": "\tprivate native int n_getItemViewType (int p0);\tpublic void onBindViewHolder (android.support.v7.widget.RecyclerView.ViewHolder p0, int p1)\t{\t\tn_onBindViewHolder (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFlyoutRecyclerAdapter.java", "stars": "2", "class": {"name": "ShellFlyoutRecyclerAdapter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onBindViewHolder", "params": ["android", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onBindViewHolder (android.support.v7.widget.RecyclerView.ViewHolder p0, int p1)\t{\t\tn_onBindViewHolder (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFlyoutRecyclerAdapter.java", "stars": "2", "class": {"name": "ShellFlyoutRecyclerAdapter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onBindViewHolder", "params": ["android", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onBindViewHolder (android.support.v7.widget.RecyclerView.ViewHolder p0, int p1);\tpublic android.support.v7.widget.RecyclerView.ViewHolder onCreateViewHolder (android.view.ViewGroup p0, int p1)\t{\t\treturn n_onCreateViewHolder (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFlyoutRecyclerAdapter.java", "stars": "2", "class": {"name": "ShellFlyoutRecyclerAdapter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onCreateViewHolder", "params": ["android", "int"], "throws": null, "modifiers": ["public"], "return_type": "android", "snippet": "\tpublic android.support.v7.widget.RecyclerView.ViewHolder onCreateViewHolder (android.view.ViewGroup p0, int p1)\t{\t\treturn n_onCreateViewHolder (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFlyoutRecyclerAdapter.java", "stars": "2", "class": {"name": "ShellFlyoutRecyclerAdapter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onCreateViewHolder", "params": ["android", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "android", "snippet": "\tprivate native android.support.v7.widget.RecyclerView.ViewHolder n_onCreateViewHolder (android.view.ViewGroup p0, int p1);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFlyoutRecyclerAdapter.java", "stars": "2", "class": {"name": "ShellFlyoutRecyclerAdapter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFlyoutRecyclerAdapter.java", "stars": "2", "class": {"name": "ShellFlyoutRecyclerAdapter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFlyoutRecyclerAdapter.java", "stars": "2", "class": {"name": "ShellFlyoutRecyclerAdapter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    Configuration configuration = new Configuration();    Environment environment = new Environment(\"development\", new JdbcTransactionFactory(),        MysqlContainer.getUnpooledDataSource());    configuration.setEnvironment(environment);    configuration.addMapper(Mapper.class);    sqlSessionFactory = new SqlSessionFactoryBuilder().build(configuration);    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),        \"org/apache/ibatis/submitted/cursor_simple/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/cursor_simple/MysqlCursorTest.java", "stars": "15", "class": {"name": "MysqlCursorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testMySqlStreamResultSet", "params": [], "throws": ["IOException"], "modifiers": [], "return_type": "void", "snippet": "  void testMySqlStreamResultSet() throws IOException {    // #1654 and https://bugs.mysql.com/bug.php?id=96786    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      {        Cursor<User> cursor = mapper.getUsersMysqlStream();        Iterator<User> iterator = cursor.iterator();        User user = iterator.next();        assertEquals(\"User1\", user.getName());        cursor.close();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/cursor_simple/MysqlCursorTest.java", "stars": "15", "class": {"name": "MysqlCursorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testMySqlStreamResultSetBatch", "params": [], "throws": ["IOException"], "modifiers": [], "return_type": "void", "snippet": "  void testMySqlStreamResultSetBatch() throws IOException {    // #1654 and https://bugs.mysql.com/bug.php?id=96786    try (SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.BATCH)) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      {        Cursor<User> cursor = mapper.getUsersMysqlStream();        Iterator<User> iterator = cursor.iterator();        User user = iterator.next();        assertEquals(\"User1\", user.getName());        cursor.close();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/cursor_simple/MysqlCursorTest.java", "stars": "15", "class": {"name": "MysqlCursorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        Connection conn = null;        Statement stmt = null;        ResultSet rs = null;        try {            //1\u3001\u6ce8\u518c\u9a71\u52a8            Class.forName(\"com.mysql.cj.jdbc.Driver\");            //2\u3001\u83b7\u53d6\u8fde\u63a5\u5bf9\u8c61            conn = DriverManager.getConnection(\"jdbc:mysql:///db1\", \"root\", \"\");            //3\u3001\u5b9a\u4e49 sql            String sql = \"select * from student\";            //4\u3001\u83b7\u53d6\u6267\u884c sql \u5bf9\u8c61            stmt = conn.createStatement();            //5\u3001\u6267\u884c sql            rs = stmt.executeQuery(sql);            //6.1\u3001\u5c06\u6e38\u6807\u5411\u4e0b\u79fb\u52a8\u4e00\u884c            rs.next();            //6.2\u3001\u83b7\u53d6\u6570\u636e            int id = rs.getInt(1);            String name = rs.getString(\"name\");            int sex = rs.getInt(3);            System.out.println(id + \"---\" + name + \"---\" + sex);        } catch (ClassNotFoundException e) {            e.printStackTrace();        } catch (SQLException throwables) {            throwables.printStackTrace();        } finally {            if(rs != null){                try {                    rs.close();                } catch (SQLException throwables) {                    throwables.printStackTrace();                }            }            if(stmt != null){                try {                    stmt.close();                } catch (SQLException throwables) {                    throwables.printStackTrace();                }            }            if(conn != null){                try {                    conn.close();                } catch (SQLException throwables) {                    throwables.printStackTrace();                }            }        }    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/jdbc/Demo/JdbcDemo6.java", "stars": "2", "class": {"name": "JdbcDemo6", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOnActionClickedListener", "params": ["OnActionClickedListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnActionClickedListener(OnActionClickedListener listener) {        mActionClickedListener = listener;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/androidx/leanback/widget/PTVDetailsOverviewRowPresenter.java", "stars": "4", "class": {"name": "PTVDetailsOverviewRowPresenter", "extends": "RowPresenter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getOnActionClickedListener", "params": [], "throws": null, "modifiers": ["public"], "return_type": "OnActionClickedListener", "snippet": "    public OnActionClickedListener getOnActionClickedListener() {        return mActionClickedListener;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/androidx/leanback/widget/PTVDetailsOverviewRowPresenter.java", "stars": "4", "class": {"name": "PTVDetailsOverviewRowPresenter", "extends": "RowPresenter", "implements": null, "modifiers": ["public"]}}, {"method_name": "setBackgroundColor", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setBackgroundColor(@ColorInt int color) {        mBackgroundColor = color;        mBackgroundColorSet = true;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/androidx/leanback/widget/PTVDetailsOverviewRowPresenter.java", "stars": "4", "class": {"name": "PTVDetailsOverviewRowPresenter", "extends": "RowPresenter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getBackgroundColor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getBackgroundColor() {        return mBackgroundColor;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/androidx/leanback/widget/PTVDetailsOverviewRowPresenter.java", "stars": "4", "class": {"name": "PTVDetailsOverviewRowPresenter", "extends": "RowPresenter", "implements": null, "modifiers": ["public"]}}, {"method_name": "setStyleLarge", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStyleLarge(boolean large) {        mIsStyleLarge = large;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/androidx/leanback/widget/PTVDetailsOverviewRowPresenter.java", "stars": "4", "class": {"name": "PTVDetailsOverviewRowPresenter", "extends": "RowPresenter", "implements": null, "modifiers": ["public"]}}, {"method_name": "isStyleLarge", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isStyleLarge() {        return mIsStyleLarge;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/androidx/leanback/widget/PTVDetailsOverviewRowPresenter.java", "stars": "4", "class": {"name": "PTVDetailsOverviewRowPresenter", "extends": "RowPresenter", "implements": null, "modifiers": ["public"]}}, {"method_name": "setSharedElementEnterTransition", "params": ["Activity", "String", "long"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "    public final void setSharedElementEnterTransition(Activity activity,                                                      String sharedElementName, long timeoutMs) {        if (mSharedElementHelper == null) {            mSharedElementHelper = new PTVDetailsOverviewSharedElementHelper();        }        mSharedElementHelper.setSharedElementEnterTransition(activity, sharedElementName,                timeoutMs);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/androidx/leanback/widget/PTVDetailsOverviewRowPresenter.java", "stars": "4", "class": {"name": "PTVDetailsOverviewRowPresenter", "extends": "RowPresenter", "implements": null, "modifiers": ["public"]}}, {"method_name": "setSharedElementEnterTransition", "params": ["Activity", "String"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "    public final void setSharedElementEnterTransition(Activity activity,                                                      String sharedElementName) {        setSharedElementEnterTransition(activity, sharedElementName, DEFAULT_TIMEOUT);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/androidx/leanback/widget/PTVDetailsOverviewRowPresenter.java", "stars": "4", "class": {"name": "PTVDetailsOverviewRowPresenter", "extends": "RowPresenter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDefaultBackgroundColor", "params": ["Context"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int getDefaultBackgroundColor(Context context) {        TypedValue outValue = new TypedValue();        if (context.getTheme().resolveAttribute(R.attr.defaultBrandColor, outValue, true)) {            return context.getResources().getColor(outValue.resourceId);        }        return context.getResources().getColor(R.color.lb_default_brand_color);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/androidx/leanback/widget/PTVDetailsOverviewRowPresenter.java", "stars": "4", "class": {"name": "PTVDetailsOverviewRowPresenter", "extends": "RowPresenter", "implements": null, "modifiers": ["public"]}}, {"method_name": "onRowViewSelected", "params": ["RowPresenter", "boolean"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onRowViewSelected(RowPresenter.ViewHolder vh, boolean selected) {        super.onRowViewSelected(vh, selected);        if (selected) {            ((ViewHolder) vh).dispatchItemSelection(null);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/androidx/leanback/widget/PTVDetailsOverviewRowPresenter.java", "stars": "4", "class": {"name": "PTVDetailsOverviewRowPresenter", "extends": "RowPresenter", "implements": null, "modifiers": ["public"]}}, {"method_name": "createRowViewHolder", "params": ["ViewGroup"], "throws": null, "modifiers": ["protected"], "return_type": "RowPresenter", "snippet": "    protected RowPresenter.ViewHolder createRowViewHolder(ViewGroup parent) {        View v = LayoutInflater.from(parent.getContext())                .inflate(R.layout.lb_details_overview, parent, false);        ViewHolder vh = new ViewHolder(v, mDetailsPresenter);        initDetailsOverview(vh);        return vh;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/androidx/leanback/widget/PTVDetailsOverviewRowPresenter.java", "stars": "4", "class": {"name": "PTVDetailsOverviewRowPresenter", "extends": "RowPresenter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCardHeight", "params": ["Context"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int getCardHeight(Context context) {        int resId = mIsStyleLarge ? R.dimen.lb_details_overview_height_large :                R.dimen.lb_details_overview_height_small;        return context.getResources().getDimensionPixelSize(resId);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/androidx/leanback/widget/PTVDetailsOverviewRowPresenter.java", "stars": "4", "class": {"name": "PTVDetailsOverviewRowPresenter", "extends": "RowPresenter", "implements": null, "modifiers": ["public"]}}, {"method_name": "initDetailsOverview", "params": ["ViewHolder"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initDetailsOverview(final ViewHolder vh) {        vh.mActionBridgeAdapter = new ActionsItemBridgeAdapter(vh);        final View overview = vh.mOverviewFrame;        ViewGroup.LayoutParams lp = overview.getLayoutParams();        lp.height = getCardHeight(overview.getContext());        overview.setLayoutParams(lp);        if (!getSelectEffectEnabled()) {            vh.mOverviewFrame.setForeground(null);        }        vh.mActionsRow.setOnUnhandledKeyListener(new BaseGridView.OnUnhandledKeyListener() {            @Override            public boolean onUnhandledKey(KeyEvent event) {                if (vh.getOnKeyListener() != null) {                    if (vh.getOnKeyListener().onKey(vh.view, event.getKeyCode(), event)) {                        return true;                    }                }                return false;            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/androidx/leanback/widget/PTVDetailsOverviewRowPresenter.java", "stars": "4", "class": {"name": "PTVDetailsOverviewRowPresenter", "extends": "RowPresenter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNonNegativeWidth", "params": ["Drawable"], "throws": null, "modifiers": ["private", "static"], "return_type": "int", "snippet": "    private static int getNonNegativeWidth(Drawable drawable) {        final int width = (drawable == null) ? 0 : drawable.getIntrinsicWidth();        return (width > 0 ? width : 0);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/androidx/leanback/widget/PTVDetailsOverviewRowPresenter.java", "stars": "4", "class": {"name": "PTVDetailsOverviewRowPresenter", "extends": "RowPresenter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNonNegativeHeight", "params": ["Drawable"], "throws": null, "modifiers": ["private", "static"], "return_type": "int", "snippet": "    private static int getNonNegativeHeight(Drawable drawable) {        final int height = (drawable == null) ? 0 : drawable.getIntrinsicHeight();        return (height > 0 ? height : 0);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/androidx/leanback/widget/PTVDetailsOverviewRowPresenter.java", "stars": "4", "class": {"name": "PTVDetailsOverviewRowPresenter", "extends": "RowPresenter", "implements": null, "modifiers": ["public"]}}, {"method_name": "bindImageDrawable", "params": ["ViewHolder"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void bindImageDrawable(ViewHolder vh) {        DetailsOverviewRow row = (DetailsOverviewRow) vh.getRow();        ViewGroup.MarginLayoutParams layoutParams =                (ViewGroup.MarginLayoutParams) vh.mImageView.getLayoutParams();        final int cardHeight = getCardHeight(vh.mImageView.getContext());        final int verticalMargin = vh.mImageView.getResources().getDimensionPixelSize(                R.dimen.lb_details_overview_image_margin_vertical);        final int horizontalMargin = vh.mImageView.getResources().getDimensionPixelSize(                R.dimen.lb_details_overview_image_margin_horizontal);        final int drawableWidth = getNonNegativeWidth(row.getImageDrawable());        final int drawableHeight = getNonNegativeHeight(row.getImageDrawable());        boolean scaleImage = row.isImageScaleUpAllowed();        boolean useMargin = false;        if (row.getImageDrawable() != null) {            boolean landscape = false;            // If large style and landscape image we always use margin.            if (drawableWidth > drawableHeight) {                landscape = true;                if (mIsStyleLarge) {                    useMargin = true;                }            }            // If long dimension bigger than the card height we scale down.            if ((landscape && drawableWidth > cardHeight) ||                    (!landscape && drawableHeight > cardHeight)) {                scaleImage = true;            }            // If we're not scaling to fit the card height then we always use margin.            if (!scaleImage) {                useMargin = true;            }            // If using margin than may need to scale down.            if (useMargin && !scaleImage) {                if (landscape && drawableWidth > cardHeight - horizontalMargin) {                    scaleImage = true;                } else if (!landscape && drawableHeight > cardHeight - 2 * verticalMargin) {                    scaleImage = true;                }            }        }        final int bgColor = mBackgroundColorSet ? mBackgroundColor :                getDefaultBackgroundColor(vh.mOverviewView.getContext());        if (useMargin) {            layoutParams.setMarginStart(horizontalMargin);            layoutParams.topMargin = layoutParams.bottomMargin = verticalMargin;            vh.mOverviewFrame.setBackgroundColor(bgColor);            vh.mRightPanel.setBackground(null);            vh.mImageView.setBackground(null);        } else {            layoutParams.leftMargin = layoutParams.topMargin = layoutParams.bottomMargin = 0;            vh.mRightPanel.setBackgroundColor(bgColor);            vh.mImageView.setBackgroundColor(bgColor);            vh.mOverviewFrame.setBackground(null);        }        RoundedRectHelper.setClipToRoundedOutline(vh.mOverviewFrame, true);        if (scaleImage) {            vh.mImageView.setScaleType(ImageView.ScaleType.FIT_START);            vh.mImageView.setAdjustViewBounds(true);            vh.mImageView.setMaxWidth(cardHeight);            layoutParams.height = ViewGroup.LayoutParams.MATCH_PARENT;            layoutParams.width = ViewGroup.LayoutParams.WRAP_CONTENT;        } else {            vh.mImageView.setScaleType(ImageView.ScaleType.CENTER);            vh.mImageView.setAdjustViewBounds(false);            layoutParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;            // Limit width to the card height            layoutParams.width = Math.min(cardHeight, drawableWidth);        }        vh.mImageView.setLayoutParams(layoutParams);        vh.mImageView.setImageDrawable(row.getImageDrawable());        if (row.getImageDrawable() != null && mSharedElementHelper != null) {            mSharedElementHelper.onBindToDrawable(vh);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/androidx/leanback/widget/PTVDetailsOverviewRowPresenter.java", "stars": "4", "class": {"name": "PTVDetailsOverviewRowPresenter", "extends": "RowPresenter", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBindRowViewHolder", "params": ["RowPresenter", "Object"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onBindRowViewHolder(RowPresenter.ViewHolder holder, Object item) {        super.onBindRowViewHolder(holder, item);        DetailsOverviewRow row = (DetailsOverviewRow) item;        ViewHolder vh = (ViewHolder) holder;        bindImageDrawable(vh);        mDetailsPresenter.onBindViewHolder(vh.mDetailsDescriptionViewHolder, row.getItem());        vh.bindActions(row.getActionsAdapter());        row.addListener(vh.mListener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/androidx/leanback/widget/PTVDetailsOverviewRowPresenter.java", "stars": "4", "class": {"name": "PTVDetailsOverviewRowPresenter", "extends": "RowPresenter", "implements": null, "modifiers": ["public"]}}, {"method_name": "onUnbindRowViewHolder", "params": ["RowPresenter"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onUnbindRowViewHolder(RowPresenter.ViewHolder holder) {        ViewHolder vh = (ViewHolder) holder;        DetailsOverviewRow dor = (DetailsOverviewRow) vh.getRow();        dor.removeListener(vh.mListener);        if (vh.mDetailsDescriptionViewHolder != null) {            mDetailsPresenter.onUnbindViewHolder(vh.mDetailsDescriptionViewHolder);        }        super.onUnbindRowViewHolder(holder);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/androidx/leanback/widget/PTVDetailsOverviewRowPresenter.java", "stars": "4", "class": {"name": "PTVDetailsOverviewRowPresenter", "extends": "RowPresenter", "implements": null, "modifiers": ["public"]}}, {"method_name": "isUsingDefaultSelectEffect", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "boolean", "snippet": "    public final boolean isUsingDefaultSelectEffect() {        return false;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/androidx/leanback/widget/PTVDetailsOverviewRowPresenter.java", "stars": "4", "class": {"name": "PTVDetailsOverviewRowPresenter", "extends": "RowPresenter", "implements": null, "modifiers": ["public"]}}, {"method_name": "onSelectLevelChanged", "params": ["RowPresenter"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onSelectLevelChanged(RowPresenter.ViewHolder holder) {        super.onSelectLevelChanged(holder);        if (getSelectEffectEnabled()) {            ViewHolder vh = (ViewHolder) holder;            int dimmedColor = vh.mColorDimmer.getPaint().getColor();            ((ColorDrawable) vh.mOverviewFrame.getForeground().mutate()).setColor(dimmedColor);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/androidx/leanback/widget/PTVDetailsOverviewRowPresenter.java", "stars": "4", "class": {"name": "PTVDetailsOverviewRowPresenter", "extends": "RowPresenter", "implements": null, "modifiers": ["public"]}}, {"method_name": "onRowViewAttachedToWindow", "params": ["RowPresenter"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onRowViewAttachedToWindow(RowPresenter.ViewHolder vh) {        super.onRowViewAttachedToWindow(vh);        if (mDetailsPresenter != null) {            mDetailsPresenter.onViewAttachedToWindow(                    ((ViewHolder) vh).mDetailsDescriptionViewHolder);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/androidx/leanback/widget/PTVDetailsOverviewRowPresenter.java", "stars": "4", "class": {"name": "PTVDetailsOverviewRowPresenter", "extends": "RowPresenter", "implements": null, "modifiers": ["public"]}}, {"method_name": "onRowViewDetachedFromWindow", "params": ["RowPresenter"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onRowViewDetachedFromWindow(RowPresenter.ViewHolder vh) {        super.onRowViewDetachedFromWindow(vh);        if (mDetailsPresenter != null) {            mDetailsPresenter.onViewDetachedFromWindow(                    ((ViewHolder) vh).mDetailsDescriptionViewHolder);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/androidx/leanback/widget/PTVDetailsOverviewRowPresenter.java", "stars": "4", "class": {"name": "PTVDetailsOverviewRowPresenter", "extends": "RowPresenter", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBind", "params": ["ItemBridgeAdapter"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onBind(final ItemBridgeAdapter.ViewHolder ibvh) {            if (mViewHolder.getOnItemViewClickedListener() != null ||                    mActionClickedListener != null) {                ibvh.getPresenter().setOnClickListener(                        ibvh.getViewHolder(), new View.OnClickListener() {                            @Override                            public void onClick(View v) {                                if (mViewHolder.getOnItemViewClickedListener() != null) {                                    mViewHolder.getOnItemViewClickedListener().onItemClicked(                                            ibvh.getViewHolder(), ibvh.getItem(),                                            mViewHolder, mViewHolder.getRow());                                }                                if (mActionClickedListener != null) {                                    mActionClickedListener.onActionClicked((Action) ibvh.getItem());                                }                            }                        });            }        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/androidx/leanback/widget/PTVDetailsOverviewRowPresenter.java", "stars": "4", "class": {"name": "ActionsItemBridgeAdapter", "extends": "ItemBridgeAdapter", "implements": null, "modifiers": []}}, {"method_name": "onUnbind", "params": ["ItemBridgeAdapter"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onUnbind(final ItemBridgeAdapter.ViewHolder ibvh) {            if (mViewHolder.getOnItemViewClickedListener() != null ||                    mActionClickedListener != null) {                ibvh.getPresenter().setOnClickListener(ibvh.getViewHolder(), null);            }        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/androidx/leanback/widget/PTVDetailsOverviewRowPresenter.java", "stars": "4", "class": {"name": "ActionsItemBridgeAdapter", "extends": "ItemBridgeAdapter", "implements": null, "modifiers": []}}, {"method_name": "onAttachedToWindow", "params": ["ItemBridgeAdapter"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onAttachedToWindow(ItemBridgeAdapter.ViewHolder viewHolder) {            // Remove first to ensure we don't add ourselves more than once.            viewHolder.itemView.removeOnLayoutChangeListener(mViewHolder.mLayoutChangeListener);            viewHolder.itemView.addOnLayoutChangeListener(mViewHolder.mLayoutChangeListener);        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/androidx/leanback/widget/PTVDetailsOverviewRowPresenter.java", "stars": "4", "class": {"name": "ActionsItemBridgeAdapter", "extends": "ItemBridgeAdapter", "implements": null, "modifiers": []}}, {"method_name": "onDetachedFromWindow", "params": ["ItemBridgeAdapter"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onDetachedFromWindow(ItemBridgeAdapter.ViewHolder viewHolder) {            viewHolder.itemView.removeOnLayoutChangeListener(mViewHolder.mLayoutChangeListener);            mViewHolder.checkFirstAndLastPosition(false);        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/androidx/leanback/widget/PTVDetailsOverviewRowPresenter.java", "stars": "4", "class": {"name": "ActionsItemBridgeAdapter", "extends": "ItemBridgeAdapter", "implements": null, "modifiers": []}}, {"method_name": "bindActions", "params": ["ObjectAdapter"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "        void bindActions(ObjectAdapter adapter) {            mActionBridgeAdapter.setAdapter(adapter);            mActionsRow.setAdapter(mActionBridgeAdapter);            mNumItems = mActionBridgeAdapter.getItemCount();            mShowMoreRight = false;            mShowMoreLeft = true;            showMoreLeft(false);        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/androidx/leanback/widget/PTVDetailsOverviewRowPresenter.java", "stars": "4", "class": {"name": "ViewHolder", "extends": "RowPresenter", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "dispatchItemSelection", "params": ["View"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "        void dispatchItemSelection(View view) {            if (!isSelected()) {                return;            }            ItemBridgeAdapter.ViewHolder ibvh = (ItemBridgeAdapter.ViewHolder) (view != null ?                    mActionsRow.getChildViewHolder(view) :                    mActionsRow.findViewHolderForPosition(mActionsRow.getSelectedPosition()));            if (ibvh == null) {                if (getOnItemViewSelectedListener() != null) {                    getOnItemViewSelectedListener().onItemSelected(null, null,                            ViewHolder.this, getRow());                }            } else {                if (getOnItemViewSelectedListener() != null) {                    getOnItemViewSelectedListener().onItemSelected(ibvh.getViewHolder(), ibvh.getItem(),                            ViewHolder.this, getRow());                }            }        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/androidx/leanback/widget/PTVDetailsOverviewRowPresenter.java", "stars": "4", "class": {"name": "ViewHolder", "extends": "RowPresenter", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getViewCenter", "params": ["View"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "        private int getViewCenter(View view) {            return (view.getRight() - view.getLeft()) / 2;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/androidx/leanback/widget/PTVDetailsOverviewRowPresenter.java", "stars": "4", "class": {"name": "ViewHolder", "extends": "RowPresenter", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "checkFirstAndLastPosition", "params": ["boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void checkFirstAndLastPosition(boolean fromScroll) {            RecyclerView.ViewHolder viewHolder;            viewHolder = mActionsRow.findViewHolderForPosition(mNumItems - 1);            boolean showRight = (viewHolder == null ||                    viewHolder.itemView.getRight() > mActionsRow.getWidth());            viewHolder = mActionsRow.findViewHolderForPosition(0);            boolean showLeft = (viewHolder == null || viewHolder.itemView.getLeft() < 0);            if (DEBUG) Log.v(TAG, \"checkFirstAndLast fromScroll \" + fromScroll +                    \" showRight \" + showRight + \" showLeft \" + showLeft);            showMoreRight(showRight);            showMoreLeft(showLeft);        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/androidx/leanback/widget/PTVDetailsOverviewRowPresenter.java", "stars": "4", "class": {"name": "ViewHolder", "extends": "RowPresenter", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "showMoreLeft", "params": ["boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void showMoreLeft(boolean show) {            if (show != mShowMoreLeft) {                mActionsRow.setFadingLeftEdge(show);                mShowMoreLeft = show;            }        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/androidx/leanback/widget/PTVDetailsOverviewRowPresenter.java", "stars": "4", "class": {"name": "ViewHolder", "extends": "RowPresenter", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "showMoreRight", "params": ["boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void showMoreRight(boolean show) {            if (show != mShowMoreRight) {                mActionsRow.setFadingRightEdge(show);                mShowMoreRight = show;            }        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/androidx/leanback/widget/PTVDetailsOverviewRowPresenter.java", "stars": "4", "class": {"name": "ViewHolder", "extends": "RowPresenter", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onSubUiVisibilityChanged", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onSubUiVisibilityChanged (boolean p0)\t{\t\tn_onSubUiVisibilityChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v4/view/ActionProvider_SubUiVisibilityListenerImplementor.java", "stars": "2", "class": {"name": "ActionProvider_SubUiVisibilityListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onSubUiVisibilityChanged", "params": ["boolean"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onSubUiVisibilityChanged (boolean p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v4/view/ActionProvider_SubUiVisibilityListenerImplementor.java", "stars": "2", "class": {"name": "ActionProvider_SubUiVisibilityListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v4/view/ActionProvider_SubUiVisibilityListenerImplementor.java", "stars": "2", "class": {"name": "ActionProvider_SubUiVisibilityListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v4/view/ActionProvider_SubUiVisibilityListenerImplementor.java", "stars": "2", "class": {"name": "ActionProvider_SubUiVisibilityListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ObjectJavaBox_1.java", "stars": "2", "class": {"name": "ObjectJavaBox_1", "extends": "java", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ObjectJavaBox_1.java", "stars": "2", "class": {"name": "ObjectJavaBox_1", "extends": "java", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "getService", "params": ["JSONObject"], "throws": null, "modifiers": ["public", "static"], "return_type": "DeviceService", "snippet": "    public static DeviceService getService(JSONObject json) {        Class<DeviceService> newServiceClass;        try {            String className = json.optString(KEY_CLASS);            if (className.equalsIgnoreCase(\"DLNAService\"))                return null;            if (className.equalsIgnoreCase(\"Chromecast\"))                return null;            newServiceClass = (Class<DeviceService>) Class.forName(DeviceService.class.getPackage().getName() + \".\" + className);            Constructor<DeviceService> constructor = newServiceClass.getConstructor(ServiceDescription.class, ServiceConfig.class);            JSONObject jsonConfig = json.optJSONObject(KEY_CONFIG);            ServiceConfig serviceConfig = null;            if (jsonConfig != null)                serviceConfig = ServiceConfig.getConfig(jsonConfig);            JSONObject jsonDescription = json.optJSONObject(KEY_DESC);            ServiceDescription serviceDescription = null;            if (jsonDescription != null)                serviceDescription = ServiceDescription.getDescription(jsonDescription);            if (serviceConfig == null || serviceDescription == null)                return null;            return constructor.newInstance(serviceDescription, serviceConfig);        } catch (ClassNotFoundException e) {            e.printStackTrace();        } catch (NoSuchMethodException e) {            e.printStackTrace();        } catch (IllegalArgumentException e) {            e.printStackTrace();        } catch (InstantiationException e) {            e.printStackTrace();        } catch (IllegalAccessException e) {            e.printStackTrace();        } catch (InvocationTargetException e) {            e.printStackTrace();        }        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "getService", "params": ["Class<DeviceService>", "ServiceConfig"], "throws": null, "modifiers": ["public", "static"], "return_type": "DeviceService", "snippet": "    public static DeviceService getService(Class<? extends DeviceService> clazz, ServiceConfig serviceConfig) {        try {            Constructor<? extends DeviceService> constructor = clazz.getConstructor(ServiceConfig.class);            return constructor.newInstance(serviceConfig);        } catch (NoSuchMethodException e) {            e.printStackTrace();        } catch (IllegalArgumentException e) {            e.printStackTrace();        } catch (InstantiationException e) {            e.printStackTrace();        } catch (IllegalAccessException e) {            e.printStackTrace();        } catch (InvocationTargetException e) {            e.printStackTrace();        }        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "getService", "params": ["Class<DeviceService>", "ServiceDescription", "ServiceConfig"], "throws": null, "modifiers": ["public", "static"], "return_type": "DeviceService", "snippet": "    public static DeviceService getService(Class<? extends DeviceService> clazz, ServiceDescription serviceDescription, ServiceConfig serviceConfig) {        try {            Constructor<? extends DeviceService> constructor = clazz.getConstructor(ServiceDescription.class, ServiceConfig.class);            return constructor.newInstance(serviceDescription, serviceConfig);        } catch (NoSuchMethodException e) {            e.printStackTrace();        } catch (IllegalArgumentException e) {            e.printStackTrace();        } catch (InstantiationException e) {            e.printStackTrace();        } catch (IllegalAccessException e) {            e.printStackTrace();        } catch (InvocationTargetException e) {            e.printStackTrace();        }        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "getPairingType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "PairingType", "snippet": "    public PairingType getPairingType() {        return pairingType;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "setPairingType", "params": ["PairingType"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPairingType(PairingType pairingType) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "getAPI", "params": ["Class<?>"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public <T extends CapabilityMethods> T getAPI(Class<?> clazz) {        if (clazz.isAssignableFrom(this.getClass())) {            return (T) this;        }        else             return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "getPriorityLevel", "params": ["Class<CapabilityMethods>"], "throws": null, "modifiers": ["public"], "return_type": "CapabilityMethods", "snippet": "    public CapabilityMethods.CapabilityPriorityLevel getPriorityLevel(Class<? extends CapabilityMethods> clazz) {        return CapabilityPriorityLevel.NOT_SUPPORTED;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "discoveryFilter", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "DiscoveryFilter", "snippet": "    public static DiscoveryFilter discoveryFilter() {        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "connect", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void connect() {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "disconnect", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void disconnect() {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "isConnected", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isConnected() {        return true;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "isConnectable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isConnectable() {        return false;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "cancelPairing", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void cancelPairing() {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "reportConnected", "params": ["boolean"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void reportConnected(boolean ready) {        if (listener == null)            return;        // only run callback on main thread if the callback is leaving the SDK        if (listener instanceof ConnectableDevice)            listener.onConnectionSuccess(this);        else {            Util.runOnUI(new Runnable() {                @Override                public void run() {                    if (listener != null)                        listener.onConnectionSuccess(DeviceService.this);                }            });        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "sendPairingKey", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendPairingKey(String pairingKey) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "unsubscribe", "params": ["URLServiceSubscription<?>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void unsubscribe(URLServiceSubscription<?> subscription) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "unsubscribe", "params": ["ServiceSubscription<?>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void unsubscribe(ServiceSubscription<?> subscription) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "sendCommand", "params": ["ServiceCommand<?>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendCommand(ServiceCommand<?> command) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "getCapabilities", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> getCapabilities() {        return mCapabilities;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "updateCapabilities", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void updateCapabilities() { }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "setCapabilities", "params": ["List<String>"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void setCapabilities(List<String> newCapabilities) {        List<String> oldCapabilities = mCapabilities;        mCapabilities = newCapabilities;        List<String> _lostCapabilities = new ArrayList<String>();        for (String capability : oldCapabilities) {            if (!newCapabilities.contains(capability))                _lostCapabilities.add(capability);        }        List<String> _addedCapabilities = new ArrayList<String>();        for (String capability : newCapabilities) {            if (!oldCapabilities.contains(capability))                _addedCapabilities.add(capability);        }        final List<String> lostCapabilities = _lostCapabilities;        final List<String> addedCapabilities = _addedCapabilities;        if (this.listener != null) {            Util.runOnUI(new Runnable() {                @Override                public void run() {                    listener.onCapabilitiesUpdated(DeviceService.this, addedCapabilities, lostCapabilities);                }            });        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "hasCapability", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean hasCapability(String capability) {        Matcher m = CapabilityMethods.ANY_PATTERN.matcher(capability);        if (m.find()) {            String match = m.group();            for (String item : this.mCapabilities) {                if (item.contains(match)) {                    return true;                }            }            return false;        }        return mCapabilities.contains(capability);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "hasAnyCapability", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean hasAnyCapability(String... capabilities) {        for (String capability : capabilities) {            if (hasCapability(capability))                return true;        }        return false;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "hasCapabilities", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean hasCapabilities(List<String> capabilities) {        String[] arr = new String[capabilities.size()];        capabilities.toArray(arr);        return hasCapabilities(arr);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "hasCapabilities", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean hasCapabilities(String... capabilities) {        boolean hasCaps = true;        for (String capability: capabilities) {            if (!hasCapability(capability)) {                hasCaps = false;                break;            }        }        return hasCaps;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "setServiceDescription", "params": ["ServiceDescription"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setServiceDescription(ServiceDescription serviceDescription) {        this.serviceDescription = serviceDescription;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "getServiceDescription", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ServiceDescription", "snippet": "    public ServiceDescription getServiceDescription() {        return serviceDescription;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "setServiceConfig", "params": ["ServiceConfig"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setServiceConfig(ServiceConfig serviceConfig) {        this.serviceConfig = serviceConfig;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "getServiceConfig", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ServiceConfig", "snippet": "    public ServiceConfig getServiceConfig() {        return serviceConfig;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "toJSONObject", "params": [], "throws": null, "modifiers": ["public"], "return_type": "JSONObject", "snippet": "    public JSONObject toJSONObject() {        JSONObject jsonObj = new JSONObject();        try {            jsonObj.put(KEY_CLASS, getClass().getSimpleName());            jsonObj.put(\"description\", serviceDescription.toJSONObject());            jsonObj.put(\"config\", serviceConfig.toJSONObject());        } catch (JSONException e) {            e.printStackTrace();        }        return jsonObj;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "getServiceName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getServiceName() {        return serviceDescription.getServiceID();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "decodeLaunchSession", "params": ["String", "JSONObject"], "throws": ["JSONException"], "modifiers": ["public"], "return_type": "LaunchSession", "snippet": "    public LaunchSession decodeLaunchSession(String type, JSONObject sessionObj) throws JSONException {        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "getListener", "params": [], "throws": null, "modifiers": ["public"], "return_type": "DeviceServiceListener", "snippet": "    public DeviceServiceListener getListener() {        return listener;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "setListener", "params": ["DeviceServiceListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setListener(DeviceServiceListener listener) {        this.listener = listener;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "closeLaunchSession", "params": ["LaunchSession", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void closeLaunchSession(LaunchSession launchSession, ResponseListener<Object> listener) {        if (launchSession == null) {            Util.postError(listener, new ServiceCommandError(0, \"You must provide a valid LaunchSession\", null));            return;        }        DeviceService service = launchSession.getService();        if (service == null) {            Util.postError(listener, new ServiceCommandError(0, \"There is no service attached to this launch session\", null));            return;        }        switch (launchSession.getSessionType()) {        case App:            if (service instanceof Launcher)                ((Launcher) service).closeApp(launchSession, listener);            break;        case Media:            if (service instanceof MediaPlayer)                ((MediaPlayer) service).closeMedia(launchSession, listener);            break;        case ExternalInputPicker:            if (service instanceof ExternalInputControl)                ((ExternalInputControl) service).closeInputPicker(launchSession, listener);            break;        case WebApp:            if (service instanceof WebAppLauncher)                ((WebAppLauncher) service).closeWebApp(launchSession, listener);            break;        case Unknown:        default:            Util.postError(listener, new ServiceCommandError(0, \"This DeviceService does not know ho to close this LaunchSession\", null));            break;        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "addCapability", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addCapability(final String capability) {        if (capability == null || capability.length() == 0 || this.mCapabilities.contains(capability))            return;        this.mCapabilities.add(capability);        Util.runOnUI(new Runnable() {            @Override            public void run() {                List<String> added = new ArrayList<String>();                added.add(capability);                if (listener != null)                    listener.onCapabilitiesUpdated(DeviceService.this, added, new ArrayList<String>());            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "addCapabilities", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addCapabilities(final List<String> capabilities) {        if (capabilities == null)            return;        for (String capability : capabilities) {            if (capability == null || capability.length() == 0 || mCapabilities.contains(capability))                continue;            mCapabilities.add(capability);        }        Util.runOnUI(new Runnable() {            @Override            public void run() {                if (listener != null)                    listener.onCapabilitiesUpdated(DeviceService.this, capabilities, new ArrayList<String>());            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "addCapabilities", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addCapabilities(String... capabilities) {        addCapabilities(Arrays.asList(capabilities));    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "removeCapability", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeCapability(final String capability) {        if (capability == null)            return;        this.mCapabilities.remove(capability);        Util.runOnUI(new Runnable() {            @Override            public void run() {                List<String> removed = new ArrayList<String>();                removed.add(capability);                if (listener != null)                    listener.onCapabilitiesUpdated(DeviceService.this, new ArrayList<String>(), removed);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "removeCapabilities", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeCapabilities(final List<String> capabilities) {        if (capabilities == null)            return;        for (String capability : capabilities) {            mCapabilities.remove(capability);        }        Util.runOnUI(new Runnable() {            @Override            public void run() {                if (listener != null)                    listener.onCapabilitiesUpdated(DeviceService.this, new ArrayList<String>(), capabilities);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "removeCapabilities", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeCapabilities(String... capabilities) {        removeCapabilities(Arrays.asList(capabilities));    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "onLoseReachability", "params": ["DeviceServiceReachability"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    @Override public void onLoseReachability(DeviceServiceReachability reachability) { }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DeviceService.java", "stars": "4", "class": {"name": "DeviceService", "extends": null, "implements": ["DeviceServiceReachabilityListener", "ServiceCommandProcessor"], "modifiers": ["public"]}}, {"method_name": "play", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void play() {\t\t//print some empty lines\t\tfor (int i = 0; i < 100; i++) { System.out.println(); }\t\t//slowly print intro ascii banner\t\tfor (String line : BANNER_STRING.split(\"\\n\")) {\t\t\tSystem.out.println(line);\t\t\ttry { Thread.sleep(200); } catch (InterruptedException e) {}\t\t}\t}", "url": "https://raw.githubusercontent.com/bkis/JMines/master/src/idh/java/jmines/ui/cli/JMinesCliIntro.java", "stars": "1", "class": {"name": "JMinesCliIntro", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getChildren", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ArrayList<ActorNode>", "snippet": "\tpublic ArrayList<ActorNode> getChildren() {\t\treturn children;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/search/ActorNode.java", "stars": "1", "class": {"name": "ActorNode", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "getID", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getID() {\t\treturn ID;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/search/ActorNode.java", "stars": "1", "class": {"name": "ActorNode", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "getDepth", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "\tpublic Integer getDepth() {\t\treturn depth;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/search/ActorNode.java", "stars": "1", "class": {"name": "ActorNode", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "getParent", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ActorNode", "snippet": "\tpublic ActorNode getParent() {\t\treturn parent;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/search/ActorNode.java", "stars": "1", "class": {"name": "ActorNode", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "setChildren", "params": ["ArrayList<ActorNode>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setChildren(ArrayList<ActorNode> children) {\t\tthis.children = children;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/search/ActorNode.java", "stars": "1", "class": {"name": "ActorNode", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "getTitle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getTitle() {\t\treturn title;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/search/ActorNode.java", "stars": "1", "class": {"name": "ActorNode", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "getPriority", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "\tpublic Integer getPriority() {\t\treturn priority;\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/search/ActorNode.java", "stars": "1", "class": {"name": "ActorNode", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "compareTo", "params": ["ActorNode"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int compareTo(ActorNode arg0) {\t\treturn this.priority.compareTo(arg0.getPriority());\t}", "url": "https://raw.githubusercontent.com/Luke-Grammer/IMDB-Database-Application/master/src/search/ActorNode.java", "stars": "1", "class": {"name": "ActorNode", "extends": null, "implements": ["Comparable"], "modifiers": ["public"]}}, {"method_name": "getNodeAttributeValue", "params": ["Node", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getNodeAttributeValue(Node node, String attributeKey) {        Node item = node.getAttributes().getNamedItem(attributeKey);        return item != null ? item.getNodeValue() : null;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/utils/DomUtils.java", "stars": "13", "class": {"name": "DomUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "evaluate", "params": ["String", "Object", "QName"], "throws": null, "modifiers": ["public", "static"], "return_type": "Object", "snippet": "    public static Object evaluate(String xpath, Object item, QName qName) {        try {            return XPATH.compile(xpath).evaluate(item, qName);        } catch (Exception e) {            return null;        }    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/utils/DomUtils.java", "stars": "13", "class": {"name": "DomUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "preHandle", "params": ["HttpServletRequest", "HttpServletResponse", "Object"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o) throws Exception {        System.out.println(HttpStatus.NO_CONTENT.value());        System.out.println(HttpMethod.OPTIONS.toString());        // \u653e\u884c options \u8bf7\u6c42\uff0c\u5426\u5219\u65e0\u6cd5\u8ba9\u524d\u7aef\u5e26\u4e0a\u81ea\u5b9a\u4e49\u7684 header \u4fe1\u606f\uff0c\u5bfc\u81f4 sessionID \u6539\u53d8\uff0cshiro \u9a8c\u8bc1\u5931\u8d25//        if (HttpMethod.OPTIONS.toString().equals(httpServletRequest.getMethod())) {//            httpServletResponse.setStatus(HttpStatus.NO_CONTENT.value());//            return true;//        }        Subject subject = SecurityUtils.getSubject();        // \u4f7f\u7528 shiro \u9a8c\u8bc1        System.out.println(subject.isAuthenticated());        System.out.println(subject.isRemembered());        if (!subject.isAuthenticated() && !subject.isRemembered() ) {            System.out.println(\"\u8bf7\u6c42\u88ab\u62e6\u622a\");            return false;        }        return true;    }", "url": "https://raw.githubusercontent.com/lixiangwudi/service/master/src/main/java/com/example/lx/interceptor/LoginInterceptor.java", "stars": "2", "class": {"name": "LoginInterceptor", "extends": null, "implements": ["HandlerInterceptor"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onCreate(Bundle savedInstanceState) {\t\tsuper.onCreate(savedInstanceState);\t\tsetContentView(R.layout.contact);\t\tcontactList = (ArrayList<Contact>) getIntent().getSerializableExtra(\"contact\");\t\tprovider_name = getIntent().getStringExtra(\"provider\");\t\tListView list = (ListView) findViewById(R.id.contactList);\t\tlist.setAdapter(new ContactAdapter(this, 0, contactList));\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/ContactActivity.java", "stars": "74", "class": {"name": "ContactActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\t\tpublic int getCount() {\t\t\treturn contacts.size();\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/ContactActivity.java", "stars": "74", "class": {"name": "ContactAdapter", "extends": "ArrayAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getView", "params": ["int", "View", "ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "\t\tpublic View getView(int position, View convertView, ViewGroup parent) {\t\t\tfinal Contact bean = contacts.get(position);\t\t\tView row = mInflater.inflate(R.layout.contact_list, parent, false);\t\t\tTextView label = (TextView) row.findViewById(R.id.cName);\t\t\tTextView email = (TextView) row.findViewById(R.id.cEmail);\t\t\tImageView cImage = (ImageView) row.findViewById(R.id.cImage);\t\t\tLog.d(\"Custom-UI\", \"Display Name = \" + bean.getDisplayName());\t\t\tLog.d(\"Custom-UI\", \"First Name = \" + bean.getFirstName());\t\t\tLog.d(\"Custom-UI\", \"Last Name = \" + bean.getLastName());\t\t\tLog.d(\"Custom-UI\", \"Contact ID = \" + bean.getId());\t\t\tLog.d(\"Custom-UI\", \"Profile URL = \" + bean.getProfileUrl());\t\t\tLog.d(\"Custom-UI\", \"Profile URL = \" + bean.getProfileImageURL());\t\t\tLog.d(\"Custom-UI\", \"Email = \" + bean.getEmail());\t\t\timageLoader.DisplayImage(bean.getProfileImageURL(), cImage);\t\t\tif (provider_name.equalsIgnoreCase(\"twitter\"))\t\t\t\tlabel.setText(bean.getFirstName() + \"@\" + bean.getDisplayName()); // twitter\t\t\telse if (provider_name.equalsIgnoreCase(\"yammer\"))\t\t\t\tlabel.setText(bean.getDisplayName()); // yammer\t\t\telse\t\t\t\tlabel.setText(bean.getFirstName() + bean.getLastName());\t\t\t// Show email for google , yammer , yahoo\t\t\tif (provider_name.equalsIgnoreCase(\"google\") || provider_name.equalsIgnoreCase(\"yammer\")\t\t\t\t\t|| provider_name.equalsIgnoreCase(\"yahoo\")) {\t\t\t\temail.setVisibility(View.VISIBLE);\t\t\t\temail.setText(bean.getEmail());\t\t\t}\t\t\treturn row;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/ContactActivity.java", "stars": "74", "class": {"name": "ContactAdapter", "extends": "ArrayAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "registerLimitConfig", "params": ["String", "BlockPlacementLimitConfig"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void registerLimitConfig(String identifier, BlockPlacementLimitConfig config) {        if (limitConfigs.containsKey(identifier)) {            return;        }        switch (config.getMode()) {            case ABSOLUTE:                // override any limits that are set with the absolute values                limits.putAll(config.getBlocks());                break;            case SUBTRACT:                // we don't want to modify the absolute configs                if (limitConfigs.containsValue(LimitMode.ABSOLUTE)) return;                config.getBlocks().forEach((key, value) -> {                    int newLimit = limits.getOrDefault(key, 0) - value;                    if (newLimit < 0) newLimit = 0;                    limits.put(key, newLimit);                });                break;            case ADD:            default:                // we don't want to modify the absolute configs                if (limitConfigs.containsValue(LimitMode.ABSOLUTE)) return;                config.getBlocks().forEach((key, value) -> limits.put(key, limits.getOrDefault(key, 0) + value));                break;        }        limitConfigs.put(identifier, config.getMode());    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/limits/PlayerBlockPlacementLimit.java", "stars": "3", "class": {"name": "PlayerBlockPlacementLimit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "unregisterLimitConfig", "params": ["String", "BlockPlacementLimitConfig"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void unregisterLimitConfig(String identifier, BlockPlacementLimitConfig config) {        LimitMode limitMode = limitConfigs.remove(identifier);        if (limitMode == null) return;        // invert the limit change        switch (limitMode) {            case ABSOLUTE:                limitConfigs.clear();                limits.clear();                break;            case SUBTRACT:                config.getBlocks().forEach((key, value) -> limits.put(key, limits.getOrDefault(key, 0) + value));                break;            default:            case ADD:                config.getBlocks().forEach((key, value) -> {                    int newLimit = limits.getOrDefault(key, 0) - value;                    if (newLimit < 0) newLimit = 0;                    limits.put(key, newLimit);                });                break;        }    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/limits/PlayerBlockPlacementLimit.java", "stars": "3", "class": {"name": "PlayerBlockPlacementLimit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLimit", "params": ["Material"], "throws": null, "modifiers": ["public"], "return_type": "Optional<Integer>", "snippet": "    public Optional<Integer> getLimit(Material blockType) {        return Optional.ofNullable(getLimits().get(blockType));    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/limits/PlayerBlockPlacementLimit.java", "stars": "3", "class": {"name": "PlayerBlockPlacementLimit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addBlock", "params": ["Block"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int addBlock(Block block) {        if (hasPlacedBlock(block)) {            return getCount(block.getType());        }        int currentCount = getCount(block.getType());        currentCount++;        counts.put(block.getType(), currentCount);        locations.add(block.getLocation());        return currentCount;    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/limits/PlayerBlockPlacementLimit.java", "stars": "3", "class": {"name": "PlayerBlockPlacementLimit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCount", "params": ["Material"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCount(Material blockType) {        if (!getCounts().containsKey(blockType)) {            getCounts().put(blockType, 0);        }        return counts.getOrDefault(blockType, 0);    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/limits/PlayerBlockPlacementLimit.java", "stars": "3", "class": {"name": "PlayerBlockPlacementLimit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hasPlacedBlock", "params": ["Block"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean hasPlacedBlock(Block block) {        return getLocations().contains(block.getLocation());    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/limits/PlayerBlockPlacementLimit.java", "stars": "3", "class": {"name": "PlayerBlockPlacementLimit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeBlock", "params": ["Block"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int removeBlock(Block block) {        Material blockType = block.getType();        int count = getCount(blockType);        if (getLocations().remove(block.getLocation())) {            count--;            getCounts().put(blockType, count);        }        if (count < 0) {            count = 0;            getCounts().remove(blockType);        }        return count;    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/limits/PlayerBlockPlacementLimit.java", "stars": "3", "class": {"name": "PlayerBlockPlacementLimit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        new Thread( () -> {            System.out.println(\"\u591a\u7ebf\u7a0b\u542f\u52a8\u4e86\");        }).start();    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/Lambda.java", "stars": "2", "class": {"name": "Lambda", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "load", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void load() {\t\tFile dir = new File(\"emoji\");\t\tif(!dir.exists()) dir.mkdir();\t\ttry {\t\t\tif(!LOCAL_VERSION.exists()) update_emojis();\t\t\telse {\t\t\t\t// load version info\t\t\t\tJSONObject globalVer = new JSONObject(new JSONTokener(new URL(VERSION_URL).openStream()));\t\t\t\tJSONObject localVer = new JSONObject(new JSONTokener(new FileInputStream(LOCAL_VERSION)));\t\t\t\t// make sure current version is latest\t\t\t\tif(!globalVer.has(\"version\")) update_emojis();\t\t\t\telse {\t\t\t\t\tif(globalVer.getInt(\"version\") != localVer.getInt(\"version\")) update_emojis();\t\t\t\t}\t\t\t}\t\t} catch(Exception ignored) {  }\t\tFile[] emojis = new File(\"emoji\").listFiles(file -> file.isFile() && file.getName().toLowerCase().endsWith(\".png\"));\t\tfor(File emoji : emojis) addEmoji(emoji);\t}", "url": "https://raw.githubusercontent.com/2b2t-Utilities/emoji-api/master/src/main/java/me/tigermouthbear/emoji/api/Emojis.java", "stars": "3", "class": {"name": "Emojis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "update_emojis", "params": [], "throws": ["IOException"], "modifiers": ["private", "static"], "return_type": "void", "snippet": "\tprivate static void update_emojis() throws IOException {\t\tZipInputStream zip = new ZipInputStream(new URL(ZIP_URL).openStream());\t\tZipEntry entry = zip.getNextEntry();\t\t// iterates over entries in the zip file\t\twhile(entry != null) {\t\t\tString filePath = FOLDER + File.separator + entry.getName().substring(entry.getName().indexOf(\"/\"));\t\t\tif(!entry.isDirectory()) {\t\t\t\tBufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(filePath));\t\t\t\tbyte[] bytesIn = new byte[4096];\t\t\t\tint read;\t\t\t\twhile((read = zip.read(bytesIn)) != -1) {\t\t\t\t\tbos.write(bytesIn, 0, read);\t\t\t\t}\t\t\t\tbos.close();\t\t\t}\t\t\tzip.closeEntry();\t\t\tentry = zip.getNextEntry();\t\t}\t\tzip.close();\t}", "url": "https://raw.githubusercontent.com/2b2t-Utilities/emoji-api/master/src/main/java/me/tigermouthbear/emoji/api/Emojis.java", "stars": "3", "class": {"name": "Emojis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addEmoji", "params": ["File"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "\tprivate static void addEmoji(File file) {\t\tDynamicTexture dynamicTexture;\t\ttry {\t\t\tBufferedImage image = ImageIO.read(file);\t\t\tdynamicTexture = new DynamicTexture(image);\t\t\tdynamicTexture.loadTexture(MC.getResourceManager());\t\t} catch(Exception ignored) {\t\t\treturn;\t\t}\t\tEMOJI_MAP.put(file.getName().replaceAll(\".png\", \"\"), MC.getTextureManager().getDynamicTextureLocation(file.getName().replaceAll(\".png\", \"\"), dynamicTexture));\t}", "url": "https://raw.githubusercontent.com/2b2t-Utilities/emoji-api/master/src/main/java/me/tigermouthbear/emoji/api/Emojis.java", "stars": "3", "class": {"name": "Emojis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEmoji", "params": ["Emoji"], "throws": null, "modifiers": ["public", "static"], "return_type": "ResourceLocation", "snippet": "\tpublic static ResourceLocation getEmoji(Emoji emoji) {\t\treturn EMOJI_MAP.get(emoji.getName());\t}", "url": "https://raw.githubusercontent.com/2b2t-Utilities/emoji-api/master/src/main/java/me/tigermouthbear/emoji/api/Emojis.java", "stars": "3", "class": {"name": "Emojis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isEmoji", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean isEmoji(String name) {\t\treturn EMOJI_MAP.containsKey(name);\t}", "url": "https://raw.githubusercontent.com/2b2t-Utilities/emoji-api/master/src/main/java/me/tigermouthbear/emoji/api/Emojis.java", "stars": "3", "class": {"name": "Emojis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDrawableVisible", "params": ["boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setDrawableVisible(final boolean visible) {        if (mClearDrawable.isVisible() == visible) {            return;        }        mClearDrawable.setVisible(visible, false);        final Drawable[] drawables = getCompoundDrawables();        setCompoundDrawables(                drawables[0],                drawables[1],                visible ? mClearDrawable : null,                drawables[3]);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/ClearEditText.java", "stars": "1", "class": {"name": "ClearEditText", "extends": "RegexEditText", "implements": ["View", "View", "TextWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "setOnFocusChangeListener", "params": ["OnFocusChangeListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnFocusChangeListener(final OnFocusChangeListener onFocusChangeListener) {        mOnFocusChangeListener = onFocusChangeListener;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/ClearEditText.java", "stars": "1", "class": {"name": "ClearEditText", "extends": "RegexEditText", "implements": ["View", "View", "TextWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "setOnTouchListener", "params": ["OnTouchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnTouchListener(final OnTouchListener onTouchListener) {        mOnTouchListener = onTouchListener;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/ClearEditText.java", "stars": "1", "class": {"name": "ClearEditText", "extends": "RegexEditText", "implements": ["View", "View", "TextWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "onFocusChange", "params": ["View", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onFocusChange(final View view, final boolean hasFocus) {        if (hasFocus && getText() != null) {            setDrawableVisible(getText().length() > 0);        } else {            setDrawableVisible(false);        }        if (mOnFocusChangeListener != null) {            mOnFocusChangeListener.onFocusChange(view, hasFocus);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/ClearEditText.java", "stars": "1", "class": {"name": "ClearEditText", "extends": "RegexEditText", "implements": ["View", "View", "TextWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "onTouch", "params": ["View", "MotionEvent"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onTouch(final View view, final MotionEvent motionEvent) {        final int x = (int) motionEvent.getX();        if (mClearDrawable.isVisible() && x > getWidth() - getPaddingRight() - mClearDrawable.getIntrinsicWidth()) {            if (motionEvent.getAction() == MotionEvent.ACTION_UP) {                setText(\"\");            }            return true;        }        return mOnTouchListener != null && mOnTouchListener.onTouch(view, motionEvent);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/ClearEditText.java", "stars": "1", "class": {"name": "ClearEditText", "extends": "RegexEditText", "implements": ["View", "View", "TextWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "onTextChanged", "params": ["CharSequence", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onTextChanged(final CharSequence s, final int start, final int before, final int count) {        if (isFocused()) {            setDrawableVisible(s.length() > 0);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/ClearEditText.java", "stars": "1", "class": {"name": "ClearEditText", "extends": "RegexEditText", "implements": ["View", "View", "TextWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "beforeTextChanged", "params": ["CharSequence", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void beforeTextChanged(CharSequence s, int start, int count, int after) {}", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/ClearEditText.java", "stars": "1", "class": {"name": "ClearEditText", "extends": "RegexEditText", "implements": ["View", "View", "TextWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "afterTextChanged", "params": ["Editable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void afterTextChanged(Editable s) {}", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/view/ClearEditText.java", "stars": "1", "class": {"name": "ClearEditText", "extends": "RegexEditText", "implements": ["View", "View", "TextWatcher"], "modifiers": ["public", "final"]}}, {"method_name": "tokenBuilder", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "AuthTokenHelper", "snippet": "    public AuthTokenHelper tokenBuilder(@Value(\"${auth.token.secret}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/gateway/src/main/java/com/webank/wedatasphere/exchangis/WebApplication.java", "stars": "23", "class": {"name": "WebApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "authLoginFilter", "params": [], "throws": null, "modifiers": ["public"], "return_type": "AuthEntranceFilter", "snippet": "    public AuthEntranceFilter authLoginFilter(){return new AuthEntranceFilter();}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/gateway/src/main/java/com/webank/wedatasphere/exchangis/WebApplication.java", "stars": "23", "class": {"name": "WebApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "scriptAuthPwdFilter", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ScriptAuthPwdFilter", "snippet": "    public ScriptAuthPwdFilter scriptAuthPwdFilter(){return new ScriptAuthPwdFilter();}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/gateway/src/main/java/com/webank/wedatasphere/exchangis/WebApplication.java", "stars": "23", "class": {"name": "WebApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "index", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "ResponseEntity<InputStreamResource>", "snippet": "    public ResponseEntity<InputStreamResource> index() throws IOException {        HttpHeaders headers = new HttpHeaders();        headers.add(\"Content-Type\", \"text/html;charset=utf-8\");        return ResponseEntity.ok().headers(headers).body(new InputStreamResource(new ClassPathResource(serverPath).getInputStream()));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/gateway/src/main/java/com/webank/wedatasphere/exchangis/WebApplication.java", "stars": "23", "class": {"name": "WebApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        String pidFile = System.getProperty(\"pid.file\", \"\");        try {            ProcessUtil.mountPIDFile(pidFile);        }catch(Exception e){            LOG.error(\"Fail to store PID file in disk path: [\" + pidFile +\"]\", e);            return;        }        SpringApplication.run(WebApplication.class, args);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/gateway/src/main/java/com/webank/wedatasphere/exchangis/WebApplication.java", "stars": "23", "class": {"name": "WebApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "releaseSurfaceTexture", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void releaseSurfaceTexture() {        if (mSurfaceTexture != null) {            if (mSurfaceTextureHost != null) {                mSurfaceTextureHost.releaseSurfaceTexture(mSurfaceTexture);            } else {                mSurfaceTexture.release();            }            mSurfaceTexture = null;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/TextureMediaPlayer.java", "stars": "2", "class": {"name": "TextureMediaPlayer", "extends": "MediaPlayerProxy", "implements": ["IMediaPlayer", "ISurfaceTextureHolder"], "modifiers": ["public"]}}, {"method_name": "reset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void reset() {        super.reset();        releaseSurfaceTexture();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/TextureMediaPlayer.java", "stars": "2", "class": {"name": "TextureMediaPlayer", "extends": "MediaPlayerProxy", "implements": ["IMediaPlayer", "ISurfaceTextureHolder"], "modifiers": ["public"]}}, {"method_name": "release", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void release() {        super.release();        releaseSurfaceTexture();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/TextureMediaPlayer.java", "stars": "2", "class": {"name": "TextureMediaPlayer", "extends": "MediaPlayerProxy", "implements": ["IMediaPlayer", "ISurfaceTextureHolder"], "modifiers": ["public"]}}, {"method_name": "setDisplay", "params": ["SurfaceHolder"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDisplay(SurfaceHolder sh) {        if (mSurfaceTexture == null)            super.setDisplay(sh);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/TextureMediaPlayer.java", "stars": "2", "class": {"name": "TextureMediaPlayer", "extends": "MediaPlayerProxy", "implements": ["IMediaPlayer", "ISurfaceTextureHolder"], "modifiers": ["public"]}}, {"method_name": "setSurface", "params": ["Surface"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSurface(Surface surface) {        if (mSurfaceTexture == null)            super.setSurface(surface);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/TextureMediaPlayer.java", "stars": "2", "class": {"name": "TextureMediaPlayer", "extends": "MediaPlayerProxy", "implements": ["IMediaPlayer", "ISurfaceTextureHolder"], "modifiers": ["public"]}}, {"method_name": "setSurfaceTexture", "params": ["SurfaceTexture"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSurfaceTexture(SurfaceTexture surfaceTexture) {        if (mSurfaceTexture == surfaceTexture)            return;        releaseSurfaceTexture();        mSurfaceTexture = surfaceTexture;        if (surfaceTexture == null) {            super.setSurface(null);        } else {            super.setSurface(new Surface(surfaceTexture));        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/TextureMediaPlayer.java", "stars": "2", "class": {"name": "TextureMediaPlayer", "extends": "MediaPlayerProxy", "implements": ["IMediaPlayer", "ISurfaceTextureHolder"], "modifiers": ["public"]}}, {"method_name": "getSurfaceTexture", "params": [], "throws": null, "modifiers": ["public"], "return_type": "SurfaceTexture", "snippet": "    public SurfaceTexture getSurfaceTexture() {        return mSurfaceTexture;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/TextureMediaPlayer.java", "stars": "2", "class": {"name": "TextureMediaPlayer", "extends": "MediaPlayerProxy", "implements": ["IMediaPlayer", "ISurfaceTextureHolder"], "modifiers": ["public"]}}, {"method_name": "setSurfaceTextureHost", "params": ["ISurfaceTextureHost"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSurfaceTextureHost(ISurfaceTextureHost surfaceTextureHost) {        mSurfaceTextureHost = surfaceTextureHost;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/TextureMediaPlayer.java", "stars": "2", "class": {"name": "TextureMediaPlayer", "extends": "MediaPlayerProxy", "implements": ["IMediaPlayer", "ISurfaceTextureHolder"], "modifiers": ["public"]}}, {"method_name": "getStatementByShortName", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "    void getStatementByShortName() throws Exception {        Configuration configuration = getConfiguration();        // statement can be referenced by its short name.        MappedStatement selectPet = configuration.getMappedStatement(\"selectPet\");        assertNotNull(selectPet);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/ShortNameTest.java", "stars": "15", "class": {"name": "ShortNameTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "ambiguousShortNameShouldFail", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "    void ambiguousShortNameShouldFail() throws Exception {        Configuration configuration = getConfiguration();        // ambiguous short name should throw an exception.        Assertions.assertThrows(IllegalArgumentException.class, () -> configuration.getMappedStatement(\"select\"));    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/ShortNameTest.java", "stars": "15", "class": {"name": "ShortNameTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getConfiguration", "params": [], "throws": ["IOException"], "modifiers": ["private"], "return_type": "Configuration", "snippet": "    private Configuration getConfiguration() throws IOException {        try (Reader configReader = Resources                .getResourceAsReader(\"org/apache/ibatis/submitted/xml_external_ref/MapperConfig.xml\")) {            SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configReader);            return sqlSessionFactory.getConfiguration();        }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/ShortNameTest.java", "stars": "15", "class": {"name": "ShortNameTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"drivers/chromedriver.exe\");\t\tWebDriver driver = new ChromeDriver();\t\tdriver.get(\"https://ebay.com/\");\t\t// XPath\t\t// driver.findElement(By.xpath(\"//input[@name='_nkw']\")).sendKeys(\"Insan Ne Ile\t\t// Yasar\");\t\t// driver.findElement(By.xpath(\"//input[@class='gh-tb\t\t// ui-autocomplete-input']\")).sendKeys(\"Insan Ne Ile Yasar\");\t\t// 1. contains()\t\t// driver.findElement(By.xpath(\"//input[contains(@class,'gh-tb')]\")).sendKeys(\"Sefiller\");\t\t// 2. starts-with\t\t// id= test_123\t\t// id= test_1234\t\t// id= test_12345\t\t// id= test_12233\t\tdriver.findElement(By.xpath(\"//input[starts-with(@class,'gh-tb')]\")).sendKeys(\"Sefiller\");\t\t// 3. ends-with\t\t// id= atest_123\t\t// id= asabtest_123\t\t// id= ctest_123\t\t// id= dtest_123\t\t// driver.findElement(By.xpath(\"//input[ends-with(@id,'test_123')]\")).sendKeys(\"Sefiller\");\t\t// 4. text() for link\t\t// driver.findElement(By.xpath(\"//a[text()=' My eBay']\")).click();\t\t// contains + text\t\t// driver.findElement(By.xpath(\"//a[contains(text(),' My eBay')][1]\")).click();\t\tdriver.findElement(By.xpath(\"//a[contains(.,' My eBay')][1]\")).click();\t\tdriver.close();\t\t\t\t\t\t\t//\tcss selector\t\t\t// attribute name :   id= #\t\t// attribute name :   class= .\t\t\t\t// css functions\t\t\t\t// contains\t: *\t\t// starts-with : ^\t\t// ends-with :\t$\t\t\t\t// css example : input[id='u_0-q'] -------> input # u_0-q\t\t// \t\t\t\t input[id*='u_']\t\t// \t\t\t\t\t\t}", "url": "https://raw.githubusercontent.com/fadimedibi/SeleniumTurkish/master/src/com/class3/XPath.java", "stars": "3", "class": {"name": "XPath", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "ofNullable", "params": ["Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "Object", "snippet": "  public static Object ofNullable(Object value) {    return Optional.ofNullable(value);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/OptionalUtil.java", "stars": "15", "class": {"name": "OptionalUtil", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "computeValue", "params": ["Class<?>"], "throws": null, "modifiers": ["protected"], "return_type": "T", "snippet": "    protected T computeValue(Class<?> type) {        return supplier.get();    }", "url": "https://raw.githubusercontent.com/sstewartgallus/jsystemf/master/src/com/sstewartgallus/runtime/SupplierClassValue.java", "stars": "5", "class": {"name": "SupplierClassValue", "extends": "ClassValue", "implements": null, "modifiers": ["final"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setContentView(R.layout.activity_edit_note);    appBar = (MaterialToolbar) findViewById(R.id.appbar_top_edit_note);    noteTitle = (EditText) findViewById(R.id.textfield_edit_note_title);    noteContent = (EditText) findViewById(R.id.textfield_edit_note_content);    setSupportActionBar(appBar);    getSupportActionBar().setDisplayHomeAsUpEnabled(true);    getSupportActionBar().setHomeButtonEnabled(true);    getSupportActionBar().setHomeAsUpIndicator(R.drawable.ic_back_24dp);    noteId = getIntent().getStringExtra(\"id\");    notesDatabase = new NoteDatabase(this);    notesDatabase.getNote(noteId, new DataCallback() {      @Override      public void onCallback(List<Note> allNotesList) {        note = allNotesList.get(0);        noteTitle.setText(note.getTitle());        noteContent.setText(note.getContent());      }    });  }", "url": "https://raw.githubusercontent.com/sudiptog81/notetaker-android/master/app/src/main/java/pro/ghosh/notetaker/EditNoteActivity.java", "stars": "3", "class": {"name": "EditNoteActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateOptionsMenu", "params": ["Menu"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean onCreateOptionsMenu(Menu menu) {    MenuInflater inflater = getMenuInflater();    inflater.inflate(R.menu.top_app_bar_menu_edit_note, menu);    return true;  }", "url": "https://raw.githubusercontent.com/sudiptog81/notetaker-android/master/app/src/main/java/pro/ghosh/notetaker/EditNoteActivity.java", "stars": "3", "class": {"name": "EditNoteActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onOptionsItemSelected", "params": ["MenuItem"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean onOptionsItemSelected(MenuItem item) {    switch (item.getItemId()) {      case android.R.id.home:        onBackPressed();        return true;      case R.id.menuitem_save_edited:        if (noteTitle.getText().toString().isEmpty()          && noteContent.getText().toString().isEmpty())          Toast.makeText(this, \"Empty Note\", Toast.LENGTH_SHORT).show();        else if (noteTitle.getText().toString().isEmpty())          noteTitle.setError(\"Empty Title\");        else if (noteContent.getText().toString().isEmpty())          noteContent.setError(\"Empty Content\");        else {          Note note = new Note(            noteTitle.getText().toString().trim(),            noteContent.getText().toString(),            new Timestamp(new Date(System.currentTimeMillis()))          );          notesDatabase.updateNote(noteId, note, new DataCallback() {            @Override            public void onCallback(List<Note> allNotesList) {              if (allNotesList == null)                Toast.makeText(                  EditNoteActivity.this,                  \"Could Not Save Note\",                  Toast.LENGTH_SHORT                ).show();            }          });          onBackPressed();        }        return true;    }    return super.onOptionsItemSelected(item);  }", "url": "https://raw.githubusercontent.com/sudiptog81/notetaker-android/master/app/src/main/java/pro/ghosh/notetaker/EditNoteActivity.java", "stars": "3", "class": {"name": "EditNoteActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBackPressed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onBackPressed() {    super.onBackPressed();  }", "url": "https://raw.githubusercontent.com/sudiptog81/notetaker-android/master/app/src/main/java/pro/ghosh/notetaker/EditNoteActivity.java", "stars": "3", "class": {"name": "EditNoteActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void onResume() {    super.onResume();    notesDatabase.getNote(noteId, new DataCallback() {      @Override      public void onCallback(List<Note> allNotesList) {        note = allNotesList.get(0);        noteTitle.setText(note.getTitle());        noteContent.setText(note.getContent());      }    });  }", "url": "https://raw.githubusercontent.com/sudiptog81/notetaker-android/master/app/src/main/java/pro/ghosh/notetaker/EditNoteActivity.java", "stars": "3", "class": {"name": "EditNoteActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "findSnapView", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "android", "snippet": "\tpublic android.view.View findSnapView (android.support.v7.widget.RecyclerView.LayoutManager p0)\t{\t\treturn n_findSnapView (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SingleSnapHelper.java", "stars": "2", "class": {"name": "SingleSnapHelper", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_findSnapView", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "android", "snippet": "\tprivate native android.view.View n_findSnapView (android.support.v7.widget.RecyclerView.LayoutManager p0);\tpublic int findTargetSnapPosition (android.support.v7.widget.RecyclerView.LayoutManager p0, int p1, int p2)\t{\t\treturn n_findTargetSnapPosition (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SingleSnapHelper.java", "stars": "2", "class": {"name": "SingleSnapHelper", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "findTargetSnapPosition", "params": ["android", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int findTargetSnapPosition (android.support.v7.widget.RecyclerView.LayoutManager p0, int p1, int p2)\t{\t\treturn n_findTargetSnapPosition (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SingleSnapHelper.java", "stars": "2", "class": {"name": "SingleSnapHelper", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_findTargetSnapPosition", "params": ["android", "int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "int", "snippet": "\tprivate native int n_findTargetSnapPosition (android.support.v7.widget.RecyclerView.LayoutManager p0, int p1, int p2);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SingleSnapHelper.java", "stars": "2", "class": {"name": "SingleSnapHelper", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SingleSnapHelper.java", "stars": "2", "class": {"name": "SingleSnapHelper", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SingleSnapHelper.java", "stars": "2", "class": {"name": "SingleSnapHelper", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "getLanguages", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Language>", "snippet": "    public Map<String, Language> getLanguages() {        return languages;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/movies/Torrents.java", "stars": "4", "class": {"name": "Torrents", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLanguages", "params": ["String", "Language"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLanguages(String name, Language value) {        languages.put(name, value);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/models/movies/Torrents.java", "stars": "4", "class": {"name": "Torrents", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadImage", "params": ["Object", "ImageView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void loadImage(Object data, ImageView imageView) {        if (data == null) {            return;        }        BitmapDrawable value = null;        if (mImageCache != null) {            value = mImageCache.getBitmapFromMemCache(String.valueOf(data));        }        if (value != null) {            // Bitmap found in memory cache            imageView.setImageDrawable(value);        } else if (cancelPotentialWork(data, imageView)) {            //BEGIN_INCLUDE(execute_background_task)            final BitmapWorkerTask task = new BitmapWorkerTask(data, imageView);            final AsyncDrawable asyncDrawable =                    new AsyncDrawable(mResources, mLoadingBitmap, task);            imageView.setImageDrawable(asyncDrawable);            // NOTE: This uses a custom version of AsyncTask that has been pulled from the            // framework and slightly modified. Refer to the docs at the top of the class            // for more info on what was changed.            task.executeOnExecutor(AsyncTask.DUAL_THREAD_EXECUTOR);            //END_INCLUDE(execute_background_task)        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageWorker.java", "stars": "74", "class": {"name": "ImageWorker", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setLoadingImage", "params": ["Bitmap"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLoadingImage(Bitmap bitmap) {        mLoadingBitmap = bitmap;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageWorker.java", "stars": "74", "class": {"name": "ImageWorker", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setLoadingImage", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLoadingImage(int resId) {        mLoadingBitmap = BitmapFactory.decodeResource(mResources, resId);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageWorker.java", "stars": "74", "class": {"name": "ImageWorker", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "addImageCache", "params": ["FragmentManager", "ImageCache"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addImageCache(FragmentManager fragmentManager,            ImageCache.ImageCacheParams cacheParams) {        mImageCacheParams = cacheParams;        mImageCache = ImageCache.getInstance(fragmentManager, mImageCacheParams);        new CacheAsyncTask().execute(MESSAGE_INIT_DISK_CACHE);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageWorker.java", "stars": "74", "class": {"name": "ImageWorker", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "addImageCache", "params": ["FragmentActivity", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addImageCache(FragmentActivity activity, String diskCacheDirectoryName) {        mImageCacheParams = new ImageCache.ImageCacheParams(activity, diskCacheDirectoryName);        mImageCache = ImageCache.getInstance(activity.getSupportFragmentManager(), mImageCacheParams);        new CacheAsyncTask().execute(MESSAGE_INIT_DISK_CACHE);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageWorker.java", "stars": "74", "class": {"name": "ImageWorker", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setImageFadeIn", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setImageFadeIn(boolean fadeIn) {        mFadeInBitmap = fadeIn;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageWorker.java", "stars": "74", "class": {"name": "ImageWorker", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setExitTasksEarly", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setExitTasksEarly(boolean exitTasksEarly) {        mExitTasksEarly = exitTasksEarly;        setPauseWork(false);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageWorker.java", "stars": "74", "class": {"name": "ImageWorker", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "processBitmap", "params": ["Object"], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "Bitmap", "snippet": "    protected abstract Bitmap processBitmap(Object data);    /**     * @return The {@link ImageCache}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageWorker.java", "stars": "74", "class": {"name": "ImageWorker", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getImageCache", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "ImageCache", "snippet": "    protected ImageCache getImageCache() {        return mImageCache;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageWorker.java", "stars": "74", "class": {"name": "ImageWorker", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "cancelWork", "params": ["ImageView"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void cancelWork(ImageView imageView) {        final BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);        if (bitmapWorkerTask != null) {            bitmapWorkerTask.cancel(true);            if (BuildConfig.DEBUG) {                final Object bitmapData = bitmapWorkerTask.mData;                Log.d(TAG, \"cancelWork - cancelled work for \" + bitmapData);            }        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageWorker.java", "stars": "74", "class": {"name": "ImageWorker", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "cancelPotentialWork", "params": ["Object", "ImageView"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean cancelPotentialWork(Object data, ImageView imageView) {        //BEGIN_INCLUDE(cancel_potential_work)        final BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);        if (bitmapWorkerTask != null) {            final Object bitmapData = bitmapWorkerTask.mData;            if (bitmapData == null || !bitmapData.equals(data)) {                bitmapWorkerTask.cancel(true);                if (BuildConfig.DEBUG) {                    Log.d(TAG, \"cancelPotentialWork - cancelled work for \" + data);                }            } else {                // The same work is already in progress.                return false;            }        }        return true;        //END_INCLUDE(cancel_potential_work)    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageWorker.java", "stars": "74", "class": {"name": "ImageWorker", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getBitmapWorkerTask", "params": ["ImageView"], "throws": null, "modifiers": ["private", "static"], "return_type": "BitmapWorkerTask", "snippet": "    private static BitmapWorkerTask getBitmapWorkerTask(ImageView imageView) {        if (imageView != null) {            final Drawable drawable = imageView.getDrawable();            if (drawable instanceof AsyncDrawable) {                final AsyncDrawable asyncDrawable = (AsyncDrawable) drawable;                return asyncDrawable.getBitmapWorkerTask();            }        }        return null;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageWorker.java", "stars": "74", "class": {"name": "ImageWorker", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setImageDrawable", "params": ["ImageView", "Drawable"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setImageDrawable(ImageView imageView, Drawable drawable) {        if (mFadeInBitmap) {            // Transition drawable with a transparent drawable and the final drawable            final TransitionDrawable td =                    new TransitionDrawable(new Drawable[] {                            new ColorDrawable(android.R.color.transparent),                            drawable                    });            // Set background to loading bitmap            imageView.setBackgroundDrawable(                    new BitmapDrawable(mResources, mLoadingBitmap));            imageView.setImageDrawable(td);            td.startTransition(FADE_IN_TIME);        } else {            imageView.setImageDrawable(drawable);        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageWorker.java", "stars": "74", "class": {"name": "ImageWorker", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setPauseWork", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPauseWork(boolean pauseWork) {        synchronized (mPauseWorkLock) {            mPauseWork = pauseWork;            if (!mPauseWork) {                mPauseWorkLock.notifyAll();            }        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageWorker.java", "stars": "74", "class": {"name": "ImageWorker", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "initDiskCacheInternal", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initDiskCacheInternal() {        if (mImageCache != null) {            mImageCache.initDiskCache();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageWorker.java", "stars": "74", "class": {"name": "ImageWorker", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "clearCacheInternal", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void clearCacheInternal() {        if (mImageCache != null) {            mImageCache.clearCache();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageWorker.java", "stars": "74", "class": {"name": "ImageWorker", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "flushCacheInternal", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void flushCacheInternal() {        if (mImageCache != null) {            mImageCache.flush();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageWorker.java", "stars": "74", "class": {"name": "ImageWorker", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "closeCacheInternal", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void closeCacheInternal() {        if (mImageCache != null) {            mImageCache.close();            mImageCache = null;        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageWorker.java", "stars": "74", "class": {"name": "ImageWorker", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "clearCache", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clearCache() {        new CacheAsyncTask().execute(MESSAGE_CLEAR);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageWorker.java", "stars": "74", "class": {"name": "ImageWorker", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "flushCache", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void flushCache() {        new CacheAsyncTask().execute(MESSAGE_FLUSH);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageWorker.java", "stars": "74", "class": {"name": "ImageWorker", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "closeCache", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void closeCache() {        new CacheAsyncTask().execute(MESSAGE_CLOSE);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageWorker.java", "stars": "74", "class": {"name": "ImageWorker", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "doInBackground", "params": ["Void"], "throws": null, "modifiers": ["protected"], "return_type": "BitmapDrawable", "snippet": "        protected BitmapDrawable doInBackground(Void... params) {            //BEGIN_INCLUDE(load_bitmap_in_background)            if (BuildConfig.DEBUG) {                Log.d(TAG, \"doInBackground - starting work\");            }            final String dataString = String.valueOf(mData);            Bitmap bitmap = null;            BitmapDrawable drawable = null;            // Wait here if work is paused and the task is not cancelled            synchronized (mPauseWorkLock) {                while (mPauseWork && !isCancelled()) {                    try {                        mPauseWorkLock.wait();                    } catch (InterruptedException e) {}                }            }            // If the image cache is available and this task has not been cancelled by another            // thread and the ImageView that was originally bound to this task is still bound back            // to this task and our \"exit early\" flag is not set then try and fetch the bitmap from            // the cache            if (mImageCache != null && !isCancelled() && getAttachedImageView() != null                    && !mExitTasksEarly) {                bitmap = mImageCache.getBitmapFromDiskCache(dataString);            }            // If the bitmap was not found in the cache and this task has not been cancelled by            // another thread and the ImageView that was originally bound to this task is still            // bound back to this task and our \"exit early\" flag is not set, then call the main            // process method (as implemented by a subclass)            if (bitmap == null && !isCancelled() && getAttachedImageView() != null                    && !mExitTasksEarly) {                bitmap = processBitmap(mData);            }            // If the bitmap was processed and the image cache is available, then add the processed            // bitmap to the cache for future use. Note we don't check if the task was cancelled            // here, if it was, and the thread is still running, we may as well add the processed            // bitmap to our cache as it might be used again in the future            if (bitmap != null) {                if (Utils.hasHoneycomb()) {                    // Running on Honeycomb or newer, so wrap in a standard BitmapDrawable                    drawable = new BitmapDrawable(mResources, bitmap);                } else {                    // Running on Gingerbread or older, so wrap in a RecyclingBitmapDrawable                    // which will recycle automagically                    drawable = new RecyclingBitmapDrawable(mResources, bitmap);                }                if (mImageCache != null) {                    mImageCache.addBitmapToCache(dataString, drawable);                }            }            if (BuildConfig.DEBUG) {                Log.d(TAG, \"doInBackground - finished work\");            }            return drawable;            //END_INCLUDE(load_bitmap_in_background)        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageWorker.java", "stars": "74", "class": {"name": "BitmapWorkerTask", "extends": "AsyncTask", "implements": null, "modifiers": ["private"]}}, {"method_name": "onPostExecute", "params": ["BitmapDrawable"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void onPostExecute(BitmapDrawable value) {            //BEGIN_INCLUDE(complete_background_work)            // if cancel was called on this task or the \"exit early\" flag is set then we're done            if (isCancelled() || mExitTasksEarly) {                value = null;            }            final ImageView imageView = getAttachedImageView();            if (value != null && imageView != null) {                if (BuildConfig.DEBUG) {                    Log.d(TAG, \"onPostExecute - setting bitmap\");                }                setImageDrawable(imageView, value);            }            //END_INCLUDE(complete_background_work)        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageWorker.java", "stars": "74", "class": {"name": "BitmapWorkerTask", "extends": "AsyncTask", "implements": null, "modifiers": ["private"]}}, {"method_name": "onCancelled", "params": ["BitmapDrawable"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void onCancelled(BitmapDrawable value) {            super.onCancelled(value);            synchronized (mPauseWorkLock) {                mPauseWorkLock.notifyAll();            }        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageWorker.java", "stars": "74", "class": {"name": "BitmapWorkerTask", "extends": "AsyncTask", "implements": null, "modifiers": ["private"]}}, {"method_name": "getAttachedImageView", "params": [], "throws": null, "modifiers": ["private"], "return_type": "ImageView", "snippet": "        private ImageView getAttachedImageView() {            final ImageView imageView = imageViewReference.get();            final BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);            if (this == bitmapWorkerTask) {                return imageView;            }            return null;        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageWorker.java", "stars": "74", "class": {"name": "BitmapWorkerTask", "extends": "AsyncTask", "implements": null, "modifiers": ["private"]}}, {"method_name": "getBitmapWorkerTask", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BitmapWorkerTask", "snippet": "        public BitmapWorkerTask getBitmapWorkerTask() {            return bitmapWorkerTaskReference.get();        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageWorker.java", "stars": "74", "class": {"name": "AsyncDrawable", "extends": "BitmapDrawable", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "doInBackground", "params": ["Object"], "throws": null, "modifiers": ["protected"], "return_type": "Void", "snippet": "        protected Void doInBackground(Object... params) {            switch ((Integer)params[0]) {                case MESSAGE_CLEAR:                    clearCacheInternal();                    break;                case MESSAGE_INIT_DISK_CACHE:                    initDiskCacheInternal();                    break;                case MESSAGE_FLUSH:                    flushCacheInternal();                    break;                case MESSAGE_CLOSE:                    closeCacheInternal();                    break;            }            return null;        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageWorker.java", "stars": "74", "class": {"name": "CacheAsyncTask", "extends": "AsyncTask", "implements": null, "modifiers": ["protected"]}}, {"method_name": "hello", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,String>", "snippet": "\tpublic Map<String, String> hello() {\t\treturn Collections.singletonMap(\"message\", this.helloWorldService.getHelloMessage());\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/main/java/smoketest/actuator/SampleController.java", "stars": "47572", "class": {"name": "SampleController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "olleh", "params": ["Message"], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "\tpublic Map<String, Object> olleh(@Validated Message message) {\t\tMap<String, Object> model = new LinkedHashMap<>();\t\tmodel.put(\"message\", message.getValue());\t\tmodel.put(\"title\", \"Hello Home\");\t\tmodel.put(\"date\", new Date());\t\treturn model;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/main/java/smoketest/actuator/SampleController.java", "stars": "47572", "class": {"name": "SampleController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "foo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String foo() {\t\tthrow new IllegalArgumentException(\"Server error\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/main/java/smoketest/actuator/SampleController.java", "stars": "47572", "class": {"name": "SampleController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\t\tpublic String getValue() {\t\t\treturn this.value;\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/main/java/smoketest/actuator/SampleController.java", "stars": "47572", "class": {"name": "Message", "extends": null, "implements": null, "modifiers": ["static", "protected"]}}, {"method_name": "setValue", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void setValue(String value) {\t\t\tthis.value = value;\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/main/java/smoketest/actuator/SampleController.java", "stars": "47572", "class": {"name": "Message", "extends": null, "implements": null, "modifiers": ["static", "protected"]}}, {"method_name": "avoidXEE", "params": ["DocumentBuilderFactory"], "throws": ["ParserConfigurationException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void avoidXEE(DocumentBuilderFactory docBuilderFactory) throws ParserConfigurationException {        // \u9632\u6b62 XML External Entity (XXE) \u653b\u51fb        // 1. \u5982\u679c\u9700\u8981\u7981\u7528DOCTYPE \uff0c\u53ef\u4ee5\u963b\u6b62\u5927\u90e8\u5206\u7684XML External Entity (XXE)        // String feature1 = \"http://apache.org/xml/features/disallow-doctype-decl\";        // docBuilderFactory.setFeature(feature1, true);        // 2. \u5982\u679c\u4e0d\u7981\u7528DOCTYPE, \u5219\u4f7f\u7528\u4e0b\u9762\u7684\u8bbe\u7f6e        String feature2 = \"http://xml.org/sax/features/external-general-entities\";        String feature3 = \"http://xml.org/sax/features/external-parameter-entities\";        String feature4 = \"http://apache.org/xml/features/nonvalidating/load-external-dtd\";        docBuilderFactory.setFeature(feature2, false);        docBuilderFactory.setFeature(feature3, false);        docBuilderFactory.setFeature(feature4, false);        docBuilderFactory.setXIncludeAware(false);        docBuilderFactory.setExpandEntityReferences(false);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/utils/XmlResolveUtils.java", "stars": "18", "class": {"name": "XmlResolveUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createProxy", "params": ["Object", "ResultLoaderMap", "Configuration", "ObjectFactory", "List<Class>", "List<Object>"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object createProxy(Object target, ResultLoaderMap lazyLoader, Configuration configuration, ObjectFactory objectFactory, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {    return EnhancedResultObjectProxyImpl.createProxy(target, lazyLoader, configuration, objectFactory, constructorArgTypes, constructorArgs);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/javassist/JavassistProxyFactory.java", "stars": "15", "class": {"name": "JavassistProxyFactory", "extends": null, "implements": ["org"], "modifiers": ["public"]}}, {"method_name": "createDeserializationProxy", "params": ["Object", "Map<String,ResultLoaderMap>", "ObjectFactory", "List<Class>", "List<Object>"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object createDeserializationProxy(Object target, Map<String, ResultLoaderMap.LoadPair> unloadedProperties, ObjectFactory objectFactory, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {    return EnhancedDeserializationProxyImpl.createProxy(target, unloadedProperties, objectFactory, constructorArgTypes, constructorArgs);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/javassist/JavassistProxyFactory.java", "stars": "15", "class": {"name": "JavassistProxyFactory", "extends": null, "implements": ["org"], "modifiers": ["public"]}}, {"method_name": "crateProxy", "params": ["Class<?>", "MethodHandler", "List<Class>", "List<Object>"], "throws": null, "modifiers": ["static"], "return_type": "Object", "snippet": "  static Object crateProxy(Class<?> type, MethodHandler callback, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {    ProxyFactory enhancer = new ProxyFactory();    enhancer.setSuperclass(type);    try {      type.getDeclaredMethod(WRITE_REPLACE_METHOD);      // ObjectOutputStream will call writeReplace of objects returned by writeReplace      if (LogHolder.log.isDebugEnabled()) {        LogHolder.log.debug(WRITE_REPLACE_METHOD + \" method was found on bean \" + type + \", make sure it returns this\");      }    } catch (NoSuchMethodException e) {      enhancer.setInterfaces(new Class[]{WriteReplaceInterface.class});    } catch (SecurityException e) {      // nothing to do here    }    Object enhanced;    Class<?>[] typesArray = constructorArgTypes.toArray(new Class[constructorArgTypes.size()]);    Object[] valuesArray = constructorArgs.toArray(new Object[constructorArgs.size()]);    try {      enhanced = enhancer.create(typesArray, valuesArray);    } catch (Exception e) {      throw new ExecutorException(\"Error creating lazy proxy.  Cause: \" + e, e);    }    ((Proxy) enhanced).setHandler(callback);    return enhanced;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/javassist/JavassistProxyFactory.java", "stars": "15", "class": {"name": "JavassistProxyFactory", "extends": null, "implements": ["org"], "modifiers": ["public"]}}, {"method_name": "createProxy", "params": ["Object", "ResultLoaderMap", "Configuration", "ObjectFactory", "List<Class>", "List<Object>"], "throws": null, "modifiers": ["public", "static"], "return_type": "Object", "snippet": "    public static Object createProxy(Object target, ResultLoaderMap lazyLoader, Configuration configuration, ObjectFactory objectFactory, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {      final Class<?> type = target.getClass();      EnhancedResultObjectProxyImpl callback = new EnhancedResultObjectProxyImpl(type, lazyLoader, configuration, objectFactory, constructorArgTypes, constructorArgs);      Object enhanced = crateProxy(type, callback, constructorArgTypes, constructorArgs);      PropertyCopier.copyBeanProperties(type, target, enhanced);      return enhanced;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/javassist/JavassistProxyFactory.java", "stars": "15", "class": {"name": "EnhancedResultObjectProxyImpl", "extends": null, "implements": ["MethodHandler"], "modifiers": ["private", "static"]}}, {"method_name": "invoke", "params": ["Object", "Method", "Method", "Object"], "throws": ["Throwable"], "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object invoke(Object enhanced, Method method, Method methodProxy, Object[] args) throws Throwable {      final String methodName = method.getName();      try {        synchronized (lazyLoader) {          if (WRITE_REPLACE_METHOD.equals(methodName)) {            Object original;            if (constructorArgTypes.isEmpty()) {              original = objectFactory.create(type);            } else {              original = objectFactory.create(type, constructorArgTypes, constructorArgs);            }            PropertyCopier.copyBeanProperties(type, enhanced, original);            if (lazyLoader.size() > 0) {              return new JavassistSerialStateHolder(original, lazyLoader.getProperties(), objectFactory, constructorArgTypes, constructorArgs);            } else {              return original;            }          } else {            if (lazyLoader.size() > 0 && !FINALIZE_METHOD.equals(methodName)) {              if (aggressive || lazyLoadTriggerMethods.contains(methodName)) {                lazyLoader.loadAll();              } else if (PropertyNamer.isSetter(methodName)) {                final String property = PropertyNamer.methodToProperty(methodName);                lazyLoader.remove(property);              } else if (PropertyNamer.isGetter(methodName)) {                final String property = PropertyNamer.methodToProperty(methodName);                if (lazyLoader.hasLoader(property)) {                  lazyLoader.load(property);                }              }            }          }        }        return methodProxy.invoke(enhanced, args);      } catch (Throwable t) {        throw ExceptionUtil.unwrapThrowable(t);      }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/javassist/JavassistProxyFactory.java", "stars": "15", "class": {"name": "EnhancedResultObjectProxyImpl", "extends": null, "implements": ["MethodHandler"], "modifiers": ["private", "static"]}}, {"method_name": "createProxy", "params": ["Object", "Map<String,ResultLoaderMap>", "ObjectFactory", "List<Class>", "List<Object>"], "throws": null, "modifiers": ["public", "static"], "return_type": "Object", "snippet": "    public static Object createProxy(Object target, Map<String, ResultLoaderMap.LoadPair> unloadedProperties, ObjectFactory objectFactory,            List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {      final Class<?> type = target.getClass();      EnhancedDeserializationProxyImpl callback = new EnhancedDeserializationProxyImpl(type, unloadedProperties, objectFactory, constructorArgTypes, constructorArgs);      Object enhanced = crateProxy(type, callback, constructorArgTypes, constructorArgs);      PropertyCopier.copyBeanProperties(type, target, enhanced);      return enhanced;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/javassist/JavassistProxyFactory.java", "stars": "15", "class": {"name": "EnhancedDeserializationProxyImpl", "extends": "AbstractEnhancedDeserializationProxy", "implements": ["MethodHandler"], "modifiers": ["private", "static"]}}, {"method_name": "invoke", "params": ["Object", "Method", "Method", "Object"], "throws": ["Throwable"], "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object invoke(Object enhanced, Method method, Method methodProxy, Object[] args) throws Throwable {      final Object o = super.invoke(enhanced, method, args);      return o instanceof AbstractSerialStateHolder ? o : methodProxy.invoke(o, args);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/javassist/JavassistProxyFactory.java", "stars": "15", "class": {"name": "EnhancedDeserializationProxyImpl", "extends": "AbstractEnhancedDeserializationProxy", "implements": ["MethodHandler"], "modifiers": ["private", "static"]}}, {"method_name": "newSerialStateHolder", "params": ["Object", "Map<String,ResultLoaderMap>", "ObjectFactory", "List<Class>", "List<Object>"], "throws": null, "modifiers": ["protected"], "return_type": "AbstractSerialStateHolder", "snippet": "    protected AbstractSerialStateHolder newSerialStateHolder(Object userBean, Map<String, ResultLoaderMap.LoadPair> unloadedProperties, ObjectFactory objectFactory,            List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {      return new JavassistSerialStateHolder(userBean, unloadedProperties, objectFactory, constructorArgTypes, constructorArgs);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/loader/javassist/JavassistProxyFactory.java", "stars": "15", "class": {"name": "EnhancedDeserializationProxyImpl", "extends": "AbstractEnhancedDeserializationProxy", "implements": ["MethodHandler"], "modifiers": ["private", "static"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        // \u8bbe\u7f6e\u4e00\u4e2aexit transition        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {            getWindow().requestFeature(Window.FEATURE_CONTENT_TRANSITIONS);            getWindow().setEnterTransition(new Explode());            getWindow().setExitTransition(new Explode());        }        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_recycler_view2);        ButterKnife.bind(this);        initView();        listItemRecycler.addOnScrollListener(new RecyclerView.OnScrollListener() {            @Override            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {                super.onScrollStateChanged(recyclerView, newState);            }            @Override            public void onScrolled(RecyclerView recyclerView, int dx, int dy) {                super.onScrolled(recyclerView, dx, dy);                firstVisibleItem   = linearLayoutManager.findFirstVisibleItemPosition();                lastVisibleItem = linearLayoutManager.findLastVisibleItemPosition();                Debuger.printfLog(\"firstVisibleItem \" + firstVisibleItem +\" lastVisibleItem \" + lastVisibleItem);                //\u5927\u4e8e0\u8bf4\u660e\u6709\u64ad\u653e,//\u5bf9\u5e94\u7684\u64ad\u653e\u5217\u8868TAG                if (smallVideoHelper.getPlayPosition() >= 0 && smallVideoHelper.getPlayTAG().equals(RecyclerItemViewHolder.TAG)) {                    //\u5f53\u524d\u64ad\u653e\u7684\u4f4d\u7f6e                    int position = smallVideoHelper.getPlayPosition();                    //\u4e0d\u53ef\u89c6\u7684\u662f\u65f6\u5019                    if ((position < firstVisibleItem || position > lastVisibleItem)) {                        //\u5982\u679c\u662f\u5c0f\u7a97\u53e3\u5c31\u4e0d\u9700\u8981\u5904\u7406                        if (!smallVideoHelper.isSmall() && !smallVideoHelper.isFull()) {                            //\u5c0f\u7a97\u53e3                            int size = CommonUtil.dip2px(RecyclerView2Activity.this, 150);                            //actionbar\u4e3atrue\u624d\u4e0d\u4f1a\u6389\u4e0b\u9762\u53bb                            smallVideoHelper.showSmallVideo(new Point(size, size), true, true);                        }                    } else {                        if (smallVideoHelper.isSmall()) {                            smallVideoHelper.smallVideoToNormal();                        }                    }                }            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/RecyclerView2Activity.java", "stars": "2", "class": {"name": "RecyclerView2Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBackPressed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBackPressed() {        if (smallVideoHelper.backFromFull()) {            return;        }        super.onBackPressed();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/RecyclerView2Activity.java", "stars": "2", "class": {"name": "RecyclerView2Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDestroy() {        super.onDestroy();        smallVideoHelper.releaseVideoPlayer();        GSYVideoManager.releaseAllVideos();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/RecyclerView2Activity.java", "stars": "2", "class": {"name": "RecyclerView2Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "initView", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initView() {        linearLayoutManager = new LinearLayoutManager(this);        listItemRecycler.setLayoutManager(linearLayoutManager);        resolveData();        recyclerBaseAdapter = new RecyclerBaseAdapter(this, dataList);        listItemRecycler.setAdapter(recyclerBaseAdapter);        smallVideoHelper = new GSYVideoHelper(this, new NormalGSYVideoPlayer(this));        smallVideoHelper.setFullViewContainer(videoFullContainer);        //\u914d\u7f6e        gsySmallVideoHelperBuilder = new GSYVideoHelper.GSYVideoHelperBuilder();        gsySmallVideoHelperBuilder                .setHideActionBar(true)                .setHideStatusBar(true)                .setNeedLockFull(true)                .setCacheWithPlay(true)                .setAutoFullWithSize(true)                .setShowFullAnimation(true)                .setLockLand(true).setVideoAllCallBack(new GSYSampleCallBack() {            @Override            public void onPrepared(String url, Object... objects) {                super.onPrepared(url, objects);                Debuger.printfLog(\"Duration \" + smallVideoHelper.getGsyVideoPlayer().getDuration() + \" CurrentPosition \" + smallVideoHelper.getGsyVideoPlayer().getCurrentPositionWhenPlaying());            }            @Override            public void onQuitSmallWidget(String url, Object... objects) {                super.onQuitSmallWidget(url, objects);                //\u5927\u4e8e0\u8bf4\u660e\u6709\u64ad\u653e,//\u5bf9\u5e94\u7684\u64ad\u653e\u5217\u8868TAG                if (smallVideoHelper.getPlayPosition() >= 0 && smallVideoHelper.getPlayTAG().equals(RecyclerItemViewHolder.TAG)) {                    //\u5f53\u524d\u64ad\u653e\u7684\u4f4d\u7f6e                    int position = smallVideoHelper.getPlayPosition();                    //\u4e0d\u53ef\u89c6\u7684\u662f\u65f6\u5019                    if ((position < firstVisibleItem || position > lastVisibleItem)) {                        //\u91ca\u653e\u6389\u89c6\u9891                        smallVideoHelper.releaseVideoPlayer();                        recyclerBaseAdapter.notifyDataSetChanged();                    }                }            }        });        smallVideoHelper.setGsyVideoOptionBuilder(gsySmallVideoHelperBuilder);        recyclerBaseAdapter.setVideoHelper(smallVideoHelper, gsySmallVideoHelperBuilder);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/RecyclerView2Activity.java", "stars": "2", "class": {"name": "RecyclerView2Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveData", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveData() {        for (int i = 0; i < 19; i++) {            VideoModel videoModel = new VideoModel();            dataList.add(videoModel);        }        if (recyclerBaseAdapter != null)            recyclerBaseAdapter.notifyDataSetChanged();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/RecyclerView2Activity.java", "stars": "2", "class": {"name": "RecyclerView2Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "findAll", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Account>", "snippet": "    public List<Account> findAll() {        return accountMapper.findAll();    }", "url": "https://raw.githubusercontent.com/wanzicong/mybatis-study/master/src/main/java/com/mybatis/service/AccountService.java", "stars": "1", "class": {"name": "AccountService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findSomeBigThanMoney", "params": ["Float", "Float"], "throws": null, "modifiers": ["public"], "return_type": "List<Account>", "snippet": "    public List<Account> findSomeBigThanMoney(Float small, Float big) {        return accountMapper.findSomeBigThanMoney(small, big);    }", "url": "https://raw.githubusercontent.com/wanzicong/mybatis-study/master/src/main/java/com/mybatis/service/AccountService.java", "stars": "1", "class": {"name": "AccountService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "insertSome", "params": ["List<Account>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void insertSome(List<Account> list) {        accountMapper.insertSome(list);    }", "url": "https://raw.githubusercontent.com/wanzicong/mybatis-study/master/src/main/java/com/mybatis/service/AccountService.java", "stars": "1", "class": {"name": "AccountService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "authority", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String authority() {        return name + \"\u6709\u64cd\u4f5c\u8ba2\u5355\u7684\u6743\u9650\";    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/strategy/OrderRole.java", "stars": "2", "class": {"name": "OrderRole", "extends": null, "implements": ["Role"], "modifiers": ["public"]}}, {"method_name": "createLeasing", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Object>", "snippet": "    public ResponseEntity<Object> createLeasing(@RequestBody String eventJson,                                                @RequestHeader(value = \"Stripe-Signature\") String stripeSignature) {        log.debug(\"REST request from Stripe to create leasing : {}\", eventJson);        stripeWebhookService.handleLeasingWebhook(eventJson, stripeSignature);        return new ResponseEntity<>(HttpStatus.OK);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/StripeController.java", "stars": "2", "class": {"name": "StripeController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateAccount", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Object>", "snippet": "    public ResponseEntity<Object> updateAccount(@RequestBody String eventJson,                                                @RequestHeader(value = \"Stripe-Signature\") String stripeSignature) {        log.debug(\"REST request from Stripe to notify about updated account : {}\", eventJson);        stripeWebhookService.handleAccountUpdateWebhook(eventJson, stripeSignature);        return new ResponseEntity<>(HttpStatus.OK);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/StripeController.java", "stars": "2", "class": {"name": "StripeController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findAll", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<User>", "snippet": "    public List<User> findAll() {        return userMapper.findAll();    }", "url": "https://raw.githubusercontent.com/wanzicong/mybatis-study/master/src/main/java/com/mybatis/service/UserService.java", "stars": "1", "class": {"name": "UserService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findAllUserAndRole", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<User>", "snippet": "    public List<User> findAllUserAndRole(){        return userMapper.findAllUserAndRole();    }", "url": "https://raw.githubusercontent.com/wanzicong/mybatis-study/master/src/main/java/com/mybatis/service/UserService.java", "stars": "1", "class": {"name": "UserService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onLayout (boolean p0, int p1, int p2, int p3, int p4)\t{\t\tn_onLayout (p0, p1, p2, p3, p4);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64ee486da937c010f4/FrameRenderer.java", "stars": "2", "class": {"name": "FrameRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onLayout (boolean p0, int p1, int p2, int p3, int p4);\tpublic boolean onTouchEvent (android.view.MotionEvent p0)\t{\t\treturn n_onTouchEvent (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64ee486da937c010f4/FrameRenderer.java", "stars": "2", "class": {"name": "FrameRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onTouchEvent", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onTouchEvent (android.view.MotionEvent p0)\t{\t\treturn n_onTouchEvent (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64ee486da937c010f4/FrameRenderer.java", "stars": "2", "class": {"name": "FrameRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onTouchEvent", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onTouchEvent (android.view.MotionEvent p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64ee486da937c010f4/FrameRenderer.java", "stars": "2", "class": {"name": "FrameRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64ee486da937c010f4/FrameRenderer.java", "stars": "2", "class": {"name": "FrameRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64ee486da937c010f4/FrameRenderer.java", "stars": "2", "class": {"name": "FrameRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "dispatch", "params": ["Computer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void dispatch(Computer computer) {        computer.getHardware().getKeyboard().keyPressed(keycode);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/KeyPressedEvent.java", "stars": "4", "class": {"name": "KeyPressedEvent", "extends": "EmulatorEvent", "implements": null, "modifiers": ["public"]}}, {"method_name": "registerEventPage", "params": ["PageEventListener", "Class<PageEvent>"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void registerEventPage(@NonNull PageEventListener listener, @NonNull Class<? extends PageEvent> eventPage) {        List<WeakReference<? extends PageEventListener>> eventList = EVENT_LISTENER_MAP.get(eventPage);        if (eventList == null) {            eventList = new ArrayList<>();            EVENT_LISTENER_MAP.put(eventPage, eventList);        }        if (indexEventListener(eventList, listener) == -1) {            eventList.add(new WeakReference<>(listener));        }        LogHelper.i(TAG, \"registerEventPage listener: \" + listener);        LogHelper.i(TAG, \"registerEventPage eventPage: \" + eventPage);    }", "url": "https://raw.githubusercontent.com/wkp111/PageEventDemo/master/pageevent/src/main/java/com/wkp/pageevent/helper/EventHelper.java", "stars": "1", "class": {"name": "EventHelper", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "unregisterEventPage", "params": ["PageEventListener", "Class<PageEvent>"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void unregisterEventPage(@NonNull PageEventListener listener, @NonNull Class<? extends PageEvent> eventPage) {        List<WeakReference<? extends PageEventListener>> eventList = EVENT_LISTENER_MAP.get(eventPage);        if (eventList != null) {            int index = indexEventListener(eventList, listener);            if (index != -1) {                eventList.remove(index);            }        }        LogHelper.i(TAG, \"unregisterEventPage listener: \" + listener);        LogHelper.i(TAG, \"unregisterEventPage eventPage: \" + eventPage);    }", "url": "https://raw.githubusercontent.com/wkp111/PageEventDemo/master/pageevent/src/main/java/com/wkp/pageevent/helper/EventHelper.java", "stars": "1", "class": {"name": "EventHelper", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onEvent", "params": ["PageEvent", "int", "Bundle"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void onEvent(@NonNull PageEvent eventPage, @EventType int eventType, @Nullable Bundle eventParams) {        Class<? extends PageEvent> eventPageClass = eventPage.getClass();        List<WeakReference<? extends PageEventListener>> eventList = EVENT_LISTENER_MAP.get(eventPageClass);        if (eventList != null) {            Event event = new Event(new WeakReference<>(eventPage), eventType, eventParams);            for (WeakReference<? extends PageEventListener> reference : eventList) {                PageEventListener listener = reference.get();                if (listener != null) {                    listener.onEvent(event);                }            }            LogHelper.i(TAG, \"onEvent event: \" + event);        }    }", "url": "https://raw.githubusercontent.com/wkp111/PageEventDemo/master/pageevent/src/main/java/com/wkp/pageevent/helper/EventHelper.java", "stars": "1", "class": {"name": "EventHelper", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "registerStickEventPage", "params": ["PageStickEventListener", "Class<PageEvent>"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void registerStickEventPage(@NonNull PageStickEventListener listener, @NonNull Class<? extends PageEvent> eventPage) {        List<WeakReference<? extends PageStickEventListener>> eventList = STICK_EVENT_LISTENER_MAP.get(eventPage);        if (eventList == null) {            eventList = new ArrayList<>();            STICK_EVENT_LISTENER_MAP.put(eventPage, eventList);        }        if (indexEventListener(eventList, listener) == -1) {            // \u7b2c\u4e00\u6b21\u6dfb\u52a0\u8fd9\u4e2a\u76d1\u542c\u5668\uff0c\u67e5\u770b\u662f\u5426\u6709\u76d1\u542c\u9875\u9762\u7684\u7c98\u6027\u4e8b\u4ef6\uff0c\u6709\u5219\u56de\u8c03\u7ed9\u5b83            List<Event> events = STICK_EVENT_MAP.get(eventPage);            if (events != null) {                Iterator<Event> iterator = events.iterator();                while (iterator.hasNext()) {                    Event event = iterator.next();                    boolean interrupt = listener.onStickEvent(event);                    // \u62e6\u622a\u7684\u4e8b\u4ef6\u76f4\u63a5\u79fb\u9664                    if (interrupt) {                        LogHelper.i(TAG, \"registerStickEventPage interrupt event: \" + event);                        iterator.remove();                    }                }            }            eventList.add(new WeakReference<>(listener));        }        LogHelper.i(TAG, \"registerStickEventPage listener: \" + listener);        LogHelper.i(TAG, \"registerStickEventPage eventPage: \" + eventPage);    }", "url": "https://raw.githubusercontent.com/wkp111/PageEventDemo/master/pageevent/src/main/java/com/wkp/pageevent/helper/EventHelper.java", "stars": "1", "class": {"name": "EventHelper", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "unregisterStickEventPage", "params": ["PageStickEventListener", "Class<PageEvent>"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void unregisterStickEventPage(@NonNull PageStickEventListener listener, @NonNull Class<? extends PageEvent> eventPage) {        List<WeakReference<? extends PageStickEventListener>> eventList = STICK_EVENT_LISTENER_MAP.get(eventPage);        if (eventList != null) {            int index = indexEventListener(eventList, listener);            if (index != -1) {                eventList.remove(index);            }        }        LogHelper.i(TAG, \"unregisterStickEventPage listener: \" + listener);        LogHelper.i(TAG, \"unregisterStickEventPage eventPage: \" + eventPage);    }", "url": "https://raw.githubusercontent.com/wkp111/PageEventDemo/master/pageevent/src/main/java/com/wkp/pageevent/helper/EventHelper.java", "stars": "1", "class": {"name": "EventHelper", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onStickEvent", "params": ["PageEvent", "int", "Bundle"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void onStickEvent(@NonNull PageEvent eventPage, @EventType int eventType, @Nullable Bundle eventParams) {        Class<? extends PageEvent> eventPageClass = eventPage.getClass();        Event event = new Event(new WeakReference<>(eventPage), eventType, eventParams);        // \u7f13\u5b58\u7c98\u6027\u4e8b\u4ef6        List<Event> events = STICK_EVENT_MAP.get(eventPageClass);        if (events == null) {            events = new ArrayList<>();            STICK_EVENT_MAP.put(eventPageClass, events);        }        events.add(event);        // \u56de\u8c03\u7c98\u6027\u4e8b\u4ef6        List<WeakReference<? extends PageStickEventListener>> eventList = STICK_EVENT_LISTENER_MAP.get(eventPageClass);        if (eventList != null) {            for (WeakReference<? extends PageStickEventListener> reference : eventList) {                PageStickEventListener listener = reference.get();                if (listener != null) {                    // \u56de\u8c03\u7c98\u6027\u4e8b\u4ef6\uff0c\u662f\u5426\u62e6\u622a\u7c98\u6027\u4e8b\u4ef6\uff0c\u62e6\u622a\u5219\u4e0d\u518d\u7ee7\u7eed\u4f20\u9012                    boolean interrupt = listener.onStickEvent(event);                    if (interrupt) {                        LogHelper.i(TAG, \"onStickEvent interrupt listener: \" + listener);                        events.remove(event);                        break;                    }                }            }        }        LogHelper.i(TAG, \"onStickEvent event: \" + event);    }", "url": "https://raw.githubusercontent.com/wkp111/PageEventDemo/master/pageevent/src/main/java/com/wkp/pageevent/helper/EventHelper.java", "stars": "1", "class": {"name": "EventHelper", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "clearPageStickEvent", "params": ["Class<PageEvent>"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void clearPageStickEvent(Class<? extends PageEvent> eventPage) {        List<Event> events = STICK_EVENT_MAP.get(eventPage);        if (events != null) {            events.clear();        }        STICK_EVENT_MAP.remove(eventPage);        LogHelper.i(TAG, \"clearPageStickEvent eventPage: \" + eventPage);    }", "url": "https://raw.githubusercontent.com/wkp111/PageEventDemo/master/pageevent/src/main/java/com/wkp/pageevent/helper/EventHelper.java", "stars": "1", "class": {"name": "EventHelper", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "release", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void release() {        LogHelper.i(TAG, \"release clear all event\");        clearAllPageStickEvent();        clearAllPageEventListener();        clearAllPageStickEventListener();    }", "url": "https://raw.githubusercontent.com/wkp111/PageEventDemo/master/pageevent/src/main/java/com/wkp/pageevent/helper/EventHelper.java", "stars": "1", "class": {"name": "EventHelper", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "clearAllPageEventListener", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void clearAllPageEventListener() {        Set<Map.Entry<Class<? extends PageEvent>, List<WeakReference<? extends PageEventListener>>>> entries = EVENT_LISTENER_MAP.entrySet();        Iterator<Map.Entry<Class<? extends PageEvent>, List<WeakReference<? extends PageEventListener>>>> iterator = entries.iterator();        while (iterator.hasNext()) {            Map.Entry<Class<? extends PageEvent>, List<WeakReference<? extends PageEventListener>>> entry = iterator.next();            List<WeakReference<? extends PageEventListener>> value = entry.getValue();            if (value != null) {                value.clear();            }            iterator.remove();        }    }", "url": "https://raw.githubusercontent.com/wkp111/PageEventDemo/master/pageevent/src/main/java/com/wkp/pageevent/helper/EventHelper.java", "stars": "1", "class": {"name": "EventHelper", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "clearAllPageStickEventListener", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void clearAllPageStickEventListener() {        Set<Map.Entry<Class<? extends PageEvent>, List<WeakReference<? extends PageStickEventListener>>>> entries = STICK_EVENT_LISTENER_MAP.entrySet();        Iterator<Map.Entry<Class<? extends PageEvent>, List<WeakReference<? extends PageStickEventListener>>>> iterator = entries.iterator();        while (iterator.hasNext()) {            Map.Entry<Class<? extends PageEvent>, List<WeakReference<? extends PageStickEventListener>>> entry = iterator.next();            List<WeakReference<? extends PageStickEventListener>> value = entry.getValue();            if (value != null) {                value.clear();            }            iterator.remove();        }    }", "url": "https://raw.githubusercontent.com/wkp111/PageEventDemo/master/pageevent/src/main/java/com/wkp/pageevent/helper/EventHelper.java", "stars": "1", "class": {"name": "EventHelper", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "clearAllPageStickEvent", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void clearAllPageStickEvent() {        Set<Map.Entry<Class<? extends PageEvent>, List<Event>>> entries = STICK_EVENT_MAP.entrySet();        Iterator<Map.Entry<Class<? extends PageEvent>, List<Event>>> iterator = entries.iterator();        while (iterator.hasNext()) {            Map.Entry<Class<? extends PageEvent>, List<Event>> entry = iterator.next();            List<Event> value = entry.getValue();            if (value != null) {                value.clear();            }            iterator.remove();        }    }", "url": "https://raw.githubusercontent.com/wkp111/PageEventDemo/master/pageevent/src/main/java/com/wkp/pageevent/helper/EventHelper.java", "stars": "1", "class": {"name": "EventHelper", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "indexEventListener", "params": ["List<WeakReference>", "T"], "throws": null, "modifiers": ["private", "static"], "return_type": "int", "snippet": "    private static <T> int indexEventListener(List<WeakReference<? extends T>> eventList, T listener) {        if (eventList == null || listener == null) {            return -1;        }        for (int i = 0; i < eventList.size(); i++) {            WeakReference<? extends T> reference = eventList.get(i);            T eventListener = reference.get();            if (eventListener == listener || listener.equals(eventListener)) {                return i;            }        }        return -1;    }", "url": "https://raw.githubusercontent.com/wkp111/PageEventDemo/master/pageevent/src/main/java/com/wkp/pageevent/helper/EventHelper.java", "stars": "1", "class": {"name": "EventHelper", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "initialize", "params": ["Props"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void initialize(final Props props) {    if (isInitialized) {      logger.info(\"Already initialized\");      return;    }    logger.info(\"Initializing\");    instance = new JobCallbackManager(props);    isInitialized = true;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/event/JobCallbackManager.java", "stars": "18", "class": {"name": "JobCallbackManager", "extends": null, "implements": ["EventListener"], "modifiers": ["public"]}}, {"method_name": "isInitialized", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "  public static boolean isInitialized() {    return isInitialized;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/event/JobCallbackManager.java", "stars": "18", "class": {"name": "JobCallbackManager", "extends": null, "implements": ["EventListener"], "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "JobCallbackManager", "snippet": "  public static JobCallbackManager getInstance() {    if (!isInitialized) {      throw new IllegalStateException(JobCallbackManager.class.getName()          + \" has not been initialized\");    }    return instance;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/event/JobCallbackManager.java", "stars": "18", "class": {"name": "JobCallbackManager", "extends": null, "implements": ["EventListener"], "modifiers": ["public"]}}, {"method_name": "getJmxJobCallbackMBean", "params": [], "throws": null, "modifiers": ["public"], "return_type": "JmxJobCallbackMBean", "snippet": "  public JmxJobCallbackMBean getJmxJobCallbackMBean() {    return this.callbackMbean;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/event/JobCallbackManager.java", "stars": "18", "class": {"name": "JobCallbackManager", "extends": null, "implements": ["EventListener"], "modifiers": ["public"]}}, {"method_name": "handleEvent", "params": ["Event"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void handleEvent(final Event event) {    if (!isInitialized) {      return;    }    if (event.getRunner() instanceof JobRunner) {      try {        if (event.getType() == EventType.JOB_STARTED) {          processJobCallOnStart(event);        } else if (event.getType() == EventType.JOB_FINISHED) {          processJobCallOnFinish(event);        }      } catch (final Throwable e) {        // Use job runner logger so user can see the issue in their job log        final JobRunner jobRunner = (JobRunner) event.getRunner();        jobRunner.getLogger().error(            \"Encountered error while hanlding job callback event\", e);      }    } else {      logger.warn(\"((( Got an unsupported runner: \"          + event.getRunner().getClass().getName() + \" )))\");    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/event/JobCallbackManager.java", "stars": "18", "class": {"name": "JobCallbackManager", "extends": null, "implements": ["EventListener"], "modifiers": ["public"]}}, {"method_name": "processJobCallOnFinish", "params": ["Event"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void processJobCallOnFinish(final Event event) {    final JobRunner jobRunner = (JobRunner) event.getRunner();    final EventData eventData = event.getData();    if (!JobCallbackUtil.isThereJobCallbackProperty(jobRunner.getProps(),        ON_COMPLETION_JOB_CALLBACK_STATUS)) {      return;    }    // don't want to waste time resolving properties if there are no    // callback properties to parse    final Props props = PropsUtils.resolveProps(jobRunner.getProps());    final Map<String, String> contextInfo =        JobCallbackUtil.buildJobContextInfoMap(event, this.azkabanHostName);    JobCallbackStatusEnum jobCallBackStatusEnum = null;    final Logger jobLogger = jobRunner.getLogger();    final Status jobStatus = eventData.getStatus();    if (Status.isSucceeded(jobStatus)) {      jobCallBackStatusEnum = JobCallbackStatusEnum.SUCCESS;    } else if (jobStatus == Status.FAILED        || jobStatus == Status.FAILED_FINISHING || jobStatus == Status.KILLED) {      jobCallBackStatusEnum = JobCallbackStatusEnum.FAILURE;    } else {      jobLogger.info(\"!!!! WE ARE NOT SUPPORTING JOB CALLBACKS FOR STATUS: \"          + jobStatus);      jobCallBackStatusEnum = null; // to be explicit    }    final String jobId = contextInfo.get(CONTEXT_JOB_TOKEN);    if (jobCallBackStatusEnum != null) {      final List<HttpRequestBase> jobCallbackHttpRequests =          JobCallbackUtil.parseJobCallbackProperties(props,              jobCallBackStatusEnum, contextInfo, maxNumCallBack, jobLogger);      if (!jobCallbackHttpRequests.isEmpty()) {        final String msg =            String.format(\"Making %d job callbacks for status: %s\",                jobCallbackHttpRequests.size(), jobCallBackStatusEnum.name());        jobLogger.info(msg);        addDefaultHeaders(jobCallbackHttpRequests);        JobCallbackRequestMaker.getInstance().makeHttpRequest(jobId, jobLogger,            jobCallbackHttpRequests);      } else {        jobLogger.info(\"No job callbacks for status: \" + jobCallBackStatusEnum);      }    }    // for completed status    final List<HttpRequestBase> httpRequestsForCompletedStatus =        JobCallbackUtil.parseJobCallbackProperties(props, COMPLETED,            contextInfo, maxNumCallBack, jobLogger);    // now make the call    if (!httpRequestsForCompletedStatus.isEmpty()) {      jobLogger.info(\"Making \" + httpRequestsForCompletedStatus.size()          + \" job callbacks for status: \" + COMPLETED);      addDefaultHeaders(httpRequestsForCompletedStatus);      JobCallbackRequestMaker.getInstance().makeHttpRequest(jobId, jobLogger,          httpRequestsForCompletedStatus);    } else {      jobLogger.info(\"No job callbacks for status: \" + COMPLETED);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/event/JobCallbackManager.java", "stars": "18", "class": {"name": "JobCallbackManager", "extends": null, "implements": ["EventListener"], "modifiers": ["public"]}}, {"method_name": "processJobCallOnStart", "params": ["Event"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void processJobCallOnStart(final Event event) {    final JobRunner jobRunner = (JobRunner) event.getRunner();    if (JobCallbackUtil.isThereJobCallbackProperty(jobRunner.getProps(),        JobCallbackStatusEnum.STARTED)) {      // don't want to waste time resolving properties if there are      // callback properties to parse      final Props props = PropsUtils.resolveProps(jobRunner.getProps());      final Map<String, String> contextInfo =          JobCallbackUtil.buildJobContextInfoMap(event, this.azkabanHostName);      final List<HttpRequestBase> jobCallbackHttpRequests =          JobCallbackUtil.parseJobCallbackProperties(props, STARTED,              contextInfo, maxNumCallBack, jobRunner.getLogger());      final String jobId = contextInfo.get(CONTEXT_JOB_TOKEN);      final String msg =          String.format(\"Making %d job callbacks for job %s for jobStatus: %s\",              jobCallbackHttpRequests.size(), jobId, STARTED.name());      jobRunner.getLogger().info(msg);      addDefaultHeaders(jobCallbackHttpRequests);      JobCallbackRequestMaker.getInstance().makeHttpRequest(jobId,          jobRunner.getLogger(), jobCallbackHttpRequests);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/event/JobCallbackManager.java", "stars": "18", "class": {"name": "JobCallbackManager", "extends": null, "implements": ["EventListener"], "modifiers": ["public"]}}, {"method_name": "getAzkabanHostName", "params": ["Props"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String getAzkabanHostName(final Props props) {    final String baseURL = props.get(JobRunner.AZKABAN_WEBSERVER_URL);    try {      String hostName = InetAddress.getLocalHost().getHostName();      if (baseURL != null) {        final URL url = new URL(baseURL);        hostName = url.getHost() + \":\" + url.getPort();      }      return hostName;    } catch (final Exception e) {      throw new IllegalStateException(          \"Encountered while getting azkaban host name\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/event/JobCallbackManager.java", "stars": "18", "class": {"name": "JobCallbackManager", "extends": null, "implements": ["EventListener"], "modifiers": ["public"]}}, {"method_name": "addDefaultHeaders", "params": ["List<HttpRequestBase>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void addDefaultHeaders(final List<HttpRequestBase> httpRequests) {    if (httpRequests == null) {      return;    }    final SimpleDateFormat format =        new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss z\");    format.setTimeZone(TimeZone.getTimeZone(\"GMT\"));    for (final HttpRequestBase httpRequest : httpRequests) {      httpRequest.addHeader(new BasicHeader(\"Date\", this.gmtDateFormatter          .format(new Date())));    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/event/JobCallbackManager.java", "stars": "18", "class": {"name": "JobCallbackManager", "extends": null, "implements": ["EventListener"], "modifiers": ["public"]}}, {"method_name": "serialize", "params": ["T"], "throws": ["SerializationException"], "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte[] serialize(T t) throws SerializationException {        if (t == null) {            return new byte[0];        }        return JSON.toJSONString(t, SerializerFeature.WriteClassName).getBytes(DEFAULT_CHARSET);    }", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/utils/redis/FastJsonRedisSerializer.java", "stars": "29", "class": {"name": "FastJsonRedisSerializer", "extends": null, "implements": ["RedisSerializer"], "modifiers": ["public"]}}, {"method_name": "deserialize", "params": ["byte"], "throws": ["SerializationException"], "modifiers": ["public"], "return_type": "T", "snippet": "    public T deserialize(byte[] bytes) throws SerializationException {        if (bytes == null || bytes.length <= 0) {            return null;        }        String str = new String(bytes, DEFAULT_CHARSET);        return (T) JSON.parseObject(str, clazz);    }", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/utils/redis/FastJsonRedisSerializer.java", "stars": "29", "class": {"name": "FastJsonRedisSerializer", "extends": null, "implements": ["RedisSerializer"], "modifiers": ["public"]}}, {"method_name": "toArray", "params": ["K"], "throws": null, "modifiers": ["public"], "return_type": "K", "snippet": "    public <K> K[] toArray(K[] a) {        return data.toArray(a);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomCollection.java", "stars": "15", "class": {"name": "CustomCollection", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toArray", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object[] toArray() {        return data.toArray();    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomCollection.java", "stars": "15", "class": {"name": "CustomCollection", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "subList", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "List<T>", "snippet": "    public List<T> subList(int fromIndex, int toIndex) {        return data.subList(fromIndex, toIndex);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomCollection.java", "stars": "15", "class": {"name": "CustomCollection", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "size", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int size() {        return data.size();    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomCollection.java", "stars": "15", "class": {"name": "CustomCollection", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "set", "params": ["int", "T"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public T set(int index, T element) {        return data.set(index, element);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomCollection.java", "stars": "15", "class": {"name": "CustomCollection", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "retainAll", "params": ["Collection<?>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean retainAll(Collection<?> c) {        return data.retainAll(c);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomCollection.java", "stars": "15", "class": {"name": "CustomCollection", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeAll", "params": ["Collection<?>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean removeAll(Collection<?> c) {        return data.removeAll(c);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomCollection.java", "stars": "15", "class": {"name": "CustomCollection", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "remove", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public T remove(int index) {        return data.remove(index);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomCollection.java", "stars": "15", "class": {"name": "CustomCollection", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "remove", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean remove(Object o) {        return data.remove(o);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomCollection.java", "stars": "15", "class": {"name": "CustomCollection", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "listIterator", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "ListIterator<T>", "snippet": "    public ListIterator<T> listIterator(int index) {        return data.listIterator(index);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomCollection.java", "stars": "15", "class": {"name": "CustomCollection", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "listIterator", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ListIterator<T>", "snippet": "    public ListIterator<T> listIterator() {        return data.listIterator();    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomCollection.java", "stars": "15", "class": {"name": "CustomCollection", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "lastIndexOf", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int lastIndexOf(Object o) {        return data.lastIndexOf(o);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomCollection.java", "stars": "15", "class": {"name": "CustomCollection", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "iterator", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Iterator<T>", "snippet": "    public Iterator<T> iterator() {        return data.iterator();    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomCollection.java", "stars": "15", "class": {"name": "CustomCollection", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isEmpty", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isEmpty() {        return data.isEmpty();    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomCollection.java", "stars": "15", "class": {"name": "CustomCollection", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "indexOf", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int indexOf(Object o) {        return data.indexOf(o);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomCollection.java", "stars": "15", "class": {"name": "CustomCollection", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int hashCode() {        return data.hashCode();    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomCollection.java", "stars": "15", "class": {"name": "CustomCollection", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public T get(int index) {        return data.get(index);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomCollection.java", "stars": "15", "class": {"name": "CustomCollection", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean equals(Object o) {        if (!(o instanceof CustomCollection)) return false;        return data.equals(((CustomCollection)o).data);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomCollection.java", "stars": "15", "class": {"name": "CustomCollection", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "containsAll", "params": ["Collection<?>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean containsAll(Collection<?> c) {        return data.containsAll(c);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomCollection.java", "stars": "15", "class": {"name": "CustomCollection", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "contains", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean contains(Object o) {        return data.contains(o);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomCollection.java", "stars": "15", "class": {"name": "CustomCollection", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clear() {        data.clear();    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomCollection.java", "stars": "15", "class": {"name": "CustomCollection", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addAll", "params": ["int", "Collection<T>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean addAll(int index, Collection<? extends T> c) {        return data.addAll(index, c);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomCollection.java", "stars": "15", "class": {"name": "CustomCollection", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addAll", "params": ["Collection<T>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean addAll(Collection<? extends T> c) {        return data.addAll(c);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomCollection.java", "stars": "15", "class": {"name": "CustomCollection", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "add", "params": ["int", "T"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void add(int index, T element) {        data.add(index, element);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomCollection.java", "stars": "15", "class": {"name": "CustomCollection", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "add", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean add(T e) {        return data.add(e);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomCollection.java", "stars": "15", "class": {"name": "CustomCollection", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSpriteForSide", "params": ["Direction", "BlockRenderView", "BlockState", "BlockPos", "Random"], "throws": null, "modifiers": ["public"], "return_type": "Sprite", "snippet": "\tpublic Sprite getSpriteForSide(Direction side, BlockRenderView view, BlockState state, BlockPos pos, Random random) {\t\tint wPos = 0;\t\tint hPos = 0;\t\tswitch(side.getAxis()) {\t\tcase X:\t\t\tif(side.getOffsetX() < 0) {\t\t\t\twPos = CBTUtil.actualMod(pos.getZ(), width);\t\t\t} else {\t\t\t\twPos = CBTUtil.actualMod(pos.getZ() - 1, width);\t\t\t}\t\t\thPos = CBTUtil.actualMod(-pos.getY(), height);\t\t\tbreak;\t\tcase Z:\t\t\tif(side.getOffsetZ() < 0) {\t\t\t\twPos = CBTUtil.actualMod(pos.getX() - 1, width);\t\t\t} else {\t\t\t\twPos = CBTUtil.actualMod(pos.getX(), width);\t\t\t}\t\t\thPos = CBTUtil.actualMod(-pos.getY(), height);\t\t\tbreak;\t\tcase Y:\t\t\twPos = CBTUtil.actualMod(pos.getX(), width);\t\t\tif(side.getOffsetY() < 0) {\t\t\t\thPos = CBTUtil.actualMod(-pos.getZ() - 1, height);\t\t\t} else {\t\t\t\thPos = CBTUtil.actualMod(pos.getZ(), height);\t\t\t}\t\t}\t\treturn connects[wPos + hPos * width];\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/sprite/RepeatingCTMSpriteProvider.java", "stars": "3", "class": {"name": "RepeatingCTMSpriteProvider", "extends": "BaseSpriteProvider", "implements": null, "modifiers": ["public"]}}, {"method_name": "isWriteNote", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean isWriteNote() {        return true;    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/templatemethod/JavaCourse.java", "stars": "2", "class": {"name": "JavaCourse", "extends": "AbstractCourse", "implements": null, "modifiers": ["public"]}}, {"method_name": "packageCourse", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void packageCourse() {        System.out.println(\"\u63d0\u4f9bJava\u8bfe\u7a0b\u7684\u6e90\u4ee3\u7801\");    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/templatemethod/JavaCourse.java", "stars": "2", "class": {"name": "JavaCourse", "extends": "AbstractCourse", "implements": null, "modifiers": ["public"]}}, {"method_name": "of", "params": ["String", "Consumer<String>"], "throws": null, "modifiers": ["public", "static"], "return_type": "Task", "snippet": "    public static Task of(String name, Consumer<String> task) {        return new Task() {            private final List<ExecutionEndedListener> listeners = new ArrayList<>();            @Override            public String getName() {                return name;            }            @Override            public void execute(String parameter) {                task.accept(parameter);            }            @Override            public Instance instance(String parameter) {                return new Instance(name, parameter);            }            @Override            public void subscribe(ExecutionEndedListener listener) {                listeners.add(listener);            }            @Override            public void unsubscribe(ExecutionEndedListener listener) {                listeners.remove(listener);            }            @Override            public void notifyListeners(String taskId) {                listeners.forEach(listener -> listener.executed(name, taskId));            }        };    }", "url": "https://raw.githubusercontent.com/oliverselinger/failsafe-executor/master/src/main/java/os/failsafe/executor/Tasks.java", "stars": "2", "class": {"name": "Tasks", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onStartJob", "params": ["JobParameters"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onStartJob(JobParameters params) {        this.updateIPManager(params);        return false;    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/IPMJobsService.java", "stars": "1", "class": {"name": "IPMJobsService", "extends": "JobService", "implements": null, "modifiers": ["public"]}}, {"method_name": "onStopJob", "params": ["JobParameters"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onStopJob(JobParameters params) {        return true;    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/IPMJobsService.java", "stars": "1", "class": {"name": "IPMJobsService", "extends": "JobService", "implements": null, "modifiers": ["public"]}}, {"method_name": "updateIPManager", "params": ["JobParameters"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void updateIPManager(JobParameters params) {        new Thread(new Runnable() {            @Override            public void run() {                while (true) {                    if (CredentialsManager.getInstance().isOnline()) {                        IPManager.getInstance().recalculateServicesStatus();                    }                    try {                        Thread.sleep(10000);                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                }            }        }).start();    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/IPMJobsService.java", "stars": "1", "class": {"name": "IPMJobsService", "extends": "JobService", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        File file = new File(\"c:\\\\abc\");        getAllFile(file);    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/19.%E3%80%90File%E7%B1%BB%E3%80%81%E9%80%92%E5%BD%92%E3%80%91-%E7%AC%94%E8%AE%B0/code/08_FileAndRecursion/src/com/itheima/demo02/Recursion/Demo04Recurison.java", "stars": "2", "class": {"name": "Demo04Recurison", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllFile", "params": ["File"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void getAllFile(File dir){        System.out.println(dir);//\u6253\u5370\u88ab\u904d\u5386\u7684\u76ee\u5f55\u540d\u79f0        File[] files = dir.listFiles();        for (File f : files) {            //\u5bf9\u904d\u5386\u5f97\u5230\u7684File\u5bf9\u8c61f\u8fdb\u884c\u5224\u65ad,\u5224\u65ad\u662f\u5426\u662f\u6587\u4ef6\u5939            if(f.isDirectory()){                //f\u662f\u4e00\u4e2a\u6587\u4ef6\u5939,\u5219\u7ee7\u7eed\u904d\u5386\u8fd9\u4e2a\u6587\u4ef6\u5939                //\u6211\u4eec\u53d1\u73b0getAllFile\u65b9\u6cd5\u5c31\u662f\u4f20\u9012\u6587\u4ef6\u5939,\u904d\u5386\u6587\u4ef6\u5939\u7684\u65b9\u6cd5                //\u6240\u4ee5\u76f4\u63a5\u8c03\u7528getAllFile\u65b9\u6cd5\u5373\u53ef:\u9012\u5f52(\u81ea\u5df1\u8c03\u7528\u81ea\u5df1)                getAllFile(f);            }else{                //f\u662f\u4e00\u4e2a\u6587\u4ef6,\u76f4\u63a5\u6253\u5370\u5373\u53ef                System.out.println(f);            }        }    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/19.%E3%80%90File%E7%B1%BB%E3%80%81%E9%80%92%E5%BD%92%E3%80%91-%E7%AC%94%E8%AE%B0/code/08_FileAndRecursion/src/com/itheima/demo02/Recursion/Demo04Recurison.java", "stars": "2", "class": {"name": "Demo04Recurison", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        String pidFile = System.getProperty(\"pid.file\", \"\");        try {            ProcessUtil.mountPIDFile(pidFile);        }catch(Exception e){            LOG.error(\"Fail to store PID file in disk path: [\" + pidFile +\"]\", e);            return;        }        try {            SpringApplication.run(ServiceApplication.class, args);        }catch(Throwable e){            LOG.error(e.getMessage(), e);            System.exit(1);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/ServiceApplication.java", "stars": "23", "class": {"name": "ServiceApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getName() {    return this.name;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/metric/AbstractMetric.java", "stars": "18", "class": {"name": "AbstractMetric", "extends": null, "implements": ["IMetric", "Cloneable"], "modifiers": ["public", "abstract"]}}, {"method_name": "getValueType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getValueType() {    return this.type;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/metric/AbstractMetric.java", "stars": "18", "class": {"name": "AbstractMetric", "extends": null, "implements": ["IMetric", "Cloneable"], "modifiers": ["public", "abstract"]}}, {"method_name": "updateMetricManager", "params": ["MetricReportManager"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void updateMetricManager(final MetricReportManager manager) {    this.metricManager = manager;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/metric/AbstractMetric.java", "stars": "18", "class": {"name": "AbstractMetric", "extends": null, "implements": ["IMetric", "Cloneable"], "modifiers": ["public", "abstract"]}}, {"method_name": "getSnapshot", "params": [], "throws": ["CloneNotSupportedException"], "modifiers": ["public"], "return_type": "IMetric<T>", "snippet": "  public IMetric<T> getSnapshot() throws CloneNotSupportedException {    return (IMetric<T>) this.clone();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/metric/AbstractMetric.java", "stars": "18", "class": {"name": "AbstractMetric", "extends": null, "implements": ["IMetric", "Cloneable"], "modifiers": ["public", "abstract"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T getValue() {    return this.value;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/metric/AbstractMetric.java", "stars": "18", "class": {"name": "AbstractMetric", "extends": null, "implements": ["IMetric", "Cloneable"], "modifiers": ["public", "abstract"]}}, {"method_name": "notifyManager", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void notifyManager() {    logger.debug(String.format(\"Notifying Manager for %s\", this.getClass().getName()));    try {      this.metricManager.reportMetric(this);    } catch (final Throwable ex) {      logger.error(          String.format(\"Metric Manager is not set for %s metric\", this.getClass().getName()), ex);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/metric/AbstractMetric.java", "stars": "18", "class": {"name": "AbstractMetric", "extends": null, "implements": ["IMetric", "Cloneable"], "modifiers": ["public", "abstract"]}}, {"method_name": "addInfoMessage", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void addInfoMessage(String msg) {\t\tFacesMessage message = new FacesMessage(FacesMessage.SEVERITY_INFO, null, msg);\t\tFacesContext.getCurrentInstance().addMessage(null, message);\t\t\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/util/FacesUtil.java", "stars": "1", "class": {"name": "FacesUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addErrorMessage", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void addErrorMessage(String msg) {\t\tFacesMessage message = new FacesMessage(FacesMessage.SEVERITY_ERROR, null, msg);\t\tFacesContext.getCurrentInstance().addMessage(null, message);\t   \t\t\t\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/util/FacesUtil.java", "stars": "1", "class": {"name": "FacesUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRowIndex", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getRowIndex() {        return rowIndex;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/utils/MediaListRow.java", "stars": "4", "class": {"name": "MediaListRow", "extends": "ListRow", "implements": null, "modifiers": ["public"]}}, {"method_name": "setRowIndex", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRowIndex(int rowIndex) {        this.rowIndex = rowIndex;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/utils/MediaListRow.java", "stars": "4", "class": {"name": "MediaListRow", "extends": "ListRow", "implements": null, "modifiers": ["public"]}}, {"method_name": "getInfo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public T getInfo() {        return info;    }", "url": "https://raw.githubusercontent.com/FabianCristancho/Grammatical-Tree-LF/master/src/model/NTreeNode.java", "stars": "1", "class": {"name": "NTreeNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setInfo", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setInfo(T info) {        this.info = info;    }", "url": "https://raw.githubusercontent.com/FabianCristancho/Grammatical-Tree-LF/master/src/model/NTreeNode.java", "stars": "1", "class": {"name": "NTreeNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getChilds", "params": [], "throws": null, "modifiers": ["public"], "return_type": "SimpleList<NTreeNode>", "snippet": "    public SimpleList<NTreeNode<T>> getChilds() {        return childs;    }", "url": "https://raw.githubusercontent.com/FabianCristancho/Grammatical-Tree-LF/master/src/model/NTreeNode.java", "stars": "1", "class": {"name": "NTreeNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setChilds", "params": ["SimpleList<NTreeNode>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setChilds(SimpleList<NTreeNode<T>> childs) {        this.childs = childs;    }", "url": "https://raw.githubusercontent.com/FabianCristancho/Grammatical-Tree-LF/master/src/model/NTreeNode.java", "stars": "1", "class": {"name": "NTreeNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUpdateTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getUpdateTime() {    return this.updateTime;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionReference.java", "stars": "18", "class": {"name": "ExecutionReference", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUpdateTime", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setUpdateTime(final long updateTime) {    this.updateTime = updateTime;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionReference.java", "stars": "18", "class": {"name": "ExecutionReference", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNextCheckTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getNextCheckTime() {    return this.nextCheckTime;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionReference.java", "stars": "18", "class": {"name": "ExecutionReference", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setNextCheckTime", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNextCheckTime(final long nextCheckTime) {    this.nextCheckTime = nextCheckTime;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionReference.java", "stars": "18", "class": {"name": "ExecutionReference", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getExecId() {    return this.execId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionReference.java", "stars": "18", "class": {"name": "ExecutionReference", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNumErrors", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getNumErrors() {    return this.numErrors;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionReference.java", "stars": "18", "class": {"name": "ExecutionReference", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setNumErrors", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNumErrors(final int numErrors) {    this.numErrors = numErrors;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionReference.java", "stars": "18", "class": {"name": "ExecutionReference", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecutor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Optional<Executor>", "snippet": "  public Optional<Executor> getExecutor() {    return Optional.ofNullable(this.executor);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionReference.java", "stars": "18", "class": {"name": "ExecutionReference", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setExecutor", "params": ["Executor"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setExecutor(final @Nullable Executor executor) {    this.executor = executor;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionReference.java", "stars": "18", "class": {"name": "ExecutionReference", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "uploadCycleFlow", "params": ["ExecutionCycle"], "throws": ["ExecutorManagerException"], "modifiers": ["synchronized", "public"], "return_type": "int", "snippet": "    public synchronized int uploadCycleFlow(ExecutionCycle cycleFlow) throws ExecutorManagerException {        long now = System.currentTimeMillis();        Object[] params = new Object[] {                cycleFlow.getStatus().getNumVal(),                cycleFlow.getCurrentExecId(),                cycleFlow.getProjectId(),                cycleFlow.getFlowId(),                cycleFlow.getSubmitUser(),                now,                now,                cycleFlow.getStartTime(),                cycleFlow.getEndTime()        };        SQLTransaction<Integer> insertAndGetLastId = transOperator -> {            transOperator.update(UPLOAD_CYCLE_FLOW_SQL, params);            transOperator.getConnection().commit();            return (int)transOperator.getLastInsertId();        };        try {            int id = dbOperator.transaction(insertAndGetLastId);            cycleFlow.setId(id);            updateCycleFlow(cycleFlow);            return id;        } catch (SQLException e) {            logger.error(\"upload cycle flow failed, flowID: \" + cycleFlow.getFlowId(), e);            throw new ExecutorManagerException(\"upload cycle flow failed, flowID: \" + cycleFlow.getFlowId(), e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycleDao.java", "stars": "18", "class": {"name": "ExecutionCycleDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateCycleFlow", "params": ["int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["synchronized", "public"], "return_type": "int", "snippet": "    public synchronized int updateCycleFlow(int execId, int execIdNew) throws ExecutorManagerException {        long now = System.currentTimeMillis();        try {            return dbOperator.update(UPDATE_CYCLE_FLOW_BY_EXECID_SQL, execIdNew, now, execId);        } catch (SQLException e) {            logger.error(\"update cycle flow failed, execId: \" + execId, e);            throw new ExecutorManagerException(\"update cycle flow failed, execId: \" + execId, e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycleDao.java", "stars": "18", "class": {"name": "ExecutionCycleDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateCycleFlow", "params": ["ExecutionCycle"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int updateCycleFlow(ExecutionCycle cycleFlow) throws ExecutorManagerException {        try {            String json = JSONUtils.toJSON(cycleFlow);            byte[] data =  GZIPUtils.gzipBytes(json.getBytes(StandardCharsets.UTF_8));            Object[] params = new Object[] {                    cycleFlow.getStatus().getNumVal(),                    cycleFlow.getCurrentExecId(),                    System.currentTimeMillis(),                    cycleFlow.getStartTime(),                    cycleFlow.getEndTime(),                    EncodingType.GZIP.getNumVal(),                    data,                    cycleFlow.getId()            };            return dbOperator.update(UPDATE_CYCLE_FLOW_BY_ID_SQL, params);        } catch (SQLException | IOException e) {            logger.error(\"update cycle flow failed, id: \" + cycleFlow.getId(), e);            throw new ExecutorManagerException(\"update cycle flow failed, execId: \" + cycleFlow.getId(), e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycleDao.java", "stars": "18", "class": {"name": "ExecutionCycleDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "stopAllCycleFlows", "params": [], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int stopAllCycleFlows() throws ExecutorManagerException {        try {            return dbOperator.update(STOP_ALL_RUNNING_CYCLE_FLOWS, System.currentTimeMillis());        } catch (SQLException e) {            logger.error(\"stop all cycle flows failed\", e);            throw new ExecutorManagerException(\"stop all cycle flows failed\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycleDao.java", "stars": "18", "class": {"name": "ExecutionCycleDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllRunningCycleFlows", "params": [], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutionCycle>", "snippet": "    public List<ExecutionCycle> getAllRunningCycleFlows() throws ExecutorManagerException {        try {            return dbOperator.query(GET_ALL_RUNNING_CYCLE_FLOWS, this::resultSet2CycleFlows);        } catch (SQLException e) {            logger.error(\"get all running cycle flows failed\");            throw new ExecutorManagerException(\"get all running cycle flows failed\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycleDao.java", "stars": "18", "class": {"name": "ExecutionCycleDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecutionCycleFlow", "params": ["String", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "ExecutionCycle", "snippet": "    public ExecutionCycle getExecutionCycleFlow(String projectId, String flowId) throws ExecutorManagerException {        try {            List<ExecutionCycle> cycleFlows = dbOperator.query(GET_CYCLE_FLOW_SQL, this::resultSet2CycleFlows, projectId, flowId);            return cycleFlows.isEmpty() ? null : cycleFlows.get(0);        } catch (SQLException e) {            logger.error(String.format(\"get cycle flow failed, projectId: %s, flowId: %s\", projectId, flowId), e);            throw new ExecutorManagerException(String.format(\"get cycle flow failed, projectId: %s, flowId: %s\", projectId, flowId), e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycleDao.java", "stars": "18", "class": {"name": "ExecutionCycleDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecutionCycleFlow", "params": ["int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "ExecutionCycle", "snippet": "    public ExecutionCycle getExecutionCycleFlow(int id) throws ExecutorManagerException {        try {            List<ExecutionCycle> cycleFlows = dbOperator.query(GET_CYCLE_FLOW_BY_ID_SQL, this::resultSet2CycleFlows, id);            return cycleFlows.isEmpty() ? null : cycleFlows.get(0);        } catch (SQLException e) {            logger.error(String.format(\"get cycle flow failed, id: %d\", id), e);            throw new ExecutorManagerException(String.format(\"get cycle flow failed, id: %d\", id), e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycleDao.java", "stars": "18", "class": {"name": "ExecutionCycleDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCycleFlowsTotal", "params": ["Optional<String>"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCycleFlowsTotal(Optional<String> usernameOp) throws ExecutorManagerException {        ResultSetHandler<Integer> handler = rs -> rs.next() ? rs.getInt(1) : 0;        try {            if (usernameOp.isPresent()) {                String querySQL = GET_CYCLE_FLOWS_TOTAL_SQL + \" AND submit_user = ?\";                return dbOperator.query(querySQL, handler, usernameOp.get());            } else {                return dbOperator.query(GET_CYCLE_FLOWS_TOTAL_SQL, handler);            }        } catch (SQLException e) {            logger.error(\"get cycle flows count failed, username: \" + usernameOp.orElse(\"admin\"), e);            throw new ExecutorManagerException(\"get cycle flows count failed, username: \" + usernameOp.orElse(\"admin\"), e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycleDao.java", "stars": "18", "class": {"name": "ExecutionCycleDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCycleFlowsTotal", "params": ["String", "List<Integer>"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCycleFlowsTotal(String username, List<Integer> maintainedProjectIds) throws ExecutorManagerException {        ResultSetHandler<Integer> handler = rs -> rs.next() ? rs.getInt(1) : 0;        try {            String projectIds = maintainedProjectIds.stream()                    .map(Objects::toString)                    .collect(joining(\",\", \"(\", \")\"));            String querySQL = GET_CYCLE_FLOWS_TOTAL_SQL + \" AND (project_id IN \" + projectIds + \" OR submit_user = ?)\";            return dbOperator.query(querySQL, handler, username);        } catch (SQLException e) {            logger.error(\"get cycle flows count failed\", e);            throw new ExecutorManagerException(\"get cycle flows count failed\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycleDao.java", "stars": "18", "class": {"name": "ExecutionCycleDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "listCycleFlows", "params": ["Optional<String>", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutionCycle>", "snippet": "    public List<ExecutionCycle> listCycleFlows(Optional<String> usernameOp, int offset, int length) throws ExecutorManagerException {        try {            if (usernameOp.isPresent()) {                String querySQL = LIST_CYCLE_fLOWS_SQL + \" AND submit_user = ? LIMIT ?, ?\";                Object[] params = new Object[]{usernameOp.get(), offset, length};                return dbOperator.query(querySQL, this::resultSet2CycleFlows, params);            } else {                String querySQL = LIST_CYCLE_fLOWS_SQL + \" LIMIT ?, ?\";                Object[] params = new Object[]{offset, length};                return dbOperator.query(querySQL, this::resultSet2CycleFlows, params);            }        } catch (SQLException e) {            logger.error(\"list cycle flows failed, username: \" + usernameOp.orElse(\"admin\"), e);            throw new ExecutorManagerException(\"list cycle flows failed, username: \" + usernameOp.orElse(\"admin\"), e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycleDao.java", "stars": "18", "class": {"name": "ExecutionCycleDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "listCycleFlows", "params": ["String", "List<Integer>", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutionCycle>", "snippet": "    public List<ExecutionCycle> listCycleFlows(String username, List<Integer> maintainedProjectIds, int offset, int length) throws ExecutorManagerException {        try {            String projectIds = maintainedProjectIds.stream()                    .map(Objects::toString)                    .collect(joining(\",\", \"(\", \")\"));            String querySQL = LIST_CYCLE_fLOWS_SQL                    + \" AND (project_id IN \" + projectIds + \" OR submit_user = ?)\"                    + \" LIMIT ?, ?\";            Object[] params = new Object[]{username, offset, length};            return dbOperator.query(querySQL, this::resultSet2CycleFlows, params);        } catch (SQLException e) {            logger.error(\"list cycle flows failed\", e);            throw new ExecutorManagerException(\"list cycle flows failed\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycleDao.java", "stars": "18", "class": {"name": "ExecutionCycleDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resultSet2CycleFlows", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "List<ExecutionCycle>", "snippet": "    private List<ExecutionCycle> resultSet2CycleFlows(ResultSet rs) throws SQLException {        List<ExecutionCycle> cycleFlows = new ArrayList<>();        while (rs.next()) {            ExecutionCycle cycleFlow = new ExecutionCycle();            cycleFlow.setId(rs.getInt(1));            cycleFlow.setStatus(Status.fromInteger(rs.getInt(2)));            cycleFlow.setCurrentExecId(rs.getInt(3));            cycleFlow.setProjectId(rs.getInt(4));            cycleFlow.setFlowId(rs.getString(5));            cycleFlow.setSubmitUser(rs.getString(6));            cycleFlow.setSubmitTime(rs.getLong(7));            cycleFlow.setUpdateTime(rs.getLong(8));            cycleFlow.setStartTime(rs.getLong(9));            cycleFlow.setEndTime(rs.getLong(10));            cycleFlow.setEncType(rs.getInt(11));            cycleFlow.setData(rs.getBytes(12));            cycleFlows.add(cycleFlow);        }        return cycleFlows;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionCycleDao.java", "stars": "18", "class": {"name": "ExecutionCycleDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPos", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BlockPos", "snippet": "    public BlockPos getPos() {        return pos;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/events/DamageBlockEvent.java", "stars": "12", "class": {"name": "DamageBlockEvent", "extends": "Event", "implements": null, "modifiers": ["public"]}}, {"method_name": "setPos", "params": ["BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPos(BlockPos pos) {        this.pos = pos;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/events/DamageBlockEvent.java", "stars": "12", "class": {"name": "DamageBlockEvent", "extends": "Event", "implements": null, "modifiers": ["public"]}}, {"method_name": "getFace", "params": [], "throws": null, "modifiers": ["public"], "return_type": "EnumFacing", "snippet": "    public EnumFacing getFace() {        return face;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/events/DamageBlockEvent.java", "stars": "12", "class": {"name": "DamageBlockEvent", "extends": "Event", "implements": null, "modifiers": ["public"]}}, {"method_name": "setFace", "params": ["EnumFacing"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFace(EnumFacing face) {        this.face = face;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/events/DamageBlockEvent.java", "stars": "12", "class": {"name": "DamageBlockEvent", "extends": "Event", "implements": null, "modifiers": ["public"]}}, {"method_name": "toBytes", "params": ["ByteBuf"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void toBytes(ByteBuf buf) {        buf.writeFloat(x);        buf.writeFloat(y);        buf.writeFloat(z);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Network/Vec3fPacket.java", "stars": "2", "class": {"name": "Vec3fPacket", "extends": "AbstractPacket", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "fromBytes", "params": ["ByteBuf"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void fromBytes(ByteBuf buf) {        x = buf.readFloat();        y = buf.readFloat();        z = buf.readFloat();    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Network/Vec3fPacket.java", "stars": "2", "class": {"name": "Vec3fPacket", "extends": "AbstractPacket", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isHasErrors", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isHasErrors() {        return hasErrors;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/validator/ValidationResult.java", "stars": "1", "class": {"name": "ValidationResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setHasErrors", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setHasErrors(boolean hasErrors) {        this.hasErrors = hasErrors;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/validator/ValidationResult.java", "stars": "1", "class": {"name": "ValidationResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getErrorMsgMap", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,String>", "snippet": "    public Map<String, String> getErrorMsgMap() {        return errorMsgMap;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/validator/ValidationResult.java", "stars": "1", "class": {"name": "ValidationResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setErrorMsgMap", "params": ["Map<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setErrorMsgMap(Map<String, String> errorMsgMap) {        this.errorMsgMap = errorMsgMap;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/validator/ValidationResult.java", "stars": "1", "class": {"name": "ValidationResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getErrMsg", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getErrMsg() {        return StringUtils.join(errorMsgMap.values().toArray(), \", \");    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/validator/ValidationResult.java", "stars": "1", "class": {"name": "ValidationResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "intToRoman", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String intToRoman(int num) {        String[] M = {\"\", \"M\", \"MM\", \"MMM\"};        String[] C = {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};        String[] X = {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"};        String[] I = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};        return M[num/1000] + C[(num%1000)/100] + X[(num%100)/10] + I[num%10];    }", "url": "https://raw.githubusercontent.com/nishantc1527/LeetCode/master/src/IntegerToRoman.java", "stars": "1", "class": {"name": "IntegerToRoman", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testCorsOnApiPath", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testCorsOnApiPath() {    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/config/WebConfigurerTestController.java", "stars": "2", "class": {"name": "WebConfigurerTestController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testCorsOnOtherPath", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testCorsOnOtherPath() {    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/config/WebConfigurerTestController.java", "stars": "2", "class": {"name": "WebConfigurerTestController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": ["Context"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void init(Context context) {        mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);        mPaint.setStyle(Paint.Style.FILL);        mVerticalPadding = UIUtil.dip2px(context, 6);        mHorizontalPadding = UIUtil.dip2px(context, 10);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/WrapPagerIndicator.java", "stars": "1", "class": {"name": "WrapPagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        mPaint.setColor(mFillColor);        canvas.drawRoundRect(mRect, mRoundRadius, mRoundRadius, mPaint);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/WrapPagerIndicator.java", "stars": "1", "class": {"name": "WrapPagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "onPageScrolled", "params": ["int", "float", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {        if (mPositionDataList == null || mPositionDataList.isEmpty()) {            return;        }        // \u8ba1\u7b97\u951a\u70b9\u4f4d\u7f6e        PositionData current = FragmentContainerHelper.getImitativePositionData(mPositionDataList, position);        PositionData next = FragmentContainerHelper.getImitativePositionData(mPositionDataList, position + 1);        mRect.left = current.mContentLeft - mHorizontalPadding + (next.mContentLeft - current.mContentLeft) * mEndInterpolator.getInterpolation(positionOffset);        mRect.top = current.mContentTop - mVerticalPadding;        mRect.right = current.mContentRight + mHorizontalPadding + (next.mContentRight - current.mContentRight) * mStartInterpolator.getInterpolation(positionOffset);        mRect.bottom = current.mContentBottom + mVerticalPadding;        if (!mRoundRadiusSet) {            mRoundRadius = mRect.height() / 2;        }        invalidate();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/WrapPagerIndicator.java", "stars": "1", "class": {"name": "WrapPagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "onPageSelected", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPageSelected(int position) {    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/WrapPagerIndicator.java", "stars": "1", "class": {"name": "WrapPagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "onPageScrollStateChanged", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPageScrollStateChanged(int state) {    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/WrapPagerIndicator.java", "stars": "1", "class": {"name": "WrapPagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "onPositionDataProvide", "params": ["List<PositionData>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPositionDataProvide(List<PositionData> dataList) {        mPositionDataList = dataList;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/WrapPagerIndicator.java", "stars": "1", "class": {"name": "WrapPagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "getPaint", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Paint", "snippet": "    public Paint getPaint() {        return mPaint;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/WrapPagerIndicator.java", "stars": "1", "class": {"name": "WrapPagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "getVerticalPadding", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getVerticalPadding() {        return mVerticalPadding;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/WrapPagerIndicator.java", "stars": "1", "class": {"name": "WrapPagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "setVerticalPadding", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setVerticalPadding(int verticalPadding) {        mVerticalPadding = verticalPadding;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/WrapPagerIndicator.java", "stars": "1", "class": {"name": "WrapPagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "getHorizontalPadding", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getHorizontalPadding() {        return mHorizontalPadding;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/WrapPagerIndicator.java", "stars": "1", "class": {"name": "WrapPagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "setHorizontalPadding", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setHorizontalPadding(int horizontalPadding) {        mHorizontalPadding = horizontalPadding;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/WrapPagerIndicator.java", "stars": "1", "class": {"name": "WrapPagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "getFillColor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getFillColor() {        return mFillColor;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/WrapPagerIndicator.java", "stars": "1", "class": {"name": "WrapPagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "setFillColor", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFillColor(int fillColor) {        mFillColor = fillColor;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/WrapPagerIndicator.java", "stars": "1", "class": {"name": "WrapPagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "getRoundRadius", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getRoundRadius() {        return mRoundRadius;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/WrapPagerIndicator.java", "stars": "1", "class": {"name": "WrapPagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "setRoundRadius", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRoundRadius(float roundRadius) {        mRoundRadius = roundRadius;        mRoundRadiusSet = true;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/WrapPagerIndicator.java", "stars": "1", "class": {"name": "WrapPagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "getStartInterpolator", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Interpolator", "snippet": "    public Interpolator getStartInterpolator() {        return mStartInterpolator;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/WrapPagerIndicator.java", "stars": "1", "class": {"name": "WrapPagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "setStartInterpolator", "params": ["Interpolator"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStartInterpolator(Interpolator startInterpolator) {        mStartInterpolator = startInterpolator;        if (mStartInterpolator == null) {            mStartInterpolator = new LinearInterpolator();        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/WrapPagerIndicator.java", "stars": "1", "class": {"name": "WrapPagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "getEndInterpolator", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Interpolator", "snippet": "    public Interpolator getEndInterpolator() {        return mEndInterpolator;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/WrapPagerIndicator.java", "stars": "1", "class": {"name": "WrapPagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "setEndInterpolator", "params": ["Interpolator"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEndInterpolator(Interpolator endInterpolator) {        mEndInterpolator = endInterpolator;        if (mEndInterpolator == null) {            mEndInterpolator = new LinearInterpolator();        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/commonnavigator/indicators/WrapPagerIndicator.java", "stars": "1", "class": {"name": "WrapPagerIndicator", "extends": "View", "implements": ["IPagerIndicator"], "modifiers": ["public"]}}, {"method_name": "route", "params": ["int", "List<String>"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String route(int jobId, List<String> addressList) {        // cache clear        if (System.currentTimeMillis() > CACHE_VALID_TIME) {            jobLRUMap.clear();            CACHE_VALID_TIME = System.currentTimeMillis() + 1000*60*60*24;        }        // init lru        LinkedHashMap<String, String> lruItem = jobLRUMap.get(jobId);        if (lruItem == null) {            /**             * LinkedHashMap             *      a\u3001accessOrder\uff1atrue=\u8bbf\u95ee\u987a\u5e8f\u6392\u5e8f\uff08get/put\u65f6\u6392\u5e8f\uff09\uff1bfalse=\u63d2\u5165\u987a\u5e8f\u6392\u671f\uff1b             *      b\u3001removeEldestEntry\uff1a\u65b0\u589e\u5143\u7d20\u65f6\u5c06\u4f1a\u8c03\u7528\uff0c\u8fd4\u56detrue\u65f6\u4f1a\u5220\u9664\u6700\u8001\u5143\u7d20\uff1b\u53ef\u5c01\u88c5LinkedHashMap\u5e76\u91cd\u5199\u8be5\u65b9\u6cd5\uff0c\u6bd4\u5982\u5b9a\u4e49\u6700\u5927\u5bb9\u91cf\uff0c\u8d85\u51fa\u662f\u8fd4\u56detrue\u5373\u53ef\u5b9e\u73b0\u56fa\u5b9a\u957f\u5ea6\u7684LRU\u7b97\u6cd5\uff1b             */            lruItem = new LinkedHashMap<String, String>(16, 0.75f, true);            jobLRUMap.putIfAbsent(jobId, lruItem);        }        // put new        for (String address: addressList) {            if (!lruItem.containsKey(address)) {                lruItem.put(address, address);            }        }        // remove old        List<String> delKeys = new ArrayList<>();        for (String existKey: lruItem.keySet()) {            if (!addressList.contains(existKey)) {                delKeys.add(existKey);            }        }        if (delKeys.size() > 0) {            for (String delKey: delKeys) {                lruItem.remove(delKey);            }        }        // load        String eldestKey = lruItem.entrySet().iterator().next().getKey();        String eldestValue = lruItem.get(eldestKey);        return eldestValue;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/route/strategy/ExecutorRouteLRU.java", "stars": "1", "class": {"name": "ExecutorRouteLRU", "extends": "ExecutorRouter", "implements": null, "modifiers": ["public"]}}, {"method_name": "route", "params": ["TriggerParam", "List<String>"], "throws": null, "modifiers": ["public"], "return_type": "ReturnT<String>", "snippet": "    public ReturnT<String> route(TriggerParam triggerParam, List<String> addressList) {        String address = route(triggerParam.getJobId(), addressList);        return new ReturnT<String>(address);    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/route/strategy/ExecutorRouteLRU.java", "stars": "1", "class": {"name": "ExecutorRouteLRU", "extends": "ExecutorRouter", "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldDemonstrateObjectsBeingCollectedAsNeeded", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldDemonstrateObjectsBeingCollectedAsNeeded() {    final int N = 3000000;    WeakCache cache = new WeakCache(new PerpetualCache(\"default\"));    for (int i = 0; i < N; i++) {      cache.putObject(i, i);      if (cache.getSize() < i + 1) {        // System.out.println(\"Cache exceeded with \" + (i + 1) + \" entries.\");        break;      }      if ((i + 1) % 100000 == 0) {        // Try performing GC.        System.gc();      }    }    assertTrue(cache.getSize() < N);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/cache/WeakCacheTest.java", "stars": "15", "class": {"name": "WeakCacheTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldDemonstrateCopiesAreEqual", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldDemonstrateCopiesAreEqual() {    Cache cache = new WeakCache(new PerpetualCache(\"default\"));    cache = new SerializedCache(cache);    for (int i = 0; i < 1000; i++) {      cache.putObject(i, i);      Object value = cache.getObject(i);      assertTrue(value == null || value.equals(i));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/cache/WeakCacheTest.java", "stars": "15", "class": {"name": "WeakCacheTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldRemoveItemOnDemand", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldRemoveItemOnDemand() {    WeakCache cache = new WeakCache(new PerpetualCache(\"default\"));    cache.putObject(0, 0);    assertNotNull(cache.getObject(0));    cache.removeObject(0);    assertNull(cache.getObject(0));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/cache/WeakCacheTest.java", "stars": "15", "class": {"name": "WeakCacheTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldFlushAllItemsOnDemand", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFlushAllItemsOnDemand() {    WeakCache cache = new WeakCache(new PerpetualCache(\"default\"));    for (int i = 0; i < 5; i++) {      cache.putObject(i, i);    }    assertNotNull(cache.getObject(0));    assertNotNull(cache.getObject(4));    cache.clear();    assertNull(cache.getObject(0));    assertNull(cache.getObject(4));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/cache/WeakCacheTest.java", "stars": "15", "class": {"name": "WeakCacheTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "login", "params": ["Student", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "ModelAndView", "snippet": "    public ModelAndView login(Student student, HttpServletRequest request) {        ModelAndView mv = new ModelAndView();        mv.addObject(student);        mv.setViewName(\"redirect:/\");        request.getSession().setAttribute(\"student\", student);        return mv;    }", "url": "https://raw.githubusercontent.com/MichaelDYZ/springboot-thymeleaf/master/springboot-thymeleaf/src/main/java/com/thymeleaf/controller/StudentController.java", "stars": "1", "class": {"name": "StudentController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "login", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ModelAndView", "snippet": "    public ModelAndView login() {        return new ModelAndView(\"page/login\");    }", "url": "https://raw.githubusercontent.com/MichaelDYZ/springboot-thymeleaf/master/springboot-thymeleaf/src/main/java/com/thymeleaf/controller/StudentController.java", "stars": "1", "class": {"name": "StudentController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "interpreter", "params": ["HashMap<String,Integer>"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int interpreter(HashMap<String, Integer> var) {\t\treturn 0;\t}", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/interpreter/SymbolExpression.java", "stars": "2", "class": {"name": "SymbolExpression", "extends": null, "implements": ["Expression"], "modifiers": ["public"]}}, {"method_name": "contextLoads", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void contextLoads() {    }", "url": "https://raw.githubusercontent.com/MichaelDYZ/springboot-thymeleaf/master/springboot-thymeleaf/src/test/java/com/thymeleaf/ThymeleafApplicationTests.java", "stars": "1", "class": {"name": "ThymeleafApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        super.onCreateView(inflater, container, savedInstanceState);        view = inflater.inflate(R.layout.fragment_project_market, null);        findViews();        initLogic();        return view;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/fragment/ProjectsFragment.java", "stars": "4", "class": {"name": "ProjectsFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "findViews", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void findViews () {        recyclerView = view.findViewById(R.id.itemLists);    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/fragment/ProjectsFragment.java", "stars": "4", "class": {"name": "ProjectsFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "initLogic", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initLogic () {        MainActivity.progressBar.setVisibility(View.VISIBLE);        MainActivity.frameLayout.setVisibility(View.GONE);        projectsManager = ProjectsManager.getInstance();        initList();    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/fragment/ProjectsFragment.java", "stars": "4", "class": {"name": "ProjectsFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "initList", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initList() {        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));        projectsManager.getApi()                .getProjects()                .enqueue(new Callback<ArrayList<Projects>>() {                    @Override                    public void onResponse(Call<ArrayList<Projects>> call, Response<ArrayList<Projects>> response) {                        if(response.code() == 200 && response.body() != null) {                            allProjects = response.body();                            setupRecyclerView();                        } else initList();                    }                    @Override                    public void onFailure(Call<ArrayList<Projects>> call, Throwable t) {                        System.out.println(t);                        t.printStackTrace();                    }                });    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/fragment/ProjectsFragment.java", "stars": "4", "class": {"name": "ProjectsFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "setupRecyclerView", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setupRecyclerView () {        new ThreadLoader(() -> {            adapter = new ProjectsListsAdapter(allProjects, getActivity());        }, () -> {            recyclerView.setAdapter(adapter);            MainActivity.progressBar.setVisibility(View.GONE);            MainActivity.frameLayout.setVisibility(View.VISIBLE);        });    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/fragment/ProjectsFragment.java", "stars": "4", "class": {"name": "ProjectsFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "contextLoads", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void contextLoads() {    }", "url": "https://raw.githubusercontent.com/visayang/wechatdev/master/src/test/java/com/chad/wechatdev/WechatdevApplicationTests.java", "stars": "2", "class": {"name": "WechatdevApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void init(){            //TextArea            JTextArea mesg= new JTextArea();            mesg.setText(\"  Congratulations \"+MainWindow.playername+\", \"+\"\\n\"+ \"     You survived \"+(MainWindow.end-MainWindow.start)/1000+\" seconds\");            mesg.setBounds(20,20,420,60);            mesg.setEditable(false);            front.add(mesg);            //Close            JButton close= new JButton();            close.setBounds(165,250,120,100);            close.setText(\"Close!\");            close.addActionListener(new ActionListener() {                @Override                public void actionPerformed(ActionEvent actionEvent) {                    System.exit(0);                }            });            front.add(close);        }", "url": "https://raw.githubusercontent.com/radudioane99/Shape-Storm/master/Final.java", "stars": "2", "class": {"name": "Final", "extends": "JFrame", "implements": null, "modifiers": ["public"]}}, {"method_name": "onInterceptTouchEvent", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onInterceptTouchEvent (android.view.MotionEvent p0)\t{\t\treturn n_onInterceptTouchEvent (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/FormsViewPager.java", "stars": "2", "class": {"name": "FormsViewPager", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onInterceptTouchEvent", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onInterceptTouchEvent (android.view.MotionEvent p0);\tpublic boolean onTouchEvent (android.view.MotionEvent p0)\t{\t\treturn n_onTouchEvent (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/FormsViewPager.java", "stars": "2", "class": {"name": "FormsViewPager", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onTouchEvent", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onTouchEvent (android.view.MotionEvent p0)\t{\t\treturn n_onTouchEvent (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/FormsViewPager.java", "stars": "2", "class": {"name": "FormsViewPager", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onTouchEvent", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onTouchEvent (android.view.MotionEvent p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/FormsViewPager.java", "stars": "2", "class": {"name": "FormsViewPager", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/FormsViewPager.java", "stars": "2", "class": {"name": "FormsViewPager", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/FormsViewPager.java", "stars": "2", "class": {"name": "FormsViewPager", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "contextLoads", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void contextLoads() {    }", "url": "https://raw.githubusercontent.com/lixiangwudi/service/master/src/test/java/com/example/lx/LxApplicationTests.java", "stars": "2", "class": {"name": "LxApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "register", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void register() {        ItemColors items = Minecraft.getMinecraft().getItemColors();        items.registerItemColorHandler((s, t) -> Color.HSBtoRGB(                NBTHelper.getOrDefault(s.getTagCompound(), \"hue\", 0f),                1,                NBTHelper.getOrDefault(s.getTagCompound(), \"brightness\", 0f)),                ItemPrism.itemPrism        );        items.registerItemColorHandler(((stack, tintIndex) -> {            if (tintIndex == 0)                return -1;            IEVEStorageItem eve = stack.getCapability(CapabilityEVE.EVE_ITEM, null);            return eve.getEVE().getColor();        }), ItemBattery.itemInst, ItemBatteryAdvanced.itemInst);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Render/ItemColorManager.java", "stars": "2", "class": {"name": "ItemColorManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        SpringApplication.run(WechatMoocQuestionApplication.class, args);    }", "url": "https://raw.githubusercontent.com/tianhan1998/WechatMoocQuestion/master/src/main/java/cn/th/WechatMoocQuestionApplication.java", "stars": "2", "class": {"name": "WechatMoocQuestionApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOrderByClause", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOrderByClause(String orderByClause) {        this.orderByClause = orderByClause;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "PmsProductAttributeExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOrderByClause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOrderByClause() {        return orderByClause;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "PmsProductAttributeExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDistinct", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDistinct(boolean distinct) {        this.distinct = distinct;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "PmsProductAttributeExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isDistinct", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isDistinct() {        return distinct;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "PmsProductAttributeExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOredCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criteria>", "snippet": "    public List<Criteria> getOredCriteria() {        return oredCriteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "PmsProductAttributeExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "or", "params": ["Criteria"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void or(Criteria criteria) {        oredCriteria.add(criteria);    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "PmsProductAttributeExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "or", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "    public Criteria or() {        Criteria criteria = createCriteriaInternal();        oredCriteria.add(criteria);        return criteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "PmsProductAttributeExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "    public Criteria createCriteria() {        Criteria criteria = createCriteriaInternal();        if (oredCriteria.size() == 0) {            oredCriteria.add(criteria);        }        return criteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "PmsProductAttributeExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCriteriaInternal", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Criteria", "snippet": "    protected Criteria createCriteriaInternal() {        Criteria criteria = new Criteria();        return criteria;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "PmsProductAttributeExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clear() {        oredCriteria.clear();        orderByClause = null;        distinct = false;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "PmsProductAttributeExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isValid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isValid() {            return criteria.size() > 0;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getAllCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criterion>", "snippet": "        public List<Criterion> getAllCriteria() {            return criteria;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criterion>", "snippet": "        public List<Criterion> getCriteria() {            return criteria;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition) {            if (condition == null) {                throw new RuntimeException(\"Value for condition cannot be null\");            }            criteria.add(new Criterion(condition));        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String", "Object", "String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition, Object value, String property) {            if (value == null) {                throw new RuntimeException(\"Value for \" + property + \" cannot be null\");            }            criteria.add(new Criterion(condition, value));        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String", "Object", "Object", "String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition, Object value1, Object value2, String property) {            if (value1 == null || value2 == null) {                throw new RuntimeException(\"Between values for \" + property + \" cannot be null\");            }            criteria.add(new Criterion(condition, value1, value2));        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIsNull() {            addCriterion(\"id is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIsNotNull() {            addCriterion(\"id is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdEqualTo(Long value) {            addCriterion(\"id =\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotEqualTo(Long value) {            addCriterion(\"id <>\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdGreaterThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdGreaterThan(Long value) {            addCriterion(\"id >\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdGreaterThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdGreaterThanOrEqualTo(Long value) {            addCriterion(\"id >=\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdLessThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdLessThan(Long value) {            addCriterion(\"id <\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdLessThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdLessThanOrEqualTo(Long value) {            addCriterion(\"id <=\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIn(List<Long> values) {            addCriterion(\"id in\", values, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotIn(List<Long> values) {            addCriterion(\"id not in\", values, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdBetween(Long value1, Long value2) {            addCriterion(\"id between\", value1, value2, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotBetween(Long value1, Long value2) {            addCriterion(\"id not between\", value1, value2, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductAttributeCategoryIdIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductAttributeCategoryIdIsNull() {            addCriterion(\"product_attribute_category_id is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductAttributeCategoryIdIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductAttributeCategoryIdIsNotNull() {            addCriterion(\"product_attribute_category_id is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductAttributeCategoryIdEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductAttributeCategoryIdEqualTo(Long value) {            addCriterion(\"product_attribute_category_id =\", value, \"productAttributeCategoryId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductAttributeCategoryIdNotEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductAttributeCategoryIdNotEqualTo(Long value) {            addCriterion(\"product_attribute_category_id <>\", value, \"productAttributeCategoryId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductAttributeCategoryIdGreaterThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductAttributeCategoryIdGreaterThan(Long value) {            addCriterion(\"product_attribute_category_id >\", value, \"productAttributeCategoryId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductAttributeCategoryIdGreaterThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductAttributeCategoryIdGreaterThanOrEqualTo(Long value) {            addCriterion(\"product_attribute_category_id >=\", value, \"productAttributeCategoryId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductAttributeCategoryIdLessThan", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductAttributeCategoryIdLessThan(Long value) {            addCriterion(\"product_attribute_category_id <\", value, \"productAttributeCategoryId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductAttributeCategoryIdLessThanOrEqualTo", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductAttributeCategoryIdLessThanOrEqualTo(Long value) {            addCriterion(\"product_attribute_category_id <=\", value, \"productAttributeCategoryId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductAttributeCategoryIdIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductAttributeCategoryIdIn(List<Long> values) {            addCriterion(\"product_attribute_category_id in\", values, \"productAttributeCategoryId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductAttributeCategoryIdNotIn", "params": ["List<Long>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductAttributeCategoryIdNotIn(List<Long> values) {            addCriterion(\"product_attribute_category_id not in\", values, \"productAttributeCategoryId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductAttributeCategoryIdBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductAttributeCategoryIdBetween(Long value1, Long value2) {            addCriterion(\"product_attribute_category_id between\", value1, value2, \"productAttributeCategoryId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andProductAttributeCategoryIdNotBetween", "params": ["Long", "Long"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andProductAttributeCategoryIdNotBetween(Long value1, Long value2) {            addCriterion(\"product_attribute_category_id not between\", value1, value2, \"productAttributeCategoryId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameIsNull() {            addCriterion(\"name is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameIsNotNull() {            addCriterion(\"name is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameEqualTo(String value) {            addCriterion(\"name =\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameNotEqualTo(String value) {            addCriterion(\"name <>\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameGreaterThan(String value) {            addCriterion(\"name >\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameGreaterThanOrEqualTo(String value) {            addCriterion(\"name >=\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameLessThan(String value) {            addCriterion(\"name <\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameLessThanOrEqualTo(String value) {            addCriterion(\"name <=\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameLike(String value) {            addCriterion(\"name like\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameNotLike(String value) {            addCriterion(\"name not like\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameIn(List<String> values) {            addCriterion(\"name in\", values, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameNotIn(List<String> values) {            addCriterion(\"name not in\", values, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameBetween(String value1, String value2) {            addCriterion(\"name between\", value1, value2, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameNotBetween(String value1, String value2) {            addCriterion(\"name not between\", value1, value2, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSelectTypeIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSelectTypeIsNull() {            addCriterion(\"select_type is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSelectTypeIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSelectTypeIsNotNull() {            addCriterion(\"select_type is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSelectTypeEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSelectTypeEqualTo(Integer value) {            addCriterion(\"select_type =\", value, \"selectType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSelectTypeNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSelectTypeNotEqualTo(Integer value) {            addCriterion(\"select_type <>\", value, \"selectType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSelectTypeGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSelectTypeGreaterThan(Integer value) {            addCriterion(\"select_type >\", value, \"selectType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSelectTypeGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSelectTypeGreaterThanOrEqualTo(Integer value) {            addCriterion(\"select_type >=\", value, \"selectType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSelectTypeLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSelectTypeLessThan(Integer value) {            addCriterion(\"select_type <\", value, \"selectType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSelectTypeLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSelectTypeLessThanOrEqualTo(Integer value) {            addCriterion(\"select_type <=\", value, \"selectType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSelectTypeIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSelectTypeIn(List<Integer> values) {            addCriterion(\"select_type in\", values, \"selectType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSelectTypeNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSelectTypeNotIn(List<Integer> values) {            addCriterion(\"select_type not in\", values, \"selectType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSelectTypeBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSelectTypeBetween(Integer value1, Integer value2) {            addCriterion(\"select_type between\", value1, value2, \"selectType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSelectTypeNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSelectTypeNotBetween(Integer value1, Integer value2) {            addCriterion(\"select_type not between\", value1, value2, \"selectType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andInputTypeIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andInputTypeIsNull() {            addCriterion(\"input_type is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andInputTypeIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andInputTypeIsNotNull() {            addCriterion(\"input_type is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andInputTypeEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andInputTypeEqualTo(Integer value) {            addCriterion(\"input_type =\", value, \"inputType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andInputTypeNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andInputTypeNotEqualTo(Integer value) {            addCriterion(\"input_type <>\", value, \"inputType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andInputTypeGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andInputTypeGreaterThan(Integer value) {            addCriterion(\"input_type >\", value, \"inputType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andInputTypeGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andInputTypeGreaterThanOrEqualTo(Integer value) {            addCriterion(\"input_type >=\", value, \"inputType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andInputTypeLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andInputTypeLessThan(Integer value) {            addCriterion(\"input_type <\", value, \"inputType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andInputTypeLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andInputTypeLessThanOrEqualTo(Integer value) {            addCriterion(\"input_type <=\", value, \"inputType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andInputTypeIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andInputTypeIn(List<Integer> values) {            addCriterion(\"input_type in\", values, \"inputType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andInputTypeNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andInputTypeNotIn(List<Integer> values) {            addCriterion(\"input_type not in\", values, \"inputType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andInputTypeBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andInputTypeBetween(Integer value1, Integer value2) {            addCriterion(\"input_type between\", value1, value2, \"inputType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andInputTypeNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andInputTypeNotBetween(Integer value1, Integer value2) {            addCriterion(\"input_type not between\", value1, value2, \"inputType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andInputListIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andInputListIsNull() {            addCriterion(\"input_list is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andInputListIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andInputListIsNotNull() {            addCriterion(\"input_list is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andInputListEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andInputListEqualTo(String value) {            addCriterion(\"input_list =\", value, \"inputList\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andInputListNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andInputListNotEqualTo(String value) {            addCriterion(\"input_list <>\", value, \"inputList\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andInputListGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andInputListGreaterThan(String value) {            addCriterion(\"input_list >\", value, \"inputList\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andInputListGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andInputListGreaterThanOrEqualTo(String value) {            addCriterion(\"input_list >=\", value, \"inputList\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andInputListLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andInputListLessThan(String value) {            addCriterion(\"input_list <\", value, \"inputList\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andInputListLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andInputListLessThanOrEqualTo(String value) {            addCriterion(\"input_list <=\", value, \"inputList\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andInputListLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andInputListLike(String value) {            addCriterion(\"input_list like\", value, \"inputList\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andInputListNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andInputListNotLike(String value) {            addCriterion(\"input_list not like\", value, \"inputList\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andInputListIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andInputListIn(List<String> values) {            addCriterion(\"input_list in\", values, \"inputList\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andInputListNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andInputListNotIn(List<String> values) {            addCriterion(\"input_list not in\", values, \"inputList\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andInputListBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andInputListBetween(String value1, String value2) {            addCriterion(\"input_list between\", value1, value2, \"inputList\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andInputListNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andInputListNotBetween(String value1, String value2) {            addCriterion(\"input_list not between\", value1, value2, \"inputList\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortIsNull() {            addCriterion(\"sort is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortIsNotNull() {            addCriterion(\"sort is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortEqualTo(Integer value) {            addCriterion(\"sort =\", value, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortNotEqualTo(Integer value) {            addCriterion(\"sort <>\", value, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortGreaterThan(Integer value) {            addCriterion(\"sort >\", value, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortGreaterThanOrEqualTo(Integer value) {            addCriterion(\"sort >=\", value, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortLessThan(Integer value) {            addCriterion(\"sort <\", value, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortLessThanOrEqualTo(Integer value) {            addCriterion(\"sort <=\", value, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortIn(List<Integer> values) {            addCriterion(\"sort in\", values, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortNotIn(List<Integer> values) {            addCriterion(\"sort not in\", values, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortBetween(Integer value1, Integer value2) {            addCriterion(\"sort between\", value1, value2, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSortNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSortNotBetween(Integer value1, Integer value2) {            addCriterion(\"sort not between\", value1, value2, \"sort\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFilterTypeIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFilterTypeIsNull() {            addCriterion(\"filter_type is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFilterTypeIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFilterTypeIsNotNull() {            addCriterion(\"filter_type is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFilterTypeEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFilterTypeEqualTo(Integer value) {            addCriterion(\"filter_type =\", value, \"filterType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFilterTypeNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFilterTypeNotEqualTo(Integer value) {            addCriterion(\"filter_type <>\", value, \"filterType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFilterTypeGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFilterTypeGreaterThan(Integer value) {            addCriterion(\"filter_type >\", value, \"filterType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFilterTypeGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFilterTypeGreaterThanOrEqualTo(Integer value) {            addCriterion(\"filter_type >=\", value, \"filterType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFilterTypeLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFilterTypeLessThan(Integer value) {            addCriterion(\"filter_type <\", value, \"filterType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFilterTypeLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFilterTypeLessThanOrEqualTo(Integer value) {            addCriterion(\"filter_type <=\", value, \"filterType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFilterTypeIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFilterTypeIn(List<Integer> values) {            addCriterion(\"filter_type in\", values, \"filterType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFilterTypeNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFilterTypeNotIn(List<Integer> values) {            addCriterion(\"filter_type not in\", values, \"filterType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFilterTypeBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFilterTypeBetween(Integer value1, Integer value2) {            addCriterion(\"filter_type between\", value1, value2, \"filterType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andFilterTypeNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andFilterTypeNotBetween(Integer value1, Integer value2) {            addCriterion(\"filter_type not between\", value1, value2, \"filterType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSearchTypeIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSearchTypeIsNull() {            addCriterion(\"search_type is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSearchTypeIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSearchTypeIsNotNull() {            addCriterion(\"search_type is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSearchTypeEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSearchTypeEqualTo(Integer value) {            addCriterion(\"search_type =\", value, \"searchType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSearchTypeNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSearchTypeNotEqualTo(Integer value) {            addCriterion(\"search_type <>\", value, \"searchType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSearchTypeGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSearchTypeGreaterThan(Integer value) {            addCriterion(\"search_type >\", value, \"searchType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSearchTypeGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSearchTypeGreaterThanOrEqualTo(Integer value) {            addCriterion(\"search_type >=\", value, \"searchType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSearchTypeLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSearchTypeLessThan(Integer value) {            addCriterion(\"search_type <\", value, \"searchType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSearchTypeLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSearchTypeLessThanOrEqualTo(Integer value) {            addCriterion(\"search_type <=\", value, \"searchType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSearchTypeIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSearchTypeIn(List<Integer> values) {            addCriterion(\"search_type in\", values, \"searchType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSearchTypeNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSearchTypeNotIn(List<Integer> values) {            addCriterion(\"search_type not in\", values, \"searchType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSearchTypeBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSearchTypeBetween(Integer value1, Integer value2) {            addCriterion(\"search_type between\", value1, value2, \"searchType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSearchTypeNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSearchTypeNotBetween(Integer value1, Integer value2) {            addCriterion(\"search_type not between\", value1, value2, \"searchType\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRelatedStatusIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRelatedStatusIsNull() {            addCriterion(\"related_status is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRelatedStatusIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRelatedStatusIsNotNull() {            addCriterion(\"related_status is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRelatedStatusEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRelatedStatusEqualTo(Integer value) {            addCriterion(\"related_status =\", value, \"relatedStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRelatedStatusNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRelatedStatusNotEqualTo(Integer value) {            addCriterion(\"related_status <>\", value, \"relatedStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRelatedStatusGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRelatedStatusGreaterThan(Integer value) {            addCriterion(\"related_status >\", value, \"relatedStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRelatedStatusGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRelatedStatusGreaterThanOrEqualTo(Integer value) {            addCriterion(\"related_status >=\", value, \"relatedStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRelatedStatusLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRelatedStatusLessThan(Integer value) {            addCriterion(\"related_status <\", value, \"relatedStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRelatedStatusLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRelatedStatusLessThanOrEqualTo(Integer value) {            addCriterion(\"related_status <=\", value, \"relatedStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRelatedStatusIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRelatedStatusIn(List<Integer> values) {            addCriterion(\"related_status in\", values, \"relatedStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRelatedStatusNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRelatedStatusNotIn(List<Integer> values) {            addCriterion(\"related_status not in\", values, \"relatedStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRelatedStatusBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRelatedStatusBetween(Integer value1, Integer value2) {            addCriterion(\"related_status between\", value1, value2, \"relatedStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRelatedStatusNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRelatedStatusNotBetween(Integer value1, Integer value2) {            addCriterion(\"related_status not between\", value1, value2, \"relatedStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andHandAddStatusIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andHandAddStatusIsNull() {            addCriterion(\"hand_add_status is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andHandAddStatusIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andHandAddStatusIsNotNull() {            addCriterion(\"hand_add_status is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andHandAddStatusEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andHandAddStatusEqualTo(Integer value) {            addCriterion(\"hand_add_status =\", value, \"handAddStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andHandAddStatusNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andHandAddStatusNotEqualTo(Integer value) {            addCriterion(\"hand_add_status <>\", value, \"handAddStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andHandAddStatusGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andHandAddStatusGreaterThan(Integer value) {            addCriterion(\"hand_add_status >\", value, \"handAddStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andHandAddStatusGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andHandAddStatusGreaterThanOrEqualTo(Integer value) {            addCriterion(\"hand_add_status >=\", value, \"handAddStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andHandAddStatusLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andHandAddStatusLessThan(Integer value) {            addCriterion(\"hand_add_status <\", value, \"handAddStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andHandAddStatusLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andHandAddStatusLessThanOrEqualTo(Integer value) {            addCriterion(\"hand_add_status <=\", value, \"handAddStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andHandAddStatusIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andHandAddStatusIn(List<Integer> values) {            addCriterion(\"hand_add_status in\", values, \"handAddStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andHandAddStatusNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andHandAddStatusNotIn(List<Integer> values) {            addCriterion(\"hand_add_status not in\", values, \"handAddStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andHandAddStatusBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andHandAddStatusBetween(Integer value1, Integer value2) {            addCriterion(\"hand_add_status between\", value1, value2, \"handAddStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andHandAddStatusNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andHandAddStatusNotBetween(Integer value1, Integer value2) {            addCriterion(\"hand_add_status not between\", value1, value2, \"handAddStatus\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTypeIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTypeIsNull() {            addCriterion(\"type is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTypeIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTypeIsNotNull() {            addCriterion(\"type is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTypeEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTypeEqualTo(Integer value) {            addCriterion(\"type =\", value, \"type\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTypeNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTypeNotEqualTo(Integer value) {            addCriterion(\"type <>\", value, \"type\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTypeGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTypeGreaterThan(Integer value) {            addCriterion(\"type >\", value, \"type\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTypeGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTypeGreaterThanOrEqualTo(Integer value) {            addCriterion(\"type >=\", value, \"type\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTypeLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTypeLessThan(Integer value) {            addCriterion(\"type <\", value, \"type\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTypeLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTypeLessThanOrEqualTo(Integer value) {            addCriterion(\"type <=\", value, \"type\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTypeIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTypeIn(List<Integer> values) {            addCriterion(\"type in\", values, \"type\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTypeNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTypeNotIn(List<Integer> values) {            addCriterion(\"type not in\", values, \"type\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTypeBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTypeBetween(Integer value1, Integer value2) {            addCriterion(\"type between\", value1, value2, \"type\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTypeNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTypeNotBetween(Integer value1, Integer value2) {            addCriterion(\"type not between\", value1, value2, \"type\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getCondition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getCondition() {            return condition;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getValue() {            return value;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSecondValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getSecondValue() {            return secondValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isNoValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isNoValue() {            return noValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isSingleValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isSingleValue() {            return singleValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isBetweenValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isBetweenValue() {            return betweenValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isListValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isListValue() {            return listValue;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getTypeHandler", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getTypeHandler() {            return typeHandler;        }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/PmsProductAttributeExample.java", "stars": "2", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSQL", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getSQL(int code) {\t\tStringBuffer buff = new StringBuffer();\t\tswitch(code) {\t\tcase SEL_LIST:\t\t\tbuff.append(\"SELECT \"); \t\t\tbuff.append(\"\tgno, gmno, id, gdate, gbody body, savename avatar \"); \t\t\tbuff.append(\"FROM \");\t\t\tbuff.append(\"\tgboard, member m, avatar a \");\t\t\tbuff.append(\"WHERE \");\t\t\tbuff.append(\"\tgmno = mno \"); \t\t\tbuff.append(\"\tAND m.ano = a.ano \");\t\t\tbreak;\t\tcase SEL_ID_CNT:\t\t\tbuff.append(\"SELECT \"); \t\t\tbuff.append(\"\tcount(*) cnt \"); \t\t\tbuff.append(\"FROM \");\t\t\tbuff.append(\"\tgboard \");\t\t\tbuff.append(\"WHERE \");\t\t\tbuff.append(\"\tgmno = \"); \t\t\tbuff.append(\"\t(SELECT mno FROM member WHERE id = ? ) \");\t\t\tbreak;\t\tcase SEL_AVT:\t\t\tbuff.append(\"SELECT \");\t\t\tbuff.append(\"    savename avatar \");\t\t\tbuff.append(\"FROM \");\t\t\tbuff.append(\"    member m, avatar a \");\t\t\tbuff.append(\"WHERE \");\t\t\tbuff.append(\"    m.ano = a.ano \"); \t\t\tbuff.append(\"    AND id = ? \");\t\t\tbreak;\t\tcase ADD_DATA:\t\t\tbuff.append(\"INSERT INTO \");\t\t\tbuff.append(\"    gboard(gno, gmno, gbody) \");\t\t\tbuff.append(\"VALUES( \");\t\t\tbuff.append(\"    (SELECT NVL(MAX(GNO)+1, 1000) FROM gboard), \");\t\t\tbuff.append(\"    (SELECT mno FROM MEMBER WHERE id = ? ), ? \");\t\t\tbuff.append(\")\");\t\t\tbreak;\t\t}\t\t\t\treturn buff.toString();\t}", "url": "https://raw.githubusercontent.com/increpas-cls2/clsProj/branch/clsProj/src/com/increpas/www/sql/GBoardSQL.java", "stars": "2", "class": {"name": "GBoardSQL", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "execute", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void execute() {        employee.action();    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/command/CommandImpl.java", "stars": "2", "class": {"name": "CommandImpl", "extends": null, "implements": ["Command"], "modifiers": ["public"]}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "Date", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNonNullParameter(PreparedStatement ps, int i, Date parameter, JdbcType jdbcType)      throws SQLException {    ps.setDate(i, new java.sql.Date(parameter.getTime()));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/DateOnlyTypeHandler.java", "stars": "15", "class": {"name": "DateOnlyTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Date", "snippet": "  public Date getNullableResult(ResultSet rs, String columnName)      throws SQLException {    java.sql.Date sqlDate = rs.getDate(columnName);    if (sqlDate != null) {      return new Date(sqlDate.getTime());    }    return null;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/DateOnlyTypeHandler.java", "stars": "15", "class": {"name": "DateOnlyTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Date", "snippet": "  public Date getNullableResult(ResultSet rs, int columnIndex)      throws SQLException {    java.sql.Date sqlDate = rs.getDate(columnIndex);    if (sqlDate != null) {      return new Date(sqlDate.getTime());    }    return null;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/DateOnlyTypeHandler.java", "stars": "15", "class": {"name": "DateOnlyTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Date", "snippet": "  public Date getNullableResult(CallableStatement cs, int columnIndex)      throws SQLException {    java.sql.Date sqlDate = cs.getDate(columnIndex);    if (sqlDate != null) {      return new Date(sqlDate.getTime());    }    return null;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/DateOnlyTypeHandler.java", "stars": "15", "class": {"name": "DateOnlyTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);\t\t StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder().detectDiskReads().detectDiskWrites().detectNetwork().penaltyLog().build());        setContentView(R.layout.pull_to_refresh);             // Set a listener to be invoked when the list should be refreshed.        ((PullToRefreshListView) getListView()).setOnRefreshListener(new OnRefreshListener() {            @Override            public void onRefresh() {                // Do work to refresh the list here.                new GetDataTask().execute();            }        });        mListItems = new LinkedList<String>();        mListItems.addAll(Arrays.asList(mStrings));        ArrayAdapter<String> adapter = new ArrayAdapter<String>(this,                android.R.layout.simple_list_item_1, mListItems);        setListAdapter(adapter);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-PullToRefresh-master/pulltorefreshexample/src/com/pulltorefreshdemo/activity/PullToRefreshActivity.java", "stars": "74", "class": {"name": "PullToRefreshActivity", "extends": "ListActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "doInBackground", "params": ["Void"], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "        protected String[] doInBackground(Void... params) {            // Simulates a background job.            try {                Thread.sleep(2000);            } catch (InterruptedException e) {                ;            }            return mStrings;        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-PullToRefresh-master/pulltorefreshexample/src/com/pulltorefreshdemo/activity/PullToRefreshActivity.java", "stars": "74", "class": {"name": "GetDataTask", "extends": "AsyncTask", "implements": null, "modifiers": ["private"]}}, {"method_name": "onPostExecute", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void onPostExecute(String[] result) {            mListItems.addFirst(\"Added Refresh at first\");            mListItems.add(\"added default harshal\");            mListItems.addLast(\"Added Refresh at last\");            // Call onRefreshComplete when the list has been refreshed.            ((PullToRefreshListView) getListView()).onRefreshComplete();            super.onPostExecute(result);        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-PullToRefresh-master/pulltorefreshexample/src/com/pulltorefreshdemo/activity/PullToRefreshActivity.java", "stars": "74", "class": {"name": "GetDataTask", "extends": "AsyncTask", "implements": null, "modifiers": ["private"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClick(View widget) {        for (Intent intent : mIntents) {            try {                Context context = widget.getContext();                context.startActivity(intent);                return;            } catch (ActivityNotFoundException e) {                Log.w(TAG, \"Activity not found\", e);                continue;            }        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/htmlwidget/IntentsSpan.java", "stars": "74", "class": {"name": "IntentsSpan", "extends": "ClickableSpan", "implements": null, "modifiers": []}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //1.\u4f7f\u7528Scanner\u83b7\u53d6\u7528\u6237\u8f93\u5165\u7684\u5b57\u7b26\u4e32        Scanner sc = new Scanner(System.in);        System.out.println(\"\u8bf7\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32:\");        String str = sc.next();        //2.\u521b\u5efaMap\u96c6\u5408,key\u662f\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u7b26,value\u662f\u5b57\u7b26\u7684\u4e2a\u6570        HashMap<Character,Integer> map = new HashMap<>();        //3.\u904d\u5386\u5b57\u7b26\u4e32,\u83b7\u53d6\u6bcf\u4e00\u4e2a\u5b57\u7b26        for(char c :str.toCharArray()){            //4.\u4f7f\u7528\u83b7\u53d6\u5230\u7684\u5b57\u7b26,\u53bbMap\u96c6\u5408\u5224\u65adkey\u662f\u5426\u5b58\u5728            if(map.containsKey(c)){                //key\u5b58\u5728                Integer value = map.get(c);                value++;                map.put(c,value);            }else{                //key\u4e0d\u5b58\u5728                map.put(c,1);            }        }        //5.\u904d\u5386Map\u96c6\u5408,\u8f93\u51fa\u7ed3\u679c        for(Character key :map.keySet()){            Integer value = map.get(key);            System.out.println(key+\"=\"+value);        }    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/15.%E3%80%90Map%E3%80%91-%E7%AC%94%E8%AE%B0/code/04_Map/src/com/itheima/demo03/Map/Demo03MapTest.java", "stars": "2", "class": {"name": "Demo03MapTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOrderByClause", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOrderByClause(String orderByClause) {        this.orderByClause = orderByClause;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "UserDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOrderByClause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOrderByClause() {        return orderByClause;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "UserDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDistinct", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDistinct(boolean distinct) {        this.distinct = distinct;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "UserDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isDistinct", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isDistinct() {        return distinct;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "UserDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOredCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criteria>", "snippet": "    public List<Criteria> getOredCriteria() {        return oredCriteria;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "UserDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "or", "params": ["Criteria"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void or(Criteria criteria) {        oredCriteria.add(criteria);    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "UserDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "or", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "    public Criteria or() {        Criteria criteria = createCriteriaInternal();        oredCriteria.add(criteria);        return criteria;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "UserDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "    public Criteria createCriteria() {        Criteria criteria = createCriteriaInternal();        if (oredCriteria.size() == 0) {            oredCriteria.add(criteria);        }        return criteria;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "UserDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCriteriaInternal", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Criteria", "snippet": "    protected Criteria createCriteriaInternal() {        Criteria criteria = new Criteria();        return criteria;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "UserDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clear() {        oredCriteria.clear();        orderByClause = null;        distinct = false;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "UserDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isValid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isValid() {            return criteria.size() > 0;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getAllCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criterion>", "snippet": "        public List<Criterion> getAllCriteria() {            return criteria;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criterion>", "snippet": "        public List<Criterion> getCriteria() {            return criteria;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition) {            if (condition == null) {                throw new RuntimeException(\"Value for condition cannot be null\");            }            criteria.add(new Criterion(condition));        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String", "Object", "String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition, Object value, String property) {            if (value == null) {                throw new RuntimeException(\"Value for \" + property + \" cannot be null\");            }            criteria.add(new Criterion(condition, value));        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String", "Object", "Object", "String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition, Object value1, Object value2, String property) {            if (value1 == null || value2 == null) {                throw new RuntimeException(\"Between values for \" + property + \" cannot be null\");            }            criteria.add(new Criterion(condition, value1, value2));        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIsNull() {            addCriterion(\"id is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIsNotNull() {            addCriterion(\"id is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdEqualTo(Integer value) {            addCriterion(\"id =\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotEqualTo(Integer value) {            addCriterion(\"id <>\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdGreaterThan(Integer value) {            addCriterion(\"id >\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdGreaterThanOrEqualTo(Integer value) {            addCriterion(\"id >=\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdLessThan(Integer value) {            addCriterion(\"id <\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdLessThanOrEqualTo(Integer value) {            addCriterion(\"id <=\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIn(List<Integer> values) {            addCriterion(\"id in\", values, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotIn(List<Integer> values) {            addCriterion(\"id not in\", values, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdBetween(Integer value1, Integer value2) {            addCriterion(\"id between\", value1, value2, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotBetween(Integer value1, Integer value2) {            addCriterion(\"id not between\", value1, value2, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameIsNull() {            addCriterion(\"name is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameIsNotNull() {            addCriterion(\"name is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameEqualTo(String value) {            addCriterion(\"name =\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameNotEqualTo(String value) {            addCriterion(\"name <>\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameGreaterThan(String value) {            addCriterion(\"name >\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameGreaterThanOrEqualTo(String value) {            addCriterion(\"name >=\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameLessThan(String value) {            addCriterion(\"name <\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameLessThanOrEqualTo(String value) {            addCriterion(\"name <=\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameLike(String value) {            addCriterion(\"name like\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameNotLike(String value) {            addCriterion(\"name not like\", value, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameIn(List<String> values) {            addCriterion(\"name in\", values, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameNotIn(List<String> values) {            addCriterion(\"name not in\", values, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameBetween(String value1, String value2) {            addCriterion(\"name between\", value1, value2, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andNameNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andNameNotBetween(String value1, String value2) {            addCriterion(\"name not between\", value1, value2, \"name\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andGenderIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andGenderIsNull() {            addCriterion(\"gender is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andGenderIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andGenderIsNotNull() {            addCriterion(\"gender is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andGenderEqualTo", "params": ["Byte"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andGenderEqualTo(Byte value) {            addCriterion(\"gender =\", value, \"gender\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andGenderNotEqualTo", "params": ["Byte"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andGenderNotEqualTo(Byte value) {            addCriterion(\"gender <>\", value, \"gender\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andGenderGreaterThan", "params": ["Byte"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andGenderGreaterThan(Byte value) {            addCriterion(\"gender >\", value, \"gender\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andGenderGreaterThanOrEqualTo", "params": ["Byte"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andGenderGreaterThanOrEqualTo(Byte value) {            addCriterion(\"gender >=\", value, \"gender\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andGenderLessThan", "params": ["Byte"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andGenderLessThan(Byte value) {            addCriterion(\"gender <\", value, \"gender\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andGenderLessThanOrEqualTo", "params": ["Byte"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andGenderLessThanOrEqualTo(Byte value) {            addCriterion(\"gender <=\", value, \"gender\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andGenderIn", "params": ["List<Byte>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andGenderIn(List<Byte> values) {            addCriterion(\"gender in\", values, \"gender\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andGenderNotIn", "params": ["List<Byte>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andGenderNotIn(List<Byte> values) {            addCriterion(\"gender not in\", values, \"gender\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andGenderBetween", "params": ["Byte", "Byte"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andGenderBetween(Byte value1, Byte value2) {            addCriterion(\"gender between\", value1, value2, \"gender\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andGenderNotBetween", "params": ["Byte", "Byte"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andGenderNotBetween(Byte value1, Byte value2) {            addCriterion(\"gender not between\", value1, value2, \"gender\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAgeIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAgeIsNull() {            addCriterion(\"age is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAgeIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAgeIsNotNull() {            addCriterion(\"age is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAgeEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAgeEqualTo(Integer value) {            addCriterion(\"age =\", value, \"age\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAgeNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAgeNotEqualTo(Integer value) {            addCriterion(\"age <>\", value, \"age\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAgeGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAgeGreaterThan(Integer value) {            addCriterion(\"age >\", value, \"age\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAgeGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAgeGreaterThanOrEqualTo(Integer value) {            addCriterion(\"age >=\", value, \"age\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAgeLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAgeLessThan(Integer value) {            addCriterion(\"age <\", value, \"age\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAgeLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAgeLessThanOrEqualTo(Integer value) {            addCriterion(\"age <=\", value, \"age\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAgeIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAgeIn(List<Integer> values) {            addCriterion(\"age in\", values, \"age\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAgeNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAgeNotIn(List<Integer> values) {            addCriterion(\"age not in\", values, \"age\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAgeBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAgeBetween(Integer value1, Integer value2) {            addCriterion(\"age between\", value1, value2, \"age\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andAgeNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andAgeNotBetween(Integer value1, Integer value2) {            addCriterion(\"age not between\", value1, value2, \"age\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTelphoneIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTelphoneIsNull() {            addCriterion(\"telphone is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTelphoneIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTelphoneIsNotNull() {            addCriterion(\"telphone is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTelphoneEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTelphoneEqualTo(String value) {            addCriterion(\"telphone =\", value, \"telphone\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTelphoneNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTelphoneNotEqualTo(String value) {            addCriterion(\"telphone <>\", value, \"telphone\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTelphoneGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTelphoneGreaterThan(String value) {            addCriterion(\"telphone >\", value, \"telphone\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTelphoneGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTelphoneGreaterThanOrEqualTo(String value) {            addCriterion(\"telphone >=\", value, \"telphone\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTelphoneLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTelphoneLessThan(String value) {            addCriterion(\"telphone <\", value, \"telphone\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTelphoneLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTelphoneLessThanOrEqualTo(String value) {            addCriterion(\"telphone <=\", value, \"telphone\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTelphoneLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTelphoneLike(String value) {            addCriterion(\"telphone like\", value, \"telphone\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTelphoneNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTelphoneNotLike(String value) {            addCriterion(\"telphone not like\", value, \"telphone\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTelphoneIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTelphoneIn(List<String> values) {            addCriterion(\"telphone in\", values, \"telphone\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTelphoneNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTelphoneNotIn(List<String> values) {            addCriterion(\"telphone not in\", values, \"telphone\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTelphoneBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTelphoneBetween(String value1, String value2) {            addCriterion(\"telphone between\", value1, value2, \"telphone\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTelphoneNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTelphoneNotBetween(String value1, String value2) {            addCriterion(\"telphone not between\", value1, value2, \"telphone\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRegisitModeIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRegisitModeIsNull() {            addCriterion(\"regisit_mode is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRegisitModeIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRegisitModeIsNotNull() {            addCriterion(\"regisit_mode is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRegisitModeEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRegisitModeEqualTo(String value) {            addCriterion(\"regisit_mode =\", value, \"regisitMode\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRegisitModeNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRegisitModeNotEqualTo(String value) {            addCriterion(\"regisit_mode <>\", value, \"regisitMode\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRegisitModeGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRegisitModeGreaterThan(String value) {            addCriterion(\"regisit_mode >\", value, \"regisitMode\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRegisitModeGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRegisitModeGreaterThanOrEqualTo(String value) {            addCriterion(\"regisit_mode >=\", value, \"regisitMode\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRegisitModeLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRegisitModeLessThan(String value) {            addCriterion(\"regisit_mode <\", value, \"regisitMode\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRegisitModeLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRegisitModeLessThanOrEqualTo(String value) {            addCriterion(\"regisit_mode <=\", value, \"regisitMode\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRegisitModeLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRegisitModeLike(String value) {            addCriterion(\"regisit_mode like\", value, \"regisitMode\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRegisitModeNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRegisitModeNotLike(String value) {            addCriterion(\"regisit_mode not like\", value, \"regisitMode\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRegisitModeIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRegisitModeIn(List<String> values) {            addCriterion(\"regisit_mode in\", values, \"regisitMode\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRegisitModeNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRegisitModeNotIn(List<String> values) {            addCriterion(\"regisit_mode not in\", values, \"regisitMode\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRegisitModeBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRegisitModeBetween(String value1, String value2) {            addCriterion(\"regisit_mode between\", value1, value2, \"regisitMode\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andRegisitModeNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andRegisitModeNotBetween(String value1, String value2) {            addCriterion(\"regisit_mode not between\", value1, value2, \"regisitMode\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andThirdPartyIdIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andThirdPartyIdIsNull() {            addCriterion(\"third_party_id is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andThirdPartyIdIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andThirdPartyIdIsNotNull() {            addCriterion(\"third_party_id is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andThirdPartyIdEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andThirdPartyIdEqualTo(Integer value) {            addCriterion(\"third_party_id =\", value, \"thirdPartyId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andThirdPartyIdNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andThirdPartyIdNotEqualTo(Integer value) {            addCriterion(\"third_party_id <>\", value, \"thirdPartyId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andThirdPartyIdGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andThirdPartyIdGreaterThan(Integer value) {            addCriterion(\"third_party_id >\", value, \"thirdPartyId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andThirdPartyIdGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andThirdPartyIdGreaterThanOrEqualTo(Integer value) {            addCriterion(\"third_party_id >=\", value, \"thirdPartyId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andThirdPartyIdLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andThirdPartyIdLessThan(Integer value) {            addCriterion(\"third_party_id <\", value, \"thirdPartyId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andThirdPartyIdLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andThirdPartyIdLessThanOrEqualTo(Integer value) {            addCriterion(\"third_party_id <=\", value, \"thirdPartyId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andThirdPartyIdIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andThirdPartyIdIn(List<Integer> values) {            addCriterion(\"third_party_id in\", values, \"thirdPartyId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andThirdPartyIdNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andThirdPartyIdNotIn(List<Integer> values) {            addCriterion(\"third_party_id not in\", values, \"thirdPartyId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andThirdPartyIdBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andThirdPartyIdBetween(Integer value1, Integer value2) {            addCriterion(\"third_party_id between\", value1, value2, \"thirdPartyId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andThirdPartyIdNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andThirdPartyIdNotBetween(Integer value1, Integer value2) {            addCriterion(\"third_party_id not between\", value1, value2, \"thirdPartyId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getCondition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getCondition() {            return condition;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getValue() {            return value;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSecondValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getSecondValue() {            return secondValue;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isNoValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isNoValue() {            return noValue;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isSingleValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isSingleValue() {            return singleValue;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isBetweenValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isBetweenValue() {            return betweenValue;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isListValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isListValue() {            return listValue;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getTypeHandler", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getTypeHandler() {            return typeHandler;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "registerApp", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void registerApp(String appId) {        if (!registeredApps.contains(appId))            registeredApps.add(appId);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "setServiceDescription", "params": ["ServiceDescription"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setServiceDescription(ServiceDescription serviceDescription) {        super.setServiceDescription(serviceDescription);        if (this.serviceDescription != null)            this.serviceDescription.setPort(8060);        probeForAppSupport();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "discoveryFilter", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "DiscoveryFilter", "snippet": "    public static DiscoveryFilter discoveryFilter() {        return new DiscoveryFilter(ID, \"roku:ecp\");    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "getPriorityLevel", "params": ["Class<CapabilityMethods>"], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getPriorityLevel(Class<? extends CapabilityMethods> clazz) {        if (clazz.equals(MediaPlayer.class)) {            return getMediaPlayerCapabilityLevel();        }        else if (clazz.equals(MediaControl.class)) {            return getMediaControlCapabilityLevel();        }        else if (clazz.equals(Launcher.class)) {            return getLauncherCapabilityLevel();        }        else if (clazz.equals(TextInputControl.class)) {            return getTextInputControlCapabilityLevel();        }        else if (clazz.equals(KeyControl.class)) {            return getKeyControlCapabilityLevel();        }        return CapabilityPriorityLevel.NOT_SUPPORTED;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "getLauncher", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Launcher", "snippet": "    public Launcher getLauncher() {        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "getLauncherCapabilityLevel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getLauncherCapabilityLevel() {        return CapabilityPriorityLevel.HIGH;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "launchApp", "params": ["String", "AppLaunchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void launchApp(String appId, AppLaunchListener listener) {        if (appId == null) {            Util.postError(listener, new ServiceCommandError(0,                    \"Must supply a valid app id\", null));            return;        }        AppInfo appInfo = new AppInfo();        appInfo.setId(appId);        launchAppWithInfo(appInfo, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "launchAppWithInfo", "params": ["AppInfo", "Launcher"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void launchAppWithInfo(AppInfo appInfo,            Launcher.AppLaunchListener listener) {        launchAppWithInfo(appInfo, null, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "launchAppWithInfo", "params": ["AppInfo", "Object", "Launcher"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void launchAppWithInfo(final AppInfo appInfo, Object params,            final Launcher.AppLaunchListener listener) {        if (appInfo == null || appInfo.getId() == null) {            Util.postError(listener, new ServiceCommandError(-1,                    \"Cannot launch app without valid AppInfo object\",                    appInfo));            return;        }        String baseTargetURL = requestURL(\"launch\", appInfo.getId());        StringBuilder queryParams = new StringBuilder();        if (params != null && params instanceof JSONObject) {            JSONObject jsonParams = (JSONObject) params;            int count = 0;            Iterator<?> jsonIterator = jsonParams.keys();            while (jsonIterator.hasNext()) {                String key = (String) jsonIterator.next();                String value = null;                try {                    value = jsonParams.getString(key);                } catch (JSONException ex) {                }                if (value == null)                    continue;                String urlSafeKey = null;                String urlSafeValue = null;                String prefix = (count == 0) ? \"?\" : \"&\";                try {                    urlSafeKey = URLEncoder.encode(key, \"UTF-8\");                    urlSafeValue = URLEncoder.encode(value, \"UTF-8\");                } catch (UnsupportedEncodingException ex) {                }                if (urlSafeKey == null || urlSafeValue == null)                    continue;                String appendString = prefix + urlSafeKey + \"=\" + urlSafeValue;                queryParams.append(appendString);                count++;            }        }        String targetURL = null;        if (queryParams.length() > 0)            targetURL = baseTargetURL + queryParams;        else            targetURL = baseTargetURL;        ResponseListener<Object> responseListener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {                Util.postSuccess(listener, new RokuLaunchSession(                        RokuService.this, appInfo.getId(), appInfo.getName()));            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        };        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(                this, targetURL, null, responseListener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "closeApp", "params": ["LaunchSession", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void closeApp(LaunchSession launchSession,            ResponseListener<Object> listener) {        home(listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "getAppList", "params": ["AppListListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getAppList(final AppListListener listener) {        ResponseListener<Object> responseListener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {                String msg = (String) response;                SAXParserFactory saxParserFactory = SAXParserFactory                        .newInstance();                InputStream stream;                try {                    stream = new ByteArrayInputStream(msg.getBytes(\"UTF-8\"));                    SAXParser saxParser = saxParserFactory.newSAXParser();                    RokuApplicationListParser parser = new RokuApplicationListParser();                    saxParser.parse(stream, parser);                    List<AppInfo> appList = parser.getApplicationList();                    Util.postSuccess(listener, appList);                } catch (UnsupportedEncodingException e) {                    e.printStackTrace();                } catch (ParserConfigurationException e) {                    e.printStackTrace();                } catch (SAXException e) {                    e.printStackTrace();                } catch (IOException e) {                    e.printStackTrace();                }            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        };        String action = \"query\";        String param = \"apps\";        String uri = requestURL(action, param);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(                this, uri, null, responseListener);        request.setHttpMethod(ServiceCommand.TYPE_GET);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "getRunningApp", "params": ["AppInfoListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getRunningApp(AppInfoListener listener) {        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "subscribeRunningApp", "params": ["AppInfoListener"], "throws": null, "modifiers": ["public"], "return_type": "ServiceSubscription<AppInfoListener>", "snippet": "    public ServiceSubscription<AppInfoListener> subscribeRunningApp(            AppInfoListener listener) {        Util.postError(listener, ServiceCommandError.notSupported());        return new NotSupportedServiceSubscription<AppInfoListener>();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "getAppState", "params": ["LaunchSession", "AppStateListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getAppState(LaunchSession launchSession,            AppStateListener listener) {        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "subscribeAppState", "params": ["LaunchSession", "AppStateListener"], "throws": null, "modifiers": ["public"], "return_type": "ServiceSubscription<AppStateListener>", "snippet": "    public ServiceSubscription<AppStateListener> subscribeAppState(            LaunchSession launchSession, AppStateListener listener) {        Util.postError(listener, ServiceCommandError.notSupported());        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "launchBrowser", "params": ["String", "Launcher"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void launchBrowser(String url, Launcher.AppLaunchListener listener) {        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "launchYouTube", "params": ["String", "Launcher"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void launchYouTube(String contentId,            Launcher.AppLaunchListener listener) {        launchYouTube(contentId, (float) 0.0, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "launchYouTube", "params": ["String", "float", "AppLaunchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void launchYouTube(String contentId, float startTime,            AppLaunchListener listener) {        if (getDIALService() != null) {            getDIALService().getLauncher().launchYouTube(contentId, startTime,                    listener);        } else {            Util.postError(listener, new ServiceCommandError(                    0,                    \"Cannot reach DIAL service for launching with provided start time\",                    null));        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "launchNetflix", "params": ["String", "Launcher"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void launchNetflix(final String contentId,            final Launcher.AppLaunchListener listener) {        getAppList(new AppListListener() {            @Override            public void onSuccess(List<AppInfo> appList) {                for (AppInfo appInfo : appList) {                    if (appInfo.getName().equalsIgnoreCase(\"Netflix\")) {                        JSONObject payload = new JSONObject();                        try {                            payload.put(\"mediaType\", \"movie\");                            if (contentId != null && contentId.length() > 0)                                payload.put(\"contentId\", contentId);                        } catch (JSONException e) {                            e.printStackTrace();                        }                        launchAppWithInfo(appInfo, payload, listener);                        break;                    }                }            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "launchHulu", "params": ["String", "Launcher"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void launchHulu(final String contentId,            final Launcher.AppLaunchListener listener) {        getAppList(new AppListListener() {            @Override            public void onSuccess(List<AppInfo> appList) {                for (AppInfo appInfo : appList) {                    if (appInfo.getName().contains(\"Hulu\")) {                        JSONObject payload = new JSONObject();                        try {                            payload.put(\"contentId\", contentId);                        } catch (JSONException e) {                            e.printStackTrace();                        }                        launchAppWithInfo(appInfo, payload, listener);                        break;                    }                }            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "launchAppStore", "params": ["String", "AppLaunchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void launchAppStore(final String appId, AppLaunchListener listener) {        AppInfo appInfo = new AppInfo(\"11\");        appInfo.setName(\"Channel Store\");        JSONObject params = null;        try {            params = new JSONObject() {                {                    put(\"contentId\", appId);                }            };        } catch (JSONException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        launchAppWithInfo(appInfo, params, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "getKeyControl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "KeyControl", "snippet": "    public KeyControl getKeyControl() {        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "getKeyControlCapabilityLevel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getKeyControlCapabilityLevel() {        return CapabilityPriorityLevel.HIGH;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "up", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void up(ResponseListener<Object> listener) {        String action = \"keypress\";        String param = \"Up\";        String uri = requestURL(action, param);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(                this, uri, null, listener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "down", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void down(final ResponseListener<Object> listener) {        String action = \"keypress\";        String param = \"Down\";        String uri = requestURL(action, param);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(                this, uri, null, listener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "left", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void left(ResponseListener<Object> listener) {        String action = \"keypress\";        String param = \"Left\";        String uri = requestURL(action, param);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(                this, uri, null, listener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "right", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void right(ResponseListener<Object> listener) {        String action = \"keypress\";        String param = \"Right\";        String uri = requestURL(action, param);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(                this, uri, null, listener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "ok", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void ok(final ResponseListener<Object> listener) {        String action = \"keypress\";        String param = \"Select\";        String uri = requestURL(action, param);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(                this, uri, null, listener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "back", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void back(ResponseListener<Object> listener) {        String action = \"keypress\";        String param = \"Back\";        String uri = requestURL(action, param);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(                this, uri, null, listener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "home", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void home(ResponseListener<Object> listener) {        String action = \"keypress\";        String param = \"Home\";        String uri = requestURL(action, param);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(                this, uri, null, listener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "getMediaControl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MediaControl", "snippet": "    public MediaControl getMediaControl() {        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "getMediaControlCapabilityLevel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getMediaControlCapabilityLevel() {        return CapabilityPriorityLevel.HIGH;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "play", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void play(ResponseListener<Object> listener) {        String action = \"keypress\";        String param = \"Play\";        String uri = requestURL(action, param);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(                this, uri, null, listener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "pause", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void pause(ResponseListener<Object> listener) {        String action = \"keypress\";        String param = \"Play\";        String uri = requestURL(action, param);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(                this, uri, null, listener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "stop", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void stop(ResponseListener<Object> listener) {        String action = null;        String param = \"input?a=sto\";        String uri = requestURL(action, param);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(                this, uri, null, listener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "rewind", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void rewind(ResponseListener<Object> listener) {        String action = \"keypress\";        String param = \"Rev\";        String uri = requestURL(action, param);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(                this, uri, null, listener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "fastForward", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void fastForward(ResponseListener<Object> listener) {        String action = \"keypress\";        String param = \"Fwd\";        String uri = requestURL(action, param);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(                this, uri, null, listener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "previous", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void previous(ResponseListener<Object> listener) {        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "next", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void next(ResponseListener<Object> listener) {        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "getDuration", "params": ["DurationListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getDuration(DurationListener listener) {        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "getPosition", "params": ["PositionListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getPosition(PositionListener listener) {        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "seek", "params": ["long", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void seek(long position, ResponseListener<Object> listener) {        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "getMediaPlayer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MediaPlayer", "snippet": "    public MediaPlayer getMediaPlayer() {        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "getMediaPlayerCapabilityLevel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getMediaPlayerCapabilityLevel() {        return CapabilityPriorityLevel.HIGH;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "getMediaInfo", "params": ["MediaInfoListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getMediaInfo(MediaInfoListener listener) {        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "subscribeMediaInfo", "params": ["MediaInfoListener"], "throws": null, "modifiers": ["public"], "return_type": "ServiceSubscription<MediaInfoListener>", "snippet": "    public ServiceSubscription<MediaInfoListener> subscribeMediaInfo(            MediaInfoListener listener) {        listener.onError(ServiceCommandError.notSupported());        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "displayMedia", "params": ["String", "String", "String", "String", "String", "MediaPlayer"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void displayMedia(String url, String mimeType, String title,            String description, String iconSrc,            final MediaPlayer.LaunchListener listener) {        ResponseListener<Object> responseListener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {                Util.postSuccess(listener, new MediaLaunchObject(                        new RokuLaunchSession(RokuService.this),                        RokuService.this));            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        };        String host = String.format(\"%s:%s\", serviceDescription.getIpAddress(),                serviceDescription.getPort());        String action = \"input\";        String mediaFormat = mimeType;        if (mimeType.contains(\"/\")) {            int index = mimeType.indexOf(\"/\") + 1;            mediaFormat = mimeType.substring(index);        }        String param;        if (mimeType.contains(\"image\")) {            param = String.format(\"15985?t=p&u=%s&h=%s&tr=crossfade\",                    HttpMessage.encode(url), HttpMessage.encode(host));        } else if (mimeType.contains(\"video\")) {            param = String.format(                    \"15985?t=v&u=%s&k=(null)&h=%s&videoName=%s&videoFormat=%s\",                    HttpMessage.encode(url), HttpMessage.encode(host),                    TextUtils.isEmpty(title) ? \"(null)\" : HttpMessage.encode(title),                             HttpMessage.encode(mediaFormat));        } else { // if (mimeType.contains(\"audio\")) {            param = String                    .format(\"15985?t=a&u=%s&k=(null)&h=%s&songname=%s&artistname=%s&songformat=%s&albumarturl=%s\",                            HttpMessage.encode(url), HttpMessage.encode(host),                            TextUtils.isEmpty(title) ? \"(null)\" : HttpMessage.encode(title),                                    TextUtils.isEmpty(description) ? \"(null)\" : HttpMessage.encode(description),                                            HttpMessage.encode(mediaFormat),                                            TextUtils.isEmpty(iconSrc) ? \"(null)\" : HttpMessage.encode(iconSrc));        }        String uri = requestURL(action, param);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(                this, uri, null, responseListener);        request.send();    }    @Override    public void displayImage(String url, String mimeType, String title,            String description, String iconSrc,            MediaPlayer.LaunchListener listener) {        displayMedia(url, mimeType, title, description, iconSrc, listener);    }    @Override    public void displayImage(MediaInfo mediaInfo,            MediaPlayer.LaunchListener listener) {        String mediaUrl = null;        String mimeType = null;        String title = null;        String desc = null;        String iconSrc = null;        if (mediaInfo != null) {            mediaUrl = mediaInfo.getUrl();            mimeType = mediaInfo.getMimeType();            title = mediaInfo.getTitle();            desc = mediaInfo.getDescription();            if (mediaInfo.getImages() != null && mediaInfo.getImages().size() > 0) {                ImageInfo imageInfo = mediaInfo.getImages().get(0);                iconSrc = imageInfo.getUrl();            }        }        displayImage(mediaUrl, mimeType, title, desc, iconSrc, listener);    }    @Override    public void playMedia(String url, String mimeType, String title,            String description, String iconSrc, boolean shouldLoop,            MediaPlayer.LaunchListener listener) {        displayMedia(url, mimeType, title, description, iconSrc, listener);    }    @Override    public void playMedia(MediaInfo mediaInfo, boolean shouldLoop,            MediaPlayer.LaunchListener listener) {        String mediaUrl = null;        String mimeType = null;        String title = null;        String desc = null;        String iconSrc = null;        if (mediaInfo != null) {            mediaUrl = mediaInfo.getUrl();            mimeType = mediaInfo.getMimeType();            title = mediaInfo.getTitle();            desc = mediaInfo.getDescription();            if (mediaInfo.getImages() != null && mediaInfo.getImages().size() > 0) {                ImageInfo imageInfo = mediaInfo.getImages().get(0);                iconSrc = imageInfo.getUrl();            }        }        playMedia(mediaUrl, mimeType, title, desc, iconSrc, shouldLoop, listener);    }    @Override    public void closeMedia(LaunchSession launchSession,            ResponseListener<Object> listener) {        home(listener);    }    @Override    public TextInputControl getTextInputControl() {        return this;    }    @Override    public CapabilityPriorityLevel getTextInputControlCapabilityLevel() {        return CapabilityPriorityLevel.HIGH;    }    @Override    public ServiceSubscription<TextInputStatusListener> subscribeTextInputStatus(            TextInputStatusListener listener) {        Util.postError(listener, ServiceCommandError.notSupported());        return new NotSupportedServiceSubscription<TextInputStatusListener>();    }    @Override    public void sendText(String input) {        if (input == null || input.length() == 0) {            return;        }        ResponseListener<Object> listener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {                // TODO Auto-generated method stub            }            @Override            public void onError(ServiceCommandError error) {                // TODO Auto-generated method stub            }        };        String action = \"keypress\";        String param = null;        try {            param = \"Lit_\" + URLEncoder.encode(input, \"UTF-8\");        } catch (UnsupportedEncodingException e) {            // This can be safetly ignored since it isn't a dynamic encoding.            e.printStackTrace();        }        String uri = requestURL(action, param);        Log.d(Util.T, \"RokuService::send() | uri = \" + uri);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(                this, uri, null, listener);        request.send();    }    @Override    public void sendKeyCode(KeyCode keyCode, ResponseListener<Object> listener) {        Util.postError(listener, ServiceCommandError.notSupported());    }    @Override    public void sendEnter() {        ResponseListener<Object> listener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {                // TODO Auto-generated method stub            }            @Override            public void onError(ServiceCommandError error) {                // TODO Auto-generated method stub            }        };        String action = \"keypress\";        String param = \"Enter\";        String uri = requestURL(action, param);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(                this, uri, null, listener);        request.send();    }    @Override    public void sendDelete() {        ResponseListener<Object> listener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {                // TODO Auto-generated method stub            }            @Override            public void onError(ServiceCommandError error) {                // TODO Auto-generated method stub            }        };        String action = \"keypress\";        String param = \"Backspace\";        String uri = requestURL(action, param);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(                this, uri, null, listener);        request.send();    }    @Override    public void unsubscribe(URLServiceSubscription<?> subscription) {    }    @Override    public void sendCommand(final ServiceCommand<?> mCommand) {        Util.runInBackground(new Runnable() {            @SuppressWarnings(\"unchecked\")            @Override            public void run() {                ServiceCommand<ResponseListener<Object>> command = (ServiceCommand<ResponseListener<Object>>) mCommand;                Object payload = command.getPayload();                try {                    Log.d(\"\", \"RESP \" + command.getTarget());                    HttpConnection connection = HttpConnection.newInstance(URI.create(command.getTarget()));                    if (command.getHttpMethod().equalsIgnoreCase(ServiceCommand.TYPE_POST)) {                        connection.setMethod(HttpConnection.Method.POST);                        if (payload != null) {                            connection.setPayload(payload.toString());                        }                    }                    connection.execute();                    int code = connection.getResponseCode();                    Log.d(\"\", \"RESP \" + code);                    if (code == 200 || code == 201) {                        Util.postSuccess(command.getResponseListener(), connection.getResponseString());                    } else {                        Util.postError(command.getResponseListener(), ServiceCommandError.getError(code));                    }                } catch (IOException e) {                    e.printStackTrace();                    Util.postError(command.getResponseListener(), new ServiceCommandError(0, e.getMessage(), null));                }            }        });    }    private String requestURL(String action, String parameter) {        StringBuilder sb = new StringBuilder();        sb.append(\"http://\");        sb.append(serviceDescription.getIpAddress()).append(\":\");        sb.append(serviceDescription.getPort()).append(\"/\");        if (action != null)            sb.append(action);        if (parameter != null)            sb.append(\"/\").append(parameter);        return sb.toString();    }    private void probeForAppSupport() {        getAppList(new AppListListener() {            @Override            public void onError(ServiceCommandError error) {            }            @Override            public void onSuccess(List<AppInfo> object) {                List<String> appsToAdd = new ArrayList<String>();                for (String probe : registeredApps) {                    for (AppInfo app : object) {                        if (app.getName().contains(probe)) {                            appsToAdd.add(\"Launcher.\" + probe);                            appsToAdd.add(\"Launcher.\" + probe + \".Params\");                        }                    }                }                addCapabilities(appsToAdd);            }        });    }    @Override    protected void updateCapabilities() {        List<String> capabilities = new ArrayList<String>();        capabilities.add(Up);        capabilities.add(Down);        capabilities.add(Left);        capabilities.add(Right);        capabilities.add(OK);        capabilities.add(Back);        capabilities.add(Home);        capabilities.add(Send_Key);        capabilities.add(Application);        capabilities.add(Application_Params);        capabilities.add(Application_List);        capabilities.add(AppStore);        capabilities.add(AppStore_Params);        capabilities.add(Application_Close);        capabilities.add(Display_Image);        capabilities.add(Play_Video);        capabilities.add(Play_Audio);        capabilities.add(Close);        capabilities.add(MetaData_Title);        capabilities.add(FastForward);        capabilities.add(Rewind);        capabilities.add(Play);        capabilities.add(Pause);        capabilities.add(Send);        capabilities.add(Send_Delete);        capabilities.add(Send_Enter);        setCapabilities(capabilities);    }    @Override    public void getPlayState(PlayStateListener listener) {        Util.postError(listener, ServiceCommandError.notSupported());    }    @Override    public ServiceSubscription<PlayStateListener> subscribePlayState(            PlayStateListener listener) {        Util.postError(listener, ServiceCommandError.notSupported());        return null;    }    @Override    public boolean isConnectable() {        return true;    }    @Override    public boolean isConnected() {        return connected;    }    @Override    public void connect() {        // TODO: Fix this for roku. Right now it is using the InetAddress        // reachable function. Need to use an HTTP Method.        // mServiceReachability =        // DeviceServiceReachability.getReachability(serviceDescription.getIpAddress(),        // this);        // mServiceReachability.start();        connected = true;        reportConnected(true);    }    @Override    public void disconnect() {        connected = false;        if (mServiceReachability != null)            mServiceReachability.stop();        Util.runOnUI(new Runnable() {            @Override            public void run() {                if (listener != null)                    listener.onDisconnect(RokuService.this, null);            }        });    }    @Override    public void onLoseReachability(DeviceServiceReachability reachability) {        if (connected) {            disconnect();        } else {            if (mServiceReachability != null)                mServiceReachability.stop();        }    }    public DIALService getDIALService() {        if (dialService == null) {            DiscoveryManager discoveryManager = DiscoveryManager.getInstance();            ConnectableDevice device = discoveryManager.getAllDevices().get(                    serviceDescription.getIpAddress());            if (device != null) {                DIALService foundService = null;                for (DeviceService service : device.getServices()) {                    if (DIALService.class.isAssignableFrom(service.getClass())) {                        foundService = (DIALService) service;                        break;                    }                }                dialService = foundService;            }        }        return dialService;    }}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "displayImage", "params": ["String", "String", "String", "String", "String", "MediaPlayer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void displayImage(String url, String mimeType, String title,            String description, String iconSrc,            MediaPlayer.LaunchListener listener) {        displayMedia(url, mimeType, title, description, iconSrc, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "displayImage", "params": ["MediaInfo", "MediaPlayer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void displayImage(MediaInfo mediaInfo,            MediaPlayer.LaunchListener listener) {        String mediaUrl = null;        String mimeType = null;        String title = null;        String desc = null;        String iconSrc = null;        if (mediaInfo != null) {            mediaUrl = mediaInfo.getUrl();            mimeType = mediaInfo.getMimeType();            title = mediaInfo.getTitle();            desc = mediaInfo.getDescription();            if (mediaInfo.getImages() != null && mediaInfo.getImages().size() > 0) {                ImageInfo imageInfo = mediaInfo.getImages().get(0);                iconSrc = imageInfo.getUrl();            }        }        displayImage(mediaUrl, mimeType, title, desc, iconSrc, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "playMedia", "params": ["String", "String", "String", "String", "String", "boolean", "MediaPlayer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void playMedia(String url, String mimeType, String title,            String description, String iconSrc, boolean shouldLoop,            MediaPlayer.LaunchListener listener) {        displayMedia(url, mimeType, title, description, iconSrc, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "playMedia", "params": ["MediaInfo", "boolean", "MediaPlayer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void playMedia(MediaInfo mediaInfo, boolean shouldLoop,            MediaPlayer.LaunchListener listener) {        String mediaUrl = null;        String mimeType = null;        String title = null;        String desc = null;        String iconSrc = null;        if (mediaInfo != null) {            mediaUrl = mediaInfo.getUrl();            mimeType = mediaInfo.getMimeType();            title = mediaInfo.getTitle();            desc = mediaInfo.getDescription();            if (mediaInfo.getImages() != null && mediaInfo.getImages().size() > 0) {                ImageInfo imageInfo = mediaInfo.getImages().get(0);                iconSrc = imageInfo.getUrl();            }        }        playMedia(mediaUrl, mimeType, title, desc, iconSrc, shouldLoop, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "closeMedia", "params": ["LaunchSession", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void closeMedia(LaunchSession launchSession,            ResponseListener<Object> listener) {        home(listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "getTextInputControl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TextInputControl", "snippet": "    public TextInputControl getTextInputControl() {        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "getTextInputControlCapabilityLevel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getTextInputControlCapabilityLevel() {        return CapabilityPriorityLevel.HIGH;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "subscribeTextInputStatus", "params": ["TextInputStatusListener"], "throws": null, "modifiers": ["public"], "return_type": "ServiceSubscription<TextInputStatusListener>", "snippet": "    public ServiceSubscription<TextInputStatusListener> subscribeTextInputStatus(            TextInputStatusListener listener) {        Util.postError(listener, ServiceCommandError.notSupported());        return new NotSupportedServiceSubscription<TextInputStatusListener>();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "sendText", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendText(String input) {        if (input == null || input.length() == 0) {            return;        }        ResponseListener<Object> listener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {                // TODO Auto-generated method stub            }            @Override            public void onError(ServiceCommandError error) {                // TODO Auto-generated method stub            }        };        String action = \"keypress\";        String param = null;        try {            param = \"Lit_\" + URLEncoder.encode(input, \"UTF-8\");        } catch (UnsupportedEncodingException e) {            // This can be safetly ignored since it isn't a dynamic encoding.            e.printStackTrace();        }        String uri = requestURL(action, param);        Log.d(Util.T, \"RokuService::send() | uri = \" + uri);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(                this, uri, null, listener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "sendKeyCode", "params": ["KeyCode", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendKeyCode(KeyCode keyCode, ResponseListener<Object> listener) {        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "sendEnter", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendEnter() {        ResponseListener<Object> listener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {                // TODO Auto-generated method stub            }            @Override            public void onError(ServiceCommandError error) {                // TODO Auto-generated method stub            }        };        String action = \"keypress\";        String param = \"Enter\";        String uri = requestURL(action, param);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(                this, uri, null, listener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "sendDelete", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendDelete() {        ResponseListener<Object> listener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {                // TODO Auto-generated method stub            }            @Override            public void onError(ServiceCommandError error) {                // TODO Auto-generated method stub            }        };        String action = \"keypress\";        String param = \"Backspace\";        String uri = requestURL(action, param);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(                this, uri, null, listener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "unsubscribe", "params": ["URLServiceSubscription<?>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void unsubscribe(URLServiceSubscription<?> subscription) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "sendCommand", "params": ["ServiceCommand<?>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendCommand(final ServiceCommand<?> mCommand) {        Util.runInBackground(new Runnable() {            @SuppressWarnings(\"unchecked\")            @Override            public void run() {                ServiceCommand<ResponseListener<Object>> command = (ServiceCommand<ResponseListener<Object>>) mCommand;                Object payload = command.getPayload();                try {                    Log.d(\"\", \"RESP \" + command.getTarget());                    HttpConnection connection = HttpConnection.newInstance(URI.create(command.getTarget()));                    if (command.getHttpMethod().equalsIgnoreCase(ServiceCommand.TYPE_POST)) {                        connection.setMethod(HttpConnection.Method.POST);                        if (payload != null) {                            connection.setPayload(payload.toString());                        }                    }                    connection.execute();                    int code = connection.getResponseCode();                    Log.d(\"\", \"RESP \" + code);                    if (code == 200 || code == 201) {                        Util.postSuccess(command.getResponseListener(), connection.getResponseString());                    } else {                        Util.postError(command.getResponseListener(), ServiceCommandError.getError(code));                    }                } catch (IOException e) {                    e.printStackTrace();                    Util.postError(command.getResponseListener(), new ServiceCommandError(0, e.getMessage(), null));                }            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "requestURL", "params": ["String", "String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String requestURL(String action, String parameter) {        StringBuilder sb = new StringBuilder();        sb.append(\"http://\");        sb.append(serviceDescription.getIpAddress()).append(\":\");        sb.append(serviceDescription.getPort()).append(\"/\");        if (action != null)            sb.append(action);        if (parameter != null)            sb.append(\"/\").append(parameter);        return sb.toString();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "probeForAppSupport", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void probeForAppSupport() {        getAppList(new AppListListener() {            @Override            public void onError(ServiceCommandError error) {            }            @Override            public void onSuccess(List<AppInfo> object) {                List<String> appsToAdd = new ArrayList<String>();                for (String probe : registeredApps) {                    for (AppInfo app : object) {                        if (app.getName().contains(probe)) {                            appsToAdd.add(\"Launcher.\" + probe);                            appsToAdd.add(\"Launcher.\" + probe + \".Params\");                        }                    }                }                addCapabilities(appsToAdd);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "updateCapabilities", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void updateCapabilities() {        List<String> capabilities = new ArrayList<String>();        capabilities.add(Up);        capabilities.add(Down);        capabilities.add(Left);        capabilities.add(Right);        capabilities.add(OK);        capabilities.add(Back);        capabilities.add(Home);        capabilities.add(Send_Key);        capabilities.add(Application);        capabilities.add(Application_Params);        capabilities.add(Application_List);        capabilities.add(AppStore);        capabilities.add(AppStore_Params);        capabilities.add(Application_Close);        capabilities.add(Display_Image);        capabilities.add(Play_Video);        capabilities.add(Play_Audio);        capabilities.add(Close);        capabilities.add(MetaData_Title);        capabilities.add(FastForward);        capabilities.add(Rewind);        capabilities.add(Play);        capabilities.add(Pause);        capabilities.add(Send);        capabilities.add(Send_Delete);        capabilities.add(Send_Enter);        setCapabilities(capabilities);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "getPlayState", "params": ["PlayStateListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getPlayState(PlayStateListener listener) {        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "subscribePlayState", "params": ["PlayStateListener"], "throws": null, "modifiers": ["public"], "return_type": "ServiceSubscription<PlayStateListener>", "snippet": "    public ServiceSubscription<PlayStateListener> subscribePlayState(            PlayStateListener listener) {        Util.postError(listener, ServiceCommandError.notSupported());        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "isConnectable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isConnectable() {        return true;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "isConnected", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isConnected() {        return connected;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "connect", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void connect() {        // TODO: Fix this for roku. Right now it is using the InetAddress        // reachable function. Need to use an HTTP Method.        // mServiceReachability =        // DeviceServiceReachability.getReachability(serviceDescription.getIpAddress(),        // this);        // mServiceReachability.start();        connected = true;        reportConnected(true);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "disconnect", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void disconnect() {        connected = false;        if (mServiceReachability != null)            mServiceReachability.stop();        Util.runOnUI(new Runnable() {            @Override            public void run() {                if (listener != null)                    listener.onDisconnect(RokuService.this, null);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "onLoseReachability", "params": ["DeviceServiceReachability"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onLoseReachability(DeviceServiceReachability reachability) {        if (connected) {            disconnect();        } else {            if (mServiceReachability != null)                mServiceReachability.stop();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "getDIALService", "params": [], "throws": null, "modifiers": ["public"], "return_type": "DIALService", "snippet": "    public DIALService getDIALService() {        if (dialService == null) {            DiscoveryManager discoveryManager = DiscoveryManager.getInstance();            ConnectableDevice device = discoveryManager.getAllDevices().get(                    serviceDescription.getIpAddress());            if (device != null) {                DIALService foundService = null;                for (DeviceService service : device.getServices()) {                    if (DIALService.class.isAssignableFrom(service.getClass())) {                        foundService = (DIALService) service;                        break;                    }                }                dialService = foundService;            }        }        return dialService;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuService", "extends": "DeviceService", "implements": ["Launcher", "MediaPlayer", "MediaControl", "KeyControl", "TextInputControl"], "modifiers": ["public"]}}, {"method_name": "close", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void close(ResponseListener<Object> responseListener) {            home(responseListener);        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuLaunchSession", "extends": "LaunchSession", "implements": null, "modifiers": []}}, {"method_name": "toJSONObject", "params": [], "throws": ["JSONException"], "modifiers": ["public"], "return_type": "JSONObject", "snippet": "        public JSONObject toJSONObject() throws JSONException {            JSONObject obj = super.toJSONObject();            obj.put(\"type\", \"roku\");            obj.put(\"appName\", appName);            return obj;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuLaunchSession", "extends": "LaunchSession", "implements": null, "modifiers": []}}, {"method_name": "fromJSONObject", "params": ["JSONObject"], "throws": ["JSONException"], "modifiers": ["public"], "return_type": "void", "snippet": "        public void fromJSONObject(JSONObject obj) throws JSONException {            super.fromJSONObject(obj);            appName = obj.optString(\"appName\");        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/RokuService.java", "stars": "4", "class": {"name": "RokuLaunchSession", "extends": "LaunchSession", "implements": null, "modifiers": []}}, {"method_name": "attachToRecyclerView", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void attachToRecyclerView (android.support.v7.widget.RecyclerView p0)\t{\t\tn_attachToRecyclerView (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/NongreedySnapHelper.java", "stars": "2", "class": {"name": "NongreedySnapHelper", "extends": "android", "implements": ["mono"], "modifiers": ["public", "abstract"]}}, {"method_name": "n_attachToRecyclerView", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_attachToRecyclerView (android.support.v7.widget.RecyclerView p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/NongreedySnapHelper.java", "stars": "2", "class": {"name": "NongreedySnapHelper", "extends": "android", "implements": ["mono"], "modifiers": ["public", "abstract"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/NongreedySnapHelper.java", "stars": "2", "class": {"name": "NongreedySnapHelper", "extends": "android", "implements": ["mono"], "modifiers": ["public", "abstract"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/NongreedySnapHelper.java", "stars": "2", "class": {"name": "NongreedySnapHelper", "extends": "android", "implements": ["mono"], "modifiers": ["public", "abstract"]}}, {"method_name": "put", "params": ["E"], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void put(E e) throws InterruptedException {    synchronized (this) {      while (count == 10)        this.wait();      data[count++] = e;      this.notify();    }  }", "url": "https://raw.githubusercontent.com/SimonHGR/safari-threads/master/src/main/java/queue/BadQueue.java", "stars": "3", "class": {"name": "BadQueue", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "take", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "E", "snippet": "  public E take() throws InterruptedException {    synchronized (this) {      while (count == 0)        this.wait();      E rv = data[0];      System.arraycopy(data, 1, data, 0, --count);      this.notify();      return rv;    }  }", "url": "https://raw.githubusercontent.com/SimonHGR/safari-threads/master/src/main/java/queue/BadQueue.java", "stars": "3", "class": {"name": "BadQueue", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void main(String[] args) {    BadQueue<int[]> queue = new BadQueue<>();    new Thread(()-> {      System.out.println(\"Producer starting...\");      for (int i = 0; i < 10_000; i++) {        int [] data = {i, 0};        try {          if (i < 100) {            Thread.sleep(1);          }          data[1] = i;          if (i == 5_000) {            data[0] = -99;          }          queue.put(data); data = null; // SIMON SAYS!!!        } catch (InterruptedException e) {          e.printStackTrace();        }      }      System.out.println(\"Producer ending...\");    }).start();    new Thread(()-> {      System.out.println(\"Consumer starting...\");      for (int i = 0; i < 10_000; i++) {        try {          int [] data = queue.take();          if (data[0] != i || data[1] != i) {            System.out.println(\"**** ERROR at index \" + i);          }          if (i > 9_900) {            Thread.sleep(1);          }        } catch (InterruptedException ie) {          ie.printStackTrace();        }      }      System.out.println(\"Consumer ending...\");    }).start();  }", "url": "https://raw.githubusercontent.com/SimonHGR/safari-threads/master/src/main/java/queue/BadQueue.java", "stars": "3", "class": {"name": "BadQueue", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getView", "params": ["int", "View", "ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View getView(int position, View convertView, ViewGroup parent) {        LayoutInflater layoutInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);        View rowView = layoutInflater.inflate(R.layout.account, parent, false);        TextView serviceName = (TextView) rowView.findViewById(R.id.service_name);        TextView username = (TextView) rowView.findViewById(R.id.username_label);        TextView password = (TextView) rowView.findViewById(R.id.password_label);        StringBuilder passwordBuilder = new StringBuilder();        for(int i = 0; i < accounts.get(position).getPassword().length(); i++)            passwordBuilder.append(\"*\");        serviceName.setText(accounts.get(position).getServiceName());        username.setText(accounts.get(position).getUsername());        password.setText(passwordBuilder.toString());        return rowView;    }", "url": "https://raw.githubusercontent.com/carlostojal/KeySafe/master/app/src/main/java/com/fca/keysafe/AccountAdapter.java", "stars": "2", "class": {"name": "AccountAdapter", "extends": "ArrayAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "listar", "params": ["ModelMap"], "throws": null, "modifiers": ["public"], "return_type": "ModelAndView", "snippet": "    public ModelAndView listar(ModelMap model) {        model.addAttribute(\"produtos\", produtoService.recuperar());        return new ModelAndView(\"/produto/list\", model);    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/controller/ProdutoController.java", "stars": "2", "class": {"name": "ProdutoController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "preSalvar", "params": ["Produto"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String preSalvar(@ModelAttribute(\"produto\") Produto produto) {        return \"/produto/add\";    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/controller/ProdutoController.java", "stars": "2", "class": {"name": "ProdutoController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "salvar", "params": ["Produto", "BindingResult", "RedirectAttributes"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String salvar(@Valid @ModelAttribute(\"produto\") Produto produto, BindingResult result, RedirectAttributes attr) {        if (result.hasErrors()) {            return \"/produto/add\";        }        produtoService.salvar(produto);        attr.addFlashAttribute(\"mensagem\", \"Produto salvo com sucesso.\");        return \"redirect:/produtos/listar\";    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/controller/ProdutoController.java", "stars": "2", "class": {"name": "ProdutoController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "preAtualizar", "params": ["Integer", "ModelMap"], "throws": null, "modifiers": ["public"], "return_type": "ModelAndView", "snippet": "    public ModelAndView preAtualizar(@PathVariable(\"id\") Integer id, ModelMap model) {        Produto produto = produtoService.recuperarPorId(id);        model.addAttribute(\"produto\", produto);        return new ModelAndView(\"/produto/add\", model);    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/controller/ProdutoController.java", "stars": "2", "class": {"name": "ProdutoController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "atualizar", "params": ["Produto", "BindingResult", "RedirectAttributes"], "throws": null, "modifiers": ["public"], "return_type": "ModelAndView", "snippet": "    public ModelAndView atualizar(@Valid @ModelAttribute(\"produto\") Produto produto, BindingResult result, RedirectAttributes attr) {        if (result.hasErrors()) {            return new ModelAndView(\"/produto/add\");        }        produtoService.atualizar(produto);        attr.addFlashAttribute(\"mensagem\", \"Produto atualizado com sucesso.\");        return new ModelAndView(\"redirect:/produtos/listar\");    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/controller/ProdutoController.java", "stars": "2", "class": {"name": "ProdutoController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "remover", "params": ["Integer", "RedirectAttributes"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String remover(@PathVariable(\"id\") Integer id, RedirectAttributes attr) {        produtoService.excluir(id);        attr.addFlashAttribute(\"mensagem\", \"Produto exclu\u00eddo com sucesso.\");        return \"redirect:/produtos/listar\";    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/controller/ProdutoController.java", "stars": "2", "class": {"name": "ProdutoController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fill", "params": ["long"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void fill(long pos) throws IOException{        int offset = 0;        if(pos == stPos){            return;        }else{            offset = super.read(buffer);        }        if(offset<=-1) stPos = endPos = -1L;        else{            stPos = pos;            endPos = stPos + offset;        }        super.seek(pos);//return the position    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/checkpoint/storage/BufferedRandomAccessFile.java", "stars": "23", "class": {"name": "BufferedRandomAccessFile", "extends": "RandomAccessFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "seek", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void seek(long pos){        try {            currentPos = pos;            flush();//flush            if(pos>-1) super.seek(pos);            fill(pos);        } catch (IOException e) {            throw new RuntimeException(\"there is a wrong in seeking file!\");        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/checkpoint/storage/BufferedRandomAccessFile.java", "stars": "23", "class": {"name": "BufferedRandomAccessFile", "extends": "RandomAccessFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "flush", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void flush()throws IOException{        //If the buffer is written,write the buff to the file        if(isWrite & (stPos|endPos) >= 0){            super.write(buffer, 0,(int)(endPos-stPos));            isWrite = false;        }        stPos = endPos = -1L;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/checkpoint/storage/BufferedRandomAccessFile.java", "stars": "23", "class": {"name": "BufferedRandomAccessFile", "extends": "RandomAccessFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "readBuffer", "params": [], "throws": ["IOException"], "modifiers": ["synchronized", "public"], "return_type": "int", "snippet": "    public synchronized int readBuffer() throws IOException{        long pos = currentPos;        //In the buffer        if(pos >= stPos && pos < endPos){            currentPos++;            return buffer[(int)(pos-stPos)]&0xff;        }else{            seek(endPos);            if((stPos|endPos) == -1L){                return -1;            }            currentPos ++;            return buffer[0]&0xff;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/checkpoint/storage/BufferedRandomAccessFile.java", "stars": "23", "class": {"name": "BufferedRandomAccessFile", "extends": "RandomAccessFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "readBuffer", "params": ["byte"], "throws": ["IOException"], "modifiers": ["synchronized", "public"], "return_type": "int", "snippet": "    public synchronized int readBuffer(byte[] b) throws IOException{        return readBuffer(b,0,b.length);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/checkpoint/storage/BufferedRandomAccessFile.java", "stars": "23", "class": {"name": "BufferedRandomAccessFile", "extends": "RandomAccessFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "readBuffer", "params": ["byte", "int", "int"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "int", "snippet": "    public synchronized int readBuffer(byte[] b,int off,int len) {        long pos = currentPos;        int avail = (int)(endPos - pos);        if(avail <= 0){            //No rest size in buffer            seek(pos);            if((stPos|endPos) == -1L) return -1;            avail = (int)(endPos - pos);        }        int cut = Math.min(avail, len);        System.arraycopy(buffer, (int) (pos - stPos), b, off, cut);        currentPos+=cut;        while(cut < len){            seek(endPos);            if((stPos|endPos) != -1L){                avail = (int)(endPos - stPos);                int extra = Math.min(avail, len - cut);                System.arraycopy(buffer,0, b, off+cut,extra);                cut+=extra;                currentPos+=extra;            }else{                break;            }        }        return cut;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/checkpoint/storage/BufferedRandomAccessFile.java", "stars": "23", "class": {"name": "BufferedRandomAccessFile", "extends": "RandomAccessFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "writeBuffer", "params": ["int"], "throws": ["IOException"], "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void writeBuffer(int b) throws IOException{        long pos = currentPos;        if(pos >= stPos && pos < stPos + buffer.length){            //If in the buffer size            currentPos ++;            //Overlap the buffer            buffer[(int)(pos-stPos)] = (byte)b;            //Enlarge the end position            if(pos == endPos)                endPos++;        }else{//\t\t\tflush();            seek(pos);            if((stPos|endPos) == -1L){                stPos = pos;                endPos = stPos+1;            }            currentPos++;            buffer[0] = (byte)b;        }        //Buffer is changed        isWrite = true;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/checkpoint/storage/BufferedRandomAccessFile.java", "stars": "23", "class": {"name": "BufferedRandomAccessFile", "extends": "RandomAccessFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "writeBuffer", "params": ["byte"], "throws": ["IOException"], "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void writeBuffer(byte[] b) throws IOException{        writeBuffer(b,0,b.length);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/checkpoint/storage/BufferedRandomAccessFile.java", "stars": "23", "class": {"name": "BufferedRandomAccessFile", "extends": "RandomAccessFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "writeBuffer", "params": ["byte", "int", "int"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void writeBuffer(byte[] b,int off,int len) {        long pos = currentPos;        int avail = (stPos|endPos) == -1L? -1 : (int)(buffer.length - pos+stPos);        if(avail <= 0){            seek(pos);            if((stPos|endPos) == -1L){                stPos = pos;                endPos = stPos+1;            }            avail = buffer.length;        }        int write = Math.min(len, avail);        System.arraycopy(b, off, buffer, (int) (pos - stPos), write);        if(pos + write >= endPos) endPos = pos+write;        //Buffer is changed        isWrite = true;        currentPos += write;        while(write < len){            long nPos = stPos+buffer.length;            seek(nPos);            int extra = Math.min(buffer.length, len - write);            System.arraycopy(b,off + write, buffer, 0,extra);            if((stPos|endPos) == -1L){                stPos = nPos;                endPos = stPos+extra;            }            //Buffer is changed            isWrite = true;            write+=extra;            currentPos+=extra;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/checkpoint/storage/BufferedRandomAccessFile.java", "stars": "23", "class": {"name": "BufferedRandomAccessFile", "extends": "RandomAccessFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "readBufferLine", "params": [], "throws": ["IOException"], "modifiers": ["synchronized", "public"], "return_type": "String", "snippet": "    public synchronized String readBufferLine() throws IOException{        if(charBuffer == null){            charBuffer = CharBuffer.allocate(DEFAULT_CHAR_BUFFER_SIZE);            //Set limit to 0            charBuffer.limit(0);        }        StringBuilder input = new StringBuilder();        int lef = 0;        boolean eol = false;        while(!eol){            if(!charBuffer.hasRemaining()){                lef = implyRead(charBuffer);                if(lef<0){                    eol = true;                }            }            while(charBuffer.hasRemaining()&&!eol){                char c = charBuffer.get();                switch(c){                    case '\\n':                        eol = true;                        break;                    case '\\r':                        continue;                    default:                        input.append(c);                        break;                }            }        }        if(input.length() == 0&&(lef == -1)){            return null;        }        return input.toString();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/checkpoint/storage/BufferedRandomAccessFile.java", "stars": "23", "class": {"name": "BufferedRandomAccessFile", "extends": "RandomAccessFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "implyRead", "params": ["CharBuffer"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int implyRead(CharBuffer buf) {        if((stPos|endPos) == -1L){            return -1;        }        //Set position to 0, and start to read data written        buf.rewind();        //Set limit to max value to try the best to receive the data decoded        buf.limit(DEFAULT_CHAR_BUFFER_SIZE);        int st =(int)(currentPos-stPos);        int end = (int)(endPos-currentPos);        ByteBuffer in = ByteBuffer.wrap(buffer,st,end);        CharsetDecoder decoder =                Charset.forName(DEFAULT_CHARSET).newDecoder();        boolean endOfInput = false;        CoderResult result = decoder.decode(in, buf, endOfInput);        currentPos +=(in.position() - st);        if(result.isUnderflow()){            if(currentPos >= endPos){                seek(currentPos);            }else if(buf.position()<=0){                //Because the endOfInput == 0                if(in.hasRemaining()){                    seek(currentPos);                }            }        }else if(result.isError()||result.isMalformed()){            return -1;        }        int len = buf.position();        //Set the limit to the length of data        buf.limit(len);        //Set the position to 0        buf.rewind();        return len;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/checkpoint/storage/BufferedRandomAccessFile.java", "stars": "23", "class": {"name": "BufferedRandomAccessFile", "extends": "RandomAccessFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "close", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void close() throws IOException {        if(null != charBuffer){            charBuffer.clear();        }        super.close();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/core/transport/checkpoint/storage/BufferedRandomAccessFile.java", "stars": "23", "class": {"name": "BufferedRandomAccessFile", "extends": "RandomAccessFile", "implements": null, "modifiers": ["public"]}}, {"method_name": "discoveryFilter", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "DiscoveryFilter", "snippet": "    public static DiscoveryFilter discoveryFilter() {        return new DiscoveryFilter(ID, \"urn:schemas-upnp-org:device:MediaRenderer:1\");    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getPriorityLevel", "params": ["Class<CapabilityMethods>"], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getPriorityLevel(Class<? extends CapabilityMethods> clazz) {        if (clazz.equals(MediaPlayer.class)) {            return getMediaPlayerCapabilityLevel();        }        else if (clazz.equals(MediaControl.class)) {            return getMediaControlCapabilityLevel();        }        else if (clazz.equals(Launcher.class)) {            return getLauncherCapabilityLevel();        }        else if (clazz.equals(TVControl.class)) {            return getTVControlCapabilityLevel();        }        else if (clazz.equals(VolumeControl.class)) {            return getVolumeControlCapabilityLevel();        }        else if (clazz.equals(ExternalInputControl.class)) {            return getExternalInputControlPriorityLevel();        }        else if (clazz.equals(MouseControl.class)) {            return getMouseControlCapabilityLevel();        }        else if (clazz.equals(TextInputControl.class)) {            return getTextInputControlCapabilityLevel();        }        else if (clazz.equals(PowerControl.class)) {            return getPowerControlCapabilityLevel();        }        else if (clazz.equals(KeyControl.class)) {            return getKeyControlCapabilityLevel();        }        return CapabilityPriorityLevel.NOT_SUPPORTED;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "setServiceDescription", "params": ["ServiceDescription"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setServiceDescription(ServiceDescription serviceDescription) {        super.setServiceDescription(serviceDescription);        if (serviceDescription.getPort() != 8080)            serviceDescription.setPort(8080);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "connect", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void connect() {        if (state != State.INITIAL) {            Log.w(Util.T, \"already connecting; not trying to connect again: \" + state);            return; // don't try to connect again while connected        }        if (!(serviceConfig instanceof NetcastTVServiceConfig)) {            ServiceConfig.ServiceConfigListener serviceConfigListener = serviceConfig.getListener();            serviceConfig = new NetcastTVServiceConfig(serviceConfig.getServiceUUID());            serviceConfig.setListener(serviceConfigListener);        }        if (DiscoveryManager.getInstance().getPairingLevel() == PairingLevel.ON) {            if (((NetcastTVServiceConfig) serviceConfig).getPairingKey() != null                     && ((NetcastTVServiceConfig)serviceConfig).getPairingKey().length() != 0) {                sendPairingKey(((NetcastTVServiceConfig) serviceConfig).getPairingKey());            }            else {                showPairingKeyOnTV();            }            Util.runInBackground(new Runnable() {                @Override                public void run() {                    httpServer = new NetcastHttpServer(NetcastTVService.this, getServiceDescription().getPort(), mTextChangedListener);                    httpServer.setSubscriptions(subscriptions);                    httpServer.start();                }            });        } else {            hConnectSuccess();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "disconnect", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void disconnect() {        endPairing(null);        connected = false;        if (mServiceReachability != null)            mServiceReachability.stop();        Util.runOnUI(new Runnable() {            @Override            public void run() {                if (listener != null)                    listener.onDisconnect(NetcastTVService.this, null);            }        });        if (httpServer != null) {            httpServer.stop();            httpServer = null;        }        state = State.INITIAL;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "isConnectable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isConnectable() {        return true;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "isConnected", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isConnected() {        return connected;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "hConnectSuccess", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void hConnectSuccess() {        //  TODO:  Fix this for Netcast.  Right now it is using the InetAddress reachable function.  Need to use an HTTP Method.//        mServiceReachability = DeviceServiceReachability.getReachability(serviceDescription.getIpAddress(), this);//        mServiceReachability.start();        connected = true;        // Pairing was successful, so report connected and ready        reportConnected(true);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "onLoseReachability", "params": ["DeviceServiceReachability"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onLoseReachability(DeviceServiceReachability reachability) {        if (connected) {            disconnect();        } else {            if (mServiceReachability != null)                mServiceReachability.stop();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "hostByeBye", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void hostByeBye () {        disconnect();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "showPairingKeyOnTV", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void showPairingKeyOnTV() {        state = State.CONNECTING;        ResponseListener<Object> responseListener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {                if (listener != null)                    listener.onPairingRequired(NetcastTVService.this, pairingType, null);            }            @Override            public void onError(ServiceCommandError error) {                state = State.INITIAL;                if (listener != null)                    listener.onConnectionFailure(NetcastTVService.this, error);            }        };        String requestURL = getUDAPRequestURL(UDAP_PATH_PAIRING);        Map <String,String> params = new HashMap<String,String>();        params.put(\"name\", \"showKey\");        String httpMessage = getUDAPMessageBody(UDAP_API_PAIRING, params);        ServiceCommand<ResponseListener<Object>> command = new ServiceCommand<ResponseListener<Object>>(this, requestURL, httpMessage, responseListener);        command.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "cancelPairing", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void cancelPairing() {        removePairingKeyOnTV();        state = State.INITIAL;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "removePairingKeyOnTV", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removePairingKeyOnTV() {        ResponseListener<Object> responseListener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {            }            @Override            public void onError(ServiceCommandError error) {            }        };        String requestURL = getUDAPRequestURL(UDAP_PATH_PAIRING);        Map <String,String> params = new HashMap<String,String>();        params.put(\"name\", \"CancelAuthKeyReq\");        String httpMessage = getUDAPMessageBody(UDAP_API_PAIRING, params);        ServiceCommand<ResponseListener<Object>> command = new ServiceCommand<ResponseListener<Object>>(this, requestURL, httpMessage, responseListener);        command.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "sendPairingKey", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendPairingKey(final String pairingKey) {        state = State.PAIRING;        if (!(serviceConfig instanceof NetcastTVServiceConfig)) {            serviceConfig = new NetcastTVServiceConfig(serviceConfig.getServiceUUID());        }        ResponseListener<Object> responseListener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {                state = State.PAIRED;                ((NetcastTVServiceConfig)serviceConfig).setPairingKey(pairingKey);                hConnectSuccess();            }            @Override            public void onError(ServiceCommandError error) {                state = State.INITIAL;                if (listener != null)                    listener.onConnectionFailure(NetcastTVService.this, error);            }        };        String requestURL = getUDAPRequestURL(UDAP_PATH_PAIRING);        Map <String,String> params = new HashMap<String,String>();        params.put(\"name\", \"hello\");        params.put(\"value\", pairingKey);        params.put(\"port\", String.valueOf(serviceDescription.getPort()));        String httpMessage = getUDAPMessageBody(UDAP_API_PAIRING, params);        ServiceCommand<ResponseListener<Object>> command = new ServiceCommand<ResponseListener<Object>>(this, requestURL, httpMessage, responseListener);        command.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "endPairing", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void endPairing(ResponseListener<Object> listener) {        String requestURL = getUDAPRequestURL(UDAP_PATH_PAIRING);        Map <String,String> params = new HashMap<String,String>();        params.put(\"name\", \"byebye\");        params.put(\"port\", String.valueOf(serviceDescription.getPort()));        String httpMessage = getUDAPMessageBody(UDAP_API_PAIRING, params);        ServiceCommand<ResponseListener<Object>> command = new ServiceCommand<ResponseListener<Object>>(this, requestURL, httpMessage, listener);        command.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getLauncher", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Launcher", "snippet": "    public Launcher getLauncher() {        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getLauncherCapabilityLevel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getLauncherCapabilityLevel() {        return CapabilityPriorityLevel.HIGH;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getApplication", "params": ["String", "AppInfoListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getApplication(final String appName, final AppInfoListener listener) {        ResponseListener<Object> responseListener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {                final String strObj = (String) response;                AppInfo appId = new AppInfo() {{                    setId(decToHex(strObj));                }};                Util.postSuccess(listener, appId);            }            @Override            public void onError(ServiceCommandError error) {                if (listener != null)                     Util.postError(listener, error);            }        };        String uri = UDAP_PATH_APPTOAPP_DATA + appName;        String requestURL = getUDAPRequestURL(uri);        ServiceCommand<ResponseListener<Object>> command = new ServiceCommand<ResponseListener<Object>>(this, requestURL, null, responseListener);        command.setHttpMethod(ServiceCommand.TYPE_GET);        command.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "launchApp", "params": ["String", "AppLaunchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void launchApp(final String appId, final AppLaunchListener listener) {        getAppInfoForId(appId, new AppInfoListener() {            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }            @Override            public void onSuccess(AppInfo appInfo) {                launchAppWithInfo(appInfo, listener);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getAppInfoForId", "params": ["String", "AppInfoListener"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void getAppInfoForId(final String appId, final AppInfoListener listener) {        getAppList(new AppListListener() {            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }            @Override            public void onSuccess(List<AppInfo> object) {                for (AppInfo info : object) {                    if (info.getName().equalsIgnoreCase(appId)) {                        Util.postSuccess(listener, info);                        return;                    }                }                Util.postError(listener, new ServiceCommandError(0, \"Unable to find the App with id\", null));            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "launchApplication", "params": ["String", "String", "String", "Launcher"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void launchApplication(final String appName, final String auid, final String contentId, final Launcher.AppLaunchListener listener) {        JSONObject jsonObj = new JSONObject();        try {            jsonObj.put(\"id\", auid);            jsonObj.put(\"title\", appName);        } catch (JSONException e) {            e.printStackTrace();        }        ResponseListener<Object> responseListener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {                LaunchSession launchSession = LaunchSession.launchSessionForAppId(auid);                launchSession.setAppName(appName);                launchSession.setService(NetcastTVService.this);                launchSession.setSessionType(LaunchSessionType.App);                Util.postSuccess(listener, launchSession);            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        };        String requestURL = getUDAPRequestURL(UDAP_PATH_APPTOAPP_COMMAND);        Map <String,String> params = new HashMap<String,String>();        params.put(\"name\", \"AppExecute\");        params.put(\"auid\", auid);        if (appName != null) {            params.put(\"appname\", appName);        }        if (contentId != null) {            params.put(\"contentid\", contentId);        }        String httpMessage = getUDAPMessageBody(UDAP_API_COMMAND, params);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(this, requestURL, httpMessage, responseListener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "launchAppWithInfo", "params": ["AppInfo", "Launcher"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void launchAppWithInfo(AppInfo appInfo, Launcher.AppLaunchListener listener) {        launchAppWithInfo(appInfo, null, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "launchAppWithInfo", "params": ["AppInfo", "Object", "Launcher"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void launchAppWithInfo(AppInfo appInfo, Object params, Launcher.AppLaunchListener listener) {        String appName = HttpMessage.encode(appInfo.getName());        String appId = appInfo.getId();        String contentId = null;        JSONObject mParams = null;        if (params instanceof JSONObject)            mParams = (JSONObject) params;        if (mParams != null) {            try {                contentId = (String) mParams.get(\"contentId\");            } catch (JSONException e) {                e.printStackTrace();            }        }        launchApplication(appName, appId, contentId, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "launchBrowser", "params": ["String", "Launcher"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void launchBrowser(String url, final Launcher.AppLaunchListener listener) {        if (!(url == null || url.length() == 0))             Log.w(Util.T, \"Netcast TV does not support deeplink for Browser\");        final String appName = \"Internet\";        getApplication(appName, new AppInfoListener() {            @Override            public void onSuccess(AppInfo appInfo) {                String contentId = null;                launchApplication(appName, appInfo.getId(), contentId, listener);            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "launchYouTube", "params": ["String", "Launcher"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void launchYouTube(String contentId, Launcher.AppLaunchListener listener) {        launchYouTube(contentId, (float)0.0, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "launchYouTube", "params": ["String", "float", "AppLaunchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void launchYouTube(final String contentId, float startTime, final AppLaunchListener listener) {        if (getDIALService() != null) {            getDIALService().getLauncher().launchYouTube(contentId, startTime, listener);            return;        }        if (startTime <= 0.0) {            getApplication(\"YouTube\", new AppInfoListener() {                @Override                public void onSuccess(AppInfo appInfo) {                    launchApplication(appInfo.getName(), appInfo.getId(), contentId, listener);                }                @Override                public void onError(ServiceCommandError error) {                    Util.postError(listener, error);                }            });        }        else {            Util.postError(listener, new ServiceCommandError(0, \"Cannot reach DIAL service for launching with provided start time\", null));        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "launchHulu", "params": ["String", "Launcher"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void launchHulu(final String contentId, final Launcher.AppLaunchListener listener) {        final String appName = \"Hulu\";        getApplication(appName, new AppInfoListener() {            @Override            public void onSuccess(AppInfo appInfo) {                launchApplication(appName, appInfo.getId(), contentId, listener);            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "launchNetflix", "params": ["String", "Launcher"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void launchNetflix(final String contentId, final Launcher.AppLaunchListener listener) {        if (!serviceDescription.getModelNumber().equals(\"4.0\")) {            launchApp(\"Netflix\", listener);            return;        }        final String appName = \"Netflix\";        getApplication(appName, new AppInfoListener() {            @Override            public void onSuccess(final AppInfo appInfo) {                JSONObject jsonObj = new JSONObject();                try {                    jsonObj.put(\"id\", appInfo.getId());                    jsonObj.put(\"name\", appName);                } catch (JSONException e) {                    e.printStackTrace();                }                ResponseListener<Object> responseListener = new ResponseListener<Object>() {                    @Override                    public void onSuccess(Object response) {                        LaunchSession launchSession = LaunchSession.launchSessionForAppId(appInfo.getId());                        launchSession.setAppName(appName);                        launchSession.setService(NetcastTVService.this);                        launchSession.setSessionType(LaunchSessionType.App);                        Util.postSuccess(listener, launchSession);                    }                    @Override                    public void onError(ServiceCommandError error) {                        Util.postError(listener, error);                    }                };                String requestURL = getUDAPRequestURL(UDAP_PATH_APPTOAPP_COMMAND);                Map <String,String> params = new HashMap<String,String>();                params.put(\"name\", \"SearchCMDPlaySDPContent\");                params.put(\"content_type\", \"1\");                params.put(\"conts_exec_type\", \"20\");                params.put(\"conts_plex_type_flag\", \"N\");                params.put(\"conts_search_id\", \"2023237\");                params.put(\"conts_age\", \"18\");                params.put(\"exec_id\", \"netflix\");                params.put(\"item_id\", \"-Q m=http%3A%2F%2Fapi.netflix.com%2Fcatalog%2Ftitles%2Fmovies%2F\" + contentId + \"&amp;source_type=4&amp;trackId=6054700&amp;trackUrl=https%3A%2F%2Fapi.netflix.com%2FAPI_APP_ID_6261%3F%23Search%3F\");                params.put(\"app_type\", \"\");                String httpMessage = getUDAPMessageBody(UDAP_API_COMMAND, params);                ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(NetcastTVService.this, requestURL, httpMessage, responseListener);                request.send();            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "launchAppStore", "params": ["String", "AppLaunchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void launchAppStore(final String appId, final AppLaunchListener listener) {        if (!serviceDescription.getModelNumber().equals(\"4.0\")) {            launchApp(\"LG Smart World\", listener);  // TODO: this will not work in Korea, use Korean name instead            return;        }        String targetPath = getUDAPRequestURL(ROAP_PATH_APP_STORE);        Map<String, String> params = new HashMap<String, String>();        params.put(\"name\", \"SearchCMDPlaySDPContent\");        params.put(\"content_type\", \"4\");        params.put(\"conts_exec_type\", \"\");        params.put(\"conts_plex_type_flag\", \"\");        params.put(\"conts_search_id\", \"\");        params.put(\"conts_age\", \"12\");        params.put(\"exec_id\", \"\");        params.put(\"item_id\", HttpMessage.encode(appId));        params.put(\"app_type\", \"S\");        String httpMessage = getUDAPMessageBody(UDAP_API_COMMAND, params);        ResponseListener<Object> responseListener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {                LaunchSession launchSession = LaunchSession.launchSessionForAppId(appId);                launchSession.setAppName(\"LG Smart World\"); // TODO: this will not work in Korea, use Korean name instead                launchSession.setService(NetcastTVService.this);                launchSession.setSessionType(LaunchSessionType.App);                Util.postSuccess(listener, launchSession);            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        };        ServiceCommand<ResponseListener<Object>> command = new ServiceCommand<ResponseListener<Object>>(this, targetPath, httpMessage, responseListener);        command.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "closeApp", "params": ["LaunchSession", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void closeApp(LaunchSession launchSession, ResponseListener<Object> listener) {        String requestURL = getUDAPRequestURL(UDAP_PATH_APPTOAPP_COMMAND);        Map <String,String> params = new HashMap<String,String>();        params.put(\"name\", \"AppTerminate\");        params.put(\"auid\", launchSession.getAppId());        if (launchSession.getAppName() != null)             params.put(\"appname\", HttpMessage.encode(launchSession.getAppName()));        String httpMessage = getUDAPMessageBody(UDAP_API_COMMAND, params);        ServiceCommand<ResponseListener<Object>> command = new ServiceCommand<ResponseListener<Object>>(launchSession.getService(), requestURL, httpMessage, listener);        command.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getTotalNumberOfApplications", "params": ["int", "AppCountListener"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void getTotalNumberOfApplications(int type, final AppCountListener listener) {        ResponseListener<Object> responseListener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {                String strObj = (String) response;                int applicationNumber = parseAppNumberXmlToJSON(strObj);                Util.postSuccess(listener, applicationNumber);            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        };        String requestURL = getUDAPRequestURL(UDAP_PATH_DATA, TARGET_APPNUM_GET, String.valueOf(type));        ServiceCommand<ResponseListener<Object>> command = new ServiceCommand<ResponseListener<Object>>(this, requestURL, null, responseListener);        command.setHttpMethod(ServiceCommand.TYPE_GET);        command.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getApplications", "params": ["int", "int", "AppListListener"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void getApplications(int type, int number, final AppListListener listener) {        ResponseListener<Object> responseListener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {                String strObj = (String) response;                JSONArray applicationArray = parseApplicationsXmlToJSON(strObj);                List<AppInfo> appList = new ArrayList<AppInfo>();                for (int i = 0; i < applicationArray.length(); i++)                {                    try {                        final JSONObject appJSON = applicationArray.getJSONObject(i);                        AppInfo appInfo = new AppInfo() {{                            setId(appJSON.getString(\"id\"));                            setName(appJSON.getString(\"title\"));                        }};                        appList.add(appInfo);                    } catch (JSONException e) {                        e.printStackTrace();                    }                }                Util.postSuccess(listener, appList);            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        };        String requestURL = getUDAPRequestURL(UDAP_PATH_DATA, TARGET_APPLIST_GET, String.valueOf(type), \"0\", String.valueOf(number));        ServiceCommand<ResponseListener<Object>> command = new ServiceCommand<ResponseListener<Object>>(this, requestURL, null, responseListener);        command.setHttpMethod(ServiceCommand.TYPE_GET);        command.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getAppList", "params": ["AppListListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getAppList(final AppListListener listener) {        applications.clear();        getTotalNumberOfApplications(2, new AppCountListener() {            @Override            public void onSuccess(final Integer count) {                getApplications(2, count, new AppListListener() {                    @Override                    public void onSuccess(List<AppInfo> apps) {                        applications.addAll(apps);                        getTotalNumberOfApplications(3, new AppCountListener() {                            @Override                            public void onSuccess(final Integer count) {                                getApplications(3, count, new AppListListener() {                                    @Override                                    public void onSuccess(List<AppInfo> apps) {                                        applications.addAll(apps);                                        Util.postSuccess(listener, applications);                                    }                                    @Override                                    public void onError(ServiceCommandError error) {                                        Util.postError(listener, error);                                    }                                });                            }                            @Override                            public void onError(ServiceCommandError error) {                                Util.postError(listener, error);                            }                        });                    }                    @Override                    public void onError(ServiceCommandError error) {                        Util.postError(listener, error);                    }                });            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getRunningApp", "params": ["AppInfoListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getRunningApp(AppInfoListener listener) {        // Do nothing - Not Supported        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "subscribeRunningApp", "params": ["AppInfoListener"], "throws": null, "modifiers": ["public"], "return_type": "ServiceSubscription<AppInfoListener>", "snippet": "    public ServiceSubscription<AppInfoListener> subscribeRunningApp(AppInfoListener listener) {        // Do nothing - Not Supported        Util.postError(listener, ServiceCommandError.notSupported());        return new NotSupportedServiceSubscription<AppInfoListener>();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getAppState", "params": ["LaunchSession", "AppStateListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getAppState(final LaunchSession launchSession, final AppStateListener listener) {        String requestURL = String.format(Locale.US, \"%s%s\",                 getUDAPRequestURL(UDAP_PATH_APPTOAPP_DATA),                 String.format(Locale.US, \"/%s/status\", launchSession.getAppId()));        ResponseListener<Object> responseListener = new ResponseListener<Object>() {            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }            @Override            public void onSuccess(Object object) {                String response = (String) object;                AppState appState;                if (response.equalsIgnoreCase(\"NONE\"))                    appState = new AppState(false, false);                else if (response.equalsIgnoreCase(\"LOAD\"))                    appState = new AppState(false, true);                else if (response.equalsIgnoreCase(\"RUN_NF\"))                    appState = new AppState(true, false);                else if (response.equalsIgnoreCase(\"TERM\"))                    appState = new AppState(false, true);                else                    appState = new AppState(false, false);                Util.postSuccess(listener, appState);            }        };        ServiceCommand<ResponseListener<Object>> command = new ServiceCommand<ResponseListener<Object>>(this, requestURL, null, responseListener);        command.setHttpMethod(ServiceCommand.TYPE_GET);        command.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "subscribeAppState", "params": ["LaunchSession", "AppStateListener"], "throws": null, "modifiers": ["public"], "return_type": "ServiceSubscription<AppStateListener>", "snippet": "    public ServiceSubscription<AppStateListener> subscribeAppState(LaunchSession launchSession, AppStateListener listener) {        Util.postError(listener, ServiceCommandError.notSupported());        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getTVControl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TVControl", "snippet": "    public TVControl getTVControl() {        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getTVControlCapabilityLevel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getTVControlCapabilityLevel() {        return CapabilityPriorityLevel.HIGH;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getChannelList", "params": ["ChannelListListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getChannelList(final ChannelListListener listener) {        String requestURL = getUDAPRequestURL(UDAP_PATH_DATA, TARGET_CHANNEL_LIST);        ResponseListener<Object> responseListener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {                String strObj = (String)response;                try {                    SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();                    InputStream stream = new ByteArrayInputStream(strObj.getBytes(\"UTF-8\"));                    SAXParser saxParser = saxParserFactory.newSAXParser();                    NetcastChannelParser parser = new NetcastChannelParser();                    saxParser.parse(stream, parser);                    JSONArray channelArray = parser.getJSONChannelArray();                    ArrayList<ChannelInfo> channelList = new ArrayList<ChannelInfo>();                    for (int i = 0; i < channelArray.length(); i++) {                        JSONObject rawData;                        try {                            rawData = (JSONObject) channelArray.get(i);                            ChannelInfo channel = NetcastChannelParser.parseRawChannelData(rawData);                            channelList.add(channel);                        } catch (JSONException e) {                            e.printStackTrace();                        }                    }                    Util.postSuccess(listener, channelList);                } catch (ParserConfigurationException e) {                    e.printStackTrace();                } catch (SAXException e) {                    e.printStackTrace();                } catch (IOException e) {                    e.printStackTrace();                }            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        };        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(this, requestURL, null, responseListener);        request.setHttpMethod(ServiceCommand.TYPE_GET);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "channelUp", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void channelUp(ResponseListener<Object> listener) {        sendVirtualKeyCode(NetcastVirtualKeycodes.CHANNEL_UP.getCode(), listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "channelDown", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void channelDown(ResponseListener<Object> listener) {        sendVirtualKeyCode(NetcastVirtualKeycodes.CHANNEL_DOWN.getCode(), listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "setChannel", "params": ["ChannelInfo", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setChannel(final ChannelInfo channelInfo, final ResponseListener<Object> listener) {        getChannelList(new ChannelListListener() {            @Override            public void onSuccess(List<ChannelInfo> channelList) {                String requestURL = getUDAPRequestURL(UDAP_PATH_COMMAND);                Map<String, String> params = new HashMap<String, String>();                for (int i = 0; i < channelList.size(); i++) {                    ChannelInfo ch = channelList.get(i);                    JSONObject rawData = ch.getRawData();                    try {                        String major = channelInfo.getNumber().split(\"-\")[0];                        String minor = channelInfo.getNumber().split(\"-\")[1];                        int majorNumber = ch.getMajorNumber();                        int minorNumber = ch.getMinorNumber();                        String sourceIndex = (String) rawData.get(\"sourceIndex\");                        int physicalNum = (Integer) rawData.get(\"physicalNumber\");                        if (Integer.parseInt(major) == majorNumber                                && Integer.parseInt(minor) == minorNumber) {                            params.put(\"name\", \"HandleChannelChange\");                            params.put(\"major\", major);                            params.put(\"minor\", minor);                            params.put(\"sourceIndex\", sourceIndex);                            params.put(\"physicalNum\", String.valueOf(physicalNum));                            break;                        }                    } catch (JSONException e) {                        e.printStackTrace();                    }                }                String httpMessage = getUDAPMessageBody(UDAP_API_COMMAND, params);                ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(NetcastTVService.this, requestURL, httpMessage, listener);                request.send();            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getCurrentChannel", "params": ["ChannelListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getCurrentChannel(final ChannelListener listener) {        String requestURL = getUDAPRequestURL(UDAP_PATH_DATA, TARGET_CURRENT_CHANNEL);        ResponseListener<Object> responseListener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {                String strObj = (String)response;                try {                    SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();                    InputStream stream = new ByteArrayInputStream(strObj.getBytes(\"UTF-8\"));                    SAXParser saxParser = saxParserFactory.newSAXParser();                    NetcastChannelParser parser = new NetcastChannelParser();                    saxParser.parse(stream, parser);                    JSONArray channelArray = parser.getJSONChannelArray();                    if (channelArray.length() > 0) {                        JSONObject rawData = (JSONObject) channelArray.get(0);                        ChannelInfo channel = NetcastChannelParser.parseRawChannelData(rawData);                        Util.postSuccess(listener, channel);                    }                } catch (ParserConfigurationException e) {                    e.printStackTrace();                } catch (SAXException e) {                    e.printStackTrace();                } catch (IOException e) {                    e.printStackTrace();                } catch (JSONException e) {                    e.printStackTrace();                }            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        };        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(this, requestURL, null, responseListener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "subscribeCurrentChannel", "params": ["ChannelListener"], "throws": null, "modifiers": ["public"], "return_type": "ServiceSubscription<ChannelListener>", "snippet": "    public ServiceSubscription<ChannelListener> subscribeCurrentChannel(final ChannelListener listener) {        getCurrentChannel(listener);    // This is for the initial Current TV Channel Info.        URLServiceSubscription<ChannelListener> request = new URLServiceSubscription<ChannelListener>(this, \"ChannelChanged\", null, null);        request.setHttpMethod(ServiceCommand.TYPE_GET);        request.addListener(listener);        addSubscription(request);        return request;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getProgramInfo", "params": ["ProgramInfoListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getProgramInfo(ProgramInfoListener listener) {        // Do nothing - Not Supported        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "subscribeProgramInfo", "params": ["ProgramInfoListener"], "throws": null, "modifiers": ["public"], "return_type": "ServiceSubscription<ProgramInfoListener>", "snippet": "    public ServiceSubscription<ProgramInfoListener> subscribeProgramInfo(ProgramInfoListener listener) {        // Do nothing - Not Supported        Util.postError(listener, ServiceCommandError.notSupported());        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getProgramList", "params": ["ProgramListListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getProgramList(ProgramListListener listener) {        // Do nothing - Not Supported        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "subscribeProgramList", "params": ["ProgramListListener"], "throws": null, "modifiers": ["public"], "return_type": "ServiceSubscription<ProgramListListener>", "snippet": "    public ServiceSubscription<ProgramListListener> subscribeProgramList(ProgramListListener listener) {        // Do nothing - Not Supported        Util.postError(listener, ServiceCommandError.notSupported());        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "set3DEnabled", "params": ["boolean", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void set3DEnabled(final boolean enabled, final ResponseListener<Object> listener) {        get3DEnabled(new State3DModeListener() {            @Override            public void onSuccess(Boolean isEnabled) {                if (enabled != isEnabled) {                    sendVirtualKeyCode(NetcastVirtualKeycodes.VIDEO_3D.getCode(), listener);                }            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "get3DEnabled", "params": ["State3DModeListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void get3DEnabled(final State3DModeListener listener) {        ResponseListener<Object> responseListener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {                String strObj = (String) response;                String upperStr = strObj.toUpperCase(Locale.ENGLISH);                Util.postSuccess(listener, upperStr.contains(\"TRUE\"));            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        };        String requestURL = getUDAPRequestURL(UDAP_PATH_DATA, TARGET_IS_3D);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(this, requestURL, null, responseListener);        request.setHttpMethod(ServiceCommand.TYPE_GET);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "subscribe3DEnabled", "params": ["State3DModeListener"], "throws": null, "modifiers": ["public"], "return_type": "ServiceSubscription<State3DModeListener>", "snippet": "    public ServiceSubscription<State3DModeListener> subscribe3DEnabled(final State3DModeListener listener) {        get3DEnabled(listener);        URLServiceSubscription<State3DModeListener> request = new URLServiceSubscription<State3DModeListener>(this, TARGET_3D_MODE, null, null);        request.setHttpMethod(ServiceCommand.TYPE_GET);        request.addListener(listener);        addSubscription(request);        return request;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getVolumeControl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "VolumeControl", "snippet": "    public VolumeControl getVolumeControl() {        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getVolumeControlCapabilityLevel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getVolumeControlCapabilityLevel() {        return CapabilityPriorityLevel.HIGH;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "volumeUp", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void volumeUp(ResponseListener<Object> listener) {        sendVirtualKeyCode(NetcastVirtualKeycodes.VOLUME_UP.getCode(), listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "volumeDown", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void volumeDown(ResponseListener<Object> listener) {        sendVirtualKeyCode(NetcastVirtualKeycodes.VOLUME_DOWN.getCode(), listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "setVolume", "params": ["float", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setVolume(float volume, ResponseListener<Object> listener) {        if (getDLNAService() != null) {            getDLNAService().setVolume(volume, listener);        }        else             Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getVolume", "params": ["VolumeListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getVolume(final VolumeListener listener) {        getVolumeStatus(new VolumeStatusListener() {            @Override            public void onSuccess(VolumeStatus status) {                Util.postSuccess(listener, status.volume);            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "setMute", "params": ["boolean", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMute(final boolean isMute, final ResponseListener<Object> listener) {        getVolumeStatus(new VolumeStatusListener() {            @Override            public void onSuccess(VolumeStatus status) {                if (isMute != status.isMute) {                    sendVirtualKeyCode(NetcastVirtualKeycodes.MUTE.getCode(), listener);                }            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getMute", "params": ["MuteListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getMute(final MuteListener listener) {        getVolumeStatus(new VolumeStatusListener() {            @Override            public void onSuccess(VolumeStatus status) {                Util.postSuccess(listener, status.isMute);            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "subscribeVolume", "params": ["VolumeListener"], "throws": null, "modifiers": ["public"], "return_type": "ServiceSubscription<VolumeListener>", "snippet": "    public ServiceSubscription<VolumeListener> subscribeVolume(VolumeListener listener) {        if (getDLNAService() != null) {            return getDLNAService().subscribeVolume(listener);        }        else             Util.postError(listener, ServiceCommandError.notSupported());        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "subscribeMute", "params": ["MuteListener"], "throws": null, "modifiers": ["public"], "return_type": "ServiceSubscription<MuteListener>", "snippet": "    public ServiceSubscription<MuteListener> subscribeMute(MuteListener listener) {        if (getDLNAService() != null) {            return getDLNAService().subscribeMute(listener);        }        else             Util.postError(listener, ServiceCommandError.notSupported());        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getVolumeStatus", "params": ["VolumeStatusListener"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void getVolumeStatus(final VolumeStatusListener listener) {        ResponseListener<Object> responseListener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {                String strObj = (String) response;                JSONObject volumeStatus = parseVolumeXmlToJSON(strObj);                try {                    boolean isMute = (Boolean) volumeStatus.get(\"mute\");                    int volume = (Integer) volumeStatus.get(\"level\");                    Util.postSuccess(listener, new VolumeStatus(isMute, volume));                } catch (JSONException e) {                    e.printStackTrace();                }            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        };        String requestURL = getUDAPRequestURL(UDAP_PATH_DATA, TARGET_VOLUME_INFO);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(this, requestURL, null, responseListener);        request.setHttpMethod(ServiceCommand.TYPE_GET);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getExternalInput", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ExternalInputControl", "snippet": "    public ExternalInputControl getExternalInput() {        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getExternalInputControlPriorityLevel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getExternalInputControlPriorityLevel() {        return CapabilityPriorityLevel.HIGH;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "launchInputPicker", "params": ["AppLaunchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void launchInputPicker(final AppLaunchListener listener) {        final String appName = \"Input List\";        final String encodedStr = HttpMessage.encode(appName);        getApplication(encodedStr, new AppInfoListener() {            @Override            public void onSuccess(final AppInfo appInfo) {                Launcher.AppLaunchListener launchListener = new Launcher.AppLaunchListener() {                    @Override                    public void onSuccess(LaunchSession session) {                        if (inputPickerSession == null) {                            inputPickerSession = session;                        }                        Util.postSuccess(listener, session);                    }                    @Override                    public void onError(ServiceCommandError error) {                        Util.postError(listener, error);                    }                };                launchApplication(appName, appInfo.getId(), null, launchListener);            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "closeInputPicker", "params": ["LaunchSession", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void closeInputPicker(LaunchSession launchSession, ResponseListener<Object> listener) {        sendVirtualKeyCode(NetcastVirtualKeycodes.EXIT.getCode(), listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getExternalInputList", "params": ["ExternalInputListListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getExternalInputList(ExternalInputListListener listener) {        // Do nothing - not Supported        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "setExternalInput", "params": ["ExternalInputInfo", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setExternalInput(ExternalInputInfo input, ResponseListener<Object> listener) {        // Do nothing - not Supported        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getMediaPlayer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MediaPlayer", "snippet": "    public MediaPlayer getMediaPlayer() {        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getMediaPlayerCapabilityLevel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getMediaPlayerCapabilityLevel() {        return CapabilityPriorityLevel.HIGH;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getMediaInfo", "params": ["MediaInfoListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getMediaInfo(final MediaInfoListener listener) {        if (getDLNAService() != null) {            getDLNAService().getMediaInfo(listener);        }        else {            if (listener != null)                Util.postError(listener, ServiceCommandError.notSupported());        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "subscribeMediaInfo", "params": ["MediaInfoListener"], "throws": null, "modifiers": ["public"], "return_type": "ServiceSubscription<MediaInfoListener>", "snippet": "    public ServiceSubscription<MediaInfoListener> subscribeMediaInfo(            MediaInfoListener listener) {        if (getDLNAService() != null) {            return getDLNAService().subscribeMediaInfo(listener);        }        else {            if (listener != null)                Util.postError(listener, ServiceCommandError.notSupported());            return null;        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "displayImage", "params": ["String", "String", "String", "String", "String", "MediaPlayer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void displayImage(final String url, final String mimeType, final String title, final String description, final String iconSrc, final MediaPlayer.LaunchListener listener) {        if (getDLNAService() != null) {            final MediaPlayer.LaunchListener launchListener = new LaunchListener() {                @Override                public void onError(ServiceCommandError error) {                    if (listener != null)                        Util.postError(listener, error);                }                @Override                public void onSuccess(MediaLaunchObject object) {                    object.launchSession.setAppId(SMART_SHARE);                    object.launchSession.setAppName(SMART_SHARE);                    object.mediaControl = NetcastTVService.this.getMediaControl();                    if (listener != null)                        Util.postSuccess(listener, object);                }            };             getDLNAService().displayImage(url, mimeType, title, description, iconSrc, launchListener);        }        else {            System.err.println(\"DLNA Service is not ready yet\");        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "displayImage", "params": ["MediaInfo", "LaunchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void displayImage(MediaInfo mediaInfo, LaunchListener listener) {        String mediaUrl = null;        String mimeType = null;        String title = null;        String desc = null;        String iconSrc = null;        if (mediaInfo != null) {            mediaUrl = mediaInfo.getUrl();            mimeType = mediaInfo.getMimeType();            title = mediaInfo.getTitle();            desc = mediaInfo.getDescription();            if (mediaInfo.getImages() != null && mediaInfo.getImages().size() > 0) {                ImageInfo imageInfo = mediaInfo.getImages().get(0);                iconSrc = imageInfo.getUrl();            }        }        displayImage(mediaUrl, mimeType, title, desc, iconSrc, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "playMedia", "params": ["String", "String", "String", "String", "String", "boolean", "MediaPlayer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void playMedia(String url, String mimeType, String title, String description, String iconSrc, boolean shouldLoop, MediaPlayer.LaunchListener listener) {        playMedia(new MediaInfo(url, mimeType, title, description, iconSrc), shouldLoop, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "playMedia", "params": ["MediaInfo", "boolean", "MediaPlayer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void playMedia(MediaInfo mediaInfo, boolean shouldLoop, final MediaPlayer.LaunchListener listener) {        if (getDLNAService() != null) {            final MediaPlayer.LaunchListener launchListener = new LaunchListener() {                @Override                public void onError(ServiceCommandError error) {                    if (listener != null)                        Util.postError(listener, error);                }                @Override                public void onSuccess(MediaLaunchObject object) {                    object.launchSession.setAppId(SMART_SHARE);                    object.launchSession.setAppName(SMART_SHARE);                    object.mediaControl = NetcastTVService.this.getMediaControl();                    if (listener != null)                        Util.postSuccess(listener, object);                }            };            getDLNAService().playMedia(mediaInfo, shouldLoop, launchListener);        }        else {            System.err.println(\"DLNA Service is not ready yet\");        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "closeMedia", "params": ["LaunchSession", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void closeMedia(LaunchSession launchSession, ResponseListener<Object> listener) {        if (getDLNAService() == null) {            Util.postError(listener, new ServiceCommandError(0, \"Service is not connected\", null));            return;        }        getDLNAService().closeMedia(launchSession, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getMediaControl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MediaControl", "snippet": "    public MediaControl getMediaControl() {        if (DiscoveryManager.getInstance().getPairingLevel() == PairingLevel.OFF)            return this.getDLNAService();        else            return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getMediaControlCapabilityLevel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getMediaControlCapabilityLevel() {        return CapabilityPriorityLevel.HIGH;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "play", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void play(ResponseListener<Object> listener) {        sendVirtualKeyCode(NetcastVirtualKeycodes.PLAY.getCode(), listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "pause", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void pause(ResponseListener<Object> listener) {        sendVirtualKeyCode(NetcastVirtualKeycodes.PAUSE.getCode(), listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "stop", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void stop(final ResponseListener<Object> listener) {        sendVirtualKeyCode(NetcastVirtualKeycodes.STOP.getCode(), listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "rewind", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void rewind(ResponseListener<Object> listener) {        sendVirtualKeyCode(NetcastVirtualKeycodes.REWIND.getCode(), listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "fastForward", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void fastForward(ResponseListener<Object> listener) {        sendVirtualKeyCode(NetcastVirtualKeycodes.FAST_FORWARD.getCode(), listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "previous", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void previous(ResponseListener<Object> listener) {        sendVirtualKeyCode(NetcastVirtualKeycodes.SKIP_BACKWARD.getCode(), listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "next", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void next(ResponseListener<Object> listener) {        sendVirtualKeyCode(NetcastVirtualKeycodes.SKIP_FORWARD.getCode(), listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "seek", "params": ["long", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void seek(long position, ResponseListener<Object> listener) {        if (getDLNAService() != null) {            getDLNAService().seek(position, listener);        } else {            if (listener != null)                Util.postError(listener, ServiceCommandError.notSupported());        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getDuration", "params": ["DurationListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getDuration(DurationListener listener) {        if (getDLNAService() != null) {            getDLNAService().getDuration(listener);        } else {            if (listener != null)                Util.postError(listener, ServiceCommandError.notSupported());        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getPosition", "params": ["PositionListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getPosition(PositionListener listener) {        if (getDLNAService() != null) {            getDLNAService().getPosition(listener);        } else {            if (listener != null)                Util.postError(listener, ServiceCommandError.notSupported());        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getPlayState", "params": ["PlayStateListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getPlayState(PlayStateListener listener) {        if (getDLNAService() != null) {            getDLNAService().getPlayState(listener);        }        else {            if (listener != null)                Util.postError(listener, ServiceCommandError.notSupported());        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "subscribePlayState", "params": ["PlayStateListener"], "throws": null, "modifiers": ["public"], "return_type": "ServiceSubscription<PlayStateListener>", "snippet": "    public ServiceSubscription<PlayStateListener> subscribePlayState(PlayStateListener listener) {        if (getDLNAService() != null) {            return getDLNAService().subscribePlayState(listener);        }        else Util.postError(listener, ServiceCommandError.notSupported());        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getMouseControl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MouseControl", "snippet": "    public MouseControl getMouseControl() {        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getMouseControlCapabilityLevel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getMouseControlCapabilityLevel() {        return CapabilityPriorityLevel.HIGH;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "setMouseCursorVisible", "params": ["boolean", "ResponseListener<Object>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setMouseCursorVisible(boolean visible, ResponseListener<Object> listener) {        String requestURL = getUDAPRequestURL(UDAP_PATH_EVENT);        Map <String,String> params = new HashMap<String,String>();        params.put(\"name\", \"CursorVisible\");        params.put(\"value\", visible? \"true\" : \"false\");        params.put(\"mode\", \"auto\");        String httpMessage = getUDAPMessageBody(UDAP_API_EVENT, params);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(this, requestURL, httpMessage, listener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "connectMouse", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void connectMouse() {        ResponseListener<Object> listener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {                Log.d(Util.T, \"Netcast TV's mouse has been connected\");                mMouseDistance = new PointF(0, 0);                mMouseIsMoving = false;            }            @Override            public void onError(ServiceCommandError error) {                Log.w(Util.T, \"Netcast TV's mouse connection has been failed\");            }        };        setMouseCursorVisible(true, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "disconnectMouse", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void disconnectMouse() {        setMouseCursorVisible(false, null);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "click", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void click() {        ResponseListener<Object> responseListener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {            }            @Override            public void onError(ServiceCommandError error) {                Log.w(Util.T, \"Netcast TV's mouse click has been failed\");            }        };        String requestURL = getUDAPRequestURL(UDAP_PATH_COMMAND);        Map <String,String> params = new HashMap<String,String>();        params.put(\"name\", \"HandleTouchClick\");        String httpMessage = getUDAPMessageBody(UDAP_API_COMMAND, params);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(this, requestURL, httpMessage, responseListener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "move", "params": ["double", "double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void move(double dx, double dy) {        mMouseDistance.x += dx;        mMouseDistance.y += dy;        if (!mMouseIsMoving)        {            mMouseIsMoving = true;            this.moveMouse();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "moveMouse", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void moveMouse() {        String requestURL = getUDAPRequestURL(UDAP_PATH_COMMAND);        int x = (int)mMouseDistance.x;        int y = (int)mMouseDistance.y;        Map <String,String> params = new HashMap<String,String>();        params.put(\"name\", \"HandleTouchMove\");        params.put(\"x\", String.valueOf(x));        params.put(\"y\", String.valueOf(y));        mMouseDistance.x = mMouseDistance.y = 0;        final NetcastTVService mouseService = this;        ResponseListener<Object> responseListener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {                if (mMouseDistance.x > 0 || mMouseDistance.y > 0)                    mouseService.moveMouse();                else                    mMouseIsMoving = false;            }            @Override            public void onError(ServiceCommandError error) {                Log.w(Util.T, \"Netcast TV's mouse move has failed\");                mMouseIsMoving = false;            }        };        String httpMessage = getUDAPMessageBody(UDAP_API_COMMAND, params);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(this, requestURL, httpMessage, responseListener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "move", "params": ["PointF"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void move(PointF diff) {        move(diff.x, diff.y);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "scroll", "params": ["double", "double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void scroll(double dx, double dy) {        ResponseListener<Object> responseListener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {            }            @Override            public void onError(ServiceCommandError error) {                Log.w(Util.T, \"Netcast TV's mouse scroll has been failed\");            }        };        String requestURL = getUDAPRequestURL(UDAP_PATH_COMMAND);        Map <String,String> params = new HashMap<String,String>();        params.put(\"name\", \"HandleTouchWheel\");        if (dy > 0)             params.put(\"value\", \"up\");        else             params.put(\"value\", \"down\");        String httpMessage = getUDAPMessageBody(UDAP_API_COMMAND, params);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(this, requestURL, httpMessage, responseListener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "scroll", "params": ["PointF"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void scroll(PointF diff) {        scroll(diff.x, diff.y);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getTextInputControl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TextInputControl", "snippet": "    public TextInputControl getTextInputControl() {        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getTextInputControlCapabilityLevel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getTextInputControlCapabilityLevel() {        return CapabilityPriorityLevel.HIGH;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "subscribeTextInputStatus", "params": ["TextInputStatusListener"], "throws": null, "modifiers": ["public"], "return_type": "ServiceSubscription<TextInputStatusListener>", "snippet": "    public ServiceSubscription<TextInputStatusListener> subscribeTextInputStatus(final TextInputStatusListener listener) {        keyboardString = new StringBuilder();        URLServiceSubscription<TextInputStatusListener> request = new URLServiceSubscription<TextInputStatusListener>(this, \"KeyboardVisible\", null, null);        request.addListener(listener);        addSubscription(request);        return request;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "sendText", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendText(final String input) {        Log.d(Util.T, \"Add to Queue: \" + input);        keyboardString.append(input);        handleKeyboardInput(\"Editing\", keyboardString.toString());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "sendEnter", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendEnter() {        ResponseListener<Object> responseListener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {            }            @Override            public void onError(ServiceCommandError error) {                Log.w(Util.T, \"Netcast TV's enter key has been failed\");            }        };        handleKeyboardInput(\"EditEnd\", keyboardString.toString());        sendVirtualKeyCode(NetcastVirtualKeycodes.RED.getCode(), responseListener);       // Send RED Key to enter the \"ENTER\" button    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "sendDelete", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendDelete() {        if (keyboardString.length() > 1) {            keyboardString.deleteCharAt(keyboardString.length()-1);        }        else {            keyboardString = new StringBuilder();        }        handleKeyboardInput(\"Editing\", keyboardString.toString());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "handleKeyboardInput", "params": ["String", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void handleKeyboardInput(final String state, final String buffer) {        ResponseListener<Object> responseListener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {            }            @Override            public void onError(ServiceCommandError error) {                Log.w(Util.T, \"Netcast TV's keyboard input has been failed\");            }        };        String requestURL = getUDAPRequestURL(UDAP_PATH_EVENT);        Map <String,String> params = new HashMap<String,String>();        params.put(\"name\", \"TextEdited\");        params.put(\"state\", state);        params.put(\"value\", buffer);        String httpMessage = getUDAPMessageBody(UDAP_API_EVENT, params);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(this, requestURL, httpMessage, responseListener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getKeyControl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "KeyControl", "snippet": "    public KeyControl getKeyControl() {        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getKeyControlCapabilityLevel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getKeyControlCapabilityLevel() {        return CapabilityPriorityLevel.HIGH;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "up", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void up(final ResponseListener<Object> listener) {        sendVirtualKeyCode(NetcastVirtualKeycodes.KEY_UP.getCode(), listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "down", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void down(final ResponseListener<Object> listener) {        sendVirtualKeyCode(NetcastVirtualKeycodes.KEY_DOWN.getCode(), listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "left", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void left(final ResponseListener<Object> listener) {        sendVirtualKeyCode(NetcastVirtualKeycodes.KEY_LEFT.getCode(), listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "right", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void right(final ResponseListener<Object> listener) {        sendVirtualKeyCode(NetcastVirtualKeycodes.KEY_RIGHT.getCode(), listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "ok", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void ok(final ResponseListener<Object> listener) {        sendVirtualKeyCode(NetcastVirtualKeycodes.OK.getCode(), listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "back", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void back(final ResponseListener<Object> listener) {        sendVirtualKeyCode(NetcastVirtualKeycodes.BACK.getCode(), listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "home", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void home(final ResponseListener<Object> listener) {        sendVirtualKeyCode(NetcastVirtualKeycodes.HOME.getCode(), listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getPowerControl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "PowerControl", "snippet": "    public PowerControl getPowerControl() {        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getPowerControlCapabilityLevel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getPowerControlCapabilityLevel() {        return CapabilityPriorityLevel.HIGH;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "powerOff", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void powerOff(ResponseListener<Object> listener) {        ResponseListener<Object> responseListener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {            }            @Override            public void onError(ServiceCommandError error) {                Log.w(Util.T, \"Netcast TV's power off has been failed\");            }        };        sendVirtualKeyCode(NetcastVirtualKeycodes.POWER.getCode(), responseListener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "powerOn", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void powerOn(ResponseListener<Object> listener) {        if (listener != null)            listener.onError(ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "parseVolumeXmlToJSON", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "JSONObject", "snippet": "    private JSONObject parseVolumeXmlToJSON(String data) {        SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();        try {            InputStream stream = new ByteArrayInputStream(data.getBytes(\"UTF-8\"));            SAXParser saxParser = saxParserFactory.newSAXParser();            NetcastVolumeParser handler = new NetcastVolumeParser();            saxParser.parse(stream, handler);            return handler.getVolumeStatus();        } catch (ParserConfigurationException e) {            e.printStackTrace();        } catch (SAXException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        }        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "parseAppNumberXmlToJSON", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int parseAppNumberXmlToJSON(String data) {        SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();        try {            InputStream stream = new ByteArrayInputStream(data.getBytes(\"UTF-8\"));            SAXParser saxParser = saxParserFactory.newSAXParser();            NetcastAppNumberParser handler = new NetcastAppNumberParser();            saxParser.parse(stream, handler);            return handler.getApplicationNumber();        } catch (ParserConfigurationException e) {            e.printStackTrace();        } catch (SAXException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        }        return 0;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "parseApplicationsXmlToJSON", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "JSONArray", "snippet": "    private JSONArray parseApplicationsXmlToJSON(String data) {        SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();        try {            InputStream stream = new ByteArrayInputStream(data.getBytes(\"UTF-8\"));            SAXParser saxParser = saxParserFactory.newSAXParser();            NetcastApplicationsParser handler = new NetcastApplicationsParser();            saxParser.parse(stream, handler);            return handler.getApplications();        } catch (ParserConfigurationException e) {            e.printStackTrace();        } catch (SAXException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        }        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getHttpMessageForHandleKeyInput", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getHttpMessageForHandleKeyInput(final int keycode) {        String strKeycode = String.valueOf(keycode);        Map <String,String> params = new HashMap<String,String>();        params.put(\"name\", \"HandleKeyInput\");        params.put(\"value\", strKeycode);        return getUDAPMessageBody(UDAP_API_COMMAND, params);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "sendKeyCode", "params": ["KeyCode", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendKeyCode(KeyCode keycode, ResponseListener<Object> listener) {        switch (keycode) {            case NUM_0:                sendVirtualKeyCode(NetcastVirtualKeycodes.NUMBER_0.getCode(), listener);                break;            case NUM_1:                sendVirtualKeyCode(NetcastVirtualKeycodes.NUMBER_1.getCode(), listener);                break;            case NUM_2:                sendVirtualKeyCode(NetcastVirtualKeycodes.NUMBER_2.getCode(), listener);                break;            case NUM_3:                sendVirtualKeyCode(NetcastVirtualKeycodes.NUMBER_3.getCode(), listener);                break;            case NUM_4:                sendVirtualKeyCode(NetcastVirtualKeycodes.NUMBER_4.getCode(), listener);                break;            case NUM_5:                sendVirtualKeyCode(NetcastVirtualKeycodes.NUMBER_5.getCode(), listener);                break;            case NUM_6:                sendVirtualKeyCode(NetcastVirtualKeycodes.NUMBER_6.getCode(), listener);                break;            case NUM_7:                sendVirtualKeyCode(NetcastVirtualKeycodes.NUMBER_7.getCode(), listener);                break;            case NUM_8:                sendVirtualKeyCode(NetcastVirtualKeycodes.NUMBER_8.getCode(), listener);                break;            case NUM_9:                sendVirtualKeyCode(NetcastVirtualKeycodes.NUMBER_9.getCode(), listener);                break;            case DASH:                sendVirtualKeyCode(NetcastVirtualKeycodes.DASH.getCode(), listener);                break;            case ENTER:                sendVirtualKeyCode(NetcastVirtualKeycodes.OK.getCode(), listener);                break;            default:                Util.postError(listener, new ServiceCommandError(0, \"The keycode is not available\", null));        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "sendVirtualKeyCode", "params": ["int", "ResponseListener<Object>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void sendVirtualKeyCode(final int keycode, final ResponseListener<Object> listener) {        ResponseListener<Object> responseListener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {                try {                    Thread.sleep(150);                } catch (InterruptedException e) {                    e.printStackTrace();                }                String requestURL = getUDAPRequestURL(UDAP_PATH_COMMAND);                String httpMessage = getHttpMessageForHandleKeyInput(keycode);                ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(NetcastTVService.this, requestURL, httpMessage, listener);                request.send();            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        };        setMouseCursorVisible(false, responseListener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getUDAPRequestURL", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String getUDAPRequestURL(String path) {        return getUDAPRequestURL(path, null);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getUDAPRequestURL", "params": ["String", "String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String getUDAPRequestURL(String path, String target) {        return getUDAPRequestURL(path, target, null);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getUDAPRequestURL", "params": ["String", "String", "String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String getUDAPRequestURL(String path, String target, String type) {        return getUDAPRequestURL(path, target, type, null, null);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getUDAPRequestURL", "params": ["String", "String", "String", "String", "String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String getUDAPRequestURL(String path, String target, String type, String index, String number) {        // Type Values        // 1: List of all apps        // 2: List of apps in the Premium category        // 3: List of apps in the My Apps category        StringBuilder sb = new StringBuilder();        sb.append(\"http://\");        sb.append(serviceDescription.getIpAddress());        sb.append(\":\");        sb.append(serviceDescription.getPort());        sb.append(path);        if (target != null) {             sb.append(\"?target=\");            sb.append(target);            if (type != null) {                sb.append(\"&type=\");                sb.append(type);            }            if (index != null) {                sb.append(\"&index=\");                sb.append(index);            }            if (number != null) {                sb.append(\"&number=\");                sb.append(number);            }        }        return sb.toString();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getUDAPMessageBody", "params": ["String", "Map<String,String>"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String getUDAPMessageBody(String api, Map<String, String> params) {        StringBuilder sb = new StringBuilder();        sb.append(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\");        sb.append(\"<envelope>\");        sb.append(\"<api type=\\\"\").append(api).append(\"\\\">\");        for (Map.Entry<String, String> entry : params.entrySet()) {            String key = entry.getKey();            String value = entry.getValue();            sb.append(createNode(key, value));        }        sb.append(\"</api>\");        sb.append(\"</envelope>\");        return sb.toString();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "createNode", "params": ["String", "String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String createNode(String tag, String value) {        return \"<\" + tag + \">\" + value + \"</\" + tag + \">\";    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "decToHex", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String decToHex(String dec) {        if (dec != null && dec.length() > 0) {            try {                return decToHex(Long.parseLong(dec.trim()));            } catch (RuntimeException e) {                e.printStackTrace();            }        }        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "decToHex", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String decToHex(long dec) {        return String.format(\"%016x\",dec);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "sendCommand", "params": ["ServiceCommand<?>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendCommand(final ServiceCommand<?> mCommand) {        Util.runInBackground(new Runnable() {            @SuppressWarnings(\"unchecked\")            @Override            public void run() {                final ServiceCommand<ResponseListener<Object>> command = (ServiceCommand<ResponseListener<Object>>) mCommand;                Object payload = command.getPayload();                try {                    HttpConnection connection = HttpConnection.newInstance(URI.create(command.getTarget()));                    connection.setHeader(HttpMessage.USER_AGENT, HttpMessage.UDAP_USER_AGENT);                    connection.setHeader(HttpMessage.CONTENT_TYPE_HEADER, HttpMessage.CONTENT_TYPE_TEXT_XML);                    if (payload != null && command.getHttpMethod().equalsIgnoreCase(ServiceCommand.TYPE_POST)) {                        connection.setMethod(HttpConnection.Method.POST);                        connection.setPayload(payload.toString());                    }                    connection.execute();                    int code = connection.getResponseCode();                    Log.d(\"\", \"RESP \" + code);                    if (code == 200) {                        Util.postSuccess(command.getResponseListener(), connection.getResponseString());                    } else {                        Util.postError(command.getResponseListener(), ServiceCommandError.getError(code));                    }                } catch (IOException e) {                    e.printStackTrace();                    Util.postError(command.getResponseListener(), new ServiceCommandError(0, e.getMessage(), null));                }            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "addSubscription", "params": ["URLServiceSubscription<?>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void addSubscription(URLServiceSubscription<?> subscription) {        subscriptions.add(subscription);        if (httpServer != null)            httpServer.setSubscriptions(subscriptions);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "unsubscribe", "params": ["URLServiceSubscription<?>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void unsubscribe(URLServiceSubscription<?> subscription) {        subscriptions.remove(subscription);        if (httpServer != null)            httpServer.setSubscriptions(subscriptions);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "updateCapabilities", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void updateCapabilities() {        List<String> capabilities = new ArrayList<String>();        if (DiscoveryManager.getInstance().getPairingLevel() == PairingLevel.ON) {            Collections.addAll(capabilities, TextInputControl.Capabilities);            Collections.addAll(capabilities, MouseControl.Capabilities);            Collections.addAll(capabilities, KeyControl.Capabilities);            Collections.addAll(capabilities, MediaPlayer.Capabilities);            capabilities.add(PowerControl.Off);            capabilities.add(Play);             capabilities.add(Pause);             capabilities.add(Stop);             capabilities.add(Rewind);             capabilities.add(FastForward);             capabilities.add(Duration);             capabilities.add(Position);             capabilities.add(Seek);             capabilities.add(Application);             capabilities.add(Application_Close);             capabilities.add(Application_List);             capabilities.add(Browser);             capabilities.add(Hulu);             capabilities.add(Netflix);             capabilities.add(Netflix_Params);             capabilities.add(YouTube);             capabilities.add(YouTube_Params);             capabilities.add(AppStore);             capabilities.add(Channel_Up);             capabilities.add(Channel_Down);             capabilities.add(Channel_Get);             capabilities.add(Channel_List);             capabilities.add(Channel_Subscribe);             capabilities.add(Get_3D);             capabilities.add(Set_3D);             capabilities.add(Subscribe_3D);             capabilities.add(Picker_Launch);             capabilities.add(Picker_Close);             capabilities.add(Volume_Get);             capabilities.add(Volume_Up_Down);             capabilities.add(Mute_Get);             capabilities.add(Mute_Set);            if (serviceDescription.getModelNumber().equals(\"4.0\")) {                capabilities.add(AppStore_Params);             }        } else {            Collections.addAll(capabilities, MediaPlayer.Capabilities);            capabilities.add(Play);             capabilities.add(Pause);             capabilities.add(Stop);             capabilities.add(Rewind);             capabilities.add(FastForward);             capabilities.add(YouTube);             capabilities.add(YouTube_Params);         }        setCapabilities(capabilities);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getDLNAService", "params": [], "throws": null, "modifiers": ["public"], "return_type": "DLNAService", "snippet": "    public DLNAService getDLNAService() {        if (dlnaService == null) {            DiscoveryManager discoveryManager = DiscoveryManager.getInstance();            ConnectableDevice device = discoveryManager.getAllDevices().get(serviceDescription.getIpAddress());            if (device != null) {                DLNAService foundService = null;                for (DeviceService service: device.getServices()) {                    if (DLNAService.class.isAssignableFrom(service.getClass())) {                        foundService = (DLNAService)service;                        break;                    }                }                dlnaService = foundService;            }        }        return dlnaService;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "getDIALService", "params": [], "throws": null, "modifiers": ["public"], "return_type": "DIALService", "snippet": "    public DIALService getDIALService() {        if (dialService == null) {            DiscoveryManager discoveryManager = DiscoveryManager.getInstance();            ConnectableDevice device = discoveryManager.getAllDevices().get(serviceDescription.getIpAddress());            if (device != null) {                DIALService foundService = null;                for (DeviceService service: device.getServices()) {                    if (DIALService.class.isAssignableFrom(service.getClass())) {                        foundService = (DIALService)service;                        break;                    }                }                dialService = foundService;            }        }        return dialService;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVService", "extends": "DeviceService", "implements": ["Launcher", "MediaControl", "MediaPlayer", "TVControl", "VolumeControl", "ExternalInputControl", "MouseControl", "TextInputControl", "PowerControl", "KeyControl"], "modifiers": ["public"]}}, {"method_name": "close", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void close(ResponseListener<Object> responseListener) {        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVLaunchSessionR", "extends": "LaunchSession", "implements": null, "modifiers": []}}, {"method_name": "toJSONObject", "params": [], "throws": ["JSONException"], "modifiers": ["public"], "return_type": "JSONObject", "snippet": "        public JSONObject toJSONObject() throws JSONException {            JSONObject obj = super.toJSONObject();            obj.put(\"type\", \"netcasttv\");            obj.put(\"appName\", appName);            return obj;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVLaunchSessionR", "extends": "LaunchSession", "implements": null, "modifiers": []}}, {"method_name": "fromJSONObject", "params": ["JSONObject"], "throws": ["JSONException"], "modifiers": ["public"], "return_type": "void", "snippet": "        public void fromJSONObject(JSONObject obj) throws JSONException {            super.fromJSONObject(obj);            appName = obj.optString(\"appName\");        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/NetcastTVService.java", "stars": "4", "class": {"name": "NetcastTVLaunchSessionR", "extends": "LaunchSession", "implements": null, "modifiers": []}}, {"method_name": "init", "params": ["FMLCommonSetupEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void init(FMLCommonSetupEvent event) {\t\tFeature<NoFeatureConfig> feature = new Feature<NoFeatureConfig>(NoFeatureConfig::deserialize) {\t\t\t@Override\t\t\tpublic boolean place(IWorld iworld, ChunkGenerator generator, Random random, BlockPos pos, NoFeatureConfig config) {\t\t\t\tint ci = pos.getX();\t\t\t\tint ck = pos.getZ();\t\t\t\tDimensionType dimensionType = iworld.getDimension().getType();\t\t\t\tboolean dimensionCriteria = false;\t\t\t\tif (dimensionType == DimensionType.OVERWORLD)\t\t\t\t\tdimensionCriteria = true;\t\t\t\tif (!dimensionCriteria)\t\t\t\t\treturn false;\t\t\t\tif ((random.nextInt(1000000) + 1) <= 1000) {\t\t\t\t\tint count = random.nextInt(1) + 1;\t\t\t\t\tfor (int a = 0; a < count; a++) {\t\t\t\t\t\tint i = ci + random.nextInt(16) + 8;\t\t\t\t\t\tint k = ck + random.nextInt(16) + 8;\t\t\t\t\t\tint j = iworld.getHeight(Heightmap.Type.WORLD_SURFACE_WG, i, k);\t\t\t\t\t\tj -= 1;\t\t\t\t\t\tBlockState blockAt = iworld.getBlockState(new BlockPos(i, j, k));\t\t\t\t\t\tboolean blockCriteria = false;\t\t\t\t\t\tif (blockAt.getBlock() == Blocks.GRASS_BLOCK.getDefaultState().getBlock())\t\t\t\t\t\t\tblockCriteria = true;\t\t\t\t\t\tif (!blockCriteria)\t\t\t\t\t\t\tcontinue;\t\t\t\t\t\tTemplate template = ((ServerWorld) iworld.getWorld()).getSaveHandler().getStructureTemplateManager()\t\t\t\t\t\t\t\t.getTemplateDefaulted(new ResourceLocation(\"enhancedvanilla\", \"archer_tower\"));\t\t\t\t\t\tif (template == null)\t\t\t\t\t\t\treturn false;\t\t\t\t\t\tRotation rotation = Rotation.values()[random.nextInt(3)];\t\t\t\t\t\tMirror mirror = Mirror.values()[random.nextInt(2)];\t\t\t\t\t\tBlockPos spawnTo = new BlockPos(i, j + 0, k);\t\t\t\t\t\ttemplate.addBlocksToWorldChunk(iworld, spawnTo, new PlacementSettings().setRotation(rotation).setRandom(random)\t\t\t\t\t\t\t\t.setMirror(mirror).setChunk((ChunkPos) null).setIgnoreEntities(false));\t\t\t\t\t}\t\t\t\t}\t\t\t\treturn true;\t\t\t}\t\t};\t\tfor (Biome biome : ForgeRegistries.BIOMES.getValues()) {\t\t\tbiome.addFeature(GenerationStage.Decoration.SURFACE_STRUCTURES, feature.withConfiguration(IFeatureConfig.NO_FEATURE_CONFIG)\t\t\t\t\t.withPlacement(Placement.NOPE.configure(IPlacementConfig.NO_PLACEMENT_CONFIG)));\t\t}\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/world/structure/PillagerArcherTowerStructure.java", "stars": "2", "class": {"name": "PillagerArcherTowerStructure", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveToFull", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveToFull() {        mSystemUiVisibility = ((Activity) mContext).getWindow().getDecorView().getSystemUiVisibility();        CommonUtil.hideSupportActionBar(mContext, mVideoOptionBuilder.isHideActionBar(), mVideoOptionBuilder.isHideStatusBar());        if (mVideoOptionBuilder.isHideKey()) {            hideNavKey(mContext);        }        isFull = true;        ViewGroup viewGroup = (ViewGroup) mGsyVideoPlayer.getParent();        mNormalParams = mGsyVideoPlayer.getLayoutParams();        if (viewGroup != null) {            mParent = viewGroup;            viewGroup.removeView(mGsyVideoPlayer);        }        mGsyVideoPlayer.setIfCurrentIsFullscreen(true);        mGsyVideoPlayer.getFullscreenButton().setImageResource(mGsyVideoPlayer.getShrinkImageRes());        mGsyVideoPlayer.getBackButton().setVisibility(View.VISIBLE);        //\u8bbe\u7f6e\u65cb\u8f6c        mOrientationUtils = new OrientationUtils((Activity) mContext, mGsyVideoPlayer);        mOrientationUtils.setEnable(mVideoOptionBuilder.isRotateViewAuto());        mGsyVideoPlayer.getBackButton().setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                resolveMaterialToNormal(mGsyVideoPlayer);            }        });        if (mVideoOptionBuilder.isShowFullAnimation()) {            if (mFullViewContainer instanceof FrameLayout) {                //\u76ee\u524d\u53ea\u505a\u4e86frameLoayout\u7684\u5224\u65ad                resolveMaterialAnimation();            } else {                resolveFullAdd();            }        } else {            resolveFullAdd();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveFullAdd", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveFullAdd() {        if (mVideoOptionBuilder.isShowFullAnimation()) {            if (mFullViewContainer != null) {                mFullViewContainer.setBackgroundColor(Color.BLACK);            }        }        resolveChangeFirstLogic(0);        if (mFullViewContainer != null) {            mFullViewContainer.addView(mGsyVideoPlayer);        } else {            mWindowViewContainer.addView(mGsyVideoPlayer);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveMaterialAnimation", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveMaterialAnimation() {        mNormalItemRect = new int[2];        mNormalItemSize = new int[2];        saveLocationStatus(mContext, mVideoOptionBuilder.isHideActionBar(), mVideoOptionBuilder.isHideStatusBar());        FrameLayout.LayoutParams lpParent = new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);        FrameLayout frameLayout = new FrameLayout(mContext);        frameLayout.setBackgroundColor(Color.BLACK);        FrameLayout.LayoutParams lp = new FrameLayout.LayoutParams(mNormalItemSize[0], mNormalItemSize[1]);        lp.setMargins(mNormalItemRect[0], mNormalItemRect[1], 0, 0);        frameLayout.addView(mGsyVideoPlayer, lp);        if (mFullViewContainer != null) {            mFullViewContainer.addView(frameLayout, lpParent);        } else {            mWindowViewContainer.addView(frameLayout, lpParent);        }        mHandler.postDelayed(new Runnable() {            @Override            public void run() {                //\u5f00\u59cb\u52a8\u753b                if (mFullViewContainer != null) {                    TransitionManager.beginDelayedTransition(mFullViewContainer);                } else {                    TransitionManager.beginDelayedTransition(mWindowViewContainer);                }                resolveMaterialFullVideoShow(mGsyVideoPlayer);                resolveChangeFirstLogic(600);            }        }, 300);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveMaterialFullVideoShow", "params": ["GSYBaseVideoPlayer"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveMaterialFullVideoShow(GSYBaseVideoPlayer gsyVideoPlayer) {        FrameLayout.LayoutParams lp = (FrameLayout.LayoutParams) gsyVideoPlayer.getLayoutParams();        lp.setMargins(0, 0, 0, 0);        lp.height = ViewGroup.LayoutParams.MATCH_PARENT;        lp.width = ViewGroup.LayoutParams.MATCH_PARENT;        lp.gravity = Gravity.CENTER;        gsyVideoPlayer.setLayoutParams(lp);        gsyVideoPlayer.setIfCurrentIsFullscreen(true);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveToNormal", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveToNormal() {        int delay = mOrientationUtils.backToProtVideo();        if (!mVideoOptionBuilder.isShowFullAnimation()) {            delay = 0;        }        mHandler.postDelayed(new Runnable() {            @Override            public void run() {                isFull = false;                removeWindowContainer();                if (mFullViewContainer != null) {                    mFullViewContainer.removeAllViews();                }                if (mGsyVideoPlayer.getParent() != null) {                    ((ViewGroup) mGsyVideoPlayer.getParent()).removeView(mGsyVideoPlayer);                }                mOrientationUtils.setEnable(false);                mGsyVideoPlayer.setIfCurrentIsFullscreen(false);                if (mFullViewContainer != null) {                    mFullViewContainer.setBackgroundColor(Color.TRANSPARENT);                }                mParent.addView(mGsyVideoPlayer, mNormalParams);                mGsyVideoPlayer.getFullscreenButton().setImageResource(mGsyVideoPlayer.getEnlargeImageRes());                mGsyVideoPlayer.getBackButton().setVisibility(View.GONE);                mGsyVideoPlayer.setIfCurrentIsFullscreen(false);                mGsyVideoPlayer.restartTimerTask();                if (mVideoOptionBuilder.getVideoAllCallBack() != null) {                    Debuger.printfLog(\"onQuitFullscreen\");                    mVideoOptionBuilder.getVideoAllCallBack().onQuitFullscreen(mVideoOptionBuilder.getUrl(), mVideoOptionBuilder.getVideoTitle(), mGsyVideoPlayer);                }                if (mVideoOptionBuilder.isHideKey()) {                    showNavKey(mContext, mSystemUiVisibility);                }                CommonUtil.showSupportActionBar(mContext, mVideoOptionBuilder.isHideActionBar(), mVideoOptionBuilder.isHideStatusBar());            }        }, delay);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveMaterialToNormal", "params": ["GSYVideoPlayer"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveMaterialToNormal(final GSYVideoPlayer gsyVideoPlayer) {        if (mVideoOptionBuilder.isShowFullAnimation() && mFullViewContainer instanceof FrameLayout) {            int delay = mOrientationUtils.backToProtVideo();            mHandler.postDelayed(new Runnable() {                @Override                public void run() {                    TransitionManager.beginDelayedTransition(mFullViewContainer);                    FrameLayout.LayoutParams lp = (FrameLayout.LayoutParams) gsyVideoPlayer.getLayoutParams();                    lp.setMargins(mNormalItemRect[0], mNormalItemRect[1], 0, 0);                    lp.width = mNormalItemSize[0];                    lp.height = mNormalItemSize[1];                    //\u6ce8\u610f\u914d\u7f6e\u56de\u6765\uff0c\u4e0d\u7136\u52a8\u753b\u6548\u679c\u4f1a\u4e0d\u5bf9                    lp.gravity = Gravity.NO_GRAVITY;                    gsyVideoPlayer.setLayoutParams(lp);                    mHandler.postDelayed(new Runnable() {                        @Override                        public void run() {                            resolveToNormal();                        }                    }, 400);                }            }, delay);        } else {            resolveToNormal();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveChangeFirstLogic", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveChangeFirstLogic(int time) {        if (mVideoOptionBuilder.isLockLand()) {            if (time > 0) {                mHandler.postDelayed(new Runnable() {                    @Override                    public void run() {                        if (mOrientationUtils.getIsLand() != 1) {                            if (mFullViewContainer != null) {                                mFullViewContainer.setBackgroundColor(Color.BLACK);                            }                            mOrientationUtils.resolveByClick();                        }                    }                }, time);            } else {                if (mOrientationUtils.getIsLand() != 1) {                    if (mFullViewContainer != null) {                        mFullViewContainer.setBackgroundColor(Color.BLACK);                    }                    mOrientationUtils.resolveByClick();                }            }        }        mGsyVideoPlayer.setIfCurrentIsFullscreen(true);        mGsyVideoPlayer.restartTimerTask();        if (mVideoOptionBuilder.getVideoAllCallBack() != null) {            Debuger.printfLog(\"onEnterFullscreen\");            mVideoOptionBuilder.getVideoAllCallBack().onEnterFullscreen(mVideoOptionBuilder.getUrl(), mVideoOptionBuilder.getVideoTitle(), mGsyVideoPlayer);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "saveLocationStatus", "params": ["Context", "boolean", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void saveLocationStatus(Context context, boolean statusBar, boolean actionBar) {        mParent.getLocationOnScreen(mNormalItemRect);        int statusBarH = getStatusBarHeight(context);        int actionBerH = getActionBarHeight((Activity) context);        if (statusBar) {            mNormalItemRect[1] = mNormalItemRect[1] - statusBarH;        }        if (actionBar) {            mNormalItemRect[1] = mNormalItemRect[1] - actionBerH;        }        mNormalItemSize[0] = mParent.getWidth();        mNormalItemSize[1] = mParent.getHeight();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isPlayView", "params": ["int", "String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isPlayView(int position, String tag) {        return mPlayPosition == position && TAG.equals(tag);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isCurrentViewPlaying", "params": ["int", "String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isCurrentViewPlaying(int position, String tag) {        return isPlayView(position, tag);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeWindowContainer", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean removeWindowContainer() {        if (mWindowViewContainer != null && mWindowViewContainer.indexOfChild(mGsyVideoPlayer) != -1) {            mWindowViewContainer.removeView(mGsyVideoPlayer);            return true;        }        return false;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addVideoPlayer", "params": ["int", "View", "String", "ViewGroup", "View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addVideoPlayer(final int position, View imgView, String tag,                               ViewGroup container, View playBtn) {        container.removeAllViews();        if (isCurrentViewPlaying(position, tag)) {            if (!isFull) {                ViewGroup viewGroup = (ViewGroup) mGsyVideoPlayer.getParent();                if (viewGroup != null)                    viewGroup.removeAllViews();                container.addView(mGsyVideoPlayer);                playBtn.setVisibility(View.INVISIBLE);            }        } else {            playBtn.setVisibility(View.VISIBLE);            container.removeAllViews();   //\u589e\u52a0\u5c01\u9762            container.addView(imgView);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPlayPositionAndTag", "params": ["int", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPlayPositionAndTag(int playPosition, String tag) {        this.mPlayPosition = playPosition;        this.TAG = tag;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "startPlay", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void startPlay() {        if (isSmall()) {            smallVideoToNormal();        }        mGsyVideoPlayer.release();        if (mVideoOptionBuilder == null) {            throw new NullPointerException(\"mVideoOptionBuilder can't be null\");        }        mVideoOptionBuilder.build(mGsyVideoPlayer);        //\u589e\u52a0title        if (mGsyVideoPlayer.getTitleTextView() != null) {            mGsyVideoPlayer.getTitleTextView().setVisibility(View.GONE);        }        //\u8bbe\u7f6e\u8fd4\u56de\u952e        if (mGsyVideoPlayer.getBackButton() != null) {            mGsyVideoPlayer.getBackButton().setVisibility(View.GONE);        }        //\u8bbe\u7f6e\u5168\u5c4f\u6309\u952e\u529f\u80fd        if (mGsyVideoPlayer.getFullscreenButton() != null) {            mGsyVideoPlayer.getFullscreenButton().setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    doFullBtnLogic();                }            });        }        mGsyVideoPlayer.startPlayLogic();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "doFullBtnLogic", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void doFullBtnLogic() {        if (!isFull) {            resolveToFull();        } else {            resolveMaterialToNormal(mGsyVideoPlayer);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "backFromFull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean backFromFull() {        boolean isFull = false;        if (mFullViewContainer != null && mFullViewContainer.getChildCount() > 0) {            isFull = true;            resolveMaterialToNormal(mGsyVideoPlayer);        } else if (mWindowViewContainer != null && mWindowViewContainer.indexOfChild(mGsyVideoPlayer) != -1) {            isFull = true;            resolveMaterialToNormal(mGsyVideoPlayer);        }        return isFull;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "releaseVideoPlayer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void releaseVideoPlayer() {        removeWindowContainer();        ViewGroup viewGroup = (ViewGroup) mGsyVideoPlayer.getParent();        if (viewGroup != null)            viewGroup.removeAllViews();        mPlayPosition = -1;        TAG = \"NULL\";        if (mOrientationUtils != null)            mOrientationUtils.releaseListener();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "showSmallVideo", "params": ["Point", "boolean", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void showSmallVideo(Point size, final boolean actionBar, final boolean statusBar) {        if (mGsyVideoPlayer.getCurrentState() == GSYVideoPlayer.CURRENT_STATE_PLAYING) {            mGsyVideoPlayer.showSmallVideo(size, actionBar, statusBar);            isSmall = true;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "smallVideoToNormal", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void smallVideoToNormal() {        isSmall = false;        mGsyVideoPlayer.hideSmallVideo();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFullViewContainer", "params": ["ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFullViewContainer(ViewGroup fullViewContainer) {        this.mFullViewContainer = fullViewContainer;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isFull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isFull() {        return isFull;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setGsyVideoOptionBuilder", "params": ["GSYVideoHelperBuilder"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGsyVideoOptionBuilder(GSYVideoHelperBuilder mVideoOptionBuilder) {        this.mVideoOptionBuilder = mVideoOptionBuilder;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGsyVideoOptionBuilder", "params": [], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder getGsyVideoOptionBuilder() {        return mVideoOptionBuilder;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPlayPosition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getPlayPosition() {        return mPlayPosition;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPlayTAG", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPlayTAG() {        return TAG;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isSmall", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isSmall() {        return isSmall;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGsyVideoPlayer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "StandardGSYVideoPlayer", "snippet": "    public StandardGSYVideoPlayer getGsyVideoPlayer() {        return mGsyVideoPlayer;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isHideActionBar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isHideActionBar() {            return mHideActionBar;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setHideActionBar", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoHelperBuilder", "snippet": "        public GSYVideoHelperBuilder setHideActionBar(boolean hideActionBar) {            this.mHideActionBar = hideActionBar;            return this;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isHideStatusBar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isHideStatusBar() {            return mHideStatusBar;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setHideStatusBar", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoHelperBuilder", "snippet": "        public GSYVideoHelperBuilder setHideStatusBar(boolean hideStatusBar) {            this.mHideStatusBar = hideStatusBar;            return this;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getShrinkImageRes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getShrinkImageRes() {            return mShrinkImageRes;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getEnlargeImageRes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getEnlargeImageRes() {            return mEnlargeImageRes;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getPlayPosition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getPlayPosition() {            return mPlayPosition;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDialogProgressHighLightColor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getDialogProgressHighLightColor() {            return mDialogProgressHighLightColor;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDialogProgressNormalColor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getDialogProgressNormalColor() {            return mDialogProgressNormalColor;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDismissControlTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getDismissControlTime() {            return mDismissControlTime;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSeekOnStart", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "        public long getSeekOnStart() {            return mSeekOnStart;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSeekRatio", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "        public float getSeekRatio() {            return mSeekRatio;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSpeed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "        public float getSpeed() {            return mSpeed;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isHideKey", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isHideKey() {            return mHideKey;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isShowFullAnimation", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isShowFullAnimation() {            return mShowFullAnimation;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isNeedShowWifiTip", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isNeedShowWifiTip() {            return mNeedShowWifiTip;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isRotateViewAuto", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isRotateViewAuto() {            return mRotateViewAuto;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isLockLand", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isLockLand() {            return mLockLand;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isLooping", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isLooping() {            return mLooping;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isIsTouchWiget", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isIsTouchWiget() {            return mIsTouchWiget;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isIsTouchWigetFull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isIsTouchWigetFull() {            return mIsTouchWigetFull;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isShowPauseCover", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isShowPauseCover() {            return mShowPauseCover;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isRotateWithSystem", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isRotateWithSystem() {            return mRotateWithSystem;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isCacheWithPlay", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isCacheWithPlay() {            return mCacheWithPlay;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isNeedLockFull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isNeedLockFull() {            return mNeedLockFull;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isThumbPlay", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isThumbPlay() {            return mThumbPlay;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isSounchTouch", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isSounchTouch() {            return mSounchTouch;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isSetUpLazy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isSetUpLazy() {            return mSetUpLazy;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getPlayTag", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getPlayTag() {            return mPlayTag;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getUrl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getUrl() {            return mUrl;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getVideoTitle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getVideoTitle() {            return mVideoTitle;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getCachePath", "params": [], "throws": null, "modifiers": ["public"], "return_type": "File", "snippet": "        public File getCachePath() {            return mCachePath;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getMapHeadData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,String>", "snippet": "        public Map<String, String> getMapHeadData() {            return mMapHeadData;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getVideoAllCallBack", "params": [], "throws": null, "modifiers": ["public"], "return_type": "VideoAllCallBack", "snippet": "        public VideoAllCallBack getVideoAllCallBack() {            return mVideoAllCallBack;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getLockClickListener", "params": [], "throws": null, "modifiers": ["public"], "return_type": "LockClickListener", "snippet": "        public LockClickListener getLockClickListener() {            return mLockClickListener;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getThumbImageView", "params": [], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "        public View getThumbImageView() {            return mThumbImageView;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getBottomProgressDrawable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Drawable", "snippet": "        public Drawable getBottomProgressDrawable() {            return mBottomProgressDrawable;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getBottomShowProgressDrawable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Drawable", "snippet": "        public Drawable getBottomShowProgressDrawable() {            return mBottomShowProgressDrawable;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getBottomShowProgressThumbDrawable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Drawable", "snippet": "        public Drawable getBottomShowProgressThumbDrawable() {            return mBottomShowProgressThumbDrawable;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getVolumeProgressDrawable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Drawable", "snippet": "        public Drawable getVolumeProgressDrawable() {            return mVolumeProgressDrawable;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDialogProgressBarDrawable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Drawable", "snippet": "        public Drawable getDialogProgressBarDrawable() {            return mDialogProgressBarDrawable;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getEffectFilter", "params": [], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoGLView", "snippet": "        public GSYVideoGLView.ShaderInterface getEffectFilter() {            return mEffectFilter;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getGSYVideoProgressListener", "params": [], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoProgressListener", "snippet": "        public GSYVideoProgressListener getGSYVideoProgressListener() {            return mGSYVideoProgressListener;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/GSYVideoHelper.java", "stars": "2", "class": {"name": "GSYVideoHelperBuilder", "extends": "GSYVideoOptionBuilder", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "tokenStore", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TokenStore", "snippet": "    public TokenStore tokenStore() {        return new JwtTokenStore(jwtAccessTokenConverter());    }", "url": "https://raw.githubusercontent.com/bruinli28/stockmarket/master/cloud-auth2-service/src/main/java/com/iiht/stock/auth/security/JWTTokenStoreConfig.java", "stars": "2", "class": {"name": "JWTTokenStoreConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "tokenServices", "params": [], "throws": null, "modifiers": ["public"], "return_type": "DefaultTokenServices", "snippet": "    public DefaultTokenServices tokenServices() {        DefaultTokenServices defaultTokenServices = new DefaultTokenServices();        defaultTokenServices.setTokenStore(tokenStore());        defaultTokenServices.setSupportRefreshToken(true);        return defaultTokenServices;    }", "url": "https://raw.githubusercontent.com/bruinli28/stockmarket/master/cloud-auth2-service/src/main/java/com/iiht/stock/auth/security/JWTTokenStoreConfig.java", "stars": "2", "class": {"name": "JWTTokenStoreConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "jwtAccessTokenConverter", "params": [], "throws": null, "modifiers": ["public"], "return_type": "JwtAccessTokenConverter", "snippet": "    public JwtAccessTokenConverter jwtAccessTokenConverter() {        JwtAccessTokenConverter converter = new JwtAccessTokenConverter();        converter.setSigningKey(\"345asadf345\");        return converter;    }", "url": "https://raw.githubusercontent.com/bruinli28/stockmarket/master/cloud-auth2-service/src/main/java/com/iiht/stock/auth/security/JWTTokenStoreConfig.java", "stars": "2", "class": {"name": "JWTTokenStoreConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "jwtTokenEnhancer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TokenEnhancer", "snippet": "    public TokenEnhancer jwtTokenEnhancer() {        return new JWTTokenEnhancer();    }", "url": "https://raw.githubusercontent.com/bruinli28/stockmarket/master/cloud-auth2-service/src/main/java/com/iiht/stock/auth/security/JWTTokenStoreConfig.java", "stars": "2", "class": {"name": "JWTTokenStoreConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInfoMsgLevel", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "ValidationStatus", "snippet": "  public static ValidationStatus getInfoMsgLevel(final String msg) {    if (msg.startsWith(\"ERROR\")) {      return ValidationStatus.ERROR;    }    if (msg.startsWith(\"WARN\")) {      return ValidationStatus.WARN;    }    return ValidationStatus.PASS;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/validator/ValidationReport.java", "stars": "18", "class": {"name": "ValidationReport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInfoMsg", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String getInfoMsg(final String msg) {    if (msg.startsWith(\"ERROR\")) {      return msg.replaceFirst(\"ERROR\", \"\");    }    if (msg.startsWith(\"WARN\")) {      return msg.replaceFirst(\"WARN\", \"\");    }    return msg;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/validator/ValidationReport.java", "stars": "18", "class": {"name": "ValidationReport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addWarnLevelInfoMsg", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void addWarnLevelInfoMsg(final String msg) {    if (msg != null) {      this._infoMsgs.add(\"WARN\" + msg);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/validator/ValidationReport.java", "stars": "18", "class": {"name": "ValidationReport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addErrorLevelInfoMsg", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void addErrorLevelInfoMsg(final String msg) {    if (msg != null) {      this._infoMsgs.add(\"ERROR\" + msg);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/validator/ValidationReport.java", "stars": "18", "class": {"name": "ValidationReport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addWarningMsgs", "params": ["Set<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void addWarningMsgs(final Set<String> msgs) {    if (msgs != null) {      this._warningMsgs.addAll(msgs);      if (!msgs.isEmpty() && this._errorMsgs.isEmpty()) {        this._status = ValidationStatus.WARN;      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/validator/ValidationReport.java", "stars": "18", "class": {"name": "ValidationReport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addErrorMsgs", "params": ["Set<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void addErrorMsgs(final Set<String> msgs) {    if (msgs != null) {      this._errorMsgs.addAll(msgs);      if (!msgs.isEmpty()) {        this._status = ValidationStatus.ERROR;      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/validator/ValidationReport.java", "stars": "18", "class": {"name": "ValidationReport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ValidationStatus", "snippet": "  public ValidationStatus getStatus() {    return this._status;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/validator/ValidationReport.java", "stars": "18", "class": {"name": "ValidationReport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInfoMsgs", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Set<String>", "snippet": "  public Set<String> getInfoMsgs() {    return this._infoMsgs;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/validator/ValidationReport.java", "stars": "18", "class": {"name": "ValidationReport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getWarningMsgs", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Set<String>", "snippet": "  public Set<String> getWarningMsgs() {    return this._warningMsgs;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/validator/ValidationReport.java", "stars": "18", "class": {"name": "ValidationReport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getErrorMsgs", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Set<String>", "snippet": "  public Set<String> getErrorMsgs() {    return this._errorMsgs;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/validator/ValidationReport.java", "stars": "18", "class": {"name": "ValidationReport", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "asciiUpper", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "    private static String asciiUpper(String text) {        char [] chars = text.toCharArray();        for (int i = 0; i < chars.length; i++) {            char c = chars[i];            chars[i] = (c >= 97 && c <= 122) ? (char) (c - 32) : c;        }        return new String(chars);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/ssdp/SSDPPacket.java", "stars": "4", "class": {"name": "SSDPPacket", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDatagramPacket", "params": [], "throws": null, "modifiers": ["public"], "return_type": "DatagramPacket", "snippet": "    public DatagramPacket getDatagramPacket() {        return datagramPacket;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/ssdp/SSDPPacket.java", "stars": "4", "class": {"name": "SSDPPacket", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,String>", "snippet": "    public Map<String, String> getData() {        return data;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/ssdp/SSDPPacket.java", "stars": "4", "class": {"name": "SSDPPacket", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getType() {        return type;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/ssdp/SSDPPacket.java", "stars": "4", "class": {"name": "SSDPPacket", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sendMail", "params": ["String", "String"], "throws": ["AddressException", "MessagingException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void sendMail(String email, String emailMsg)\t\t\tthrows AddressException, MessagingException {\t\t// 1.\u521b\u5efa\u4e00\u4e2a\u7a0b\u5e8f\u4e0e\u90ae\u4ef6\u670d\u52a1\u5668\u4f1a\u8bdd\u5bf9\u8c61 Session\t\tProperties props = new Properties();\t\t// \u8bbe\u7f6e\u90ae\u4ef6\u4f20\u8f93\u534f\u8bae\u4e3aSMTP\t\tprops.setProperty(\"mail.transport.protocol\", \"SMTP\");\t\t// \u8bbe\u7f6eSMTP\u670d\u52a1\u5668\u5730\u5740\t\tprops.setProperty(\"mail.host\", \"smtp.qq.com\");\t\t// \u8bbe\u7f6eSMTP\u670d\u52a1\u5668\u662f\u5426\u9700\u8981\u7528\u6237\u9a8c\u8bc1\uff0c\u9700\u8981\u9a8c\u8bc1\u8bbe\u7f6e\u4e3atrue\t\tprops.setProperty(\"mail.smtp.port\", \"465\");\t\tprops.setProperty(\"mail.smtp.auth\", \"true\");//\u5f00\u542f\u8ba4\u8bc1\t\tprops.setProperty(\"mail.debug\", \"true\");//\u542f\u7528\u8c03\u8bd5\t\tprops.setProperty(\"mail.smtp.timeout\", \"1000\");//\u8bbe\u7f6e\u94fe\u63a5\u8d85\u65f6\t\tprops.setProperty(\"mail.smtp.port\", \"465\");//\u8bbe\u7f6e\u7aef\u53e3\t\tprops.setProperty(\"mail.smtp.socketFactory.port\", \"465\");//\u8bbe\u7f6essl\u7aef\u53e3\t\tprops.setProperty(\"mail.smtp.socketFactory.fallback\", \"false\");\t\tprops.setProperty(\"mail.smtp.socketFactory.class\", \"javax.net.ssl.SSLSocketFactory\");\t\t// \u521b\u5efa\u9a8c\u8bc1\u5668\t\tAuthenticator auth = new Authenticator() {\t\t\tpublic PasswordAuthentication getPasswordAuthentication() {\t\t\t\treturn new PasswordAuthentication(\"373675032\", \"\");\t\t\t}\t\t};\t\tSession session = Session.getInstance(props, auth);\t\t// 2.\u521b\u5efa\u4e00\u4e2aMessage\uff0c\u5b83\u76f8\u5f53\u4e8e\u662f\u90ae\u4ef6\u5185\u5bb9\t\tMessage message = new MimeMessage(session);\t\tmessage.setFrom(new InternetAddress(\"373675032@qq.com\")); // \u8bbe\u7f6e\u53d1\u9001\u8005\t\tmessage.setRecipient(RecipientType.TO, new InternetAddress(email)); // \u8bbe\u7f6e\u53d1\u9001\u65b9\u5f0f\u4e0e\u63a5\u6536\u8005\t\tmessage.setSubject(\"MOLIHUB\u5b98\u65b9\");\t\tmessage.setContent(emailMsg, \"text/html;charset=utf-8\");\t\t// 3.\u521b\u5efa Transport\u7528\u4e8e\u5c06\u90ae\u4ef6\u53d1\u9001\t\tTransport.send(message);\t}", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/utils/MailUtils.java", "stars": "10", "class": {"name": "MailUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "press", "params": ["ComponentStatus"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void press(ComponentStatus status) {        keyboard.keyPressed(status.getKeyCode());    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/AxisKeyboardKeyProcessor.java", "stars": "4", "class": {"name": "AxisKeyboardKeyProcessor", "extends": "AxisKeyProcessor", "implements": null, "modifiers": ["public"]}}, {"method_name": "release", "params": ["ComponentStatus"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void release(ComponentStatus status) {        keyboard.keyReleased(status.getKeyCode());    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/AxisKeyboardKeyProcessor.java", "stars": "4", "class": {"name": "AxisKeyboardKeyProcessor", "extends": "AxisKeyProcessor", "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\treturn \"ExprFEATURE(\" + getValue().toString() + \":\" + getType() + \")\";\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprFEATURE.java", "stars": "3", "class": {"name": "ExprFEATURE", "extends": "ExprVALUE", "implements": null, "modifiers": ["public"]}}, {"method_name": "getTextView1", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TextView", "snippet": "\tpublic TextView getTextView1()\t{\t\treturn textView1;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Paginated%20ListView%20Demo/src/com/danielme/blog/android/paginatedlistview/Holder.java", "stars": "74", "class": {"name": "Holder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTextView1", "params": ["TextView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setTextView1(TextView textView)\t{\t\tthis.textView1 = textView;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Paginated%20ListView%20Demo/src/com/danielme/blog/android/paginatedlistview/Holder.java", "stars": "74", "class": {"name": "Holder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTextView2", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TextView", "snippet": "\tpublic TextView getTextView2()\t{\t\treturn textView2;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Paginated%20ListView%20Demo/src/com/danielme/blog/android/paginatedlistview/Holder.java", "stars": "74", "class": {"name": "Holder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTextView2", "params": ["TextView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setTextView2(TextView textView)\t{\t\tthis.textView2 = textView;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Paginated%20ListView%20Demo/src/com/danielme/blog/android/paginatedlistview/Holder.java", "stars": "74", "class": {"name": "Holder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sort", "params": ["IntArray", "IntArray", "XorShiftStarRandom"], "throws": null, "modifiers": ["public", "final", "static"], "return_type": "void", "snippet": "\tpublic static final void sort(IntArray array, IntArray string, XorShiftStarRandom random) {\t\tfinal long nElements = array.length();\t\tlong i, j;\t\tIntArray cache;\t\tcache = new IntArray(nElements,64,true);\t\tfor (i=0; i<nElements; i++) cache.setElementAt(i,string.load63(array.getElementAt(i)<<string.log2BitsPerInt));\t\tquicksort(array,0,nElements,0,0,string,cache,Constants.QUICKSORT_HEAPSORT_SCALE*Utils.log2(nElements),Constants.STOP_QUICKSORT_AT_SIZE,random);\t\tcache=null;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Suffixes.java", "stars": "2", "class": {"name": "Suffixes", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "quicksort", "params": ["IntArray", "long", "long", "long", "int", "IntArray", "IntArray", "int", "int", "XorShiftStarRandom"], "throws": null, "modifiers": ["public", "final", "static"], "return_type": "void", "snippet": "\tpublic static final void quicksort(IntArray array, long firstSuffix, long nSuffixes, long bitDepth, int recursionDepth, IntArray string, IntArray cache, int quicksortHeapsortDepth, int stopQuicksortAtSize, XorShiftStarRandom random) {\t\tboolean pivotSuffixOut;\t\tint r, rankSmaller, rankLarger;\t\tlong a, b, c, d, i, diff, pivotIndex, pivotSuffix, otherSuffix, size;\t\tlong tmp, pivot, delta, stringLengthInBits;\t\tlong stringLength = string.length();\t\twhile (nSuffixes>stopQuicksortAtSize) {\t\t\tif (recursionDepth==quicksortHeapsortDepth) {\t\t\t\theapSort(array,firstSuffix,nSuffixes,string,cache);\t\t\t\treturn;\t\t\t}\t\t\tpivotIndex=choosePivot(firstSuffix,nSuffixes,cache,random);\t\t\tarray.swap(firstSuffix,firstSuffix+pivotIndex);\t\t\ttmp=cache.getElementAt(firstSuffix);\t\t\tcache.setElementAt(firstSuffix,cache.getElementAt(firstSuffix+pivotIndex));\t\t\tcache.setElementAt(firstSuffix+pivotIndex,tmp);\t\t\tpivot=cache.getElementAt(firstSuffix);\t\t\tpivotSuffix=array.getElementAt(firstSuffix);\t\t\tstringLengthInBits=string.totalBits;\t\t\tpivotSuffixOut=(pivotSuffix<<string.log2BitsPerInt)+bitDepth+63>=stringLengthInBits;\t\t\t// Moving pointers\t\t\ta=b=1;\t\t\tc=d=nSuffixes-1;\t\t\twhile (true) {\t\t\t\t// Moving $b$\t\t\t\twhile (true) {\t\t\t\t\tif (b>c) break;\t\t\t\t\tdelta=cache.getElementAt(firstSuffix+b)-pivot;\t\t\t\t\tif (delta>0) break;\t\t\t\t\telse if (delta==0) {\t\t\t\t\t\totherSuffix=array.getElementAt(firstSuffix+b);\t\t\t\t\t\tif (pivotSuffixOut || (otherSuffix<<string.log2BitsPerInt)+bitDepth+63>=stringLengthInBits) {\t\t\t\t\t\t\tif (otherSuffix<pivotSuffix) break;\t\t\t\t\t\t}\t\t\t\t\t\telse {\t\t\t\t\t\t\tarray.swap(firstSuffix+a,firstSuffix+b);\t\t\t\t\t\t\tcache.setElementAt(firstSuffix+b,cache.getElementAt(firstSuffix+a));\t\t\t\t\t\t\ta++;\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t\tb++;\t\t\t\t}\t\t\t\t// Moving $c$\t\t\t\twhile (true) {\t\t\t\t\tif (b>c) break;\t\t\t\t\tdelta=cache.getElementAt(firstSuffix+c)-pivot;\t\t\t\t\tif (delta<0) break;\t\t\t\t\telse if (delta==0) {\t\t\t\t\t\totherSuffix=array.getElementAt(firstSuffix+c);\t\t\t\t\t\tif (pivotSuffixOut || (otherSuffix<<string.log2BitsPerInt)+bitDepth+63>=stringLengthInBits) {\t\t\t\t\t\t\tif (otherSuffix>pivotSuffix) break;\t\t\t\t\t\t}\t\t\t\t\t\telse {\t\t\t\t\t\t\tarray.swap(firstSuffix+c,firstSuffix+d);\t\t\t\t\t\t\tcache.setElementAt(firstSuffix+c,cache.getElementAt(firstSuffix+d));\t\t\t\t\t\t\td--;\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t\tc--;\t\t\t\t}\t\t\t\tif (b>c) break;\t\t\t\tarray.swap(firstSuffix+b,firstSuffix+c);\t\t\t\ttmp=cache.getElementAt(firstSuffix+b);\t\t\t\tcache.setElementAt(firstSuffix+b,cache.getElementAt(firstSuffix+c));\t\t\t\tcache.setElementAt(firstSuffix+c,tmp);\t\t\t\tb++; c--;\t\t\t}\t\t\t// Smaller-half trick: recurring on the smaller subtree first to limit the\t\t\t// size of the stack.\t\t\tif (b-a<d-c) { rankSmaller=0; rankLarger=1; }\t\t\telse { rankSmaller=1; rankLarger=0; }\t\t\tfor (r=0; r!=2; r++) {\t\t\t\tif (r==rankSmaller) {  // Smaller elements\t\t\t\t\tsize=b-a;\t\t\t\t\tif (size==1) {\t\t\t\t\t\tarray.swap(firstSuffix,firstSuffix+b-1);\t\t\t\t\t\tcache.setElementAt(firstSuffix,cache.getElementAt(firstSuffix+b-1));\t\t\t\t\t}\t\t\t\t\telse if (size>1) {\t\t\t\t\t\tdiff=a<size?a:size;\t\t\t\t\t\tarray.vecswap(firstSuffix,firstSuffix+b-diff,diff);\t\t\t\t\t\tfor (i=0; i<diff; i++) cache.setElementAt(firstSuffix+i,cache.getElementAt(firstSuffix+b-diff+i));\t\t\t\t\t\tif (size>stopQuicksortAtSize) {\t\t\t\t\t\t\tif (recursionDepth+1==quicksortHeapsortDepth) heapSort(array,firstSuffix,size,string,cache);\t\t\t\t\t\t\telse {\t\t\t\t\t\t\t\tquicksort(array,firstSuffix,size,bitDepth,recursionDepth+1,string,cache,quicksortHeapsortDepth,stopQuicksortAtSize,random);\t\t\t\t\t\t\t}\t\t\t\t\t\t}\t\t\t\t\t\telse insertionSort(array,firstSuffix,size,string,cache);\t\t\t\t\t}\t\t\t\t}\t\t\t\telse if (r==rankLarger) {  // Larger elements\t\t\t\t\tsize=d-c;\t\t\t\t\tif (size==1) {\t\t\t\t\t\tarray.swap(firstSuffix+c+1,firstSuffix+nSuffixes-1);\t\t\t\t\t\tcache.setElementAt(firstSuffix+nSuffixes-1,cache.getElementAt(firstSuffix+c+1));\t\t\t\t\t}\t\t\t\t\telse if (size>1) {\t\t\t\t\t\tdiff=size<nSuffixes-d-1?size:nSuffixes-d-1;\t\t\t\t\t\tarray.vecswap(firstSuffix+b,firstSuffix+nSuffixes-diff,diff);\t\t\t\t\t\tfor (i=0; i<diff; i++) cache.setElementAt(firstSuffix+nSuffixes-diff+i,cache.getElementAt(firstSuffix+b+i));\t\t\t\t\t\tif (size>stopQuicksortAtSize) {\t\t\t\t\t\t\tif (recursionDepth+1==quicksortHeapsortDepth) heapSort(array,firstSuffix+nSuffixes-size,size,string,cache);\t\t\t\t\t\t\telse {\t\t\t\t\t\t\t\tquicksort(array,firstSuffix+nSuffixes-size,size,bitDepth,recursionDepth+1,string,cache,quicksortHeapsortDepth,stopQuicksortAtSize,random);\t\t\t\t\t\t\t}\t\t\t\t\t\t}\t\t\t\t\t\telse insertionSort(array,firstSuffix+nSuffixes-size,size,string,cache);\t\t\t\t\t}\t\t\t\t}\t\t\t}\t\t\t// Equal elements: looping, to avoid one procedure call.\t\t\tsize=a+nSuffixes-d-1;\t\t\tif (size>1) {\t\t\t\tbitDepth+=63;\t\t\t\tfor (i=0; i<size; i++) cache.setElementAt(firstSuffix+b-a+i,string.load63((array.getElementAt(firstSuffix+b-a+i)<<string.log2BitsPerInt)+bitDepth));\t\t\t}\t\t\tfirstSuffix+=b-a;\t\t\tnSuffixes=size;\t\t\trecursionDepth++;\t\t}\t\tif (nSuffixes>1) insertionSort(array,firstSuffix,nSuffixes,string,cache);\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Suffixes.java", "stars": "2", "class": {"name": "Suffixes", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "choosePivot", "params": ["long", "long", "IntArray", "XorShiftStarRandom"], "throws": null, "modifiers": ["private", "static", "final"], "return_type": "long", "snippet": "\tprivate static final long choosePivot(long firstSuffix, long nSuffixes, IntArray cache, XorShiftStarRandom random) {\t\tif (nSuffixes<100) return random.nextLong(nSuffixes);\t\telse if (nSuffixes<1000) {\t\t\t// Median of 3 samples\t\t\treturn median(random.nextLong(nSuffixes),random.nextLong(nSuffixes),random.nextLong(nSuffixes),cache,firstSuffix);\t\t} \t\telse { \t\t\t// Pseudo-median of 9 samples \t\t\treturn median(median(random.nextLong(nSuffixes),random.nextLong(nSuffixes),random.nextLong(nSuffixes),cache,firstSuffix), \t\t\t\t\t\t  median(random.nextLong(nSuffixes),random.nextLong(nSuffixes),random.nextLong(nSuffixes),cache,firstSuffix), \t\t\t\t\t\t  median(random.nextLong(nSuffixes),random.nextLong(nSuffixes),random.nextLong(nSuffixes),cache,firstSuffix), \t\t\t\t\t\t  cache,firstSuffix); \t\t}\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Suffixes.java", "stars": "2", "class": {"name": "Suffixes", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "median", "params": ["long", "long", "long", "IntArray", "long"], "throws": null, "modifiers": ["private", "static", "final"], "return_type": "long", "snippet": "\tprivate static final long median(long a, long b, long c, IntArray cache, long start) {\t\tfinal long aKey=cache.getElementAt(start+a);\t\tfinal long bKey=cache.getElementAt(start+b);\t\tfinal long cKey=cache.getElementAt(start+c);\t\tif (aKey<bKey) {\t\t\tif (bKey<cKey) return b;\t\t\telse if (aKey<cKey) return c;\t\t\telse return a;\t\t}\t\telse {\t\t\tif (aKey<cKey) return a;\t\t\telse if (bKey<cKey) return c;\t\t\telse return b;\t  \t}\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Suffixes.java", "stars": "2", "class": {"name": "Suffixes", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "insertionSort", "params": ["IntArray", "long", "long", "IntArray", "IntArray"], "throws": null, "modifiers": ["public", "final", "static"], "return_type": "void", "snippet": "\tpublic static final void insertionSort(IntArray array, long firstSuffix, long nSuffixes, IntArray string, IntArray cache) {\t\tlong i, j=0, hole, toInsertSuffix, tmpSuffix, lcp, toInsertCache;\t\tfor (i=1; i<nSuffixes; i++) {\t\t\ttoInsertSuffix=array.getElementAt(firstSuffix+i);\t\t\ttoInsertCache=cache.getElementAt(firstSuffix+i);\t\t\thole=i;     \t\twhile (true) {     \t\t\tif (hole==0) break;     \t\t\tj=firstSuffix+hole-1;     \t\t\ttmpSuffix=array.getElementAt(j);     \t\t\tlcp=string.lcp63(toInsertSuffix,tmpSuffix,true,toInsertCache,cache.getElementAt(j));     \t\t\tif ((lcp&Utils.MSB_LONG_ONE)==0L) {\t\t\t\t\tarray.copyToRight(j);\t\t\t\t\tcache.setElementAt(j+1,cache.getElementAt(j));\t\t\t\t\thole--;\t\t\t\t}\t\t\t\telse break;       \t\t}       \t\tif (hole!=i) {\t\t\t\tarray.setElementAt(firstSuffix+hole,toInsertSuffix);\t\t\t\tcache.setElementAt(firstSuffix+hole,toInsertCache);\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Suffixes.java", "stars": "2", "class": {"name": "Suffixes", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "heapSort", "params": ["IntArray", "long", "long", "IntArray", "IntArray"], "throws": null, "modifiers": ["public", "final", "static"], "return_type": "void", "snippet": "\tpublic static final void heapSort(IntArray array, long firstSuffix, long nSuffixes, IntArray string, IntArray cache) {\t\tlong i, tmp;\t\tfor (i=firstSuffix+(nSuffixes>>1)-1; i>=firstSuffix; i--) heapify(array,firstSuffix,nSuffixes,i,string,cache);\t\tfor (i=nSuffixes-1; i>0; i--) {\t\t\tarray.swap(firstSuffix+i,firstSuffix);\t\t\ttmp=cache.getElementAt(firstSuffix+i);\t\t\tcache.setElementAt(firstSuffix+i,cache.getElementAt(firstSuffix));\t\t\tcache.setElementAt(firstSuffix,tmp);\t\t\tnSuffixes--;\t\t\theapify(array,firstSuffix,nSuffixes,0,string,cache);\t\t}\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Suffixes.java", "stars": "2", "class": {"name": "Suffixes", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "heapify", "params": ["IntArray", "long", "long", "long", "IntArray", "IntArray"], "throws": null, "modifiers": ["private", "static", "final"], "return_type": "void", "snippet": "\tprivate static final void heapify(IntArray array, long firstSuffix, long nSuffixes, long position, IntArray string, IntArray cache) {\t\tlong i, child, largest, firstSuffixPlusI, firstSuffixPlusChild, firstSuffixPlusLargest;\t\tlong parentSuffix, childSuffix, largestSuffix;\t\tlong parentCache, childCache, largestCache, tmp, lcp;\t\ti=position;\t\twhile ((i<<1)+1<nSuffixes) {\t\t\tfirstSuffixPlusI=firstSuffix+i;\t\t\tparentSuffix=array.getElementAt(firstSuffixPlusI);\t\t\tparentCache=cache.getElementAt(firstSuffixPlusI);\t\t\tchild=(i<<1)+1;\t\t\tfirstSuffixPlusChild=firstSuffix+child;\t\t\tchildSuffix=array.getElementAt(firstSuffixPlusChild);\t\t\tchildCache=cache.getElementAt(firstSuffixPlusChild);\t\t\tlcp=string.lcp63(parentSuffix,childSuffix,true,parentCache,childCache);\t\t\tlargest=(lcp&Utils.MSB_INT_ONE)==0L?child:i;\t\t\tfirstSuffixPlusLargest=firstSuffix+largest;\t\t\tchild++;\t\t\tif (child<nSuffixes) {\t\t\t\tlargestSuffix=array.getElementAt(firstSuffixPlusLargest);\t\t\t\tlargestCache=cache.getElementAt(firstSuffixPlusLargest);\t\t\t\tfirstSuffixPlusChild=firstSuffix+child;\t\t\t\tchildSuffix=array.getElementAt(firstSuffixPlusChild);\t\t\t\tchildCache=cache.getElementAt(firstSuffixPlusChild);\t\t\t\tlcp=string.lcp63(largestSuffix,childSuffix,true,largestCache,childCache);\t\t\t\tif ((lcp&Utils.MSB_LONG_ONE)==0L) {\t\t\t\t\tlargest=child;\t\t\t\t\tfirstSuffixPlusLargest=firstSuffix+largest;\t\t\t\t}\t\t\t}\t\t\tif (largest!=i) {\t\t\t\tarray.swap(firstSuffixPlusI,firstSuffixPlusLargest);\t\t\t\ttmp=cache.getElementAt(firstSuffixPlusI);\t\t\t\tcache.setElementAt(firstSuffixPlusI,cache.getElementAt(firstSuffixPlusLargest));\t\t\t\tcache.setElementAt(firstSuffixPlusLargest,tmp);\t\t\t\ti=largest;\t\t\t}\t\t\telse return;\t\t}\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Suffixes.java", "stars": "2", "class": {"name": "Suffixes", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "intervalOfSuffixes", "params": ["long", "long", "IntArray", "IntArray", "IntArray", "IntArray"], "throws": null, "modifiers": ["public", "final", "static"], "return_type": "void", "snippet": "\tpublic static final void intervalOfSuffixes(long low, long high, IntArray lcpLow, IntArray lcpHigh, IntArray string, IntArray out) {\t\tfinal int BITS_PER_INT = lcpLow==null?lcpHigh.bitsPerInt:lcpLow.bitsPerInt;\t\tfinal long SELECT_SIGN = Utils.MSB_LONG_ONE>>>(64-BITS_PER_INT);\t\tfinal long SELECT_LENGTH = 0xFFFFFFFFFFFFFFFFL>>>(64-BITS_PER_INT+1);\t\tfinal long stringLength, lcpLowLength, lcpHighLength;\t\tboolean smallerThanLow, smallerThanHigh;\t\tlong i, lcp, intervalFirst_low, intervalFirst_high, intervalLast_low, intervalLast_high, l_low, l_high;\t\tlong iPlusLLow, lowPlusLLow, iPlusLHigh, highPlusLHigh, iMinusIntervalFirstLow, iMinusIntervalFirstHigh;\t\tlong intervalSign_low, intervalSign_high, sign, signPrime;\t\tstringLength=string.length();\t\tlcpLowLength=lcpLow==null?-1:lcpLow.length();\t\tlcpHighLength=lcpHigh==null?-1:lcpHigh.length();\t\tout.clear();\t\tintervalFirst_low=-1; intervalLast_low=-1; intervalSign_low=0x0000000000000000L;\t\tintervalFirst_high=-1; intervalLast_high=-1; intervalSign_high=0x0000000000000000L;\t\tl_low=0; l_high=0;\t\tsign=0x0000000000000000L; signPrime=0x0000000000000000L;\t\tfor (i=0; i<stringLength; i++) {\t\t\tif (i==low||i==high) continue;\t\t\tif (low>=0) {\t\t\t\tif (i>=intervalLast_low) { intervalFirst_low=i; intervalLast_low=i; l_low=0; }\t\t\t\telse {\t\t\t\t\tiMinusIntervalFirstLow=i-intervalFirst_low;\t\t\t\t\tif (iMinusIntervalFirstLow<lcpLowLength) {\t\t\t\t\t\tl_low=lcpLow.getElementAt(iMinusIntervalFirstLow);\t\t\t\t\t\tsignPrime=l_low&SELECT_SIGN;\t\t\t\t\t\tl_low&=SELECT_LENGTH;\t\t\t\t\t}\t\t\t\t\telse {\t\t\t\t\t\tl_low=string.lcp(low,low+iMinusIntervalFirstLow,true);\t\t\t\t\t\tsignPrime=l_low&Utils.MSB_LONG_ONE;\t\t\t\t\t\tl_low&=Utils.MSB_LONG_ZERO;\t\t\t\t\t}\t\t\t\t}\t\t\t\tiPlusLLow=i+l_low;\t\t\t\tlowPlusLLow=low+l_low;\t\t\t\tif (iPlusLLow==intervalLast_low) {\t\t\t\t\tlcp=string.lcp(lowPlusLLow,intervalLast_low,true);\t\t\t\t\tsign=lcp&Utils.MSB_LONG_ONE;\t\t\t\t\tlcp&=Utils.MSB_LONG_ZERO;\t\t\t\t\tl_low+=lcp;\t\t\t\t\tintervalFirst_low=i; intervalLast_low+=lcp; intervalSign_low=sign;\t\t\t\t}\t\t\t\telse if (iPlusLLow>intervalLast_low) {\t\t\t\t\tl_low=intervalLast_low-i; sign=intervalSign_low;\t\t\t\t\tintervalFirst_low=i;  // $intervalLast_low$ and $intervalLast_sign$ not altered\t\t\t\t}\t\t\t\telse sign=signPrime;\t\t\t\tsmallerThanLow=sign!=0x0000000000000000L;\t\t\t\t// If $string[i..]$ is lexicographically smaller than $string[low..]$ we\t\t\t\t// can't quit the iteration here, because we need to update the temporary\t\t\t\t// variables related to $high$.\t\t\t}\t\t\telse smallerThanLow=false;\t\t\tif (high>=0) {\t\t\t\tif (i>=intervalLast_high) { intervalFirst_high=i; intervalLast_high=i; l_high=0; }\t\t\t\telse {\t\t\t\t\tiMinusIntervalFirstHigh=i-intervalFirst_high;\t\t\t\t\tif (iMinusIntervalFirstHigh<lcpHighLength) {\t\t\t\t\t\tl_high=lcpHigh.getElementAt(iMinusIntervalFirstHigh);\t\t\t\t\t\tsignPrime=l_high&SELECT_SIGN;\t\t\t\t\t\tl_high&=SELECT_LENGTH;\t\t\t\t\t}\t\t\t\t\telse {\t\t\t\t\t\tl_high=string.lcp(high,high+iMinusIntervalFirstHigh,true);\t\t\t\t\t\tsignPrime=l_high&Utils.MSB_LONG_ONE;\t\t\t\t\t\tl_high&=Utils.MSB_LONG_ZERO;\t\t\t\t\t}\t\t\t\t}\t\t\t\tiPlusLHigh=i+l_high;\t\t\t\thighPlusLHigh=high+l_high;\t\t\t\tif (iPlusLHigh==intervalLast_high) {\t\t\t\t\tlcp=string.lcp(highPlusLHigh,intervalLast_high,true);\t\t\t\t\tsign=lcp&Utils.MSB_LONG_ONE;\t\t\t\t\tlcp&=Utils.MSB_LONG_ZERO;\t\t\t\t\tl_high+=lcp;\t\t\t\t\tintervalFirst_high=i; intervalLast_high+=lcp; intervalSign_high=sign;\t\t\t\t}\t\t\t\telse if (iPlusLHigh>intervalLast_high) {\t\t\t\t\tl_high=intervalLast_high-i; sign=intervalSign_high;\t\t\t\t\tintervalFirst_high=i;  // $intervalLast_high$ and $intervalSign_high$ not altered\t\t\t\t}\t\t\t\telse sign=signPrime;\t\t\t\tsmallerThanHigh=sign!=0x0000000000000000L;\t\t\t}\t\t\telse smallerThanHigh=true;\t\t\tif (!smallerThanLow&&smallerThanHigh) out.push(i);\t\t}\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Suffixes.java", "stars": "2", "class": {"name": "Suffixes", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buildLCPArray", "params": ["long", "IntArray", "IntArray"], "throws": null, "modifiers": ["public", "final", "static"], "return_type": "void", "snippet": "\tpublic static final void buildLCPArray(long suffix, IntArray string, IntArray out) {\t\tfinal long SELECT_SIGN = Utils.MSB_LONG_ONE>>>(64-out.bitsPerInt);\t\tfinal long SELECT_LENGTH = 0xFFFFFFFFFFFFFFFFL>>>(64-out.bitsPerInt+1);\t\tlong i, l, lcp, sign, signPrime, selectSign, selectLength, intervalFirst, intervalLast, intervalSign, stringLengthMinusSuffix, distinguishingPrefix;\t\tstringLengthMinusSuffix=string.length()-suffix;\t\tif (Constants.DISTINGUISHING_PREFIX>stringLengthMinusSuffix) distinguishingPrefix=stringLengthMinusSuffix;\t\telse distinguishingPrefix=Constants.DISTINGUISHING_PREFIX;\t\tout.clear();\t\tout.push(stringLengthMinusSuffix);  // The first entry is never used\t\tintervalFirst=-1; intervalLast=-1; intervalSign=0x0000000000000000L;\t\tl=0;  sign=0x0000000000000000L; signPrime=0x0000000000000000L;  // Related to the current $i$\t\tfor (i=1; i<=distinguishingPrefix; i++) {\t\t\tif (i>=intervalLast) { intervalFirst=i; intervalLast=i; l=0; }\t\t\telse {\t\t\t\tl=out.getElementAt(i-intervalFirst);\t\t\t\tsignPrime=l&SELECT_SIGN;\t\t\t\tl&=SELECT_LENGTH;\t\t\t}\t\t\tif (i+l==intervalLast) {\t\t\t\tlcp=string.lcp(suffix+l,suffix+intervalLast,true);\t\t\t\tsign=lcp&Utils.MSB_LONG_ONE;\t\t\t\tlcp&=Utils.MSB_LONG_ZERO;\t\t\t\tl+=lcp;\t\t\t\tintervalFirst=i; intervalLast+=lcp; intervalSign=sign;\t\t\t}\t\t\telse if (i+l>intervalLast) {\t\t\t\tl=intervalLast-i; sign=intervalSign;\t\t\t\tintervalFirst=i;  // $intervalLast$ and $intervalSign$ not altered\t\t\t}\t\t\telse sign=signPrime;\t\t\tout.push(sign==0x0000000000000000L?l:l|SELECT_SIGN);\t\t}\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Suffixes.java", "stars": "2", "class": {"name": "Suffixes", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "assignSuffixToBlock", "params": ["long", "IntArray", "IntArray", "IntArray"], "throws": null, "modifiers": ["public", "final", "static"], "return_type": "int", "snippet": "\tpublic static final int assignSuffixToBlock(long suffix, IntArray splitters, IntArray binarySearchCache, IntArray string) {\t\tfinal int nSplitters;\t\tint mid, left, right;\t\tlong lcp, lcpPrime, midLeftLCP, midRightLCP, suffixLeftLCP, suffixRightLCP, splitter, sign, suffixLeftSign, suffixRightSign;\t\tnSplitters=(int)( splitters.length() );\t\t// First and last blocks\t\tsuffixLeftLCP=string.lcp(suffix,splitters.getElementAt(0),true);\t\tsuffixLeftSign=suffixLeftLCP&Utils.MSB_LONG_ONE;\t\tif (suffixLeftSign==0x0000000000000000L) return 0;\t\tsuffixLeftLCP&=Utils.MSB_LONG_ZERO;\t\tsuffixRightLCP=string.lcp(suffix,splitters.getElementAt(nSplitters-1),true);\t\tsuffixRightSign=suffixRightLCP&Utils.MSB_LONG_ONE;\t\tif (suffixRightSign!=0x0000000000000000L) return nSplitters;\t\tsuffixRightLCP&=Utils.MSB_LONG_ZERO;\t\t// Binary search on the other blocks\t\tleft=0;\t\tright=nSplitters-1;\t\twhile (right>left+1) {\t\t\tmid=(left+right)>>>1;\t\t\tmidLeftLCP=binarySearchCache.getElementAt((mid-1)<<1);\t\t\tmidRightLCP=binarySearchCache.getElementAt(((mid-1)<<1)+1);\t\t\tif (midLeftLCP>midRightLCP) {\t\t\t\tif (suffixLeftLCP>midLeftLCP) {\t\t\t\t\tright=mid;\t\t\t\t\tsuffixRightLCP=midLeftLCP;\t\t\t\t\tcontinue;\t\t\t\t}\t\t\t\telse if (suffixLeftLCP<midLeftLCP) {\t\t\t\t\tleft=mid;\t\t\t\t\tcontinue;\t\t\t\t}\t\t\t\telse lcp=midLeftLCP;\t\t\t}\t\t\telse {\t\t\t\tif (suffixRightLCP>midRightLCP) {\t\t\t\t\tleft=mid;\t\t\t\t\tsuffixLeftLCP=midRightLCP;\t\t\t\t\tcontinue;\t\t\t\t}\t\t\t\telse if (suffixRightLCP<midRightLCP) {\t\t\t\t\tright=mid;\t\t\t\t\tcontinue;\t\t\t\t}\t\t\t\telse lcp=midRightLCP;\t\t\t}\t\t\tsplitter=splitters.getElementAt(mid);\t\t\tlcpPrime=string.lcp(suffix+lcp,splitter+lcp,true);\t\t\tsign=lcpPrime&Utils.MSB_LONG_ONE;\t\t\tlcp=lcp+lcpPrime&Utils.MSB_LONG_ZERO;\t\t\tif (sign!=0x0000000000000000L) {\t\t\t\tleft=mid;\t\t\t\tsuffixLeftLCP=lcp;\t\t\t}\t\t\telse {\t\t\t\tright=mid;\t\t\t\tsuffixRightLCP=lcp;\t\t\t}\t\t}\t\treturn right;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Suffixes.java", "stars": "2", "class": {"name": "Suffixes", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buildBinarySearchCache", "params": ["IntArray", "IntArray"], "throws": null, "modifiers": ["public", "final", "static"], "return_type": "IntArray", "snippet": "\tpublic static final IntArray buildBinarySearchCache(IntArray splitters, IntArray string) {\t\tint log2stringLength, nSplitters;\t\tint left, right, mid;\t\tfinal long stringLength;\t\tlong midSuffix, lcp, leftRightLCP;\t\tIntArray out, stack;\t\tstringLength=string.length();\t\tlog2stringLength=Utils.log2(stringLength);\t\tnSplitters=(int)( splitters.length() );\t\tout = new IntArray((nSplitters-2)<<1,log2stringLength,true);\t\tstack = new IntArray((nSplitters-2)*3,log2stringLength);\t\tleft=0;\t\tright=nSplitters-1;\t\tstack.push(left);\t\tstack.push(right);\t\tstack.push(string.lcp(splitters.getElementAt(left),splitters.getElementAt(right),false));\t\twhile (stack.length()!=0) {\t\t\tleftRightLCP=stack.pop();\t\t\tright=(int)( stack.pop() );\t\t\tleft=(int)( stack.pop() );\t\t\tmid=(left+right)>>1;\t\t\tmidSuffix=splitters.getElementAt(mid);\t\t\tlcp=leftRightLCP+string.lcp(splitters.getElementAt(left)+leftRightLCP,midSuffix+leftRightLCP,false);\t\t\tout.setElementAt((mid-1)<<1,lcp);\t\t\tif (mid-left>1) { stack.push(left); stack.push(mid); stack.push(lcp); }\t\t\tlcp=leftRightLCP+string.lcp(splitters.getElementAt(right)+leftRightLCP,midSuffix+leftRightLCP,false);\t\t\tout.setElementAt(((mid-1)<<1)+1,lcp);\t\t\tif (right-mid>1) { stack.push(mid);\tstack.push(right); stack.push(lcp); }\t\t}\t\treturn out;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Suffixes.java", "stars": "2", "class": {"name": "Suffixes", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "blockwiseBWT", "params": ["IntArray", "int", "int", "int", "long", "IntArray", "HuffmanWaveletTree", "IntArray", "IntArray", "IntArray", "long"], "throws": null, "modifiers": ["public", "final", "static"], "return_type": "long", "snippet": "\tpublic static final long blockwiseBWT(IntArray string, int[] alphabet, int alphabetLength, int log2alphabetLength, long blockSize, IntArray bwt, HuffmanWaveletTree[] waveletTrees, IntArray blockStarts, IntArray blockBoundaries, IntArray[] localBlockCounts, long[] sharp) {\t\tfinal int log2stringLength, log2stringLengthPlusOne;\t\tint i, j, nSplitters, nBits;\t\tlong splitter, currentBlock, cumulativeSize, blockStart, maxBlockSize;\t\tfinal long stringLength;\t\tIntArray binarySearchCache;\t\tIntArray splitters_byPosition;  // Initial set of splitters, sorted by position in the string.\t\tIntArray splitters_bySuffix;  // Initial set of splitters, sorted lexicographically.\t\tIntArray splitters;  // Final set of splitters, sorted lexicographically.\t\tIntArray[] lcpArrays;\t\tAtomicInteger intGenerator;  // Atomic generator of integers\t\tAtomicLong longGenerator;  // Atomic generator of longs\t\tAtomicInteger sharpBlock;\t\tAtomicLong sharpPosition, sharpOffset;\t\tCountDownLatch latch;  // Barrier\t\tAtomicLong[] blockSizes;  // Atomic counters used for measuring the size of blocks in parallel\t\tstringLength=string.length();\t\tlog2stringLength=Utils.log2(stringLength);\t\tlog2stringLengthPlusOne=Utils.log2(stringLength+1);\t\tXorShiftStarRandom random = new XorShiftStarRandom();\t\tsplitters_byPosition=buildSplitters(stringLength,log2stringLength,blockSize,random);\t\tnSplitters=(int)( splitters_byPosition.length() );\t\tsplitters_bySuffix=splitters_byPosition.clone();\t\tsort(splitters_bySuffix,string,random);\t\t// Measuring the size of the blocks induced by splitters\t\tbinarySearchCache=buildBinarySearchCache(splitters_bySuffix,string);\t\tblockSizes = new AtomicLong[nSplitters+1];\t\tfor (i=0; i<=nSplitters; i++) blockSizes[i] = new AtomicLong();\t\tlongGenerator = new AtomicLong();\t\tlatch = new CountDownLatch(Constants.N_THREADS);\t\tfor (i=0; i<Constants.N_THREADS; i++) new MeasureBWTBlockThread(blockSizes,longGenerator,latch,splitters_bySuffix,splitters_byPosition,binarySearchCache,string).start();\t\ttry { latch.await(); }\t\tcatch(InterruptedException e) {\t\t\te.printStackTrace();\t\t\tSystem.exit(1);\t\t}\t\tsplitters_byPosition.deallocate(); splitters_byPosition=null;\t\tbinarySearchCache.deallocate(); binarySearchCache=null; longGenerator=null;\t\tblockSizes[0].incrementAndGet();  // Adding suffix $#$, which is not counted by $MeasureBWTBlockThread$\t\t// Merging adjacent blocks greedily and sequentially. Existing blocks larger than\t\t// $blockSize$ are not refined. At the end of this process, the first block\t\t// has the form $[..y]$, the last block has the form $(x..$, and all\t\t// the other blocks have the form $(x..y]$, where $x$ and $y$ are splitters.\t\tsplitters = new IntArray(nSplitters,log2stringLength);\t\tif (blockStarts==null) blockStarts = new IntArray(nSplitters+1,log2stringLengthPlusOne,false);\t\telse blockStarts.clear();\t\ti=1; cumulativeSize=blockSizes[0].get()+1; blockStart=0; maxBlockSize=0;\t\twhile (i<=nSplitters) {\t\t\tcurrentBlock=blockSizes[i].get();\t\t\tif (cumulativeSize+currentBlock+(i<nSplitters?1:0)>blockSize) {\t\t\t\tsplitters.push(splitters_bySuffix.getElementAt(i-1));\t\t\t\tblockStarts.push(blockStart);\t\t\t\tblockStart+=cumulativeSize;\t\t\t\tif (cumulativeSize>maxBlockSize) maxBlockSize=cumulativeSize;\t\t\t\tcumulativeSize=currentBlock+(i<nSplitters?1:0);\t\t\t}\t\t\telse cumulativeSize+=currentBlock+(i<nSplitters?1:0);\t\t\ti++;\t\t}\t\tif (blockStart<=stringLength) {  // Closing last block\t\t\tblockStarts.push(blockStart);\t\t\tif (cumulativeSize>maxBlockSize) maxBlockSize=cumulativeSize;\t\t}\t\tnSplitters=(int)( splitters.length() );\t\tblockSizes=null;\t\tsplitters_bySuffix.deallocate(); splitters_bySuffix=null;\t\tif (bwt==null) {\t\t\tfor (i=0; i<=nSplitters; i++) {\t\t\t\tblockBoundaries.setElementFromRightAt(blockStarts.getElementAt(i),1);  // $Rank9$, used on $blockBoundaries$, stores bits from right to left.\t\t\t}\t\t}\t\t// Building the BWT block by block\t\tlcpArrays = new IntArray[nSplitters];\t\tnBits=log2stringLength<<1;  // The left-shift is necessary to guarantee that there is at least one bit for the sign in each LCP array\t\tfor (i=0; i<nSplitters; i++) {\t\t\tsplitter=splitters.getElementAt(i);\t\t\tlcpArrays[i] = new IntArray(Constants.DISTINGUISHING_PREFIX+1,nBits);\t\t\tbuildLCPArray(splitter,string,lcpArrays[i]);\t\t}\t\tintGenerator = new AtomicInteger();\t\tlatch = new CountDownLatch(nSplitters+1);\t\tsharpPosition = new AtomicLong();\t\tsharpBlock=null;\t\tsharpOffset=null;\t\tif (bwt!=null) {\t\t\tfor (i=0; i<Constants.N_THREADS; i++) new SortBWTBlockThread(intGenerator,sharpPosition,splitters,lcpArrays,string,bwt,blockStarts,latch,maxBlockSize,log2alphabetLength).start();\t\t}\t\telse {\t\t\tsharpBlock = new AtomicInteger();\t\t\tsharpOffset = new AtomicLong();\t\t\tfor (i=0; i<Constants.N_THREADS; i++) new WaveletBWTBlockThread(intGenerator,sharpPosition,sharpBlock,sharpOffset,splitters,lcpArrays,string,blockStarts,waveletTrees,localBlockCounts,latch,maxBlockSize,alphabet,alphabetLength,log2alphabetLength).start();\t\t}\t\ttry { latch.await(); }\t\tcatch(InterruptedException e) {\t\t\te.printStackTrace();\t\t\tSystem.exit(1);\t\t}\t\tfor (i=0; i<nSplitters; i++) {\t\t\tlcpArrays[i].deallocate();\t\t\tlcpArrays[i]=null;\t\t}\t\tlcpArrays=null;\t\tsplitters.deallocate(); splitters=null;\t\tintGenerator=null; latch=null;\t\tif (bwt==null) {\t\t\tsharp[0]=sharpPosition.get();\t\t\tsharp[1]=sharpBlock.get();\t\t\tsharp[2]=sharpOffset.get();\t\t}\t\treturn sharpPosition.get();\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Suffixes.java", "stars": "2", "class": {"name": "Suffixes", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buildSplitters", "params": ["long", "int", "long", "XorShiftStarRandom"], "throws": null, "modifiers": ["private", "static"], "return_type": "IntArray", "snippet": "\tprivate static IntArray buildSplitters(long stringLength, int log2stringLength, long blockSize, XorShiftStarRandom random) {\t\tint i, nSplitters;\t\tlong ns, splitter, firstSplitter, secondSplitter, lastSplitter;\t\tIntArray splitters, distinctSplitters;\t\tns=Utils.divideAndRoundUp(stringLength,blockSize)-1;\t\tif (ns<3) nSplitters=3;\t\telse if (ns>Integer.MAX_VALUE) nSplitters=Integer.MAX_VALUE;\t\telse nSplitters=(int)ns;\t\tsplitters = new IntArray(nSplitters,log2stringLength);\t\tfor (i=0; i<nSplitters; i++) splitters.push(random.nextLong(stringLength));\t\tsplitters.heapSort(0,nSplitters);\t\t// Removing duplicates\t\tdistinctSplitters = new IntArray(nSplitters,log2stringLength);\t\tlastSplitter=splitters.getElementAt(0);\t\tdistinctSplitters.push(lastSplitter);\t\tfor (i=1; i<nSplitters; i++) {\t\t\tsplitter=splitters.getElementAt(i);\t\t\tif (splitter!=lastSplitter) {\t\t\t\tdistinctSplitters.push(splitter);\t\t\t\tlastSplitter=splitter;\t\t\t}\t\t}\t\tsplitters.clear();\t\t// Enforcing at least 3 splitters after duplicate removal\t\tif (distinctSplitters.length()==1) {\t\t\tsplitter=distinctSplitters.getElementAt(0);\t\t\tif (splitter>0 && splitter<stringLength-1) {\t\t\t\tsplitters.push(random.nextLong(splitter));\t\t\t\tsplitters.push(splitter);\t\t\t\tsplitters.push(splitter+1+random.nextLong(stringLength-splitter-1));\t\t\t}\t\t\telse if (splitter==stringLength-1) {\t\t\t\tfirstSplitter=random.nextLong(splitter);\t\t\t\tdo { secondSplitter=random.nextLong(splitter); }\t\t\t\twhile (secondSplitter==firstSplitter);\t\t\t\tif (firstSplitter<secondSplitter) {\t\t\t\t\tsplitters.push(firstSplitter);\t\t\t\t\tsplitters.push(secondSplitter);\t\t\t\t}\t\t\t\telse {\t\t\t\t\tsplitters.push(secondSplitter);\t\t\t\t\tsplitters.push(firstSplitter);\t\t\t\t}\t\t\t\tsplitters.push(splitter);\t\t\t}\t\t\telse {\t\t\t\tsplitters.push(splitter);\t\t\t\tfirstSplitter=1+random.nextLong(stringLength-1);\t\t\t\tdo { secondSplitter=1+random.nextLong(stringLength-1); }\t\t\t\twhile (secondSplitter==firstSplitter);\t\t\t\tif (firstSplitter<secondSplitter) {\t\t\t\t\tsplitters.push(firstSplitter);\t\t\t\t\tsplitters.push(secondSplitter);\t\t\t\t}\t\t\t\telse {\t\t\t\t\tsplitters.push(secondSplitter);\t\t\t\t\tsplitters.push(firstSplitter);\t\t\t\t}\t\t\t}\t\t\tdistinctSplitters=splitters;\t\t}\t\telse if (distinctSplitters.length()==2) {\t\t\tfirstSplitter=distinctSplitters.getElementAt(0);\t\t\tsecondSplitter=distinctSplitters.getElementAt(1);\t\t\tif (firstSplitter>0) {\t\t\t\tsplitters.push(random.nextLong(firstSplitter));\t\t\t\tsplitters.push(firstSplitter);\t\t\t\tsplitters.push(secondSplitter);\t\t\t}\t\t\telse if (secondSplitter>firstSplitter+1) {\t\t\t\tsplitters.push(firstSplitter);\t\t\t\tsplitters.push(firstSplitter+1+random.nextLong(secondSplitter-firstSplitter-1));\t\t\t\tsplitters.push(secondSplitter);\t\t\t}\t\t\telse {\t\t\t\tsplitters.push(firstSplitter);\t\t\t\tsplitters.push(secondSplitter);\t\t\t\tsplitters.push(secondSplitter+1+random.nextLong(stringLength-secondSplitter-1));\t\t\t}\t\t\tdistinctSplitters=splitters;\t\t}\t\treturn distinctSplitters;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Suffixes.java", "stars": "2", "class": {"name": "Suffixes", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "blockwiseBWT_getBlockSize", "params": ["long", "int", "int"], "throws": null, "modifiers": ["public", "final", "static"], "return_type": "long", "snippet": "\tpublic static final long blockwiseBWT_getBlockSize(long stringLength, int log2stringLength, int log2alphabetLength) {\t\t/*\t\tavailableMemory = 2*(stringLength/blockSize)*log2stringLength +  // $binarySearchCache$\t\t\t\t\t        (stringLength/blockSize)*log2stringLength +  // $splitters_byPosition$\t\t\t\t\t        (stringLength/blockSize)*log2stringLength +  // $splitters_bySuffix$\t\t\t\t\t        (stringLength/blockSize)*log2stringLength +  // $splitters$\t\t\t\t\t        (stringLength/blockSize)*log2stringLength +  // $blockStarts$\t\t\t\t\t        (stringLength/blockSize)*(DISTINGUISHING_PREFIX+1)*log2stringLength +  // $lcpArrays$\t\t\t\t\t        (stringLength/blockSize)*32 +  // $blockSizes$\t\t\t\t\t\t    nThreads*blockSize*log2stringLength +  // $suffixArrayBlock$\t\t\t\t\t\t    nThreads*blockSize*log2alphabetLength;  // $bwtBlock$\t\t*/\t\tlong availableMemory = Constants.MAX_MEMORY<<3;\t\tlong c = 2*stringLength*log2stringLength +\t\t\t \t 4*stringLength*log2stringLength +\t\t\t\t stringLength*(Constants.DISTINGUISHING_PREFIX+1)*log2stringLength +\t\t\t\t stringLength*32;\t\tint a = Constants.N_THREADS*(log2stringLength+log2alphabetLength);\t\tdouble delta = availableMemory*availableMemory-4*a*c;\t\tlong out = (long)((availableMemory+Math.sqrt(delta))/(2*a));\t\treturn out>2?out:2;  // Putting at least two suffixes in a block\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Suffixes.java", "stars": "2", "class": {"name": "Suffixes", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void run() {\t\t\tint nSplitters;\t\t\tlong suffix, stringLength;\t\t\tstringLength=string.length();\t\t\tnSplitters=(int)( splitters_bySuffix.length() );\t\t\twhile (true) {\t\t\t\tsuffix=suffixGenerator.getAndIncrement();\t\t\t\tif (suffix>=stringLength) {\t\t\t\t\tlatch.countDown();\t\t\t\t\treturn;\t\t\t\t}\t\t\t\tif (splitters_byPosition.binarySearch(suffix,0,nSplitters-1)<0) blockSizes[assignSuffixToBlock(suffix,splitters_bySuffix,binarySearchCache,string)].incrementAndGet();\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Suffixes.java", "stars": "2", "class": {"name": "MeasureBWTBlockThread", "extends": "Thread", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void run() {\t\t\tint i, rightSplitter, pointerOffset;\t\t\tfinal int nSplitters = (int)( splitters.length() );\t\t\tlong rightSplitterSuffix=-1, blockLength, blockStart, pointer, suffix;\t\t\tIntArray suffixArrayBlock = new IntArray(maxBlockSize,log2stringLength);\t\t\tIntArray bwtBlock = new IntArray(maxBlockSize+(64>>Utils.log2(log2alphabetLength)),log2alphabetLength);  // Block size is larger than $maxBlockSize$ to allow for global shifts\t\t\tXorShiftStarRandom random = new XorShiftStarRandom();\t\t\twhile (true) {\t\t\t\trightSplitter=splitterGenerator.getAndIncrement();\t\t\t\tif (rightSplitter>nSplitters) break;\t\t\t\t// Building suffix array block\t\t\t\tif (rightSplitter!=nSplitters) rightSplitterSuffix=splitters.getElementAt(rightSplitter);\t\t\t\tif (rightSplitter==0) intervalOfSuffixes(-1,rightSplitterSuffix,null,lcpArrays[rightSplitter],string,suffixArrayBlock);\t\t\t\telse if (rightSplitter==nSplitters) intervalOfSuffixes(splitters.getElementAt(rightSplitter-1),-1,lcpArrays[rightSplitter-1],null,string,suffixArrayBlock);\t\t\t\telse intervalOfSuffixes(splitters.getElementAt(rightSplitter-1),rightSplitterSuffix,lcpArrays[rightSplitter-1],lcpArrays[rightSplitter],string,suffixArrayBlock);\t\t\t\tblockLength=suffixArrayBlock.length();\t\t\t\tsort(suffixArrayBlock,string,random);\t\t\t\t// Building local BWT block\t\t\t\tblockStart=blockStarts.getElementAt(rightSplitter);\t\t\t\tif (rightSplitter==0) {  // Making room for suffix $#$\t\t\t\t\tbwtBlock.push(string.getElementAt(stringLength-1));\t\t\t\t\tpointer=1;\t\t\t\t}\t\t\t\telse {\t\t\t\t\tsynchronized(bwt) {\t\t\t\t\t\tbwt.setPointer(blockStart);\t\t\t\t\t\tpointerOffset=bwt.pointerOffset;\t\t\t\t\t}\t\t\t\t\tbwtBlock.clear(pointerOffset);\t\t\t\t\tpointer=blockStart;\t\t\t\t}\t\t\t\tfor (i=0; i<blockLength; i++) {\t\t\t\t\tsuffix=suffixArrayBlock.getElementAt(i);\t\t\t\t\tif (suffix!=0) bwtBlock.push(string.getElementAt(suffix-1));\t\t\t\t\telse {\t\t\t\t\t\tbwtBlock.push(0);\t\t\t\t\t\tsharpPosition.set(pointer);\t\t\t\t\t}\t\t\t\t\tpointer++;\t\t\t\t}\t\t\t\tif (rightSplitter!=nSplitters) {\t\t\t\t\tif (rightSplitterSuffix!=0) bwtBlock.push(string.getElementAt(rightSplitterSuffix-1));\t\t\t\t\telse {\t\t\t\t\t\tbwtBlock.push(0);\t\t\t\t\t\tsharpPosition.set(pointer);\t\t\t\t\t}\t\t\t\t}\t\t\t\t// Fast copy of local block to global BWT\t\t\t\tsynchronized(bwt) {\t\t\t\t\tbwt.setPointer(blockStart);\t\t\t\t\tbwt.pasteAtPointer(bwtBlock);\t\t\t\t}\t\t\t\tlatch.countDown();\t\t\t}\t\t\tsuffixArrayBlock.deallocate(); suffixArrayBlock=null;\t\t\tbwtBlock.deallocate(); bwtBlock=null;\t\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Suffixes.java", "stars": "2", "class": {"name": "SortBWTBlockThread", "extends": "Thread", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void run() {\t\t\tint i, j, rightSplitter, effectiveAlphabetLength;\t\t\tlong il, c, rightSplitterSuffix=-1, blockLength, bwtBlockLength, pointer, suffix, count;\t\t\tfinal int nSplitters = (int)( splitters.length() );\t\t\tint[] effectiveAlphabet;\t\t\tlong[] counts = new long[alphabetLength];\t\t\tIntArray effectiveCounts;\t\t\tIntArray suffixArrayBlock = new IntArray(maxBlockSize,log2stringLength);\t\t\tIntArray bwtBlock = new IntArray(maxBlockSize+2,log2alphabetLength);  // In the worst case, a suffix array block can be augmented with two additional characters.\t\t\tXorShiftStarRandom random = new XorShiftStarRandom();\t\t\twhile (true) {\t\t\t\trightSplitter=splitterGenerator.getAndIncrement();\t\t\t\tif (rightSplitter>nSplitters) break;\t\t\t\t// Building the suffix array block\t\t\t\tif (rightSplitter!=nSplitters) rightSplitterSuffix=splitters.getElementAt(rightSplitter);\t\t\t\tif (rightSplitter==0) intervalOfSuffixes(-1,rightSplitterSuffix,null,lcpArrays[rightSplitter],string,suffixArrayBlock);\t\t\t\telse if (rightSplitter==nSplitters) intervalOfSuffixes(splitters.getElementAt(rightSplitter-1),-1,lcpArrays[rightSplitter-1],null,string,suffixArrayBlock);\t\t\t\telse intervalOfSuffixes(splitters.getElementAt(rightSplitter-1),rightSplitterSuffix,lcpArrays[rightSplitter-1],lcpArrays[rightSplitter],string,suffixArrayBlock);\t\t\t\tblockLength=suffixArrayBlock.length();\t\t\t\tif (blockLength>0) sort(suffixArrayBlock,string,random);\t\t\t\t// Building the local BWT block. Not building the BWT\t\t\t\t// block explicitly would produce cache misses both while counting the\t\t\t\t// symbols in the block and while pushing them in the wavelet tree.\t\t\t\tbwtBlock.clear();\t\t\t\tlocalBlockCounts[rightSplitter] = new IntArray(alphabetLength,Utils.bitsToEncode(blockLength+2),true);  // In the worst case, a suffix array block can be augmented with two additional characters.\t\t\t\tif (rightSplitter==0) {  // Making room for suffix $#$\t\t\t\t\tc=string.getElementAt(stringLength-1);\t\t\t\t\tbwtBlock.push(c);\t\t\t\t\tlocalBlockCounts[rightSplitter].incrementElementAt(c);\t\t\t\t\tpointer=1;\t\t\t\t\tbwtBlockLength=1;\t\t\t\t}\t\t\t\telse {\t\t\t\t\tpointer=blockStarts.getElementAt(rightSplitter);\t\t\t\t\tbwtBlockLength=0;\t\t\t\t}\t\t\t\tfor (il=0; il<blockLength; il++) {\t\t\t\t\tsuffix=suffixArrayBlock.getElementAt(il);\t\t\t\t\tif (suffix!=0) {\t\t\t\t\t\tc=string.getElementAt(suffix-1);\t\t\t\t\t\tbwtBlock.push(c);\t\t\t\t\t\tlocalBlockCounts[rightSplitter].incrementElementAt(c);\t\t\t\t\t\tbwtBlockLength++;\t\t\t\t\t}\t\t\t\t\telse {\t\t\t\t\t\tsharpPosition.set(pointer);\t\t\t\t\t\tsharpBlock.set(rightSplitter);\t\t\t\t\t\tsharpOffset.set(bwtBlockLength);\t\t\t\t\t}\t\t\t\t\tpointer++;\t\t\t\t}\t\t\t\tif (rightSplitter!=nSplitters) {\t\t\t\t\tif (rightSplitterSuffix!=0) {\t\t\t\t\t\tc=string.getElementAt(rightSplitterSuffix-1);\t\t\t\t\t\tbwtBlock.push(c);\t\t\t\t\t\tlocalBlockCounts[rightSplitter].incrementElementAt(c);\t\t\t\t\t\tbwtBlockLength++;\t\t\t\t\t}\t\t\t\t\telse {\t\t\t\t\t\tsharpPosition.set(pointer);\t\t\t\t\t\tsharpBlock.set(rightSplitter);\t\t\t\t\t\tsharpOffset.set(bwtBlockLength);\t\t\t\t\t}\t\t\t\t\tpointer++;\t\t\t\t}\t\t\t\tif (bwtBlockLength==0) {  // Skipping blocks with no BWT character\t\t\t\t\tlatch.countDown();\t\t\t\t\tcontinue;\t\t\t\t}\t\t\t\t// Building a wavelet tree on the effective alphabet of the BWT block\t\t\t\teffectiveAlphabetLength=0;\t\t\t\tfor (i=0; i<alphabetLength; i++) {\t\t\t\t\tif (localBlockCounts[rightSplitter].getElementAt(i)!=0) effectiveAlphabetLength++;\t\t\t\t}\t\t\t\teffectiveAlphabet = new int[effectiveAlphabetLength];\t\t\t\teffectiveCounts = new IntArray(effectiveAlphabetLength,Utils.bitsToEncode(bwtBlockLength),false);\t\t\t\tj=0;\t\t\t\tfor (i=0; i<alphabetLength; i++) {\t\t\t\t\tcount=localBlockCounts[rightSplitter].getElementAt(i);\t\t\t\t\tif (count!=0) {\t\t\t\t\t\teffectiveAlphabet[j++]=i;\t\t\t\t\t\teffectiveCounts.push(count);\t\t\t\t\t}\t\t\t\t}\t\t\t\twaveletTrees[rightSplitter] = new HuffmanWaveletTree(bwtBlock,effectiveAlphabet,effectiveCounts);\t\t\t\tlatch.countDown();\t\t\t}\t\t\tsuffixArrayBlock.deallocate(); suffixArrayBlock=null;\t\t\tbwtBlock.deallocate(); bwtBlock=null;\t\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/Suffixes.java", "stars": "2", "class": {"name": "WaveletBWTBlockThread", "extends": "Thread", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "onPacket", "params": ["PacketEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPacket(PacketEvent event) {        if (event.getType().equals(PacketEvent.Type.OUTGOING)) {            if (event.getPacket() instanceof CPacketUseEntity) {                final CPacketUseEntity packet = (CPacketUseEntity) event.getPacket();                if (packet.getAction() == CPacketUseEntity.Action.ATTACK) {                    if (canCrit(packet.getEntityFromWorld(mc.world))) {                        if (mode.equalsIgnoreCase(\"Packet\")) {                            mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY + 0.0625101D, mc.player.posZ, false));                            mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY, mc.player.posZ, false));                        }                    }                }            }        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/combat/Criticals.java", "stars": "12", "class": {"name": "Criticals", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "onJump", "params": ["JumpEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onJump(JumpEvent event) {        if (KillAura.target != null && (mode.equalsIgnoreCase(\"edit\")) && groundTicks != 0) {            event.setCancelled(true);            mc.player.connection.sendPacket(new CPacketPlayer.PositionRotation(                    mc.player.posX, mc.player.posY, mc.player.posZ, KillAura.yaw, KillAura.pitch, true));            mc.player.motionY = .42f;            groundTicks = 0;        } else {            event.setCancelled(false);        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/combat/Criticals.java", "stars": "12", "class": {"name": "Criticals", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "canCrit", "params": ["Entity"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean canCrit(Entity entity) {        return !Mercury.INSTANCE.getModuleManager().find(Speed.class).isEnabled() && !Mercury.INSTANCE.getModuleManager().find(Flight.class).isEnabled()                && mc.player.onGround && !mc.gameSettings.keyBindJump.isKeyDown() && !(entity instanceof EntityEnderCrystal);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/combat/Criticals.java", "stars": "12", "class": {"name": "Criticals", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": ["LifecycleException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void init() throws LifecycleException {        if (status != State.NEW) {            throw new LifecycleException();        }        try {            initInternal();            setStatus(State.INITIALIZED);        } catch (RuntimeException e) {            throw new LifecycleException(e);        }    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/AbstractLifecycle.java", "stars": "3", "class": {"name": "AbstractLifecycle", "extends": null, "implements": ["Lifecycle"], "modifiers": ["public", "abstract"]}}, {"method_name": "initInternal", "params": [], "throws": ["LifecycleException"], "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void initInternal() throws LifecycleException;    @Override    public void start() throws LifecycleException {        if (status == State.NEW) {            init();        }        if (status != State.INITIALIZED) {            throw new LifecycleException();        }        try {            startInternal();            setStatus(State.STARTED);        } catch (RuntimeException e) {            throw new LifecycleException(e);        }    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/AbstractLifecycle.java", "stars": "3", "class": {"name": "AbstractLifecycle", "extends": null, "implements": ["Lifecycle"], "modifiers": ["public", "abstract"]}}, {"method_name": "start", "params": [], "throws": ["LifecycleException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void start() throws LifecycleException {        if (status == State.NEW) {            init();        }        if (status != State.INITIALIZED) {            throw new LifecycleException();        }        try {            startInternal();            setStatus(State.STARTED);        } catch (RuntimeException e) {            throw new LifecycleException(e);        }    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/AbstractLifecycle.java", "stars": "3", "class": {"name": "AbstractLifecycle", "extends": null, "implements": ["Lifecycle"], "modifiers": ["public", "abstract"]}}, {"method_name": "startInternal", "params": [], "throws": ["LifecycleException"], "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void startInternal() throws LifecycleException;    @Override    public void stop() throws LifecycleException {        if (status != State.STARTED) {            throw new LifecycleException();        }        try {            stopInternal();            setStatus(State.STOPPED);        } catch (RuntimeException e) {            throw new LifecycleException(e);        }    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/AbstractLifecycle.java", "stars": "3", "class": {"name": "AbstractLifecycle", "extends": null, "implements": ["Lifecycle"], "modifiers": ["public", "abstract"]}}, {"method_name": "stop", "params": [], "throws": ["LifecycleException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void stop() throws LifecycleException {        if (status != State.STARTED) {            throw new LifecycleException();        }        try {            stopInternal();            setStatus(State.STOPPED);        } catch (RuntimeException e) {            throw new LifecycleException(e);        }    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/AbstractLifecycle.java", "stars": "3", "class": {"name": "AbstractLifecycle", "extends": null, "implements": ["Lifecycle"], "modifiers": ["public", "abstract"]}}, {"method_name": "stopInternal", "params": [], "throws": ["LifecycleException"], "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void stopInternal() throws LifecycleException;    public void setStatus(State status) {        this.status = status;    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/AbstractLifecycle.java", "stars": "3", "class": {"name": "AbstractLifecycle", "extends": null, "implements": ["Lifecycle"], "modifiers": ["public", "abstract"]}}, {"method_name": "setStatus", "params": ["State"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStatus(State status) {        this.status = status;    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/AbstractLifecycle.java", "stars": "3", "class": {"name": "AbstractLifecycle", "extends": null, "implements": ["Lifecycle"], "modifiers": ["public", "abstract"]}}, {"method_name": "setupMappedStatement", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void setupMappedStatement() {        this.mappedStatementBuilder = new MappedStatement.Builder(configuration, \"id\", new StaticSqlSource(configuration, \"sql\"), null);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/statement/BaseStatementHandlerTest.java", "stars": "15", "class": {"name": "BaseStatementHandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "resetMocks", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void resetMocks() {        reset(configuration, statement);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/statement/BaseStatementHandlerTest.java", "stars": "15", "class": {"name": "BaseStatementHandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "notSpecifyTimeout", "params": [], "throws": ["SQLException"], "modifiers": [], "return_type": "void", "snippet": "    void notSpecifyTimeout() throws SQLException {        BaseStatementHandler handler = new SimpleStatementHandler(null, mappedStatementBuilder.build(), null, null, null, null);        handler.setStatementTimeout(statement, null);        verifyZeroInteractions(statement); // not apply anything    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/statement/BaseStatementHandlerTest.java", "stars": "15", "class": {"name": "BaseStatementHandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "specifyMappedStatementTimeoutOnly", "params": [], "throws": ["SQLException"], "modifiers": [], "return_type": "void", "snippet": "    void specifyMappedStatementTimeoutOnly() throws SQLException {        mappedStatementBuilder.timeout(10);        BaseStatementHandler handler = new SimpleStatementHandler(null, mappedStatementBuilder.build(), null, null, null, null);        handler.setStatementTimeout(statement, null);        verify(statement).setQueryTimeout(10); // apply a mapped statement timeout    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/statement/BaseStatementHandlerTest.java", "stars": "15", "class": {"name": "BaseStatementHandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "specifyDefaultTimeoutOnly", "params": [], "throws": ["SQLException"], "modifiers": [], "return_type": "void", "snippet": "    void specifyDefaultTimeoutOnly() throws SQLException {        doReturn(20).when(configuration).getDefaultStatementTimeout();        BaseStatementHandler handler = new SimpleStatementHandler(null, mappedStatementBuilder.build(), null, null, null, null);        handler.setStatementTimeout(statement, null);        verify(statement).setQueryTimeout(20); // apply a default timeout    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/statement/BaseStatementHandlerTest.java", "stars": "15", "class": {"name": "BaseStatementHandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "specifyTransactionTimeout", "params": [], "throws": ["SQLException"], "modifiers": [], "return_type": "void", "snippet": "    void specifyTransactionTimeout() throws SQLException {        BaseStatementHandler handler = new SimpleStatementHandler(null, mappedStatementBuilder.build(), null, null, null, null);        handler.setStatementTimeout(statement, 5);        verify(statement).setQueryTimeout(5); // apply a transaction timeout    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/statement/BaseStatementHandlerTest.java", "stars": "15", "class": {"name": "BaseStatementHandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "specifyQueryTimeoutZeroAndTransactionTimeout", "params": [], "throws": ["SQLException"], "modifiers": [], "return_type": "void", "snippet": "    void specifyQueryTimeoutZeroAndTransactionTimeout() throws SQLException {        doReturn(0).when(configuration).getDefaultStatementTimeout();        BaseStatementHandler handler = new SimpleStatementHandler(null, mappedStatementBuilder.build(), null, null, null, null);        handler.setStatementTimeout(statement, 5);        verify(statement).setQueryTimeout(5); // apply a transaction timeout    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/statement/BaseStatementHandlerTest.java", "stars": "15", "class": {"name": "BaseStatementHandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "specifyMappedStatementTimeoutAndDefaultTimeout", "params": [], "throws": ["SQLException"], "modifiers": [], "return_type": "void", "snippet": "    void specifyMappedStatementTimeoutAndDefaultTimeout() throws SQLException {        doReturn(20).when(configuration).getDefaultStatementTimeout();        mappedStatementBuilder.timeout(30);        BaseStatementHandler handler = new SimpleStatementHandler(null, mappedStatementBuilder.build(), null, null, null, null);        handler.setStatementTimeout(statement, null);        verify(statement).setQueryTimeout(30); // apply a mapped statement timeout        verify(configuration, never()).getDefaultStatementTimeout();    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/statement/BaseStatementHandlerTest.java", "stars": "15", "class": {"name": "BaseStatementHandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "specifyQueryTimeoutAndTransactionTimeoutMinIsQueryTimeout", "params": [], "throws": ["SQLException"], "modifiers": [], "return_type": "void", "snippet": "    void specifyQueryTimeoutAndTransactionTimeoutMinIsQueryTimeout() throws SQLException {        doReturn(10).when(configuration).getDefaultStatementTimeout();        BaseStatementHandler handler = new SimpleStatementHandler(null, mappedStatementBuilder.build(), null, null, null, null);        handler.setStatementTimeout(statement, 20);        verify(statement).setQueryTimeout(10); // apply a query timeout    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/statement/BaseStatementHandlerTest.java", "stars": "15", "class": {"name": "BaseStatementHandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "specifyQueryTimeoutAndTransactionTimeoutMinIsTransactionTimeout", "params": [], "throws": ["SQLException"], "modifiers": [], "return_type": "void", "snippet": "    void specifyQueryTimeoutAndTransactionTimeoutMinIsTransactionTimeout() throws SQLException {        doReturn(10).when(configuration).getDefaultStatementTimeout();        BaseStatementHandler handler = new SimpleStatementHandler(null, mappedStatementBuilder.build(), null, null, null, null);        handler.setStatementTimeout(statement, 5);        verify(statement).setQueryTimeout(10);        verify(statement).setQueryTimeout(5); // apply a transaction timeout    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/statement/BaseStatementHandlerTest.java", "stars": "15", "class": {"name": "BaseStatementHandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "specifyQueryTimeoutAndTransactionTimeoutWithSameValue", "params": [], "throws": ["SQLException"], "modifiers": [], "return_type": "void", "snippet": "    void specifyQueryTimeoutAndTransactionTimeoutWithSameValue() throws SQLException {        doReturn(10).when(configuration).getDefaultStatementTimeout();        BaseStatementHandler handler = new SimpleStatementHandler(null, mappedStatementBuilder.build(), null, null, null, null);        handler.setStatementTimeout(statement, 10);        verify(statement).setQueryTimeout(10);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/statement/BaseStatementHandlerTest.java", "stars": "15", "class": {"name": "BaseStatementHandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "newInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "TestFragmentD", "snippet": "    public static TestFragmentD newInstance() {        return new TestFragmentD();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/TestFragmentD.java", "stars": "1", "class": {"name": "TestFragmentD", "extends": "MyFragment", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getLayoutId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getLayoutId() {        return R.layout.fragment_test_d;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/TestFragmentD.java", "stars": "1", "class": {"name": "TestFragmentD", "extends": "MyFragment", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "initView", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initView() {        setOnClickListener(R.id.btn_test_dialog, R.id.btn_test_hint, R.id.btn_test_login, R.id.btn_test_register, R.id.btn_test_forget,                R.id.btn_test_reset,R.id.btn_test_verify, R.id.btn_test_change, R.id.btn_test_personal, R.id.btn_test_setting,                R.id.btn_test_about, R.id.btn_test_guide, R.id.btn_test_browser, R.id.btn_test_image, R.id.btn_test_crash, R.id.btn_test_pay);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/TestFragmentD.java", "stars": "1", "class": {"name": "TestFragmentD", "extends": "MyFragment", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "initData", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initData() {    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/TestFragmentD.java", "stars": "1", "class": {"name": "TestFragmentD", "extends": "MyFragment", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClick(View v) {        switch (v.getId()) {            case R.id.btn_test_dialog:                startActivity(DialogActivity.class);                break;            case R.id.btn_test_hint:                startActivity(StatusActivity.class);                break;            case R.id.btn_test_login:                startActivity(LoginActivity.class);                break;            case R.id.btn_test_register:                startActivity(RegisterActivity.class);                break;            case R.id.btn_test_forget:                startActivity(PasswordForgetActivity.class);                break;            case R.id.btn_test_reset:                startActivity(PasswordResetActivity.class);                break;            case R.id.btn_test_verify:                startActivity(PhoneVerifyActivity.class);                break;            case R.id.btn_test_change:                startActivity(PhoneResetActivity.class);                break;            case R.id.btn_test_personal:                startActivity(PersonalDataActivity.class);                break;            case R.id.btn_test_setting:                startActivity(SettingActivity.class);                break;            case R.id.btn_test_about:                startActivity(AboutActivity.class);                break;            case R.id.btn_test_guide:                startActivity(GuideActivity.class);                break;            case R.id.btn_test_browser:                BrowserActivity.start(getAttachActivity(), \"https://github.com/getActivity\");                break;            case R.id.btn_test_image:                ArrayList<String> images = new ArrayList<>();                images.add(\"https://www.baidu.com/img/bd_logo.png\");                images.add(\"https://avatars1.githubusercontent.com/u/28616817?s=460&v=4\");                ImageActivity.start(getAttachActivity(), images, images.size() - 1);                break;            case R.id.btn_test_crash:                // \u5173\u95ed Bugly \u5f02\u5e38\u6355\u6349                CrashReport.closeBugly();                throw new IllegalStateException(\"are you ok?\");            case R.id.btn_test_pay:                new MessageDialog.Builder(getAttachActivity())                        .setTitle(\"\u6350\u8d60\")                        .setMessage(\"\u5982\u679c\u4f60\u89c9\u5f97\u8fd9\u4e2a\u5f00\u6e90\u9879\u76ee\u5f88\u68d2\uff0c\u5e0c\u671b\u5b83\u80fd\u66f4\u597d\u5730\u575a\u6301\u5f00\u53d1\u4e0b\u53bb\uff0c\u53ef\u5426\u613f\u610f\u82b1\u4e00\u70b9\u70b9\u94b1\uff08\u63a8\u8350 10.24 \u5143\uff09\u4f5c\u4e3a\u5bf9\u4e8e\u5f00\u53d1\u8005\u7684\u6fc0\u52b1\")                        .setConfirm(\"\u652f\u4ed8\u5b9d\")                        .setCancel(null)                        //.setAutoDismiss(false)                        .setListener(dialog -> {                            try {                                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(\"alipays://platformapi/startapp?saId=10000007&clientVersion=3.7.0.0718&qrcode=https%3A%2F%2Fqr.alipay.com%2FFKX04202G4K6AVCF5GIY66%3F_s%3Dweb-other\"));                                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);                                startActivity(intent);                                toast(\"\u8fd9\u4e2a\u5f00\u6e90\u9879\u76ee\u56e0\u4e3a\u4f60\u7684\u652f\u6301\u800c\u80fd\u591f\u4e0d\u65ad\u66f4\u65b0\u3001\u5b8c\u5584\uff0c\u975e\u5e38\u611f\u8c22\u4f60\u7684\u652f\u6301\");                            } catch (Exception e) {                                toast(\"\u6253\u5f00\u652f\u4ed8\u5b9d\u5931\u8d25\");                            }                        })                        .show();                break;            default:                break;        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/TestFragmentD.java", "stars": "1", "class": {"name": "TestFragmentD", "extends": "MyFragment", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isStatusBarEnabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isStatusBarEnabled() {        // \u4f7f\u7528\u6c89\u6d78\u5f0f\u72b6\u6001\u680f        return !super.isStatusBarEnabled();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/TestFragmentD.java", "stars": "1", "class": {"name": "TestFragmentD", "extends": "MyFragment", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getInputStream", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "ServletInputStream", "snippet": "    public ServletInputStream getInputStream() throws IOException {        final ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(body.getBytes());        ServletInputStream servletInputStream = new ServletInputStream() {            @Override            public boolean isFinished() {                return false;            }            @Override            public boolean isReady() {                return false;            }            @Override            public void setReadListener(ReadListener readListener) {            }            @Override            public int read() throws IOException {                return byteArrayInputStream.read();            }        };        return servletInputStream;    }", "url": "https://raw.githubusercontent.com/visayang/wechatdev/master/src/main/java/com/chad/wechatdev/commons/config/RequestWrapper.java", "stars": "2", "class": {"name": "RequestWrapper", "extends": "HttpServletRequestWrapper", "implements": null, "modifiers": ["public"]}}, {"method_name": "getReader", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "BufferedReader", "snippet": "    public BufferedReader getReader() throws IOException {        return new BufferedReader(new InputStreamReader(this.getInputStream()));    }", "url": "https://raw.githubusercontent.com/visayang/wechatdev/master/src/main/java/com/chad/wechatdev/commons/config/RequestWrapper.java", "stars": "2", "class": {"name": "RequestWrapper", "extends": "HttpServletRequestWrapper", "implements": null, "modifiers": ["public"]}}, {"method_name": "getBody", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getBody() {        return this.body;    }", "url": "https://raw.githubusercontent.com/visayang/wechatdev/master/src/main/java/com/chad/wechatdev/commons/config/RequestWrapper.java", "stars": "2", "class": {"name": "RequestWrapper", "extends": "HttpServletRequestWrapper", "implements": null, "modifiers": ["public"]}}, {"method_name": "displayId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "List<ProductOrder>", "snippet": "\tpublic List<ProductOrder> displayId(String distributorId)\t{\t\tString Qstr=\"SELECT productorderentity from ProductOrder productorderentity\";\t\tTypedQuery<ProductOrder> query=entityManager.createQuery(Qstr,ProductOrder.class);\t\tList<ProductOrder>result = query.getResultList();\t\tList<ProductOrder> res = new ArrayList<ProductOrder>();\t\t\t\tDistributor de =  entityManager.find(Distributor.class, distributorId);\t\tif(de != null) \t\t{\t\t\tIterator<ProductOrder> itr =result.iterator();\t\t\twhile(itr.hasNext()) \t\t\t\t{\t\t\t\tProductOrder element = itr.next();\t\t\t\tif(element.getDistributor().getDistributorId().contentEquals(distributorId))\t\t\t\t\t{\t\t\t\t\t\t//System.out.println(\"DistributorId =\"+id+\" \" +\"deliveryStatus=\"+element.getDeliveryStatus());\t\t\t\t\t\tres.add(element);\t\t\t\t\t\t//return element.getDeliveryStatus();\t\t\t\t\t}\t\t\t\t}\t\t}\t\telse\t\t{\t\t\treturn null;\t\t}\t\treturn res;\t\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/dao/ProductOrderDaoImpl.java", "stars": "1", "class": {"name": "ProductOrderDaoImpl", "extends": null, "implements": ["ProductOrderDaoI"], "modifiers": ["public"]}}, {"method_name": "displayIdwithStatus", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "List<ProductOrder>", "snippet": "public List<ProductOrder>  displayIdwithStatus(String id, String status) {\t\t\t\tString delivStatus = status.toUpperCase();\t\tString Qstr=\"SELECT productorderentity from ProductOrder productorderentity\";\t\tTypedQuery<ProductOrder> query=entityManager.createQuery(Qstr,ProductOrder.class);\t\tList<ProductOrder>result = query.getResultList();\t\tList<ProductOrder> res = new ArrayList<ProductOrder>();\t\t\t\tDistributor de =  entityManager.find(Distributor.class, id);\t\tif(de != null) \t\t{\t\t\tIterator<ProductOrder> itr =result.iterator();\t\t\twhile(itr.hasNext()) \t\t\t\t{\t\t\t\tProductOrder element = itr.next();\t\t\t\tif(element.getDistributor().getDistributorId().contentEquals(id) && element.getDeliveryStatus().contentEquals(delivStatus))\t\t\t\t\t{\t\t\t\t\t\t//System.out.println(\"DistributorId =\"+id+\" \" +\"deliveryStatus=\"+element.getDeliveryStatus());\t\t\t\t\t\tres.add(element);\t\t\t\t\t\t//return element.getDeliveryStatus();\t\t\t\t\t}\t\t\t\t}\t\t}\t\telse\t\t{\t\t\treturn null;\t\t}\t\treturn res;\t\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/dao/ProductOrderDaoImpl.java", "stars": "1", "class": {"name": "ProductOrderDaoImpl", "extends": null, "implements": ["ProductOrderDaoI"], "modifiers": ["public"]}}, {"method_name": "getDistributor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Distributor>", "snippet": "\tpublic List<Distributor> getDistributor() {\t\tString Qstr=\"SELECT productorderentity from Distributor productorderentity\";\t\tTypedQuery<Distributor> query=entityManager.createQuery(Qstr,Distributor.class);\t\treturn query.getResultList();\t\t\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/dao/ProductOrderDaoImpl.java", "stars": "1", "class": {"name": "ProductOrderDaoImpl", "extends": null, "implements": ["ProductOrderDaoI"], "modifiers": ["public"]}}, {"method_name": "updateDistributor", "params": ["String", "String", "String", "long"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean updateDistributor(String distributorId,String name,String address,long phonenumber) {\t\tDistributor result = entityManager.find(Distributor.class, distributorId);\t\tif(result !=null)\t\t{\t\t\tresult.setAddress(address);\t\t\tresult.setPhoneNumber(phonenumber);\t\t\tresult.setName(name);\t\t\tentityManager.flush();\t\t\treturn true;\t\t}\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/vijaykumbam/DrinkanddelightFinalVersion/master/DrinkandDelightsprintOracle/src/main/java/com/capgemini/drinkanddelight/dao/ProductOrderDaoImpl.java", "stars": "1", "class": {"name": "ProductOrderDaoImpl", "extends": null, "implements": ["ProductOrderDaoI"], "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        int bitmapWidth = bitmap.getWidth();        int bitmapHeight = bitmap.getHeight();        canvas.save();        matrix.reset();        matrix.postSkew(0, 0.5f, point1.x + bitmapWidth / 2, point1.y + bitmapHeight / 2);        canvas.concat(matrix);        canvas.drawBitmap(bitmap, point1.x, point1.y, paint);        canvas.restore();        canvas.save();        matrix.reset();        matrix.postSkew(-0.5f, 0, point2.x + bitmapWidth / 2, point2.y + bitmapHeight / 2);        canvas.concat(matrix);        canvas.drawBitmap(bitmap, point2.x, point2.y, paint);        canvas.restore();    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson4/Practice10MatrixSkewView.java", "stars": "2", "class": {"name": "Practice10MatrixSkewView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_list_video2);        videoList = (ListView)findViewById(R.id.video_list) ;        activityListVideo = (RelativeLayout)findViewById(R.id.activity_list_video) ;        //\u521b\u5efa\u5c0f\u7a97\u53e3\u5e2e\u52a9\u7c7b        smallVideoHelper = new GSYVideoHelper(this);        //\u914d\u7f6e        gsySmallVideoHelperBuilder = new GSYVideoHelper.GSYVideoHelperBuilder();        gsySmallVideoHelperBuilder                .setHideStatusBar(true)                .setNeedLockFull(true)                .setCacheWithPlay(true)                .setShowFullAnimation(false)                .setRotateViewAuto(false)                .setLockLand(true)                .setVideoAllCallBack(new GSYSampleCallBack(){                    @Override                    public void onQuitSmallWidget(String url, Object... objects) {                        super.onQuitSmallWidget(url, objects);                        //\u5927\u4e8e0\u8bf4\u660e\u6709\u64ad\u653e,//\u5bf9\u5e94\u7684\u64ad\u653e\u5217\u8868TAG                        if (smallVideoHelper.getPlayPosition() >= 0 && smallVideoHelper.getPlayTAG().equals(SimpleListVideoMode2Adapter.TAG)) {                            //\u5f53\u524d\u64ad\u653e\u7684\u4f4d\u7f6e                            int position = smallVideoHelper.getPlayPosition();                            //\u4e0d\u53ef\u89c6\u7684\u662f\u65f6\u5019                            if ((position < firstVisibleItem || position > lastVisibleItem)) {                                //\u91ca\u653e\u6389\u89c6\u9891                                smallVideoHelper.releaseVideoPlayer();                                listVideoAdapter.notifyDataSetChanged();                            }                        }                    }                });        smallVideoHelper.setGsyVideoOptionBuilder(gsySmallVideoHelperBuilder);        listVideoAdapter = new SimpleListVideoMode2Adapter(this, smallVideoHelper, gsySmallVideoHelperBuilder);        listVideoAdapter.setRootView(activityListVideo);        videoList.setAdapter(listVideoAdapter);        videoList.setOnScrollListener(new AbsListView.OnScrollListener() {            @Override            public void onScrollStateChanged(AbsListView view, int scrollState) {            }            @Override            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {                SimpleListVideoActivityMode2.this.firstVisibleItem = firstVisibleItem;                lastVisibleItem = firstVisibleItem + visibleItemCount;                //\u5927\u4e8e0\u8bf4\u660e\u6709\u64ad\u653e,//\u5bf9\u5e94\u7684\u64ad\u653e\u5217\u8868TAG                if (smallVideoHelper.getPlayPosition() >= 0 && smallVideoHelper.getPlayTAG().equals(SimpleListVideoMode2Adapter.TAG)) {                    //\u5f53\u524d\u64ad\u653e\u7684\u4f4d\u7f6e                    int position = smallVideoHelper.getPlayPosition();                    //\u4e0d\u53ef\u89c6\u7684\u662f\u65f6\u5019                    if ((position < firstVisibleItem || position > lastVisibleItem)) {                        //\u5982\u679c\u662f\u5c0f\u7a97\u53e3\u5c31\u4e0d\u9700\u8981\u5904\u7406                        if (!smallVideoHelper.isSmall()) {                            //\u5c0f\u7a97\u53e3                            int size = CommonUtil.dip2px(SimpleListVideoActivityMode2.this, 150);                            smallVideoHelper.showSmallVideo(new Point(size, size), false, true);                        }                    } else {                        if (smallVideoHelper.isSmall()) {                            smallVideoHelper.smallVideoToNormal();                        }                    }                }            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/simple/SimpleListVideoActivityMode2.java", "stars": "2", "class": {"name": "SimpleListVideoActivityMode2", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBackPressed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBackPressed() {        if (smallVideoHelper.backFromFull()) {            return;        }        super.onBackPressed();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/simple/SimpleListVideoActivityMode2.java", "stars": "2", "class": {"name": "SimpleListVideoActivityMode2", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDestroy() {        super.onDestroy();        smallVideoHelper.releaseVideoPlayer();        GSYVideoManager.releaseAllVideos();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/simple/SimpleListVideoActivityMode2.java", "stars": "2", "class": {"name": "SimpleListVideoActivityMode2", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getRemark", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getRemark() {        return Remark;    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/notification_data.java", "stars": "2", "class": {"name": "notification_data", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRemark", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRemark(String remark) {        Remark = remark;    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/notification_data.java", "stars": "2", "class": {"name": "notification_data", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMsg", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getMsg() {        return msg;    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/notification_data.java", "stars": "2", "class": {"name": "notification_data", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMsg", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMsg(String msg) {        this.msg = msg;    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/notification_data.java", "stars": "2", "class": {"name": "notification_data", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFrom", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getFrom() {        return from;    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/notification_data.java", "stars": "2", "class": {"name": "notification_data", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFrom", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFrom(String from) {        this.from = from;    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/notification_data.java", "stars": "2", "class": {"name": "notification_data", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "nextCollege", "params": [], "throws": null, "modifiers": ["public"], "return_type": "College", "snippet": "    public College nextCollege() {        System.out.println(\"index: \"+index);        College college = (College) collegeList.get(index);        index++;        return college;    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/iterator/CollegeIteratorImpl.java", "stars": "2", "class": {"name": "CollegeIteratorImpl", "extends": null, "implements": ["CollegeIterator"], "modifiers": ["public"]}}, {"method_name": "hasNextCollege", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean hasNextCollege() {        if(index < collegeList.size()){            return true;        }        return false;    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/iterator/CollegeIteratorImpl.java", "stars": "2", "class": {"name": "CollegeIteratorImpl", "extends": null, "implements": ["CollegeIterator"], "modifiers": ["public"]}}, {"method_name": "create", "params": ["int", "int", "int", "int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String create(int leftRight, int upDown, int inOut, int moveSpeed, int zoomSpeed) {        int cmdCode = 0;        if (leftRight == 2) cmdCode|=0x01;      // \u53f3\u79fb        else if(leftRight == 1) cmdCode|=0x02;  // \u5de6\u79fb        if (upDown == 2) cmdCode|=0x04;         // \u4e0b\u79fb        else if(upDown == 1) cmdCode|=0x08;     // \u4e0a\u79fb        if (inOut == 2) cmdCode |= 0x10;        // \u653e\u5927        else if(inOut == 1) cmdCode |= 0x20;    // \u7f29\u5c0f        char[] szCmd = new char[16];        String strTmp;        szCmd[0] = 'A'; //\u5b57\u82821 A5        szCmd[1] = '5';        szCmd[2] = '0'; //\u5b57\u82822 0F        szCmd[3] = 'F';        szCmd[4] = '0'; //\u5b57\u82823 \u5730\u5740\u7684\u4f4e8\u4f4d        szCmd[5] = '1';        strTmp = String.format(\"%02X\", cmdCode);        szCmd[6]  = strTmp.charAt(0); //\u5b57\u82824 \u63a7\u5236\u7801        szCmd[7]  = strTmp.charAt(1);        strTmp = String.format(\"%02X\", moveSpeed);        szCmd[8]  = strTmp.charAt(0); //\u5b57\u82825 \u6c34\u5e73\u63a7\u5236\u901f\u5ea6        szCmd[9]  = strTmp.charAt(1);        szCmd[10] = strTmp.charAt(0); //\u5b57\u82826 \u5782\u76f4\u63a7\u5236\u901f\u5ea6        szCmd[11] = strTmp.charAt(1);        strTmp = String.format(\"%X\", zoomSpeed);        szCmd[12] = strTmp.charAt(0); //\u5b57\u82827\u9ad84\u4f4d \u7f29\u653e\u63a7\u5236\u901f\u5ea6        szCmd[13] = '0';              //\u5b57\u82827\u4f4e4\u4f4d \u5730\u5740\u7684\u9ad84\u4f4d        //\u8ba1\u7b97\u6821\u9a8c\u7801        int nCheck = (0XA5 + 0X0F + 0X01 + cmdCode + moveSpeed + moveSpeed + (zoomSpeed << 4 & 0XF0)) % 0X100;        strTmp = String.format(\"%02X\", nCheck);        szCmd[14] = strTmp.charAt(0); //\u5b57\u82828 \u6821\u9a8c\u7801        szCmd[15] = strTmp.charAt(1);        return String.valueOf(szCmd);    }", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/cmd/impl/PtzCmdHelper.java", "stars": "29", "class": {"name": "PtzCmdHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createFromJson", "params": ["Object"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "BasicTimeChecker", "snippet": "  public static BasicTimeChecker createFromJson(final Object obj) throws Exception {    return createFromJson((HashMap<String, Object>) obj);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/BasicTimeChecker.java", "stars": "18", "class": {"name": "BasicTimeChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "createFromJson", "params": ["HashMap<String,Object>"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "BasicTimeChecker", "snippet": "  public static BasicTimeChecker createFromJson(final HashMap<String, Object> obj)      throws Exception {    final Map<String, Object> jsonObj = (HashMap<String, Object>) obj;    if (!jsonObj.get(\"type\").equals(type)) {      throw new Exception(\"Cannot create checker of \" + type + \" from \"          + jsonObj.get(\"type\"));    }    final Long firstCheckTime = Long.valueOf((String) jsonObj.get(\"firstCheckTime\"));    final String timezoneId = (String) jsonObj.get(\"timezone\");    final long nextCheckTime = Long.valueOf((String) jsonObj.get(\"nextCheckTime\"));    final DateTimeZone timezone = DateTimeZone.forID(timezoneId);    final boolean isRecurring = Boolean.valueOf((String) jsonObj.get(\"isRecurring\"));    final boolean skipPastChecks =        Boolean.valueOf((String) jsonObj.get(\"skipPastChecks\"));    final ReadablePeriod period =        Utils.parsePeriodString((String) jsonObj.get(\"period\"));    final String id = (String) jsonObj.get(\"id\");    final String cronExpression = (String) jsonObj.get(\"cronExpression\");    final BasicTimeChecker checker =        new BasicTimeChecker(id, firstCheckTime, timezone, nextCheckTime,            isRecurring, skipPastChecks, period, cronExpression);    if (skipPastChecks) {      checker.updateNextCheckTime();    }    return checker;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/BasicTimeChecker.java", "stars": "18", "class": {"name": "BasicTimeChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "getFirstCheckTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getFirstCheckTime() {    return this.firstCheckTime;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/BasicTimeChecker.java", "stars": "18", "class": {"name": "BasicTimeChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "getTimeZone", "params": [], "throws": null, "modifiers": ["public"], "return_type": "DateTimeZone", "snippet": "  public DateTimeZone getTimeZone() {    return this.timezone;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/BasicTimeChecker.java", "stars": "18", "class": {"name": "BasicTimeChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "isRecurring", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isRecurring() {    return this.isRecurring;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/BasicTimeChecker.java", "stars": "18", "class": {"name": "BasicTimeChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "isSkipPastChecks", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isSkipPastChecks() {    return this.skipPastChecks;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/BasicTimeChecker.java", "stars": "18", "class": {"name": "BasicTimeChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "getPeriod", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ReadablePeriod", "snippet": "  public ReadablePeriod getPeriod() {    return this.period;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/BasicTimeChecker.java", "stars": "18", "class": {"name": "BasicTimeChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "getNextCheckTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getNextCheckTime() {    return this.nextCheckTime;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/BasicTimeChecker.java", "stars": "18", "class": {"name": "BasicTimeChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "getCronExpression", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getCronExpression() {    return this.cronExpression;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/BasicTimeChecker.java", "stars": "18", "class": {"name": "BasicTimeChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "eval", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Boolean", "snippet": "  public Boolean eval() {    return this.nextCheckTime < DateTimeUtils.currentTimeMillis();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/BasicTimeChecker.java", "stars": "18", "class": {"name": "BasicTimeChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "reset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void reset() {    this.nextCheckTime = calculateNextCheckTime();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/BasicTimeChecker.java", "stars": "18", "class": {"name": "BasicTimeChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getId() {    return this.id;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/BasicTimeChecker.java", "stars": "18", "class": {"name": "BasicTimeChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getType() {    return type;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/BasicTimeChecker.java", "stars": "18", "class": {"name": "BasicTimeChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "fromJson", "params": ["Object"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "BasicTimeChecker", "snippet": "  public BasicTimeChecker fromJson(final Object obj) throws Exception {    return createFromJson(obj);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/BasicTimeChecker.java", "stars": "18", "class": {"name": "BasicTimeChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "updateNextCheckTime", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void updateNextCheckTime() {    this.nextCheckTime = calculateNextCheckTime();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/BasicTimeChecker.java", "stars": "18", "class": {"name": "BasicTimeChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "calculateNextCheckTime", "params": [], "throws": null, "modifiers": ["private"], "return_type": "long", "snippet": "  private long calculateNextCheckTime() {    DateTime date = new DateTime(this.nextCheckTime).withZone(this.timezone);    int count = 0;    while (!date.isAfterNow()) {      if (count > 100000) {        throw new IllegalStateException(            \"100000 increments of period did not get to present time.\");      }      if (this.period == null && this.cronExpression == null) {        break;      } else if (this.cronExecutionTime != null) {        final Date nextDate = this.cronExecutionTime.getNextValidTimeAfter(date.toDate());        // Some Cron Expressions possibly do not have follow-up occurrences        if (nextDate != null) {          date = new DateTime(nextDate);        } else {          break;        }      } else {        date = date.plus(this.period);      }      count += 1;    }    return date.getMillis();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/BasicTimeChecker.java", "stars": "18", "class": {"name": "BasicTimeChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "getNum", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getNum() {    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/BasicTimeChecker.java", "stars": "18", "class": {"name": "BasicTimeChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "toJson", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object toJson() {    final Map<String, Object> jsonObj = new HashMap<>();    jsonObj.put(\"type\", type);    jsonObj.put(\"firstCheckTime\", String.valueOf(this.firstCheckTime));    jsonObj.put(\"timezone\", this.timezone.getID());    jsonObj.put(\"nextCheckTime\", String.valueOf(this.nextCheckTime));    jsonObj.put(\"isRecurring\", String.valueOf(this.isRecurring));    jsonObj.put(\"skipPastChecks\", String.valueOf(this.skipPastChecks));    jsonObj.put(\"period\", Utils.createPeriodString(this.period));    jsonObj.put(\"id\", this.id);    jsonObj.put(\"cronExpression\", this.cronExpression);    return jsonObj;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/BasicTimeChecker.java", "stars": "18", "class": {"name": "BasicTimeChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "stopChecker", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void stopChecker() {    return;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/BasicTimeChecker.java", "stars": "18", "class": {"name": "BasicTimeChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "setContext", "params": ["Map<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setContext(final Map<String, Object> context) {  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/BasicTimeChecker.java", "stars": "18", "class": {"name": "BasicTimeChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void setUp() throws Exception {    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/awful_table/MapperConfig.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/awful_table/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/awful_table/AwfulTableTest.java", "stars": "15", "class": {"name": "AwfulTableTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testAwfulTableInsert", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testAwfulTableInsert() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      AwfulTableMapper mapper = sqlSession.getMapper(AwfulTableMapper.class);      AwfulTable3 record = new AwfulTable3();      record.seteMail(\"fred@fred.com\");      record.setEmailaddress(\"alsofred@fred.com\");      record.setFirstFirstName(\"fred1\");      record.setFrom(\"from field\");      record.setId1(1);      record.setId2(2);      record.setId5(5);      record.setId6(6);      record.setId7(7);      record.setSecondFirstName(\"fred2\");      record.setThirdFirstName(\"fred3\");      mapper.insert(record);      Integer generatedCustomerId = record.getCustomerId();      assertEquals(57, generatedCustomerId.intValue());      AwfulTable3 returnedRecord = mapper.selectByPrimaryKey(generatedCustomerId);      assertEquals(generatedCustomerId, returnedRecord.getCustomerId());      assertEquals(record.geteMail(), returnedRecord.geteMail());      assertEquals(record.getEmailaddress(), returnedRecord.getEmailaddress());      assertEquals(record.getFirstFirstName(), returnedRecord.getFirstFirstName());      assertEquals(record.getFrom(), returnedRecord.getFrom());      assertEquals(record.getId1(), returnedRecord.getId1());      assertEquals(record.getId2(), returnedRecord.getId2());      assertEquals(record.getId5(), returnedRecord.getId5());      assertEquals(record.getId6(), returnedRecord.getId6());      assertEquals(record.getId7(), returnedRecord.getId7());      assertEquals(record.getSecondFirstName(), returnedRecord.getSecondFirstName());      assertEquals(record.getThirdFirstName(), returnedRecord.getThirdFirstName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/awful_table/AwfulTableTest.java", "stars": "15", "class": {"name": "AwfulTableTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "hasPermissionforAction", "params": ["User", "Permission"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "  public static boolean hasPermissionforAction(final User user, final Permission.Type type) {    for (final String roleName : user.getRoles()) {      final Role role = user.getRoleMap().get(roleName);      final Permission perm = role.getPermission();      if (perm.isPermissionSet(Permission.Type.ADMIN) || perm.isPermissionSet(type)) {        return true;      }    }    return false;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/user/UserUtils.java", "stars": "18", "class": {"name": "UserUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_detail_control);        ButterKnife.bind(this);        resolveNormalVideoUI();        initVideoBuilderMode();        initGifHelper();        detailPlayer.setLockClickListener(new LockClickListener() {            @Override            public void onClick(View view, boolean lock) {                //if (orientationUtils != null) {                //\u914d\u5408\u4e0b\u65b9\u7684onConfigurationChanged                //orientationUtils.setEnable(!lock);                //}            }        });        changeSpeed.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                resolveTypeUI();            }        });        /*VideoOptionModel videoOptionModel =                new VideoOptionModel(IjkMediaPlayer.OPT_CATEGORY_FORMAT, \"dns_cache_clear\", 1);        List<VideoOptionModel> list = new ArrayList<>();        list.add(videoOptionModel);        videoOptionModel =                new VideoOptionModel(IjkMediaPlayer.OPT_CATEGORY_FORMAT, \"rtsp_transport\", \"tcp\");        list.add(videoOptionModel);        GSYVideoManager.instance().setOptionModelList(list);*/        jump.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                JumpUtils.gotoControl(DetailControlActivity.this);                //startActivity(new Intent(DetailControlActivity.this, MainActivity.class));            }        });        shot.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                DetailControlActivityPermissionsDispatcher.shotImageWithPermissionCheck(DetailControlActivity.this, v);            }        });        startGif.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                DetailControlActivityPermissionsDispatcher.startGifWithPermissionCheck(DetailControlActivity.this);            }        });        stopGif.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                stopGif();            }        });        loadingView.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                //do nothing            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailControlActivity.java", "stars": "2", "class": {"name": "DetailControlActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "getGSYVideoPlayer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "StandardGSYVideoPlayer", "snippet": "    public StandardGSYVideoPlayer getGSYVideoPlayer() {        return detailPlayer;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailControlActivity.java", "stars": "2", "class": {"name": "DetailControlActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "getGSYVideoOptionBuilder", "params": [], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder getGSYVideoOptionBuilder() {        //\u5185\u7f6e\u5c01\u9762\u53ef\u53c2\u8003SampleCoverVideo        ImageView imageView = new ImageView(this);        loadCover(imageView, url);        return new GSYVideoOptionBuilder()                .setThumbImageView(imageView)                .setUrl(url)                .setCacheWithPlay(true)                .setVideoTitle(\" \")                .setIsTouchWiget(true)                .setRotateViewAuto(false)                .setLockLand(false)                .setShowFullAnimation(true)//\u6253\u5f00\u52a8\u753b                .setNeedLockFull(true)                .setSeekRatio(1);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailControlActivity.java", "stars": "2", "class": {"name": "DetailControlActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "clickForFullScreen", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clickForFullScreen() {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailControlActivity.java", "stars": "2", "class": {"name": "DetailControlActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDestroy() {        super.onDestroy();        mGifCreateHelper.cancelTask();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailControlActivity.java", "stars": "2", "class": {"name": "DetailControlActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "initVideo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initVideo() {        super.initVideo();        //\u91cd\u8f7d\u540e\u5b9e\u73b0\u70b9\u51fb\uff0c\u4e0d\u6a2a\u5c4f        if (getGSYVideoPlayer().getFullscreenButton() != null) {            getGSYVideoPlayer().getFullscreenButton().setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    //\u7b2c\u4e00\u4e2atrue\u662f\u5426\u9700\u8981\u9690\u85cfactionbar\uff0c\u7b2c\u4e8c\u4e2atrue\u662f\u5426\u9700\u8981\u9690\u85cfstatusbar                    getGSYVideoPlayer().startWindowFullscreen(DetailControlActivity.this, true, true);                }            });        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailControlActivity.java", "stars": "2", "class": {"name": "DetailControlActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDetailOrientationRotateAuto", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean getDetailOrientationRotateAuto() {        return false;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailControlActivity.java", "stars": "2", "class": {"name": "DetailControlActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "onConfigurationChanged", "params": ["Configuration"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onConfigurationChanged(Configuration newConfig) {        super.onConfigurationChanged(newConfig);        orientationUtils.setEnable(false);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailControlActivity.java", "stars": "2", "class": {"name": "DetailControlActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "onQuitFullscreen", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onQuitFullscreen(String url, Object... objects) {        super.onQuitFullscreen(url, objects);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailControlActivity.java", "stars": "2", "class": {"name": "DetailControlActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "initGifHelper", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initGifHelper() {        mGifCreateHelper = new GifCreateHelper(detailPlayer, new GSYVideoGifSaveListener() {            @Override            public void result(boolean success, File file) {                detailPlayer.post(new Runnable() {                    @Override                    public void run() {                        loadingView.setVisibility(View.GONE);                        Toast.makeText(detailPlayer.getContext(), \"\u521b\u5efa\u6210\u529f\", Toast.LENGTH_LONG).show();                    }                });            }            @Override            public void process(int curPosition, int total) {                Debuger.printfError(\" current \" + curPosition + \" total \" + total);            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailControlActivity.java", "stars": "2", "class": {"name": "DetailControlActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "startGif", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void startGif() {        //\u5f00\u59cb\u7f13\u5b58\u5404\u4e2a\u5e27        mGifCreateHelper.startGif(new File(FileUtils.getPath()));    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailControlActivity.java", "stars": "2", "class": {"name": "DetailControlActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "stopGif", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void stopGif() {        loadingView.setVisibility(View.VISIBLE);        mGifCreateHelper.stopGif(new File(FileUtils.getPath(), \"GSY-Z-\" + System.currentTimeMillis() + \".gif\"));    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailControlActivity.java", "stars": "2", "class": {"name": "DetailControlActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "showRationaleForCamera", "params": ["PermissionRequest"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void showRationaleForCamera(final PermissionRequest request) {        new AlertDialog.Builder(this)                .setMessage(\"\u5feb\u7ed9\u6211\u6743\u9650\")                .setPositiveButton(\"\u5141\u8bb8\", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        request.proceed();                    }                })                .setNegativeButton(\"\u62d2\u7edd\", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        request.cancel();                    }                })                .show();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailControlActivity.java", "stars": "2", "class": {"name": "DetailControlActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "showDeniedForCamera", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void showDeniedForCamera() {        Toast.makeText(this, \"\u6ca1\u6709\u6743\u9650\u554a\", Toast.LENGTH_SHORT).show();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailControlActivity.java", "stars": "2", "class": {"name": "DetailControlActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "showNeverAskForCamera", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void showNeverAskForCamera() {        Toast.makeText(this, \"\u518d\u6b21\u6388\u6743\", Toast.LENGTH_SHORT).show();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailControlActivity.java", "stars": "2", "class": {"name": "DetailControlActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "shotImage", "params": ["View"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void shotImage(final View v) {        //\u83b7\u53d6\u622a\u56fe        detailPlayer.taskShotPic(new GSYVideoShotListener() {            @Override            public void getBitmap(Bitmap bitmap) {                if (bitmap != null) {                    try {                        CommonUtil.saveBitmap(bitmap);                    } catch (FileNotFoundException e) {                        showToast(\"save fail \");                        e.printStackTrace();                        return;                    }                    showToast(\"save success \");                } else {                    showToast(\"get bitmap fail \");                }            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailControlActivity.java", "stars": "2", "class": {"name": "DetailControlActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "loadCover", "params": ["ImageView", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void loadCover(ImageView imageView, String url) {        imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);        imageView.setImageResource(R.mipmap.xxx1);        Glide.with(this.getApplicationContext())                .setDefaultRequestOptions(                        new RequestOptions()                                .frame(3000000)                                .centerCrop()                                .error(R.mipmap.xxx2)                                .placeholder(R.mipmap.xxx1))                .load(url)                .into(imageView);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailControlActivity.java", "stars": "2", "class": {"name": "DetailControlActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveNormalVideoUI", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveNormalVideoUI() {        //\u589e\u52a0title        detailPlayer.getTitleTextView().setVisibility(View.GONE);        detailPlayer.getBackButton().setVisibility(View.GONE);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailControlActivity.java", "stars": "2", "class": {"name": "DetailControlActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveTypeUI", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveTypeUI() {        if (speed == 1) {            speed = 1.5f;        } else if (speed == 1.5f) {            speed = 2f;        } else if (speed == 2) {            speed = 0.5f;        } else if (speed == 0.5f) {            speed = 0.25f;        } else if (speed == 0.25f) {            speed = 1;        }        changeSpeed.setText(\"\u64ad\u653e\u901f\u5ea6\uff1a\" + speed);        detailPlayer.setSpeedPlaying(speed, true);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailControlActivity.java", "stars": "2", "class": {"name": "DetailControlActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "showToast", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void showToast(final String tip) {        detailPlayer.post(new Runnable() {            @Override            public void run() {                Toast.makeText(DetailControlActivity.this, tip, Toast.LENGTH_LONG).show();            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailControlActivity.java", "stars": "2", "class": {"name": "DetailControlActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "onRequestPermissionsResult", "params": ["int", "String", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        super.onRequestPermissionsResult(requestCode, permissions, grantResults);        // NOTE: delegate the permission handling to generated method        DetailControlActivityPermissionsDispatcher.onRequestPermissionsResult(this, requestCode, grantResults);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailControlActivity.java", "stars": "2", "class": {"name": "DetailControlActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecutableFlowHelper", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["private", "static"], "return_type": "Pair<ExecutionReference,ExecutableFlow>", "snippet": "  private static Pair<ExecutionReference, ExecutableFlow> getExecutableFlowHelper(      final ResultSet rs) throws SQLException {    final int id = rs.getInt(\"exec_id\");    final int encodingType = rs.getInt(\"enc_type\");    final byte[] data = rs.getBytes(\"flow_data\");    if (data == null) {      logger.warn(\"Execution id \" + id + \" has flow_data = null. To clean up, update status to \"          + \"FAILED manually, eg. \"          + \"SET status = \" + Status.FAILED.getNumVal() + \" WHERE id = \" + id);    } else {      final EncodingType encType = EncodingType.fromInteger(encodingType);      final ExecutableFlow exFlow;      try {        exFlow = ExecutableFlow.createExecutableFlowFromObject(            GZIPUtils.transformBytesToObject(data, encType));      } catch (final IOException e) {        throw new SQLException(\"Error retrieving flow data \" + id, e);      }      return getPairWithExecutorInfo(rs, exFlow);    }    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/FetchActiveFlowDao.java", "stars": "18", "class": {"name": "FetchActiveFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPairWithExecutorInfo", "params": ["ResultSet", "ExecutableFlow"], "throws": ["SQLException"], "modifiers": ["private", "static"], "return_type": "Pair<ExecutionReference,ExecutableFlow>", "snippet": "  private static Pair<ExecutionReference, ExecutableFlow> getPairWithExecutorInfo(final ResultSet rs,      final ExecutableFlow exFlow) throws SQLException {    final int executorId = rs.getInt(\"executorId\");    final String host = rs.getString(\"host\");    final int port = rs.getInt(\"port\");    final Executor executor;    if (host == null) {      logger.warn(\"Executor id \" + executorId + \" (on execution \" +          exFlow.getExecutionId() + \") wasn't found\");      executor = null;    } else {      final boolean executorStatus = rs.getBoolean(\"executorStatus\");      executor = new Executor(executorId, host, port, executorStatus);    }    final ExecutionReference ref = new ExecutionReference(exFlow.getExecutionId(), executor);    return new Pair<>(ref, exFlow);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/FetchActiveFlowDao.java", "stars": "18", "class": {"name": "FetchActiveFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecutableFlowMetadataHelper", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["private", "static"], "return_type": "Pair<ExecutionReference,ExecutableFlow>", "snippet": "  private static Pair<ExecutionReference, ExecutableFlow> getExecutableFlowMetadataHelper(      final ResultSet rs) throws SQLException {    final Flow flow = new Flow(rs.getString(\"flow_id\"));    final Project project = new Project(rs.getInt(\"project_id\"), null);    project.setVersion(rs.getInt(\"version\"));    final ExecutableFlow exFlow = new ExecutableFlow(project, flow);    exFlow.setExecutionId(rs.getInt(\"exec_id\"));    exFlow.setStatus(Status.fromInteger(rs.getInt(\"status\")));    exFlow.setSubmitTime(rs.getLong(\"submit_time\"));    exFlow.setStartTime(rs.getLong(\"start_time\"));    exFlow.setEndTime(rs.getLong(\"end_time\"));    exFlow.setSubmitUser(rs.getString(\"submit_user\"));    return getPairWithExecutorInfo(rs, exFlow);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/FetchActiveFlowDao.java", "stars": "18", "class": {"name": "FetchActiveFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchUnfinishedFlows", "params": [], "throws": ["ExecutorManagerException"], "modifiers": [], "return_type": "Map<Integer,Pair>", "snippet": "  Map<Integer, Pair<ExecutionReference, ExecutableFlow>> fetchUnfinishedFlows()      throws ExecutorManagerException {    try {      return this.dbOperator.query(FetchActiveExecutableFlows.FETCH_UNFINISHED_EXECUTABLE_FLOWS,          new FetchActiveExecutableFlows());    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching unfinished flows\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/FetchActiveFlowDao.java", "stars": "18", "class": {"name": "FetchActiveFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchAllUnFinishFlows", "params": [], "throws": ["ExecutorManagerException"], "modifiers": [], "return_type": "List<ExecutableFlow>", "snippet": "  List<ExecutableFlow> fetchAllUnFinishFlows()throws ExecutorManagerException {    try {      return this.dbOperator.query(FetchUnFinishedExecutableFlows.FETCH_ACTIVE_EXECUTABLE_FLOWS,              new FetchUnFinishedExecutableFlows());    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching unfinished flows\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/FetchActiveFlowDao.java", "stars": "18", "class": {"name": "FetchActiveFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchUnfinishedFlowsMetadata", "params": [], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "Map<Integer,Pair>", "snippet": "  public Map<Integer, Pair<ExecutionReference, ExecutableFlow>> fetchUnfinishedFlowsMetadata()      throws ExecutorManagerException {    try {      return this.dbOperator.query(FetchUnfinishedFlowsMetadata.FETCH_UNFINISHED_FLOWS_METADATA,          new FetchUnfinishedFlowsMetadata());    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching unfinished flows metadata\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/FetchActiveFlowDao.java", "stars": "18", "class": {"name": "FetchActiveFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchActiveFlows", "params": [], "throws": ["ExecutorManagerException"], "modifiers": [], "return_type": "Map<Integer,Pair>", "snippet": "  Map<Integer, Pair<ExecutionReference, ExecutableFlow>> fetchActiveFlows()      throws ExecutorManagerException {    try {      return this.dbOperator.query(FetchActiveExecutableFlows.FETCH_ACTIVE_EXECUTABLE_FLOWS,          new FetchActiveExecutableFlows());    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching active flows\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/FetchActiveFlowDao.java", "stars": "18", "class": {"name": "FetchActiveFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchActiveFlowByExecId", "params": ["int"], "throws": ["ExecutorManagerException"], "modifiers": [], "return_type": "Pair<ExecutionReference,ExecutableFlow>", "snippet": "  Pair<ExecutionReference, ExecutableFlow> fetchActiveFlowByExecId(final int execId)      throws ExecutorManagerException {    try {      return this.dbOperator.query(FetchActiveExecutableFlow              .FETCH_ACTIVE_EXECUTABLE_FLOW_BY_EXEC_ID,          new FetchActiveExecutableFlow(), execId);    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching active flow by exec id\" + execId, e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/FetchActiveFlowDao.java", "stars": "18", "class": {"name": "FetchActiveFlowDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Map<Integer,Pair>", "snippet": "    public Map<Integer, Pair<ExecutionReference, ExecutableFlow>> handle(        final ResultSet rs) throws SQLException {      if (!rs.next()) {        return Collections.emptyMap();      }      final Map<Integer, Pair<ExecutionReference, ExecutableFlow>> execFlows =          new HashMap<>();      do {        final Pair<ExecutionReference, ExecutableFlow> exFlow = getExecutableFlowHelper(rs);        if (exFlow != null) {          execFlows.put(rs.getInt(\"exec_id\"), exFlow);        }      } while (rs.next());      return execFlows;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/FetchActiveFlowDao.java", "stars": "18", "class": {"name": "FetchActiveExecutableFlows", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "    public List<ExecutableFlow> handle(            final ResultSet rs) throws SQLException {      if (!rs.next()) {        return Collections.emptyList();      }      final List<ExecutableFlow> execFlows = new ArrayList<>();      do {        final int id = rs.getInt(1);        final int encodingType = rs.getInt(2);        final byte[] data = rs.getBytes(3);        final String executorId = rs.getString(4);        if (data != null) {          final EncodingType encType = EncodingType.fromInteger(encodingType);          try {            ExecutableFlow exFlow =                    ExecutableFlow.createExecutableFlowFromObject(                            GZIPUtils.transformBytesToObject(data, encType));            exFlow.getOtherOption().put(\"currentExecutorId\", executorId);            execFlows.add(exFlow);          } catch (final IOException e) {            throw new SQLException(\"Error retrieving flow data \" + id, e);          }        }      } while (rs.next());      return execFlows;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/FetchActiveFlowDao.java", "stars": "18", "class": {"name": "FetchUnFinishedExecutableFlows", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Map<Integer,Pair>", "snippet": "    public Map<Integer, Pair<ExecutionReference, ExecutableFlow>> handle(        final ResultSet rs) throws SQLException {      if (!rs.next()) {        return Collections.emptyMap();      }      final Map<Integer, Pair<ExecutionReference, ExecutableFlow>> execFlows =          new HashMap<>();      do {        final Pair<ExecutionReference, ExecutableFlow> exFlow = getExecutableFlowMetadataHelper(rs);        if (exFlow != null) {          execFlows.put(rs.getInt(\"exec_id\"), exFlow);        }      } while (rs.next());      return execFlows;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/FetchActiveFlowDao.java", "stars": "18", "class": {"name": "FetchUnfinishedFlowsMetadata", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Pair<ExecutionReference,ExecutableFlow>", "snippet": "    public Pair<ExecutionReference, ExecutableFlow> handle(        final ResultSet rs) throws SQLException {      if (!rs.next()) {        return null;      }      return getExecutableFlowHelper(rs);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/FetchActiveFlowDao.java", "stars": "18", "class": {"name": "FetchActiveExecutableFlow", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["private", "static"]}}, {"method_name": "shipGift", "params": ["Gift"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String shipGift(Gift gift){        System.out.println(gift.getName()+\" \u8fdb\u5165\u7269\u6d41\u7cfb\u7edf\");        String orderID = \"123456789\";        return orderID;    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/facade/Logistics.java", "stars": "2", "class": {"name": "Logistics", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "set", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "DateTool", "snippet": "    public DateTool set(int field, int value) {        calendar.set(field, value);        return this;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/DateTool.java", "stars": "23", "class": {"name": "DateTool", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDate", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "DateTool", "snippet": "    public DateTool getDate(String date) {        SimpleDateFormat format = new SimpleDateFormat(\"yyyyMMdd\");        try {            calendar.setTime(format.parse(date));        } catch (ParseException e) {            log.error(\"Parse exception.\",e);        }        return this;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/DateTool.java", "stars": "23", "class": {"name": "DateTool", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHalfBeg", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "DateTool", "snippet": "    public DateTool getHalfBeg(int amount) {        calendar.add(Calendar.MONTH, amount * 6);        int currentMonth = calendar.get(Calendar.MONTH) + 1;        if (currentMonth >= 1 && currentMonth <= 6) {            calendar.set(Calendar.MONTH, 0);        } else if (currentMonth >= 7 && currentMonth <= 12) {            calendar.set(Calendar.MONTH, 6);        }        calendar.set(Calendar.DATE, 1);        return this;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/DateTool.java", "stars": "23", "class": {"name": "DateTool", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHalfEnd", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "DateTool", "snippet": "    public DateTool getHalfEnd(int amount) {        calendar.add(Calendar.MONTH, amount * 6);        int currentMonth = calendar.get(Calendar.MONTH) + 1;        if (currentMonth >= 1 && currentMonth <= 6) {            calendar.set(Calendar.MONTH, 5);            calendar.set(Calendar.DATE, 30);        } else if (currentMonth >= 7 && currentMonth <= 12) {            calendar.set(Calendar.MONTH, 11);            calendar.set(Calendar.DATE, 31);        }        return this;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/DateTool.java", "stars": "23", "class": {"name": "DateTool", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getQuarterBeg", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "DateTool", "snippet": "    public DateTool getQuarterBeg(int amount) {        calendar.add(Calendar.MONTH, amount * 3);        int currentMonth = calendar.get(Calendar.MONTH) + 1;        if (currentMonth >= 1 && currentMonth <= 3) {            calendar.set(Calendar.MONTH, 0);        } else if (currentMonth >= 4 && currentMonth <= 6) {            calendar.set(Calendar.MONTH, 3);        } else if (currentMonth >= 7 && currentMonth <= 9) {            calendar.set(Calendar.MONTH, 6);        } else if (currentMonth >= 10 && currentMonth <= 12) {            calendar.set(Calendar.MONTH, 9);        }        calendar.set(Calendar.DATE, 1);        return this;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/DateTool.java", "stars": "23", "class": {"name": "DateTool", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getQuarterEnd", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "DateTool", "snippet": "    public DateTool getQuarterEnd(int amount) {        calendar.add(Calendar.MONTH, amount * 3);        int currentMonth = calendar.get(Calendar.MONTH) + 1;        if (currentMonth >= 1 && currentMonth <= 3) {            calendar.set(Calendar.MONTH, 2);            calendar.set(Calendar.DATE, 31);        } else if (currentMonth >= 4 && currentMonth <= 6) {            calendar.set(Calendar.MONTH, 5);            calendar.set(Calendar.DATE, 30);        } else if (currentMonth >= 7 && currentMonth <= 9) {            calendar.set(Calendar.MONTH, 8);            calendar.set(Calendar.DATE, 30);        } else if (currentMonth >= 10 && currentMonth <= 12) {            calendar.set(Calendar.MONTH, 11);            calendar.set(Calendar.DATE, 31);        }        return this;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/DateTool.java", "stars": "23", "class": {"name": "DateTool", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addDay", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "DateTool", "snippet": "    public DateTool addDay(int amount){        calendar.add(Calendar.DAY_OF_YEAR, amount);        return this;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/DateTool.java", "stars": "23", "class": {"name": "DateTool", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "add", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "DateTool", "snippet": "    public DateTool add(int field, int amount){        calendar.add(field, amount);        return this;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/DateTool.java", "stars": "23", "class": {"name": "DateTool", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addMonth", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "DateTool", "snippet": "    public DateTool addMonth(int amount){        calendar.add(Calendar.MONTH, amount);        return this;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/DateTool.java", "stars": "23", "class": {"name": "DateTool", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addYesterdayMonth", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "DateTool", "snippet": "    public DateTool addYesterdayMonth(int amount){        calendar.add(Calendar.DAY_OF_MONTH, -1);        calendar.add(Calendar.MONTH, amount);        return this;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/DateTool.java", "stars": "23", "class": {"name": "DateTool", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMonthEnd", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "DateTool", "snippet": "    public DateTool getMonthEnd(int amount){        calendar.set(Calendar.DATE, 1);        calendar.add(Calendar.MONTH, amount+1);        calendar.add(Calendar.DAY_OF_MONTH, -1);        return this;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/DateTool.java", "stars": "23", "class": {"name": "DateTool", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMonthBegin", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "DateTool", "snippet": "    public DateTool getMonthBegin(int amount){        calendar.set(Calendar.DATE, 1);        calendar.add(Calendar.MONTH, amount);        return this;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/DateTool.java", "stars": "23", "class": {"name": "DateTool", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "format", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String format(String pattern){        SimpleDateFormat format=new SimpleDateFormat(pattern);        return format.format(calendar.getTime());    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/DateTool.java", "stars": "23", "class": {"name": "DateTool", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "format", "params": ["String", "long"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String format(String pattern, long time){        SimpleDateFormat format = new SimpleDateFormat(pattern);        return format.format(new Date(time));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/DateTool.java", "stars": "23", "class": {"name": "DateTool", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "currentTimestamp", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String currentTimestamp(){        return String.valueOf(System.currentTimeMillis()/1000);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/DateTool.java", "stars": "23", "class": {"name": "DateTool", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "stringToDate", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Date", "snippet": "    public static Date stringToDate(String dateStr, String formatStr){        DateFormat sdf=new SimpleDateFormat(formatStr);        Date date=null;        try {            date = sdf.parse(dateStr);        } catch (ParseException e) {            log.error(\"Parse exception.\",e);        }        return date;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/DateTool.java", "stars": "23", "class": {"name": "DateTool", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "truncate", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "DateTool", "snippet": "    public DateTool truncate(long mills) {        calendar.setTimeInMillis(mills * (calendar.getTimeInMillis() / mills));        return this;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/DateTool.java", "stars": "23", "class": {"name": "DateTool", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "byte", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNonNullParameter(PreparedStatement ps, int i, byte[] parameter, JdbcType jdbcType)      throws SQLException {    ByteArrayInputStream bis = new ByteArrayInputStream(parameter);    ps.setBinaryStream(i, bis, parameter.length);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/BlobTypeHandler.java", "stars": "15", "class": {"name": "BlobTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "byte", "snippet": "  public byte[] getNullableResult(ResultSet rs, String columnName)      throws SQLException {    Blob blob = rs.getBlob(columnName);    byte[] returnValue = null;    if (null != blob) {      returnValue = blob.getBytes(1, (int) blob.length());    }    return returnValue;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/BlobTypeHandler.java", "stars": "15", "class": {"name": "BlobTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "byte", "snippet": "  public byte[] getNullableResult(ResultSet rs, int columnIndex)      throws SQLException {    Blob blob = rs.getBlob(columnIndex);    byte[] returnValue = null;    if (null != blob) {      returnValue = blob.getBytes(1, (int) blob.length());    }    return returnValue;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/BlobTypeHandler.java", "stars": "15", "class": {"name": "BlobTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "byte", "snippet": "  public byte[] getNullableResult(CallableStatement cs, int columnIndex)      throws SQLException {    Blob blob = cs.getBlob(columnIndex);    byte[] returnValue = null;    if (null != blob) {      returnValue = blob.getBytes(1, (int) blob.length());    }    return returnValue;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/BlobTypeHandler.java", "stars": "15", "class": {"name": "BlobTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "memoryRate", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "double", "snippet": "    public static double memoryRate(){        return memoryRate(-1);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/machine/MachineInfo.java", "stars": "23", "class": {"name": "MachineInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "memoryTotal", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "long", "snippet": "    public static long memoryTotal(){        try{            return sigar.getMem().getTotal();        }catch(SigarException e){            LOG.error(e.getMessage());        }        return 0L;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/machine/MachineInfo.java", "stars": "23", "class": {"name": "MachineInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "memoryUsed", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "long", "snippet": "    public static long memoryUsed(){        try{            return sigar.getMem().getActualUsed();        }catch(SigarException e){            LOG.error(e.getMessage());        }        return 0L;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/machine/MachineInfo.java", "stars": "23", "class": {"name": "MachineInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "memoryRate", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "double", "snippet": "    public static double memoryRate(int scale){        double result = 0.0;        try {            long free = sigar.getMem().getActualFree();            long used = sigar.getMem().getActualUsed();            result = (double)used/(double)(used + free);        }catch(SigarException e){            LOG.error(e.getMessage());        }        if(scale > 0){            return BigDecimal.valueOf(result).setScale(scale, BigDecimal.ROUND_HALF_UP).doubleValue();        }        return result;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/machine/MachineInfo.java", "stars": "23", "class": {"name": "MachineInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "memoryRate0", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "double", "snippet": "    public static double memoryRate0(int scale){        OperatingSystemMXBean osmxb = (OperatingSystemMXBean) ManagementFactory.getOperatingSystemMXBean();        long totalMem = osmxb.getTotalPhysicalMemorySize();        long freeMem = osmxb.getFreePhysicalMemorySize();        double result = (double)(totalMem - freeMem) / (double) totalMem;        if(scale > 0){            BigDecimal bd = BigDecimal.valueOf(result);            return bd.setScale(scale, BigDecimal.ROUND_HALF_UP).doubleValue();        }        return result;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/machine/MachineInfo.java", "stars": "23", "class": {"name": "MachineInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "cpuRate", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "double", "snippet": "    public static double cpuRate(int scale){        double result = 0.0;        try {            result = sigar.getCpuPerc().getCombined();        } catch (SigarException e) {            LOG.error(e.getMessage());        }        if(scale > 0){            BigDecimal bd = BigDecimal.valueOf(result);            return bd.setScale(scale, BigDecimal.ROUND_HALF_UP).doubleValue();        }        return result;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/machine/MachineInfo.java", "stars": "23", "class": {"name": "MachineInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getIpAddress", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getIpAddress(String interfaceName){        try{            Enumeration<NetworkInterface> nis = NetworkInterface.getNetworkInterfaces();            while(nis.hasMoreElements()){                NetworkInterface networkInterface = nis.nextElement();                Enumeration<InetAddress> ias = networkInterface.getInetAddresses();                if(StringUtils.isBlank(interfaceName) || interfaceName.equalsIgnoreCase(networkInterface.getName())) {                    while (ias.hasMoreElements()) {                        InetAddress inetAddress = ias.nextElement();                        if (inetAddress instanceof Inet4Address &&                                !inetAddress.getHostAddress().equals(LOCAL_ADDRESS)) {                            return inetAddress.getHostAddress();                        }                    }                }            }        } catch (SocketException e) {            LOG.error(e.getMessage());        }        return null;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/machine/MachineInfo.java", "stars": "23", "class": {"name": "MachineInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getIpAddress", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getIpAddress(){        return getIpAddress(\"\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/machine/MachineInfo.java", "stars": "23", "class": {"name": "MachineInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProcPath", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getProcPath(){        String pid = ManagementFactory.getRuntimeMXBean().getName();        pid = pid.substring(0, pid.indexOf('@'));        try {            return sigar.getProcArgs(pid)[0];        } catch (SigarException e) {            LOG.error(e.getMessage());            return \"\";        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/machine/MachineInfo.java", "stars": "23", "class": {"name": "MachineInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        MobileButterApplication.getAppContext()                .getComponent()                .inject(this);        mUserLearnedDrawer = PrefUtils.get(getActivity(), Prefs.DRAWER_LEARNED, false);        if (savedInstanceState != null) {            mCurrentSelectedPosition = savedInstanceState.getInt(STATE_SELECTED_POSITION);            mFromSavedInstanceState = true;        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/NavigationDrawerFragment.java", "stars": "4", "class": {"name": "NavigationDrawerFragment", "extends": "Fragment", "implements": ["NavigationAdapter", "NavigationAdapter"], "modifiers": ["public"]}}, {"method_name": "onActivityCreated", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onActivityCreated(Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);        // Indicate that this fragment would like to influence the set of actions in the action bar.        setHasOptionsMenu(true);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/NavigationDrawerFragment.java", "stars": "4", "class": {"name": "NavigationDrawerFragment", "extends": "Fragment", "implements": ["NavigationAdapter", "NavigationAdapter"], "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        mRecyclerView = (RecyclerView) inflater.inflate(R.layout.fragment_navigation_drawer, container, false);        mRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));        return mRecyclerView;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/NavigationDrawerFragment.java", "stars": "4", "class": {"name": "NavigationDrawerFragment", "extends": "Fragment", "implements": ["NavigationAdapter", "NavigationAdapter"], "modifiers": ["public"]}}, {"method_name": "onViewCreated", "params": ["View", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {        super.onViewCreated(view, savedInstanceState);        mAdapter = new NavigationAdapter(getActivity(), this, initItems());        mAdapter.setOnItemClickListener(this);        mRecyclerView.addItemDecoration(new OneShotDividerDecorator(getActivity(), mAdapter.getItemCount() - 2));        mRecyclerView.setHasFixedSize(true);        mRecyclerView.setAdapter(mAdapter);        mRecyclerView.requestFocus();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/NavigationDrawerFragment.java", "stars": "4", "class": {"name": "NavigationDrawerFragment", "extends": "Fragment", "implements": ["NavigationAdapter", "NavigationAdapter"], "modifiers": ["public"]}}, {"method_name": "initItems", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<AbsNavDrawerItem>", "snippet": "    public List<AbsNavDrawerItem> initItems() {        List<AbsNavDrawerItem> navItems = new ArrayList<>();        navItems.add(new AbsNavDrawerItem.HeaderNavDrawerItem());        navItems.add(new AbsNavDrawerItem.ProviderNavDrawerItem(ProviderUtils.getProviderTitle(ProviderManager.PROVIDER_TYPE_MOVIE),                ProviderUtils.getProviderIcon(ProviderManager.PROVIDER_TYPE_MOVIE),                ProviderManager.PROVIDER_TYPE_MOVIE));        navItems.add(new AbsNavDrawerItem.ProviderNavDrawerItem(ProviderUtils.getProviderTitle(ProviderManager.PROVIDER_TYPE_SHOW),                ProviderUtils.getProviderIcon(ProviderManager.PROVIDER_TYPE_SHOW),                ProviderManager.PROVIDER_TYPE_SHOW));        navItems.add(new AbsNavDrawerItem.ProviderNavDrawerItem(ProviderUtils.getProviderTitle(ProviderManager.PROVIDER_TYPE_ANIME),                ProviderUtils.getProviderIcon(ProviderManager.PROVIDER_TYPE_ANIME),                ProviderManager.PROVIDER_TYPE_ANIME));        navItems.add(new AbsNavDrawerItem.ScreenNavDrawerItem(R.string.preferences, R.drawable.ic_nav_settings,                PreferencesActivity.getIntent(getContext())));        // if (PrefUtils.get(getActivity(), Prefs.SHOW_VPN, true) && vpnhtChecker.isDownloadAvailable()) {        //     navItems.add(mVPNItem = new AbsNavDrawerItem.VPNNavDrawerItem(R.string.vpn, R.drawable.ic_nav_vpn, VPNManager.getLatestInstance().isConnected()));        // }        if (mAdapter != null) {            mAdapter.setItems(navItems);        }        VPNManager.State state = VPNManager.getCurrentState();        AbsNavDrawerItem.VPNNavDrawerItem vpnItem = getVPNItem();        if(vpnItem != null) {            if (state.equals(VPNManager.State.DISCONNECTED)) {                vpnItem.setSwitchValue(false);                vpnItem.showProgress(false);            } else if(state.equals(VPNManager.State.CONNECTING)) {                vpnItem.showProgress(true);            } else if(state.equals(VPNManager.State.CONNECTED)) {                vpnItem.setSwitchValue(true);                vpnItem.showProgress(false);            }        }        return navItems;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/NavigationDrawerFragment.java", "stars": "4", "class": {"name": "NavigationDrawerFragment", "extends": "Fragment", "implements": ["NavigationAdapter", "NavigationAdapter"], "modifiers": ["public"]}}, {"method_name": "onSaveInstanceState", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSaveInstanceState(Bundle outState) {        super.onSaveInstanceState(outState);        outState.putInt(STATE_SELECTED_POSITION, mCurrentSelectedPosition);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/NavigationDrawerFragment.java", "stars": "4", "class": {"name": "NavigationDrawerFragment", "extends": "Fragment", "implements": ["NavigationAdapter", "NavigationAdapter"], "modifiers": ["public"]}}, {"method_name": "onConfigurationChanged", "params": ["Configuration"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onConfigurationChanged(Configuration newConfig) {        super.onConfigurationChanged(newConfig);        // Forward the new configuration the drawer toggle component.        mDrawerToggle.onConfigurationChanged(newConfig);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/NavigationDrawerFragment.java", "stars": "4", "class": {"name": "NavigationDrawerFragment", "extends": "Fragment", "implements": ["NavigationAdapter", "NavigationAdapter"], "modifiers": ["public"]}}, {"method_name": "getSelectedPosition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getSelectedPosition() {        return mCurrentSelectedPosition;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/NavigationDrawerFragment.java", "stars": "4", "class": {"name": "NavigationDrawerFragment", "extends": "Fragment", "implements": ["NavigationAdapter", "NavigationAdapter"], "modifiers": ["public"]}}, {"method_name": "getVPNItem", "params": [], "throws": null, "modifiers": ["public"], "return_type": "AbsNavDrawerItem", "snippet": "    public AbsNavDrawerItem.VPNNavDrawerItem getVPNItem() {        return mVPNItem;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/NavigationDrawerFragment.java", "stars": "4", "class": {"name": "NavigationDrawerFragment", "extends": "Fragment", "implements": ["NavigationAdapter", "NavigationAdapter"], "modifiers": ["public"]}}, {"method_name": "initialise", "params": ["ViewGroup", "DrawerLayout"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initialise(ViewGroup navigationContainer, DrawerLayout drawerLayout) {        mNavigationDrawerContainer = navigationContainer;        mDrawerLayout = drawerLayout;        //ensure the mToolbar displays the home icon (will be overriden with the burger icon)        ActionBar actionBar = getActionBar();        actionBar.setDisplayHomeAsUpEnabled(true);        actionBar.setHomeButtonEnabled(true);        // ActionBarDrawerToggle ties together the the proper interactions        // between the navigation drawer and the action bar app icon.        mDrawerToggle = new ActionBarDrawerToggle(getActivity(), mDrawerLayout, R.string.drawer_open, R.string.drawer_close) {            @Override            public void onDrawerOpened(View drawerView) {                super.onDrawerOpened(drawerView);                if (!isAdded()) return;                if (!mUserLearnedDrawer) {                    // The user manually opened the drawer; store this flag to prevent auto-showing                    // the navigation drawer automatically in the future.                    mUserLearnedDrawer = true;                    PrefUtils.save(getActivity(), Prefs.DRAWER_LEARNED, true);                }            }            @Override            public void onDrawerSlide(View drawerView, float slideOffset) {                super.onDrawerSlide(drawerView, 0);            }        };        // If the user hasn't 'learned' about the drawer, open it to introduce them to the drawer,        // per the navigation drawer design guidelines.        if (!mUserLearnedDrawer && !mFromSavedInstanceState) {            mDrawerLayout.openDrawer(mNavigationDrawerContainer);        }        // Defer code dependent on restoration of previous instance state.        mDrawerLayout.post(new Runnable() {            @Override            public void run() {                mDrawerToggle.syncState();            }        });        mDrawerLayout.addDrawerListener(mDrawerToggle);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/NavigationDrawerFragment.java", "stars": "4", "class": {"name": "NavigationDrawerFragment", "extends": "Fragment", "implements": ["NavigationAdapter", "NavigationAdapter"], "modifiers": ["public"]}}, {"method_name": "getActionBar", "params": [], "throws": null, "modifiers": ["private"], "return_type": "ActionBar", "snippet": "    private ActionBar getActionBar() {        return ((AppCompatActivity) getActivity()).getSupportActionBar();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/NavigationDrawerFragment.java", "stars": "4", "class": {"name": "NavigationDrawerFragment", "extends": "Fragment", "implements": ["NavigationAdapter", "NavigationAdapter"], "modifiers": ["public"]}}, {"method_name": "onOptionsItemSelected", "params": ["MenuItem"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onOptionsItemSelected(MenuItem item) {        //consume the home button press        return mDrawerToggle.onOptionsItemSelected(item) || super.onOptionsItemSelected(item);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/NavigationDrawerFragment.java", "stars": "4", "class": {"name": "NavigationDrawerFragment", "extends": "Fragment", "implements": ["NavigationAdapter", "NavigationAdapter"], "modifiers": ["public"]}}, {"method_name": "onItemClick", "params": ["View", "NavigationAdapter", "AbsNavDrawerItem", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onItemClick(View v, NavigationAdapter.ItemRowHolder vh, AbsNavDrawerItem item, int position) {        switch (item.getType()) {            case AbsNavDrawerItem.TYPE_HEADER:                throw new IllegalStateException(\"Header item can not be clickable.\");            case AbsNavDrawerItem.TYPE_PROVIDER:                providerManager.setCurrentProviderType(((AbsNavDrawerItem.ProviderNavDrawerItem) item).getProviderType());                selectItem(mAdapter.getCorrectPosition(position));                break;            case AbsNavDrawerItem.TYPE_SCREEN:                getActivity().startActivity(((AbsNavDrawerItem.ScreenNavDrawerItem) item).getIntent());                mDrawerLayout.closeDrawer(mNavigationDrawerContainer);                break;            case AbsNavDrawerItem.TYPE_VPN:                if (vh.getSwitch() != null) {                    VPNManager manager = VPNManager.getLatestInstance();                    if (manager.isVPNInstalled()) {                        if (!manager.isConnected()) {                            manager.connect();                            vh.getSwitch().setChecked(true);                        } else {                            manager.disconnect();                            vh.getSwitch().setChecked(false);                        }                    } else {                        VPNInfoDialogFragment.show(getChildFragmentManager());                    }                }                break;        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/NavigationDrawerFragment.java", "stars": "4", "class": {"name": "NavigationDrawerFragment", "extends": "Fragment", "implements": ["NavigationAdapter", "NavigationAdapter"], "modifiers": ["public"]}}, {"method_name": "selectItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void selectItem(int position) {        mCurrentSelectedPosition = position;        if (mDrawerLayout != null) {            mDrawerLayout.closeDrawer(mNavigationDrawerContainer);        }        mAdapter.notifyDataSetChanged();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/NavigationDrawerFragment.java", "stars": "4", "class": {"name": "NavigationDrawerFragment", "extends": "Fragment", "implements": ["NavigationAdapter", "NavigationAdapter"], "modifiers": ["public"]}}, {"method_name": "getTitle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getTitle() {            return title;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/NavigationDrawerFragment.java", "stars": "4", "class": {"name": "AbsNavDrawerItem", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "getIcon", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getIcon() {            return icon;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/NavigationDrawerFragment.java", "stars": "4", "class": {"name": "AbsNavDrawerItem", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "int", "snippet": "        public abstract int getType();        @IntDef({TYPE_HEADER, TYPE_PROVIDER, TYPE_SCREEN, TYPE_VPN}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/NavigationDrawerFragment.java", "stars": "4", "class": {"name": "AbsNavDrawerItem", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "            public int getType() {                return TYPE_VPN;            }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/NavigationDrawerFragment.java", "stars": "4", "class": {"name": "VPNNavDrawerItem", "extends": "AbsNavDrawerItem", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setRowHolder", "params": ["NavigationAdapter"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "            public void setRowHolder(NavigationAdapter.ItemRowHolder rowHolder) {                mRowHolder = rowHolder;            }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/NavigationDrawerFragment.java", "stars": "4", "class": {"name": "VPNNavDrawerItem", "extends": "AbsNavDrawerItem", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isSwitch", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "            public boolean isSwitch() {                return mIsSwitch;            }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/NavigationDrawerFragment.java", "stars": "4", "class": {"name": "VPNNavDrawerItem", "extends": "AbsNavDrawerItem", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSwitchValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "            public boolean getSwitchValue() {                return mSwitchValue;            }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/NavigationDrawerFragment.java", "stars": "4", "class": {"name": "VPNNavDrawerItem", "extends": "AbsNavDrawerItem", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setSwitchValue", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "            public void setSwitchValue(boolean b) {                if (mRowHolder != null) {                    mRowHolder.getSwitch().setChecked(b);                }            }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/NavigationDrawerFragment.java", "stars": "4", "class": {"name": "VPNNavDrawerItem", "extends": "AbsNavDrawerItem", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "showProgress", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "            public void showProgress(boolean b) {                mShowProgress = b;                if (mRowHolder != null) {                    mRowHolder.getProgressBar().setVisibility(b ? View.VISIBLE : View.INVISIBLE);                    if (mIsSwitch) {                        mRowHolder.getSwitch().setVisibility(b ? View.INVISIBLE : View.VISIBLE);                    }                }            }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/NavigationDrawerFragment.java", "stars": "4", "class": {"name": "VPNNavDrawerItem", "extends": "AbsNavDrawerItem", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "showProgress", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "            public boolean showProgress() {                return mShowProgress;            }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/NavigationDrawerFragment.java", "stars": "4", "class": {"name": "VPNNavDrawerItem", "extends": "AbsNavDrawerItem", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "            public int getType() {                return TYPE_SCREEN;            }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/NavigationDrawerFragment.java", "stars": "4", "class": {"name": "ScreenNavDrawerItem", "extends": "AbsNavDrawerItem", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getIntent", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Intent", "snippet": "            public Intent getIntent() {                return intent;            }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/NavigationDrawerFragment.java", "stars": "4", "class": {"name": "ScreenNavDrawerItem", "extends": "AbsNavDrawerItem", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "            public int getType() {                return TYPE_HEADER;            }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/NavigationDrawerFragment.java", "stars": "4", "class": {"name": "HeaderNavDrawerItem", "extends": "AbsNavDrawerItem", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getProviderType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "            public int getProviderType() {                return providerType;            }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/NavigationDrawerFragment.java", "stars": "4", "class": {"name": "ProviderNavDrawerItem", "extends": "AbsNavDrawerItem", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "            public int getType() {                return TYPE_PROVIDER;            }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/NavigationDrawerFragment.java", "stars": "4", "class": {"name": "ProviderNavDrawerItem", "extends": "AbsNavDrawerItem", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "BleManager", "snippet": "    public static BleManager getInstance() {        return BleManagerHolder.sBleManager;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": ["Application"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init(Application app) {        if (context == null && app != null) {            context = app;            if (isSupportBle()) {                bluetoothManager = (BluetoothManager) context.getSystemService(Context.BLUETOOTH_SERVICE);            }            bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();            multipleBluetoothController = new MultipleBluetoothController();            bleScanRuleConfig = new BleScanRuleConfig();        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getContext", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Context", "snippet": "    public Context getContext() {        return context;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBluetoothManager", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BluetoothManager", "snippet": "    public BluetoothManager getBluetoothManager() {        return bluetoothManager;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBluetoothAdapter", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BluetoothAdapter", "snippet": "    public BluetoothAdapter getBluetoothAdapter() {        return bluetoothAdapter;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getScanRuleConfig", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BleScanRuleConfig", "snippet": "    public BleScanRuleConfig getScanRuleConfig() {        return bleScanRuleConfig;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMultipleBluetoothController", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MultipleBluetoothController", "snippet": "    public MultipleBluetoothController getMultipleBluetoothController() {        return multipleBluetoothController;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initScanRule", "params": ["BleScanRuleConfig"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initScanRule(BleScanRuleConfig config) {        this.bleScanRuleConfig = config;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMaxConnectCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getMaxConnectCount() {        return maxConnectCount;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMaxConnectCount", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "BleManager", "snippet": "    public BleManager setMaxConnectCount(int count) {        if (count > DEFAULT_MAX_MULTIPLE_DEVICE)            count = DEFAULT_MAX_MULTIPLE_DEVICE;        this.maxConnectCount = count;        return this;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOperateTimeout", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getOperateTimeout() {        return operateTimeout;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOperateTimeout", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "BleManager", "snippet": "    public BleManager setOperateTimeout(int count) {        this.operateTimeout = count;        return this;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getReConnectCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getReConnectCount() {        return reConnectCount;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getReConnectInterval", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getReConnectInterval() {        return reConnectInterval;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setReConnectCount", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "BleManager", "snippet": "    public BleManager setReConnectCount(int count) {        return setReConnectCount(count, DEFAULT_CONNECT_RETRY_INTERVAL);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setReConnectCount", "params": ["int", "long"], "throws": null, "modifiers": ["public"], "return_type": "BleManager", "snippet": "    public BleManager setReConnectCount(int count, long interval) {        if (count > 10)            count = 10;        if (interval < 0)            interval = 0;        this.reConnectCount = count;        this.reConnectInterval = interval;        return this;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSplitWriteNum", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getSplitWriteNum() {        return splitWriteNum;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSplitWriteNum", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "BleManager", "snippet": "    public BleManager setSplitWriteNum(int num) {        if (num > 0) {            this.splitWriteNum = num;        }        return this;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getConnectOverTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getConnectOverTime() {        return connectOverTime;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setConnectOverTime", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "BleManager", "snippet": "    public BleManager setConnectOverTime(long time) {        if (time <= 0) {            time = 100;        }        this.connectOverTime = time;        return this;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "enableLog", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "BleManager", "snippet": "    public BleManager enableLog(boolean enable) {        BleLog.isPrint = enable;        return this;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "scan", "params": ["BleScanCallback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void scan(BleScanCallback callback) {        if (callback == null) {            throw new IllegalArgumentException(\"BleScanCallback can not be Null!\");        }        if (!isBlueEnable()) {            BleLog.e(\"Bluetooth not enable!\");            callback.onScanStarted(false);            return;        }        UUID[] serviceUuids = bleScanRuleConfig.getServiceUuids();        String[] deviceNames = bleScanRuleConfig.getDeviceNames();        String deviceMac = bleScanRuleConfig.getDeviceMac();        boolean fuzzy = bleScanRuleConfig.isFuzzy();        long timeOut = bleScanRuleConfig.getScanTimeOut();        BleScanner.getInstance().scan(serviceUuids, deviceNames, deviceMac, fuzzy, timeOut, callback);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "scanAndConnect", "params": ["BleScanAndConnectCallback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void scanAndConnect(BleScanAndConnectCallback callback) {        if (callback == null) {            throw new IllegalArgumentException(\"BleScanAndConnectCallback can not be Null!\");        }        if (!isBlueEnable()) {            BleLog.e(\"Bluetooth not enable!\");            callback.onScanStarted(false);            return;        }        UUID[] serviceUuids = bleScanRuleConfig.getServiceUuids();        String[] deviceNames = bleScanRuleConfig.getDeviceNames();        String deviceMac = bleScanRuleConfig.getDeviceMac();        boolean fuzzy = bleScanRuleConfig.isFuzzy();        long timeOut = bleScanRuleConfig.getScanTimeOut();        BleScanner.getInstance().scanAndConnect(serviceUuids, deviceNames, deviceMac, fuzzy, timeOut, callback);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "connect", "params": ["BleDevice", "BleGattCallback"], "throws": null, "modifiers": ["public"], "return_type": "BluetoothGatt", "snippet": "    public BluetoothGatt connect(BleDevice bleDevice, BleGattCallback bleGattCallback) {        if (bleGattCallback == null) {            throw new IllegalArgumentException(\"BleGattCallback can not be Null!\");        }        if (!isBlueEnable()) {            BleLog.e(\"Bluetooth not enable!\");            bleGattCallback.onConnectFail(bleDevice, new OtherException(\"Bluetooth not enable!\"));            return null;        }        if (Looper.myLooper() == null || Looper.myLooper() != Looper.getMainLooper()) {            BleLog.w(\"Be careful: currentThread is not MainThread!\");        }        if (bleDevice == null || bleDevice.getDevice() == null) {            bleGattCallback.onConnectFail(bleDevice, new OtherException(\"Not Found Device Exception Occurred!\"));        } else {            BleBluetooth bleBluetooth = multipleBluetoothController.buildConnectingBle(bleDevice);            boolean autoConnect = bleScanRuleConfig.isAutoConnect();            return bleBluetooth.connect(bleDevice, autoConnect, bleGattCallback);        }        return null;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "connect", "params": ["String", "BleGattCallback"], "throws": null, "modifiers": ["public"], "return_type": "BluetoothGatt", "snippet": "    public BluetoothGatt connect(String mac, BleGattCallback bleGattCallback) {        BluetoothDevice bluetoothDevice = getBluetoothAdapter().getRemoteDevice(mac);        BleDevice bleDevice = new BleDevice(bluetoothDevice, 0, null, 0);        return connect(bleDevice, bleGattCallback);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "cancelScan", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void cancelScan() {        BleScanner.getInstance().stopLeScan();    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "notify", "params": ["BleDevice", "String", "String", "BleNotifyCallback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void notify(BleDevice bleDevice,                       String uuid_service,                       String uuid_notify,                       BleNotifyCallback callback) {        notify(bleDevice, uuid_service, uuid_notify, false, callback);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "notify", "params": ["BleDevice", "String", "String", "boolean", "BleNotifyCallback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void notify(BleDevice bleDevice,                       String uuid_service,                       String uuid_notify,                       boolean useCharacteristicDescriptor,                       BleNotifyCallback callback) {        if (callback == null) {            throw new IllegalArgumentException(\"BleNotifyCallback can not be Null!\");        }        BleBluetooth bleBluetooth = multipleBluetoothController.getBleBluetooth(bleDevice);        if (bleBluetooth == null) {            callback.onNotifyFailure(new OtherException(\"This device not connect!\"));        } else {            bleBluetooth.newBleConnector()                    .withUUIDString(uuid_service, uuid_notify)                    .enableCharacteristicNotify(callback, uuid_notify, useCharacteristicDescriptor);        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "indicate", "params": ["BleDevice", "String", "String", "BleIndicateCallback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void indicate(BleDevice bleDevice,                         String uuid_service,                         String uuid_indicate,                         BleIndicateCallback callback) {        indicate(bleDevice, uuid_service, uuid_indicate, false, callback);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "indicate", "params": ["BleDevice", "String", "String", "boolean", "BleIndicateCallback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void indicate(BleDevice bleDevice,                         String uuid_service,                         String uuid_indicate,                         boolean useCharacteristicDescriptor,                         BleIndicateCallback callback) {        if (callback == null) {            throw new IllegalArgumentException(\"BleIndicateCallback can not be Null!\");        }        BleBluetooth bleBluetooth = multipleBluetoothController.getBleBluetooth(bleDevice);        if (bleBluetooth == null) {            callback.onIndicateFailure(new OtherException(\"This device not connect!\"));        } else {            bleBluetooth.newBleConnector()                    .withUUIDString(uuid_service, uuid_indicate)                    .enableCharacteristicIndicate(callback, uuid_indicate, useCharacteristicDescriptor);        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "stopNotify", "params": ["BleDevice", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean stopNotify(BleDevice bleDevice,                              String uuid_service,                              String uuid_notify) {        return stopNotify(bleDevice, uuid_service, uuid_notify, false);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "stopNotify", "params": ["BleDevice", "String", "String", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean stopNotify(BleDevice bleDevice,                              String uuid_service,                              String uuid_notify,                              boolean useCharacteristicDescriptor) {        BleBluetooth bleBluetooth = multipleBluetoothController.getBleBluetooth(bleDevice);        if (bleBluetooth == null) {            return false;        }        boolean success = bleBluetooth.newBleConnector()                .withUUIDString(uuid_service, uuid_notify)                .disableCharacteristicNotify(useCharacteristicDescriptor);        if (success) {            bleBluetooth.removeNotifyCallback(uuid_notify);        }        return success;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "stopIndicate", "params": ["BleDevice", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean stopIndicate(BleDevice bleDevice,                                String uuid_service,                                String uuid_indicate) {        return stopIndicate(bleDevice, uuid_service, uuid_indicate, false);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "stopIndicate", "params": ["BleDevice", "String", "String", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean stopIndicate(BleDevice bleDevice,                                String uuid_service,                                String uuid_indicate,                                boolean useCharacteristicDescriptor) {        BleBluetooth bleBluetooth = multipleBluetoothController.getBleBluetooth(bleDevice);        if (bleBluetooth == null) {            return false;        }        boolean success = bleBluetooth.newBleConnector()                .withUUIDString(uuid_service, uuid_indicate)                .disableCharacteristicIndicate(useCharacteristicDescriptor);        if (success) {            bleBluetooth.removeIndicateCallback(uuid_indicate);        }        return success;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "write", "params": ["BleDevice", "String", "String", "byte", "BleWriteCallback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void write(BleDevice bleDevice,                      String uuid_service,                      String uuid_write,                      byte[] data,                      BleWriteCallback callback) {        write(bleDevice, uuid_service, uuid_write, data, true, callback);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "write", "params": ["BleDevice", "String", "String", "byte", "boolean", "BleWriteCallback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void write(BleDevice bleDevice,                      String uuid_service,                      String uuid_write,                      byte[] data,                      boolean split,                      BleWriteCallback callback) {        write(bleDevice, uuid_service, uuid_write, data, split, true, 0, callback);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "write", "params": ["BleDevice", "String", "String", "byte", "boolean", "boolean", "long", "BleWriteCallback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void write(BleDevice bleDevice,                      String uuid_service,                      String uuid_write,                      byte[] data,                      boolean split,                      boolean sendNextWhenLastSuccess,                      long intervalBetweenTwoPackage,                      BleWriteCallback callback) {        if (callback == null) {            throw new IllegalArgumentException(\"BleWriteCallback can not be Null!\");        }        if (data == null) {            BleLog.e(\"data is Null!\");            callback.onWriteFailure(new OtherException(\"data is Null!\"));            return;        }        if (data.length > 20 && !split) {            BleLog.w(\"Be careful: data's length beyond 20! Ensure MTU higher than 23, or use spilt write!\");        }        BleBluetooth bleBluetooth = multipleBluetoothController.getBleBluetooth(bleDevice);        if (bleBluetooth == null) {            callback.onWriteFailure(new OtherException(\"This device not connect!\"));        } else {            if (split && data.length > getSplitWriteNum()) {                new SplitWriter().splitWrite(bleBluetooth, uuid_service, uuid_write, data,                        sendNextWhenLastSuccess, intervalBetweenTwoPackage, callback);            } else {                bleBluetooth.newBleConnector()                        .withUUIDString(uuid_service, uuid_write)                        .writeCharacteristic(data, callback, uuid_write);            }        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "read", "params": ["BleDevice", "String", "String", "BleReadCallback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void read(BleDevice bleDevice,                     String uuid_service,                     String uuid_read,                     BleReadCallback callback) {        if (callback == null) {            throw new IllegalArgumentException(\"BleReadCallback can not be Null!\");        }        BleBluetooth bleBluetooth = multipleBluetoothController.getBleBluetooth(bleDevice);        if (bleBluetooth == null) {            callback.onReadFailure(new OtherException(\"This device is not connected!\"));        } else {            bleBluetooth.newBleConnector()                    .withUUIDString(uuid_service, uuid_read)                    .readCharacteristic(callback, uuid_read);        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readRssi", "params": ["BleDevice", "BleRssiCallback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void readRssi(BleDevice bleDevice,                         BleRssiCallback callback) {        if (callback == null) {            throw new IllegalArgumentException(\"BleRssiCallback can not be Null!\");        }        BleBluetooth bleBluetooth = multipleBluetoothController.getBleBluetooth(bleDevice);        if (bleBluetooth == null) {            callback.onRssiFailure(new OtherException(\"This device is not connected!\"));        } else {            bleBluetooth.newBleConnector().readRemoteRssi(callback);        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMtu", "params": ["BleDevice", "int", "BleMtuChangedCallback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMtu(BleDevice bleDevice,                       int mtu,                       BleMtuChangedCallback callback) {        if (callback == null) {            throw new IllegalArgumentException(\"BleMtuChangedCallback can not be Null!\");        }        if (mtu > DEFAULT_MAX_MTU) {            BleLog.e(\"requiredMtu should lower than 512 !\");            callback.onSetMTUFailure(new OtherException(\"requiredMtu should lower than 512 !\"));            return;        }        if (mtu < DEFAULT_MTU) {            BleLog.e(\"requiredMtu should higher than 23 !\");            callback.onSetMTUFailure(new OtherException(\"requiredMtu should higher than 23 !\"));            return;        }        BleBluetooth bleBluetooth = multipleBluetoothController.getBleBluetooth(bleDevice);        if (bleBluetooth == null) {            callback.onSetMTUFailure(new OtherException(\"This device is not connected!\"));        } else {            bleBluetooth.newBleConnector().setMtu(mtu, callback);        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "requestConnectionPriority", "params": ["BleDevice", "int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean requestConnectionPriority(BleDevice bleDevice, int connectionPriority) {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {            BleBluetooth bleBluetooth = multipleBluetoothController.getBleBluetooth(bleDevice);            if (bleBluetooth == null) {                return false;            } else {                return bleBluetooth.newBleConnector().requestConnectionPriority(connectionPriority);            }        }        return false;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isSupportBle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isSupportBle() {        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2                && context.getApplicationContext().getPackageManager().hasSystemFeature(PackageManager.FEATURE_BLUETOOTH_LE);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "enableBluetooth", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void enableBluetooth() {        if (bluetoothAdapter != null) {            bluetoothAdapter.enable();        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "disableBluetooth", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void disableBluetooth() {        if (bluetoothAdapter != null) {            if (bluetoothAdapter.isEnabled())                bluetoothAdapter.disable();        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isBlueEnable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isBlueEnable() {        return bluetoothAdapter != null && bluetoothAdapter.isEnabled();    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "convertBleDevice", "params": ["BluetoothDevice"], "throws": null, "modifiers": ["public"], "return_type": "BleDevice", "snippet": "    public BleDevice convertBleDevice(BluetoothDevice bluetoothDevice) {        return new BleDevice(bluetoothDevice);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "convertBleDevice", "params": ["ScanResult"], "throws": null, "modifiers": ["public"], "return_type": "BleDevice", "snippet": "    public BleDevice convertBleDevice(ScanResult scanResult) {        if (scanResult == null) {            throw new IllegalArgumentException(\"scanResult can not be Null!\");        }        BluetoothDevice bluetoothDevice = scanResult.getDevice();        int rssi = scanResult.getRssi();        ScanRecord scanRecord = scanResult.getScanRecord();        byte[] bytes = null;        if (scanRecord != null)            bytes = scanRecord.getBytes();        long timestampNanos = scanResult.getTimestampNanos();        return new BleDevice(bluetoothDevice, rssi, bytes, timestampNanos);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBleBluetooth", "params": ["BleDevice"], "throws": null, "modifiers": ["public"], "return_type": "BleBluetooth", "snippet": "    public BleBluetooth getBleBluetooth(BleDevice bleDevice) {        if (multipleBluetoothController != null) {            return multipleBluetoothController.getBleBluetooth(bleDevice);        }        return null;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBluetoothGatt", "params": ["BleDevice"], "throws": null, "modifiers": ["public"], "return_type": "BluetoothGatt", "snippet": "    public BluetoothGatt getBluetoothGatt(BleDevice bleDevice) {        BleBluetooth bleBluetooth = getBleBluetooth(bleDevice);        if (bleBluetooth != null)            return bleBluetooth.getBluetoothGatt();        return null;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBluetoothGattServices", "params": ["BleDevice"], "throws": null, "modifiers": ["public"], "return_type": "List<BluetoothGattService>", "snippet": "    public List<BluetoothGattService> getBluetoothGattServices(BleDevice bleDevice) {        BluetoothGatt gatt = getBluetoothGatt(bleDevice);        if (gatt != null) {            return gatt.getServices();        }        return null;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBluetoothGattCharacteristics", "params": ["BluetoothGattService"], "throws": null, "modifiers": ["public"], "return_type": "List<BluetoothGattCharacteristic>", "snippet": "    public List<BluetoothGattCharacteristic> getBluetoothGattCharacteristics(BluetoothGattService service) {        return service.getCharacteristics();    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeConnectGattCallback", "params": ["BleDevice"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeConnectGattCallback(BleDevice bleDevice) {        BleBluetooth bleBluetooth = getBleBluetooth(bleDevice);        if (bleBluetooth != null)            bleBluetooth.removeConnectGattCallback();    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeRssiCallback", "params": ["BleDevice"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeRssiCallback(BleDevice bleDevice) {        BleBluetooth bleBluetooth = getBleBluetooth(bleDevice);        if (bleBluetooth != null)            bleBluetooth.removeRssiCallback();    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeMtuChangedCallback", "params": ["BleDevice"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeMtuChangedCallback(BleDevice bleDevice) {        BleBluetooth bleBluetooth = getBleBluetooth(bleDevice);        if (bleBluetooth != null)            bleBluetooth.removeMtuChangedCallback();    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeNotifyCallback", "params": ["BleDevice", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeNotifyCallback(BleDevice bleDevice, String uuid_notify) {        BleBluetooth bleBluetooth = getBleBluetooth(bleDevice);        if (bleBluetooth != null)            bleBluetooth.removeNotifyCallback(uuid_notify);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeIndicateCallback", "params": ["BleDevice", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeIndicateCallback(BleDevice bleDevice, String uuid_indicate) {        BleBluetooth bleBluetooth = getBleBluetooth(bleDevice);        if (bleBluetooth != null)            bleBluetooth.removeIndicateCallback(uuid_indicate);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeWriteCallback", "params": ["BleDevice", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeWriteCallback(BleDevice bleDevice, String uuid_write) {        BleBluetooth bleBluetooth = getBleBluetooth(bleDevice);        if (bleBluetooth != null)            bleBluetooth.removeWriteCallback(uuid_write);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeReadCallback", "params": ["BleDevice", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeReadCallback(BleDevice bleDevice, String uuid_read) {        BleBluetooth bleBluetooth = getBleBluetooth(bleDevice);        if (bleBluetooth != null)            bleBluetooth.removeReadCallback(uuid_read);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clearCharacterCallback", "params": ["BleDevice"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clearCharacterCallback(BleDevice bleDevice) {        BleBluetooth bleBluetooth = getBleBluetooth(bleDevice);        if (bleBluetooth != null)            bleBluetooth.clearCharacterCallback();    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getScanSate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BleScanState", "snippet": "    public BleScanState getScanSate() {        return BleScanner.getInstance().getScanState();    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllConnectedDevice", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<BleDevice>", "snippet": "    public List<BleDevice> getAllConnectedDevice() {        if (multipleBluetoothController == null)            return null;        return multipleBluetoothController.getDeviceList();    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getConnectState", "params": ["BleDevice"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getConnectState(BleDevice bleDevice) {        if (bleDevice != null) {            return bluetoothManager.getConnectionState(bleDevice.getDevice(), BluetoothProfile.GATT);        } else {            return BluetoothProfile.STATE_DISCONNECTED;        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isConnected", "params": ["BleDevice"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isConnected(BleDevice bleDevice) {        return getConnectState(bleDevice) == BluetoothProfile.STATE_CONNECTED;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isConnected", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isConnected(String mac) {        List<BleDevice> list = getAllConnectedDevice();        for (BleDevice bleDevice : list) {            if (bleDevice != null) {                if (bleDevice.getMac().equals(mac)) {                    return true;                }            }        }        return false;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "disconnect", "params": ["BleDevice"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void disconnect(BleDevice bleDevice) {        if (multipleBluetoothController != null) {            multipleBluetoothController.disconnect(bleDevice);        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "disconnectAllDevice", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void disconnectAllDevice() {        if (multipleBluetoothController != null) {            multipleBluetoothController.disconnectAllDevice();        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "destroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void destroy() {        if (multipleBluetoothController != null) {            multipleBluetoothController.destroy();        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/BleManager.java", "stars": "2", "class": {"name": "BleManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getComparator", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Comparator<String>", "snippet": "    public static Comparator<String> getComparator(){        //\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u662f\u4e00\u4e2a\u63a5\u53e3,\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8fd4\u56de\u8fd9\u4e2a\u63a5\u53e3\u7684\u533f\u540d\u5185\u90e8\u7c7b        /*return new Comparator<String>() {            @Override            public int compare(String o1, String o2) {                //\u6309\u7167\u5b57\u7b26\u4e32\u7684\u964d\u5e8f\u6392\u5e8f                return o2.length()-o1.length();            }        };*/        //\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u662f\u4e00\u4e2a\u51fd\u6570\u5f0f\u63a5\u53e3,\u6240\u6709\u6211\u4eec\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2aLambda\u8868\u8fbe\u5f0f        /*return (String o1, String o2)->{            //\u6309\u7167\u5b57\u7b26\u4e32\u7684\u964d\u5e8f\u6392\u5e8f            return o2.length()-o1.length();        };*/        //\u7ee7\u7eed\u4f18\u5316Lambda\u8868\u8fbe\u5f0f        return (o1, o2)->o2.length()-o1.length();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/23.%E3%80%90%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3%E3%80%91-%E7%AC%94%E8%AE%B0/code/12_FunctionalInterface/src/com/itheima/demo03/LambdaTest/Demo02Comparator.java", "stars": "2", "class": {"name": "Demo02Comparator", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //\u521b\u5efa\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4        String[] arr = {\"aaa\",\"b\",\"cccccc\",\"dddddddddddd\"};        //\u8f93\u51fa\u6392\u5e8f\u524d\u7684\u6570\u7ec4        System.out.println(Arrays.toString(arr));//[aaa, b, cccccc, dddddddddddd]        //\u8c03\u7528Arrays\u4e2d\u7684sort\u65b9\u6cd5,\u5bf9\u5b57\u7b26\u4e32\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f        Arrays.sort(arr,getComparator());        //\u8f93\u51fa\u6392\u5e8f\u540e\u7684\u6570\u7ec4        System.out.println(Arrays.toString(arr));//[dddddddddddd, cccccc, aaa, b]    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/23.%E3%80%90%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3%E3%80%91-%E7%AC%94%E8%AE%B0/code/12_FunctionalInterface/src/com/itheima/demo03/LambdaTest/Demo02Comparator.java", "stars": "2", "class": {"name": "Demo02Comparator", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "execute", "params": ["AbstractInsnNode", "Interpreter<BasicValue>"], "throws": ["AnalyzerException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void execute(AbstractInsnNode insn, Interpreter<BasicValue> interpreter)            throws AnalyzerException {        boolean never = false;        if (never) {            super.execute(insn, interpreter);            return;        }        int insnOpcode = insn.getOpcode();        if (insnOpcode == Opcodes.MONITORENTER || insnOpcode == Opcodes.MONITOREXIT) {            BasicValue pop = pop();            interpreter.unaryOperation(insn, pop);            int local = -1;            for (int i = 0; i < getLocals(); i++) {                if (getLocal(i) == pop) local = i;            }            if (local > -1) {                if (insnOpcode == Opcodes.MONITORENTER) {                    monitorEnter(local);                } else {                    monitorExit(local);                }            }        } else {            super.execute(insn, interpreter);        }    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/weave/MonitoringFrame.java", "stars": "3", "class": {"name": "MonitoringFrame", "extends": "Frame", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "init", "params": ["Frame"], "throws": null, "modifiers": ["public"], "return_type": "Frame<BasicValue>", "snippet": "    public Frame<BasicValue> init(Frame frame) {        super.init(frame);        if (frame instanceof MonitoringFrame) {            monitored = new LinkedList<Integer>(MonitoringFrame.class.cast(frame).monitored);        } else {            monitored = new LinkedList<Integer>();        }        return this;    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/weave/MonitoringFrame.java", "stars": "3", "class": {"name": "MonitoringFrame", "extends": "Frame", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getMonitored", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int[] getMonitored() {        int[] res = new int[monitored.size()];        for (int i = 0; i < monitored.size(); i++) {            res[i] = monitored.get(i);        }        return res;    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/weave/MonitoringFrame.java", "stars": "3", "class": {"name": "MonitoringFrame", "extends": "Frame", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "monitorEnter", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void monitorEnter(int local) {        monitored.add(new Integer(local));    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/weave/MonitoringFrame.java", "stars": "3", "class": {"name": "MonitoringFrame", "extends": "Frame", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "monitorExit", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void monitorExit(int local) {        int index = monitored.lastIndexOf(local);        if (index == -1) {            // throw new IllegalStateException(\"Monitor Exit never entered\");        } else {            monitored.remove(index);        }    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/weave/MonitoringFrame.java", "stars": "3", "class": {"name": "MonitoringFrame", "extends": "Frame", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ProductId", "snippet": "  public ProductId getId() {    return id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/typehandler/Product.java", "stars": "15", "class": {"name": "Product", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["ProductId"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setId(ProductId id) {    this.id = id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/typehandler/Product.java", "stars": "15", "class": {"name": "Product", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getName() {    return name;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/typehandler/Product.java", "stars": "15", "class": {"name": "Product", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setName(String name) {    this.name = name;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/typehandler/Product.java", "stars": "15", "class": {"name": "Product", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getValue() {      return value;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/typehandler/Product.java", "stars": "15", "class": {"name": "ProductId", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setValue", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setValue(Integer value) {      this.value = value;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/typehandler/Product.java", "stars": "15", "class": {"name": "ProductId", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "ProductId", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void setNonNullParameter(PreparedStatement ps, int i, ProductId parameter, JdbcType jdbcType) throws SQLException {      ps.setInt(i, parameter.getValue());    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/typehandler/Product.java", "stars": "15", "class": {"name": "ProductIdTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "ProductId", "snippet": "    public ProductId getNullableResult(ResultSet rs, String columnName) throws SQLException {      ProductId id = new ProductId();      id.setValue(rs.getInt(columnName));      return id;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/typehandler/Product.java", "stars": "15", "class": {"name": "ProductIdTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "ProductId", "snippet": "    public ProductId getNullableResult(ResultSet rs, int columnIndex) throws SQLException {      ProductId id = new ProductId();      id.setValue(rs.getInt(columnIndex));      return id;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/typehandler/Product.java", "stars": "15", "class": {"name": "ProductIdTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getNullableResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "ProductId", "snippet": "    public ProductId getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {      ProductId id = new ProductId();      id.setValue(cs.getInt(columnIndex));      return id;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/typehandler/Product.java", "stars": "15", "class": {"name": "ProductIdTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "ProductId", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void setNonNullParameter(PreparedStatement ps, int i, ProductId parameter, JdbcType jdbcType) throws SQLException {    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/typehandler/Product.java", "stars": "15", "class": {"name": "ConstantProductIdTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "ProductId", "snippet": "    public ProductId getNullableResult(ResultSet rs, String columnName) throws SQLException {      return getConstantId();    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/typehandler/Product.java", "stars": "15", "class": {"name": "ConstantProductIdTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "ProductId", "snippet": "    public ProductId getNullableResult(ResultSet rs, int columnIndex) throws SQLException {      return getConstantId();    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/typehandler/Product.java", "stars": "15", "class": {"name": "ConstantProductIdTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getNullableResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "ProductId", "snippet": "    public ProductId getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {      return getConstantId();    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/typehandler/Product.java", "stars": "15", "class": {"name": "ConstantProductIdTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getConstantId", "params": [], "throws": null, "modifiers": ["private"], "return_type": "ProductId", "snippet": "    private ProductId getConstantId() {      ProductId id = new ProductId();      id.setValue(999);      return id;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/typehandler/Product.java", "stars": "15", "class": {"name": "ConstantProductIdTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDataId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDataId() {        return dataId;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/model/EtcdConfigPropertySource.java", "stars": "4", "class": {"name": "EtcdConfigPropertySource", "extends": "PropertiesPropertySource", "implements": null, "modifiers": ["public"]}}, {"method_name": "setDataId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDataId(String dataId) {        this.dataId = dataId;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/model/EtcdConfigPropertySource.java", "stars": "4", "class": {"name": "EtcdConfigPropertySource", "extends": "PropertiesPropertySource", "implements": null, "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getType() {        return type;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/model/EtcdConfigPropertySource.java", "stars": "4", "class": {"name": "EtcdConfigPropertySource", "extends": "PropertiesPropertySource", "implements": null, "modifiers": ["public"]}}, {"method_name": "setType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setType(String type) {        this.type = type;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/model/EtcdConfigPropertySource.java", "stars": "4", "class": {"name": "EtcdConfigPropertySource", "extends": "PropertiesPropertySource", "implements": null, "modifiers": ["public"]}}, {"method_name": "isAutoRefreshed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isAutoRefreshed() {        return autoRefreshed;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/model/EtcdConfigPropertySource.java", "stars": "4", "class": {"name": "EtcdConfigPropertySource", "extends": "PropertiesPropertySource", "implements": null, "modifiers": ["public"]}}, {"method_name": "setAutoRefreshed", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAutoRefreshed(boolean autoRefreshed) {        this.autoRefreshed = autoRefreshed;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/model/EtcdConfigPropertySource.java", "stars": "4", "class": {"name": "EtcdConfigPropertySource", "extends": "PropertiesPropertySource", "implements": null, "modifiers": ["public"]}}, {"method_name": "isFirst", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isFirst() {        return first;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/model/EtcdConfigPropertySource.java", "stars": "4", "class": {"name": "EtcdConfigPropertySource", "extends": "PropertiesPropertySource", "implements": null, "modifiers": ["public"]}}, {"method_name": "setFirst", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFirst(boolean first) {        this.first = first;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/model/EtcdConfigPropertySource.java", "stars": "4", "class": {"name": "EtcdConfigPropertySource", "extends": "PropertiesPropertySource", "implements": null, "modifiers": ["public"]}}, {"method_name": "getBefore", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getBefore() {        return before;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/model/EtcdConfigPropertySource.java", "stars": "4", "class": {"name": "EtcdConfigPropertySource", "extends": "PropertiesPropertySource", "implements": null, "modifiers": ["public"]}}, {"method_name": "setBefore", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setBefore(String before) {        this.before = before;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/model/EtcdConfigPropertySource.java", "stars": "4", "class": {"name": "EtcdConfigPropertySource", "extends": "PropertiesPropertySource", "implements": null, "modifiers": ["public"]}}, {"method_name": "getAfter", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getAfter() {        return after;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/model/EtcdConfigPropertySource.java", "stars": "4", "class": {"name": "EtcdConfigPropertySource", "extends": "PropertiesPropertySource", "implements": null, "modifiers": ["public"]}}, {"method_name": "setAfter", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAfter(String after) {        this.after = after;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/model/EtcdConfigPropertySource.java", "stars": "4", "class": {"name": "EtcdConfigPropertySource", "extends": "PropertiesPropertySource", "implements": null, "modifiers": ["public"]}}, {"method_name": "copy", "params": ["EtcdConfigPropertySource"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void copy(EtcdConfigPropertySource oldProperties) {        this.autoRefreshed = oldProperties.isAutoRefreshed();        this.first = oldProperties.isFirst();        this.before = oldProperties.getBefore();        this.after = oldProperties.getAfter();    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/model/EtcdConfigPropertySource.java", "stars": "4", "class": {"name": "EtcdConfigPropertySource", "extends": "PropertiesPropertySource", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveAlias", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Class<T>", "snippet": "  public <T> Class<T> resolveAlias(String string) {    try {      if (string == null) {        return null;      }      // issue #748      String key = string.toLowerCase(Locale.ENGLISH);      Class<T> value;      if (typeAliases.containsKey(key)) {        value = (Class<T>) typeAliases.get(key);      } else {        //value = (Class<T>) Resources.classForName(string); modify by xuliang 20200407        value =(Class<T>)Object.class;      }      return value;    //} catch (ClassNotFoundException e) {   modify by xuliang 20200407    } catch (Exception e) {      throw new TypeException(\"Could not resolve type alias '\" + string + \"'.  Cause: \" + e, e);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/TypeAliasRegistry.java", "stars": "15", "class": {"name": "TypeAliasRegistry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "registerAliases", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void registerAliases(String packageName) {    registerAliases(packageName, Object.class);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/TypeAliasRegistry.java", "stars": "15", "class": {"name": "TypeAliasRegistry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "registerAliases", "params": ["String", "Class<?>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void registerAliases(String packageName, Class<?> superType) {    ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();    resolverUtil.find(new ResolverUtil.IsA(superType), packageName);    Set<Class<? extends Class<?>>> typeSet = resolverUtil.getClasses();    for (Class<?> type : typeSet) {      // Ignore inner classes and interfaces (including package-info.java)      // Skip also inner classes. See issue #6      if (!type.isAnonymousClass() && !type.isInterface() && !type.isMemberClass()) {        registerAlias(type);      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/TypeAliasRegistry.java", "stars": "15", "class": {"name": "TypeAliasRegistry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "registerAlias", "params": ["Class<?>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void registerAlias(Class<?> type) {    String alias = type.getSimpleName();    Alias aliasAnnotation = type.getAnnotation(Alias.class);    if (aliasAnnotation != null) {      alias = aliasAnnotation.value();    }    registerAlias(alias, type);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/TypeAliasRegistry.java", "stars": "15", "class": {"name": "TypeAliasRegistry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "registerAlias", "params": ["String", "Class<?>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void registerAlias(String alias, Class<?> value) {    if (alias == null) {      throw new TypeException(\"The parameter alias cannot be null\");    }    // issue #748    String key = alias.toLowerCase(Locale.ENGLISH);    if (typeAliases.containsKey(key) && typeAliases.get(key) != null && !typeAliases.get(key).equals(value)) {      throw new TypeException(\"The alias '\" + alias + \"' is already mapped to the value '\" + typeAliases.get(key).getName() + \"'.\");    }    typeAliases.put(key, value);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/TypeAliasRegistry.java", "stars": "15", "class": {"name": "TypeAliasRegistry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "registerAlias", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void registerAlias(String alias, String value) {    try {      registerAlias(alias, Resources.classForName(value));    } catch (ClassNotFoundException e) {      throw new TypeException(\"Error registering type alias \" + alias + \" for \" + value + \". Cause: \" + e, e);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/TypeAliasRegistry.java", "stars": "15", "class": {"name": "TypeAliasRegistry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTypeAliases", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Class>", "snippet": "  public Map<String, Class<?>> getTypeAliases() {    return Collections.unmodifiableMap(typeAliases);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/TypeAliasRegistry.java", "stars": "15", "class": {"name": "TypeAliasRegistry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "put", "params": ["String", "T"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void put(String id, T t) {\t\tSystem.err.println (\"*** Add \" + id + \":\" + t + \" in \" + this.getName());\t\tmap.put(id, t);\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/environment/MapEnvironment.java", "stars": "3", "class": {"name": "MapEnvironment", "extends": null, "implements": ["Environment"], "modifiers": ["public"]}}, {"method_name": "put", "params": ["List<String>", "T"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void put(List<String> list, T t) {\t\tIterator<String> iterator = list.iterator();\t\twhile (iterator.hasNext())  {\t\t\tString id = iterator.next();\t\t\tput(id, t);\t\t}\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/environment/MapEnvironment.java", "stars": "3", "class": {"name": "MapEnvironment", "extends": null, "implements": ["Environment"], "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "\tprivate String getName() {\t\treturn this.name;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/environment/MapEnvironment.java", "stars": "3", "class": {"name": "MapEnvironment", "extends": null, "implements": ["Environment"], "modifiers": ["public"]}}, {"method_name": "get", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "\tpublic T get(String id) {\t\tT t = map.get(id);\t\tSystem.err.println (\"*** Get \" + id + \":\" + t + \" from \" + this.getName());\t\treturn t;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/environment/MapEnvironment.java", "stars": "3", "class": {"name": "MapEnvironment", "extends": null, "implements": ["Environment"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\tString result = \"(\" + NL;\t\tIterator iterator = map.keySet().iterator();\t\twhile (iterator.hasNext()) {\t\t\tString key = (String)iterator.next();\t\t    T value = map.get(key);\t\t\tresult += key + \": \" + value.toString() + NL;\t\t}\t\tresult += \")\";\t\treturn result;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/environment/MapEnvironment.java", "stars": "3", "class": {"name": "MapEnvironment", "extends": null, "implements": ["Environment"], "modifiers": ["public"]}}, {"method_name": "generateCode", "params": [], "throws": ["CodeException"], "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String generateCode() throws CodeException {\t\tString result = \"\";\t\tboolean first = true;\t\t\tfor (String str: map.keySet()) {\t\t\t\tT t = map.get(str);\t\t\t\tif (t instanceof Type) {\t\t\t\t\tif (!first && this.isArg)\t\t\t\t\t\tresult += \", \";\t\t\t\t\telse\t\t\t\t\t\tfirst = false;\t\t\t\t\tType type = (Type)t;\t\t\t\t\tif (type != null)\t\t\t\t\t\tresult += type.generatePrefCode();\t\t\t\t\tresult += str;\t\t\t\t\tif (type != null)\t\t\t\t\t\tresult += type.generateSuffCode();\t\t\t\t\tif (!this.isArg)\t\t\t\t\t\tresult += \";\" + NL;\t\t\t\t\t}\t\t\t}\t\treturn result;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/environment/MapEnvironment.java", "stars": "3", "class": {"name": "MapEnvironment", "extends": null, "implements": ["Environment"], "modifiers": ["public"]}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "Month", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNonNullParameter(PreparedStatement ps, int i, Month month, JdbcType type) throws SQLException {    ps.setInt(i, month.getValue());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/MonthTypeHandler.java", "stars": "15", "class": {"name": "MonthTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Month", "snippet": "  public Month getNullableResult(ResultSet rs, String columnName) throws SQLException {    int month = rs.getInt(columnName);    return month == 0 && rs.wasNull() ? null : Month.of(month);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/MonthTypeHandler.java", "stars": "15", "class": {"name": "MonthTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Month", "snippet": "  public Month getNullableResult(ResultSet rs, int columnIndex) throws SQLException {    int month = rs.getInt(columnIndex);    return month == 0 && rs.wasNull() ? null : Month.of(month);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/MonthTypeHandler.java", "stars": "15", "class": {"name": "MonthTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Month", "snippet": "  public Month getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {    int month = cs.getInt(columnIndex);    return month == 0 && cs.wasNull() ? null : Month.of(month);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/MonthTypeHandler.java", "stars": "15", "class": {"name": "MonthTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "addTextureView", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void addTextureView() {        mTextureView = new CustomRenderView();        mTextureView.addView(getContext(), mTextureViewContainer, mRotate, this, this, mEffectFilter, mMatrixGL, mRenderer, mMode);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/CustomRenderVideoPlayer.java", "stars": "2", "class": {"name": "CustomRenderVideoPlayer", "extends": "NormalGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "generatePassword", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String generatePassword(int len) {        String AB = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";        SecureRandom rnd = new SecureRandom();        StringBuilder sb = new StringBuilder(len);        for(int i = 0; i < len; i++)            sb.append(AB.charAt(rnd.nextInt(AB.length())));        return sb.toString();    }", "url": "https://raw.githubusercontent.com/carlostojal/KeySafe/master/app/src/main/java/com/fca/keysafe/Helpers.java", "stars": "2", "class": {"name": "Helpers", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUser", "params": ["Context"], "throws": null, "modifiers": ["public"], "return_type": "User", "snippet": "    public User getUser(Context context) {        User user = new User();        String path = context.getFilesDir().toString();        try {            FileInputStream fileInputStream = new FileInputStream(new File(path + \"/user.csv\"));            InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream);            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);            String s = null;            while((s = bufferedReader.readLine()) != null) {                user.setPin(s);            }            fileInputStream.close();            bufferedReader.close();        } catch (FileNotFoundException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        }        return user;    }", "url": "https://raw.githubusercontent.com/carlostojal/KeySafe/master/app/src/main/java/com/fca/keysafe/Helpers.java", "stars": "2", "class": {"name": "Helpers", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createUser", "params": ["Context", "User"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean createUser(Context context, User user) {        String path = context.getFilesDir().toString();        try {            File file = new File(path + \"/user.csv\");            file.createNewFile();            FileOutputStream fileOutputStream = new FileOutputStream(file, true);            fileOutputStream.write((user.getPin()).getBytes());        } catch (IOException e) {            e.printStackTrace();            return false;        }        return true;    }", "url": "https://raw.githubusercontent.com/carlostojal/KeySafe/master/app/src/main/java/com/fca/keysafe/Helpers.java", "stars": "2", "class": {"name": "Helpers", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readAccounts", "params": ["Context"], "throws": null, "modifiers": ["public"], "return_type": "ArrayList<Account>", "snippet": "    public ArrayList<Account> readAccounts(Context context) {        ArrayList<Account> accounts = new ArrayList<>();        String path = context.getFilesDir().toString();        try {            FileInputStream fileInputStream = new FileInputStream(new File(path + \"/accounts.csv\"));            InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream);            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);            StringBuilder stringBuilder = new StringBuilder();            String s = null;            while((s = bufferedReader.readLine()) != null) {                accounts.add(new Account(s.split(\";\")[0], s.split(\";\")[1], s.split(\";\")[2], s.split(\";\")[3]));            }            fileInputStream.close();            s = stringBuilder.toString();            bufferedReader.close();        } catch (FileNotFoundException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        }        sortAccounts(\"lastChanged\", accounts);        return accounts;    }", "url": "https://raw.githubusercontent.com/carlostojal/KeySafe/master/app/src/main/java/com/fca/keysafe/Helpers.java", "stars": "2", "class": {"name": "Helpers", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "saveAccounts", "params": ["Context", "ArrayList<Account>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean saveAccounts(Context context, ArrayList<Account> accounts) {        String path = context.getFilesDir().toString();        try {            File file = new File(path + \"/accounts.csv\");            if(file.exists())                file.delete();            file.createNewFile();            FileOutputStream fileOutputStream = new FileOutputStream(file, true);            for(int i = 0; i < accounts.size(); i++)                fileOutputStream.write((accounts.get(i).getServiceName() + \";\" + accounts.get(i).getUsername() + \";\" + accounts.get(i).getPassword() + \";\" + accounts.get(i).getLastChanged() + \"\\n\").getBytes());        } catch (IOException e) {            e.printStackTrace();            return false;        }        return true;    }", "url": "https://raw.githubusercontent.com/carlostojal/KeySafe/master/app/src/main/java/com/fca/keysafe/Helpers.java", "stars": "2", "class": {"name": "Helpers", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sortAccounts", "params": ["String", "ArrayList<Account>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void sortAccounts(String type, ArrayList<Account> accounts) {        if(type.equals(\"serviceName\"))            Collections.sort(accounts, Account.ServiceNameComparator);        else if(type.equals(\"username\"))            Collections.sort(accounts, Account.UsernameComparator);        else            Collections.sort(accounts, Account.LastChangedComparator);    }", "url": "https://raw.githubusercontent.com/carlostojal/KeySafe/master/app/src/main/java/com/fca/keysafe/Helpers.java", "stars": "2", "class": {"name": "Helpers", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStringDate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getStringDate() {        return new SimpleDateFormat(\"dd-MM-yyyy HH:mm:ss\").format(Calendar.getInstance().getTime());    }", "url": "https://raw.githubusercontent.com/carlostojal/KeySafe/master/app/src/main/java/com/fca/keysafe/Helpers.java", "stars": "2", "class": {"name": "Helpers", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "stringToDate", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date stringToDate(String date) {        Date date1 = new Date();        try {            date1 = new SimpleDateFormat(\"dd-MM-yyyy HH:mm:ss\").parse(date);        } catch (java.text.ParseException e) {            e.printStackTrace();        }        return date1;    }", "url": "https://raw.githubusercontent.com/carlostojal/KeySafe/master/app/src/main/java/com/fca/keysafe/Helpers.java", "stars": "2", "class": {"name": "Helpers", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "interpreter", "params": ["HashMap<String,Integer>"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int interpreter(HashMap<String, Integer> var) {\t\t//super.left.interpreter(var) \uff1a \u8fd4\u56de left \u8868\u8fbe\u5f0f\u5bf9\u5e94\u7684\u503c a = 10\t\t//super.right.interpreter(var): \u8fd4\u56deright \u8868\u8fbe\u5f0f\u5bf9\u5e94\u503c b = 20\t\treturn super.left.interpreter(var) + super.right.interpreter(var);\t}", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/interpreter/AddExpression.java", "stars": "2", "class": {"name": "AddExpression", "extends": "SymbolExpression", "implements": null, "modifiers": ["public"]}}, {"method_name": "decode", "params": ["ChannelHandlerContext", "ByteBuf"], "throws": ["Exception"], "modifiers": ["protected"], "return_type": "Object", "snippet": "    protected Object decode(ChannelHandlerContext ctx, ByteBuf in) throws Exception {        in.markReaderIndex();        // \u7c7b\u578b\u504f\u79fb\u91cf        int type = (int) getUnadjustedFrameLength(in, typeFieldOffset, typeFieldLength, byteOrder);        ProtocolBody protocolBody = PackageFactory.newInstance(type);        if(protocolBody == null) {            log.debug(\"not find type: {}\", type);            return null;        }        ((AbstractProtocolBody) protocolBody).setChannel(ctx.channel());        in.resetReaderIndex();        return codec.decode(ctx, in, protocolBody);    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/netty/tcp/codec/PackageDecoder.java", "stars": "6", "class": {"name": "PackageDecoder", "extends": "LengthFieldBasedFrameDecoder", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleResult", "params": ["BleDevice"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void handleResult(final BleDevice bleDevice) {        mMainHandler.post(new Runnable() {            @Override            public void run() {                onLeScan(bleDevice);            }        });        checkDevice(bleDevice);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/scan/BleScanPresenter.java", "stars": "2", "class": {"name": "BleScanPresenter", "extends": null, "implements": ["BluetoothAdapter"], "modifiers": ["public", "abstract"]}}, {"method_name": "prepare", "params": ["String", "String", "boolean", "boolean", "long", "BleScanPresenterImp"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void prepare(String[] names, String mac, boolean fuzzy, boolean needConnect,                        long timeOut, BleScanPresenterImp bleScanPresenterImp) {        mDeviceNames = names;        mDeviceMac = mac;        mFuzzy = fuzzy;        mNeedConnect = needConnect;        mScanTimeout = timeOut;        mBleScanPresenterImp = bleScanPresenterImp;        mHandlerThread = new HandlerThread(BleScanPresenter.class.getSimpleName());        mHandlerThread.start();        mHandler = new ScanHandler(mHandlerThread.getLooper(), this);        mHandling = true;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/scan/BleScanPresenter.java", "stars": "2", "class": {"name": "BleScanPresenter", "extends": null, "implements": ["BluetoothAdapter"], "modifiers": ["public", "abstract"]}}, {"method_name": "ismNeedConnect", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean ismNeedConnect() {        return mNeedConnect;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/scan/BleScanPresenter.java", "stars": "2", "class": {"name": "BleScanPresenter", "extends": null, "implements": ["BluetoothAdapter"], "modifiers": ["public", "abstract"]}}, {"method_name": "getBleScanPresenterImp", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BleScanPresenterImp", "snippet": "    public BleScanPresenterImp getBleScanPresenterImp() {        return mBleScanPresenterImp;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/scan/BleScanPresenter.java", "stars": "2", "class": {"name": "BleScanPresenter", "extends": null, "implements": ["BluetoothAdapter"], "modifiers": ["public", "abstract"]}}, {"method_name": "onLeScan", "params": ["BluetoothDevice", "int", "byte"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onLeScan(BluetoothDevice device, int rssi, byte[] scanRecord) {        if (device == null)            return;        if (!mHandling)            return;        Message message = mHandler.obtainMessage();        message.what = BleMsg.MSG_SCAN_DEVICE;        message.obj = new BleDevice(device, rssi, scanRecord, System.currentTimeMillis());        mHandler.sendMessage(message);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/scan/BleScanPresenter.java", "stars": "2", "class": {"name": "BleScanPresenter", "extends": null, "implements": ["BluetoothAdapter"], "modifiers": ["public", "abstract"]}}, {"method_name": "checkDevice", "params": ["BleDevice"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void checkDevice(BleDevice bleDevice) {        if (TextUtils.isEmpty(mDeviceMac) && (mDeviceNames == null || mDeviceNames.length < 1)) {            correctDeviceAndNextStep(bleDevice);            return;        }        if (!TextUtils.isEmpty(mDeviceMac)) {            if (!mDeviceMac.equalsIgnoreCase(bleDevice.getMac()))                return;        }        if (mDeviceNames != null && mDeviceNames.length > 0) {            AtomicBoolean equal = new AtomicBoolean(false);            for (String name : mDeviceNames) {                String remoteName = bleDevice.getName();                if (remoteName == null)                    remoteName = \"\";                if (mFuzzy ? remoteName.contains(name) : remoteName.equals(name)) {                    equal.set(true);                }            }            if (!equal.get()) {                return;            }        }        correctDeviceAndNextStep(bleDevice);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/scan/BleScanPresenter.java", "stars": "2", "class": {"name": "BleScanPresenter", "extends": null, "implements": ["BluetoothAdapter"], "modifiers": ["public", "abstract"]}}, {"method_name": "correctDeviceAndNextStep", "params": ["BleDevice"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void correctDeviceAndNextStep(final BleDevice bleDevice) {        if (mNeedConnect) {            BleLog.i(\"devices detected  ------\"                    + \"  name:\" + bleDevice.getName()                    + \"  mac:\" + bleDevice.getMac()                    + \"  Rssi:\" + bleDevice.getRssi()                    + \"  scanRecord:\" + HexUtil.formatHexString(bleDevice.getScanRecord()));            mBleDeviceList.add(bleDevice);            mMainHandler.post(new Runnable() {                @Override                public void run() {                    BleScanner.getInstance().stopLeScan();                }            });        } else {            AtomicBoolean hasFound = new AtomicBoolean(false);            for (BleDevice result : mBleDeviceList) {                if (result.getDevice().equals(bleDevice.getDevice())) {                    hasFound.set(true);                }            }            if (!hasFound.get()) {                BleLog.i(\"device detected  ------\"                        + \"  name: \" + bleDevice.getName()                        + \"  mac: \" + bleDevice.getMac()                        + \"  Rssi: \" + bleDevice.getRssi()                        + \"  scanRecord: \" + HexUtil.formatHexString(bleDevice.getScanRecord(), true));                mBleDeviceList.add(bleDevice);                mMainHandler.post(new Runnable() {                    @Override                    public void run() {                        onScanning(bleDevice);                    }                });            }        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/scan/BleScanPresenter.java", "stars": "2", "class": {"name": "BleScanPresenter", "extends": null, "implements": ["BluetoothAdapter"], "modifiers": ["public", "abstract"]}}, {"method_name": "notifyScanStarted", "params": ["boolean"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "    public final void notifyScanStarted(final boolean success) {        mBleDeviceList.clear();        removeHandlerMsg();        if (success && mScanTimeout > 0) {            mMainHandler.postDelayed(new Runnable() {                @Override                public void run() {                    BleScanner.getInstance().stopLeScan();                }            }, mScanTimeout);        }        mMainHandler.post(new Runnable() {            @Override            public void run() {                onScanStarted(success);            }        });    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/scan/BleScanPresenter.java", "stars": "2", "class": {"name": "BleScanPresenter", "extends": null, "implements": ["BluetoothAdapter"], "modifiers": ["public", "abstract"]}}, {"method_name": "notifyScanStopped", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "    public final void notifyScanStopped() {        mHandling = false;        mHandlerThread.quit();        removeHandlerMsg();        mMainHandler.post(new Runnable() {            @Override            public void run() {                onScanFinished(mBleDeviceList);            }        });    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/scan/BleScanPresenter.java", "stars": "2", "class": {"name": "BleScanPresenter", "extends": null, "implements": ["BluetoothAdapter"], "modifiers": ["public", "abstract"]}}, {"method_name": "removeHandlerMsg", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "    public final void removeHandlerMsg() {        mMainHandler.removeCallbacksAndMessages(null);        mHandler.removeCallbacksAndMessages(null);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/scan/BleScanPresenter.java", "stars": "2", "class": {"name": "BleScanPresenter", "extends": null, "implements": ["BluetoothAdapter"], "modifiers": ["public", "abstract"]}}, {"method_name": "onScanStarted", "params": ["boolean"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void onScanStarted(boolean success);    public abstract void onLeScan(BleDevice bleDevice);    public abstract void onScanning(BleDevice bleDevice);    public abstract void onScanFinished(List<BleDevice> bleDeviceList);}", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/scan/BleScanPresenter.java", "stars": "2", "class": {"name": "BleScanPresenter", "extends": null, "implements": ["BluetoothAdapter"], "modifiers": ["public", "abstract"]}}, {"method_name": "onLeScan", "params": ["BleDevice"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void onLeScan(BleDevice bleDevice);    public abstract void onScanning(BleDevice bleDevice);    public abstract void onScanFinished(List<BleDevice> bleDeviceList);}", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/scan/BleScanPresenter.java", "stars": "2", "class": {"name": "BleScanPresenter", "extends": null, "implements": ["BluetoothAdapter"], "modifiers": ["public", "abstract"]}}, {"method_name": "onScanning", "params": ["BleDevice"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void onScanning(BleDevice bleDevice);    public abstract void onScanFinished(List<BleDevice> bleDeviceList);}", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/scan/BleScanPresenter.java", "stars": "2", "class": {"name": "BleScanPresenter", "extends": null, "implements": ["BluetoothAdapter"], "modifiers": ["public", "abstract"]}}, {"method_name": "onScanFinished", "params": ["List<BleDevice>"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void onScanFinished(List<BleDevice> bleDeviceList);}", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/scan/BleScanPresenter.java", "stars": "2", "class": {"name": "BleScanPresenter", "extends": null, "implements": ["BluetoothAdapter"], "modifiers": ["public", "abstract"]}}, {"method_name": "handleMessage", "params": ["Message"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void handleMessage(Message msg) {            BleScanPresenter bleScanPresenter = mBleScanPresenter.get();            if (bleScanPresenter != null) {                if (msg.what == BleMsg.MSG_SCAN_DEVICE) {                    final BleDevice bleDevice = (BleDevice) msg.obj;                    if (bleDevice != null) {                        bleScanPresenter.handleResult(bleDevice);                    }                }            }        }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/scan/BleScanPresenter.java", "stars": "2", "class": {"name": "ScanHandler", "extends": "Handler", "implements": null, "modifiers": ["private", "static", "final"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create an SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/nestedresulthandler_association/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/nestedresulthandler_association/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nestedresulthandler_association/NestedResultHandlerAssociationTest.java", "stars": "15", "class": {"name": "NestedResultHandlerAssociationTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldHandleRowBounds", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldHandleRowBounds() throws Exception {    final SimpleDateFormat fmt = new SimpleDateFormat(\"yyyy-MM-dd\");    Date targetMonth = fmt.parse(\"2014-01-01\");    final List<Account> accounts = new ArrayList<>();    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      sqlSession.select(\"collectPageByBirthMonth\", targetMonth, new RowBounds(1, 2), context -> {        Account account = (Account) context.getResultObject();        accounts.add(account);      });    }    assertEquals(2, accounts.size());    assertEquals(\"Bob2\", accounts.get(0).getAccountName());    assertEquals(\"Bob3\", accounts.get(1).getAccountName());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nestedresulthandler_association/NestedResultHandlerAssociationTest.java", "stars": "15", "class": {"name": "NestedResultHandlerAssociationTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldHandleStop", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldHandleStop() throws Exception {    final SimpleDateFormat fmt = new SimpleDateFormat(\"yyyy-MM-dd\");    final List<Account> accounts = new ArrayList<>();    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Date targetMonth = fmt.parse(\"2014-01-01\");      sqlSession.select(\"collectPageByBirthMonth\", targetMonth, context -> {        Account account = (Account) context.getResultObject();        accounts.add(account);        if (accounts.size() > 1)          context.stop();      });    }    assertEquals(2, accounts.size());    assertEquals(\"Bob1\", accounts.get(0).getAccountName());    assertEquals(\"Bob2\", accounts.get(1).getAccountName());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nestedresulthandler_association/NestedResultHandlerAssociationTest.java", "stars": "15", "class": {"name": "NestedResultHandlerAssociationTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getProviderTitle", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getProviderTitle(@ProviderType int providerType) {        switch (providerType) {            case ProviderManager.PROVIDER_TYPE_MOVIE:                return R.string.title_movies;            case ProviderManager.PROVIDER_TYPE_SHOW:                return R.string.title_shows;            case ProviderManager.PROVIDER_TYPE_ANIME:                return R.string.title_anime;            default:                throw new IllegalStateException(\"Unknown provider type\");        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/utils/ProviderUtils.java", "stars": "4", "class": {"name": "ProviderUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProviderIcon", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getProviderIcon(@ProviderType int providerType) {        switch (providerType) {            case ProviderManager.PROVIDER_TYPE_MOVIE:                return R.drawable.ic_nav_movies;            case ProviderManager.PROVIDER_TYPE_SHOW:                return R.drawable.ic_nav_tv;            case ProviderManager.PROVIDER_TYPE_ANIME:                return R.drawable.ic_nav_anime;            default:                throw new IllegalStateException(\"Unknown provider type\");        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/utils/ProviderUtils.java", "stars": "4", "class": {"name": "ProviderUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getWood", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Wood", "snippet": "    public Wood getWood() {        return wood;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/model/AbstractForm.java", "stars": "2", "class": {"name": "AbstractForm", "extends": null, "implements": ["IWeight"], "modifiers": ["public", "abstract"]}}, {"method_name": "setWood", "params": ["Wood"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setWood(Wood wood) {        this.wood = wood;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/model/AbstractForm.java", "stars": "2", "class": {"name": "AbstractForm", "extends": null, "implements": ["IWeight"], "modifiers": ["public", "abstract"]}}, {"method_name": "volume", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "float", "snippet": "    public abstract float volume();}", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/model/AbstractForm.java", "stars": "2", "class": {"name": "AbstractForm", "extends": null, "implements": ["IWeight"], "modifiers": ["public", "abstract"]}}, {"method_name": "shouldFailForWrongNamespace", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFailForWrongNamespace() {    Configuration configuration = new Configuration();    Assertions.assertThrows(RuntimeException.class, () -> configuration.addMapper(WrongNamespaceMapper.class));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/WrongNamespacesTest.java", "stars": "15", "class": {"name": "WrongNamespacesTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldFailForMissingNamespace", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFailForMissingNamespace() {    Configuration configuration = new Configuration();    Assertions.assertThrows(RuntimeException.class, () -> configuration.addMapper(MissingNamespaceMapper.class));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/WrongNamespacesTest.java", "stars": "15", "class": {"name": "WrongNamespacesTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "init", "params": ["Context"], "throws": null, "modifiers": ["synchronized", "public", "static"], "return_type": "void", "snippet": "    public static synchronized void init(Context context) {        instance = new DiscoveryManager(context);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "destroy", "params": [], "throws": null, "modifiers": ["synchronized", "public", "static"], "return_type": "void", "snippet": "    public static synchronized void destroy() {        instance.onDestroy();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "init", "params": ["Context", "ConnectableDeviceStore"], "throws": null, "modifiers": ["synchronized", "public", "static"], "return_type": "void", "snippet": "    public static synchronized void init(Context context, ConnectableDeviceStore connectableDeviceStore) {        instance = new DiscoveryManager(context, connectableDeviceStore);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["synchronized", "public", "static"], "return_type": "DiscoveryManager", "snippet": "    public static synchronized DiscoveryManager getInstance() {        if (instance == null)            throw new Error(\"Call DiscoveryManager.init(Context) first\");        return instance;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "registerBroadcastReceiver", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void registerBroadcastReceiver() {        if (!isBroadcastReceiverRegistered) {            isBroadcastReceiverRegistered = true;            IntentFilter intentFilter = new IntentFilter();            intentFilter.addAction(WifiManager.NETWORK_STATE_CHANGED_ACTION);            context.registerReceiver(receiver, intentFilter);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "unregisterBroadcastReceiver", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void unregisterBroadcastReceiver() {        if (isBroadcastReceiverRegistered) {            isBroadcastReceiverRegistered = false;            context.unregisterReceiver(receiver);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "addListener", "params": ["DiscoveryManagerListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addListener(DiscoveryManagerListener listener) {        // notify listener of all devices so far        for (ConnectableDevice device: compatibleDevices.values()) {            listener.onDeviceAdded(this, device);        }        discoveryListeners.add(listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "removeListener", "params": ["DiscoveryManagerListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeListener(DiscoveryManagerListener listener) {        discoveryListeners.remove(listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "setCapabilityFilters", "params": ["CapabilityFilter"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCapabilityFilters(CapabilityFilter ... capabilityFilters) {        setCapabilityFilters(Arrays.asList(capabilityFilters));    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "setCapabilityFilters", "params": ["List<CapabilityFilter>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCapabilityFilters(List<CapabilityFilter> capabilityFilters) {        this.capabilityFilters = capabilityFilters;        for (ConnectableDevice device: compatibleDevices.values()) {            handleDeviceLoss(device);        }        compatibleDevices.clear();        for (ConnectableDevice device: allDevices.values()) {            if (deviceIsCompatible(device)) {                compatibleDevices.put(device.getIpAddress(), device);                handleDeviceAdd(device);            }        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "getCapabilityFilters", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<CapabilityFilter>", "snippet": "    public List<CapabilityFilter> getCapabilityFilters() {        return capabilityFilters;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "deviceIsCompatible", "params": ["ConnectableDevice"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean deviceIsCompatible(ConnectableDevice device) {        if (capabilityFilters == null || capabilityFilters.size() == 0) {            return true;        }        boolean isCompatible = false;        for (CapabilityFilter filter: this.capabilityFilters) {            if (device.hasCapabilities(filter.capabilities)) {                isCompatible = true;                break;            }        }        return isCompatible;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "registerDefaultDeviceTypes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void registerDefaultDeviceTypes() {        final HashMap<String, String> devicesList = DefaultPlatform.getDeviceServiceMap();        for (HashMap.Entry<String, String> entry : devicesList.entrySet()) {            String key = entry.getKey();            String value = entry.getValue();            try {                 registerDeviceService((Class<DeviceService>) Class.forName(key), (Class<DiscoveryProvider>)Class.forName(value));            } catch (ClassNotFoundException e) {                e.printStackTrace();            }        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "registerDeviceService", "params": ["Class<DeviceService>", "Class<DiscoveryProvider>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void registerDeviceService(Class<? extends DeviceService> deviceClass, Class<? extends DiscoveryProvider> discoveryClass) {        if (!DeviceService.class.isAssignableFrom(deviceClass))            return;        if (!DiscoveryProvider.class.isAssignableFrom(discoveryClass))            return;        try {            DiscoveryProvider discoveryProvider = null;            for (DiscoveryProvider dp : discoveryProviders) {                if (dp.getClass().isAssignableFrom(discoveryClass)) {                    discoveryProvider = dp;                    break;                }            }            if (discoveryProvider == null) {                Constructor<? extends DiscoveryProvider> myConstructor = discoveryClass.getConstructor(Context.class);                Object myObj = myConstructor.newInstance(context);                discoveryProvider = (DiscoveryProvider) myObj;                discoveryProvider.addListener(this);                discoveryProviders.add(discoveryProvider);            }            Method m = deviceClass.getMethod(\"discoveryFilter\");            Object result = m.invoke(null);            DiscoveryFilter discoveryFilter = (DiscoveryFilter) result;            String serviceId = discoveryFilter.getServiceId();            deviceClasses.put(serviceId, deviceClass);            discoveryProvider.addDeviceFilter(discoveryFilter);            if (mSearching){            \tdiscoveryProvider.restart();            }        } catch (SecurityException e) {            e.printStackTrace();        } catch (NoSuchMethodException e) {            e.printStackTrace();        } catch (IllegalArgumentException e) {            e.printStackTrace();        } catch (IllegalAccessException e) {            e.printStackTrace();        } catch (InvocationTargetException e) {            e.printStackTrace();        } catch (InstantiationException e) {            e.printStackTrace();        } catch (RuntimeException e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "unregisterDeviceService", "params": ["Class<?>", "Class<?>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void unregisterDeviceService(Class<?> deviceClass, Class<?> discoveryClass) {        if (!DeviceService.class.isAssignableFrom(deviceClass)) {            return;        }        if (!DiscoveryProvider.class.isAssignableFrom(discoveryClass)) {            return;        }        try {            DiscoveryProvider discoveryProvider = null;            for (DiscoveryProvider dp: discoveryProviders) {                if (dp.getClass().isAssignableFrom(discoveryClass)) {                    discoveryProvider = dp;                    break;                }            }            if (discoveryProvider == null)                 return;            Method m = deviceClass.getMethod(\"discoveryFilter\");            Object result = m.invoke(null);            DiscoveryFilter discoveryFilter = (DiscoveryFilter) result;            String serviceId = discoveryFilter.getServiceId();            // do not remove provider if there is no such service            if (null == deviceClasses.remove(serviceId)) {                return;            }            discoveryProvider.removeDeviceFilter(discoveryFilter);            if (discoveryProvider.isEmpty()) {                discoveryProvider.stop();                discoveryProviders.remove(discoveryProvider);            }        } catch (SecurityException e) {            e.printStackTrace();        } catch (NoSuchMethodException e) {            e.printStackTrace();        } catch (IllegalArgumentException e) {            e.printStackTrace();        } catch (IllegalAccessException e) {            e.printStackTrace();        } catch (InvocationTargetException e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void start() {        if (mSearching)            return;        if (discoveryProviders == null) {            return;        }        mSearching = true;        multicastLock.acquire();        Util.runOnUI(new Runnable() {            @Override            public void run() {                if (discoveryProviders.size() == 0) {                    registerDefaultDeviceTypes();                }                ConnectivityManager connManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);                NetworkInfo mWifi = connManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI);                if (mWifi.isConnected()) {                    for (DiscoveryProvider provider : discoveryProviders) {                        provider.start();                    }                } else {                    Log.w(Util.T, \"Wifi is not connected yet\");                    Util.runOnUI(new Runnable() {                        @Override                        public void run() {                            for (DiscoveryManagerListener listener : discoveryListeners)                                listener.onDiscoveryFailed(DiscoveryManager.this, new ServiceCommandError(0, \"No wifi connection\", null));                        }                    });                }            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "stop", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void stop() {        if (!mSearching)            return;        mSearching = false;        for (DiscoveryProvider provider : discoveryProviders) {            provider.stop();        }        if (multicastLock.isHeld()) {            multicastLock.release();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "setConnectableDeviceStore", "params": ["ConnectableDeviceStore"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setConnectableDeviceStore(ConnectableDeviceStore connectableDeviceStore) {        this.connectableDeviceStore = connectableDeviceStore;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "getConnectableDeviceStore", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ConnectableDeviceStore", "snippet": "    public ConnectableDeviceStore getConnectableDeviceStore() {        return connectableDeviceStore;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "handleDeviceAdd", "params": ["ConnectableDevice"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void handleDeviceAdd(ConnectableDevice device) {        if (!deviceIsCompatible(device))             return;        compatibleDevices.put(device.getIpAddress(), device);        for (DiscoveryManagerListener listenter: discoveryListeners) {            listenter.onDeviceAdded(this, device);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "handleDeviceUpdate", "params": ["ConnectableDevice"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void handleDeviceUpdate(ConnectableDevice device) {        if (deviceIsCompatible(device)) {            if (device.getIpAddress() != null && compatibleDevices.containsKey(device.getIpAddress())) {                for (DiscoveryManagerListener listenter: discoveryListeners) {                    listenter.onDeviceUpdated(this, device);                }            }            else {                handleDeviceAdd(device);            }        }        else {            compatibleDevices.remove(device.getIpAddress());            handleDeviceLoss(device);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "handleDeviceLoss", "params": ["ConnectableDevice"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void handleDeviceLoss(ConnectableDevice device) {        for (DiscoveryManagerListener listenter: discoveryListeners) {            listenter.onDeviceRemoved(this, device);        }        device.disconnect();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "isNetcast", "params": ["ServiceDescription"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isNetcast(ServiceDescription description) {        boolean isNetcastTV = false;        String modelName = description.getModelName();        String modelDescription = description.getModelDescription();        if (modelName != null && modelName.toUpperCase(Locale.US).equals(\"LG TV\")) {            if (modelDescription != null && !(modelDescription.toUpperCase(Locale.US).contains(\"WEBOS\"))) {                if (description.getServiceID().equals(NetcastTVService.ID)) {                    isNetcastTV = true;                }            }        }        return isNetcastTV;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "getAllDevices", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,ConnectableDevice>", "snippet": "    public Map<String, ConnectableDevice> getAllDevices() {        return allDevices;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "getCompatibleDevices", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,ConnectableDevice>", "snippet": "    public Map<String, ConnectableDevice> getCompatibleDevices() {        return compatibleDevices;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "getPairingLevel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "PairingLevel", "snippet": "    public PairingLevel getPairingLevel() {        return pairingLevel;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "setPairingLevel", "params": ["PairingLevel"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPairingLevel(PairingLevel pairingLevel) {        this.pairingLevel = pairingLevel;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "getContext", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Context", "snippet": "    public Context getContext() {        return context;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDestroy() {        unregisterBroadcastReceiver();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "getDiscoveryProviders", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<DiscoveryProvider>", "snippet": "    public List<DiscoveryProvider> getDiscoveryProviders() {        return new ArrayList<DiscoveryProvider>(discoveryProviders);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "onServiceConfigUpdate", "params": ["ServiceConfig"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onServiceConfigUpdate(ServiceConfig serviceConfig) {        if (connectableDeviceStore == null) {            return;        }        for (ConnectableDevice device : getAllDevices().values()) {            if (null != device.getServiceWithUUID(serviceConfig.getServiceUUID())) {                connectableDeviceStore.updateDevice(device);            }        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "onCapabilityUpdated", "params": ["ConnectableDevice", "List<String>", "List<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCapabilityUpdated(ConnectableDevice device, List<String> added, List<String> removed) {        handleDeviceUpdate(device);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "onConnectionFailed", "params": ["ConnectableDevice", "ServiceCommandError"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    @Override public void onConnectionFailed(ConnectableDevice device, ServiceCommandError error) { }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "onDeviceDisconnected", "params": ["ConnectableDevice"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    @Override public void onDeviceDisconnected(ConnectableDevice device) { }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "onDeviceReady", "params": ["ConnectableDevice"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    @Override public void onDeviceReady(ConnectableDevice device) { }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "onPairingRequired", "params": ["ConnectableDevice", "DeviceService", "PairingType"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    @Override public void onPairingRequired(ConnectableDevice device, DeviceService service, PairingType pairingType) { }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "onServiceAdded", "params": ["DiscoveryProvider", "ServiceDescription"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onServiceAdded(DiscoveryProvider provider, ServiceDescription serviceDescription) {        Log.d(Util.T, \"Service added: \" + serviceDescription.getFriendlyName() + \" (\" + serviceDescription.getServiceID() + \")\");        boolean deviceIsNew = !allDevices.containsKey(serviceDescription.getIpAddress());        ConnectableDevice device = null;        if (deviceIsNew) {            if (connectableDeviceStore != null) {                device = connectableDeviceStore.getDevice(serviceDescription.getUUID());                if (device != null) {                    allDevices.put(serviceDescription.getIpAddress(), device);                    device.setIpAddress(serviceDescription.getIpAddress());                }            }        } else {            device = allDevices.get(serviceDescription.getIpAddress());        }        if (device == null) {            device = new ConnectableDevice(serviceDescription);            device.setIpAddress(serviceDescription.getIpAddress());            allDevices.put(serviceDescription.getIpAddress(), device);            deviceIsNew = true;        }        device.setFriendlyName(serviceDescription.getFriendlyName());        device.setLastDetection(Util.getTime());        device.setLastKnownIPAddress(serviceDescription.getIpAddress());        //  TODO: Implement the currentSSID Property in DiscoveryManager//        device.setLastSeenOnWifi(currentSSID);        addServiceDescriptionToDevice(serviceDescription, device);        if (device.getServices().size() == 0) {            // we get here when a non-LG DLNA TV is found            allDevices.remove(serviceDescription.getIpAddress());            return;        }        if (deviceIsNew)            handleDeviceAdd(device);        else            handleDeviceUpdate(device);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "onServiceRemoved", "params": ["DiscoveryProvider", "ServiceDescription"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onServiceRemoved(DiscoveryProvider provider, ServiceDescription serviceDescription) {        if (serviceDescription == null) {            Log.w(Util.T, \"onServiceRemoved: unknown service description\");            return;        }        Log.d(Util.T, \"onServiceRemoved: friendlyName: \" + serviceDescription.getFriendlyName());        ConnectableDevice device = allDevices.get(serviceDescription.getIpAddress());        if (device != null) {             device.removeServiceWithId(serviceDescription.getServiceID());            if (device.getServices().isEmpty()) {                allDevices.remove(serviceDescription.getIpAddress());                handleDeviceLoss(device);            }            else {                handleDeviceUpdate(device);            }        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "onServiceDiscoveryFailed", "params": ["DiscoveryProvider", "ServiceCommandError"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onServiceDiscoveryFailed(DiscoveryProvider provider, ServiceCommandError error) {        Log.w(Util.T, \"DiscoveryProviderListener, Service Discovery Failed\");    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "addServiceDescriptionToDevice", "params": ["ServiceDescription", "ConnectableDevice"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addServiceDescriptionToDevice(ServiceDescription desc, ConnectableDevice device) {        Log.d(Util.T, \"Adding service \" + desc.getServiceID() + \" to device with address \" + device.getIpAddress() + \" and id \" + device.getId());        Class<? extends DeviceService> deviceServiceClass = deviceClasses.get(desc.getServiceID());        if (deviceServiceClass == null)            return;        if (deviceServiceClass == DLNAService.class) {            if (desc.getLocationXML() == null)                return;        } else if (deviceServiceClass == NetcastTVService.class) {            if (!isNetcast(desc))                return;        }         ServiceConfig serviceConfig = null;        if (connectableDeviceStore != null)            serviceConfig = connectableDeviceStore.getServiceConfig(desc);        if (serviceConfig == null)            serviceConfig = new ServiceConfig(desc);        serviceConfig.setListener(DiscoveryManager.this);        boolean hasType = false;        boolean hasService = false;        for (DeviceService service : device.getServices()) {            if (service.getServiceDescription().getServiceID().equals(desc.getServiceID())) {                hasType = true;                if (service.getServiceDescription().getUUID().equals(desc.getUUID())) {                    hasService = true;                }                break;            }        }        if (hasType) {            if (hasService) {                device.setServiceDescription(desc);                DeviceService alreadyAddedService = device.getServiceByName(desc.getServiceID());                if (alreadyAddedService != null)                    alreadyAddedService.setServiceDescription(desc);                return;            }            device.removeServiceByName(desc.getServiceID());        }        DeviceService deviceService = DeviceService.getService(deviceServiceClass, desc, serviceConfig);        if (deviceService != null) {            deviceService.setServiceDescription(desc);            device.addService(deviceService);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/DiscoveryManager.java", "stars": "4", "class": {"name": "DiscoveryManager", "extends": null, "implements": ["ConnectableDeviceListener", "DiscoveryProviderListener", "ServiceConfigListener"], "modifiers": ["public"]}}, {"method_name": "of", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Props", "snippet": "  public static Props of(final String... args) {    return of((Props) null, args);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "of", "params": ["Props", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Props", "snippet": "  public static Props of(final Props parent, final String... args) {    if (args.length % 2 != 0) {      throw new IllegalArgumentException(          \"Must have an equal number of keys and values.\");    }    final Map<String, String> vals = new HashMap<>(args.length / 2);    for (int i = 0; i < args.length; i += 2) {      vals.put(args[i], args[i + 1]);    }    return new Props(parent, vals);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clone", "params": ["Props"], "throws": null, "modifiers": ["public", "static"], "return_type": "Props", "snippet": "  public static Props clone(final Props p) {    return copyNext(p);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "copyNext", "params": ["Props"], "throws": null, "modifiers": ["private", "static"], "return_type": "Props", "snippet": "  private static Props copyNext(final Props source) {    Props priorNodeCopy = null;    if (source.getParent() != null) {      priorNodeCopy = copyNext(source.getParent());    }    final Props dest = new Props(priorNodeCopy);    for (final String key : source.localKeySet()) {      dest.put(key, source.get(key));    }    return dest;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadFrom", "params": ["InputStream"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void loadFrom(final InputStream inputStream) throws IOException {    final Properties properties = new Properties();    //\u89e3\u51b3.job\u6587\u4ef6\u4e2d\u5305\u542b\u4e2d\u6587\uff0c\u8bfb\u53d6\u4e71\u7801\u7684\u95ee\u9898\u3002    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream , \"UTF-8\"));    properties.load(bufferedReader);    this.put(properties);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEarliestAncestor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Props", "snippet": "  public Props getEarliestAncestor() {    if (this._parent == null) {      return this;    }    return this._parent.getEarliestAncestor();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEarliestAncestor", "params": ["Props"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setEarliestAncestor(final Props parent) {    final Props props = getEarliestAncestor();    props.setParent(parent);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clearLocal", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void clearLocal() {    this._current.clear();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "containsKey", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean containsKey(final Object k) {    return this._current.containsKey(k)        || (this._parent != null && this._parent.containsKey(k));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "containsValue", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean containsValue(final Object value) {    return this._current.containsValue(value)        || (this._parent != null && this._parent.containsValue(value));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String get(final Object key) {    if (this._current.containsKey(key)) {      return this._current.get(key);    } else if (this._parent != null) {      return this._parent.get(key);    } else {      return null;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "localKeySet", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Set<String>", "snippet": "  public Set<String> localKeySet() {    return this._current.keySet();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getParent", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Props", "snippet": "  public Props getParent() {    return this._parent;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setParent", "params": ["Props"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setParent(final Props prop) {    this._parent = prop;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "put", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String put(final String key, final String value) {    return this._current.put(key, value);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "put", "params": ["Properties"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void put(final Properties properties) {    for (final String propName : properties.stringPropertyNames()) {      this._current.put(propName, properties.getProperty(propName));    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "put", "params": ["String", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String put(final String key, final Integer value) {    return this._current.put(key, value.toString());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "put", "params": ["String", "Long"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String put(final String key, final Long value) {    return this._current.put(key, value.toString());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "put", "params": ["String", "Double"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String put(final String key, final Double value) {    return this._current.put(key, value.toString());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "putAll", "params": ["Map<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void putAll(final Map<? extends String, ? extends String> m) {    if (m == null) {      return;    }    for (final Map.Entry<? extends String, ? extends String> entry : m.entrySet()) {      this.put(entry.getKey(), entry.getValue());    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "putAll", "params": ["Props"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void putAll(final Props p) {    if (p == null) {      return;    }    for (final String key : p.getKeySet()) {      this.put(key, p.get(key));    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "putLocal", "params": ["Props"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void putLocal(final Props p) {    for (final String key : p.localKeySet()) {      this.put(key, p.get(key));    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeLocal", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String removeLocal(final Object s) {    return this._current.remove(s);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "size", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int size() {    return getKeySet().size();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "localSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int localSize() {    return this._current.size();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getClass", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Class<?>", "snippet": "  public Class<?> getClass(final String key) {    try {      if (containsKey(key)) {        return Class.forName(get(key));      } else {        throw new UndefinedPropertyException(\"Missing required property '\"            + key + \"'\");      }    } catch (final ClassNotFoundException e) {      throw new IllegalArgumentException(e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getClass", "params": ["String", "boolean", "ClassLoader"], "throws": null, "modifiers": ["public"], "return_type": "Class<?>", "snippet": "  public Class<?> getClass(final String key, final boolean initialize, final ClassLoader cl) {    try {      if (containsKey(key)) {        return Class.forName(get(key), initialize, cl);      } else {        throw new UndefinedPropertyException(\"Missing required property '\"            + key + \"'\");      }    } catch (final ClassNotFoundException e) {      throw new IllegalArgumentException(e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getClass", "params": ["String", "Class<?>"], "throws": null, "modifiers": ["public"], "return_type": "Class<?>", "snippet": "  public Class<?> getClass(final String key, final Class<?> defaultClass) {    if (containsKey(key)) {      return getClass(key);    } else {      return defaultClass;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getString", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getString(final String key, final String defaultValue) {    if (containsKey(key)) {      return get(key);    } else {      return defaultValue;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getString", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getString(final String key) {    if (containsKey(key)) {      return get(key);    } else {      throw new UndefinedPropertyException(\"Missing required property '\" + key          + \"'\");    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStringList", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "  public List<String> getStringList(final String key) {    return getStringList(key, \"\\\\s*,\\\\s*\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStringListFromCluster", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "  public List<String> getStringListFromCluster(final String key) {    List<String> curlist = getStringList(key, \"\\\\s*;\\\\s*\");    // remove empty elements in the array    for (Iterator<String> iter = curlist.listIterator(); iter.hasNext(); ) {      String a = iter.next();      if (a.length() == 0) {        iter.remove();      }    }    return curlist;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStringList", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "  public List<String> getStringList(final String key, final String sep) {    final String val = get(key);    if (val == null || val.trim().length() == 0) {      return Collections.emptyList();    }    if (containsKey(key)) {      return Arrays.asList(val.split(sep));    } else {      throw new UndefinedPropertyException(\"Missing required property '\" + key          + \"'\");    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStringList", "params": ["String", "List<String>"], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "  public List<String> getStringList(final String key, final List<String> defaultValue) {    if (containsKey(key)) {      return getStringList(key);    } else {      return defaultValue;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStringList", "params": ["String", "List<String>", "String"], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "  public List<String> getStringList(final String key, final List<String> defaultValue,      final String sep) {    if (containsKey(key)) {      return getStringList(key, sep);    } else {      return defaultValue;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBoolean", "params": ["String", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean getBoolean(final String key, final boolean defaultValue) {    if (containsKey(key)) {      return \"true\".equalsIgnoreCase(get(key).trim());    } else {      return defaultValue;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBooleanDefaultFalse", "params": ["String", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean getBooleanDefaultFalse(final String key, final boolean defaultValue) {    if (containsKey(key)) {      String settingsValue = get(key).trim();      if (\"true\".equalsIgnoreCase(settingsValue)) {        return true;      } else {        return defaultValue;      }    } else {      return defaultValue;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBoolean", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean getBoolean(final String key) {    if (containsKey(key)) {      return \"true\".equalsIgnoreCase(get(key));    } else {      throw new UndefinedPropertyException(\"Missing required property '\" + key          + \"'\");    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLong", "params": ["String", "long"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getLong(final String name, final long defaultValue) {    if (containsKey(name)) {      return Long.parseLong(get(name));    } else {      return defaultValue;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLong", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getLong(final String name) {    if (containsKey(name)) {      return Long.parseLong(get(name));    } else {      throw new UndefinedPropertyException(\"Missing required property '\" + name          + \"'\");    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInt", "params": ["String", "int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getInt(final String name, final int defaultValue) {    if (containsKey(name)) {      return Integer.parseInt(get(name).trim());    } else {      return defaultValue;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInt", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getInt(final String name) {    if (containsKey(name)) {      return Integer.parseInt(get(name).trim());    } else {      throw new UndefinedPropertyException(\"Missing required property '\" + name          + \"'\");    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDouble", "params": ["String", "double"], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "  public double getDouble(final String name, final double defaultValue) {    if (containsKey(name)) {      return Double.parseDouble(get(name).trim());    } else {      return defaultValue;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDouble", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "  public double getDouble(final String name) {    if (containsKey(name)) {      return Double.parseDouble(get(name).trim());    } else {      throw new UndefinedPropertyException(\"Missing required property '\" + name          + \"'\");    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUri", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "URI", "snippet": "  public URI getUri(final String name) {    if (containsKey(name)) {      try {        return new URI(get(name));      } catch (final URISyntaxException e) {        throw new IllegalArgumentException(e.getMessage());      }    } else {      throw new UndefinedPropertyException(\"Missing required property '\" + name          + \"'\");    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUri", "params": ["String", "URI"], "throws": null, "modifiers": ["public"], "return_type": "URI", "snippet": "  public URI getUri(final String name, final URI defaultValue) {    if (containsKey(name)) {      return getUri(name);    } else {      return defaultValue;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUri", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "URI", "snippet": "  public URI getUri(final String name, final String defaultValue) {    try {      return getUri(name, new URI(defaultValue));    } catch (final URISyntaxException e) {      throw new IllegalArgumentException(e.getMessage());    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "storeLocal", "params": ["File"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void storeLocal(final File file) throws IOException {    final BufferedOutputStream out =        new BufferedOutputStream(new FileOutputStream(file));    try {      storeLocal(out);    } finally {      out.close();    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "local", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Props", "snippet": "  public Props local() {    return new Props(null, this._current);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "storeLocal", "params": ["OutputStream"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void storeLocal(final OutputStream out) throws IOException {    final Properties p = new Properties();    for (final String key : this._current.keySet()) {      p.setProperty(key, get(key));    }    p.store(out, null);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toProperties", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Properties", "snippet": "  public Properties toProperties() {    final Properties p = new Properties();    for (final String key : this._current.keySet()) {      p.setProperty(key, get(key));    }    return p;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toAllProperties", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Properties", "snippet": "  public Properties toAllProperties() {    Properties allProp = new Properties();    // import local properties    allProp.putAll(toProperties());    // import parent properties    if(_parent != null)      allProp.putAll(_parent.toProperties());    return allProp;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "storeFlattened", "params": ["File"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void storeFlattened(final File file) throws IOException {    final BufferedOutputStream out =        new BufferedOutputStream(new FileOutputStream(file));    try {      storeFlattened(out);    } finally {      out.close();    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "storeFlattened", "params": ["OutputStream"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void storeFlattened(final OutputStream out) throws IOException {    final Properties p = new Properties();    for (Props curr = this; curr != null; curr = curr.getParent()) {      for (final String key : curr.localKeySet()) {        if (!p.containsKey(key)) {          p.setProperty(key, get(key));        }      }    }    p.store(out, null);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFlattened", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,String>", "snippet": "  public Map<String, String> getFlattened() {    final TreeMap<String, String> returnVal = new TreeMap<>();    returnVal.putAll(getMapByPrefix(\"\"));    return returnVal;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMapByPrefix", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Map<String,String>", "snippet": "  public Map<String, String> getMapByPrefix(final String prefix) {    final Map<String, String> values = this._parent == null ? new HashMap<>() :        this._parent.getMapByPrefix(prefix);    // when there is a conflict, value from the child takes the priority.    for (final String key : this.localKeySet()) {      if (key.startsWith(prefix)) {        values.put(key.substring(prefix.length()), get(key));      }    }    return values;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getKeySet", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Set<String>", "snippet": "  public Set<String> getKeySet() {    final HashSet<String> keySet = new HashSet<>();    keySet.addAll(localKeySet());    if (this._parent != null) {      keySet.addAll(this._parent.getKeySet());    }    return keySet;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "logProperties", "params": ["Logger", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void logProperties(final Logger logger, final String comment) {    logger.info(comment);    for (final String key : getKeySet()) {      logger.info(\"  key=\" + key + \" value=\" + get(key));    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean equals(final Object o) {    if (o == this) {      return true;    } else if (o == null) {      return false;    } else if (o.getClass() != Props.class) {      return false;    }    final Props p = (Props) o;    return this._current.equals(p._current) && Utils.equals(this._parent, p._parent);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "equalsProps", "params": ["Props"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean equalsProps(final Props p) {    if (p == null) {      return false;    }    final Set<String> myKeySet = getKeySet();    for (final String s : myKeySet) {      if (!get(s).equals(p.get(s))) {        return false;      }    }    return myKeySet.size() == p.getKeySet().size();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int hashCode() {    int code = this._current.hashCode();    if (this._parent != null) {      code += this._parent.hashCode();    }    return code;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    final StringBuilder builder = new StringBuilder(\"{\");    for (final Map.Entry<String, String> entry : this._current.entrySet()) {      builder.append(entry.getKey());      builder.append(\": \");      builder.append(entry.getValue());      builder.append(\", \");    }    if (this._parent != null) {      builder.append(\" parent = \");      builder.append(this._parent.toString());    }    builder.append(\"}\");    return builder.toString();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSource", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getSource() {    return this.source;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSource", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setSource(final String source) {    this.source = source;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/Props.java", "stars": "18", "class": {"name": "Props", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setParameter", "params": ["PreparedStatement", "int", "Object", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void setParameter(PreparedStatement ps, int i, Object parameter, JdbcType jdbcType) throws SQLException {    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/autodiscover/handlers/DummyTypeHandler.java", "stars": "15", "class": {"name": "DummyTypeHandler", "extends": null, "implements": ["TypeHandler"], "modifiers": ["public"]}}, {"method_name": "getResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object getResult(ResultSet rs, String columnName) throws SQLException {        return null;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/autodiscover/handlers/DummyTypeHandler.java", "stars": "15", "class": {"name": "DummyTypeHandler", "extends": null, "implements": ["TypeHandler"], "modifiers": ["public"]}}, {"method_name": "getResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object getResult(CallableStatement cs, int columnIndex) throws SQLException {        return null;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/autodiscover/handlers/DummyTypeHandler.java", "stars": "15", "class": {"name": "DummyTypeHandler", "extends": null, "implements": ["TypeHandler"], "modifiers": ["public"]}}, {"method_name": "getResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object getResult(ResultSet rs, int columnIndex) throws SQLException {        return null;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/autodiscover/handlers/DummyTypeHandler.java", "stars": "15", "class": {"name": "DummyTypeHandler", "extends": null, "implements": ["TypeHandler"], "modifiers": ["public"]}}, {"method_name": "getNextId", "params": [], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int getNextId() {        return ++UID;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "isConnected", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Boolean", "snippet": "    public Boolean isConnected() {        return connected;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "setConnected", "params": ["Boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setConnected(Boolean connected) {        this.connected = connected;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleMediaEvent", "params": ["JSONObject"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void handleMediaEvent(JSONObject payload) {        String type = payload.optString(\"type\");        if (type.length() == 0) {            String errorMsg = payload.optString(\"error\");            if (errorMsg.length() == 0) {                return;            } else {                Log.w(Util.T, \"Play State Error: \" + errorMsg);                if (mPlayStateSubscription != null) {                    for (PlayStateListener listener : mPlayStateSubscription.getListeners()) {                        Util.postError(listener, new ServiceCommandError(errorMsg));                    }                }            }        }        if (type.equals(\"playState\")) {            if (mPlayStateSubscription == null)                return;            String playStateString = payload.optString(type);            if (playStateString.length() == 0)                return;            final MediaControl.PlayStateStatus playState = parsePlayState(playStateString);            for (PlayStateListener listener : mPlayStateSubscription.getListeners()) {                Util.postSuccess(listener, playState);            }        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "getFullAppId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getFullAppId() {        if (mFullAppId == null) {            if (launchSession.getSessionType() != LaunchSessionType.WebApp)                mFullAppId = launchSession.getAppId();            else {                Enumeration<String> enumeration = service.getWebAppIdMappings().keys();                while (enumeration.hasMoreElements()) {                    String mappedFullAppId = enumeration.nextElement();                    String mappedAppId = service.getWebAppIdMappings().get(mappedFullAppId);                    if (mappedAppId.equalsIgnoreCase(launchSession.getAppId())) {                        mFullAppId = mappedAppId;                        break;                    }                }            }        }        if (mFullAppId == null)            return launchSession.getAppId();        else            return mFullAppId;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "setFullAppId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFullAppId(String fullAppId) {        mFullAppId = fullAppId;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleMediaCommandResponse", "params": ["JSONObject"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void handleMediaCommandResponse(final JSONObject payload) {        String requestID = payload.optString(\"requestId\");        if (requestID.length() == 0)            return;        final ServiceCommand<ResponseListener<Object>> command =                (ServiceCommand<ResponseListener<Object>>) mActiveCommands.get(requestID);        if (command == null)            return;        String mError = payload.optString(\"error\");        if (mError.length() != 0) {            Util.postError(command.getResponseListener(), new ServiceCommandError(0, mError, null));        } else {            Util.postSuccess(command.getResponseListener(), payload);        }        mActiveCommands.remove(requestID);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleMessage", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void handleMessage(final Object message) {        Util.runOnUI(new Runnable() {            @Override            public void run() {                if (getWebAppSessionListener() != null)                    getWebAppSessionListener().onReceiveMessage(WebOSWebAppSession.this, message);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "parsePlayState", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "PlayStateStatus", "snippet": "    public PlayStateStatus parsePlayState(String playStateString) {        if (playStateString.equals(\"playing\"))            return PlayStateStatus.Playing;        else if (playStateString.equals(\"paused\"))            return PlayStateStatus.Paused;        else if (playStateString.equals(\"idle\"))            return PlayStateStatus.Idle;        else if (playStateString.equals(\"buffering\"))            return PlayStateStatus.Buffering;        else if (playStateString.equals(\"finished\"))            return PlayStateStatus.Finished;        return PlayStateStatus.Unknown;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "connect", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void connect(ResponseListener<Object> connectionListener) {        connect(false, connectionListener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "join", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void join(ResponseListener<Object> connectionListener) {        connect(true, connectionListener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "connect", "params": ["Boolean", "ResponseListener<Object>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void connect(final Boolean joinOnly,            final ResponseListener<Object> connectionListener) {        if (socket != null                && socket.getState() == WebOSTVServiceSocketClient.State.CONNECTING) {            if (connectionListener != null) {                connectionListener.onError(new ServiceCommandError(                        0,                        \"You have a connection request pending,  please wait until it has finished\",                        null));            }            return;        }        if (isConnected()) {            if (connectionListener != null)                connectionListener.onSuccess(null);            return;        }        mConnectionListener = new ResponseListener<ServiceCommand<ResponseListener<Object>>>() {            @Override            public void onError(ServiceCommandError error) {                if (socket != null)                    disconnectFromWebApp();                if (connectionListener != null) {                    if (error == null) {                        error = new ServiceCommandError(0, \"Unknown error connecting to web app\",                                null);                    }                    connectionListener.onError(error);                }            }            @Override            public void onSuccess(ServiceCommand<ResponseListener<Object>> object) {                ResponseListener<Object> finalConnectionListener = new ResponseListener<Object>() {                    @Override                    public void onError(ServiceCommandError error) {                        disconnectFromWebApp();                        if (connectionListener != null)                            connectionListener.onError(error);                    }                    @Override                    public void onSuccess(Object object) {                        connected = true;                        if (connectionListener != null)                            connectionListener.onSuccess(object);                    }                };                service.connectToWebApp(WebOSWebAppSession.this, joinOnly, finalConnectionListener);            }        };        if (socket != null) {            if (socket.isConnected())                mConnectionListener.onSuccess(null);            else                socket.connect();        } else {            socket = new WebOSTVServiceSocketClient(service, WebOSTVServiceSocketClient                    .getURI(service));            socket.setListener(mSocketListener);            socket.connect();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "disconnectFromWebApp", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void disconnectFromWebApp() {        connected = false;        mConnectionListener = null;        if (appToAppSubscription != null) {            appToAppSubscription.removeListeners();            appToAppSubscription = null;        }        if (socket != null) {            socket.setListener(null);            socket.disconnect();            socket = null;        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "sendMessage", "params": ["String", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendMessage(final String message,            final ResponseListener<Object> listener) {        if (message == null || message.length() == 0) {            Util.postError(listener, new ServiceCommandError(0, \"Cannot send an Empty Message\",                    null));            return;        }        sendP2PMessage(message, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "sendMessage", "params": ["JSONObject", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendMessage(final JSONObject message,            final ResponseListener<Object> listener) {        if (message == null || message.length() == 0) {            Util.postError(listener, new ServiceCommandError(0, \"Cannot send an Empty Message\",                    null));            return;        }        sendP2PMessage(message, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "sendP2PMessage", "params": ["Object", "ResponseListener<Object>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void sendP2PMessage(final Object message,            final ResponseListener<Object> listener) {        JSONObject _payload = new JSONObject();        try {            _payload.put(\"type\", \"p2p\");            _payload.put(\"to\", getFullAppId());            _payload.put(\"payload\", message);        } catch (JSONException ex) {            // do nothing        }        if (isConnected()) {            socket.sendMessage(_payload, null);            Util.postSuccess(listener, null);        } else {            ResponseListener<Object> connectListener = new ResponseListener<Object>() {                @Override                public void onError(ServiceCommandError error) {                    Util.postError(listener, error);                }                @Override                public void onSuccess(Object object) {                    sendP2PMessage(message, listener);                }            };            connect(connectListener);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "close", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void close(ResponseListener<Object> listener) {        mActiveCommands.clear();        if (mPlayStateSubscription != null) {            mPlayStateSubscription.unsubscribe();            mPlayStateSubscription = null;        }        if (mMessageSubscription != null) {            mMessageSubscription.unsubscribe();            mMessageSubscription = null;        }        if (mWebAppPinnedSubscription != null) {            mWebAppPinnedSubscription.unsubscribe();            mWebAppPinnedSubscription = null;        }        service.getWebAppLauncher().closeWebApp(launchSession, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "pinWebApp", "params": ["String", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void pinWebApp(String webAppId, ResponseListener<Object> listener) {        service.getWebAppLauncher().pinWebApp(webAppId, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "unPinWebApp", "params": ["String", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void unPinWebApp(String webAppId, ResponseListener<Object> listener) {        service.getWebAppLauncher().unPinWebApp(webAppId, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "isWebAppPinned", "params": ["String", "WebAppPinStatusListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void isWebAppPinned(String webAppId, WebAppPinStatusListener listener) {        service.getWebAppLauncher().isWebAppPinned(webAppId, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "subscribeIsWebAppPinned", "params": ["String", "WebAppPinStatusListener"], "throws": null, "modifiers": ["public"], "return_type": "ServiceSubscription<WebAppPinStatusListener>", "snippet": "    public ServiceSubscription<WebAppPinStatusListener> subscribeIsWebAppPinned(            String webAppId, WebAppPinStatusListener listener) {        mWebAppPinnedSubscription = service.getWebAppLauncher().subscribeIsWebAppPinned(webAppId,                listener);        return mWebAppPinnedSubscription;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "seek", "params": ["long", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void seek(final long position, ResponseListener<Object> listener) {        if (position < 0) {            Util.postError(listener, new ServiceCommandError(0, \"Must pass a valid positive value\",                    null));            return;        }        int requestIdNumber = getNextId();        final String requestId = String.format(Locale.US, \"req%d\", requestIdNumber);        JSONObject message = null;        try {            message = new JSONObject() {                {                    put(\"contentType\", namespaceKey + \"mediaCommand\");                    put(\"mediaCommand\", new JSONObject() {                        {                            put(\"type\", \"seek\");                            put(\"position\", position / 1000);                            put(\"requestId\", requestId);                        }                    });                }            };        } catch (JSONException e) {            Util.postError(listener, new ServiceCommandError(0, \"JSON Parse error\", null));        }        ServiceCommand<ResponseListener<Object>> command = new ServiceCommand<ResponseListener<Object>>(                null, null, null, listener);        mActiveCommands.put(requestId, command);        sendMessage(message, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPosition", "params": ["PositionListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getPosition(final PositionListener listener) {        int requestIdNumber = getNextId();        final String requestId = String.format(Locale.US, \"req%d\", requestIdNumber);        JSONObject message = null;        try {            message = new JSONObject() {                {                    put(\"contentType\", namespaceKey + \"mediaCommand\");                    put(\"mediaCommand\", new JSONObject() {                        {                            put(\"type\", \"getPosition\");                            put(\"requestId\", requestId);                        }                    });                }            };        } catch (JSONException e) {            Util.postError(listener, new ServiceCommandError(0, \"JSON Parse error\", null));        }        ServiceCommand<ResponseListener<Object>> command = new ServiceCommand<ResponseListener<Object>>(                null, null, null, new ResponseListener<Object>() {                    @Override                    public void onSuccess(Object response) {                        try {                            long position = ((JSONObject) response).getLong(\"position\");                            Util.postSuccess(listener, position * 1000);                        } catch (JSONException e) {                            this.onError(new ServiceCommandError(0, \"JSON Parse error\", null));                        }                    }                    @Override                    public void onError(ServiceCommandError error) {                        Util.postError(listener, error);                    }                });        mActiveCommands.put(requestId, command);        sendMessage(message, new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDuration", "params": ["DurationListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getDuration(final DurationListener listener) {        int requestIdNumber = getNextId();        final String requestId = String.format(Locale.US, \"req%d\", requestIdNumber);        JSONObject message = null;        try {            message = new JSONObject() {                {                    put(\"contentType\", namespaceKey + \"mediaCommand\");                    put(\"mediaCommand\", new JSONObject() {                        {                            put(\"type\", \"getDuration\");                            put(\"requestId\", requestId);                        }                    });                }            };        } catch (JSONException e) {            Util.postError(listener, new ServiceCommandError(0, \"JSON Parse error\", null));        }        ServiceCommand<ResponseListener<Object>> command = new ServiceCommand<ResponseListener<Object>>(                null, null, null, new ResponseListener<Object>() {                    @Override                    public void onSuccess(Object response) {                        try {                            long position = ((JSONObject) response).getLong(\"duration\");                            Util.postSuccess(listener, position * 1000);                        } catch (JSONException e) {                            Util.postError(listener, new ServiceCommandError(0, \"JSON Parse error\",                                    null));                        }                    }                    @Override                    public void onError(ServiceCommandError error) {                        Util.postError(listener, error);                    }        });        mActiveCommands.put(requestId, command);        sendMessage(message, new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPlayState", "params": ["PlayStateListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getPlayState(final PlayStateListener listener) {        int requestIdNumber = getNextId();        final String requestId = String.format(Locale.US, \"req%d\", requestIdNumber);        JSONObject message = null;        try {            message = new JSONObject() {                {                    put(\"contentType\", namespaceKey + \"mediaCommand\");                    put(\"mediaCommand\", new JSONObject() {                        {                            put(\"type\", \"getPlayState\");                            put(\"requestId\", requestId);                        }                    });                }            };        } catch (JSONException e) {            Util.postError(listener, new ServiceCommandError(0, \"JSON Parse error\", null));        }        ServiceCommand<ResponseListener<Object>> command = new ServiceCommand<ResponseListener<Object>>(                null, null, null, new ResponseListener<Object>() {                    @Override                    public void onSuccess(Object response) {                        try {                            String playStateString = ((JSONObject) response)                                    .getString(\"playState\");                            PlayStateStatus playState = parsePlayState(playStateString);                            Util.postSuccess(listener, playState);                        } catch (JSONException e) {                            this.onError(new ServiceCommandError(0,                                    \"JSON Parse error\", null));                        }                    }                    @Override                    public void onError(ServiceCommandError error) {                        Util.postError(listener, error);                    }                });        mActiveCommands.put(requestId, command);        sendMessage(message, new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "subscribePlayState", "params": ["PlayStateListener"], "throws": null, "modifiers": ["public"], "return_type": "ServiceSubscription<PlayStateListener>", "snippet": "    public ServiceSubscription<PlayStateListener> subscribePlayState(            final PlayStateListener listener) {        if (mPlayStateSubscription == null)            mPlayStateSubscription = new URLServiceSubscription<MediaControl.PlayStateListener>(                    null, null, null, null);        if (!connected) {            connect(new ResponseListener<Object>() {                @Override                public void onError(ServiceCommandError error) {                    Util.postError(listener, error);                }                @Override                public void onSuccess(Object response) {                }            });        }        if (!mPlayStateSubscription.getListeners().contains(listener))            mPlayStateSubscription.addListener(listener);        return mPlayStateSubscription;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "getMediaControl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MediaControl", "snippet": "    public MediaControl getMediaControl() {        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "getMediaControlCapabilityLevel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getMediaControlCapabilityLevel() {        return CapabilityPriorityLevel.HIGH;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "getMediaPlayer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MediaPlayer", "snippet": "    public MediaPlayer getMediaPlayer() {        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "getMediaPlayerCapabilityLevel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getMediaPlayerCapabilityLevel() {        return CapabilityPriorityLevel.HIGH;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "displayImage", "params": ["String", "String", "String", "String", "String", "MediaPlayer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void displayImage(final String url, final String mimeType,            final String title, final String description, final String iconSrc,            final MediaPlayer.LaunchListener listener) {        int requestIdNumber = getNextId();        final String requestId = String.format(Locale.US, \"req%d\", requestIdNumber);        JSONObject message = null;        try {            message = new JSONObject() {                {                    putOpt(\"contentType\", namespaceKey + \"mediaCommand\");                    putOpt(\"mediaCommand\", new JSONObject() {                        {                            putOpt(\"type\", \"displayImage\");                            putOpt(\"mediaURL\", url);                            putOpt(\"iconURL\", iconSrc);                            putOpt(\"title\", title);                            putOpt(\"description\", description);                            putOpt(\"mimeType\", mimeType);                            putOpt(\"requestId\", requestId);                        }                    });                }            };        } catch (JSONException e) {            Util.postError(listener, new ServiceCommandError(0, \"JSON Parse error\", null));            return;        }        ResponseListener<Object> response = new ResponseListener<Object>() {            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }            @Override            public void onSuccess(Object object) {                Util.postSuccess(listener, new MediaLaunchObject(launchSession,                        getMediaControl()));            }        };        ServiceCommand<ResponseListener<Object>> command = new ServiceCommand<ResponseListener<Object>>(                socket, null, null, response);        mActiveCommands.put(requestId, command);        sendP2PMessage(message, new ResponseListener<Object>() {            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }            @Override            public void onSuccess(Object object) {            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "displayImage", "params": ["MediaInfo", "MediaPlayer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void displayImage(MediaInfo mediaInfo, MediaPlayer.LaunchListener listener) {        String mediaUrl = null;        String mimeType = null;        String title = null;        String desc = null;        String iconSrc = null;        if (mediaInfo != null) {            mediaUrl = mediaInfo.getUrl();            mimeType = mediaInfo.getMimeType();            title = mediaInfo.getTitle();            desc = mediaInfo.getDescription();            if (mediaInfo.getImages() != null && mediaInfo.getImages().size() > 0) {                ImageInfo imageInfo = mediaInfo.getImages().get(0);                iconSrc = imageInfo.getUrl();            }        }        displayImage(mediaUrl, mimeType, title, desc, iconSrc, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "playMedia", "params": ["String", "String", "String", "String", "String", "boolean", "MediaPlayer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void playMedia(final String url, final String mimeType,            final String title, final String description, final String iconSrc,            final boolean shouldLoop, final MediaPlayer.LaunchListener listener) {        int requestIdNumber = getNextId();        final String requestId = String.format(Locale.US, \"req%d\", requestIdNumber);        JSONObject message = null;        try {            message = new JSONObject() {                {                    putOpt(\"contentType\", namespaceKey + \"mediaCommand\");                    putOpt(\"mediaCommand\", new JSONObject() {                        {                            putOpt(\"type\", \"playMedia\");                            putOpt(\"mediaURL\", url);                            putOpt(\"iconURL\", iconSrc);                            putOpt(\"title\", title);                            putOpt(\"description\", description);                            putOpt(\"mimeType\", mimeType);                            putOpt(\"shouldLoop\", shouldLoop);                            putOpt(\"requestId\", requestId);                        }                    });                }            };        } catch (JSONException e) {            Util.postError(listener, new ServiceCommandError(0, \"JSON Parse error\", null));            return;        }        ResponseListener<Object> response = new ResponseListener<Object>() {            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }            @Override            public void onSuccess(Object object) {                Util.postSuccess(listener, new MediaLaunchObject(launchSession, getMediaControl(),                        getPlaylistControl()));            }        };        ServiceCommand<ResponseListener<Object>> command = new ServiceCommand<ResponseListener<Object>>(null, null, null,                response);        mActiveCommands.put(requestId, command);        sendMessage(message, new ResponseListener<Object>() {            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }            @Override            public void onSuccess(Object object) {            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "playMedia", "params": ["MediaInfo", "boolean", "MediaPlayer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void playMedia(final MediaInfo mediaInfo,            final boolean shouldLoop, final MediaPlayer.LaunchListener listener) {        String mediaUrl = null;        String mimeType = null;        String title = null;        String desc = null;        String iconSrc = null;        if (mediaInfo != null) {            mediaUrl = mediaInfo.getUrl();            mimeType = mediaInfo.getMimeType();            title = mediaInfo.getTitle();            desc = mediaInfo.getDescription();            if (mediaInfo.getImages() != null && mediaInfo.getImages().size() > 0) {                ImageInfo imageInfo = mediaInfo.getImages().get(0);                iconSrc = imageInfo.getUrl();            }        }        playMedia(mediaUrl, mimeType, title, desc, iconSrc, shouldLoop, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPlaylistControl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "PlaylistControl", "snippet": "    public PlaylistControl getPlaylistControl() {        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPlaylistControlCapabilityLevel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getPlaylistControlCapabilityLevel() {        return CapabilityPriorityLevel.HIGH;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "jumpToTrack", "params": ["long", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void jumpToTrack(final long index, final ResponseListener<Object> listener) {        int requestIdNumber = getNextId();        final String requestId = String.format(Locale.US, \"req%d\", requestIdNumber);        JSONObject message = null;        try {            message = new JSONObject() {                {                    put(\"contentType\", namespaceKey + \"mediaCommand\");                    put(\"mediaCommand\", new JSONObject() {                        {                            put(\"type\", \"jumpToTrack\");                            put(\"requestId\", requestId);                            put(\"index\", (int)index);                        }                    });                }            };        } catch (JSONException e) {            Util.postError(listener, new ServiceCommandError(0, \"JSON Parse error\", null));            return;        }        ServiceCommand<ResponseListener<Object>> command =                new ServiceCommand<ResponseListener<Object>>(null, null, null, listener);        mActiveCommands.put(requestId, command);        sendMessage(message, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "previous", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void previous(final ResponseListener<Object> listener) {        int requestIdNumber = getNextId();        final String requestId = String.format(Locale.US, \"req%d\", requestIdNumber);        JSONObject message = null;        try {            message = new JSONObject() {                {                    put(\"contentType\", namespaceKey + \"mediaCommand\");                    put(\"mediaCommand\", new JSONObject() {                        {                            put(\"type\", \"playPrevious\");                            put(\"requestId\", requestId);                        }                    });                }            };        } catch (JSONException e) {            Util.postError(listener, new ServiceCommandError(0, \"JSON Parse error\", null));            return;        }        ServiceCommand<ResponseListener<Object>> command =                new ServiceCommand<ResponseListener<Object>>(null, null, null, listener);        mActiveCommands.put(requestId, command);        sendMessage(message, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "next", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void next(final ResponseListener<Object> listener) {        int requestIdNumber = getNextId();        final String requestId = String.format(Locale.US, \"req%d\", requestIdNumber);        JSONObject message = null;        try {            message = new JSONObject() {                {                    put(\"contentType\", namespaceKey + \"mediaCommand\");                    put(\"mediaCommand\", new JSONObject() {                        {                            put(\"type\", \"playNext\");                            put(\"requestId\", requestId);                        }                    });                }            };        } catch (JSONException e) {            Util.postError(listener, new ServiceCommandError(0, \"JSON Parse error\", null));            return;        }        ServiceCommand<ResponseListener<Object>> command =                new ServiceCommand<ResponseListener<Object>>(null, null, null, listener);        mActiveCommands.put(requestId, command);        sendMessage(message, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/sessions/WebOSWebAppSession.java", "stars": "4", "class": {"name": "WebOSWebAppSession", "extends": "WebAppSession", "implements": null, "modifiers": ["public"]}}, {"method_name": "onAttachedToWindow", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onAttachedToWindow() {        super.onAttachedToWindow();        view = (Practice01ArgbEvaluatorView) findViewById(R.id.objectAnimatorView);        animateBt = (Button) findViewById(R.id.animateBt);        animateBt.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View v) {                ObjectAnimator animator = ObjectAnimator.ofInt(view, \"color\", 0xffff0000, 0xff00ff00);                // \u5728\u8fd9\u91cc\u4f7f\u7528 ObjectAnimator.setEvaluator() \u6765\u8bbe\u7f6e ArgbEvaluator\uff0c\u4fee\u590d\u95ea\u70c1\u95ee\u9898                animator.setInterpolator(new LinearInterpolator());                animator.setEvaluator(new ArgbEvaluator());                animator.setDuration(2000);                animator.start();            }        });    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson6/practice01/Practice01ArgbEvaluatorLayout.java", "stars": "2", "class": {"name": "Practice01ArgbEvaluatorLayout", "extends": "RelativeLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["android", "android", "android"], "throws": null, "modifiers": ["public"], "return_type": "android", "snippet": "\tpublic android.view.View onCreateView (android.view.LayoutInflater p0, android.view.ViewGroup p1, android.os.Bundle p2)\t{\t\treturn n_onCreateView (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellSectionRenderer.java", "stars": "2", "class": {"name": "ShellSectionRenderer", "extends": "android", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "n_onCreateView", "params": ["android", "android", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "android", "snippet": "\tprivate native android.view.View n_onCreateView (android.view.LayoutInflater p0, android.view.ViewGroup p1, android.os.Bundle p2);\tpublic void onDestroy ()\t{\t\tn_onDestroy ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellSectionRenderer.java", "stars": "2", "class": {"name": "ShellSectionRenderer", "extends": "android", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDestroy ()\t{\t\tn_onDestroy ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellSectionRenderer.java", "stars": "2", "class": {"name": "ShellSectionRenderer", "extends": "android", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "n_onDestroy", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDestroy ();\tpublic void onPageScrollStateChanged (int p0)\t{\t\tn_onPageScrollStateChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellSectionRenderer.java", "stars": "2", "class": {"name": "ShellSectionRenderer", "extends": "android", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "onPageScrollStateChanged", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onPageScrollStateChanged (int p0)\t{\t\tn_onPageScrollStateChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellSectionRenderer.java", "stars": "2", "class": {"name": "ShellSectionRenderer", "extends": "android", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "n_onPageScrollStateChanged", "params": ["int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onPageScrollStateChanged (int p0);\tpublic void onPageScrolled (int p0, float p1, int p2)\t{\t\tn_onPageScrolled (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellSectionRenderer.java", "stars": "2", "class": {"name": "ShellSectionRenderer", "extends": "android", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "onPageScrolled", "params": ["int", "float", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onPageScrolled (int p0, float p1, int p2)\t{\t\tn_onPageScrolled (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellSectionRenderer.java", "stars": "2", "class": {"name": "ShellSectionRenderer", "extends": "android", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "n_onPageScrolled", "params": ["int", "float", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onPageScrolled (int p0, float p1, int p2);\tpublic void onPageSelected (int p0)\t{\t\tn_onPageSelected (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellSectionRenderer.java", "stars": "2", "class": {"name": "ShellSectionRenderer", "extends": "android", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "onPageSelected", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onPageSelected (int p0)\t{\t\tn_onPageSelected (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellSectionRenderer.java", "stars": "2", "class": {"name": "ShellSectionRenderer", "extends": "android", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "n_onPageSelected", "params": ["int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onPageSelected (int p0);\tpublic void onClick (android.view.View p0)\t{\t\tn_onClick (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellSectionRenderer.java", "stars": "2", "class": {"name": "ShellSectionRenderer", "extends": "android", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "onClick", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onClick (android.view.View p0)\t{\t\tn_onClick (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellSectionRenderer.java", "stars": "2", "class": {"name": "ShellSectionRenderer", "extends": "android", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "n_onClick", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onClick (android.view.View p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellSectionRenderer.java", "stars": "2", "class": {"name": "ShellSectionRenderer", "extends": "android", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellSectionRenderer.java", "stars": "2", "class": {"name": "ShellSectionRenderer", "extends": "android", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellSectionRenderer.java", "stars": "2", "class": {"name": "ShellSectionRenderer", "extends": "android", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "valueChanged", "params": ["ListSelectionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void valueChanged(ListSelectionEvent e) {        String path= ProjectViewer.scriptString+\"\\\\\"+ GUI.pvv6.elementAt(GUI.pvl6.getSelectedIndex()).toString();        File file=new File(path);        StringBuilder result = new StringBuilder();        BufferedReader bf= null;        System.out.println(path);        try {            bf = new BufferedReader(new FileReader(file));            String s;            BufferedReader bf1=new BufferedReader(new FileReader(file));            String s1;            while((s1 = bf1.readLine())!=null){                result.append(System.lineSeparator()+s1);            }            bf.close();            GUI.jt1.setText(result.toString());        } catch (IOException ex) {            ex.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/4156/MindustryModMaker/master/src/Listener/ScriptProjectListener.java", "stars": "2", "class": {"name": "ScriptProjectListener", "extends": null, "implements": ["ListSelectionListener"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //\u88c5\u7bb1:\u628a\u57fa\u672c\u7c7b\u578b\u7684\u6570\u636e,\u5305\u88c5\u5230\u5305\u88c5\u7c7b\u4e2d(\u57fa\u672c\u7c7b\u578b\u7684\u6570\u636e->\u5305\u88c5\u7c7b)        //\u6784\u9020\u65b9\u6cd5        Integer in1 = new Integer(1);//\u65b9\u6cd5\u4e0a\u6709\u6a2a\u7ebf,\u8bf4\u660e\u65b9\u6cd5\u8fc7\u65f6\u4e86        System.out.println(in1);//1 \u91cd\u5199\u4e86toString\u65b9\u6cd5        Integer in2 = new Integer(\"1\");        System.out.println(in2);//1        //\u9759\u6001\u65b9\u6cd5        Integer in3 = Integer.valueOf(1);        System.out.println(in3);        //Integer in4 = Integer.valueOf(\"a\");//NumberFormatException\u6570\u5b57\u683c\u5f0f\u5316\u5f02\u5e38        Integer in4 = Integer.valueOf(\"1\");        System.out.println(in4);        //\u62c6\u7bb1:\u5728\u5305\u88c5\u7c7b\u4e2d\u53d6\u51fa\u57fa\u672c\u7c7b\u578b\u7684\u6570\u636e(\u5305\u88c5\u7c7b->\u57fa\u672c\u7c7b\u578b\u7684\u6570\u636e)        int i = in1.intValue();        System.out.println(i);    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/12.%E3%80%90Object%E7%B1%BB%E3%80%81%E5%B8%B8%E7%94%A8API%E3%80%91-%E7%AC%94%E8%AE%B0/code/01_API/src/com/itheima/demo07Integer/Demo01Integer.java", "stars": "2", "class": {"name": "Demo01Integer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onAttachedToWindow", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onAttachedToWindow ()\t{\t\tn_onAttachedToWindow ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/MasterDetailRenderer.java", "stars": "2", "class": {"name": "MasterDetailRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onAttachedToWindow", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onAttachedToWindow ();\tpublic void onDetachedFromWindow ()\t{\t\tn_onDetachedFromWindow ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/MasterDetailRenderer.java", "stars": "2", "class": {"name": "MasterDetailRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onDetachedFromWindow", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDetachedFromWindow ()\t{\t\tn_onDetachedFromWindow ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/MasterDetailRenderer.java", "stars": "2", "class": {"name": "MasterDetailRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onDetachedFromWindow", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDetachedFromWindow ();\tpublic void onLayout (boolean p0, int p1, int p2, int p3, int p4)\t{\t\tn_onLayout (p0, p1, p2, p3, p4);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/MasterDetailRenderer.java", "stars": "2", "class": {"name": "MasterDetailRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onLayout (boolean p0, int p1, int p2, int p3, int p4)\t{\t\tn_onLayout (p0, p1, p2, p3, p4);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/MasterDetailRenderer.java", "stars": "2", "class": {"name": "MasterDetailRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onLayout (boolean p0, int p1, int p2, int p3, int p4);\tpublic void onDrawerClosed (android.view.View p0)\t{\t\tn_onDrawerClosed (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/MasterDetailRenderer.java", "stars": "2", "class": {"name": "MasterDetailRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onDrawerClosed", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDrawerClosed (android.view.View p0)\t{\t\tn_onDrawerClosed (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/MasterDetailRenderer.java", "stars": "2", "class": {"name": "MasterDetailRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onDrawerClosed", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDrawerClosed (android.view.View p0);\tpublic void onDrawerOpened (android.view.View p0)\t{\t\tn_onDrawerOpened (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/MasterDetailRenderer.java", "stars": "2", "class": {"name": "MasterDetailRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onDrawerOpened", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDrawerOpened (android.view.View p0)\t{\t\tn_onDrawerOpened (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/MasterDetailRenderer.java", "stars": "2", "class": {"name": "MasterDetailRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onDrawerOpened", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDrawerOpened (android.view.View p0);\tpublic void onDrawerSlide (android.view.View p0, float p1)\t{\t\tn_onDrawerSlide (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/MasterDetailRenderer.java", "stars": "2", "class": {"name": "MasterDetailRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onDrawerSlide", "params": ["android", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDrawerSlide (android.view.View p0, float p1)\t{\t\tn_onDrawerSlide (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/MasterDetailRenderer.java", "stars": "2", "class": {"name": "MasterDetailRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onDrawerSlide", "params": ["android", "float"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDrawerSlide (android.view.View p0, float p1);\tpublic void onDrawerStateChanged (int p0)\t{\t\tn_onDrawerStateChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/MasterDetailRenderer.java", "stars": "2", "class": {"name": "MasterDetailRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onDrawerStateChanged", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDrawerStateChanged (int p0)\t{\t\tn_onDrawerStateChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/MasterDetailRenderer.java", "stars": "2", "class": {"name": "MasterDetailRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onDrawerStateChanged", "params": ["int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDrawerStateChanged (int p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/MasterDetailRenderer.java", "stars": "2", "class": {"name": "MasterDetailRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/MasterDetailRenderer.java", "stars": "2", "class": {"name": "MasterDetailRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/MasterDetailRenderer.java", "stars": "2", "class": {"name": "MasterDetailRenderer", "extends": "android", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "getDeviceId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getDeviceId() {\t\treturn deviceId;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/event/online/OnlineEvent.java", "stars": "29", "class": {"name": "OnlineEvent", "extends": "ApplicationEvent", "implements": null, "modifiers": ["public"]}}, {"method_name": "setDeviceId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setDeviceId(String deviceId) {\t\tthis.deviceId = deviceId;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/event/online/OnlineEvent.java", "stars": "29", "class": {"name": "OnlineEvent", "extends": "ApplicationEvent", "implements": null, "modifiers": ["public"]}}, {"method_name": "getFrom", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getFrom() {\t\treturn from;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/event/online/OnlineEvent.java", "stars": "29", "class": {"name": "OnlineEvent", "extends": "ApplicationEvent", "implements": null, "modifiers": ["public"]}}, {"method_name": "setFrom", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setFrom(String from) {\t\tthis.from = from;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/event/online/OnlineEvent.java", "stars": "29", "class": {"name": "OnlineEvent", "extends": "ApplicationEvent", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args){        Integer i = new Integer(100);        new Integer(200);        System.out.println(i);    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/cc1021/Integer/IntegerDemo.java", "stars": "2", "class": {"name": "IntegerDemo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getCode() {    return code;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/Response.java", "stars": "2", "class": {"name": "Response", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setCode", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setCode(String code) {    this.code = code;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/Response.java", "stars": "2", "class": {"name": "Response", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getMessage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getMessage() {    return message;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/Response.java", "stars": "2", "class": {"name": "Response", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setMessage", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setMessage(String message) {    this.message = message;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/Response.java", "stars": "2", "class": {"name": "Response", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T getData() {    return data;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/Response.java", "stars": "2", "class": {"name": "Response", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setData", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setData(T data) {    this.data = data;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/Response.java", "stars": "2", "class": {"name": "Response", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getNextGetDate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getNextGetDate() {    return nextGetDate;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/Response.java", "stars": "2", "class": {"name": "Response", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setNextGetDate", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Response<T>", "snippet": "  public Response<T> setNextGetDate(String nextGetDate) {    this.nextGetDate = nextGetDate;    return this;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/Response.java", "stars": "2", "class": {"name": "Response", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getNextGetTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getNextGetTime() {    return nextGetTime;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/Response.java", "stars": "2", "class": {"name": "Response", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setNextGetTime", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "Response<T>", "snippet": "  public Response<T> setNextGetTime(long nextGetTime) {    this.nextGetTime = nextGetTime;    return this;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/Response.java", "stars": "2", "class": {"name": "Response", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getWechatNotificationResult", "params": [], "throws": null, "modifiers": ["public"], "return_type": "WechatNotificationResultVO", "snippet": "  public WechatNotificationResultVO getWechatNotificationResult() {    return wechatNotificationResult;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/Response.java", "stars": "2", "class": {"name": "Response", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setWechatNotificationResult", "params": ["WechatNotificationResultVO"], "throws": null, "modifiers": ["public"], "return_type": "Response<T>", "snippet": "  public Response<T> setWechatNotificationResult(WechatNotificationResultVO wechatNotificationResult) {    this.wechatNotificationResult = wechatNotificationResult;    return this;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/Response.java", "stars": "2", "class": {"name": "Response", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean equals(Object o) {    if (this == o) return true;    if (!(o instanceof Response)) return false;    Response<?> response = (Response<?>) o;    return Objects.equals(getCode(), response.getCode()) &&            Objects.equals(getMessage(), response.getMessage()) &&            Objects.equals(wechatNotificationResult, response.wechatNotificationResult) &&            Objects.equals(getData(), response.getData());  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/Response.java", "stars": "2", "class": {"name": "Response", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int hashCode() {    return Objects.hash(getCode(), getMessage(), wechatNotificationResult, getData());  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/Response.java", "stars": "2", "class": {"name": "Response", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "onEnable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onEnable() {        // Load an instance of 'LuckPerms' using the services manager.        this.luckPerms = getServer().getServicesManager().load(LuckPerms.class);        // Define some example commands.        getCommand(\"lpcookbook-addpermission\").setExecutor(new AddPermissionCommand(this, this.luckPerms));        getCommand(\"lpcookbook-getgroups\").setExecutor(new GetGroupsCommand(this, this.luckPerms));        getCommand(\"lpcookbook-getofflineprefix\").setExecutor(new GetOfflinePrefixCommand(this, this.luckPerms));        getCommand(\"lpcookbook-getprefix\").setExecutor(new GetPrefixCommand(this, this.luckPerms));        getCommand(\"lpcookbook-setgroup\").setExecutor(new SetGroupCommand(this, this.luckPerms));        getCommand(\"lpcookbook-setprefix\").setExecutor(new SetPrefixCommand(this, this.luckPerms));    }", "url": "https://raw.githubusercontent.com/LuckPerms/api-cookbook/master/src/main/java/me/lucko/lpcookbook/CookbookPlugin.java", "stars": "1", "class": {"name": "CookbookPlugin", "extends": "JavaPlugin", "implements": null, "modifiers": ["public"]}}, {"method_name": "descripcion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String descripcion(){        return \"Disfruta tu viaje individual\";    }", "url": "https://raw.githubusercontent.com/santiago9739/Ingenieria-del-software-2/master/src/main/java/co/unicauca/tallerpolimorfismo/modelo/ViajeIndividual.java", "stars": "1", "class": {"name": "ViajeIndividual", "extends": "Viaje", "implements": null, "modifiers": ["public"]}}, {"method_name": "getTickDelta", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "float", "snippet": "    @Shadow public abstract float getTickDelta();    @Shadow public ClientPlayerEntity player;    @Inject(method = \"render(Z)V\", at=@At(\"RETURN\"))    public void render(boolean tick, CallbackInfo info) {        FabricNDI.instance.getGameRenderHook().render(framebuffer, window, player, getTickDelta());    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/mixin/MinecraftClientMixin.java", "stars": "5", "class": {"name": "MinecraftClientMixin", "extends": null, "implements": ["MinecraftClientExt"], "modifiers": ["public", "abstract"]}}, {"method_name": "render", "params": ["boolean", "CallbackInfo"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void render(boolean tick, CallbackInfo info) {        FabricNDI.instance.getGameRenderHook().render(framebuffer, window, player, getTickDelta());    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/mixin/MinecraftClientMixin.java", "stars": "5", "class": {"name": "MinecraftClientMixin", "extends": null, "implements": ["MinecraftClientExt"], "modifiers": ["public", "abstract"]}}, {"method_name": "setFramebuffer", "params": ["Framebuffer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFramebuffer(Framebuffer fb) {        framebuffer = fb;    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/mixin/MinecraftClientMixin.java", "stars": "5", "class": {"name": "MinecraftClientMixin", "extends": null, "implements": ["MinecraftClientExt"], "modifiers": ["public", "abstract"]}}, {"method_name": "sendCommand", "params": ["int", "Object"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object sendCommand(int cmd, Object params) throws Exception {        if (params == null) params = \"\";        HashMap<String, Object> command = new HashMap<String, Object>();        command.put(\"cmd\", cmd);        command.put(\"value\", params);        sendData(command);        Object ret = recvData();        return ret;    }", "url": "https://raw.githubusercontent.com/qintianchen/GAutomatorView/master/src/sample/utils/SocketClient.java", "stars": "2", "class": {"name": "SocketClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sendData", "params": ["HashMap<String,Object>"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void sendData(HashMap<String, Object> data) throws IOException {        String serialized = JSONArray.toJSONString(data);        int length = serialized.length();        byte[] lenByte = new byte[4]; // the length of the data that ready to send        for (int i = 0; i < 4; i++) {            // 64 = 100 0000, 8= 1000; 64 >> 8 = 000,1000            lenByte[i] = (byte) ((length >> (i * 8)) & 0xff);        }        byte[] sentByte = serialized.getBytes(); // the data that ready to send        outputStream.write(lenByte);        outputStream.write(sentByte);        outputStream.flush();    }", "url": "https://raw.githubusercontent.com/qintianchen/GAutomatorView/master/src/sample/utils/SocketClient.java", "stars": "2", "class": {"name": "SocketClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "recvData", "params": [], "throws": ["Exception"], "modifiers": ["private"], "return_type": "Object", "snippet": "    private Object recvData() throws Exception {        HashMap<String, Object> deserialized = recvPackage();        if((int)deserialized.get(\"status\")!=0)        {            throw new Exception(\"Error code occured in RecvData\");        }        return deserialized.get(\"data\");    }", "url": "https://raw.githubusercontent.com/qintianchen/GAutomatorView/master/src/sample/utils/SocketClient.java", "stars": "2", "class": {"name": "SocketClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "recvPackage", "params": [], "throws": ["IOException"], "modifiers": ["private"], "return_type": "HashMap<String,Object>", "snippet": "    private HashMap<String, Object> recvPackage() throws IOException {        byte[] lenByte = new byte[4]; // receive the length of data        inputStream.read(lenByte, 0, 4);        int length = (int) (                (0xff & lenByte[0]) |                        (0xff & lenByte[1]) << 8 |                        (0xff & lenByte[2]) << 16 |                        (0xff & lenByte[3]) << 24        );        byte[] readByte = new byte[length];//        log.info(\"ready to read length: \" + length);        int offset = 0;        while(length > 0)        {            int readlength = inputStream.read(readByte, offset, length);//            log.info(String.valueOf(readlength));            length -= readlength;            offset += readlength;        }        String readStr = new String(readByte, StandardCharsets.UTF_8);//        log.info(\"\\n\"+readStr);        return JSONObject.parseObject(readStr, HashMap.class);    }", "url": "https://raw.githubusercontent.com/qintianchen/GAutomatorView/master/src/sample/utils/SocketClient.java", "stars": "2", "class": {"name": "SocketClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setIsDisplayed", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIsDisplayed(boolean isDisplayed) {        //BEGIN_INCLUDE(set_is_displayed)        synchronized (this) {            if (isDisplayed) {                mDisplayRefCount++;                mHasBeenDisplayed = true;            } else {                mDisplayRefCount--;            }        }        // Check to see if recycle() can be called        checkState();        //END_INCLUDE(set_is_displayed)    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/RecyclingBitmapDrawable.java", "stars": "74", "class": {"name": "RecyclingBitmapDrawable", "extends": "BitmapDrawable", "implements": null, "modifiers": ["public"]}}, {"method_name": "setIsCached", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIsCached(boolean isCached) {        //BEGIN_INCLUDE(set_is_cached)        synchronized (this) {            if (isCached) {                mCacheRefCount++;            } else {                mCacheRefCount--;            }        }        // Check to see if recycle() can be called        checkState();        //END_INCLUDE(set_is_cached)    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/RecyclingBitmapDrawable.java", "stars": "74", "class": {"name": "RecyclingBitmapDrawable", "extends": "BitmapDrawable", "implements": null, "modifiers": ["public"]}}, {"method_name": "checkState", "params": [], "throws": null, "modifiers": ["synchronized", "private"], "return_type": "void", "snippet": "    private synchronized void checkState() {        //BEGIN_INCLUDE(check_state)        // If the drawable cache and display ref counts = 0, and this drawable        // has been displayed, then recycle        if (mCacheRefCount <= 0 && mDisplayRefCount <= 0 && mHasBeenDisplayed                && hasValidBitmap()) {            if (BuildConfig.DEBUG) {                Log.d(TAG, \"No longer being used or cached so recycling. \"                        + toString());            }            getBitmap().recycle();        }        //END_INCLUDE(check_state)    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/RecyclingBitmapDrawable.java", "stars": "74", "class": {"name": "RecyclingBitmapDrawable", "extends": "BitmapDrawable", "implements": null, "modifiers": ["public"]}}, {"method_name": "hasValidBitmap", "params": [], "throws": null, "modifiers": ["synchronized", "private"], "return_type": "boolean", "snippet": "    private synchronized boolean hasValidBitmap() {        Bitmap bitmap = getBitmap();        return bitmap != null && !bitmap.isRecycled();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/RecyclingBitmapDrawable.java", "stars": "74", "class": {"name": "RecyclingBitmapDrawable", "extends": "BitmapDrawable", "implements": null, "modifiers": ["public"]}}, {"method_name": "createMessage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "EmailMessage", "snippet": "  public EmailMessage createMessage() {    final EmailMessage message = new EmailMessage(        this.mailHost, this.mailPort, this.mailUser, this.mailPassword, this);    message.setFromAddress(this.mailSender);    message.setTLS(this.tls);    message.setAuth(this.usesAuth);    return message;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/EmailMessageCreator.java", "stars": "18", "class": {"name": "EmailMessageCreator", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createSender", "params": ["Properties"], "throws": ["NoSuchProviderException"], "modifiers": ["public"], "return_type": "JavaxMailSender", "snippet": "  public JavaxMailSender createSender(final Properties props) throws NoSuchProviderException {    return new JavaxMailSender(props);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/utils/EmailMessageCreator.java", "stars": "18", "class": {"name": "EmailMessageCreator", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["synchronized", "public", "static"], "return_type": "RegisterB", "snippet": "    public static synchronized RegisterB getInstance() {        if (instance == null) {            instance = new RegisterB();        }        return instance;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/assembler/RegisterB.java", "stars": "4", "class": {"name": "RegisterB", "extends": "Register", "implements": null, "modifiers": ["public"]}}, {"method_name": "decode", "params": ["ImageDecodingInfo"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "Bitmap", "snippet": "\tpublic Bitmap decode(ImageDecodingInfo decodingInfo) throws IOException {\t\tInputStream imageStream = getImageStream(decodingInfo);\t\tImageFileInfo imageInfo = defineImageSizeAndRotation(imageStream, decodingInfo.getImageUri());\t\tOptions decodingOptions = prepareDecodingOptions(imageInfo.imageSize, decodingInfo);\t\timageStream = getImageStream(decodingInfo);\t\tBitmap decodedBitmap = decodeStream(imageStream, decodingOptions);\t\tif (decodedBitmap == null) {\t\t\tL.e(ERROR_CANT_DECODE_IMAGE, decodingInfo.getImageKey());\t\t} else {\t\t\tdecodedBitmap = considerExactScaleAndOrientaiton(decodedBitmap, decodingInfo, imageInfo.exif.rotation, imageInfo.exif.flipHorizontal);\t\t}\t\treturn decodedBitmap;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/decode/BaseImageDecoder.java", "stars": "74", "class": {"name": "BaseImageDecoder", "extends": null, "implements": ["ImageDecoder"], "modifiers": ["public"]}}, {"method_name": "getImageStream", "params": ["ImageDecodingInfo"], "throws": ["IOException"], "modifiers": ["protected"], "return_type": "InputStream", "snippet": "\tprotected InputStream getImageStream(ImageDecodingInfo decodingInfo) throws IOException {\t\treturn decodingInfo.getDownloader().getStream(decodingInfo.getImageUri(), decodingInfo.getExtraForDownloader());\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/decode/BaseImageDecoder.java", "stars": "74", "class": {"name": "BaseImageDecoder", "extends": null, "implements": ["ImageDecoder"], "modifiers": ["public"]}}, {"method_name": "defineImageSizeAndRotation", "params": ["InputStream", "String"], "throws": ["IOException"], "modifiers": ["protected"], "return_type": "ImageFileInfo", "snippet": "\tprotected ImageFileInfo defineImageSizeAndRotation(InputStream imageStream, String imageUri) throws IOException {\t\tOptions options = new Options();\t\toptions.inJustDecodeBounds = true;\t\ttry {\t\t\tBitmapFactory.decodeStream(imageStream, null, options);\t\t} finally {\t\t\tIoUtils.closeSilently(imageStream);\t\t}\t\tExifInfo exif;\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ECLAIR) {\t\t\texif = defineExifOrientation(imageUri, options.outMimeType);\t\t} else {\t\t\texif = new ExifInfo();\t\t}\t\treturn new ImageFileInfo(new ImageSize(options.outWidth, options.outHeight, exif.rotation), exif);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/decode/BaseImageDecoder.java", "stars": "74", "class": {"name": "BaseImageDecoder", "extends": null, "implements": ["ImageDecoder"], "modifiers": ["public"]}}, {"method_name": "defineExifOrientation", "params": ["String", "String"], "throws": null, "modifiers": ["protected"], "return_type": "ExifInfo", "snippet": "\tprotected ExifInfo defineExifOrientation(String imageUri, String mimeType) {\t\tint rotation = 0;\t\tboolean flip = false;\t\tif (\"image/jpeg\".equalsIgnoreCase(mimeType) && Scheme.ofUri(imageUri) == Scheme.FILE) {\t\t\ttry {\t\t\t\tExifInterface exif = new ExifInterface(Scheme.FILE.crop(imageUri));\t\t\t\tint exifOrientation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_NORMAL);\t\t\t\tswitch (exifOrientation) {\t\t\t\t\tcase ExifInterface.ORIENTATION_FLIP_HORIZONTAL:\t\t\t\t\t\tflip = true;\t\t\t\t\tcase ExifInterface.ORIENTATION_NORMAL:\t\t\t\t\t\trotation = 0;\t\t\t\t\t\tbreak;\t\t\t\t\tcase ExifInterface.ORIENTATION_TRANSVERSE:\t\t\t\t\t\tflip = true;\t\t\t\t\tcase ExifInterface.ORIENTATION_ROTATE_90:\t\t\t\t\t\trotation = 90;\t\t\t\t\t\tbreak;\t\t\t\t\tcase ExifInterface.ORIENTATION_FLIP_VERTICAL:\t\t\t\t\t\tflip = true;\t\t\t\t\tcase ExifInterface.ORIENTATION_ROTATE_180:\t\t\t\t\t\trotation = 180;\t\t\t\t\t\tbreak;\t\t\t\t\tcase ExifInterface.ORIENTATION_TRANSPOSE:\t\t\t\t\t\tflip = true;\t\t\t\t\tcase ExifInterface.ORIENTATION_ROTATE_270:\t\t\t\t\t\trotation = 270;\t\t\t\t\t\tbreak;\t\t\t\t}\t\t\t} catch (IOException e) {\t\t\t\tL.w(\"Can't read EXIF tags from file [%s]\", imageUri);\t\t\t}\t\t}\t\treturn new ExifInfo(rotation, flip);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/decode/BaseImageDecoder.java", "stars": "74", "class": {"name": "BaseImageDecoder", "extends": null, "implements": ["ImageDecoder"], "modifiers": ["public"]}}, {"method_name": "prepareDecodingOptions", "params": ["ImageSize", "ImageDecodingInfo"], "throws": null, "modifiers": ["protected"], "return_type": "Options", "snippet": "\tprotected Options prepareDecodingOptions(ImageSize imageSize, ImageDecodingInfo decodingInfo) {\t\tImageScaleType scaleType = decodingInfo.getImageScaleType();\t\tImageSize targetSize = decodingInfo.getTargetSize();\t\tint scale = 1;\t\tif (scaleType != ImageScaleType.NONE) {\t\t\tboolean powerOf2 = scaleType == ImageScaleType.IN_SAMPLE_POWER_OF_2;\t\t\tscale = ImageSizeUtils.computeImageSampleSize(imageSize, targetSize, decodingInfo.getViewScaleType(), powerOf2);\t\t\tif (loggingEnabled) L.d(LOG_SABSAMPLE_IMAGE, imageSize, imageSize.scaleDown(scale), scale, decodingInfo.getImageKey());\t\t}\t\tOptions decodingOptions = decodingInfo.getDecodingOptions();\t\tdecodingOptions.inSampleSize = scale;\t\treturn decodingOptions;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/decode/BaseImageDecoder.java", "stars": "74", "class": {"name": "BaseImageDecoder", "extends": null, "implements": ["ImageDecoder"], "modifiers": ["public"]}}, {"method_name": "decodeStream", "params": ["InputStream", "Options"], "throws": ["IOException"], "modifiers": ["protected"], "return_type": "Bitmap", "snippet": "\tprotected Bitmap decodeStream(InputStream imageStream, Options decodingOptions) throws IOException {\t\ttry {\t\t\treturn BitmapFactory.decodeStream(imageStream, null, decodingOptions);\t\t} finally {\t\t\tIoUtils.closeSilently(imageStream);\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/decode/BaseImageDecoder.java", "stars": "74", "class": {"name": "BaseImageDecoder", "extends": null, "implements": ["ImageDecoder"], "modifiers": ["public"]}}, {"method_name": "considerExactScaleAndOrientaiton", "params": ["Bitmap", "ImageDecodingInfo", "int", "boolean"], "throws": null, "modifiers": ["protected"], "return_type": "Bitmap", "snippet": "\tprotected Bitmap considerExactScaleAndOrientaiton(Bitmap subsampledBitmap, ImageDecodingInfo decodingInfo, int rotation, boolean flipHorizontal) {\t\tMatrix m = new Matrix();\t\t// Scale to exact size if need\t\tImageScaleType scaleType = decodingInfo.getImageScaleType();\t\tif (scaleType == ImageScaleType.EXACTLY || scaleType == ImageScaleType.EXACTLY_STRETCHED) {\t\t\tImageSize srcSize = new ImageSize(subsampledBitmap.getWidth(), subsampledBitmap.getHeight(), rotation);\t\t\tfloat scale = ImageSizeUtils.computeImageScale(srcSize, decodingInfo.getTargetSize(), decodingInfo.getViewScaleType(), scaleType == ImageScaleType.EXACTLY_STRETCHED);\t\t\tif (Float.compare(scale, 1f) != 0) {\t\t\t\tm.setScale(scale, scale);\t\t\t\tif (loggingEnabled) L.d(LOG_SCALE_IMAGE, srcSize, srcSize.scale(scale), scale, decodingInfo.getImageKey());\t\t\t}\t\t}\t\t// Flip bitmap if need\t\tif (flipHorizontal) {\t\t\tm.postScale(-1, 1);\t\t\tif (loggingEnabled) L.d(LOG_FLIP_IMAGE, decodingInfo.getImageKey());\t\t}\t\t// Rotate bitmap if need\t\tif (rotation != 0) {\t\t\tm.postRotate(rotation);\t\t\tif (loggingEnabled) L.d(LOG_ROTATE_IMAGE, rotation, decodingInfo.getImageKey());\t\t}\t\tBitmap finalBitmap = Bitmap.createBitmap(subsampledBitmap, 0, 0, subsampledBitmap.getWidth(), subsampledBitmap.getHeight(), m, true);\t\tif (finalBitmap != subsampledBitmap) {\t\t\tsubsampledBitmap.recycle();\t\t}\t\treturn finalBitmap;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/decode/BaseImageDecoder.java", "stars": "74", "class": {"name": "BaseImageDecoder", "extends": null, "implements": ["ImageDecoder"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args)\t{\t\tint x = 2;\t\tint y = 3;\t\tint min = (x < y ? x : y);\t\tSystem.out.println(min);\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/ray/Sanyuan.java", "stars": "2", "class": {"name": "Sanyuan", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "applyOptions", "params": ["Context", "GlideBuilder"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void applyOptions(@NonNull Context context, @NonNull GlideBuilder builder) {        // \u8bfb\u5199\u5916\u90e8\u7f13\u5b58\u76ee\u5f55\u4e0d\u9700\u8981\u7533\u8bf7\u5b58\u50a8\u6743\u9650        File diskCacheFile = new File(context.getCacheDir(), \"glide\");        // \u5982\u679c\u8fd9\u4e2a\u8def\u5f84\u662f\u4e00\u4e2a\u6587\u4ef6        if (diskCacheFile.exists() && diskCacheFile.isFile()) {            // \u6267\u884c\u5220\u9664\u64cd\u4f5c            diskCacheFile.delete();        }        // \u5982\u679c\u8fd9\u4e2a\u8def\u5f84\u4e0d\u5b58\u5728        if (!diskCacheFile.exists()) {            // \u521b\u5efa\u591a\u7ea7\u76ee\u5f55            diskCacheFile.mkdirs();        }        builder.setDiskCache(() -> DiskLruCacheWrapper.create(diskCacheFile, IMAGE_DISK_CACHE_MAX_SIZE));        MemorySizeCalculator calculator = new MemorySizeCalculator.Builder(context).build();        int defaultMemoryCacheSize = calculator.getMemoryCacheSize();        int defaultBitmapPoolSize = calculator.getBitmapPoolSize();        int customMemoryCacheSize = (int) (1.2 * defaultMemoryCacheSize);        int customBitmapPoolSize = (int) (1.2 * defaultBitmapPoolSize);        builder.setMemoryCache(new LruResourceCache(customMemoryCacheSize));        builder.setBitmapPool(new LruBitmapPool(customBitmapPoolSize));        // \u8bbe\u7f6e\u9ed8\u8ba4\u7684\u52a0\u8f7d\u5360\u4f4d\u56fe\u548c\u52a0\u8f7d\u51fa\u9519\u56fe        builder.setDefaultRequestOptions(new RequestOptions().placeholder(R.drawable.image_loading).error(R.drawable.image_load_err));    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/glide/GlideConfig.java", "stars": "1", "class": {"name": "GlideConfig", "extends": "AppGlideModule", "implements": null, "modifiers": ["public"]}}, {"method_name": "registerComponents", "params": ["Context", "Glide", "Registry"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void registerComponents(@NonNull Context context, @NonNull Glide glide, @NonNull Registry registry) {        // Glide \u9ed8\u8ba4\u91c7\u7528\u7684\u662f HttpURLConnection \u6765\u505a\u7f51\u7edc\u8bf7\u6c42\uff0c\u8fd9\u91cc\u5207\u6362\u6210\u66f4\u9ad8\u6548\u7684 OkHttp        registry.replace(GlideUrl.class, InputStream.class, new OkHttpLoader.Factory(EasyConfig.getInstance().getClient()));    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/glide/GlideConfig.java", "stars": "1", "class": {"name": "GlideConfig", "extends": "AppGlideModule", "implements": null, "modifiers": ["public"]}}, {"method_name": "isManifestParsingEnabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isManifestParsingEnabled() {        return false;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/glide/GlideConfig.java", "stars": "1", "class": {"name": "GlideConfig", "extends": "AppGlideModule", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getCode() {    return code;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/hiveutils/HiveQueryException.java", "stars": "18", "class": {"name": "HiveQueryException", "extends": "Exception", "implements": null, "modifiers": ["public"]}}, {"method_name": "getMessage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getMessage() {    return message;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/hiveutils/HiveQueryException.java", "stars": "18", "class": {"name": "HiveQueryException", "extends": "Exception", "implements": null, "modifiers": ["public"]}}, {"method_name": "getQuery", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getQuery() {    return query;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/hiveutils/HiveQueryException.java", "stars": "18", "class": {"name": "HiveQueryException", "extends": "Exception", "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    return \"HiveQueryException{\" + \"query='\" + query + '\\'' + \", code=\" + code        + \", message='\" + message + '\\'' + '}';  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/hiveutils/HiveQueryException.java", "stars": "18", "class": {"name": "HiveQueryException", "extends": "Exception", "implements": null, "modifiers": ["public"]}}, {"method_name": "formatDetailForPopcorn", "params": ["ShowDetails", "MediaProvider", "SubsProvider"], "throws": null, "modifiers": ["public"], "return_type": "ArrayList<Media>", "snippet": "    public ArrayList<Media> formatDetailForPopcorn(ShowDetails item, MediaProvider mediaProvider, SubsProvider subsProvider) {        ArrayList<Media> list = new ArrayList<>();        try {            butter.droid.base.providers.media.models.Show show = new butter.droid.base.providers.media.models.Show();            show.title = item.getTitle();            show.videoId = item.getImdbId();            show.imdbId = item.getImdbId();            show.tvdbId = item.getTvdbId();            show.seasons = item.getNumSeasons();            show.year = item.getYear();            if (item.getImages().getPoster() != null && !item.getImages().getPoster().contains(\"images/posterholder.png\")) {                show.image = item.getImages().getPoster().replace(\"/posters/\", \"/_cache/posters/\");                show.fullImage = item.getImages().getPoster();            }            if (item.getImages().getFanart() != null && !item.getImages().getFanart().contains(\"images/posterholder.png\")) {                show.headerImage = item.getImages().getFanart().replace(\"/original/\", \"/medium/\");            }            if (item.getStatus() != null) {                String status = item.getStatus();                if (status.equalsIgnoreCase(\"ended\")) {                    show.status = butter.droid.base.providers.media.models.Show.Status.ENDED;                } else if (status.equalsIgnoreCase(\"returning series\")) {                    show.status = butter.droid.base.providers.media.models.Show.Status.CONTINUING;                } else if (status.equalsIgnoreCase(\"in production\")) {                    show.status = butter.droid.base.providers.media.models.Show.Status.CONTINUING;                } else if (status.equalsIgnoreCase(\"canceled\")) {                    show.status = butter.droid.base.providers.media.models.Show.Status.CANCELED;                }            }            show.country = item.getCountry();            show.network = item.getNetwork();            show.synopsis = item.getSynopsis();            show.runtime = item.getRuntime();            show.airDay = item.getAirDay();            show.airTime = item.getAirTime();            show.rating = Double.toString(item.getRating().getPercentage() / 10);            show.genre = \"\";            StringBuilder stringBuilder = new StringBuilder();            for (String genre : item.getGenres()) {                if (stringBuilder.length() > 0) {                    stringBuilder.append(\", \");                }                stringBuilder.append(StringUtils.capWords(genre));            }            show.genre = stringBuilder.toString();            for (Episode episode : item.getEpisodes()) {                try {                    butter.droid.base.providers.media.models.Episode episodeObject = new butter.droid.base.providers.media.models.Episode();                    if (episode.getTorrents() != null) {                        for (Map.Entry<String, Quality> entry : episode.getTorrents().getQualities().entrySet()) {                            if (!entry.getKey().equals(\"0\")) {                                Media.Torrent torrent = new Media.Torrent(entry.getValue().getUrl(), entry.getValue().getSeeds(), entry.getValue().getPeers());                                episodeObject.torrents.put(entry.getKey(), torrent);                            }                        }                    }                    episodeObject.showName = show.title;                    episodeObject.dateBased = episode.isDateBased();                    episodeObject.aired = episode.getFirstAired();                    episodeObject.title = episode.getTitle();                    episodeObject.overview = episode.getOverview();                    episodeObject.season = episode.getSeason();                    episodeObject.episode = episode.getEpisode();                    episodeObject.videoId = show.videoId + episodeObject.season + episodeObject.episode;                    episodeObject.imdbId = show.imdbId;                    episodeObject.image = episodeObject.fullImage = episodeObject.headerImage = show.headerImage;                    show.episodes.add(episodeObject);                } catch (Exception e) {                    e.printStackTrace();                }            }            list.add(show);        } catch (Exception e) {            e.printStackTrace();        }        return list;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/TVDetailsReponse.java", "stars": "4", "class": {"name": "TVDetailsReponse", "extends": "DetailsResponse", "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldSetParameter", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldSetParameter() throws Exception {    TYPE_HANDLER.setParameter(ps, 1, INSTANT, null);    verify(ps).setInt(1, INSTANT.getValue());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/MonthTypeHandlerTest.java", "stars": "15", "class": {"name": "MonthTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByName() throws Exception {    when(rs.getInt(\"column\")).thenReturn(INSTANT.getValue());    assertEquals(INSTANT, TYPE_HANDLER.getResult(rs, \"column\"));    when(rs.getInt(\"column\")).thenReturn(0);    try {      TYPE_HANDLER.getResult(rs, \"column\");      fail();    } catch (ResultMapException e) {      assertEquals(\"Error attempting to get column 'column' from result set.  Cause: java.time.DateTimeException: Invalid value for MonthOfYear: 0\", e.getMessage());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/MonthTypeHandlerTest.java", "stars": "15", "class": {"name": "MonthTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByName() throws Exception {    when(rs.getInt(\"column\")).thenReturn(0);    when(rs.wasNull()).thenReturn(true);    assertNull(TYPE_HANDLER.getResult(rs, \"column\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/MonthTypeHandlerTest.java", "stars": "15", "class": {"name": "MonthTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByPosition() throws Exception {    when(rs.getInt(1)).thenReturn(INSTANT.getValue());    assertEquals(INSTANT, TYPE_HANDLER.getResult(rs, 1));    when(rs.getInt(1)).thenReturn(0);    try {      TYPE_HANDLER.getResult(rs, 1);      fail();    } catch (ResultMapException e) {      assertEquals(\"Error attempting to get column #1 from result set.  Cause: java.time.DateTimeException: Invalid value for MonthOfYear: 0\", e.getMessage());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/MonthTypeHandlerTest.java", "stars": "15", "class": {"name": "MonthTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByPosition() throws Exception {    when(rs.getInt(1)).thenReturn(0);    when(rs.wasNull()).thenReturn(true);    assertNull(TYPE_HANDLER.getResult(rs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/MonthTypeHandlerTest.java", "stars": "15", "class": {"name": "MonthTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromCallableStatement() throws Exception {    when(cs.getInt(1)).thenReturn(INSTANT.getValue());    assertEquals(INSTANT, TYPE_HANDLER.getResult(cs, 1));    when(cs.getInt(1)).thenReturn(0);    try {      TYPE_HANDLER.getResult(cs, 1);      fail();    } catch (ResultMapException e) {      assertEquals(\"Error attempting to get column #1 from callable statement.  Cause: java.time.DateTimeException: Invalid value for MonthOfYear: 0\", e.getMessage());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/MonthTypeHandlerTest.java", "stars": "15", "class": {"name": "MonthTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromCallableStatement() throws Exception {    when(cs.getInt(1)).thenReturn(0);    when(cs.wasNull()).thenReturn(true);    assertNull(TYPE_HANDLER.getResult(cs, 1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/MonthTypeHandlerTest.java", "stars": "15", "class": {"name": "MonthTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "updateControllerProperty", "params": ["Controller"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void updateControllerProperty(Controller controller) {        int button_count = 0;        boolean has_x = false;        boolean has_y = false;        boolean has_rx = false;        boolean has_ry = false;        boolean has_z = false;        boolean has_rz = false;        boolean has_pov = false;        Component[] components = controller.getComponents();        for (int i = 0; i < components.length; i++) {            // System.out.println(components[i].getIdentifier().getClass().toString() + \" \" + components[i].getIdentifier().getName() + \" \" + components[i].getName().toString());            if (components[i].getIdentifier().getName().equals(\"x\")) {                has_x = true;            }            else if (components[i].getIdentifier().getName().equals(\"y\")) {                has_y = true;            }            else if (components[i].getIdentifier().getName().equals(\"rx\")) {                has_rx = true;            }            else if (components[i].getIdentifier().getName().equals(\"ry\")) {                has_ry = true;            }            else if (components[i].getIdentifier().getName().equals(\"z\")) {                has_z = true;            }            else if (components[i].getIdentifier().getName().equals(\"rz\")) {                has_rz = true;            }            else if (components[i].getIdentifier().getName().equals(\"rz\")) {                has_rz = true;            }            else if (components[i].getIdentifier().getName().equals(\"pov\")) {                has_pov = true;            }            else if (components[i].getIdentifier() instanceof Component.Identifier.Button) {                button_count++;            }        }        if (has_x && has_y) {            rdbtn_xy.setEnabled(true);        }        else {            rdbtn_xy.setEnabled(false);        }        if (has_rx && has_ry) {            rdbtn_rxry.setEnabled(true);        }        else {            rdbtn_rxry.setEnabled(false);        }        if (has_z && has_rz) {            rdbtn_zrz.setEnabled(true);        }        else {            rdbtn_zrz.setEnabled(false);        }        if (has_pov) {            rdbtn_pov.setEnabled(true);        }        else {            rdbtn_pov.setEnabled(false);        }        for (int i = 0; i < Gamepad.GAMEPAD_NUMBER_OF_DIRECTIONS; i++) {            button_axes[i].setText(axisMapping[i].getKeyText());        }        axisProcessor = new AxisDialogKeyProcessor(gamepad, axisMapping, button_axes);        gamepad.setAxisKeyProcessor(axisProcessor);        for (int i = 0; i < Gamepad.GAMEPAD_MAX_NUMBER_OF_BUTTONS; i++) {            ComponentStatus status = componentStatusMap.get(button_buttons[i]);            if (i < button_count) {                button_buttons[i].setEnabled(true);                button_buttons[i].setVisible(true);                button_buttons[i].setBackground(Color.LIGHT_GRAY);            }            else {                button_buttons[i].setEnabled(false);                button_buttons[i].setVisible(false);                // button_buttons[i].setBackground(Color.DARK_GRAY);                // status.setStatus(ComponentStatus.STATUS_UNUSED);            }            button_buttons[i].setText(status.getKeyText());        }        buttonProcessor = new ButtonDialogKeyProcessor(gamepad, buttonMapping, button_buttons);        gamepad.setButtonKeyProcessor(buttonProcessor);        gamepad.restart(controller);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/InputDeviceConfigurationDialog.java", "stars": "4", "class": {"name": "InputDeviceConfigurationDialog", "extends": "JDialog", "implements": null, "modifiers": ["public"]}}, {"method_name": "applyAll", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean applyAll() {        boolean use_gamepad = checkBox_use_gamepad.isSelected();        if (use_gamepad && foundControllers.size() == 0) {            JOptionPane.showMessageDialog(                    null,                    \"\u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3002\",                    \"ERROR\",                    JOptionPane.ERROR_MESSAGE);            return false;        }        Gamepad.setPropertyOfGamepadUse(use_gamepad);        if (!use_gamepad) {            gamepad.restart(null);            return true;        }        // \u30b2\u30fc\u30e0\u30d1\u30c3\u30c9\u3092\u4f7f\u3046\u3068\u304d\u306e\u307f\u4ee5\u964d\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u30bb\u30c3\u30c8\u3059\u308b\u3002        Controller c = foundControllers.get(comboBox_devices.getSelectedIndex());        Gamepad.setPropertyOfGamepadName(c.getName());        if (radioButton_keyboard.isSelected()) {            Gamepad.setPropertyOfGamepadMappingMode(Gamepad.MODE_KEYBOARD);        }        else {            Gamepad.setPropertyOfGamepadMappingMode(Gamepad.MODE_NATIVE);        }        Gamepad.setPropertyOfGamepadAxisUsed(selected_axis);        Gamepad.setPropertyOfGamepadAxisMapping(axisMapping);        Gamepad.setPropertyOfGamepadButtonMapping(buttonMapping);        gamepad.setAxisKeyProcessor(new AxisKeyboardKeyProcessor(gamepad, axisMapping, computer.getHardware().getKeyboard()));        gamepad.setButtonKeyProcessor(new ButtonKeyboardKeyProcessor(gamepad, buttonMapping, computer.getHardware().getKeyboard()));        gamepad.restart(c);        return true;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/InputDeviceConfigurationDialog.java", "stars": "4", "class": {"name": "InputDeviceConfigurationDialog", "extends": "JDialog", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPreferredSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Dimension", "snippet": "        public Dimension getPreferredSize() {            Dimension d = super.getPreferredSize();            // d.width = d.height = Math.max(d.width, d.height);            d.width = d.height = 30;            return d;        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/InputDeviceConfigurationDialog.java", "stars": "4", "class": {"name": "RoundButton", "extends": "JButton", "implements": null, "modifiers": ["private"]}}, {"method_name": "updateUI", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void updateUI() {            super.updateUI();            setContentAreaFilled(false);            setFocusPainted(false);            setBackground(new Color(250, 250, 250));            initShape();        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/InputDeviceConfigurationDialog.java", "stars": "4", "class": {"name": "RoundButton", "extends": "JButton", "implements": null, "modifiers": ["private"]}}, {"method_name": "initShape", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void initShape() {            if (!getBounds().equals(base)) {                base = getBounds();                shape = new Ellipse2D.Float(0, 0, getWidth() - 1, getHeight() - 1);                border =new Ellipse2D.Float(                        focusstroke,                        focusstroke,                        getWidth() - 1 - focusstroke * 2,                        getHeight() - 1 - focusstroke * 2);            }        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/InputDeviceConfigurationDialog.java", "stars": "4", "class": {"name": "RoundButton", "extends": "JButton", "implements": null, "modifiers": ["private"]}}, {"method_name": "paintFocusAndRollover", "params": ["Graphics2D", "Color"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void paintFocusAndRollover(Graphics2D g2, Color color) {            g2.setPaint(new GradientPaint(                    0, 0, color, getWidth() - 1, getHeight() - 1, color.brighter(), true));            g2.fill(shape);            g2.setColor(getBackground());            g2.fill(border);        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/InputDeviceConfigurationDialog.java", "stars": "4", "class": {"name": "RoundButton", "extends": "JButton", "implements": null, "modifiers": ["private"]}}, {"method_name": "paintComponent", "params": ["Graphics"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void paintComponent(Graphics g) {            initShape();            Graphics2D g2 = (Graphics2D) g.create();            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,                    RenderingHints.VALUE_ANTIALIAS_ON);            if (getModel().isArmed()) {                g2.setColor(ac);                g2.fill(shape);            } else if (isRolloverEnabled() && getModel().isRollover()) {                paintFocusAndRollover(g2, rc);            } else if (hasFocus()) {                paintFocusAndRollover(g2, fc);            } else {                g2.setColor(getBackground());                g2.fill(shape);            }            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,                    RenderingHints.VALUE_ANTIALIAS_OFF);            g2.setColor(getBackground());            super.paintComponent(g2);            g2.dispose();        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/InputDeviceConfigurationDialog.java", "stars": "4", "class": {"name": "RoundButton", "extends": "JButton", "implements": null, "modifiers": ["private"]}}, {"method_name": "paintBorder", "params": ["Graphics"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void paintBorder(Graphics g) {            initShape();            Graphics2D g2 = (Graphics2D) g.create();            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,                    RenderingHints.VALUE_ANTIALIAS_ON);            g2.setColor(getForeground());            g2.draw(shape);            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,                    RenderingHints.VALUE_ANTIALIAS_OFF);            g2.dispose();        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/InputDeviceConfigurationDialog.java", "stars": "4", "class": {"name": "RoundButton", "extends": "JButton", "implements": null, "modifiers": ["private"]}}, {"method_name": "contains", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean contains(int x, int y) {            initShape();            return shape == null ? false : shape.contains(x, y);        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/InputDeviceConfigurationDialog.java", "stars": "4", "class": {"name": "RoundButton", "extends": "JButton", "implements": null, "modifiers": ["private"]}}, {"method_name": "keyPressed", "params": ["KeyEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void keyPressed(KeyEvent e) {            if (parent.hasFocus()) {                if (e.getKeyCode() == KeyEvent.VK_BACK_SPACE) {                    status.setStatus(ComponentStatus.STATUS_UNASSIGNED);                    status.setKeyCode(KeyEvent.VK_UNDEFINED);                    parent.setText(\"\u672a\u5272\u5f53\");                    keytext.setText(\"\u672a\u5272\u5f53\");                }                else if(e.getKeyCode() != KeyEvent.VK_ALT && status.getStatus() != ComponentStatus.STATUS_UNUSED) {                    status.setKeyCode(e.getKeyCode());                    parent.setText(KeyEvent.getKeyText(e.getKeyCode()));                    keytext.setText(KeyEvent.getKeyText(e.getKeyCode()));                }            }        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/InputDeviceConfigurationDialog.java", "stars": "4", "class": {"name": "KeyAdapterForButton", "extends": "KeyAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "actionPerformed", "params": ["ActionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void actionPerformed(ActionEvent e) {            applyAll();            InputDeviceConfigurationDialog.this.dispose();        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/InputDeviceConfigurationDialog.java", "stars": "4", "class": {"name": "SwingActionOk", "extends": "AbstractAction", "implements": null, "modifiers": ["private"]}}, {"method_name": "actionPerformed", "params": ["ActionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void actionPerformed(ActionEvent e) {            Gamepad.setPropertyOfGamepadUse(saveduseGamepad);            gamepad.setAxisKeyProcessor(savedAxisKeyProcessor);            gamepad.setButtonKeyProcessor(savedButtonKeyProcessor);            gamepad.setAxisType(savedAxisUsed);            gamepad.restart(savedController);            InputDeviceConfigurationDialog.this.dispose();        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/InputDeviceConfigurationDialog.java", "stars": "4", "class": {"name": "SwingActionCancel", "extends": "AbstractAction", "implements": null, "modifiers": ["private"]}}, {"method_name": "actionPerformed", "params": ["ActionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void actionPerformed(ActionEvent e) {            applyAll();            savedAxisKeyProcessor = gamepad.getAxisKeyProcessor();            saveduseGamepad = Gamepad.getPropertyOfGamepadUse();            savedButtonKeyProcessor = gamepad.getButtonKeyProcessor();            savedAxisUsed = Gamepad.getPropertyOfGamepadAxisUsed();            savedController = gamepad.getController();            Controller controller = foundControllers.get(comboBox_devices.getSelectedIndex());            updateControllerProperty(controller);        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/InputDeviceConfigurationDialog.java", "stars": "4", "class": {"name": "SwingActionApply", "extends": "AbstractAction", "implements": null, "modifiers": ["private"]}}, {"method_name": "getPageHeightWidthRatio", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getPageHeightWidthRatio() {        return mPageHeightWidthRatio;    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/graceviewpager/src/main/java/com/lancewu/graceviewpager/GraceMultiPagePlugin.java", "stars": "331", "class": {"name": "GraceMultiPagePlugin", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPageHeightWidthRatio", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPageHeightWidthRatio(float pageHeightWidthRatio) {        if (pageHeightWidthRatio < 0) {            pageHeightWidthRatio = 0;        }        if (mPageHeightWidthRatio == pageHeightWidthRatio) {            return;        }        mPageHeightWidthRatio = pageHeightWidthRatio;        mViewPager.requestLayout();    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/graceviewpager/src/main/java/com/lancewu/graceviewpager/GraceMultiPagePlugin.java", "stars": "331", "class": {"name": "GraceMultiPagePlugin", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPageHorizontalMinMargin", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getPageHorizontalMinMargin() {        return mPageHorizontalMinMargin;    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/graceviewpager/src/main/java/com/lancewu/graceviewpager/GraceMultiPagePlugin.java", "stars": "331", "class": {"name": "GraceMultiPagePlugin", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPageHorizontalMinMargin", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPageHorizontalMinMargin(int pageHorizontalMinMargin) {        if (mPageHorizontalMinMargin == pageHorizontalMinMargin) {            return;        }        mPageHorizontalMinMargin = pageHorizontalMinMargin;        mViewPager.requestLayout();    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/graceviewpager/src/main/java/com/lancewu/graceviewpager/GraceMultiPagePlugin.java", "stars": "331", "class": {"name": "GraceMultiPagePlugin", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPageVerticalMinMargin", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getPageVerticalMinMargin() {        return mPageVerticalMinMargin;    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/graceviewpager/src/main/java/com/lancewu/graceviewpager/GraceMultiPagePlugin.java", "stars": "331", "class": {"name": "GraceMultiPagePlugin", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPageVerticalMinMargin", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPageVerticalMinMargin(int pageVerticalMinMargin) {        if (mPageVerticalMinMargin == pageVerticalMinMargin) {            return;        }        mPageVerticalMinMargin = pageVerticalMinMargin;        mViewPager.requestLayout();    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/graceviewpager/src/main/java/com/lancewu/graceviewpager/GraceMultiPagePlugin.java", "stars": "331", "class": {"name": "GraceMultiPagePlugin", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "determinePageSize", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void determinePageSize(int width, int height) {        if (width == 0 || height == 0) {            return;        }        int paddingHorizontal = mPageHorizontalMinMargin;        int paddingVertical = mPageVerticalMinMargin;        int availableWidth = width - 2 * paddingHorizontal;        int availableHeight = height - 2 * paddingVertical;        // \u6839\u636e\u6bd4\u4f8b\uff0c\u8ba1\u7b97\u5408\u9002\u7684padding        if (mPageHeightWidthRatio > 0 && availableHeight > 0 && availableWidth > 0) {            float ratio = (float) availableHeight / availableWidth;            // page\u6bd4\u4f8b\u5927\u4e8e\u5269\u4f59\u7a7a\u95f4\u6bd4\u4f8b\uff0c\u6c34\u5e73\u7a7a\u95f4\u5145\u88d5            if (mPageHeightWidthRatio >= ratio) {                int pageWidth = (int) (availableHeight / mPageHeightWidthRatio);                paddingHorizontal += (availableWidth - pageWidth) * 0.5f;            } else {                int pageHeight = (int) (availableWidth * mPageHeightWidthRatio);                paddingVertical += (availableHeight - pageHeight) * 0.5f;            }        }        if (mViewPager.getPaddingLeft() == paddingHorizontal                && mViewPager.getPaddingRight() == paddingHorizontal                && mViewPager.getPaddingTop() == paddingVertical                && mViewPager.getPaddingBottom() == paddingVertical) {            return;        }        mViewPager.setClipToPadding(false);        mViewPager.setPadding(paddingHorizontal, paddingVertical, paddingHorizontal, paddingVertical);    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/graceviewpager/src/main/java/com/lancewu/graceviewpager/GraceMultiPagePlugin.java", "stars": "331", "class": {"name": "GraceMultiPagePlugin", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pageHeightWidthRatio", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder pageHeightWidthRatio(float pageHeightWidthRatio) {            mPageHeightWidthRatio = pageHeightWidthRatio;            return this;        }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/graceviewpager/src/main/java/com/lancewu/graceviewpager/GraceMultiPagePlugin.java", "stars": "331", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "pageHorizontalMinMargin", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder pageHorizontalMinMargin(int pageHorizontalMinMargin) {            mPageHorizontalMinMargin = pageHorizontalMinMargin;            return this;        }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/graceviewpager/src/main/java/com/lancewu/graceviewpager/GraceMultiPagePlugin.java", "stars": "331", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "pageVerticalMinMargin", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder pageVerticalMinMargin(int pageVerticalMinMargin) {            mPageVerticalMinMargin = pageVerticalMinMargin;            return this;        }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/graceviewpager/src/main/java/com/lancewu/graceviewpager/GraceMultiPagePlugin.java", "stars": "331", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "build", "params": [], "throws": null, "modifiers": ["public"], "return_type": "GraceMultiPagePlugin", "snippet": "        public GraceMultiPagePlugin build() {            return new GraceMultiPagePlugin(mViewPager, mPageHeightWidthRatio, mPageHorizontalMinMargin, mPageVerticalMinMargin);        }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/graceviewpager/src/main/java/com/lancewu/graceviewpager/GraceMultiPagePlugin.java", "stars": "331", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "fromHtml", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Spanned", "snippet": "    public static Spanned fromHtml(String source) {        return fromHtml(source, null, null);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/htmlwidget/Html.java", "stars": "74", "class": {"name": "Html", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "fromHtml", "params": ["String", "ImageGetter", "TagHandler"], "throws": null, "modifiers": ["public", "static"], "return_type": "Spanned", "snippet": "    public static Spanned fromHtml(String source, ImageGetter imageGetter,                                   TagHandler tagHandler) {        Parser parser = new Parser();        try {            parser.setProperty(Parser.schemaProperty, HtmlParser.schema);        } catch (org.xml.sax.SAXNotRecognizedException e) {            // Should not happen.            throw new RuntimeException(e);        } catch (org.xml.sax.SAXNotSupportedException e) {            // Should not happen.            throw new RuntimeException(e);        }        HtmlToSpannedConverter converter =                new HtmlToSpannedConverter(source, imageGetter, tagHandler,                        parser);        return converter.convert();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/htmlwidget/Html.java", "stars": "74", "class": {"name": "Html", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "toHtml", "params": ["Spanned"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String toHtml(Spanned text) {        StringBuilder out = new StringBuilder();        withinHtml(out, text);        return out.toString();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/htmlwidget/Html.java", "stars": "74", "class": {"name": "Html", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "withinHtml", "params": ["StringBuilder", "Spanned"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void withinHtml(StringBuilder out, Spanned text) {        int len = text.length();        int next;        for (int i = 0; i < text.length(); i = next) {            next = text.nextSpanTransition(i, len, ParagraphStyle.class);            ParagraphStyle[] style = text.getSpans(i, next, ParagraphStyle.class);            String elements = \" \";            boolean needDiv = false;            for(int j = 0; j < style.length; j++) {                if (style[j] instanceof AlignmentSpan) {                    Layout.Alignment align =                        ((AlignmentSpan) style[j]).getAlignment();                    needDiv = true;                    if (align == Layout.Alignment.ALIGN_CENTER) {                        elements = \"align=\\\"center\\\" \" + elements;                    } else if (align == Layout.Alignment.ALIGN_OPPOSITE) {                        elements = \"align=\\\"right\\\" \" + elements;                    } else {                        elements = \"align=\\\"left\\\" \" + elements;                    }                }            }            if (needDiv) {                out.append(\"<div \" + elements + \">\");            }            withinDiv(out, text, i, next);            if (needDiv) {                out.append(\"</div>\");            }        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/htmlwidget/Html.java", "stars": "74", "class": {"name": "Html", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "withinDiv", "params": ["StringBuilder", "Spanned", "int", "int"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void withinDiv(StringBuilder out, Spanned text,            int start, int end) {        int next;        for (int i = start; i < end; i = next) {            next = text.nextSpanTransition(i, end, QuoteSpan.class);            QuoteSpan[] quotes = text.getSpans(i, next, QuoteSpan.class);            for (QuoteSpan quote: quotes) {                out.append(\"<blockquote>\");            }            withinBlockquote(out, text, i, next);            for (QuoteSpan quote: quotes) {                out.append(\"</blockquote>\\n\");            }        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/htmlwidget/Html.java", "stars": "74", "class": {"name": "Html", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "withinBlockquote", "params": ["StringBuilder", "Spanned", "int", "int"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void withinBlockquote(StringBuilder out, Spanned text,                                         int start, int end) {        out.append(\"<p>\");        int next;        for (int i = start; i < end; i = next) {            next = TextUtils.indexOf(text, '\\n', i, end);            if (next < 0) {                next = end;            }            int nl = 0;            while (next < end && text.charAt(next) == '\\n') {                nl++;                next++;            }            withinParagraph(out, text, i, next - nl, nl, next == end);        }        out.append(\"</p>\\n\");    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/htmlwidget/Html.java", "stars": "74", "class": {"name": "Html", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "withinParagraph", "params": ["StringBuilder", "Spanned", "int", "int", "int", "boolean"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void withinParagraph(StringBuilder out, Spanned text,                                        int start, int end, int nl,                                        boolean last) {        int next;        for (int i = start; i < end; i = next) {            next = text.nextSpanTransition(i, end, CharacterStyle.class);            CharacterStyle[] style = text.getSpans(i, next,                                                   CharacterStyle.class);            for (int j = 0; j < style.length; j++) {                if (style[j] instanceof StyleSpan) {                    int s = ((StyleSpan) style[j]).getStyle();                    if ((s & Typeface.BOLD) != 0) {                        out.append(\"<b>\");                    }                    if ((s & Typeface.ITALIC) != 0) {                        out.append(\"<i>\");                    }                }                if (style[j] instanceof TypefaceSpan) {                    String s = ((TypefaceSpan) style[j]).getFamily();                    if (s.equals(\"monospace\")) {                        out.append(\"<tt>\");                    }                }                if (style[j] instanceof SuperscriptSpan) {                    out.append(\"<sup>\");                }                if (style[j] instanceof SubscriptSpan) {                    out.append(\"<sub>\");                }                if (style[j] instanceof UnderlineSpan) {                    out.append(\"<u>\");                }                if (style[j] instanceof StrikethroughSpan) {                    out.append(\"<strike>\");                }                if (style[j] instanceof URLSpan) {                    out.append(\"<a href=\\\"\");                    out.append(((URLSpan) style[j]).getURL());                    out.append(\"\\\">\");                }                if (style[j] instanceof ImageSpan) {                    out.append(\"<img src=\\\"\");                    out.append(((ImageSpan) style[j]).getSource());                    out.append(\"\\\">\");                    // Don't output the dummy character underlying the image.                    i = next;                }                if (style[j] instanceof AbsoluteSizeSpan) {                    out.append(\"<font size =\\\"\");                    out.append(((AbsoluteSizeSpan) style[j]).getSize() / 6);                    out.append(\"\\\">\");                }                if (style[j] instanceof ForegroundColorSpan) {                    out.append(\"<font color =\\\"#\");                    String color = Integer.toHexString(((ForegroundColorSpan)                            style[j]).getForegroundColor() + 0x01000000);                    while (color.length() < 6) {                        color = \"0\" + color;                    }                    out.append(color);                    out.append(\"\\\">\");                }            }            withinStyle(out, text, i, next);            for (int j = style.length - 1; j >= 0; j--) {                if (style[j] instanceof ForegroundColorSpan) {                    out.append(\"</font>\");                }                if (style[j] instanceof AbsoluteSizeSpan) {                    out.append(\"</font>\");                }                if (style[j] instanceof URLSpan) {                    out.append(\"</a>\");                }                if (style[j] instanceof StrikethroughSpan) {                    out.append(\"</strike>\");                }                if (style[j] instanceof UnderlineSpan) {                    out.append(\"</u>\");                }                if (style[j] instanceof SubscriptSpan) {                    out.append(\"</sub>\");                }                if (style[j] instanceof SuperscriptSpan) {                    out.append(\"</sup>\");                }                if (style[j] instanceof TypefaceSpan) {                    String s = ((TypefaceSpan) style[j]).getFamily();                    if (s.equals(\"monospace\")) {                        out.append(\"</tt>\");                    }                }                if (style[j] instanceof StyleSpan) {                    int s = ((StyleSpan) style[j]).getStyle();                    if ((s & Typeface.BOLD) != 0) {                        out.append(\"</b>\");                    }                    if ((s & Typeface.ITALIC) != 0) {                        out.append(\"</i>\");                    }                }            }        }        String p = last ? \"\" : \"</p>\\n<p>\";        if (nl == 1) {            out.append(\"<br>\\n\");        } else if (nl == 2) {            out.append(p);        } else {            for (int i = 2; i < nl; i++) {                out.append(\"<br>\");            }            out.append(p);        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/htmlwidget/Html.java", "stars": "74", "class": {"name": "Html", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "withinStyle", "params": ["StringBuilder", "Spanned", "int", "int"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void withinStyle(StringBuilder out, Spanned text,                                    int start, int end) {        for (int i = start; i < end; i++) {            char c = text.charAt(i);            if (c == '<') {                out.append(\"&lt;\");            } else if (c == '>') {                out.append(\"&gt;\");            } else if (c == '&') {                out.append(\"&amp;\");            } else if (c > 0x7E || c < ' ') {                out.append(\"&#\" + ((int) c) + \";\");            } else if (c == ' ') {                while (i + 1 < end && text.charAt(i + 1) == ' ') {                    out.append(\"&nbsp;\");                    i++;                }                out.append(' ');            } else {                out.append(c);            }        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/htmlwidget/Html.java", "stars": "74", "class": {"name": "Html", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "convert", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Spanned", "snippet": "    public Spanned convert() {        mReader.setContentHandler(this);        try {            mReader.parse(new InputSource(new StringReader(mSource)));        } catch (IOException e) {            // We are reading from a string. There should not be IO problems.            throw new RuntimeException(e);        } catch (SAXException e) {            // TagSoup doesn't throw parse exceptions.            throw new RuntimeException(e);        }        // Fix flags and range for paragraph-type markup.        Object[] obj = mSpannableStringBuilder.getSpans(0, mSpannableStringBuilder.length(), ParagraphStyle.class);        for (int i = 0; i < obj.length; i++) {            int start = mSpannableStringBuilder.getSpanStart(obj[i]);            int end = mSpannableStringBuilder.getSpanEnd(obj[i]);            // If the last line of the range is blank, back off by one.            if (end - 2 >= 0) {                if (mSpannableStringBuilder.charAt(end - 1) == '\\n' &&                    mSpannableStringBuilder.charAt(end - 2) == '\\n') {                    end--;                }            }            if (end == start) {                mSpannableStringBuilder.removeSpan(obj[i]);            } else {                mSpannableStringBuilder.setSpan(obj[i], start, end, Spannable.SPAN_PARAGRAPH);            }        }        return mSpannableStringBuilder;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/htmlwidget/Html.java", "stars": "74", "class": {"name": "HtmlToSpannedConverter", "extends": null, "implements": ["ContentHandler"], "modifiers": []}}, {"method_name": "handleStartTag", "params": ["String", "Attributes"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void handleStartTag(String tag, Attributes attributes) {        if (tag.equalsIgnoreCase(\"br\")) {            // We don't need to handle this. TagSoup will ensure that there's a </br> for each <br>            // so we can safely emite the linebreaks when we handle the close tag.        } else if (tag.equalsIgnoreCase(\"p\")) {            handleP(mSpannableStringBuilder);        } else if (tag.equalsIgnoreCase(\"div\")) {            handleP(mSpannableStringBuilder);        } else if (tag.equalsIgnoreCase(\"em\")) {            start(mSpannableStringBuilder, new Bold());        } else if (tag.equalsIgnoreCase(\"b\")) {            start(mSpannableStringBuilder, new Bold());        } else if (tag.equalsIgnoreCase(\"strong\")) {            start(mSpannableStringBuilder, new Italic());        } else if (tag.equalsIgnoreCase(\"cite\")) {            start(mSpannableStringBuilder, new Italic());        } else if (tag.equalsIgnoreCase(\"dfn\")) {            start(mSpannableStringBuilder, new Italic());        } else if (tag.equalsIgnoreCase(\"i\")) {            start(mSpannableStringBuilder, new Italic());        } else if (tag.equalsIgnoreCase(\"big\")) {            start(mSpannableStringBuilder, new Big());        } else if (tag.equalsIgnoreCase(\"small\")) {            start(mSpannableStringBuilder, new Small());        } else if (tag.equalsIgnoreCase(\"font\")) {            startFont(mSpannableStringBuilder, attributes);        } else if (tag.equalsIgnoreCase(\"blockquote\")) {            handleP(mSpannableStringBuilder);            start(mSpannableStringBuilder, new Blockquote());        } else if (tag.equalsIgnoreCase(\"tt\")) {            start(mSpannableStringBuilder, new Monospace());        } else if (tag.equalsIgnoreCase(\"a\")) {            startA(mSpannableStringBuilder, attributes);        } else if (tag.equalsIgnoreCase(\"u\")) {            start(mSpannableStringBuilder, new Underline());        } else if (tag.equalsIgnoreCase(\"sup\")) {            start(mSpannableStringBuilder, new Super());        } else if (tag.equalsIgnoreCase(\"sub\")) {            start(mSpannableStringBuilder, new Sub());        } else if (tag.length() == 2 &&                   Character.toLowerCase(tag.charAt(0)) == 'h' &&                   tag.charAt(1) >= '1' && tag.charAt(1) <= '6') {            handleP(mSpannableStringBuilder);            start(mSpannableStringBuilder, new Header(tag.charAt(1) - '1'));        } else if (tag.equalsIgnoreCase(\"img\") && mImageGetter != null) {            startImg(mSpannableStringBuilder, attributes, mImageGetter);        } else if (mTagHandler != null) {            mTagHandler.handleTag(true, tag, attributes, mSpannableStringBuilder, mReader);        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/htmlwidget/Html.java", "stars": "74", "class": {"name": "HtmlToSpannedConverter", "extends": null, "implements": ["ContentHandler"], "modifiers": []}}, {"method_name": "handleEndTag", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void handleEndTag(String tag) {        if (tag.equalsIgnoreCase(\"br\")) {            handleBr(mSpannableStringBuilder);        } else if (tag.equalsIgnoreCase(\"p\")) {            handleP(mSpannableStringBuilder);        } else if (tag.equalsIgnoreCase(\"div\")) {            handleP(mSpannableStringBuilder);        } else if (tag.equalsIgnoreCase(\"em\")) {            end(mSpannableStringBuilder, Bold.class, new StyleSpan(Typeface.BOLD));        } else if (tag.equalsIgnoreCase(\"b\")) {            end(mSpannableStringBuilder, Bold.class, new StyleSpan(Typeface.BOLD));        } else if (tag.equalsIgnoreCase(\"strong\")) {            end(mSpannableStringBuilder, Italic.class, new StyleSpan(Typeface.ITALIC));        } else if (tag.equalsIgnoreCase(\"cite\")) {            end(mSpannableStringBuilder, Italic.class, new StyleSpan(Typeface.ITALIC));        } else if (tag.equalsIgnoreCase(\"dfn\")) {            end(mSpannableStringBuilder, Italic.class, new StyleSpan(Typeface.ITALIC));        } else if (tag.equalsIgnoreCase(\"i\")) {            end(mSpannableStringBuilder, Italic.class, new StyleSpan(Typeface.ITALIC));        } else if (tag.equalsIgnoreCase(\"big\")) {            end(mSpannableStringBuilder, Big.class, new RelativeSizeSpan(1.25f));        } else if (tag.equalsIgnoreCase(\"small\")) {            end(mSpannableStringBuilder, Small.class, new RelativeSizeSpan(0.8f));        } else if (tag.equalsIgnoreCase(\"font\")) {            endFont(mSpannableStringBuilder);        } else if (tag.equalsIgnoreCase(\"blockquote\")) {            handleP(mSpannableStringBuilder);            end(mSpannableStringBuilder, Blockquote.class, new QuoteSpan());        } else if (tag.equalsIgnoreCase(\"tt\")) {            end(mSpannableStringBuilder, Monospace.class,                    new TypefaceSpan(\"monospace\"));        } else if (tag.equalsIgnoreCase(\"a\")) {            endA(mSpannableStringBuilder);        } else if (tag.equalsIgnoreCase(\"u\")) {            end(mSpannableStringBuilder, Underline.class, new UnderlineSpan());        } else if (tag.equalsIgnoreCase(\"sup\")) {            end(mSpannableStringBuilder, Super.class, new SuperscriptSpan());        } else if (tag.equalsIgnoreCase(\"sub\")) {            end(mSpannableStringBuilder, Sub.class, new SubscriptSpan());        } else if (tag.length() == 2 &&                Character.toLowerCase(tag.charAt(0)) == 'h' &&                tag.charAt(1) >= '1' && tag.charAt(1) <= '6') {            handleP(mSpannableStringBuilder);            endHeader(mSpannableStringBuilder);        } else if (mTagHandler != null) {            mTagHandler.handleTag(false, tag, null, mSpannableStringBuilder, mReader);        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/htmlwidget/Html.java", "stars": "74", "class": {"name": "HtmlToSpannedConverter", "extends": null, "implements": ["ContentHandler"], "modifiers": []}}, {"method_name": "convertValueToInt", "params": ["CharSequence", "int"], "throws": null, "modifiers": ["public", "final", "static"], "return_type": "int", "snippet": "    public static final int    convertValueToInt(CharSequence charSeq, int defaultValue)    {        if (null == charSeq)            return defaultValue;        String nm = charSeq.toString();        // XXX This code is copied from Integer.decode() so we don't        // have to instantiate an Integer!        int value;        int sign = 1;        int index = 0;        int len = nm.length();        int base = 10;        if ('-' == nm.charAt(0)) {            sign = -1;            index++;        }        if ('0' == nm.charAt(index)) {            //  Quick check for a zero by itself            if (index == (len - 1))                return 0;            char    c = nm.charAt(index + 1);            if ('x' == c || 'X' == c) {                index += 2;                base = 16;            } else {                index++;                base = 8;            }        }        else if ('#' == nm.charAt(index))        {            index++;            base = 16;        }        return Integer.parseInt(nm.substring(index), base) * sign;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/htmlwidget/Html.java", "stars": "74", "class": {"name": "HtmlToSpannedConverter", "extends": null, "implements": ["ContentHandler"], "modifiers": []}}, {"method_name": "handleP", "params": ["SpannableStringBuilder"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void handleP(SpannableStringBuilder text) {        int len = text.length();        if (len >= 1 && text.charAt(len - 1) == '\\n') {            if (len >= 2 && text.charAt(len - 2) == '\\n') {                return;            }            text.append(\"\\n\");            return;        }        if (len != 0) {            text.append(\"\\n\\n\");        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/htmlwidget/Html.java", "stars": "74", "class": {"name": "HtmlToSpannedConverter", "extends": null, "implements": ["ContentHandler"], "modifiers": []}}, {"method_name": "handleBr", "params": ["SpannableStringBuilder"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void handleBr(SpannableStringBuilder text) {        text.append(\"\\n\");    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/htmlwidget/Html.java", "stars": "74", "class": {"name": "HtmlToSpannedConverter", "extends": null, "implements": ["ContentHandler"], "modifiers": []}}, {"method_name": "getLast", "params": ["Spanned", "Class"], "throws": null, "modifiers": ["private", "static"], "return_type": "Object", "snippet": "    private static Object getLast(Spanned text, Class kind) {        /*         * This knows that the last returned object from getSpans()         * will be the most recently added.         */        Object[] objs = text.getSpans(0, text.length(), kind);        if (objs.length == 0) {            return null;        } else {            return objs[objs.length - 1];        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/htmlwidget/Html.java", "stars": "74", "class": {"name": "HtmlToSpannedConverter", "extends": null, "implements": ["ContentHandler"], "modifiers": []}}, {"method_name": "start", "params": ["SpannableStringBuilder", "Object"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void start(SpannableStringBuilder text, Object mark) {        int len = text.length();        text.setSpan(mark, len, len, Spannable.SPAN_MARK_MARK);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/htmlwidget/Html.java", "stars": "74", "class": {"name": "HtmlToSpannedConverter", "extends": null, "implements": ["ContentHandler"], "modifiers": []}}, {"method_name": "end", "params": ["SpannableStringBuilder", "Class", "Object"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void end(SpannableStringBuilder text, Class kind,                            Object repl) {        int len = text.length();        Object obj = getLast(text, kind);        int where = text.getSpanStart(obj);        text.removeSpan(obj);        if (where != len) {            text.setSpan(repl, where, len, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);        }        return;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/htmlwidget/Html.java", "stars": "74", "class": {"name": "HtmlToSpannedConverter", "extends": null, "implements": ["ContentHandler"], "modifiers": []}}, {"method_name": "startImg", "params": ["SpannableStringBuilder", "Attributes", "Html"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void startImg(SpannableStringBuilder text,                                 Attributes attributes, Html.ImageGetter img) {        String src = attributes.getValue(\"\", \"src\");        Drawable d = null;        if (img != null) {            d = img.getDrawable(src);        }        if (d == null) {            return;        }        int len = text.length();        text.append(\"\\uFFFC\");        text.setSpan(new ImageSpan(d, src), len, text.length(),                     Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/htmlwidget/Html.java", "stars": "74", "class": {"name": "HtmlToSpannedConverter", "extends": null, "implements": ["ContentHandler"], "modifiers": []}}, {"method_name": "startFont", "params": ["SpannableStringBuilder", "Attributes"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void startFont(SpannableStringBuilder text,                                  Attributes attributes) {        String color = attributes.getValue(\"\", \"color\");        String face = attributes.getValue(\"\", \"face\");        int len = text.length();        text.setSpan(new Font(color, face), len, len, Spannable.SPAN_MARK_MARK);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/htmlwidget/Html.java", "stars": "74", "class": {"name": "HtmlToSpannedConverter", "extends": null, "implements": ["ContentHandler"], "modifiers": []}}, {"method_name": "endFont", "params": ["SpannableStringBuilder"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void endFont(SpannableStringBuilder text) {        int len = text.length();        Object obj = getLast(text, Font.class);        int where = text.getSpanStart(obj);        text.removeSpan(obj);        if (where != len) {            Font f = (Font) obj;            if (f.mColor != null) {                int c = -1;                if (f.mColor.equalsIgnoreCase(\"aqua\")) {                    c = 0x00FFFF;                } else if (f.mColor.equalsIgnoreCase(\"black\")) {                    c = 0x000000;                } else if (f.mColor.equalsIgnoreCase(\"blue\")) {                    c = 0x0000FF;                } else if (f.mColor.equalsIgnoreCase(\"fuchsia\")) {                    c = 0xFF00FF;                } else if (f.mColor.equalsIgnoreCase(\"green\")) {                    c = 0x008000;                } else if (f.mColor.equalsIgnoreCase(\"grey\")) {                    c = 0x808080;                } else if (f.mColor.equalsIgnoreCase(\"lime\")) {                    c = 0x00FF00;                } else if (f.mColor.equalsIgnoreCase(\"maroon\")) {                    c = 0x800000;                } else if (f.mColor.equalsIgnoreCase(\"navy\")) {                    c = 0x000080;                } else if (f.mColor.equalsIgnoreCase(\"olive\")) {                    c = 0x808000;                } else if (f.mColor.equalsIgnoreCase(\"purple\")) {                    c = 0x800080;                } else if (f.mColor.equalsIgnoreCase(\"red\")) {                    c = 0xFF0000;                } else if (f.mColor.equalsIgnoreCase(\"silver\")) {                    c = 0xC0C0C0;                } else if (f.mColor.equalsIgnoreCase(\"teal\")) {                    c = 0x008080;                } else if (f.mColor.equalsIgnoreCase(\"white\")) {                    c = 0xFFFFFF;                } else if (f.mColor.equalsIgnoreCase(\"yellow\")) {                    c = 0xFFFF00;                } else {                    try {                        c = convertValueToInt(f.mColor, -1);                    } catch (NumberFormatException nfe) {                        // Can't understand the color, so just drop it.                    }                }                if (c != -1) {                    text.setSpan(new ForegroundColorSpan(c | 0xFF000000),                                 where, len,                                 Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);                }            }            if (f.mFace != null) {                text.setSpan(new TypefaceSpan(f.mFace), where, len,                             Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);            }        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/htmlwidget/Html.java", "stars": "74", "class": {"name": "HtmlToSpannedConverter", "extends": null, "implements": ["ContentHandler"], "modifiers": []}}, {"method_name": "startA", "params": ["SpannableStringBuilder", "Attributes"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void startA(SpannableStringBuilder text, Attributes attributes) {        String href = attributes.getValue(\"\", \"href\");        int len = text.length();        text.setSpan(new Href(href), len, len, Spannable.SPAN_MARK_MARK);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/htmlwidget/Html.java", "stars": "74", "class": {"name": "HtmlToSpannedConverter", "extends": null, "implements": ["ContentHandler"], "modifiers": []}}, {"method_name": "endA", "params": ["SpannableStringBuilder"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void endA(SpannableStringBuilder text) {        int len = text.length();        Object obj = getLast(text, Href.class);        int where = text.getSpanStart(obj);        text.removeSpan(obj);        if (where != len) {            Href h = (Href) obj;            if (h.mHref != null) {                text.setSpan(new URLSpan(h.mHref), where, len,                             Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);            }        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/htmlwidget/Html.java", "stars": "74", "class": {"name": "HtmlToSpannedConverter", "extends": null, "implements": ["ContentHandler"], "modifiers": []}}, {"method_name": "endHeader", "params": ["SpannableStringBuilder"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void endHeader(SpannableStringBuilder text) {        int len = text.length();        Object obj = getLast(text, Header.class);        int where = text.getSpanStart(obj);        text.removeSpan(obj);        // Back off not to change only the text, not the blank line.        while (len > where && text.charAt(len - 1) == '\\n') {            len--;        }        if (where != len) {            Header h = (Header) obj;            text.setSpan(new RelativeSizeSpan(HEADER_SIZES[h.mLevel]),                         where, len, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);            text.setSpan(new StyleSpan(Typeface.BOLD),                         where, len, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/htmlwidget/Html.java", "stars": "74", "class": {"name": "HtmlToSpannedConverter", "extends": null, "implements": ["ContentHandler"], "modifiers": []}}, {"method_name": "setDocumentLocator", "params": ["Locator"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDocumentLocator(Locator locator) {    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/htmlwidget/Html.java", "stars": "74", "class": {"name": "HtmlToSpannedConverter", "extends": null, "implements": ["ContentHandler"], "modifiers": []}}, {"method_name": "startDocument", "params": [], "throws": ["SAXException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void startDocument() throws SAXException {    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/htmlwidget/Html.java", "stars": "74", "class": {"name": "HtmlToSpannedConverter", "extends": null, "implements": ["ContentHandler"], "modifiers": []}}, {"method_name": "endDocument", "params": [], "throws": ["SAXException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void endDocument() throws SAXException {    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/htmlwidget/Html.java", "stars": "74", "class": {"name": "HtmlToSpannedConverter", "extends": null, "implements": ["ContentHandler"], "modifiers": []}}, {"method_name": "startPrefixMapping", "params": ["String", "String"], "throws": ["SAXException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void startPrefixMapping(String prefix, String uri) throws SAXException {    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/htmlwidget/Html.java", "stars": "74", "class": {"name": "HtmlToSpannedConverter", "extends": null, "implements": ["ContentHandler"], "modifiers": []}}, {"method_name": "endPrefixMapping", "params": ["String"], "throws": ["SAXException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void endPrefixMapping(String prefix) throws SAXException {    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/htmlwidget/Html.java", "stars": "74", "class": {"name": "HtmlToSpannedConverter", "extends": null, "implements": ["ContentHandler"], "modifiers": []}}, {"method_name": "startElement", "params": ["String", "String", "String", "Attributes"], "throws": ["SAXException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void startElement(String uri, String localName, String qName, Attributes attributes)            throws SAXException {        handleStartTag(localName, attributes);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/htmlwidget/Html.java", "stars": "74", "class": {"name": "HtmlToSpannedConverter", "extends": null, "implements": ["ContentHandler"], "modifiers": []}}, {"method_name": "endElement", "params": ["String", "String", "String"], "throws": ["SAXException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void endElement(String uri, String localName, String qName) throws SAXException {        handleEndTag(localName);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/htmlwidget/Html.java", "stars": "74", "class": {"name": "HtmlToSpannedConverter", "extends": null, "implements": ["ContentHandler"], "modifiers": []}}, {"method_name": "characters", "params": ["char", "int", "int"], "throws": ["SAXException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void characters(char ch[], int start, int length) throws SAXException {        StringBuilder sb = new StringBuilder();        /*         * Ignore whitespace that immediately follows other whitespace;         * newlines count as spaces.         */        for (int i = 0; i < length; i++) {            char c = ch[i + start];            if (c == ' ' || c == '\\n') {                char pred;                int len = sb.length();                if (len == 0) {                    len = mSpannableStringBuilder.length();                    if (len == 0) {                        pred = '\\n';                    } else {                        pred = mSpannableStringBuilder.charAt(len - 1);                    }                } else {                    pred = sb.charAt(len - 1);                }                if (pred != ' ' && pred != '\\n') {                    sb.append(' ');                }            } else {                sb.append(c);            }        }        mSpannableStringBuilder.append(sb);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/htmlwidget/Html.java", "stars": "74", "class": {"name": "HtmlToSpannedConverter", "extends": null, "implements": ["ContentHandler"], "modifiers": []}}, {"method_name": "ignorableWhitespace", "params": ["char", "int", "int"], "throws": ["SAXException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void ignorableWhitespace(char ch[], int start, int length) throws SAXException {    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/htmlwidget/Html.java", "stars": "74", "class": {"name": "HtmlToSpannedConverter", "extends": null, "implements": ["ContentHandler"], "modifiers": []}}, {"method_name": "processingInstruction", "params": ["String", "String"], "throws": ["SAXException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void processingInstruction(String target, String data) throws SAXException {    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/htmlwidget/Html.java", "stars": "74", "class": {"name": "HtmlToSpannedConverter", "extends": null, "implements": ["ContentHandler"], "modifiers": []}}, {"method_name": "skippedEntity", "params": ["String"], "throws": ["SAXException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void skippedEntity(String name) throws SAXException {    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/htmlwidget/Html.java", "stars": "74", "class": {"name": "HtmlToSpannedConverter", "extends": null, "implements": ["ContentHandler"], "modifiers": []}}, {"method_name": "print", "params": ["Throwable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void print(Throwable cause) {\t\tif(cause!=null)\t\t\tcause.printStackTrace();\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/model/domain/exception/LibrarySystemException.java", "stars": "2", "class": {"name": "LibrarySystemException", "extends": "RuntimeException", "implements": null, "modifiers": ["public"]}}, {"method_name": "getTiles", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Tile", "snippet": "\tpublic Tile[] getTiles() {\t\treturn tiles;\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/tile/loader/DynamicSandstoneTileLoader.java", "stars": "3", "class": {"name": "DynamicSandstoneTileLoader", "extends": null, "implements": ["TileLoader"], "modifiers": ["public"]}}, {"method_name": "openWirelessSettings", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void openWirelessSettings(Context context) {        if (android.os.Build.VERSION.SDK_INT > 10) {            context.startActivity(new Intent(android.provider.Settings.ACTION_SETTINGS));        } else {            context.startActivity(new Intent(android.provider.Settings.ACTION_WIRELESS_SETTINGS));        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/NetworkUtils.java", "stars": "2", "class": {"name": "NetworkUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getActiveNetworkInfo", "params": ["Context"], "throws": null, "modifiers": ["private", "static"], "return_type": "NetworkInfo", "snippet": "    private static NetworkInfo getActiveNetworkInfo(Context context) {        ConnectivityManager cm = (ConnectivityManager) context                .getSystemService(Context.CONNECTIVITY_SERVICE);        return cm.getActiveNetworkInfo();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/NetworkUtils.java", "stars": "2", "class": {"name": "NetworkUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isAvailable", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isAvailable(Context context) {        NetworkInfo info = getActiveNetworkInfo(context);        return info != null && info.isAvailable();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/NetworkUtils.java", "stars": "2", "class": {"name": "NetworkUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isConnected", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isConnected(Context context) {        NetworkInfo info = getActiveNetworkInfo(context);        return info != null && info.isConnected();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/NetworkUtils.java", "stars": "2", "class": {"name": "NetworkUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "is4G", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean is4G(Context context) {        NetworkInfo info = getActiveNetworkInfo(context);        return info != null && info.isAvailable() && info.getSubtype() == TelephonyManager.NETWORK_TYPE_LTE;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/NetworkUtils.java", "stars": "2", "class": {"name": "NetworkUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isWifiConnected", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isWifiConnected(Context context) {        ConnectivityManager cm = (ConnectivityManager) context                .getSystemService(Context.CONNECTIVITY_SERVICE);        return cm != null && cm.getActiveNetworkInfo().getType() == ConnectivityManager.TYPE_WIFI;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/NetworkUtils.java", "stars": "2", "class": {"name": "NetworkUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNetworkOperatorName", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getNetworkOperatorName(Context context) {        TelephonyManager tm = (TelephonyManager) context                .getSystemService(Context.TELEPHONY_SERVICE);        return tm != null ? tm.getNetworkOperatorName() : null;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/NetworkUtils.java", "stars": "2", "class": {"name": "NetworkUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPhoneType", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getPhoneType(Context context) {        TelephonyManager tm = (TelephonyManager) context                .getSystemService(Context.TELEPHONY_SERVICE);        return tm != null ? tm.getPhoneType() : -1;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/NetworkUtils.java", "stars": "2", "class": {"name": "NetworkUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNetWorkType", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getNetWorkType(Context context) {        int netType = NETWORK_NO;        NetworkInfo info = getActiveNetworkInfo(context);        if (info != null && info.isAvailable()) {            if (info.getType() == ConnectivityManager.TYPE_WIFI) {                netType = NETWORK_WIFI;            } else if (info.getType() == ConnectivityManager.TYPE_MOBILE) {                switch (info.getSubtype()) {                    case NETWORK_TYPE_GSM:                    case TelephonyManager.NETWORK_TYPE_GPRS:                    case TelephonyManager.NETWORK_TYPE_CDMA:                    case TelephonyManager.NETWORK_TYPE_EDGE:                    case TelephonyManager.NETWORK_TYPE_1xRTT:                    case TelephonyManager.NETWORK_TYPE_IDEN:                        netType = NETWORK_2G;                        break;                    case NETWORK_TYPE_TD_SCDMA:                    case TelephonyManager.NETWORK_TYPE_EVDO_A:                    case TelephonyManager.NETWORK_TYPE_UMTS:                    case TelephonyManager.NETWORK_TYPE_EVDO_0:                    case TelephonyManager.NETWORK_TYPE_HSDPA:                    case TelephonyManager.NETWORK_TYPE_HSUPA:                    case TelephonyManager.NETWORK_TYPE_HSPA:                    case TelephonyManager.NETWORK_TYPE_EVDO_B:                    case TelephonyManager.NETWORK_TYPE_EHRPD:                    case TelephonyManager.NETWORK_TYPE_HSPAP:                        netType = NETWORK_3G;                        break;                    case NETWORK_TYPE_IWLAN:                    case TelephonyManager.NETWORK_TYPE_LTE:                        netType = NETWORK_4G;                        break;                    default:                        String subtypeName = info.getSubtypeName();                        if (subtypeName.equalsIgnoreCase(\"TD-SCDMA\")                                || subtypeName.equalsIgnoreCase(\"WCDMA\")                                || subtypeName.equalsIgnoreCase(\"CDMA2000\")) {                            netType = NETWORK_3G;                        } else {                            netType = NETWORK_UNKNOWN;                        }                        break;                }            } else {                netType = NETWORK_UNKNOWN;            }        }        return netType;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/NetworkUtils.java", "stars": "2", "class": {"name": "NetworkUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNetWorkTypeName", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getNetWorkTypeName(Context context) {        switch (getNetWorkType(context)) {            case NETWORK_WIFI:                return \"NETWORK_WIFI\";            case NETWORK_4G:                return \"NETWORK_4G\";            case NETWORK_3G:                return \"NETWORK_3G\";            case NETWORK_2G:                return \"NETWORK_2G\";            case NETWORK_NO:                return \"NETWORK_NO\";            default:                return \"NETWORK_UNKNOWN\";        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/utils/NetworkUtils.java", "stars": "2", "class": {"name": "NetworkUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args){        JumppingOperate jo = new JumppingOperate();        Jumpping j = new Cat();        Cat c = new Cat();        jo.useJumpping(j);    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/cc1021/Interface/JumppingDemo.java", "stars": "2", "class": {"name": "JumppingDemo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args)\t{\t\tint x = 0;\t\tScanner input=new Scanner(System.in);\t\tString str=input.next();\t\tdo\t\t{\t\t\tSystem.out.println(\"NB!\");\t\t\tx +=1;\t\t\tif(x >= 10) break;\t\t}while(str.equals(\"n\"));\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/ray/Dowhiledemo.java", "stars": "2", "class": {"name": "Dowhiledemo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onUseItem", "params": ["World", "EntityPlayer", "ItemStack", "ItemStack", "ItemStack"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onUseItem(World world, EntityPlayer player, ItemStack upgrade, ItemStack matrix, ItemStack tool) {    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Item/ItemUpgrades/ItemUpgradeBlank.java", "stars": "2", "class": {"name": "ItemUpgradeBlank", "extends": "PhaseItemBase", "implements": ["IUpgrade"], "modifiers": ["public"]}}, {"method_name": "getEnergyCost", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getEnergyCost() {        return 0;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Item/ItemUpgrades/ItemUpgradeBlank.java", "stars": "2", "class": {"name": "ItemUpgradeBlank", "extends": "PhaseItemBase", "implements": ["IUpgrade"], "modifiers": ["public"]}}, {"method_name": "configure", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void configure() {        bind(UserParamsService.class);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-webank-user-params/src/main/java/com/webank/wedatasphere/schedulis/userparams/module/UserParamsModule.java", "stars": "18", "class": {"name": "UserParamsModule", "extends": "AbstractModule", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["InterruptedException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) throws InterruptedException {\t\tSystem.setProperty(ChromeDriverService.CHROME_DRIVER_SILENT_OUTPUT_PROPERTY, \"true\");\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"drivers/chromedriver.exe\");\t\tWebDriver driver = new ChromeDriver();\t\tString url = \"http://jiravm.centralus.cloudapp.azure.com:8081/index.html\";\t\tdriver.get(url);\t\tdriver.findElement(By.linkText(\"Alerts & Modals\")).click();\t\tdriver.findElement(By.linkText(\"Window Popup Modal\")).click();\t\tdriver.findElement(By.linkText(\"Follow Instagram & Facebook\")).click();\t\tThread.sleep(3000);\t\tSet<String> handles = driver.getWindowHandles();\t\tIterator<String> handleIt = handles.iterator();\t\tString mainWindow = handleIt.next();\t\tString popup1 = handleIt.next();\t\tString popup2 = handleIt.next();\t\tString mainTitle = driver.getTitle();\t\tdriver.switchTo().window(popup1);\t\tString popup1Tittle = driver.getTitle();\t\tdriver.switchTo().window(popup2);\t\tString popup2Tittle = driver.getTitle();\t\tSystem.out.println(mainTitle);\t\tSystem.out.println(popup1Tittle);\t\tSystem.out.println(popup2Tittle);\t\tThread.sleep(3000);\t\tdriver.quit();\t}", "url": "https://raw.githubusercontent.com/fadimedibi/SeleniumTurkish/master/src/com/class5/MultipleWindowHandling.java", "stars": "3", "class": {"name": "MultipleWindowHandling", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": ["IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException {            \tres.setContentType(\"text/html\");                String message = \"Projeto ServletPG - Vers\u00e3o 2\";                PrintWriter writer = res.getWriter();                writer.println(                \"<html>\" +                    \"<body>\" +                        \"<h1>\" + message + \"</h1>\" +                    \"</body>\" +                \"</html>\"        );    }", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/mini-mvc/src/main/java/br/me/mvc/controle/OlaServlet.java", "stars": "2", "class": {"name": "OlaServlet", "extends": "HttpServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "executeProcedure", "params": ["java"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void executeProcedure(java.util.HashMap<String, Object> dependencies) {\t\tif (dependencies.get(\"entity\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency entity for procedure RightClickedOrangeAmaranth!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"x\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency x for procedure RightClickedOrangeAmaranth!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"y\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency y for procedure RightClickedOrangeAmaranth!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"z\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency z for procedure RightClickedOrangeAmaranth!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"world\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency world for procedure RightClickedOrangeAmaranth!\");\t\t\treturn;\t\t}\t\tEntity entity = (Entity) dependencies.get(\"entity\");\t\tint x = (int) dependencies.get(\"x\");\t\tint y = (int) dependencies.get(\"y\");\t\tint z = (int) dependencies.get(\"z\");\t\tWorld world = (World) dependencies.get(\"world\");\t\tif ((((entity instanceof LivingEntity) ? ((LivingEntity) entity).getHeldItemMainhand() : ItemStack.EMPTY)\t\t\t\t.getItem() == new ItemStack(Blocks.AIR, (int) (1)).getItem())) {\t\t\tworld.setBlockState(new BlockPos((int) x, (int) y, (int) z), Blocks.AIR.getDefaultState(), 3);\t\t\tworld.setBlockState(new BlockPos((int) x, (int) y, (int) z), Blocks.FLOWER_POT.getDefaultState(), 3);\t\t\tif (entity instanceof LivingEntity) {\t\t\t\tItemStack _setstack = new ItemStack(OrangeAmaranthBlock.block, (int) (1));\t\t\t\t_setstack.setCount((int) 1);\t\t\t\t((LivingEntity) entity).setHeldItem(Hand.MAIN_HAND, _setstack);\t\t\t\tif (entity instanceof ServerPlayerEntity)\t\t\t\t\t((ServerPlayerEntity) entity).inventory.markDirty();\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/procedures/RightClickedOrangeAmaranthProcedure.java", "stars": "2", "class": {"name": "RightClickedOrangeAmaranthProcedure", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "atmosphereInitializer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "EmbeddedAtmosphereInitializer", "snippet": "\tpublic EmbeddedAtmosphereInitializer atmosphereInitializer() {\t\treturn new EmbeddedAtmosphereInitializer();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-atmosphere/src/main/java/smoketest/atmosphere/SampleAtmosphereApplication.java", "stars": "47572", "class": {"name": "SampleAtmosphereApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "atmosphereServlet", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ServletRegistrationBean<AtmosphereServlet>", "snippet": "\tpublic ServletRegistrationBean<AtmosphereServlet> atmosphereServlet() {\t\t// Dispatcher servlet is mapped to '/home' to allow the AtmosphereServlet\t\t// to be mapped to '/chat'\t\tAtmosphereServlet atmosphereServlet = new AtmosphereServlet();\t\tatmosphereServlet.framework().setHandlersPath(\"/\");\t\tServletRegistrationBean<AtmosphereServlet> registration = new ServletRegistrationBean<>(atmosphereServlet,\t\t\t\t\"/chat/*\");\t\tregistration.addInitParameter(\"org.atmosphere.cpr.packages\", \"smoketest\");\t\tregistration.addInitParameter(\t\t\t\t\"org.atmosphere.interceptor.HeartbeatInterceptor.clientHeartbeatFrequencyInSeconds\", \"10\");\t\tregistration.setLoadOnStartup(0);\t\t// Need to occur before the EmbeddedAtmosphereInitializer\t\tregistration.setOrder(Ordered.HIGHEST_PRECEDENCE);\t\treturn registration;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-atmosphere/src/main/java/smoketest/atmosphere/SampleAtmosphereApplication.java", "stars": "47572", "class": {"name": "SampleAtmosphereApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) throws Exception {\t\tSpringApplication.run(SampleAtmosphereApplication.class, args);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-atmosphere/src/main/java/smoketest/atmosphere/SampleAtmosphereApplication.java", "stars": "47572", "class": {"name": "SampleAtmosphereApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addViewControllers", "params": ["ViewControllerRegistry"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void addViewControllers(ViewControllerRegistry registry) {\t\t\tregistry.addViewController(\"/\").setViewName(\"forward:/home/home.html\");\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-atmosphere/src/main/java/smoketest/atmosphere/SampleAtmosphereApplication.java", "stars": "47572", "class": {"name": "MvcConfiguration", "extends": null, "implements": ["WebMvcConfigurer"], "modifiers": ["static"]}}, {"method_name": "onStartup", "params": ["ServletContext"], "throws": ["ServletException"], "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onStartup(ServletContext servletContext) throws ServletException {\t\t\tonStartup(Collections.emptySet(), servletContext);\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-atmosphere/src/main/java/smoketest/atmosphere/SampleAtmosphereApplication.java", "stars": "47572", "class": {"name": "EmbeddedAtmosphereInitializer", "extends": "ContainerInitializer", "implements": ["ServletContextInitializer"], "modifiers": ["private", "static"]}}, {"method_name": "start", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void start() {\t\tsetVisible(true);\t}", "url": "https://raw.githubusercontent.com/TheKodeToad/DiffUI/master/src/main/java/me/thekodetoad/diffui/DiffUI.java", "stars": "1", "class": {"name": "DiffUI", "extends": "JFrame", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tSpringApplication.run(MySiteApplication.class, args);\t}", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/MySiteApplication.java", "stars": "2", "class": {"name": "MySiteApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "connector", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Connector", "snippet": "\tpublic Connector connector(){\t\tConnector connector=new Connector(\"org.apache.coyote.http11.Http11NioProtocol\");\t\tconnector.setScheme(\"http\");\t\tconnector.setPort(80);\t\tconnector.setSecure(false);\t\tconnector.setRedirectPort(443);\t\treturn connector;\t}", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/MySiteApplication.java", "stars": "2", "class": {"name": "MySiteApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "tomcatServletWebServerFactory", "params": ["Connector"], "throws": null, "modifiers": ["public"], "return_type": "TomcatServletWebServerFactory", "snippet": "\tpublic TomcatServletWebServerFactory tomcatServletWebServerFactory(Connector connector){\t\tTomcatServletWebServerFactory tomcat=new TomcatServletWebServerFactory(){\t\t\t@Override\t\t\tprotected void postProcessContext(Context context) {\t\t\t\tSecurityConstraint securityConstraint=new SecurityConstraint();\t\t\t\tsecurityConstraint.setUserConstraint(\"CONFIDENTIAL\");\t\t\t\tSecurityCollection collection=new SecurityCollection();\t\t\t\tcollection.addPattern(\"/*\");\t\t\t\tsecurityConstraint.addCollection(collection);\t\t\t\tcontext.addConstraint(securityConstraint);\t\t\t}\t\t};\t\ttomcat.addAdditionalTomcatConnectors(connector);\t\treturn tomcat;\t}", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/MySiteApplication.java", "stars": "2", "class": {"name": "MySiteApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "multipartConfigElement", "params": [], "throws": null, "modifiers": [], "return_type": "MultipartConfigElement", "snippet": "\tMultipartConfigElement multipartConfigElement() {\t\tMultipartConfigFactory factory = new MultipartConfigFactory();\t\t//2.\u8be5\u5904\u5c31\u662f\u6307\u5b9a\u7684\u8def\u5f84(\u9700\u8981\u63d0\u524d\u521b\u5efa\u597d\u76ee\u5f55\uff0c\u5426\u5219\u4e0a\u4f20\u65f6\u4f1a\u629b\u51fa\u5f02\u5e38)\t\tfactory.setLocation(\"/data/uploadtmp\");\t\treturn factory.createMultipartConfig();\t}", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/MySiteApplication.java", "stars": "2", "class": {"name": "MySiteApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ViewRenderer.java", "stars": "2", "class": {"name": "ViewRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public", "abstract"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ViewRenderer.java", "stars": "2", "class": {"name": "ViewRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public", "abstract"]}}, {"method_name": "home", "params": ["DeployedApplication"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid home(DeployedApplication app) {\t\tapp.test((rest) -> {\t\t\tResponseEntity<String> response = rest.getForEntity(\"/\", String.class);\t\t\tassertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);\t\t\tassertThat(response.getBody()).isEqualTo(\"Hello World\");\t\t});\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-deployment-tests/src/intTest/java/sample/DeploymentIntegrationTests.java", "stars": "47572", "class": {"name": "DeploymentIntegrationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "health", "params": ["DeployedApplication"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid health(DeployedApplication application) {\t\tapplication.test((rest) -> {\t\t\tResponseEntity<String> response = rest.getForEntity(\"/actuator/health\", String.class);\t\t\tassertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);\t\t\tassertThat(response.getBody()).isEqualTo(\"{\\\"status\\\":\\\"UP\\\"}\");\t\t});\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-deployment-tests/src/intTest/java/sample/DeploymentIntegrationTests.java", "stars": "47572", "class": {"name": "DeploymentIntegrationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "conditionalOnWarShouldBeTrue", "params": ["DeployedApplication"], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "\tvoid conditionalOnWarShouldBeTrue(DeployedApplication application) throws Exception {\t\tapplication.test((rest) -> {\t\t\tResponseEntity<String> response = rest.getForEntity(\"/actuator/war\", String.class);\t\t\tassertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);\t\t\tassertThat(response.getBody()).isEqualTo(\"{\\\"hello\\\":\\\"world\\\"}\");\t\t});\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-deployment-tests/src/intTest/java/sample/DeploymentIntegrationTests.java", "stars": "47572", "class": {"name": "DeploymentIntegrationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "deployedApplications", "params": [], "throws": null, "modifiers": ["static"], "return_type": "List<DeployedApplication>", "snippet": "\tstatic List<DeployedApplication> deployedApplications() {\t\treturn Arrays.asList(new DeployedApplication(\"open-liberty:19.0.0.9-webProfile8\", \"/config/dropins\", 9080),\t\t\t\tnew DeployedApplication(\"tomcat:9.0.29-jdk8-openjdk\", \"/usr/local/tomcat/webapps\", 8080),\t\t\t\tnew DeployedApplication(\"tomee:11-jre-8.0.0-M3-webprofile\", \"/usr/local/tomee/webapps\", 8080),\t\t\t\tnew DeployedApplication(\"jboss/wildfly:18.0.1.Final\", \"/opt/jboss/wildfly/standalone/deployments\",\t\t\t\t\t\t8080));\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-deployment-tests/src/intTest/java/sample/DeploymentIntegrationTests.java", "stars": "47572", "class": {"name": "DeploymentIntegrationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "test", "params": ["Consumer<TestRestTemplate>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\t\tprivate void test(Consumer<TestRestTemplate> consumer) {\t\t\ttry (WarDeploymentContainer container = new WarDeploymentContainer(this.baseImage, this.deploymentLocation,\t\t\t\t\tthis.port)) {\t\t\t\tcontainer.start();\t\t\t\tTestRestTemplate rest = new TestRestTemplate(new RestTemplateBuilder()\t\t\t\t\t\t.rootUri(\"http://\" + container.getContainerIpAddress() + \":\"\t\t\t\t\t\t\t\t+ container.getMappedPort(this.port) + \"/spring-boot\")\t\t\t\t\t\t.requestFactory(() -> new HttpComponentsClientHttpRequestFactory(HttpClients.custom()\t\t\t\t\t\t\t\t.setRetryHandler(new StandardHttpRequestRetryHandler(10, false)).build())));\t\t\t\ttry {\t\t\t\t\tAwaitility.await().atMost(Duration.ofMinutes(10)).until(() -> {\t\t\t\t\t\ttry {\t\t\t\t\t\t\tconsumer.accept(rest);\t\t\t\t\t\t\treturn true;\t\t\t\t\t\t}\t\t\t\t\t\tcatch (Throwable ex) {\t\t\t\t\t\t\treturn false;\t\t\t\t\t\t}\t\t\t\t\t});\t\t\t\t}\t\t\t\tcatch (ConditionTimeoutException ex) {\t\t\t\t\tSystem.out.println(container.getLogs());\t\t\t\t\tthrow ex;\t\t\t\t}\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-deployment-tests/src/intTest/java/sample/DeploymentIntegrationTests.java", "stars": "47572", "class": {"name": "DeployedApplication", "extends": null, "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\t\tpublic String toString() {\t\t\treturn this.baseImage;\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-deployment-tests/src/intTest/java/sample/DeploymentIntegrationTests.java", "stars": "47572", "class": {"name": "DeployedApplication", "extends": null, "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "findWarToDeploy", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "File", "snippet": "\t\tprivate static File findWarToDeploy() {\t\t\tFile[] candidates = new File(\"build/libs\").listFiles();\t\t\tassertThat(candidates).hasSize(1);\t\t\treturn candidates[0];\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-deployment-tests/src/intTest/java/sample/DeploymentIntegrationTests.java", "stars": "47572", "class": {"name": "WarDeploymentContainer", "extends": "GenericContainer", "implements": null, "modifiers": ["private", "static", "final"]}}, {"method_name": "setSize", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSize(int width, int height) {        mWidth = width;        mHeight = height;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatToast.java", "stars": "2", "class": {"name": "FloatToast", "extends": "FloatView", "implements": null, "modifiers": []}}, {"method_name": "setView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setView(View view) {        toast.setView(view);        initTN();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatToast.java", "stars": "2", "class": {"name": "FloatToast", "extends": "FloatView", "implements": null, "modifiers": []}}, {"method_name": "setGravity", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGravity(int gravity, int xOffset, int yOffset) {        toast.setGravity(gravity, xOffset, yOffset);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatToast.java", "stars": "2", "class": {"name": "FloatToast", "extends": "FloatView", "implements": null, "modifiers": []}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init() {        try {            show.invoke(mTN);        } catch (Exception e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatToast.java", "stars": "2", "class": {"name": "FloatToast", "extends": "FloatView", "implements": null, "modifiers": []}}, {"method_name": "dismiss", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void dismiss() {        try {            hide.invoke(mTN);        } catch (Exception e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatToast.java", "stars": "2", "class": {"name": "FloatToast", "extends": "FloatView", "implements": null, "modifiers": []}}, {"method_name": "initTN", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initTN() {        try {            //todo android P test            Field tnField = toast.getClass().getDeclaredField(\"mTN\");            tnField.setAccessible(true);            mTN = tnField.get(toast);            show = mTN.getClass().getMethod(\"show\");            hide = mTN.getClass().getMethod(\"hide\");            Field tnParamsField = mTN.getClass().getDeclaredField(\"mParams\");            tnParamsField.setAccessible(true);            WindowManager.LayoutParams params = (WindowManager.LayoutParams) tnParamsField.get(mTN);            params.flags = WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL                    | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;            params.width = mWidth;            params.height = mHeight;            params.windowAnimations = 0;            Field tnNextViewField = mTN.getClass().getDeclaredField(\"mNextView\");            tnNextViewField.setAccessible(true);            tnNextViewField.set(mTN, toast.getView());        } catch (Exception e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatToast.java", "stars": "2", "class": {"name": "FloatToast", "extends": "FloatView", "implements": null, "modifiers": []}}, {"method_name": "onDisable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDisable() {        if (centered && center)            centered = false;        counter = 0;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/combat/Surround.java", "stars": "12", "class": {"name": "Surround", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "onUpdate", "params": ["UpdateEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onUpdate(UpdateEvent event) {        if (event.getTiming().equals(EventTiming.PRE)) {            if (InventoryUtil.getItemCount(mc.player.inventoryContainer, Item.getItemFromBlock(Blocks.OBSIDIAN)) == 0 || !mc.player.onGround)                return;            final Vec3d vec = MathUtil.interpolateEntity(mc.player, mc.getRenderPartialTicks());            final BlockPos playerPos = new BlockPos(vec.x, vec.y, vec.z);            if (center) {                if (!centered) {                    mc.player.setPosition(playerPos.getX() + 0.5, playerPos.getY(), playerPos.getZ() + 0.5);                    centered = true;                }                if (MotionUtil.isMoving(mc.player))                    centered = false;            }            if (center && mc.player.posX != playerPos.getX() + 0.5 && mc.player.posZ != playerPos.getZ() + 0.5)                return;            int lastSlot;            int slot;            if (InventoryUtil.getItemSlot(mc.player.inventoryContainer, Item.getItemFromBlock(Blocks.OBSIDIAN)) < 36 && replenish) {                InventoryUtil.swap(InventoryUtil.getItemSlot(mc.player.inventoryContainer, Item.getItemFromBlock(Blocks.OBSIDIAN)), 44);            }            slot = InventoryUtil.getItemSlotInHotbar(Item.getItemFromBlock(Blocks.OBSIDIAN));            lastSlot = mc.player.inventory.currentItem;            mc.player.inventory.currentItem = slot;            mc.playerController.updateController();            final BlockPos[] positions = {playerPos.north(), playerPos.south(), playerPos.east(), playerPos.west()};            if (this.canPlace(positions[0])) {                this.place(playerPos, EnumFacing.NORTH, event);            }            if (this.canPlace(positions[1])) {                this.place(playerPos, EnumFacing.SOUTH, event);            }            if (this.canPlace(positions[2])) {                this.place(playerPos, EnumFacing.EAST, event);            }            if (this.canPlace(positions[3])) {                this.place(playerPos, EnumFacing.WEST, event);            }            if (this.canPlace(positions[0])) {                this.place(positions[0], EnumFacing.UP, event);            }            if (this.canPlace(positions[1])) {                this.place(positions[1], EnumFacing.UP, event);            }            if (this.canPlace(positions[2])) {                this.place(positions[2], EnumFacing.UP, event);            }            if (this.canPlace(positions[3])) {                this.place(positions[3], EnumFacing.UP, event);            }           // if (!mc.player.inventory.getStackInSlot(lastSlot).getItem().equals(Item.getItemFromBlock(Blocks.OBSIDIAN)))            mc.player.inventory.currentItem = lastSlot;            mc.playerController.updateController();            if (toggle)                this.toggle();        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/combat/Surround.java", "stars": "12", "class": {"name": "Surround", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "canPlace", "params": ["BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean canPlace(BlockPos pos) {        final Block block = mc.world.getBlockState(pos).getBlock();        return (block instanceof BlockAir || block instanceof BlockLiquid) && mc.world.getEntitiesWithinAABBExcludingEntity(null, new AxisAlignedBB(pos)).isEmpty();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/combat/Surround.java", "stars": "12", "class": {"name": "Surround", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "place", "params": ["BlockPos", "EnumFacing", "UpdateEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void place(BlockPos pos, EnumFacing direction, UpdateEvent event) {        float[] rotations = AngleUtil.getRotationFromPosition(pos.getX() + 0.5, pos.getZ() + 0.5, pos.add(0, 0, 0).getY() - mc.player.getEyeHeight());        if (rotate) {            event.getRotation().setYaw(rotations[0]);            event.getRotation().setPitch(rotations[1]);        }        if (mc.playerController.processRightClickBlock(mc.player, mc.world, pos.add(0, -1, 0), direction, new Vec3d(Math.random(), Math.random(), Math.random()), EnumHand.MAIN_HAND) != EnumActionResult.FAIL) {            if (swing) mc.player.swingArm(EnumHand.MAIN_HAND);            else  mc.player.connection.sendPacket(new CPacketAnimation(EnumHand.MAIN_HAND));        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/combat/Surround.java", "stars": "12", "class": {"name": "Surround", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "apply", "params": ["Player", "VipType"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void apply(Player player, VipType type) {    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/entity/section/PrettyName.java", "stars": "2", "class": {"name": "PrettyName", "extends": "VipSection", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws IOException {        //1.\u521b\u5efa\u4e00\u4e2a\u672c\u5730\u5b57\u8282\u8f93\u5165\u6d41FileInputStream\u5bf9\u8c61,\u6784\u9020\u65b9\u6cd5\u4e2d\u7ed1\u5b9a\u8981\u8bfb\u53d6\u7684\u6570\u636e\u6e90        FileInputStream fis = new FileInputStream(\"c:\\\\1.jpg\");        //2.\u521b\u5efa\u4e00\u4e2a\u5ba2\u6237\u7aefSocket\u5bf9\u8c61,\u6784\u9020\u65b9\u6cd5\u4e2d\u7ed1\u5b9a\u670d\u52a1\u5668\u7684IP\u5730\u5740\u548c\u7aef\u53e3\u53f7        Socket socket = new Socket(\"127.0.0.1\",8888);        //3.\u4f7f\u7528Socket\u4e2d\u7684\u65b9\u6cd5getOutputStream,\u83b7\u53d6\u7f51\u7edc\u5b57\u8282\u8f93\u51fa\u6d41OutputStream\u5bf9\u8c61        OutputStream os = socket.getOutputStream();        //4.\u4f7f\u7528\u672c\u5730\u5b57\u8282\u8f93\u5165\u6d41FileInputStream\u5bf9\u8c61\u4e2d\u7684\u65b9\u6cd5read,\u8bfb\u53d6\u672c\u5730\u6587\u4ef6        int len = 0;        byte[] bytes = new byte[1024];        while((len = fis.read(bytes))!=-1){            //5.\u4f7f\u7528\u7f51\u7edc\u5b57\u8282\u8f93\u51fa\u6d41OutputStream\u5bf9\u8c61\u4e2d\u7684\u65b9\u6cd5write,\u628a\u8bfb\u53d6\u5230\u7684\u6587\u4ef6\u4e0a\u4f20\u5230\u670d\u52a1\u5668            os.write(bytes,0,len);        }        /*            \u89e3\u51b3:\u4e0a\u4f20\u5b8c\u6587\u4ef6,\u7ed9\u670d\u52a1\u5668\u5199\u4e00\u4e2a\u7ed3\u675f\u6807\u8bb0            void shutdownOutput() \u7981\u7528\u6b64\u5957\u63a5\u5b57\u7684\u8f93\u51fa\u6d41\u3002            \u5bf9\u4e8e TCP \u5957\u63a5\u5b57\uff0c\u4efb\u4f55\u4ee5\u524d\u5199\u5165\u7684\u6570\u636e\u90fd\u5c06\u88ab\u53d1\u9001\uff0c\u5e76\u4e14\u540e\u8ddf TCP \u7684\u6b63\u5e38\u8fde\u63a5\u7ec8\u6b62\u5e8f\u5217\u3002         */        socket.shutdownOutput();        //6.\u4f7f\u7528Socket\u4e2d\u7684\u65b9\u6cd5getInputStream,\u83b7\u53d6\u7f51\u7edc\u5b57\u8282\u8f93\u5165\u6d41InputStream\u5bf9\u8c61        InputStream is = socket.getInputStream();        //7.\u4f7f\u7528\u7f51\u7edc\u5b57\u8282\u8f93\u5165\u6d41InputStream\u5bf9\u8c61\u4e2d\u7684\u65b9\u6cd5read\u8bfb\u53d6\u670d\u52a1\u56de\u5199\u7684\u6570\u636e        while((len = is.read(bytes))!=-1){            System.out.println(new String(bytes,0,len));        }        //8.\u91ca\u653e\u8d44\u6e90(FileInputStream,Socket)        fis.close();        socket.close();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/22.%E3%80%90%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E3%80%91-%E7%AC%94%E8%AE%B0/code/11_Net/src/com/itheima/demo03/FileUpload/TCPClient.java", "stars": "2", "class": {"name": "TCPClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldSetParameter", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldSetParameter() throws Exception {    TYPE_HANDLER.setParameter(ps, 1, new BigInteger(\"707070656505050302797979792923232303\"), null);    verify(ps).setBigDecimal(1, new BigDecimal(\"707070656505050302797979792923232303\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/BigIntegerTypeHandlerTest.java", "stars": "15", "class": {"name": "BigIntegerTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByName() throws Exception {    when(rs.getBigDecimal(\"column\")).thenReturn(new BigDecimal(\"707070656505050302797979792923232303\"));    assertEquals(new BigInteger(\"707070656505050302797979792923232303\"), TYPE_HANDLER.getResult(rs, \"column\"));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/BigIntegerTypeHandlerTest.java", "stars": "15", "class": {"name": "BigIntegerTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByName() throws Exception {    when(rs.getBigDecimal(\"column\")).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(rs, \"column\"));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/BigIntegerTypeHandlerTest.java", "stars": "15", "class": {"name": "BigIntegerTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByPosition() throws Exception {    when(rs.getBigDecimal(1)).thenReturn(new BigDecimal(\"707070656505050302797979792923232303\"));    assertEquals(new BigInteger(\"707070656505050302797979792923232303\"), TYPE_HANDLER.getResult(rs,1 ));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/BigIntegerTypeHandlerTest.java", "stars": "15", "class": {"name": "BigIntegerTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByPosition() throws Exception {    when(rs.getBigDecimal(1)).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(rs,1 ));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/BigIntegerTypeHandlerTest.java", "stars": "15", "class": {"name": "BigIntegerTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromCallableStatement() throws Exception {    when(cs.getBigDecimal(1)).thenReturn(new BigDecimal(\"707070656505050302797979792923232303\"));    assertEquals(new BigInteger(\"707070656505050302797979792923232303\"), TYPE_HANDLER.getResult(cs, 1));    verify(cs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/BigIntegerTypeHandlerTest.java", "stars": "15", "class": {"name": "BigIntegerTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromCallableStatement() throws Exception {    when(cs.getBigDecimal(1)).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(cs, 1));    verify(cs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/BigIntegerTypeHandlerTest.java", "stars": "15", "class": {"name": "BigIntegerTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldSetParameter", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldSetParameter() throws Exception {    TYPE_HANDLER.setParameter(ps, 1, new byte[] { 1, 2, 3 }, null);    verify(ps).setBytes(1, new byte[] { 1, 2, 3 });  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ByteArrayTypeHandlerTest.java", "stars": "15", "class": {"name": "ByteArrayTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByName() throws Exception {    when(rs.getBytes(\"column\")).thenReturn(new byte[] { 1, 2, 3 });    assertArrayEquals(new byte[] { 1, 2, 3 }, TYPE_HANDLER.getResult(rs, \"column\"));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ByteArrayTypeHandlerTest.java", "stars": "15", "class": {"name": "ByteArrayTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByName() throws Exception {    // Unnecessary  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ByteArrayTypeHandlerTest.java", "stars": "15", "class": {"name": "ByteArrayTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByPosition() throws Exception {    when(rs.getBytes(1)).thenReturn(new byte[] { 1, 2, 3 });    assertArrayEquals(new byte[] { 1, 2, 3 }, TYPE_HANDLER.getResult(rs, 1));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ByteArrayTypeHandlerTest.java", "stars": "15", "class": {"name": "ByteArrayTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByPosition() throws Exception {    // Unnecessary  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ByteArrayTypeHandlerTest.java", "stars": "15", "class": {"name": "ByteArrayTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromCallableStatement() throws Exception {    when(cs.getBytes(1)).thenReturn(new byte[] { 1, 2, 3 });    assertArrayEquals(new byte[] { 1, 2, 3 }, TYPE_HANDLER.getResult(cs, 1));    verify(cs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ByteArrayTypeHandlerTest.java", "stars": "15", "class": {"name": "ByteArrayTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromCallableStatement() throws Exception {    // Unnecessary  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ByteArrayTypeHandlerTest.java", "stars": "15", "class": {"name": "ByteArrayTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "skTestFolder", "params": ["Class"], "throws": null, "modifiers": ["public"], "return_type": "File", "snippet": "    public File skTestFolder(Class clazz) {        return new File(MAVEN_TEST_ROOT_FOLDER, clazz.getName().replaceAll(clazz.getSimpleName(), \"testfiles\").replaceAll(Regex0.DOT, String0.SLASH));    }", "url": "https://raw.githubusercontent.com/ShaneKing/org.shaneking.test/master/src/main/java/org/shaneking/test/SKUnit.java", "stars": "2", "class": {"name": "SKUnit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "skTestFiles", "params": ["Class", "String", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "File", "snippet": "    public File skTestFiles(Class clazz, String seq, String io, String fileType) {        return new File(skTestFolder(clazz), clazz.getSimpleName() + String0.UNDERLINE + testName.getMethodName() + String0.UNDERLINE + seq + String0.UNDERLINE + io + String0.DOT + fileType);    }", "url": "https://raw.githubusercontent.com/ShaneKing/org.shaneking.test/master/src/main/java/org/shaneking/test/SKUnit.java", "stars": "2", "class": {"name": "SKUnit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "skTestIFiles", "params": ["Class", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "File", "snippet": "    public File skTestIFiles(Class clazz, String seq, String fileType) {        return skTestFiles(clazz, seq, \"i\", fileType);    }", "url": "https://raw.githubusercontent.com/ShaneKing/org.shaneking.test/master/src/main/java/org/shaneking/test/SKUnit.java", "stars": "2", "class": {"name": "SKUnit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "skTestOFiles", "params": ["Class", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "File", "snippet": "    public File skTestOFiles(Class clazz, String seq, String fileType) {        return skTestFiles(clazz, seq, \"o\", fileType);    }", "url": "https://raw.githubusercontent.com/ShaneKing/org.shaneking.test/master/src/main/java/org/shaneking/test/SKUnit.java", "stars": "2", "class": {"name": "SKUnit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "skTestIFiles", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "File", "snippet": "    public File skTestIFiles(String seq, String fileType) {        return skTestIFiles(this.getClass(), seq, fileType);    }", "url": "https://raw.githubusercontent.com/ShaneKing/org.shaneking.test/master/src/main/java/org/shaneking/test/SKUnit.java", "stars": "2", "class": {"name": "SKUnit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "skTestOFiles", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "File", "snippet": "    public File skTestOFiles(String seq, String fileType) {        return skTestOFiles(this.getClass(), seq, fileType);    }", "url": "https://raw.githubusercontent.com/ShaneKing/org.shaneking.test/master/src/main/java/org/shaneking/test/SKUnit.java", "stars": "2", "class": {"name": "SKUnit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "skTestIFiles", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "File", "snippet": "    public File skTestIFiles(String fileType) {        return skTestIFiles(null, fileType);    }", "url": "https://raw.githubusercontent.com/ShaneKing/org.shaneking.test/master/src/main/java/org/shaneking/test/SKUnit.java", "stars": "2", "class": {"name": "SKUnit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "skTestOFiles", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "File", "snippet": "    public File skTestOFiles(String fileType) {        return skTestOFiles(null, fileType);    }", "url": "https://raw.githubusercontent.com/ShaneKing/org.shaneking.test/master/src/main/java/org/shaneking/test/SKUnit.java", "stars": "2", "class": {"name": "SKUnit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUp() {        stopwatch = Stopwatch.createStarted();    }", "url": "https://raw.githubusercontent.com/ShaneKing/org.shaneking.test/master/src/main/java/org/shaneking/test/SKUnit.java", "stars": "2", "class": {"name": "SKUnit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "tearDown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void tearDown() {        System.out.println(testName.getMethodName() + String0.EQUAL + stopwatch.stop());    }", "url": "https://raw.githubusercontent.com/ShaneKing/org.shaneking.test/master/src/main/java/org/shaneking/test/SKUnit.java", "stars": "2", "class": {"name": "SKUnit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "skPrint", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void skPrint(Object o) {        System.out.println(testName.getMethodName() + String0.EQUAL + o);    }", "url": "https://raw.githubusercontent.com/ShaneKing/org.shaneking.test/master/src/main/java/org/shaneking/test/SKUnit.java", "stars": "2", "class": {"name": "SKUnit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getContent", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "ByteBuf", "snippet": "    public static ByteBuf getContent(String webSocketLocation) {        return Unpooled.copiedBuffer(                \"<html><head><title>Web Socket Test</title></head>\" + NEWLINE +                        \"<body>\" + NEWLINE +                        \"<script type=\\\"text/javascript\\\">\" + NEWLINE +                        \"var socket;\" + NEWLINE +                        \"if (!window.WebSocket) {\" + NEWLINE +                        \"  window.WebSocket = window.MozWebSocket;\" + NEWLINE +                        '}' + NEWLINE +                        \"if (window.WebSocket) {\" + NEWLINE +                        \"  socket = new WebSocket(\\\"\" + webSocketLocation + \"\\\");\" + NEWLINE +                        \"  socket.onmessage = function(event) {\" + NEWLINE +                        \"    var ta = document.getElementById('responseText');\" + NEWLINE +                        \"    ta.value = ta.value + '\\\\n' + event.data\" + NEWLINE +                        \"  };\" + NEWLINE +                        \"  socket.onopen = function(event) {\" + NEWLINE +                        \"    var ta = document.getElementById('responseText');\" + NEWLINE +                        \"    ta.value = \\\"Web Socket opened!\\\";\" + NEWLINE +                        \"  };\" + NEWLINE +                        \"  socket.onclose = function(event) {\" + NEWLINE +                        \"    var ta = document.getElementById('responseText');\" + NEWLINE +                        \"    ta.value = ta.value + \\\"Web Socket closed\\\"; \" + NEWLINE +                        \"  };\" + NEWLINE +                        \"} else {\" + NEWLINE +                        \"  alert(\\\"Your browser does not support Web Socket.\\\");\" + NEWLINE +                        '}' + NEWLINE +                        NEWLINE +                        \"function send(message) {\" + NEWLINE +                        \"  if (!window.WebSocket) { return; }\" + NEWLINE +                        \"  if (socket.readyState == WebSocket.OPEN) {\" + NEWLINE +                        \"    socket.send(message);\" + NEWLINE +                        \"  } else {\" + NEWLINE +                        \"    alert(\\\"The socket is not open.\\\");\" + NEWLINE +                        \"  }\" + NEWLINE +                        '}' + NEWLINE +                        \"</script>\" + NEWLINE +                        \"<form onsubmit=\\\"return false;\\\">\" + NEWLINE +                        \"<input type=\\\"text\\\" name=\\\"message\\\" value=\\\"{cmd:1002,data: 212}\\\"/>\" +                        \"<input type=\\\"button\\\" value=\\\"Send Web Socket Data\\\"\" + NEWLINE +                        \"       onclick=\\\"send(this.form.message.value)\\\" />\" + NEWLINE +                        \"<h3>Output</h3>\" + NEWLINE +                        \"<textarea id=\\\"responseText\\\" style=\\\"width:500px;height:300px;\\\"></textarea>\" + NEWLINE +                        \"</form>\" + NEWLINE +                        \"</body>\" + NEWLINE +                        \"</html>\" + NEWLINE, CharsetUtil.US_ASCII);    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/socket/netty/WebSocketServerIndexPage.java", "stars": "1", "class": {"name": "WebSocketServerIndexPage", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "uploadImage", "params": ["Long", "MultipartFile"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<UploadImageResponseDTO>", "snippet": "    public ResponseEntity<UploadImageResponseDTO> uploadImage(        @ApiParam(value = \"Id of gardenfield\", required = true) @PathVariable(\"id\") Long id,        @ApiParam(value = \"Image for gardenfield\", required = true) @RequestParam(\"image\") MultipartFile image) {        String fileName = imageStorageService.storeImage(id, image);        UriComponentsBuilder gardenFieldPath = ServletUriComponentsBuilder.fromCurrentContextPath()            .path(\"/api/v1/gardenfields/\")            .path(id.toString());        String fileDownloadUri = gardenFieldPath.cloneBuilder()            .path(\"/downloadImage/\")            .path(fileName)            .toUriString();        String thumbnailDownloadUri = gardenFieldPath.cloneBuilder()            .path(\"/downloadThumbnail/\")            .path(fileName)            .toUriString();        return ResponseEntity.created(URI.create(fileDownloadUri))            .body(new UploadImageResponseDTO(fileName, fileDownloadUri,                thumbnailDownloadUri, image.getContentType(), image.getSize())            );    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/GardenFieldImageController.java", "stars": "2", "class": {"name": "GardenFieldImageController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "uploadMultipleImages", "params": ["Long", "MultipartFile"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<List>", "snippet": "    public ResponseEntity<List<UploadImageResponseDTO>> uploadMultipleImages(        @ApiParam(value = \"Id of gardenfield\", required = true) @PathVariable(\"id\") Long id,        @ApiParam(value = \"Images for gardenfield\", required = true) @RequestParam(\"files\") MultipartFile[] images) {        return new ResponseEntity<>(Arrays.stream(images)            .map(image -> uploadImage(id, image))            .collect(Collectors.toList())            .stream()            .map(HttpEntity::getBody)            .collect(Collectors.toList()), HttpStatus.CREATED);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/GardenFieldImageController.java", "stars": "2", "class": {"name": "GardenFieldImageController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "downloadImage", "params": ["Long", "String", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Resource>", "snippet": "    public ResponseEntity<Resource> downloadImage(        @ApiParam(value = \"Id of gardenfield\", required = true) @PathVariable(\"id\") Long id,        @ApiParam(value = \"Name of picture for gardenfield\", required = true) @PathVariable(\"imageName\") String imageName, HttpServletRequest request) {        // Load file as Resource        Resource resource = imageStorageService.loadImage(id, imageName);        // Try to determine file's content type        String contentType = null;        try {            contentType = request.getServletContext().getMimeType(resource.getFile().getAbsolutePath());        } catch (IOException ex) {            log.info(\"Could not determine file type.\");        }        // Fallback to the default content type if type could not be determined        if (contentType == null) {            contentType = MediaType.APPLICATION_OCTET_STREAM_VALUE;        }        return ResponseEntity.ok()            .contentType(MediaType.parseMediaType(contentType))            .cacheControl(CacheControl.maxAge(1, TimeUnit.DAYS))            .header(HttpHeaders.CONTENT_DISPOSITION, \"attachment; filename=\\\"\" + resource.getFilename() + \"\\\"\")            .body(resource);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/GardenFieldImageController.java", "stars": "2", "class": {"name": "GardenFieldImageController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "downloadThumbnail", "params": ["Long", "String", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Resource>", "snippet": "    public ResponseEntity<Resource> downloadThumbnail(        @ApiParam(value = \"Id of gardenfield\", required = true) @PathVariable(\"id\") Long id,        @ApiParam(value = \"Name of picture for gardenfield\", required = true) @PathVariable(\"imageName\") String imageName, HttpServletRequest request) {        // Load file as Resource        Resource resource = imageStorageService.loadThumbnail(id, imageName);        // Try to determine file's content type        String contentType = null;        try {            contentType = request.getServletContext().getMimeType(resource.getFile().getAbsolutePath());        } catch (IOException ex) {            log.info(\"Could not determine file type.\");        }        // Fallback to the default content type if type could not be determined        if (contentType == null) {            contentType = MediaType.APPLICATION_OCTET_STREAM_VALUE;        }        return ResponseEntity.ok()            .contentType(MediaType.parseMediaType(contentType))            .cacheControl(CacheControl.maxAge(1, TimeUnit.HOURS))            .header(HttpHeaders.CONTENT_DISPOSITION, \"attachment; filename=\\\"\" + resource.getFilename() + \"\\\"\")            .body(resource);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/GardenFieldImageController.java", "stars": "2", "class": {"name": "GardenFieldImageController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "downloadImages", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<List>", "snippet": "    public ResponseEntity<List<String>> downloadImages(        @ApiParam(value = \"Id of gardenfield\", required = true) @PathVariable(\"id\") Long id) {        List<String> fileNames = imageStorageService.getImageFilenames(id);        return ResponseEntity.ok()            .body(fileNames);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/GardenFieldImageController.java", "stars": "2", "class": {"name": "GardenFieldImageController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCoverImage", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<String>", "snippet": "    public ResponseEntity<String> getCoverImage(        @ApiParam(value = \"Id of gardenfield\", required = true) @PathVariable(\"id\") Long id) {        String fileName = imageStorageService.getCoverImage(id);        return ResponseEntity.ok().body(fileName);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/GardenFieldImageController.java", "stars": "2", "class": {"name": "GardenFieldImageController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteImage", "params": ["Long", "String"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<Void>", "snippet": "    public ResponseEntity<Void> deleteImage(        @ApiParam(value = \"Id of gardenfield\", required = true) @PathVariable(\"id\") Long id,        @ApiParam(value = \"Name of picture for gardenfield\", required = true) @PathVariable(\"imageName\") String imageName) {        log.debug(\"REST request to delete image {} for gardenfield: {}\", imageName, id);        imageStorageService.deleteImageAndThumbnail(id, imageName);        return ResponseEntity.noContent().headers(            HeaderUtil.createAlert(applicationName, \"gardenFieldImageManagement.deleted\", imageName)).build();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/GardenFieldImageController.java", "stars": "2", "class": {"name": "GardenFieldImageController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "convertCorrectPath", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String convertCorrectPath(String path) {        String separator = Matcher.quoteReplacement(File.separator);        return path.replaceAll(\"/\", separator);    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/util/PathUtil.java", "stars": "2", "class": {"name": "PathUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "convertCorrectUrl", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String convertCorrectUrl(String url) {        return url.replaceAll(\"\\\\\\\\\", \"/\");    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/util/PathUtil.java", "stars": "2", "class": {"name": "PathUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handleHttpRequestMethodNotSupportedException", "params": ["HttpRequestMethodNotSupportedException"], "throws": null, "modifiers": ["public"], "return_type": "BaseResponse", "snippet": "    public BaseResponse handleHttpRequestMethodNotSupportedException(HttpRequestMethodNotSupportedException e) {        BaseResponse<?> response = handleException(e);        response.setStatus(HttpStatus.METHOD_NOT_ALLOWED.value());        return response;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/core/ControllerExceptionHandler.java", "stars": "1", "class": {"name": "ControllerExceptionHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handleIllegalArgumentException", "params": ["IllegalArgumentException"], "throws": null, "modifiers": ["public"], "return_type": "BaseResponse", "snippet": "    public BaseResponse handleIllegalArgumentException(IllegalArgumentException e) {        BaseResponse<Object> response = handleException(e);        response.setStatus(HttpStatus.BAD_REQUEST.value());        return response;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/core/ControllerExceptionHandler.java", "stars": "1", "class": {"name": "ControllerExceptionHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handleBeyondException", "params": ["BaseException"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<BaseResponse>", "snippet": "    public ResponseEntity<BaseResponse> handleBeyondException(BaseException e) {        BaseResponse<Object> baseResponse = handleException(e);        baseResponse.setStatus(e.getStatus().value());        baseResponse.setData(e.getErrorData());        return new ResponseEntity<>(baseResponse, e.getStatus());    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/core/ControllerExceptionHandler.java", "stars": "1", "class": {"name": "ControllerExceptionHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handleException", "params": ["Throwable"], "throws": null, "modifiers": ["private"], "return_type": "BaseResponse<T>", "snippet": "    private <T> BaseResponse<T> handleException(Throwable t) {        BaseResponse<T> baseResponse = new BaseResponse<>();        baseResponse.setMessage(t.getMessage());        return baseResponse;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/core/ControllerExceptionHandler.java", "stars": "1", "class": {"name": "ControllerExceptionHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getConfiguration", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Configuration", "snippet": "  public static Configuration getConfiguration() {    return factory.getConfiguration();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazy_deserialize/LazyDeserializeTest.java", "stars": "15", "class": {"name": "LazyDeserializeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setupClass", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void setupClass() throws Exception {    try (Reader reader = Resources        .getResourceAsReader(\"org/apache/ibatis/submitted/lazy_deserialize/ibatisConfig.xml\")) {      factory = new SqlSessionFactoryBuilder().build(reader);    }    BaseDataTest.runScript(factory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/lazy_deserialize/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazy_deserialize/LazyDeserializeTest.java", "stars": "15", "class": {"name": "LazyDeserializeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testLoadLazyDeserialize", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testLoadLazyDeserialize() throws Exception {    factory.getConfiguration().setConfigurationFactory(this.getClass());    try (SqlSession session = factory.openSession()) {      final Mapper mapper = session.getMapper(Mapper.class);      final LazyObjectFoo foo = mapper.loadFoo(FOO_ID);      final byte[] serializedFoo = this.serializeFoo(foo);      final LazyObjectFoo deserializedFoo = this.deserializeFoo(serializedFoo);      assertNotNull(deserializedFoo);      assertEquals(Integer.valueOf(FOO_ID), deserializedFoo.getId());      assertNotNull(deserializedFoo.getLazyObjectBar());      assertEquals(Integer.valueOf(BAR_ID), deserializedFoo.getLazyObjectBar().getId());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazy_deserialize/LazyDeserializeTest.java", "stars": "15", "class": {"name": "LazyDeserializeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testLoadLazyDeserializeWithoutConfigurationFactory", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testLoadLazyDeserializeWithoutConfigurationFactory() throws Exception {    try (SqlSession session = factory.openSession()) {      final Mapper mapper = session.getMapper(Mapper.class);      final LazyObjectFoo foo = mapper.loadFoo(FOO_ID);      final byte[] serializedFoo = this.serializeFoo(foo);      final LazyObjectFoo deserializedFoo = this.deserializeFoo(serializedFoo);      try {        deserializedFoo.getLazyObjectBar();        fail();      } catch (ExecutorException e) {        assertTrue(e.getMessage().contains(\"Cannot get Configuration as configuration factory was not set.\"));      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazy_deserialize/LazyDeserializeTest.java", "stars": "15", "class": {"name": "LazyDeserializeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "serializeFoo", "params": ["LazyObjectFoo"], "throws": ["Exception"], "modifiers": ["private"], "return_type": "byte", "snippet": "  private byte[] serializeFoo(final LazyObjectFoo foo) throws Exception {    try (ByteArrayOutputStream bos = new ByteArrayOutputStream();         ObjectOutputStream oos = new ObjectOutputStream(bos)) {      oos.writeObject(foo);      return bos.toByteArray();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazy_deserialize/LazyDeserializeTest.java", "stars": "15", "class": {"name": "LazyDeserializeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "deserializeFoo", "params": ["byte"], "throws": ["Exception"], "modifiers": ["private"], "return_type": "LazyObjectFoo", "snippet": "  private LazyObjectFoo deserializeFoo(final byte[] serializedFoo) throws Exception {    try (ByteArrayInputStream bis = new ByteArrayInputStream(serializedFoo);         ObjectInputStream ios = new ObjectInputStream(bis)) {      return (LazyObjectFoo) ios.readObject();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazy_deserialize/LazyDeserializeTest.java", "stars": "15", "class": {"name": "LazyDeserializeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "prepareInsertAuthorMappedStatement", "params": ["Configuration"], "throws": null, "modifiers": ["static"], "return_type": "MappedStatement", "snippet": "  static MappedStatement prepareInsertAuthorMappedStatement(final Configuration config) {    final TypeHandlerRegistry registry = config.getTypeHandlerRegistry();    return new MappedStatement.Builder(config, \"insertAuthor\", new StaticSqlSource(config,\"INSERT INTO author (id,username,password,email,bio,favourite_section) values(?,?,?,?,?,?)\"), SqlCommandType.INSERT)        .parameterMap(            new ParameterMap.Builder(                config, \"defaultParameterMap\", Author.class,                new ArrayList<ParameterMapping>() {                  {                    add(new ParameterMapping.Builder(config, \"id\", registry.getTypeHandler(int.class)).build());                    add(new ParameterMapping.Builder(config, \"username\", registry.getTypeHandler(String.class)).build());                    add(new ParameterMapping.Builder(config, \"password\", registry.getTypeHandler(String.class)).build());                    add(new ParameterMapping.Builder(config, \"email\", registry.getTypeHandler(String.class)).build());                    add(new ParameterMapping.Builder(config, \"bio\", registry.getTypeHandler(String.class)).jdbcType(JdbcType.VARCHAR).build());                    add(new ParameterMapping.Builder(config, \"favouriteSection\", registry.getTypeHandler(Section.class)).jdbcType(JdbcType.VARCHAR).build());                  }                }).build())        .cache(authorCache).build();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/ExecutorTestHelper.java", "stars": "15", "class": {"name": "ExecutorTestHelper", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "prepareInsertAuthorMappedStatementWithAutoKey", "params": ["Configuration"], "throws": null, "modifiers": ["static"], "return_type": "MappedStatement", "snippet": "  static MappedStatement prepareInsertAuthorMappedStatementWithAutoKey(final Configuration config) {    final TypeHandlerRegistry registry = config.getTypeHandlerRegistry();    return new MappedStatement.Builder(config, \"insertAuthor\", new StaticSqlSource(config,\"INSERT INTO author (username,password,email,bio,favourite_section) values(?,?,?,?,?)\"), SqlCommandType.INSERT)        .parameterMap(            new ParameterMap.Builder(config, \"defaultParameterMap\", Author.class, new ArrayList<ParameterMapping>() {              {                add(new ParameterMapping.Builder(config, \"username\", registry.getTypeHandler(String.class)).build());                add(new ParameterMapping.Builder(config, \"password\", registry.getTypeHandler(String.class)).build());                add(new ParameterMapping.Builder(config, \"email\", registry.getTypeHandler(String.class)).build());                add(new ParameterMapping.Builder(config, \"bio\", registry.getTypeHandler(String.class)).jdbcType(JdbcType.VARCHAR).build());                add(new ParameterMapping.Builder(config, \"favouriteSection\", registry.getTypeHandler(Section.class)).jdbcType(JdbcType.VARCHAR).build());              }            }).build())        .cache(authorCache)        .keyGenerator(Jdbc3KeyGenerator.INSTANCE)        .keyProperty(\"id\")        .build();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/ExecutorTestHelper.java", "stars": "15", "class": {"name": "ExecutorTestHelper", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "prepareInsertAuthorProc", "params": ["Configuration"], "throws": null, "modifiers": ["static"], "return_type": "MappedStatement", "snippet": "  static MappedStatement prepareInsertAuthorProc(final Configuration config) {    final TypeHandlerRegistry registry = config.getTypeHandlerRegistry();    return new MappedStatement.Builder(config, \"insertAuthorProc\", new StaticSqlSource(config,\"{call insertAuthor(?,?,?,?)}\"), SqlCommandType.INSERT)        .parameterMap(new ParameterMap.Builder(config, \"defaultParameterMap\", Author.class,            new ArrayList<ParameterMapping>() {              {                add(new ParameterMapping.Builder(config, \"id\", registry.getTypeHandler(int.class)).build());                add(new ParameterMapping.Builder(config, \"username\", registry.getTypeHandler(String.class)).build());                add(new ParameterMapping.Builder(config, \"password\", registry.getTypeHandler(String.class)).build());                add(new ParameterMapping.Builder(config, \"email\", registry.getTypeHandler(String.class)).build());              }            }).build())        .cache(authorCache).build();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/ExecutorTestHelper.java", "stars": "15", "class": {"name": "ExecutorTestHelper", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "prepareUpdateAuthorMappedStatement", "params": ["Configuration"], "throws": null, "modifiers": ["static"], "return_type": "MappedStatement", "snippet": "  static MappedStatement prepareUpdateAuthorMappedStatement(final Configuration config) {    final TypeHandlerRegistry registry = config.getTypeHandlerRegistry();    return new MappedStatement.Builder(config, \"updateAuthor\", new StaticSqlSource(config,\"UPDATE author SET username = ?, password = ?, email = ?, bio = ? WHERE id = ?\"), SqlCommandType.UPDATE)        .parameterMap(new ParameterMap.Builder(config, \"defaultParameterMap\", Author.class,            new ArrayList<ParameterMapping>() {              {                add(new ParameterMapping.Builder(config, \"username\", registry.getTypeHandler(String.class)).build());                add(new ParameterMapping.Builder(config, \"password\", registry.getTypeHandler(String.class)).build());                add(new ParameterMapping.Builder(config, \"email\", registry.getTypeHandler(String.class)).build());                add(new ParameterMapping.Builder(config, \"bio\", registry.getTypeHandler(String.class)).jdbcType(JdbcType.VARCHAR).build());                add(new ParameterMapping.Builder(config, \"id\", registry.getTypeHandler(int.class)).build());              }            }).build())        .cache(authorCache).build();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/ExecutorTestHelper.java", "stars": "15", "class": {"name": "ExecutorTestHelper", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "prepareDeleteAuthorMappedStatement", "params": ["Configuration"], "throws": null, "modifiers": ["static"], "return_type": "MappedStatement", "snippet": "  static MappedStatement prepareDeleteAuthorMappedStatement(final Configuration config) {    final TypeHandlerRegistry registry = config.getTypeHandlerRegistry();    return new MappedStatement.Builder(config, \"deleteAuthor\", new StaticSqlSource(config,\"DELETE FROM author WHERE id = ?\"), SqlCommandType.DELETE)        .parameterMap(new ParameterMap.Builder(config, \"defaultParameterMap\", Author.class,            new ArrayList<ParameterMapping>() {              {                add(new ParameterMapping.Builder(config, \"id\", registry.getTypeHandler(int.class)).build());              }            }).build())        .cache(authorCache)        .build();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/ExecutorTestHelper.java", "stars": "15", "class": {"name": "ExecutorTestHelper", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "prepareSelectOneAuthorMappedStatement", "params": ["Configuration"], "throws": null, "modifiers": ["static"], "return_type": "MappedStatement", "snippet": "  static MappedStatement prepareSelectOneAuthorMappedStatement(final Configuration config) {    final TypeHandlerRegistry registry = config.getTypeHandlerRegistry();    final ResultMap rm = new ResultMap.Builder(config, \"defaultResultMap\", Author.class, new        ArrayList<ResultMapping>() {          {            add(new ResultMapping.Builder(config, \"id\", \"id\", registry.getTypeHandler(int.class)).build());            add(new ResultMapping.Builder(config, \"username\", \"username\", registry.getTypeHandler(String.class)).build());            add(new ResultMapping.Builder(config, \"password\", \"password\", registry.getTypeHandler(String.class)).build());            add(new ResultMapping.Builder(config, \"email\", \"email\", registry.getTypeHandler(String.class)).build());            add(new ResultMapping.Builder(config, \"bio\", \"bio\", registry.getTypeHandler(String.class)).build());            add(new ResultMapping.Builder(config, \"favouriteSection\", \"favourite_section\", registry.getTypeHandler(Section.class)).build());          }        }).build();    return new MappedStatement.Builder(config, \"selectAuthor\", new StaticSqlSource(config,\"SELECT * FROM author WHERE id = ?\"), SqlCommandType.SELECT)        .parameterMap(new ParameterMap.Builder(config, \"defaultParameterMap\", Author.class,            new ArrayList<ParameterMapping>() {              {                add(new ParameterMapping.Builder(config, \"id\", registry.getTypeHandler(int.class)).build());              }            }).build())        .resultMaps(new ArrayList<ResultMap>() {          {            add(rm);          }        })        .cache(authorCache).build();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/ExecutorTestHelper.java", "stars": "15", "class": {"name": "ExecutorTestHelper", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "prepareSelectAllAuthorsAutoMappedStatement", "params": ["Configuration"], "throws": null, "modifiers": ["static"], "return_type": "MappedStatement", "snippet": "  static MappedStatement prepareSelectAllAuthorsAutoMappedStatement(final Configuration config) {    final TypeHandlerRegistry registry = config.getTypeHandlerRegistry();    return new MappedStatement.Builder(config, \"selectAuthorAutoMap\", new StaticSqlSource(config,\"SELECT * FROM author ORDER BY id\"), SqlCommandType.SELECT)        .resultMaps(new ArrayList<ResultMap>() {          {            add(new ResultMap.Builder(config, \"defaultResultMap\", Author.class, new ArrayList<ResultMapping>() {              {                add(new ResultMapping.Builder(config, \"favouriteSection\", \"favourite_section\", registry.getTypeHandler(Section.class)).build());                add(new ResultMapping.Builder(config, null, \"not_exists\", Object.class).build());              }            }).build());          }        }).fetchSize(1000).timeout(2000).build();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/ExecutorTestHelper.java", "stars": "15", "class": {"name": "ExecutorTestHelper", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "prepareSelectOneAuthorMappedStatementWithConstructorResults", "params": ["Configuration"], "throws": null, "modifiers": ["static"], "return_type": "MappedStatement", "snippet": "  static MappedStatement prepareSelectOneAuthorMappedStatementWithConstructorResults(final Configuration config) {    final TypeHandlerRegistry registry = config.getTypeHandlerRegistry();    return new MappedStatement.Builder(config, \"selectAuthor\", new StaticSqlSource(config,\"SELECT * FROM author WHERE id = ?\"), SqlCommandType.SELECT)        .parameterMap(new ParameterMap.Builder(config, \"defaultParameterMap\", Author.class,            new ArrayList<ParameterMapping>() {              {                add(new ParameterMapping.Builder(config, \"id\", registry.getTypeHandler(int.class)).build());              }            }).build())        .resultMaps(new ArrayList<ResultMap>() {          {            add(new ResultMap.Builder(config, \"defaultResultMap\", Author.class, new ArrayList<ResultMapping>() {              {                add(new ResultMapping.Builder(config, null, \"id\", registry.getTypeHandler(Integer.class)).javaType(int.class).flags(new ArrayList<ResultFlag>() {                  {                    add(ResultFlag.CONSTRUCTOR);                  }                }).build());                add(new ResultMapping.Builder(config, \"username\", \"username\", registry.getTypeHandler(String.class)).build());                add(new ResultMapping.Builder(config, \"password\", \"password\", registry.getTypeHandler(String.class)).build());                add(new ResultMapping.Builder(config, \"email\", \"email\", registry.getTypeHandler(String.class)).build());                add(new ResultMapping.Builder(config, \"bio\", \"bio\", registry.getTypeHandler(String.class)).build());                add(new ResultMapping.Builder(config, \"favouriteSection\", \"favourite_section\", registry.getTypeHandler(Section.class)).build());              }            }).build());          }        })        .cache(authorCache)        .build();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/ExecutorTestHelper.java", "stars": "15", "class": {"name": "ExecutorTestHelper", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "prepareSelectTwoSetsOfAuthorsProc", "params": ["Configuration"], "throws": null, "modifiers": ["static"], "return_type": "MappedStatement", "snippet": "  static MappedStatement prepareSelectTwoSetsOfAuthorsProc(final Configuration config) {    final TypeHandlerRegistry registry = config.getTypeHandlerRegistry();    return new MappedStatement.Builder(config, \"selectTwoSetsOfAuthors\", new StaticSqlSource(config,\"{call selectTwoSetsOfAuthors(?,?)}\"), SqlCommandType.SELECT)        .statementType(StatementType.CALLABLE)        .parameterMap(new ParameterMap.Builder(            config, \"defaultParameterMap\", Author.class,            new ArrayList<ParameterMapping>() {              {                add(new ParameterMapping.Builder(config, \"id1\", registry.getTypeHandler(int.class)).build());                add(new ParameterMapping.Builder(config, \"id2\", registry.getTypeHandler(int.class)).build());              }            }).build())        .resultMaps(new ArrayList<ResultMap>() {          {            ResultMap map = new ResultMap.Builder(config, \"defaultResultMap\", Author.class, new ArrayList<ResultMapping>() {              {                add(new ResultMapping.Builder(config, \"id\", \"id\", registry.getTypeHandler(int.class)).build());                add(new ResultMapping.Builder(config, \"username\", \"username\", registry.getTypeHandler(String.class)).build());                add(new ResultMapping.Builder(config, \"password\", \"password\", registry.getTypeHandler(String.class)).build());                add(new ResultMapping.Builder(config, \"email\", \"email\", registry.getTypeHandler(String.class)).build());                add(new ResultMapping.Builder(config, \"bio\", \"bio\", registry.getTypeHandler(String.class)).build());              }            }).build();            add(map);            add(map);          }        }).build();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/ExecutorTestHelper.java", "stars": "15", "class": {"name": "ExecutorTestHelper", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "prepareSelectAuthorViaOutParams", "params": ["Configuration"], "throws": null, "modifiers": ["static"], "return_type": "MappedStatement", "snippet": "  static MappedStatement prepareSelectAuthorViaOutParams(final Configuration config) {    final TypeHandlerRegistry registry = config.getTypeHandlerRegistry();    return new MappedStatement.Builder(config, \"selectAuthorViaOutParams\", new StaticSqlSource(config, \"{call selectAuthorViaOutParams(?,?,?,?,?)}\"), SqlCommandType.SELECT)        .statementType(StatementType.CALLABLE)        .parameterMap(new ParameterMap.Builder(config, \"defaultParameterMap\", Author.class,            new ArrayList<ParameterMapping>() {              {                add(new ParameterMapping.Builder(config, \"id\", registry.getTypeHandler(int.class)).build());                add(new ParameterMapping.Builder(config, \"username\", registry.getTypeHandler(String.class)).jdbcType(JdbcType.VARCHAR).mode(ParameterMode.OUT).build());                add(new ParameterMapping.Builder(config, \"password\", registry.getTypeHandler(String.class)).jdbcType(JdbcType.VARCHAR).mode(ParameterMode.OUT).build());                add(new ParameterMapping.Builder(config, \"email\", registry.getTypeHandler(String.class)).jdbcType(JdbcType.VARCHAR).mode(ParameterMode.OUT).build());                add(new ParameterMapping.Builder(config, \"bio\", registry.getTypeHandler(String.class)).jdbcType(JdbcType.VARCHAR).mode(ParameterMode.OUT).build());              }            }).build())        .resultMaps(new ArrayList<>())        .cache(authorCache).build();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/ExecutorTestHelper.java", "stars": "15", "class": {"name": "ExecutorTestHelper", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "prepareSelectDiscriminatedPost", "params": ["Configuration"], "throws": null, "modifiers": ["static"], "return_type": "MappedStatement", "snippet": "  static MappedStatement prepareSelectDiscriminatedPost(final Configuration config) {    final TypeHandlerRegistry registry = config.getTypeHandlerRegistry();    final ResultMap discriminatorResultMap = new ResultMap.Builder(config, \"postResultMap\", HashMap.class, new ArrayList<ResultMapping>() {      {        add(new ResultMapping.Builder(config, \"subject\", \"subject\", registry.getTypeHandler(String.class)).build());        add(new ResultMapping.Builder(config, \"body\", \"body\", registry.getTypeHandler(String.class)).build());      }    }).build();    config.addResultMap(discriminatorResultMap);    return new MappedStatement.Builder(config, \"selectPosts\", new StaticSqlSource(config,\"SELECT * FROM post\"), SqlCommandType.SELECT)        .resultMaps(new ArrayList<ResultMap>() {          {            add(new ResultMap.Builder(config, \"defaultResultMap\", HashMap.class, new ArrayList<ResultMapping>() {              {                add(new ResultMapping.Builder(config, \"id\", \"id\", registry.getTypeHandler(int.class)).build());                add(new ResultMapping.Builder(config, \"blog_id\", \"blog_id\", registry.getTypeHandler(int.class)).build());              }            })                .discriminator(new Discriminator.Builder(                    config, new ResultMapping.Builder(config, \"section\", \"section\", registry.getTypeHandler(String.class)).build(),                    new HashMap<String, String>() {                      {                        put(\"NEWS\", discriminatorResultMap.getId());                        put(\"VIDEOS\", discriminatorResultMap.getId());                        put(\"PODCASTS\", discriminatorResultMap.getId());                        //NEWS left out on purpose.                      }                    }).build()).build());          }        }).build();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/ExecutorTestHelper.java", "stars": "15", "class": {"name": "ExecutorTestHelper", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "createInsertAuthorWithIDof99MappedStatement", "params": ["Configuration"], "throws": null, "modifiers": ["static"], "return_type": "MappedStatement", "snippet": "  static MappedStatement createInsertAuthorWithIDof99MappedStatement(final Configuration config) {    return new MappedStatement.Builder(config, \"insertAuthor\", new StaticSqlSource(config,\"INSERT INTO author (id,username,password,email,bio) values(99,'someone','******','someone@apache.org',null)\"), SqlCommandType.INSERT)        .statementType(StatementType.STATEMENT)        .parameterMap(new ParameterMap.Builder(config, \"defaultParameterMap\", Author.class,            new ArrayList<>()).build())        .cache(authorCache)        .build();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/ExecutorTestHelper.java", "stars": "15", "class": {"name": "ExecutorTestHelper", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "createSelectAuthorWithIDof99MappedStatement", "params": ["Configuration"], "throws": null, "modifiers": ["static"], "return_type": "MappedStatement", "snippet": "  static MappedStatement createSelectAuthorWithIDof99MappedStatement(final Configuration config) {    final TypeHandlerRegistry registry = config.getTypeHandlerRegistry();    return new MappedStatement.Builder(config, \"selectAuthor\", new StaticSqlSource(config,\"SELECT * FROM author WHERE id = 99\"), SqlCommandType.SELECT)        .statementType(StatementType.STATEMENT)        .parameterMap(new ParameterMap.Builder(config, \"defaultParameterMap\", Author.class, new ArrayList<>()).build())        .resultMaps(new ArrayList<ResultMap>() {          {            add(new ResultMap.Builder(config, \"defaultResultMap\", Author.class, new ArrayList<ResultMapping>() {              {                add(new ResultMapping.Builder(config, \"id\", \"id\", registry.getTypeHandler(int.class)).build());                add(new ResultMapping.Builder(config, \"username\", \"username\", registry.getTypeHandler(String.class)).build());                add(new ResultMapping.Builder(config, \"password\", \"password\", registry.getTypeHandler(String.class)).build());                add(new ResultMapping.Builder(config, \"email\", \"email\", registry.getTypeHandler(String.class)).build());                add(new ResultMapping.Builder(config, \"bio\", \"bio\", registry.getTypeHandler(String.class)).build());              }            }).build());          }        }).build();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/ExecutorTestHelper.java", "stars": "15", "class": {"name": "ExecutorTestHelper", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "prepareComplexSelectBlogMappedStatement", "params": ["Configuration"], "throws": null, "modifiers": ["static"], "return_type": "MappedStatement", "snippet": "  static MappedStatement prepareComplexSelectBlogMappedStatement(final Configuration config) {    final TypeHandlerRegistry registry = config.getTypeHandlerRegistry();    final SqlSource sqlSource = new StaticSqlSource(config, \"SELECT b.id, b.author_id, b.title, a.username, a.password, a.email, a.bio\" +        \" FROM blog b\" +        \" INNER JOIN author a ON b.author_id = a.id\" +        \" WHERE b.id = ?\");    final ParameterMap parameterMap = new ParameterMap.Builder(config, \"defaultParameterMap\", int.class,        new ArrayList<ParameterMapping>() {          {            add(new ParameterMapping.Builder(config, \"id\", registry.getTypeHandler(int.class)).build());          }        }).build();    final ResultMap resultMap = new ResultMap.Builder(config, \"defaultResultMap\", Blog.class, new ArrayList<ResultMapping>() {      {        add(new ResultMapping.Builder(config, \"id\", \"id\", registry.getTypeHandler(int.class))            .flags(new ArrayList<ResultFlag>() {              {                add(ResultFlag.ID);              }            }).build());        add(new ResultMapping.Builder(config, \"title\", \"title\", registry.getTypeHandler(String.class)).build());        add(new ResultMapping.Builder(config, \"author.id\", \"author_id\", registry.getTypeHandler(int.class)).build());        add(new ResultMapping.Builder(config, \"author.username\", \"username\", registry.getTypeHandler(String.class)).build());        add(new ResultMapping.Builder(config, \"author.password\", \"password\", registry.getTypeHandler(String.class)).build());        add(new ResultMapping.Builder(config, \"author.email\", \"email\", registry.getTypeHandler(String.class)).build());        add(new ResultMapping.Builder(config, \"author.bio\", \"bio\", registry.getTypeHandler(String.class)).build());        add(new ResultMapping.Builder(config, \"posts\", \"id\", registry.getTypeHandler(int.class)).javaType(List.class).nestedQueryId(\"selectPostsForBlog\").build());      }    }).build();    return new MappedStatement.Builder(config, \"selectBlogById\", sqlSource, SqlCommandType.SELECT)        .parameterMap(parameterMap)        .resultMaps(new ArrayList<ResultMap>() {          {            add(resultMap);          }        }).build();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/ExecutorTestHelper.java", "stars": "15", "class": {"name": "ExecutorTestHelper", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "prepareSelectBlogByIdAndAuthor", "params": ["Configuration"], "throws": null, "modifiers": ["static"], "return_type": "MappedStatement", "snippet": "  static MappedStatement prepareSelectBlogByIdAndAuthor(final Configuration config) {    final TypeHandlerRegistry registry = config.getTypeHandlerRegistry();    final SqlSource sqlSource = new StaticSqlSource(config,\"SELECT b.id, b.author_id, b.title, a.username, a.password, a.email, a.bio\" +        \" FROM blog b\" +        \" INNER JOIN author a ON b.author_id = a.id\" +        \" WHERE b.id = ? and a.id = ?\");    final ParameterMap parameterMap = new ParameterMap.Builder(config, \"defaultParameterMap\", Map.class,        new ArrayList<ParameterMapping>() {          {            add(new ParameterMapping.Builder(config, \"blogId\", registry.getTypeHandler(int.class)).build());            add(new ParameterMapping.Builder(config, \"authorId\", registry.getTypeHandler(int.class)).build());          }        }).build();    final ResultMap resultMap = new ResultMap.Builder(config, \"defaultResultMap\", Blog.class, new ArrayList<ResultMapping>() {      {        add(new ResultMapping.Builder(config, \"id\", \"id\", registry.getTypeHandler(int.class))            .flags(new ArrayList<ResultFlag>() {              {                add(ResultFlag.ID);              }            }).build());        add(new ResultMapping.Builder(config, \"title\", \"title\", registry.getTypeHandler(String.class)).build());        add(new ResultMapping.Builder(config, \"author.id\", \"author_id\", registry.getTypeHandler(int.class)).build());        add(new ResultMapping.Builder(config, \"author.username\", \"username\", registry.getTypeHandler(String.class)).build());        add(new ResultMapping.Builder(config, \"author.password\", \"password\", registry.getTypeHandler(String.class)).build());        add(new ResultMapping.Builder(config, \"author.email\", \"email\", registry.getTypeHandler(String.class)).build());        add(new ResultMapping.Builder(config, \"author.bio\", \"bio\", registry.getTypeHandler(String.class)).build());        add(new ResultMapping.Builder(config, \"posts\", \"id\", registry.getTypeHandler(int.class)).javaType(List.class).nestedQueryId(\"selectPostsForBlog\").build());      }    }).build();    return new MappedStatement.Builder(config, \"selectBlogByIdAndAuthor\", sqlSource, SqlCommandType.SELECT)        .parameterMap(parameterMap)        .resultMaps(new ArrayList<ResultMap>() {          {            add(resultMap);          }        }).build();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/ExecutorTestHelper.java", "stars": "15", "class": {"name": "ExecutorTestHelper", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "prepareSelectPostsForBlogMappedStatement", "params": ["Configuration"], "throws": null, "modifiers": ["static"], "return_type": "MappedStatement", "snippet": "  static MappedStatement prepareSelectPostsForBlogMappedStatement(final Configuration config) {    final TypeHandlerRegistry registry = config.getTypeHandlerRegistry();    final SqlSource sqlSource = new StaticSqlSource(config,\"SELECT p.id, p.created_on, p.blog_id, p.section, p.subject, p.body, pt.tag_id,\" +        \" t.name as tag_name, c.id as comment_id, c.name as comment_name, c.comment\" +        \" FROM post p\" +        \" INNER JOIN post_tag pt ON pt.post_id = p.id\" +        \" INNER JOIN tag t ON pt.tag_id = t.id\" +        \" LEFT OUTER JOIN comment c ON c.post_id = p.id\" +        \" WHERE p.blog_id = ?\");    final ParameterMap parameterMap = new ParameterMap.Builder(config, \"defaultParameterMap\", Author.class,        new ArrayList<ParameterMapping>() {          {            add(new ParameterMapping.Builder(config, \"id\", registry.getTypeHandler(int.class)).build());          }        }).build();    final ResultMap tagResultMap = new ResultMap.Builder(config, \"tagResultMap\", Tag.class, new ArrayList<ResultMapping>() {      {        add(new ResultMapping.Builder(config, \"id\", \"tag_id\", registry.getTypeHandler(int.class))            .flags(new ArrayList<ResultFlag>() {              {                add(ResultFlag.ID);              }            }).build());        add(new ResultMapping.Builder(config, \"name\", \"tag_name\", registry.getTypeHandler(String.class)).build());      }    }).build();    final ResultMap commentResultMap = new ResultMap.Builder(config, \"commentResultMap\", Comment.class, new ArrayList<ResultMapping>() {      {        add(new ResultMapping.Builder(config, \"id\", \"comment_id\", registry.getTypeHandler(int.class))            .flags(new ArrayList<ResultFlag>() {              {                add(ResultFlag.ID);              }            }).build());        add(new ResultMapping.Builder(config, \"name\", \"comment_name\", registry.getTypeHandler(String.class)).build());        add(new ResultMapping.Builder(config, \"comment\", \"comment\", registry.getTypeHandler(String.class)).build());      }    }).build();    config.addResultMap(tagResultMap);    config.addResultMap(commentResultMap);    final ResultMap postResultMap = new ResultMap.Builder(config, \"defaultResultMap\", Post.class, new ArrayList<ResultMapping>() {      {        add(new ResultMapping.Builder(config, \"id\", \"id\", registry.getTypeHandler(int.class))            .flags(new ArrayList<ResultFlag>() {              {                add(ResultFlag.ID);              }            }).build());        add(new ResultMapping.Builder(config, \"blog\", \"blog_id\", registry.getTypeHandler(int.class)).javaType(Blog.class).nestedQueryId(\"selectBlogById\").build());        add(new ResultMapping.Builder(config, \"createdOn\", \"created_on\", registry.getTypeHandler(Date.class)).build());        add(new ResultMapping.Builder(config, \"section\", \"section\", registry.getTypeHandler(Section.class)).build());        add(new ResultMapping.Builder(config, \"subject\", \"subject\", registry.getTypeHandler(String.class)).build());        add(new ResultMapping.Builder(config, \"body\", \"body\", registry.getTypeHandler(String.class)).build());        add(new ResultMapping.Builder(config, \"tags\").nestedResultMapId(tagResultMap.getId()).build());        add(new ResultMapping.Builder(config, \"comments\").nestedResultMapId(commentResultMap.getId()).build());      }    }).build();    return new MappedStatement.Builder(config, \"selectPostsForBlog\", sqlSource, SqlCommandType.SELECT)        .parameterMap(parameterMap)        .resultMaps(new ArrayList<ResultMap>() {          {            add(postResultMap);          }        }).build();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/ExecutorTestHelper.java", "stars": "15", "class": {"name": "ExecutorTestHelper", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "prepareSelectPostMappedStatement", "params": ["Configuration"], "throws": null, "modifiers": ["static"], "return_type": "MappedStatement", "snippet": "  static MappedStatement prepareSelectPostMappedStatement(final Configuration config) {    final TypeHandlerRegistry registry = config.getTypeHandlerRegistry();    final SqlSource sqlSource = new StaticSqlSource(config,\"SELECT p.id, p.created_on, p.blog_id, p.section, p.subject, p.body, pt.tag_id,\" +        \" t.name as tag_name, c.id as comment_id, c.name as comment_name, c.comment\" +        \" FROM post p\" +        \" LEFT OUTER JOIN post_tag pt ON pt.post_id = p.id\" +        \" LEFT OUTER JOIN tag t ON pt.tag_id = t.id\" +        \" LEFT OUTER JOIN comment c ON c.post_id = p.id\" +        \" WHERE p.id = ?\");    final ParameterMap parameterMap = new ParameterMap.Builder(config, \"defaultParameterMap\", Author.class,        new ArrayList<ParameterMapping>() {          {            add(new ParameterMapping.Builder(config, \"id\", registry.getTypeHandler(int.class)).build());          }        }).build();    final ResultMap tagResultMap = new ResultMap.Builder(config, \"tagResultMap\", Tag.class, new ArrayList<ResultMapping>() {      {        add(new ResultMapping.Builder(config, \"id\", \"tag_id\", registry.getTypeHandler(int.class))            .flags(new ArrayList<ResultFlag>() {              {                add(ResultFlag.ID);              }            }).build());        add(new ResultMapping.Builder(config, \"name\", \"tag_name\", registry.getTypeHandler(String.class)).build());      }    }).build();    final ResultMap commentResultMap = new ResultMap.Builder(config, \"commentResultMap\", Comment.class, new ArrayList<ResultMapping>() {      {        add(new ResultMapping.Builder(config, \"id\", \"comment_id\", registry.getTypeHandler(int.class))            .flags(new ArrayList<ResultFlag>() {              {                add(ResultFlag.ID);              }            }).build());        add(new ResultMapping.Builder(config, \"name\", \"comment_name\", registry.getTypeHandler(String.class)).build());        add(new ResultMapping.Builder(config, \"comment\", \"comment\", registry.getTypeHandler(String.class)).build());      }    }).build();    config.addResultMap(tagResultMap);    config.addResultMap(commentResultMap);    final ResultMap postResultMap = new ResultMap.Builder(config, \"\", Post.class, new ArrayList<ResultMapping>() {      {        add(new ResultMapping.Builder(config, \"id\", \"id\", registry.getTypeHandler(int.class))            .flags(new ArrayList<ResultFlag>() {              {                add(ResultFlag.ID);              }            }).build());        add(new ResultMapping.Builder(config, \"blog\", \"blog_id\", registry.getTypeHandler(int.class)).javaType(Blog.class).nestedQueryId(\"selectBlogById\").build());        add(new ResultMapping.Builder(config, \"createdOn\", \"created_on\", registry.getTypeHandler(Date.class)).build());        add(new ResultMapping.Builder(config, \"section\", \"section\", registry.getTypeHandler(Section.class)).build());        add(new ResultMapping.Builder(config, \"subject\", \"subject\", registry.getTypeHandler(String.class)).build());        add(new ResultMapping.Builder(config, \"body\", \"body\", registry.getTypeHandler(String.class)).build());        add(new ResultMapping.Builder(config, \"tags\").nestedResultMapId(tagResultMap.getId()).build());        add(new ResultMapping.Builder(config, \"comments\").nestedResultMapId(commentResultMap.getId()).build());      }    }).build();    return new MappedStatement.Builder(config, \"selectPostsForBlog\", sqlSource, SqlCommandType.SELECT)        .parameterMap(parameterMap)        .resultMaps(new ArrayList<ResultMap>() {          {            add(postResultMap);          }        }).build();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/ExecutorTestHelper.java", "stars": "15", "class": {"name": "ExecutorTestHelper", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "prepareSelectPostWithBlogByAuthorMappedStatement", "params": ["Configuration"], "throws": null, "modifiers": ["static"], "return_type": "MappedStatement", "snippet": "  static MappedStatement prepareSelectPostWithBlogByAuthorMappedStatement(final Configuration config) {    final TypeHandlerRegistry registry = config.getTypeHandlerRegistry();    final SqlSource sqlSource = new StaticSqlSource(config,\"SELECT p.id, p.created_on, p.blog_id, p.author_id, p.section, p.subject, p.body, pt.tag_id,\" +        \" t.name as tag_name, c.id as comment_id, c.name as comment_name, c.comment\" +        \" FROM post p\" +        \" LEFT OUTER JOIN post_tag pt ON pt.post_id = p.id\" +        \" LEFT OUTER JOIN tag t ON pt.tag_id = t.id\" +        \" LEFT OUTER JOIN comment c ON c.post_id = p.id\" +        \" WHERE p.id = ?\");    final ParameterMap parameterMap = new ParameterMap.Builder(config, \"defaultParameterMap\", Author.class,        new ArrayList<ParameterMapping>() {          {            add(new ParameterMapping.Builder(config, \"id\", registry.getTypeHandler(int.class)).build());          }        }).build();    final ResultMap tagResultMap = new ResultMap.Builder(config, \"tagResultMap\", Tag.class, new ArrayList<ResultMapping>() {      {        add(new ResultMapping.Builder(config, \"id\", \"tag_id\", registry.getTypeHandler(int.class))            .flags(new ArrayList<ResultFlag>() {              {                add(ResultFlag.ID);              }            }).build());        add(new ResultMapping.Builder(config, \"name\", \"tag_name\", registry.getTypeHandler(String.class)).build());      }    }).build();    final ResultMap commentResultMap = new ResultMap.Builder(config, \"commentResultMap\", Comment.class, new ArrayList<ResultMapping>() {      {        add(new ResultMapping.Builder(config, \"id\", \"comment_id\", registry.getTypeHandler(int.class))            .flags(new ArrayList<ResultFlag>() {              {                add(ResultFlag.ID);              }            }).build());        add(new ResultMapping.Builder(config, \"name\", \"comment_name\", registry.getTypeHandler(String.class)).build());        add(new ResultMapping.Builder(config, \"comment\", \"comment\", registry.getTypeHandler(String.class)).build());      }    }).build();    config.addResultMap(tagResultMap);    config.addResultMap(commentResultMap);    final ResultMap postResultMap = new ResultMap.Builder(config, \"postResultMap\", Post.class, new ArrayList<ResultMapping>() {      {        add(new ResultMapping.Builder(config, \"id\", \"id\", registry.getTypeHandler(int.class))            .flags(new ArrayList<ResultFlag>() {              {                add(ResultFlag.ID);              }            }).build());        add(new ResultMapping.Builder(config, \"blog\").nestedQueryId(\"selectBlogByIdAndAuthor\").composites(new ArrayList<ResultMapping>() {          {            add(new ResultMapping.Builder(config, \"authorId\", \"author_id\", registry.getTypeHandler(int.class)).build());            add(new ResultMapping.Builder(config, \"blogId\", \"blog_id\", registry.getTypeHandler(int.class)).build());          }        }).build());        add(new ResultMapping.Builder(config, \"createdOn\", \"created_on\", registry.getTypeHandler(Date.class)).build());        add(new ResultMapping.Builder(config, \"section\", \"section\", registry.getTypeHandler(Section.class)).build());        add(new ResultMapping.Builder(config, \"subject\", \"subject\", registry.getTypeHandler(String.class)).build());        add(new ResultMapping.Builder(config, \"body\", \"body\", registry.getTypeHandler(String.class)).build());        add(new ResultMapping.Builder(config, \"tags\").nestedResultMapId(tagResultMap.getId()).build());        add(new ResultMapping.Builder(config, \"comments\").nestedResultMapId(commentResultMap.getId()).build());      }    }).build();    return new MappedStatement.Builder(config, \"selectPostsForBlog\", sqlSource, SqlCommandType.SELECT)        .parameterMap(parameterMap)        .resultMaps(new ArrayList<ResultMap>() {          {            add(postResultMap);          }        }).build();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/ExecutorTestHelper.java", "stars": "15", "class": {"name": "ExecutorTestHelper", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "prepareInsertAuthorMappedStatementWithBeforeAutoKey", "params": ["Configuration"], "throws": null, "modifiers": ["static"], "return_type": "MappedStatement", "snippet": "  static MappedStatement prepareInsertAuthorMappedStatementWithBeforeAutoKey(final Configuration config) {    final TypeHandlerRegistry registry = config.getTypeHandlerRegistry();    final ResultMap rm = new ResultMap.Builder(config, \"keyResultMap\", Integer.class, new ArrayList<>())        .build();    MappedStatement kms = new MappedStatement.Builder(config, \"insertAuthor!selectKey\", new StaticSqlSource(config,\"SELECT 123456 as id FROM SYSIBM.SYSDUMMY1\"), SqlCommandType.SELECT)        .keyProperty(\"id\")        .resultMaps(new ArrayList<ResultMap>() {          {            add(rm);          }        })        .build();    config.addMappedStatement(kms);    return new MappedStatement.Builder(config, \"insertAuthor\", new DynamicSqlSource(config, new TextSqlNode(\"INSERT INTO author (id,username,password,email,bio,favourite_section) values(#{id},#{username},#{password},#{email},#{bio:VARCHAR},#{favouriteSection})\")), SqlCommandType.INSERT)        .parameterMap(            new ParameterMap.Builder(config, \"defaultParameterMap\", Author.class, new ArrayList<ParameterMapping>() {              {                add(new ParameterMapping.Builder(config, \"id\", registry.getTypeHandler(Integer.class)).build());                add(new ParameterMapping.Builder(config, \"username\", registry.getTypeHandler(String.class)).build());                add(new ParameterMapping.Builder(config, \"password\", registry.getTypeHandler(String.class)).build());                add(new ParameterMapping.Builder(config, \"email\", registry.getTypeHandler(String.class)).build());                add(new ParameterMapping.Builder(config, \"bio\", registry.getTypeHandler(String.class)).jdbcType(JdbcType.VARCHAR).build());                add(new ParameterMapping.Builder(config, \"favouriteSection\", registry.getTypeHandler(Section.class)).jdbcType(JdbcType.VARCHAR).build());              }            }).build())        .cache(authorCache)        .keyGenerator(new SelectKeyGenerator(kms, true))        .keyProperty(\"id\")        .build();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/ExecutorTestHelper.java", "stars": "15", "class": {"name": "ExecutorTestHelper", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "initVideo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initVideo() {        //\u5916\u90e8\u8f85\u52a9\u7684\u65cb\u8f6c\uff0c\u5e2e\u52a9\u5168\u5c4f        orientationUtils = new OrientationUtils(this, getGSYVideoPlayer());        //\u521d\u59cb\u5316\u4e0d\u6253\u5f00\u5916\u90e8\u7684\u65cb\u8f6c        orientationUtils.setEnable(false);        if (getGSYVideoPlayer().getFullscreenButton() != null) {            getGSYVideoPlayer().getFullscreenButton().setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    showFull();                    clickForFullScreen();                }            });        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "initVideoBuilderMode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initVideoBuilderMode() {        initVideo();        getGSYVideoOptionBuilder().                setVideoAllCallBack(this)                .build(getGSYVideoPlayer());    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "showFull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void showFull() {        if (orientationUtils.getIsLand() != 1) {            //\u76f4\u63a5\u6a2a\u5c4f            orientationUtils.resolveByClick();        }        //\u7b2c\u4e00\u4e2atrue\u662f\u5426\u9700\u8981\u9690\u85cfactionbar\uff0c\u7b2c\u4e8c\u4e2atrue\u662f\u5426\u9700\u8981\u9690\u85cfstatusbar        getGSYVideoPlayer().startWindowFullscreen(GSYBaseActivityDetail.this, hideActionBarWhenFull(), hideStatusBarWhenFull());    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "onBackPressed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBackPressed() {        if (orientationUtils != null) {            orientationUtils.backToProtVideo();        }        if (GSYVideoManager.backFromWindowFull(this)) {            return;        }        super.onBackPressed();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onPause() {        super.onPause();        getGSYVideoPlayer().getCurrentPlayer().onVideoPause();        if (orientationUtils != null) {            orientationUtils.setIsPause(true);        }        isPause = true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onResume() {        super.onResume();        getGSYVideoPlayer().getCurrentPlayer().onVideoResume();        if (orientationUtils != null) {            orientationUtils.setIsPause(false);        }        isPause = false;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDestroy() {        super.onDestroy();        if (isPlay) {            getGSYVideoPlayer().getCurrentPlayer().release();        }        if (orientationUtils != null)            orientationUtils.releaseListener();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "onConfigurationChanged", "params": ["Configuration"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onConfigurationChanged(Configuration newConfig) {        super.onConfigurationChanged(newConfig);        //\u5982\u679c\u65cb\u8f6c\u4e86\u5c31\u5168\u5c4f        if (isPlay && !isPause) {            getGSYVideoPlayer().onConfigurationChanged(this, newConfig, orientationUtils, hideActionBarWhenFull(), hideStatusBarWhenFull());        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "onStartPrepared", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onStartPrepared(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "onPrepared", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPrepared(String url, Object... objects) {        if (orientationUtils == null) {            throw new NullPointerException(\"initVideo() or initVideoBuilderMode() first\");        }        //\u5f00\u59cb\u64ad\u653e\u4e86\u624d\u80fd\u65cb\u8f6c\u548c\u5168\u5c4f        orientationUtils.setEnable(getDetailOrientationRotateAuto() && !isAutoFullWithSize());        isPlay = true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "onClickStartIcon", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClickStartIcon(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "onClickStartError", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClickStartError(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "onClickStop", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClickStop(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "onClickStopFullscreen", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClickStopFullscreen(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "onClickResume", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClickResume(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "onClickResumeFullscreen", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClickResumeFullscreen(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "onClickSeekbar", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClickSeekbar(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "onClickSeekbarFullscreen", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClickSeekbarFullscreen(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "onAutoComplete", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onAutoComplete(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "onEnterFullscreen", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onEnterFullscreen(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "onQuitFullscreen", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onQuitFullscreen(String url, Object... objects) {        if (orientationUtils != null) {            orientationUtils.backToProtVideo();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "onQuitSmallWidget", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onQuitSmallWidget(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "onEnterSmallWidget", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onEnterSmallWidget(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "onTouchScreenSeekVolume", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onTouchScreenSeekVolume(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "onTouchScreenSeekPosition", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onTouchScreenSeekPosition(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "onTouchScreenSeekLight", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onTouchScreenSeekLight(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "onPlayError", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPlayError(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "onClickStartThumb", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClickStartThumb(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "onClickBlank", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClickBlank(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "onClickBlankFullscreen", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClickBlankFullscreen(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "hideActionBarWhenFull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean hideActionBarWhenFull() {        return  true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "hideStatusBarWhenFull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean hideStatusBarWhenFull() {        return  true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "getGSYVideoPlayer", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "T", "snippet": "    public abstract T getGSYVideoPlayer();    /**     * \u914d\u7f6e\u64ad\u653e\u5668     */    public abstract GSYVideoOptionBuilder getGSYVideoOptionBuilder();    /**     * \u70b9\u51fb\u4e86\u5168\u5c4f     */    public abstract void clickForFullScreen();    /**     * \u662f\u5426\u542f\u52a8\u65cb\u8f6c\u6a2a\u5c4f\uff0ctrue\u8868\u793a\u542f\u52a8     */    public abstract boolean getDetailOrientationRotateAuto();    /**     * \u662f\u5426\u6839\u636e\u89c6\u9891\u5c3a\u5bf8\uff0c\u81ea\u52a8\u9009\u62e9\u7ad6\u5c4f\u5168\u5c4f\u6216\u8005\u6a2a\u5c4f\u5168\u5c4f\uff0c\u6ce8\u610f\uff0c\u8fd9\u65f6\u5019\u9ed8\u8ba4\u65cb\u8f6c\u65e0\u6548     */    public boolean isAutoFullWithSize() {        return false;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "getGSYVideoOptionBuilder", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public abstract GSYVideoOptionBuilder getGSYVideoOptionBuilder();    /**     * \u70b9\u51fb\u4e86\u5168\u5c4f     */    public abstract void clickForFullScreen();    /**     * \u662f\u5426\u542f\u52a8\u65cb\u8f6c\u6a2a\u5c4f\uff0ctrue\u8868\u793a\u542f\u52a8     */    public abstract boolean getDetailOrientationRotateAuto();    /**     * \u662f\u5426\u6839\u636e\u89c6\u9891\u5c3a\u5bf8\uff0c\u81ea\u52a8\u9009\u62e9\u7ad6\u5c4f\u5168\u5c4f\u6216\u8005\u6a2a\u5c4f\u5168\u5c4f\uff0c\u6ce8\u610f\uff0c\u8fd9\u65f6\u5019\u9ed8\u8ba4\u65cb\u8f6c\u65e0\u6548     */    public boolean isAutoFullWithSize() {        return false;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "clickForFullScreen", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void clickForFullScreen();    /**     * \u662f\u5426\u542f\u52a8\u65cb\u8f6c\u6a2a\u5c4f\uff0ctrue\u8868\u793a\u542f\u52a8     */    public abstract boolean getDetailOrientationRotateAuto();    /**     * \u662f\u5426\u6839\u636e\u89c6\u9891\u5c3a\u5bf8\uff0c\u81ea\u52a8\u9009\u62e9\u7ad6\u5c4f\u5168\u5c4f\u6216\u8005\u6a2a\u5c4f\u5168\u5c4f\uff0c\u6ce8\u610f\uff0c\u8fd9\u65f6\u5019\u9ed8\u8ba4\u65cb\u8f6c\u65e0\u6548     */    public boolean isAutoFullWithSize() {        return false;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "getDetailOrientationRotateAuto", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "boolean", "snippet": "    public abstract boolean getDetailOrientationRotateAuto();    /**     * \u662f\u5426\u6839\u636e\u89c6\u9891\u5c3a\u5bf8\uff0c\u81ea\u52a8\u9009\u62e9\u7ad6\u5c4f\u5168\u5c4f\u6216\u8005\u6a2a\u5c4f\u5168\u5c4f\uff0c\u6ce8\u610f\uff0c\u8fd9\u65f6\u5019\u9ed8\u8ba4\u65cb\u8f6c\u65e0\u6548     */    public boolean isAutoFullWithSize() {        return false;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "isAutoFullWithSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isAutoFullWithSize() {        return false;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseActivityDetail", "extends": "AppCompatActivity", "implements": ["VideoAllCallBack"], "modifiers": ["public", "abstract"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void setUp() throws Exception {    // create an SqlSessionFactory    try (Reader reader = Resources        .getResourceAsReader(\"org/apache/ibatis/submitted/lazy_properties/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/lazy_properties/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazy_properties/LazyPropertiesTest.java", "stars": "15", "class": {"name": "LazyPropertiesTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldLoadOnlyTheInvokedLazyProperty", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldLoadOnlyTheInvokedLazyProperty() {    sqlSessionFactory.getConfiguration().setAggressiveLazyLoading(false);    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = mapper.getUser(1);      assertEquals(0, user.setterCounter);      assertNotNull(user.getLazy1());      assertEquals(1, user.setterCounter, \"Should NOT load other lazy properties.\");    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazy_properties/LazyPropertiesTest.java", "stars": "15", "class": {"name": "LazyPropertiesTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "verifyAggressiveLazyLoadingBehavior", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void verifyAggressiveLazyLoadingBehavior() {    sqlSessionFactory.getConfiguration().setAggressiveLazyLoading(true);    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = mapper.getUser(1);      // Setter invocation by MyBatis triggers aggressive lazy-loading.      assertEquals(3, user.setterCounter, \"Should load all lazy properties.\");    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazy_properties/LazyPropertiesTest.java", "stars": "15", "class": {"name": "LazyPropertiesTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldToStringTriggerLazyLoading", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldToStringTriggerLazyLoading() {    sqlSessionFactory.getConfiguration().setAggressiveLazyLoading(false);    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = mapper.getUser(1);      user.toString();      assertEquals(3, user.setterCounter);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazy_properties/LazyPropertiesTest.java", "stars": "15", "class": {"name": "LazyPropertiesTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldHashCodeTriggerLazyLoading", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldHashCodeTriggerLazyLoading() {    sqlSessionFactory.getConfiguration().setAggressiveLazyLoading(false);    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = mapper.getUser(1);      user.hashCode();      assertEquals(3, user.setterCounter);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazy_properties/LazyPropertiesTest.java", "stars": "15", "class": {"name": "LazyPropertiesTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldEqualsTriggerLazyLoading", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldEqualsTriggerLazyLoading() {    sqlSessionFactory.getConfiguration().setAggressiveLazyLoading(false);    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = mapper.getUser(1);      user.equals(null);      assertEquals(3, user.setterCounter);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazy_properties/LazyPropertiesTest.java", "stars": "15", "class": {"name": "LazyPropertiesTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldCloneTriggerLazyLoading", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldCloneTriggerLazyLoading() {    sqlSessionFactory.getConfiguration().setAggressiveLazyLoading(false);    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = mapper.getUser(1);      user.clone();      assertEquals(3, user.setterCounter);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazy_properties/LazyPropertiesTest.java", "stars": "15", "class": {"name": "LazyPropertiesTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "verifyEmptyLazyLoadTriggerMethods", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void verifyEmptyLazyLoadTriggerMethods() {    Configuration configuration = sqlSessionFactory.getConfiguration();    configuration.setAggressiveLazyLoading(false);    configuration.setLazyLoadTriggerMethods(new HashSet<>());    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = mapper.getUser(1);      user.toString();      user.hashCode();      user.equals(null);      user.clone();      assertEquals(0, user.setterCounter);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazy_properties/LazyPropertiesTest.java", "stars": "15", "class": {"name": "LazyPropertiesTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "verifyCustomLazyLoadTriggerMethods", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void verifyCustomLazyLoadTriggerMethods() {    Configuration configuration = sqlSessionFactory.getConfiguration();    configuration.setAggressiveLazyLoading(false);    configuration        .setLazyLoadTriggerMethods(new HashSet<>(Collections.singleton(\"trigger\")));    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = mapper.getUser(1);      user.toString();      user.hashCode();      user.equals(null);      user.clone();      assertEquals(0, user.setterCounter);      user.trigger();      assertEquals(3, user.setterCounter);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazy_properties/LazyPropertiesTest.java", "stars": "15", "class": {"name": "LazyPropertiesTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldInvokingSetterInvalidateLazyLoading_Javassist", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldInvokingSetterInvalidateLazyLoading_Javassist() {    shoulInvokingSetterInvalidateLazyLoading(new JavassistProxyFactory());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazy_properties/LazyPropertiesTest.java", "stars": "15", "class": {"name": "LazyPropertiesTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldInvokingSetterInvalidateLazyLoading_Cglib", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldInvokingSetterInvalidateLazyLoading_Cglib() {    shoulInvokingSetterInvalidateLazyLoading(new CglibProxyFactory());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazy_properties/LazyPropertiesTest.java", "stars": "15", "class": {"name": "LazyPropertiesTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shoulInvokingSetterInvalidateLazyLoading", "params": ["ProxyFactory"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void shoulInvokingSetterInvalidateLazyLoading(ProxyFactory proxyFactory) {    Configuration config = sqlSessionFactory.getConfiguration();    config.setProxyFactory(proxyFactory);    config.setAggressiveLazyLoading(false);    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = mapper.getUser(1);      User u2 = new User();      u2.setId(99);      user.setLazy1(u2);      assertEquals(1, user.setterCounter);      assertEquals(Integer.valueOf(99), user.getLazy1().getId());      assertEquals(1, user.setterCounter);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazy_properties/LazyPropertiesTest.java", "stars": "15", "class": {"name": "LazyPropertiesTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "contextLoads", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void contextLoads() {    }", "url": "https://raw.githubusercontent.com/camelya58/kafka-sample/master/kafka-producer/src/test/java/com/example/kafkaproducer/KafkaProducerApplicationTests.java", "stars": "2", "class": {"name": "KafkaProducerApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setExecutorManager", "params": ["ExecutorManagerAdapter"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void setExecutorManager(final ExecutorManagerAdapter em) {    executorManagerAdapter = em;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/ExecutionChecker.java", "stars": "18", "class": {"name": "ExecutionChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "createFromJson", "params": ["HashMap<String,Object>"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "ExecutionChecker", "snippet": "  public static ExecutionChecker createFromJson(final HashMap<String, Object> jsonObj)      throws Exception {    if (!jsonObj.get(\"type\").equals(type)) {      throw new Exception(\"Cannot create checker of \" + type + \" from \"          + jsonObj.get(\"type\"));    }    final int execId = Integer.valueOf((String) jsonObj.get(\"execId\"));    String jobName = null;    if (jsonObj.containsKey(\"jobName\")) {      jobName = (String) jsonObj.get(\"jobName\");    }    final String checkerId = (String) jsonObj.get(\"checkerId\");    final Status wantedStatus = Status.valueOf((String) jsonObj.get(\"wantedStatus\"));    return new ExecutionChecker(checkerId, execId, jobName, wantedStatus);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/ExecutionChecker.java", "stars": "18", "class": {"name": "ExecutionChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "eval", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object eval() {    final ExecutableFlow exflow;    try {      exflow = executorManagerAdapter.getExecutableFlow(this.execId);    } catch (final ExecutorManagerException e) {      e.printStackTrace();      return Boolean.FALSE;    }    if (this.jobName != null) {      final ExecutableNode job = exflow.getExecutableNode(this.jobName);      if (job != null) {        return job.getStatus().equals(this.wantedStatus);      } else {        return Boolean.FALSE;      }    } else {      return exflow.getStatus().equals(this.wantedStatus);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/ExecutionChecker.java", "stars": "18", "class": {"name": "ExecutionChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "getNum", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getNum() {    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/ExecutionChecker.java", "stars": "18", "class": {"name": "ExecutionChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "reset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void reset() {  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/ExecutionChecker.java", "stars": "18", "class": {"name": "ExecutionChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getId() {    return this.checkerId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/ExecutionChecker.java", "stars": "18", "class": {"name": "ExecutionChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getType() {    return type;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/ExecutionChecker.java", "stars": "18", "class": {"name": "ExecutionChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "fromJson", "params": ["Object"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "ConditionChecker", "snippet": "  public ConditionChecker fromJson(final Object obj) throws Exception {    return createFromJson((HashMap<String, Object>) obj);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/ExecutionChecker.java", "stars": "18", "class": {"name": "ExecutionChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "toJson", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object toJson() {    final Map<String, Object> jsonObj = new HashMap<>();    jsonObj.put(\"type\", type);    jsonObj.put(\"execId\", String.valueOf(this.execId));    if (this.jobName != null) {      jsonObj.put(\"jobName\", this.jobName);    }    jsonObj.put(\"wantedStatus\", this.wantedStatus.toString());    jsonObj.put(\"checkerId\", this.checkerId);    return jsonObj;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/ExecutionChecker.java", "stars": "18", "class": {"name": "ExecutionChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "stopChecker", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void stopChecker() {  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/ExecutionChecker.java", "stars": "18", "class": {"name": "ExecutionChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "setContext", "params": ["Map<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setContext(final Map<String, Object> context) {  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/ExecutionChecker.java", "stars": "18", "class": {"name": "ExecutionChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "getNextCheckTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getNextCheckTime() {    return -1;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/builtin/ExecutionChecker.java", "stars": "18", "class": {"name": "ExecutionChecker", "extends": null, "implements": ["ConditionChecker"], "modifiers": ["public"]}}, {"method_name": "parse", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Configuration", "snippet": "  public Configuration parse() {    if (parsed) {      throw new BuilderException(\"Each XMLConfigBuilder can only be used once.\");    }    parsed = true;    parseConfiguration(parser.evalNode(\"/configuration\"));    return configuration;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java", "stars": "15", "class": {"name": "XMLConfigBuilder", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "parseConfiguration", "params": ["XNode"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void parseConfiguration(XNode root) {    try {      //issue #117 read properties first      propertiesElement(root.evalNode(\"properties\"));      Properties settings = settingsAsProperties(root.evalNode(\"settings\"));      loadCustomVfs(settings);      loadCustomLogImpl(settings);      typeAliasesElement(root.evalNode(\"typeAliases\"));      pluginElement(root.evalNode(\"plugins\"));      objectFactoryElement(root.evalNode(\"objectFactory\"));      objectWrapperFactoryElement(root.evalNode(\"objectWrapperFactory\"));      reflectorFactoryElement(root.evalNode(\"reflectorFactory\"));      settingsElement(settings);      // read it after objectFactory and objectWrapperFactory issue #631      environmentsElement(root.evalNode(\"environments\"));      databaseIdProviderElement(root.evalNode(\"databaseIdProvider\"));      typeHandlerElement(root.evalNode(\"typeHandlers\"));      mapperElement(root.evalNode(\"mappers\"));    } catch (Exception e) {      throw new BuilderException(\"Error parsing SQL Mapper Configuration. Cause: \" + e, e);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java", "stars": "15", "class": {"name": "XMLConfigBuilder", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "settingsAsProperties", "params": ["XNode"], "throws": null, "modifiers": ["private"], "return_type": "Properties", "snippet": "  private Properties settingsAsProperties(XNode context) {    if (context == null) {      return new Properties();    }    Properties props = context.getChildrenAsProperties();    // Check that all settings are known to the configuration class    MetaClass metaConfig = MetaClass.forClass(Configuration.class, localReflectorFactory);    for (Object key : props.keySet()) {      if (!metaConfig.hasSetter(String.valueOf(key))) {        throw new BuilderException(\"The setting \" + key + \" is not known.  Make sure you spelled it correctly (case sensitive).\");      }    }    return props;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java", "stars": "15", "class": {"name": "XMLConfigBuilder", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "loadCustomVfs", "params": ["Properties"], "throws": ["ClassNotFoundException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void loadCustomVfs(Properties props) throws ClassNotFoundException {    String value = props.getProperty(\"vfsImpl\");    if (value != null) {      String[] clazzes = value.split(\",\");      for (String clazz : clazzes) {        if (!clazz.isEmpty()) {          @SuppressWarnings(\"unchecked\")          Class<? extends VFS> vfsImpl = (Class<? extends VFS>)Resources.classForName(clazz);          configuration.setVfsImpl(vfsImpl);        }      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java", "stars": "15", "class": {"name": "XMLConfigBuilder", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "loadCustomLogImpl", "params": ["Properties"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void loadCustomLogImpl(Properties props) {    Class<? extends Log> logImpl = resolveClass(props.getProperty(\"logImpl\"));    configuration.setLogImpl(logImpl);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java", "stars": "15", "class": {"name": "XMLConfigBuilder", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "typeAliasesElement", "params": ["XNode"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void typeAliasesElement(XNode parent) {    if (parent != null) {      for (XNode child : parent.getChildren()) {        if (\"package\".equals(child.getName())) {          String typeAliasPackage = child.getStringAttribute(\"name\");          configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);        } else {          String alias = child.getStringAttribute(\"alias\");          String type = child.getStringAttribute(\"type\");          try {            Class<?> clazz = Resources.classForName(type);            if (alias == null) {              typeAliasRegistry.registerAlias(clazz);            } else {              typeAliasRegistry.registerAlias(alias, clazz);            }          } catch (ClassNotFoundException e) {            throw new BuilderException(\"Error registering typeAlias for '\" + alias + \"'. Cause: \" + e, e);          }        }      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java", "stars": "15", "class": {"name": "XMLConfigBuilder", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "pluginElement", "params": ["XNode"], "throws": ["Exception"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void pluginElement(XNode parent) throws Exception {    if (parent != null) {      for (XNode child : parent.getChildren()) {        String interceptor = child.getStringAttribute(\"interceptor\");        Properties properties = child.getChildrenAsProperties();        Interceptor interceptorInstance = (Interceptor) resolveClass(interceptor).getDeclaredConstructor().newInstance();        interceptorInstance.setProperties(properties);        configuration.addInterceptor(interceptorInstance);      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java", "stars": "15", "class": {"name": "XMLConfigBuilder", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "objectFactoryElement", "params": ["XNode"], "throws": ["Exception"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void objectFactoryElement(XNode context) throws Exception {    if (context != null) {      String type = context.getStringAttribute(\"type\");      Properties properties = context.getChildrenAsProperties();      ObjectFactory factory = (ObjectFactory) resolveClass(type).getDeclaredConstructor().newInstance();      factory.setProperties(properties);      configuration.setObjectFactory(factory);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java", "stars": "15", "class": {"name": "XMLConfigBuilder", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "objectWrapperFactoryElement", "params": ["XNode"], "throws": ["Exception"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void objectWrapperFactoryElement(XNode context) throws Exception {    if (context != null) {      String type = context.getStringAttribute(\"type\");      ObjectWrapperFactory factory = (ObjectWrapperFactory) resolveClass(type).getDeclaredConstructor().newInstance();      configuration.setObjectWrapperFactory(factory);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java", "stars": "15", "class": {"name": "XMLConfigBuilder", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "reflectorFactoryElement", "params": ["XNode"], "throws": ["Exception"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void reflectorFactoryElement(XNode context) throws Exception {    if (context != null) {      String type = context.getStringAttribute(\"type\");      ReflectorFactory factory = (ReflectorFactory) resolveClass(type).getDeclaredConstructor().newInstance();      configuration.setReflectorFactory(factory);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java", "stars": "15", "class": {"name": "XMLConfigBuilder", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "propertiesElement", "params": ["XNode"], "throws": ["Exception"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void propertiesElement(XNode context) throws Exception {    if (context != null) {      Properties defaults = context.getChildrenAsProperties();      String resource = context.getStringAttribute(\"resource\");      String url = context.getStringAttribute(\"url\");      if (resource != null && url != null) {        throw new BuilderException(\"The properties element cannot specify both a URL and a resource based property file reference.  Please specify one or the other.\");      }      if (resource != null) {        defaults.putAll(Resources.getResourceAsProperties(resource));      } else if (url != null) {        defaults.putAll(Resources.getUrlAsProperties(url));      }      Properties vars = configuration.getVariables();      if (vars != null) {        defaults.putAll(vars);      }      parser.setVariables(defaults);      configuration.setVariables(defaults);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java", "stars": "15", "class": {"name": "XMLConfigBuilder", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "settingsElement", "params": ["Properties"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void settingsElement(Properties props) {    configuration.setAutoMappingBehavior(AutoMappingBehavior.valueOf(props.getProperty(\"autoMappingBehavior\", \"PARTIAL\")));    configuration.setAutoMappingUnknownColumnBehavior(AutoMappingUnknownColumnBehavior.valueOf(props.getProperty(\"autoMappingUnknownColumnBehavior\", \"NONE\")));    configuration.setCacheEnabled(booleanValueOf(props.getProperty(\"cacheEnabled\"), true));    configuration.setProxyFactory((ProxyFactory) createInstance(props.getProperty(\"proxyFactory\")));    configuration.setLazyLoadingEnabled(booleanValueOf(props.getProperty(\"lazyLoadingEnabled\"), false));    configuration.setAggressiveLazyLoading(booleanValueOf(props.getProperty(\"aggressiveLazyLoading\"), false));    configuration.setMultipleResultSetsEnabled(booleanValueOf(props.getProperty(\"multipleResultSetsEnabled\"), true));    configuration.setUseColumnLabel(booleanValueOf(props.getProperty(\"useColumnLabel\"), true));    configuration.setUseGeneratedKeys(booleanValueOf(props.getProperty(\"useGeneratedKeys\"), false));    configuration.setDefaultExecutorType(ExecutorType.valueOf(props.getProperty(\"defaultExecutorType\", \"SIMPLE\")));    configuration.setDefaultStatementTimeout(integerValueOf(props.getProperty(\"defaultStatementTimeout\"), null));    configuration.setDefaultFetchSize(integerValueOf(props.getProperty(\"defaultFetchSize\"), null));    configuration.setDefaultResultSetType(resolveResultSetType(props.getProperty(\"defaultResultSetType\")));    configuration.setMapUnderscoreToCamelCase(booleanValueOf(props.getProperty(\"mapUnderscoreToCamelCase\"), false));    configuration.setSafeRowBoundsEnabled(booleanValueOf(props.getProperty(\"safeRowBoundsEnabled\"), false));    configuration.setLocalCacheScope(LocalCacheScope.valueOf(props.getProperty(\"localCacheScope\", \"SESSION\")));    configuration.setJdbcTypeForNull(JdbcType.valueOf(props.getProperty(\"jdbcTypeForNull\", \"OTHER\")));    configuration.setLazyLoadTriggerMethods(stringSetValueOf(props.getProperty(\"lazyLoadTriggerMethods\"), \"equals,clone,hashCode,toString\"));    configuration.setSafeResultHandlerEnabled(booleanValueOf(props.getProperty(\"safeResultHandlerEnabled\"), true));    configuration.setDefaultScriptingLanguage(resolveClass(props.getProperty(\"defaultScriptingLanguage\")));    configuration.setDefaultEnumTypeHandler(resolveClass(props.getProperty(\"defaultEnumTypeHandler\")));    configuration.setCallSettersOnNulls(booleanValueOf(props.getProperty(\"callSettersOnNulls\"), false));    configuration.setUseActualParamName(booleanValueOf(props.getProperty(\"useActualParamName\"), true));    configuration.setReturnInstanceForEmptyRow(booleanValueOf(props.getProperty(\"returnInstanceForEmptyRow\"), false));    configuration.setLogPrefix(props.getProperty(\"logPrefix\"));    configuration.setConfigurationFactory(resolveClass(props.getProperty(\"configurationFactory\")));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java", "stars": "15", "class": {"name": "XMLConfigBuilder", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "environmentsElement", "params": ["XNode"], "throws": ["Exception"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void environmentsElement(XNode context) throws Exception {    if (context != null) {      if (environment == null) {        environment = context.getStringAttribute(\"default\");      }      for (XNode child : context.getChildren()) {        String id = child.getStringAttribute(\"id\");        if (isSpecifiedEnvironment(id)) {          TransactionFactory txFactory = transactionManagerElement(child.evalNode(\"transactionManager\"));          DataSourceFactory dsFactory = dataSourceElement(child.evalNode(\"dataSource\"));          DataSource dataSource = dsFactory.getDataSource();          Environment.Builder environmentBuilder = new Environment.Builder(id)              .transactionFactory(txFactory)              .dataSource(dataSource);          configuration.setEnvironment(environmentBuilder.build());        }      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java", "stars": "15", "class": {"name": "XMLConfigBuilder", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "databaseIdProviderElement", "params": ["XNode"], "throws": ["Exception"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void databaseIdProviderElement(XNode context) throws Exception {    DatabaseIdProvider databaseIdProvider = null;    if (context != null) {      String type = context.getStringAttribute(\"type\");      // awful patch to keep backward compatibility      if (\"VENDOR\".equals(type)) {        type = \"DB_VENDOR\";      }      Properties properties = context.getChildrenAsProperties();      databaseIdProvider = (DatabaseIdProvider) resolveClass(type).getDeclaredConstructor().newInstance();      databaseIdProvider.setProperties(properties);    }    Environment environment = configuration.getEnvironment();    if (environment != null && databaseIdProvider != null) {      String databaseId = databaseIdProvider.getDatabaseId(environment.getDataSource());      configuration.setDatabaseId(databaseId);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java", "stars": "15", "class": {"name": "XMLConfigBuilder", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "transactionManagerElement", "params": ["XNode"], "throws": ["Exception"], "modifiers": ["private"], "return_type": "TransactionFactory", "snippet": "  private TransactionFactory transactionManagerElement(XNode context) throws Exception {    if (context != null) {      String type = context.getStringAttribute(\"type\");      Properties props = context.getChildrenAsProperties();      TransactionFactory factory = (TransactionFactory) resolveClass(type).getDeclaredConstructor().newInstance();      factory.setProperties(props);      return factory;    }    throw new BuilderException(\"Environment declaration requires a TransactionFactory.\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java", "stars": "15", "class": {"name": "XMLConfigBuilder", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "dataSourceElement", "params": ["XNode"], "throws": ["Exception"], "modifiers": ["private"], "return_type": "DataSourceFactory", "snippet": "  private DataSourceFactory dataSourceElement(XNode context) throws Exception {    if (context != null) {      String type = context.getStringAttribute(\"type\");      Properties props = context.getChildrenAsProperties();      DataSourceFactory factory = (DataSourceFactory) resolveClass(type).getDeclaredConstructor().newInstance();      factory.setProperties(props);      return factory;    }    throw new BuilderException(\"Environment declaration requires a DataSourceFactory.\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java", "stars": "15", "class": {"name": "XMLConfigBuilder", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "typeHandlerElement", "params": ["XNode"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void typeHandlerElement(XNode parent) {    if (parent != null) {      for (XNode child : parent.getChildren()) {        if (\"package\".equals(child.getName())) {          String typeHandlerPackage = child.getStringAttribute(\"name\");          typeHandlerRegistry.register(typeHandlerPackage);        } else {          String javaTypeName = child.getStringAttribute(\"javaType\");          String jdbcTypeName = child.getStringAttribute(\"jdbcType\");          String handlerTypeName = child.getStringAttribute(\"handler\");          Class<?> javaTypeClass = resolveClass(javaTypeName);          JdbcType jdbcType = resolveJdbcType(jdbcTypeName);          Class<?> typeHandlerClass = resolveClass(handlerTypeName);          if (javaTypeClass != null) {            if (jdbcType == null) {              typeHandlerRegistry.register(javaTypeClass, typeHandlerClass);            } else {              typeHandlerRegistry.register(javaTypeClass, jdbcType, typeHandlerClass);            }          } else {            typeHandlerRegistry.register(typeHandlerClass);          }        }      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java", "stars": "15", "class": {"name": "XMLConfigBuilder", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "mapperElement", "params": ["XNode"], "throws": ["Exception"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void mapperElement(XNode parent) throws Exception {    if (parent != null) {      for (XNode child : parent.getChildren()) {        if (\"package\".equals(child.getName())) {          String mapperPackage = child.getStringAttribute(\"name\");          configuration.addMappers(mapperPackage);        } else {          String resource = child.getStringAttribute(\"resource\");          String url = child.getStringAttribute(\"url\");          String mapperClass = child.getStringAttribute(\"class\");          if (resource != null && url == null && mapperClass == null) {            ErrorContext.instance().resource(resource);            InputStream inputStream = Resources.getResourceAsStream(resource);            XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, resource, configuration.getSqlFragments());            mapperParser.parse();          } else if (resource == null && url != null && mapperClass == null) {            ErrorContext.instance().resource(url);            InputStream inputStream = Resources.getUrlAsStream(url);            XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, url, configuration.getSqlFragments());            mapperParser.parse();          } else if (resource == null && url == null && mapperClass != null) {            Class<?> mapperInterface = Resources.classForName(mapperClass);            configuration.addMapper(mapperInterface);          } else {            throw new BuilderException(\"A mapper element may only specify a url, resource or class, but not more than one.\");          }        }      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java", "stars": "15", "class": {"name": "XMLConfigBuilder", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "isSpecifiedEnvironment", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean isSpecifiedEnvironment(String id) {    if (environment == null) {      throw new BuilderException(\"No environment specified.\");    } else if (id == null) {      throw new BuilderException(\"Environment requires an id attribute.\");    } else if (environment.equals(id)) {      return true;    }    return false;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java", "stars": "15", "class": {"name": "XMLConfigBuilder", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "blockCraftMessageToUser", "params": ["Player", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void blockCraftMessageToUser(Player target, String message) {\t\ttarget.sendMessage(ChatColor.RED + message);\t}", "url": "https://raw.githubusercontent.com/argoninc/Whitelist_Craft_Place/master/src/main/java/com/github/argoninc/Messages/MensagensUsuario.java", "stars": "2", "class": {"name": "MensagensUsuario", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "blockPlaceMessageToUser", "params": ["Player", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void blockPlaceMessageToUser(Player target, String message) {\t\ttarget.sendMessage(ChatColor.RED + message);\t}", "url": "https://raw.githubusercontent.com/argoninc/Whitelist_Craft_Place/master/src/main/java/com/github/argoninc/Messages/MensagensUsuario.java", "stars": "2", "class": {"name": "MensagensUsuario", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "blockInteractMessageToUser", "params": ["Player", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void blockInteractMessageToUser(Player target, String message) {\t\ttarget.sendMessage(ChatColor.RED + message);\t}", "url": "https://raw.githubusercontent.com/argoninc/Whitelist_Craft_Place/master/src/main/java/com/github/argoninc/Messages/MensagensUsuario.java", "stars": "2", "class": {"name": "MensagensUsuario", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCount() {        return mData.length;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/DialogStringArrayAdapter.java", "stars": "4", "class": {"name": "DialogStringArrayAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getItem(int position) {        return mData[position];    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/DialogStringArrayAdapter.java", "stars": "4", "class": {"name": "DialogStringArrayAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getItemId(int position) {        return position;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/DialogStringArrayAdapter.java", "stars": "4", "class": {"name": "DialogStringArrayAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getView", "params": ["int", "View", "ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View getView(int position, View convertView, ViewGroup parent) {        ViewHolder holder;        if (convertView == null) {            convertView = mInflater.inflate(android.R.layout.simple_list_item_1, parent, false);            holder = new ViewHolder(convertView);            holder.text1.setPadding(32, 0, 32, 0);            convertView.setTag(holder);        } else {            holder = (ViewHolder) convertView.getTag();        }        holder.text1.setText(getItem(position));        return convertView;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/DialogStringArrayAdapter.java", "stars": "4", "class": {"name": "DialogStringArrayAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getKeya", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getKeya() {    return keya;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/foreach_map/NestedBeanMapEntry.java", "stars": "15", "class": {"name": "NestedBeanMapEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setKeya", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setKeya(Integer keya) {    this.keya = keya;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/foreach_map/NestedBeanMapEntry.java", "stars": "15", "class": {"name": "NestedBeanMapEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getKeyb", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Boolean", "snippet": "  public Boolean getKeyb() {    return keyb;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/foreach_map/NestedBeanMapEntry.java", "stars": "15", "class": {"name": "NestedBeanMapEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setKeyb", "params": ["Boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setKeyb(Boolean keyb) {    this.keyb = keyb;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/foreach_map/NestedBeanMapEntry.java", "stars": "15", "class": {"name": "NestedBeanMapEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getValuea", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getValuea() {    return valuea;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/foreach_map/NestedBeanMapEntry.java", "stars": "15", "class": {"name": "NestedBeanMapEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setValuea", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setValuea(Integer valuea) {    this.valuea = valuea;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/foreach_map/NestedBeanMapEntry.java", "stars": "15", "class": {"name": "NestedBeanMapEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getValueb", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Boolean", "snippet": "  public Boolean getValueb() {    return valueb;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/foreach_map/NestedBeanMapEntry.java", "stars": "15", "class": {"name": "NestedBeanMapEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setValueb", "params": ["Boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setValueb(Boolean valueb) {    this.valueb = valueb;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/foreach_map/NestedBeanMapEntry.java", "stars": "15", "class": {"name": "NestedBeanMapEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean equals(Object o) {    if (this == o)      return true;    if (o == null || getClass() != o.getClass())      return false;    NestedBeanMapEntry map3Entry = (NestedBeanMapEntry) o;    if (! Objects.equals(keya, map3Entry.keya))      return false;    if (! Objects.equals(keyb, map3Entry.keyb))      return false;    if (! Objects.equals(valuea, map3Entry.valuea))      return false;    if (! Objects.equals(valueb, map3Entry.valueb))      return false;    return true;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/foreach_map/NestedBeanMapEntry.java", "stars": "15", "class": {"name": "NestedBeanMapEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int hashCode() {    int result = keya != null ? keya.hashCode() : 0;    result = 31 * result + (valuea != null ? valuea.hashCode() : 0);    result = 31 * result + (keyb != null ? keyb.hashCode() : 0);    result = 31 * result + (valueb != null ? valueb.hashCode() : 0);    return result;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/foreach_map/NestedBeanMapEntry.java", "stars": "15", "class": {"name": "NestedBeanMapEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    return \"NestedBeanMapEntry{\" + \"keya=\" + keya + \", valuea=\" + valuea + \", keyb=\" + keyb + \", valueb=\" + valueb + '}';  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/foreach_map/NestedBeanMapEntry.java", "stars": "15", "class": {"name": "NestedBeanMapEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initAttr", "params": ["Context", "AttributeSet"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initAttr(Context context, AttributeSet attrs) {        TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.VolumeProgressView);        mHaloHeight = dp2px(mHaloHeight);        mHaloWidth = dp2px(mHaloWidth);        mHaloHeight = ta.getDimension(R.styleable.VolumeProgressView_vpv_halo_height, mHaloHeight);        mHaloWidth = ta.getDimension(R.styleable.VolumeProgressView_vpv_halo_width, mHaloWidth);        mNumOfHalo = ta.getInteger(R.styleable.VolumeProgressView_vpv_num_of_halo, mNumOfHalo);        drawable1 = ta.getResourceId(R.styleable.VolumeProgressView_vpv_volume_low, drawable1);        drawable2 = ta.getResourceId(R.styleable.VolumeProgressView_vpv_volume_medium, drawable2);        drawable3 = ta.getResourceId(R.styleable.VolumeProgressView_vpv_volume_high, drawable3);        mHaloColor = ta.getColor(R.styleable.VolumeProgressView_vpv_halo_color, mHaloColor);        ta.recycle();    }", "url": "https://raw.githubusercontent.com/zhangchaojiong/VideoProgressView/master/videoprogressview/src/main/java/com/cj/videoprogressview/VolumeProgressView.java", "stars": "32", "class": {"name": "VolumeProgressView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void init() {        mLayer = new RectF();        mPaint = new Paint();        mPaint.setAntiAlias(true);        mPaint.setColor(mHaloColor);        mPaint.setStyle(Paint.Style.FILL);        setWillNotDraw(false);    }", "url": "https://raw.githubusercontent.com/zhangchaojiong/VideoProgressView/master/videoprogressview/src/main/java/com/cj/videoprogressview/VolumeProgressView.java", "stars": "32", "class": {"name": "VolumeProgressView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "onAttachedToWindow", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onAttachedToWindow() {        super.onAttachedToWindow();        volume1 = BitmapFactory.decodeResource(getResources(), drawable1);        volume2 = BitmapFactory.decodeResource(getResources(), drawable2);        volume3 = BitmapFactory.decodeResource(getResources(), drawable3);    }", "url": "https://raw.githubusercontent.com/zhangchaojiong/VideoProgressView/master/videoprogressview/src/main/java/com/cj/videoprogressview/VolumeProgressView.java", "stars": "32", "class": {"name": "VolumeProgressView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "onSizeChanged", "params": ["int", "int", "int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onSizeChanged(int w, int h, int oldw, int oldh) {        super.onSizeChanged(w, h, oldw, oldh);        float margin = mHaloHeight + mHaloWidth * 2;        float paddingLeft = getPaddingLeft();        float paddingRight = getPaddingRight();        float paddingTop = getPaddingTop();        float paddingBottom = getPaddingBottom();        mLayer.set(margin + paddingLeft, margin + paddingTop,                w - margin - paddingRight, h - margin - paddingBottom);    }", "url": "https://raw.githubusercontent.com/zhangchaojiong/VideoProgressView/master/videoprogressview/src/main/java/com/cj/videoprogressview/VolumeProgressView.java", "stars": "32", "class": {"name": "VolumeProgressView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        drawPath(canvas);    }", "url": "https://raw.githubusercontent.com/zhangchaojiong/VideoProgressView/master/videoprogressview/src/main/java/com/cj/videoprogressview/VolumeProgressView.java", "stars": "32", "class": {"name": "VolumeProgressView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawPath", "params": ["Canvas"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void drawPath(Canvas canvas) {        float progress = mProgress;        int type = (int) ((1 - progress) / 0.33f);        if (type == 0) {            canvas.drawBitmap(volume1, null, mLayer, mPaint);        } else if (type == 1) {            canvas.drawBitmap(volume2, null, mLayer, mPaint);        } else {            canvas.drawBitmap(volume3, null, mLayer, mPaint);        }        //\u753b\u5149\u6655        canvas.save();        canvas.translate(mLayer.centerX(), mLayer.centerY());        int count = mNumOfHalo - (int) (progress / mOneOFHaleProgress);        float mHalfHaloWidth = mHaloWidth / 2;        for (int i = 0; i < count; i++) {            canvas.drawRoundRect(new RectF(-mHalfHaloWidth, -mLayer.centerY() + getPaddingTop(),                    mHalfHaloWidth, mHaloHeight - mLayer.centerY() + getPaddingTop()), mHalfHaloWidth, mHalfHaloWidth, mPaint);            canvas.rotate(mOneOFHaleDegrees);        }        canvas.restore();    }", "url": "https://raw.githubusercontent.com/zhangchaojiong/VideoProgressView/master/videoprogressview/src/main/java/com/cj/videoprogressview/VolumeProgressView.java", "stars": "32", "class": {"name": "VolumeProgressView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "dp2px", "params": ["float"], "throws": null, "modifiers": ["private"], "return_type": "float", "snippet": "    private float dp2px(float dp) {        return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp,                getContext().getResources().getDisplayMetrics());    }", "url": "https://raw.githubusercontent.com/zhangchaojiong/VideoProgressView/master/videoprogressview/src/main/java/com/cj/videoprogressview/VolumeProgressView.java", "stars": "32", "class": {"name": "VolumeProgressView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "setProgress", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setProgress(float progress) {        this.mProgress = 1.0f - progress;        postInvalidate();    }", "url": "https://raw.githubusercontent.com/zhangchaojiong/VideoProgressView/master/videoprogressview/src/main/java/com/cj/videoprogressview/VolumeProgressView.java", "stars": "32", "class": {"name": "VolumeProgressView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDetachedFromWindow", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDetachedFromWindow() {        super.onDetachedFromWindow();        if (volume1 != null && !volume1.isRecycled()) {            volume1.recycle();            volume1 = null;        }        if (volume2 != null && !volume2.isRecycled()) {            volume2.recycle();            volume2 = null;        }        if (volume3 != null && !volume3.isRecycled()) {            volume3.recycle();            volume3 = null;        }    }", "url": "https://raw.githubusercontent.com/zhangchaojiong/VideoProgressView/master/videoprogressview/src/main/java/com/cj/videoprogressview/VolumeProgressView.java", "stars": "32", "class": {"name": "VolumeProgressView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "getKey", "params": [], "throws": null, "modifiers": ["public"], "return_type": "K", "snippet": "    public K getKey() {        return key;    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/util/Pair.java", "stars": "2", "class": {"name": "Pair", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFirst", "params": [], "throws": null, "modifiers": ["public"], "return_type": "K", "snippet": "    public K getFirst() {        return getKey();    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/util/Pair.java", "stars": "2", "class": {"name": "Pair", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "V", "snippet": "    public V getValue() {        return value;    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/util/Pair.java", "stars": "2", "class": {"name": "Pair", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSecond", "params": [], "throws": null, "modifiers": ["public"], "return_type": "V", "snippet": "    public V getSecond() {        return getValue();    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/util/Pair.java", "stars": "2", "class": {"name": "Pair", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean equals(Object o) {        if (this == o) return true;        if (o == null || getClass() != o.getClass()) return false;        Pair<?, ?> pair = (Pair<?, ?>) o;        return Objects.equals(key, pair.key) &&                Objects.equals(value, pair.value);    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/util/Pair.java", "stars": "2", "class": {"name": "Pair", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int hashCode() {        return Objects.hash(key, value);    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/util/Pair.java", "stars": "2", "class": {"name": "Pair", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"Pair{\" +                \"key=\" + key +                \", value=\" + value +                '}';    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/util/Pair.java", "stars": "2", "class": {"name": "Pair", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "create", "params": ["MethodDescriptor", "Channel"], "throws": null, "modifiers": ["public", "static"], "return_type": "DynamicGrpcClient", "snippet": "    public static DynamicGrpcClient create(MethodDescriptor protoMethod, Channel channel) {        return new DynamicGrpcClient(protoMethod, channel);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/grpc/DynamicGrpcClient.java", "stars": "3", "class": {"name": "DynamicGrpcClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "blockingUnaryCall", "params": ["ImmutableList<DynamicMessage>", "CallOptions"], "throws": null, "modifiers": ["public"], "return_type": "DynamicMessage", "snippet": "    public DynamicMessage blockingUnaryCall(            ImmutableList<DynamicMessage> requests,            CallOptions callOptions) {        return ClientCalls.blockingUnaryCall(                this.channel, createGrpcMethodDescriptor(), callOptions, requests.get(0)        );    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/grpc/DynamicGrpcClient.java", "stars": "3", "class": {"name": "DynamicGrpcClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createGrpcMethodDescriptor", "params": [], "throws": null, "modifiers": ["private"], "return_type": "io", "snippet": "    private io.grpc.MethodDescriptor<DynamicMessage, DynamicMessage> createGrpcMethodDescriptor() {        return io.grpc.MethodDescriptor.<DynamicMessage, DynamicMessage>create(                getMethodType(),                getFullMethodName(),                new DynamicMessageMarshaller(protoMethodDescriptor.getInputType()),                new DynamicMessageMarshaller(protoMethodDescriptor.getOutputType()));    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/grpc/DynamicGrpcClient.java", "stars": "3", "class": {"name": "DynamicGrpcClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFullMethodName", "params": [], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String getFullMethodName() {        String serviceName = protoMethodDescriptor.getService().getFullName();        String methodName = protoMethodDescriptor.getName();        return io.grpc.MethodDescriptor.generateFullMethodName(serviceName, methodName);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/grpc/DynamicGrpcClient.java", "stars": "3", "class": {"name": "DynamicGrpcClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMethodType", "params": [], "throws": null, "modifiers": ["private"], "return_type": "MethodType", "snippet": "    private MethodType getMethodType() {        boolean clientStreaming = protoMethodDescriptor.toProto().getClientStreaming();        boolean serverStreaming = protoMethodDescriptor.toProto().getServerStreaming();        if (!clientStreaming && !serverStreaming) {            return MethodType.UNARY;        } else if (!clientStreaming && serverStreaming) {            return MethodType.SERVER_STREAMING;        } else if (clientStreaming && !serverStreaming) {            return MethodType.CLIENT_STREAMING;        }        return MethodType.BIDI_STREAMING;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/grpc/DynamicGrpcClient.java", "stars": "3", "class": {"name": "DynamicGrpcClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGroupid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getGroupid() {        return groupid;    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/bean/Group.java", "stars": "2", "class": {"name": "Group", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setGroupid", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGroupid(String groupid) {        this.groupid = groupid;    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/bean/Group.java", "stars": "2", "class": {"name": "Group", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGroupName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getGroupName() {        return groupName;    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/bean/Group.java", "stars": "2", "class": {"name": "Group", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setGroupName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGroupName(String groupName) {        this.groupName = groupName;    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/bean/Group.java", "stars": "2", "class": {"name": "Group", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGroupMasterQQ", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getGroupMasterQQ() {        return groupMasterQQ;    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/bean/Group.java", "stars": "2", "class": {"name": "Group", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setGroupMasterQQ", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGroupMasterQQ(String groupMasterQQ) {        this.groupMasterQQ = groupMasterQQ;    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/bean/Group.java", "stars": "2", "class": {"name": "Group", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCreateDate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getCreateDate() {        return createDate;    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/bean/Group.java", "stars": "2", "class": {"name": "Group", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCreateDate", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCreateDate(String createDate) {        this.createDate = createDate;    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/bean/Group.java", "stars": "2", "class": {"name": "Group", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"Group{\" +                \"id=\" + id +                \", groupid='\" + groupid + '\\'' +                \", groupName='\" + groupName + '\\'' +                \", groupMasterQQ='\" + groupMasterQQ + '\\'' +                \", createDate='\" + createDate + '\\'' +                '}';    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/DB/bean/Group.java", "stars": "2", "class": {"name": "Group", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "restPage", "params": ["List<T>"], "throws": null, "modifiers": ["public", "static"], "return_type": "CommonPage<T>", "snippet": "    public static <T> CommonPage<T> restPage(List<T> list) {        CommonPage<T> result = new CommonPage<T>();        PageInfo<T> pageInfo = new PageInfo<T>(list);        result.setTotalPage(pageInfo.getPages());        result.setPageNum(pageInfo.getPageNum());        result.setPageSize(pageInfo.getPageSize());        result.setTotal(pageInfo.getTotal());        result.setList(pageInfo.getList());        return result;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/api/CommonPage.java", "stars": "2", "class": {"name": "CommonPage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPageNum", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getPageNum() {        return pageNum;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/api/CommonPage.java", "stars": "2", "class": {"name": "CommonPage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPageNum", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPageNum(Integer pageNum) {        this.pageNum = pageNum;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/api/CommonPage.java", "stars": "2", "class": {"name": "CommonPage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPageSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getPageSize() {        return pageSize;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/api/CommonPage.java", "stars": "2", "class": {"name": "CommonPage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPageSize", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPageSize(Integer pageSize) {        this.pageSize = pageSize;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/api/CommonPage.java", "stars": "2", "class": {"name": "CommonPage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTotalPage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getTotalPage() {        return totalPage;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/api/CommonPage.java", "stars": "2", "class": {"name": "CommonPage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTotalPage", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTotalPage(Integer totalPage) {        this.totalPage = totalPage;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/api/CommonPage.java", "stars": "2", "class": {"name": "CommonPage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getList", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<T>", "snippet": "    public List<T> getList() {        return list;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/api/CommonPage.java", "stars": "2", "class": {"name": "CommonPage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setList", "params": ["List<T>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setList(List<T> list) {        this.list = list;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/api/CommonPage.java", "stars": "2", "class": {"name": "CommonPage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTotal", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getTotal() {        return total;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/api/CommonPage.java", "stars": "2", "class": {"name": "CommonPage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTotal", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTotal(Long total) {        this.total = total;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/api/CommonPage.java", "stars": "2", "class": {"name": "CommonPage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "processMessage", "params": ["MessageDto", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void processMessage(MessageDto messageDto, String sendFrom) {        switch (messageDto.getMessageType()) {            case UPDATE_TANK_CONTROL:                processTankControl(messageDto, sendFrom);                break;            case UPDATE_TANK_FIRE:                processTankFire(sendFrom);                break;            default:                break;        }    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/stage/StageMenu.java", "stars": "2", "class": {"name": "StageMenu", "extends": "BaseStage", "implements": null, "modifiers": ["public"]}}, {"method_name": "processTankFire", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void processTankFire(String sendFrom) {        if (!tankMap.containsKey(sendFrom)) {            return;        }        TankBo tankBo = tankMap.get(sendFrom);        AmmoBo ammo = tankBo.fire();        if (ammo == null) {            return;        }        ammoBoList.add(ammo);        sendRoomMessage(Collections.singletonList(ItemDto.convert(ammo)), MessageType.AMMO);    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/stage/StageMenu.java", "stars": "2", "class": {"name": "StageMenu", "extends": "BaseStage", "implements": null, "modifiers": ["public"]}}, {"method_name": "update", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void update() {        for (Map.Entry<String, TankBo> kv : tankMap.entrySet()) {            TankBo tankBo = kv.getValue();            if (tankBo.getActionType() == ActionType.RUN) {                double tankSpeed = tankBo.getType().getSpeed();                switch (tankBo.getOrientationType()) {                    case UP:                        tankBo.setY(tankBo.getY() - tankSpeed);                        break;                    case DOWN:                        tankBo.setY(tankBo.getY() + tankSpeed);                        break;                    case LEFT:                        tankBo.setX(tankBo.getX() - tankSpeed);                        break;                    case RIGHT:                        tankBo.setX(tankBo.getX() + tankSpeed);                        break;                    default:                        break;                }            }        }        //\u66f4\u65b0\u5b50\u5f39\u8bbe\u5b9a        for (int i = 0; i < ammoBoList.size(); ++i) {            AmmoBo ammo = ammoBoList.get(i);            if (ammo.getLifeTime() == 0) {                ammoBoList.remove(i);                --i;                if (tankMap.containsKey(ammo.getTankId())) {                    tankMap.get(ammo.getTankId()).addAmmoCount();                }                sendRoomMessage(ItemDto.convert(ammo), MessageType.REMOVE_AMMO);                continue;            }            ammo.setLifeTime(ammo.getLifeTime() - 1);            switch (ammo.getOrientationType()) {                case UP:                    ammo.setY(ammo.getY() - ammo.getSpeed());                    break;                case DOWN:                    ammo.setY(ammo.getY() + ammo.getSpeed());                    break;                case LEFT:                    ammo.setX(ammo.getX() - ammo.getSpeed());                    break;                case RIGHT:                    ammo.setX(ammo.getX() + ammo.getSpeed());                    break;                default:                    break;            }        }    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/stage/StageMenu.java", "stars": "2", "class": {"name": "StageMenu", "extends": "BaseStage", "implements": null, "modifiers": ["public"]}}, {"method_name": "remove", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void remove(String username) {        removeTankFromTankId(username);        messageService.sendMessage(new MessageDto(getUserList(), MessageType.USERS, getUserList()));    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/stage/StageMenu.java", "stars": "2", "class": {"name": "StageMenu", "extends": "BaseStage", "implements": null, "modifiers": ["public"]}}, {"method_name": "getUserList", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> getUserList() {        List<String> users = new ArrayList<>();        for (Map.Entry<String, TankBo> kv : tankMap.entrySet()) {            users.add(kv.getKey());        }        return users;    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/stage/StageMenu.java", "stars": "2", "class": {"name": "StageMenu", "extends": "BaseStage", "implements": null, "modifiers": ["public"]}}, {"method_name": "addTank", "params": ["MessageDto", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addTank(MessageDto messageDto, String sendFrom) {        ItemDto tankDto = ObjectUtil.readValue(messageDto.getMessage(), ItemDto.class);        if (tankDto == null) {            return;        }        tankDto.setId(sendFrom);        tankDto.setTypeId(MENU_DEFAULT_TYPE);        if (tankMap.containsKey(tankDto.getId())) {            //\u5355\u72ec\u53d1\u9001\u540c\u6b65\u6d88\u606f            messageService.sendMessage(new MessageDto(getUserList(), MessageType.USERS, sendFrom));            messageService.sendMessage(new MessageDto(getTankList(), MessageType.TANKS, sendFrom));            return;        }        TankBo tankBo = TankBo.convert(tankDto);        tankMap.put(tankBo.getTankId(), tankBo);        //\u6536\u5230\u5355\u4f4d\uff0c\u5373\u5c06\u5411\u6240\u6709\u4eba\u540c\u6b65\u5355\u4f4d\u4fe1\u606f        messageService.sendMessage(new MessageDto(getUserList(), MessageType.USERS, getUserList()));        MessageDto sendBack = new MessageDto(getTankList(), MessageType.TANKS, getUserList());        messageService.sendMessage(sendBack);        messageService.sendReady(sendFrom);    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/stage/StageMenu.java", "stars": "2", "class": {"name": "StageMenu", "extends": "BaseStage", "implements": null, "modifiers": ["public"]}}, {"method_name": "getTankList", "params": [], "throws": null, "modifiers": ["private"], "return_type": "List<ItemDto>", "snippet": "    private List<ItemDto> getTankList() {        List<ItemDto> tankDtoList = new ArrayList<>();        for (Map.Entry<String, TankBo> kv : tankMap.entrySet()) {            tankDtoList.add(ItemDto.convert(kv.getValue()));        }        return tankDtoList;    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/stage/StageMenu.java", "stars": "2", "class": {"name": "StageMenu", "extends": "BaseStage", "implements": null, "modifiers": ["public"]}}, {"method_name": "processTankControl", "params": ["MessageDto", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void processTankControl(MessageDto messageDto, String sendFrom) {        ItemDto request = ObjectUtil.readValue(messageDto.getMessage(), ItemDto.class);        if (request == null) {            return;        }        request.setId(sendFrom);        TankBo updateBo = updateTankControl(request);        if (updateBo == null) {            log.warn(\"can not update tank:{}, ignore it...\", sendFrom);            return;        }        ItemDto response = ItemDto.convert(updateBo);        sendRoomMessage(Collections.singletonList(response), MessageType.TANKS);    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/stage/StageMenu.java", "stars": "2", "class": {"name": "StageMenu", "extends": "BaseStage", "implements": null, "modifiers": ["public"]}}, {"method_name": "updateTankControl", "params": ["ItemDto"], "throws": null, "modifiers": ["private"], "return_type": "TankBo", "snippet": "    private TankBo updateTankControl(ItemDto tankDto) {        if (!tankMap.containsKey(tankDto.getId())) {            return null;        }        TankBo tankBo = tankMap.get(tankDto.getId());        //\u72b6\u6001\u53ea\u540c\u6b65\u671d\u5411\u548c\u79fb\u52a8\u547d\u4ee4        OrientationType orientationType = OrientationType.convert(tankDto.getOrientation());        if (orientationType != OrientationType.UNKNOWN) {            tankBo.setOrientationType(orientationType);        }        ActionType actionType = ActionType.convert(tankDto.getAction());        if (actionType != ActionType.UNKNOWN) {            tankBo.setActionType(actionType);        }        return tankBo;    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/stage/StageMenu.java", "stars": "2", "class": {"name": "StageMenu", "extends": "BaseStage", "implements": null, "modifiers": ["public"]}}, {"method_name": "createId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Id<A>", "snippet": "    public <A> Id<A> createId() {        return new Id<>(argNumber++);    }", "url": "https://raw.githubusercontent.com/sstewartgallus/jsystemf/master/src/com/sstewartgallus/term/IdGen.java", "stars": "5", "class": {"name": "IdGen", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isDoubleClick", "params": [], "throws": null, "modifiers": ["synchronized", "public", "static"], "return_type": "boolean", "snippet": "    public synchronized static boolean isDoubleClick() {        long currentTime = System.currentTimeMillis();        boolean isClick;        if (currentTime - lastClickTime > SPACE_TIME) {            isClick = false;        } else {            isClick = true;        }        lastClickTime = currentTime;        return isClick;    }", "url": "https://raw.githubusercontent.com/he303954106/AOP_Demo/master/app/src/main/java/com/netease/aop/login/NoDoubleClickUtils.java", "stars": "2", "class": {"name": "NoDoubleClickUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.DECORATIONS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/CharredNetherBrickFenceBlock.java", "stars": "2", "class": {"name": "CharredNetherBrickFenceBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "clientLoad", "params": ["FMLClientSetupEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clientLoad(FMLClientSetupEvent event) {\t\tRenderTypeLookup.setRenderLayer(block, RenderType.getCutout());\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/CharredNetherBrickFenceBlock.java", "stars": "2", "class": {"name": "CharredNetherBrickFenceBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "func_220111_a", "params": ["BlockState", "boolean", "Direction"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean func_220111_a(BlockState state, boolean checkattach, Direction face) {\t\t\tboolean flag = state.getBlock() instanceof FenceBlock && state.getMaterial() == this.material;\t\t\tboolean flag1 = state.getBlock() instanceof FenceGateBlock && FenceGateBlock.isParallel(state, face);\t\t\treturn !cannotAttach(state.getBlock()) && checkattach || flag || flag1;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/CharredNetherBrickFenceBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "FenceBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isNormalCube", "params": ["BlockState", "IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean isNormalCube(BlockState state, IBlockReader worldIn, BlockPos pos) {\t\t\treturn false;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/CharredNetherBrickFenceBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "FenceBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "propagatesSkylightDown", "params": ["BlockState", "IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean propagatesSkylightDown(BlockState state, IBlockReader reader, BlockPos pos) {\t\t\treturn true;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/CharredNetherBrickFenceBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "FenceBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 0));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/CharredNetherBrickFenceBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "FenceBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getAnswer", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "String", "snippet": "    public String getAnswer(HttpServletRequest request, HttpServletResponse response) throws Exception {        request.setCharacterEncoding(\"UTF-8\");        response.setCharacterEncoding(\"UTF-8\");        Map<String, String> parseXml = parseXml(request);        String msgType = parseXml.get(\"MsgType\");        String content = parseXml.get(\"Content\");        String fromUserName = parseXml.get(\"FromUserName\");        String toUserName = parseXml.get(\"ToUserName\");        System.out.println(msgType);        System.out.println(content);        System.out.println(fromUserName);        System.out.println(toUserName);        if(msgType.equals(\"text\")) {            JSONObject answer = questionService.getAnswer(content);            String back = WeChatUtils.sendTextMsg(parseXml, \"\u9898\u76ee: \\r\\n\" + answer.getString(\"question\") + \"\\r\\n\" + \"\u7b54\u6848: \\r\\n\" + answer.getString(\"content\"));            System.out.println(back);            return back;        }else if(msgType.equals(\"event\")){            String back = WeChatUtils.sendTextMsg(parseXml, \"\u611f\u8c22\u5173\u6ce8\");            System.out.println(back);            return back;        }else{            return WeChatUtils.sendTextMsg(parseXml,\"\u4e0d\u77e5\u9053\u4f60\u8981\u5e72\u4ec0\u4e48\");        }    }", "url": "https://raw.githubusercontent.com/tianhan1998/WechatMoocQuestion/master/src/main/java/cn/th/controller/MoocController.java", "stars": "2", "class": {"name": "MoocController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseXml", "params": ["HttpServletRequest"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "Map<String,String>", "snippet": "    public static Map<String, String> parseXml(HttpServletRequest request) throws Exception {        Map<String, String> map = new HashMap<String, String>();        InputStream inputStream = request.getInputStream();        SAXReader reader = new SAXReader();        Document document = reader.read(inputStream);        Element root = document.getRootElement();        List<Element> elementList = root.elements();        for (Element e : elementList) {            map.put(e.getName(), e.getText());        }        inputStream.close();        return map;    }", "url": "https://raw.githubusercontent.com/tianhan1998/WechatMoocQuestion/master/src/main/java/cn/th/controller/MoocController.java", "stars": "2", "class": {"name": "MoocController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "test", "params": ["String", "String", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String test(@RequestParam(\"signature\") String signature,                       @RequestParam(\"timestamp\") String timestamp,                       @RequestParam(\"nonce\") String nonce,                       @RequestParam(\"echostr\") String echostr) {        //\u6392\u5e8f        String sortString = sort(TOKEN, timestamp, nonce);        //\u52a0\u5bc6        String myString = sha1(sortString);        //\u6821\u9a8c        if (myString != null && !\"\".equals(myString) && myString.equals(signature)) {            System.out.println(\"\u7b7e\u540d\u6821\u9a8c\u901a\u8fc7\");            //\u5982\u679c\u68c0\u9a8c\u6210\u529f\u539f\u6837\u8fd4\u56deechostr\uff0c\u5fae\u4fe1\u670d\u52a1\u5668\u63a5\u6536\u5230\u6b64\u8f93\u51fa\uff0c\u624d\u4f1a\u786e\u8ba4\u68c0\u9a8c\u5b8c\u6210\u3002            return echostr;        } else {            System.out.println(\"\u7b7e\u540d\u6821\u9a8c\u5931\u8d25\");            return \"\";        }    }", "url": "https://raw.githubusercontent.com/tianhan1998/WechatMoocQuestion/master/src/main/java/cn/th/controller/MoocController.java", "stars": "2", "class": {"name": "MoocController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sort", "params": ["String", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String sort(String token, String timestamp, String nonce) {        String[] strArray = {token, timestamp, nonce};        Arrays.sort(strArray);        StringBuilder sb = new StringBuilder();        for (String str : strArray) {            sb.append(str);        }        return sb.toString();    }", "url": "https://raw.githubusercontent.com/tianhan1998/WechatMoocQuestion/master/src/main/java/cn/th/controller/MoocController.java", "stars": "2", "class": {"name": "MoocController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sha1", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String sha1(String str) {        try {            MessageDigest digest = MessageDigest.getInstance(\"SHA-1\");            digest.update(str.getBytes());            byte[] messageDigest = digest.digest();            // Create Hex String            StringBuilder hexString = new StringBuilder();            // \u5b57\u8282\u6570\u7ec4\u8f6c\u6362\u4e3a \u5341\u516d\u8fdb\u5236 \u6570            for (byte b : messageDigest) {                String shaHex = Integer.toHexString(b & 0xFF);                if (shaHex.length() < 2) {                    hexString.append(0);                }                hexString.append(shaHex);            }            return hexString.toString();        } catch (NoSuchAlgorithmException e) {            e.printStackTrace();        }        return \"\";    }", "url": "https://raw.githubusercontent.com/tianhan1998/WechatMoocQuestion/master/src/main/java/cn/th/controller/MoocController.java", "stars": "2", "class": {"name": "MoocController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onAttachedToWindow", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onAttachedToWindow() {        super.onAttachedToWindow();        animator.start();    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson4/Practice13CameraRotateHittingFaceView.java", "stars": "2", "class": {"name": "Practice13CameraRotateHittingFaceView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDetachedFromWindow", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDetachedFromWindow() {        super.onDetachedFromWindow();        animator.end();    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson4/Practice13CameraRotateHittingFaceView.java", "stars": "2", "class": {"name": "Practice13CameraRotateHittingFaceView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "setDegree", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDegree(int degree) {        this.degree = degree;        invalidate();    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson4/Practice13CameraRotateHittingFaceView.java", "stars": "2", "class": {"name": "Practice13CameraRotateHittingFaceView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        int bitmapWidth = bitmap.getWidth();        int bitmapHeight = bitmap.getHeight();        int centerX = point.x + bitmapWidth / 2;        int centerY = point.y + bitmapHeight / 2;        camera.save();        matrix.reset();        camera.rotateX(degree);        camera.getMatrix(matrix);        camera.restore();        matrix.preTranslate(-centerX, -centerY);        matrix.postTranslate(centerX, centerY);        canvas.save();        canvas.concat(matrix);        canvas.drawBitmap(bitmap, point.x, point.y, paint);        canvas.restore();    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson4/Practice13CameraRotateHittingFaceView.java", "stars": "2", "class": {"name": "Practice13CameraRotateHittingFaceView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "invoke", "params": ["Object", "Object"], "throws": ["IllegalAccessException"], "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object invoke(Object target, Object[] args) throws IllegalAccessException {    try {      field.set(target, args[0]);    } catch (IllegalAccessException e) {      if (Reflector.canControlMemberAccessible()) {        field.setAccessible(true);        field.set(target, args[0]);      } else {        throw e;      }    }    return null;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/invoker/SetFieldInvoker.java", "stars": "15", "class": {"name": "SetFieldInvoker", "extends": null, "implements": ["Invoker"], "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Class<?>", "snippet": "  public Class<?> getType() {    return field.getType();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/invoker/SetFieldInvoker.java", "stars": "15", "class": {"name": "SetFieldInvoker", "extends": null, "implements": ["Invoker"], "modifiers": ["public"]}}, {"method_name": "hi", "params": ["String", "Context", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void hi (String text,Context context,int lenght) {        Toast toast = new Toast(context);        toast.setDuration(Toast.LENGTH_LONG);        LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);        View view = inflater.inflate(R.layout.hitoast, null);        TextView tv = (TextView) view.findViewById(R.id.txtvw);        tv.setText(text);        customtypeface(tv,context);        toast.setView(view);        toast.show();    }", "url": "https://raw.githubusercontent.com/hamzarfaoui/hitoast1/master/hitoast/src/main/java/hamza/arfaoui/com/hitoast/HiToast.java", "stars": "2", "class": {"name": "HiToast", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "danger", "params": ["String", "Context", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void danger (String text,Context context,int lenght) {        Toast toast = new Toast(context);        toast.setDuration(Toast.LENGTH_LONG);        LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);        View view = inflater.inflate(R.layout.dangerlayout, null);        TextView tv = (TextView) view.findViewById(R.id.txtdanger);        tv.setText(text);        customtypeface(tv,context);        toast.setView(view);        toast.show();    }", "url": "https://raw.githubusercontent.com/hamzarfaoui/hitoast1/master/hitoast/src/main/java/hamza/arfaoui/com/hitoast/HiToast.java", "stars": "2", "class": {"name": "HiToast", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "angry", "params": ["String", "Context", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void angry (String text,Context context,int lenght) {        Toast toast = new Toast(context);        toast.setDuration(Toast.LENGTH_LONG);        LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);        View view = inflater.inflate(R.layout.angrylayout, null);        TextView tv = (TextView) view.findViewById(R.id.txtangry);        tv.setText(text);        customtypeface(tv,context);        toast.setView(view);        toast.show();    }", "url": "https://raw.githubusercontent.com/hamzarfaoui/hitoast1/master/hitoast/src/main/java/hamza/arfaoui/com/hitoast/HiToast.java", "stars": "2", "class": {"name": "HiToast", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "love", "params": ["String", "Context", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void love (String text,Context context,int lenght) {        Toast toast = new Toast(context);        toast.setDuration(Toast.LENGTH_LONG);        LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);        View view = inflater.inflate(R.layout.lovelayout, null);        TextView tv = (TextView) view.findViewById(R.id.txtlove);        tv.setText(text);        customtypeface(tv,context);        toast.setView(view);        toast.show();    }", "url": "https://raw.githubusercontent.com/hamzarfaoui/hitoast1/master/hitoast/src/main/java/hamza/arfaoui/com/hitoast/HiToast.java", "stars": "2", "class": {"name": "HiToast", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "success", "params": ["String", "Context", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void success (String text,Context context,int lenght) {        Toast toast = new Toast(context);        toast.setDuration(Toast.LENGTH_LONG);        LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);        View view = inflater.inflate(R.layout.successlayout, null);        TextView tv = (TextView) view.findViewById(R.id.txtsuccess);        tv.setText(text);        customtypeface(tv,context);        toast.setView(view);        toast.show();    }", "url": "https://raw.githubusercontent.com/hamzarfaoui/hitoast1/master/hitoast/src/main/java/hamza/arfaoui/com/hitoast/HiToast.java", "stars": "2", "class": {"name": "HiToast", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "primary", "params": ["String", "Context", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void primary (String text,Context context,int lenght) {        Toast toast = new Toast(context);        toast.setDuration(Toast.LENGTH_LONG);        LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);        View view = inflater.inflate(R.layout.primarylayout, null);        TextView tv = (TextView) view.findViewById(R.id.txtprimary);        tv.setText(text);        customtypeface(tv,context);        toast.setView(view);        toast.show();    }", "url": "https://raw.githubusercontent.com/hamzarfaoui/hitoast1/master/hitoast/src/main/java/hamza/arfaoui/com/hitoast/HiToast.java", "stars": "2", "class": {"name": "HiToast", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "info", "params": ["String", "Context", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void info (String text,Context context,int lenght) {        Toast toast = new Toast(context);        toast.setDuration(Toast.LENGTH_LONG);        LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);        View view = inflater.inflate(R.layout.infolayout, null);        TextView tv = (TextView) view.findViewById(R.id.txtinfo);        tv.setText(text);        customtypeface(tv,context);        toast.setView(view);        toast.show();    }", "url": "https://raw.githubusercontent.com/hamzarfaoui/hitoast1/master/hitoast/src/main/java/hamza/arfaoui/com/hitoast/HiToast.java", "stars": "2", "class": {"name": "HiToast", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "customtypeface", "params": ["TextView", "Context"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void customtypeface(TextView tv,Context context)    {        Typeface custom_font = Typeface.createFromAsset(context.getAssets(), \"fonts/dbplus.otf\");        tv.setTypeface(custom_font);    }", "url": "https://raw.githubusercontent.com/hamzarfaoui/hitoast1/master/hitoast/src/main/java/hamza/arfaoui/com/hitoast/HiToast.java", "stars": "2", "class": {"name": "HiToast", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "invoke", "params": ["Object", "Method", "Object"], "throws": ["Throwable"], "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {    try {      if (Object.class.equals(method.getDeclaringClass())) {        return method.invoke(this, args);      } else {        return cachedInvoker(method).invoke(proxy, method, args, sqlSession);      }    } catch (Throwable t) {      throw ExceptionUtil.unwrapThrowable(t);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/binding/MapperProxy.java", "stars": "15", "class": {"name": "MapperProxy", "extends": null, "implements": ["InvocationHandler", "Serializable"], "modifiers": ["public"]}}, {"method_name": "cachedInvoker", "params": ["Method"], "throws": ["Throwable"], "modifiers": ["private"], "return_type": "MapperMethodInvoker", "snippet": "  private MapperMethodInvoker cachedInvoker(Method method) throws Throwable {    try {      return methodCache.computeIfAbsent(method, m -> {        if (m.isDefault()) {          try {            if (privateLookupInMethod == null) {              return new DefaultMethodInvoker(getMethodHandleJava8(method));            } else {              return new DefaultMethodInvoker(getMethodHandleJava9(method));            }          } catch (IllegalAccessException | InstantiationException | InvocationTargetException              | NoSuchMethodException e) {            throw new RuntimeException(e);          }        } else {          return new PlainMethodInvoker(new MapperMethod(mapperInterface, method, sqlSession.getConfiguration()));        }      });    } catch (RuntimeException re) {      Throwable cause = re.getCause();      throw cause == null ? re : cause;    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/binding/MapperProxy.java", "stars": "15", "class": {"name": "MapperProxy", "extends": null, "implements": ["InvocationHandler", "Serializable"], "modifiers": ["public"]}}, {"method_name": "getMethodHandleJava9", "params": ["Method"], "throws": ["NoSuchMethodException", "IllegalAccessException", "InvocationTargetException"], "modifiers": ["private"], "return_type": "MethodHandle", "snippet": "  private MethodHandle getMethodHandleJava9(Method method)      throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {    final Class<?> declaringClass = method.getDeclaringClass();    return ((Lookup) privateLookupInMethod.invoke(null, declaringClass, MethodHandles.lookup())).findSpecial(        declaringClass, method.getName(), MethodType.methodType(method.getReturnType(), method.getParameterTypes()),        declaringClass);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/binding/MapperProxy.java", "stars": "15", "class": {"name": "MapperProxy", "extends": null, "implements": ["InvocationHandler", "Serializable"], "modifiers": ["public"]}}, {"method_name": "getMethodHandleJava8", "params": ["Method"], "throws": ["IllegalAccessException", "InstantiationException", "InvocationTargetException"], "modifiers": ["private"], "return_type": "MethodHandle", "snippet": "  private MethodHandle getMethodHandleJava8(Method method)      throws IllegalAccessException, InstantiationException, InvocationTargetException {    final Class<?> declaringClass = method.getDeclaringClass();    return lookupConstructor.newInstance(declaringClass, ALLOWED_MODES).unreflectSpecial(method, declaringClass);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/binding/MapperProxy.java", "stars": "15", "class": {"name": "MapperProxy", "extends": null, "implements": ["InvocationHandler", "Serializable"], "modifiers": ["public"]}}, {"method_name": "invoke", "params": ["Object", "Method", "Object", "SqlSession"], "throws": ["Throwable"], "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object invoke(Object proxy, Method method, Object[] args, SqlSession sqlSession) throws Throwable {      return mapperMethod.execute(sqlSession, args);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/binding/MapperProxy.java", "stars": "15", "class": {"name": "PlainMethodInvoker", "extends": null, "implements": ["MapperMethodInvoker"], "modifiers": ["private", "static"]}}, {"method_name": "invoke", "params": ["Object", "Method", "Object", "SqlSession"], "throws": ["Throwable"], "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object invoke(Object proxy, Method method, Object[] args, SqlSession sqlSession) throws Throwable {      return methodHandle.bindTo(proxy).invokeWithArguments(args);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/binding/MapperProxy.java", "stars": "15", "class": {"name": "DefaultMethodInvoker", "extends": null, "implements": ["MapperMethodInvoker"], "modifiers": ["private", "static"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create a SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/cursor_simple/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),        \"org/apache/ibatis/submitted/cursor_simple/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/cursor_simple/CursorSimpleTest.java", "stars": "15", "class": {"name": "CursorSimpleTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetAllUser", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetAllUser() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Cursor<User> usersCursor = mapper.getAllUsers();      Assertions.assertFalse(usersCursor.isOpen());      // Cursor is just created, current index is -1      Assertions.assertEquals(-1, usersCursor.getCurrentIndex());      Iterator<User> iterator = usersCursor.iterator();      // Check if hasNext, fetching is started      Assertions.assertTrue(iterator.hasNext());      Assertions.assertTrue(usersCursor.isOpen());      Assertions.assertFalse(usersCursor.isConsumed());      // next() has not been called, index is still -1      Assertions.assertEquals(-1, usersCursor.getCurrentIndex());      User user = iterator.next();      Assertions.assertEquals(\"User1\", user.getName());      Assertions.assertEquals(0, usersCursor.getCurrentIndex());      user = iterator.next();      Assertions.assertEquals(\"User2\", user.getName());      Assertions.assertEquals(1, usersCursor.getCurrentIndex());      user = iterator.next();      Assertions.assertEquals(\"User3\", user.getName());      Assertions.assertEquals(2, usersCursor.getCurrentIndex());      user = iterator.next();      Assertions.assertEquals(\"User4\", user.getName());      Assertions.assertEquals(3, usersCursor.getCurrentIndex());      user = iterator.next();      Assertions.assertEquals(\"User5\", user.getName());      Assertions.assertEquals(4, usersCursor.getCurrentIndex());      // Check no more elements      Assertions.assertFalse(iterator.hasNext());      Assertions.assertFalse(usersCursor.isOpen());      Assertions.assertTrue(usersCursor.isConsumed());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/cursor_simple/CursorSimpleTest.java", "stars": "15", "class": {"name": "CursorSimpleTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testCursorClosedOnSessionClose", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testCursorClosedOnSessionClose() {    Cursor<User> usersCursor;    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      usersCursor = mapper.getAllUsers();      Assertions.assertFalse(usersCursor.isOpen());      Iterator<User> iterator = usersCursor.iterator();      // Check if hasNext, fetching is started      Assertions.assertTrue(iterator.hasNext());      Assertions.assertTrue(usersCursor.isOpen());      Assertions.assertFalse(usersCursor.isConsumed());      // Consume only the first result      User user = iterator.next();      Assertions.assertEquals(\"User1\", user.getName());      // Check there is still remaining elements      Assertions.assertTrue(iterator.hasNext());      Assertions.assertTrue(usersCursor.isOpen());      Assertions.assertFalse(usersCursor.isConsumed());    }    // The cursor was not fully consumed, but it should be close since we closed the session    Assertions.assertFalse(usersCursor.isOpen());    Assertions.assertFalse(usersCursor.isConsumed());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/cursor_simple/CursorSimpleTest.java", "stars": "15", "class": {"name": "CursorSimpleTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testCursorWithRowBound", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testCursorWithRowBound() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      // RowBound starting at offset 1 and limiting to 2 items      Cursor<User> usersCursor = sqlSession.selectCursor(\"getAllUsers\", null, new RowBounds(1, 3));      Iterator<User> iterator = usersCursor.iterator();      User user = iterator.next();      Assertions.assertEquals(\"User2\", user.getName());      Assertions.assertEquals(1, usersCursor.getCurrentIndex());      // Calling hasNext() before next()      Assertions.assertTrue(iterator.hasNext());      user = iterator.next();      Assertions.assertEquals(\"User3\", user.getName());      Assertions.assertEquals(2, usersCursor.getCurrentIndex());      // Calling next() without a previous hasNext() call      user = iterator.next();      Assertions.assertEquals(\"User4\", user.getName());      Assertions.assertEquals(3, usersCursor.getCurrentIndex());      Assertions.assertFalse(iterator.hasNext());      Assertions.assertFalse(usersCursor.isOpen());      Assertions.assertTrue(usersCursor.isConsumed());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/cursor_simple/CursorSimpleTest.java", "stars": "15", "class": {"name": "CursorSimpleTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testCursorIteratorNoSuchElementExceptionWithHasNext", "params": [], "throws": ["IOException"], "modifiers": [], "return_type": "void", "snippet": "  void testCursorIteratorNoSuchElementExceptionWithHasNext() throws IOException {    try (SqlSession sqlSession = sqlSessionFactory.openSession();        Cursor<User> usersCursor = sqlSession.selectCursor(\"getAllUsers\", null, new RowBounds(1, 1))) {      try {        Iterator<User> iterator = usersCursor.iterator();        User user = iterator.next();        Assertions.assertEquals(\"User2\", user.getName());        Assertions.assertEquals(1, usersCursor.getCurrentIndex());        Assertions.assertFalse(iterator.hasNext());        iterator.next();        Assertions.fail(\"We should have failed since we call next() when hasNext() returned false\");      } catch (NoSuchElementException e) {        Assertions.assertFalse(usersCursor.isOpen());        Assertions.assertTrue(usersCursor.isConsumed());      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/cursor_simple/CursorSimpleTest.java", "stars": "15", "class": {"name": "CursorSimpleTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testCursorIteratorNoSuchElementExceptionNoHasNext", "params": [], "throws": ["IOException"], "modifiers": [], "return_type": "void", "snippet": "  void testCursorIteratorNoSuchElementExceptionNoHasNext() throws IOException {    try (SqlSession sqlSession = sqlSessionFactory.openSession();        Cursor<User> usersCursor = sqlSession.selectCursor(\"getAllUsers\", null, new RowBounds(1, 1))) {      try {        Iterator<User> iterator = usersCursor.iterator();        User user = iterator.next();        Assertions.assertEquals(\"User2\", user.getName());        Assertions.assertEquals(1, usersCursor.getCurrentIndex());        // Trying next() without hasNext()        iterator.next();        Assertions.fail(\"We should have failed since we call next() when is no more items\");      } catch (NoSuchElementException e) {        Assertions.assertFalse(usersCursor.isOpen());        Assertions.assertTrue(usersCursor.isConsumed());      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/cursor_simple/CursorSimpleTest.java", "stars": "15", "class": {"name": "CursorSimpleTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testCursorWithBadRowBound", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testCursorWithBadRowBound() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      // Trying to start at offset 10 (which does not exist, since there is only 4 items)      Cursor<User> usersCursor = sqlSession.selectCursor(\"getAllUsers\", null, new RowBounds(10, 2));      Iterator<User> iterator = usersCursor.iterator();      Assertions.assertFalse(iterator.hasNext());      Assertions.assertFalse(usersCursor.isOpen());      Assertions.assertTrue(usersCursor.isConsumed());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/cursor_simple/CursorSimpleTest.java", "stars": "15", "class": {"name": "CursorSimpleTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testCursorMultipleHasNextCall", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testCursorMultipleHasNextCall() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Cursor<User> usersCursor = mapper.getAllUsers();      Iterator<User> iterator = usersCursor.iterator();      Assertions.assertEquals(-1, usersCursor.getCurrentIndex());      User user = iterator.next();      Assertions.assertEquals(\"User1\", user.getName());      Assertions.assertEquals(0, usersCursor.getCurrentIndex());      Assertions.assertTrue(iterator.hasNext());      Assertions.assertTrue(iterator.hasNext());      Assertions.assertTrue(iterator.hasNext());      // assert that index has not changed after hasNext() call      Assertions.assertEquals(0, usersCursor.getCurrentIndex());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/cursor_simple/CursorSimpleTest.java", "stars": "15", "class": {"name": "CursorSimpleTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testCursorMultipleIteratorCall", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testCursorMultipleIteratorCall() {    Iterator<User> iterator2 = null;    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Cursor<User> usersCursor = mapper.getAllUsers();      Iterator<User> iterator = usersCursor.iterator();      User user = iterator.next();      Assertions.assertEquals(\"User1\", user.getName());      Assertions.assertEquals(0, usersCursor.getCurrentIndex());      iterator2 = usersCursor.iterator();      iterator2.hasNext();      Assertions.fail(\"We should have failed since calling iterator several times is not allowed\");    } catch (IllegalStateException e) {      Assertions.assertNull(iterator2, \"iterator2 should be null\");      return;    }    Assertions.fail(\"Should have returned earlier\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/cursor_simple/CursorSimpleTest.java", "stars": "15", "class": {"name": "CursorSimpleTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testCursorMultipleCloseCall", "params": [], "throws": ["IOException"], "modifiers": [], "return_type": "void", "snippet": "  void testCursorMultipleCloseCall() throws IOException {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Cursor<User> usersCursor = mapper.getAllUsers();      Assertions.assertFalse(usersCursor.isOpen());      Iterator<User> iterator = usersCursor.iterator();      // Check if hasNext, fetching is started      Assertions.assertTrue(iterator.hasNext());      Assertions.assertTrue(usersCursor.isOpen());      Assertions.assertFalse(usersCursor.isConsumed());      // Consume only the first result      User user = iterator.next();      Assertions.assertEquals(\"User1\", user.getName());      usersCursor.close();      // Check multiple close are no-op      usersCursor.close();      // hasNext now return false, since the cursor is closed      Assertions.assertFalse(iterator.hasNext());      Assertions.assertFalse(usersCursor.isOpen());      Assertions.assertFalse(usersCursor.isConsumed());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/cursor_simple/CursorSimpleTest.java", "stars": "15", "class": {"name": "CursorSimpleTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testCursorUsageAfterClose", "params": [], "throws": ["IOException"], "modifiers": [], "return_type": "void", "snippet": "  void testCursorUsageAfterClose() throws IOException {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Cursor<User> usersCursor = mapper.getAllUsers();      try {        Iterator<User> iterator = usersCursor.iterator();        User user = iterator.next();        Assertions.assertEquals(\"User1\", user.getName());        Assertions.assertEquals(0, usersCursor.getCurrentIndex());        user = iterator.next();        Assertions.assertEquals(\"User2\", user.getName());        Assertions.assertEquals(1, usersCursor.getCurrentIndex());        usersCursor.close();        // hasNext now return false, since the cursor is closed        Assertions.assertFalse(iterator.hasNext());        Assertions.assertFalse(usersCursor.isOpen());        Assertions.assertFalse(usersCursor.isConsumed());        // trying next() will fail        iterator.next();        Assertions.fail(\"We should have failed with NoSuchElementException since Cursor is closed\");      } catch (NoSuchElementException e) {        // We had an exception and current index has not changed        Assertions.assertEquals(1, usersCursor.getCurrentIndex());        usersCursor.close();        return;      }    }    Assertions.fail(\"Should have returned earlier\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/cursor_simple/CursorSimpleTest.java", "stars": "15", "class": {"name": "CursorSimpleTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetAllUserUsingAnnotationBasedMapper", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetAllUserUsingAnnotationBasedMapper() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      sqlSession.getConfiguration().getMapperRegistry().addMapper(AnnotationMapper.class);      AnnotationMapper mapper = sqlSession.getMapper(AnnotationMapper.class);      Cursor<User> usersCursor = mapper.getAllUsers();      Assertions.assertFalse(usersCursor.isOpen());      Assertions.assertFalse(usersCursor.isConsumed());      Assertions.assertEquals(-1, usersCursor.getCurrentIndex());      List<User> userList = new ArrayList<>();      for (User user : usersCursor) {        userList.add(user);        Assertions.assertEquals(userList.size() - 1, usersCursor.getCurrentIndex());      }      Assertions.assertFalse(usersCursor.isOpen());      Assertions.assertTrue(usersCursor.isConsumed());      Assertions.assertEquals(4, usersCursor.getCurrentIndex());      Assertions.assertEquals(5, userList.size());      User user = userList.get(0);      Assertions.assertEquals(\"User1\", user.getName());      user = userList.get(1);      Assertions.assertEquals(\"User2\", user.getName());      user = userList.get(2);      Assertions.assertEquals(\"User3\", user.getName());      user = userList.get(3);      Assertions.assertEquals(\"User4\", user.getName());      user = userList.get(4);      Assertions.assertEquals(\"User5\", user.getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/cursor_simple/CursorSimpleTest.java", "stars": "15", "class": {"name": "CursorSimpleTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldThrowIllegalStateExceptionUsingIteratorOnSessionClosed", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldThrowIllegalStateExceptionUsingIteratorOnSessionClosed() {    Cursor<User> usersCursor;    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      usersCursor = sqlSession.getMapper(Mapper.class).getAllUsers();    }    try {      usersCursor.iterator();      Assertions.fail(\"Should throws the IllegalStateException when call the iterator method after session is closed.\");    } catch (IllegalStateException e) {      Assertions.assertEquals(\"A Cursor is already closed.\", e.getMessage());    }    // verify for checking order    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      usersCursor = sqlSession.getMapper(Mapper.class).getAllUsers();      usersCursor.iterator();    }    try {      usersCursor.iterator();      Assertions.fail(\"Should throws the IllegalStateException when call the iterator already.\");    } catch (IllegalStateException e) {      Assertions.assertEquals(\"Cannot open more than one iterator on a Cursor\", e.getMessage());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/cursor_simple/CursorSimpleTest.java", "stars": "15", "class": {"name": "CursorSimpleTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldNullItemNotStopIteration", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldNullItemNotStopIteration() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Cursor<User> cursor = mapper.getNullUsers(new RowBounds());      Iterator<User> iterator = cursor.iterator();      Assertions.assertFalse(cursor.isOpen());      // Cursor is just created, current index is -1      Assertions.assertEquals(-1, cursor.getCurrentIndex());      // Check if hasNext, fetching is started      Assertions.assertTrue(iterator.hasNext());      // Re-invoking hasNext() should not fetch the next row      Assertions.assertTrue(iterator.hasNext());      Assertions.assertTrue(cursor.isOpen());      Assertions.assertFalse(cursor.isConsumed());      // next() has not been called, index is still -1      Assertions.assertEquals(-1, cursor.getCurrentIndex());      User user;      user = iterator.next();      Assertions.assertNull(user);      Assertions.assertEquals(0, cursor.getCurrentIndex());      Assertions.assertTrue(iterator.hasNext());      user = iterator.next();      Assertions.assertEquals(\"Kate\", user.getName());      Assertions.assertEquals(1, cursor.getCurrentIndex());      Assertions.assertTrue(iterator.hasNext());      user = iterator.next();      Assertions.assertNull(user);      Assertions.assertEquals(2, cursor.getCurrentIndex());      Assertions.assertTrue(iterator.hasNext());      user = iterator.next();      Assertions.assertNull(user);      Assertions.assertEquals(3, cursor.getCurrentIndex());      // Check no more elements      Assertions.assertFalse(iterator.hasNext());      Assertions.assertFalse(cursor.isOpen());      Assertions.assertTrue(cursor.isConsumed());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/cursor_simple/CursorSimpleTest.java", "stars": "15", "class": {"name": "CursorSimpleTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldRowBoundsCountNullItem", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldRowBoundsCountNullItem() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Cursor<User> cursor = mapper.getNullUsers(new RowBounds(1, 2));      Iterator<User> iterator = cursor.iterator();      Assertions.assertFalse(cursor.isOpen());      // Check if hasNext, fetching is started      Assertions.assertTrue(iterator.hasNext());      // Re-invoking hasNext() should not fetch the next row      Assertions.assertTrue(iterator.hasNext());      Assertions.assertTrue(cursor.isOpen());      Assertions.assertFalse(cursor.isConsumed());      User user;      user = iterator.next();      Assertions.assertEquals(\"Kate\", user.getName());      Assertions.assertEquals(1, cursor.getCurrentIndex());      Assertions.assertTrue(iterator.hasNext());      user = iterator.next();      Assertions.assertNull(user);      Assertions.assertEquals(2, cursor.getCurrentIndex());      // Check no more elements      Assertions.assertFalse(iterator.hasNext());      Assertions.assertFalse(cursor.isOpen());      Assertions.assertTrue(cursor.isConsumed());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/cursor_simple/CursorSimpleTest.java", "stars": "15", "class": {"name": "CursorSimpleTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getResults", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Results", "snippet": "    public Results getResults() {        return results;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/DayNight.java", "stars": "1", "class": {"name": "DayNight", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setResults", "params": ["Results"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setResults(Results results) {        this.results = results;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/DayNight.java", "stars": "1", "class": {"name": "DayNight", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getStatus() {        return status;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/DayNight.java", "stars": "1", "class": {"name": "DayNight", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStatus", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStatus(String status) {        this.status = status;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/DayNight.java", "stars": "1", "class": {"name": "DayNight", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAdditionalProperties", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "    public Map<String, Object> getAdditionalProperties() {        return this.additionalProperties;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/DayNight.java", "stars": "1", "class": {"name": "DayNight", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAdditionalProperty", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAdditionalProperty(String name, Object value) {        this.additionalProperties.put(name, value);    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/DayNight.java", "stars": "1", "class": {"name": "DayNight", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"DayNight{\" +                \"results=\" + results +                \", status='\" + status + '\\'' +                \", additionalProperties=\" + additionalProperties +                '}';    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/DayNight.java", "stars": "1", "class": {"name": "DayNight", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getApi", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getApi() {        return \"user/register\";    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/request/RegisterApi.java", "stars": "1", "class": {"name": "RegisterApi", "extends": null, "implements": ["IRequestApi"], "modifiers": ["public"]}}, {"method_name": "setAccount", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "RegisterApi", "snippet": "    public RegisterApi setAccount(String account) {        this.account = account;        return this;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/request/RegisterApi.java", "stars": "1", "class": {"name": "RegisterApi", "extends": null, "implements": ["IRequestApi"], "modifiers": ["public"]}}, {"method_name": "setCode", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "RegisterApi", "snippet": "    public RegisterApi setCode(String code) {        this.code = code;        return this;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/request/RegisterApi.java", "stars": "1", "class": {"name": "RegisterApi", "extends": null, "implements": ["IRequestApi"], "modifiers": ["public"]}}, {"method_name": "setPwd", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "RegisterApi", "snippet": "    public RegisterApi setPwd(String pwd) {        this.pwd = pwd;        return this;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/request/RegisterApi.java", "stars": "1", "class": {"name": "RegisterApi", "extends": null, "implements": ["IRequestApi"], "modifiers": ["public"]}}, {"method_name": "setInviteCode", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "RegisterApi", "snippet": "    public RegisterApi setInviteCode(String inviteCode) {        this.inviteCode = inviteCode;        return this;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/request/RegisterApi.java", "stars": "1", "class": {"name": "RegisterApi", "extends": null, "implements": ["IRequestApi"], "modifiers": ["public"]}}, {"method_name": "setFrom", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "RegisterApi", "snippet": "    public RegisterApi setFrom(String from) {        this.from = from;        return this;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/request/RegisterApi.java", "stars": "1", "class": {"name": "RegisterApi", "extends": null, "implements": ["IRequestApi"], "modifiers": ["public"]}}, {"method_name": "setBeanFactory", "params": ["BeanFactory"], "throws": ["BeansException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void setBeanFactory(BeanFactory beanFactory) throws BeansException {        this.beanFactory = (ConfigurableListableBeanFactory) beanFactory;        this.etcdConfigService = beanFactory.getBean(EtcdConfigServiceImpl.BEAN_NAME, EtcdConfigServiceImpl.class);    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdValueAnnotationBeanPostProcessor.java", "stars": "4", "class": {"name": "EtcdValueAnnotationBeanPostProcessor", "extends": "InstantiationAwareBeanPostProcessorAdapter", "implements": ["MergedBeanDefinitionPostProcessor", "BeanFactoryAware", "EnvironmentAware"], "modifiers": ["public"]}}, {"method_name": "postProcessMergedBeanDefinition", "params": ["RootBeanDefinition", "Class<?>", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void postProcessMergedBeanDefinition(RootBeanDefinition beanDefinition, Class<?> beanType, String beanName) {        InjectionMetadata metadata = findInjectionMetadata(beanName, beanType, null);        metadata.checkConfigMembers(beanDefinition);    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdValueAnnotationBeanPostProcessor.java", "stars": "4", "class": {"name": "EtcdValueAnnotationBeanPostProcessor", "extends": "InstantiationAwareBeanPostProcessorAdapter", "implements": ["MergedBeanDefinitionPostProcessor", "BeanFactoryAware", "EnvironmentAware"], "modifiers": ["public"]}}, {"method_name": "postProcessProperties", "params": ["PropertyValues", "Object", "String"], "throws": ["BeansException"], "modifiers": ["public"], "return_type": "PropertyValues", "snippet": "    public PropertyValues postProcessProperties(PropertyValues pvs, Object bean, String beanName) throws BeansException {        InjectionMetadata metadata = findInjectionMetadata(beanName, bean.getClass(), pvs);        try {            metadata.inject(bean, beanName, pvs);        } catch (BeanCreationException ex) {            throw ex;        } catch (Throwable ex) {            throw new BeanCreationException(beanName, \"Injection of @EtcdValue dependencies is failed\", ex);        }        return pvs;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdValueAnnotationBeanPostProcessor.java", "stars": "4", "class": {"name": "EtcdValueAnnotationBeanPostProcessor", "extends": "InstantiationAwareBeanPostProcessorAdapter", "implements": ["MergedBeanDefinitionPostProcessor", "BeanFactoryAware", "EnvironmentAware"], "modifiers": ["public"]}}, {"method_name": "setEnvironment", "params": ["Environment"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEnvironment(Environment environment) {        this.environment = environment;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdValueAnnotationBeanPostProcessor.java", "stars": "4", "class": {"name": "EtcdValueAnnotationBeanPostProcessor", "extends": "InstantiationAwareBeanPostProcessorAdapter", "implements": ["MergedBeanDefinitionPostProcessor", "BeanFactoryAware", "EnvironmentAware"], "modifiers": ["public"]}}, {"method_name": "findInjectionMetadata", "params": ["String", "Class<?>", "PropertyValues"], "throws": null, "modifiers": ["private"], "return_type": "InjectionMetadata", "snippet": "    private InjectionMetadata findInjectionMetadata(String beanName, Class<?> clazz, PropertyValues pvs) {        // Fall back to class name as cache key, for backwards compatibility with custom callers.        String cacheKey = (StringUtils.hasLength(beanName) ? beanName : clazz.getName());        // Quick check on the concurrent map first, with minimal locking.        AnnotatedInjectionMetadata metadata = this.injectionMetadataCache.get(cacheKey);        if (InjectionMetadata.needsRefresh(metadata, clazz)) {            synchronized (this.injectionMetadataCache) {                metadata = this.injectionMetadataCache.get(cacheKey);                if (InjectionMetadata.needsRefresh(metadata, clazz)) {                    if (metadata != null) {                        metadata.clear(pvs);                    }                    try {                        metadata = buildAnnotatedMetadata(clazz);                        this.injectionMetadataCache.put(cacheKey, metadata);                    } catch (NoClassDefFoundError err) {                        throw new IllegalStateException(\"Failed to introspect object class [\" + clazz.getName() +                                \"] for annotation metadata: could not find class that it depends on\", err);                    }                }            }        }        return metadata;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdValueAnnotationBeanPostProcessor.java", "stars": "4", "class": {"name": "EtcdValueAnnotationBeanPostProcessor", "extends": "InstantiationAwareBeanPostProcessorAdapter", "implements": ["MergedBeanDefinitionPostProcessor", "BeanFactoryAware", "EnvironmentAware"], "modifiers": ["public"]}}, {"method_name": "saveAutoRefreshed", "params": ["String", "Object", "String", "Method", "Field"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void saveAutoRefreshed(String key, Object bean, String beanName, Method method, Field field) {        String value = beanFactory.resolveEmbeddedValue(key);        //\u63d0\u524d\u89e3\u6790key        key = resolvePlaceholder(key);        EtcdValueTarget etcdValueTarget = new EtcdValueTarget(bean, beanName, method, field, value);        List<EtcdValueTarget> valueList = placeholderEtcdValueTargetMap.get(key);        if (valueList == null) {            valueList = new ArrayList<>();        }        valueList.add(etcdValueTarget);        placeholderEtcdValueTargetMap.put(key, valueList);        if (addFlag.compareAndSet(false, true)) {            etcdConfigService.addAllListener(new UpdateReferenceListener() {                @Override                public void receiveConfigInfo(String configInfo) {                    refresh();                }            });            LOG.info(\"add updateReferenceListener for @EtcdValue\");        }    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdValueAnnotationBeanPostProcessor.java", "stars": "4", "class": {"name": "EtcdValueAnnotationBeanPostProcessor", "extends": "InstantiationAwareBeanPostProcessorAdapter", "implements": ["MergedBeanDefinitionPostProcessor", "BeanFactoryAware", "EnvironmentAware"], "modifiers": ["public"]}}, {"method_name": "refresh", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void refresh() {        try {            LOG.info(\"refresh for @EtcdValue\");            for (Map.Entry<String, List<EtcdValueTarget>> entry : placeholderEtcdValueTargetMap.entrySet()) {                /**                 * \u82e5key\u4e0d\u63d0\u524d\u89e3\u6790                 * \u4e0d\u53ef\u7528environment.resolvePlaceholders()\u65b9\u6cd5\uff0c\u5f53key\u88ab\u5220\u9664\u65f6\uff0c\u51fd\u6570\u8fd4\u56dekey\u672c\u8eab\uff0c\u5bfc\u81f4\u53d6\u5230\u9519\u8bef\u7684value                 * \u4e0d\u53ef\u7528beanFactory.resolveEmbeddedValue()\u65b9\u6cd5\uff0c\u5f53key\u88ab\u5220\u9664\u65f6\uff0c\u4f1a\u62a5\u9519                 *                 * \u6240\u4ee5\uff0c\u91c7\u7528\u63d0\u524d\u89e3\u6790key\uff0cenvironment\u67e5\u627e\u7684\u65b9\u5f0f\uff0c\u8fd9\u6837\u5f53key\u88ab\u5220\u9664\u65f6\uff0c\u4e0d\u4f1a\u5237\u65b0\u539f\u5c5e\u6027                 */                String newValue = environment.getProperty(entry.getKey());                if (newValue == null) {                    //\u914d\u7f6ekey\u88ab\u5220\u9664                    LOG.warn(\"config key is deleted,ignore refresh. key={}\", entry.getKey());                    continue;                }                List<EtcdValueTarget> beanPropertyList = entry.getValue();                for (EtcdValueTarget target : beanPropertyList) {                    if (!target.getLastValue().equals(newValue)) {                        //\u4e0d\u76f8\u540c\u65f6\u624d\u5237\u65b0\uff0c\u4f18\u5316\u6027\u80fd                        target.setLastValue(newValue);                        if (target.getMethod() == null) {                            updateField(target, newValue);                        } else {                            updateMethod(target, newValue);                        }                    }                }            }        } catch (Exception e) {            LOG.error(\"\", e);        }    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdValueAnnotationBeanPostProcessor.java", "stars": "4", "class": {"name": "EtcdValueAnnotationBeanPostProcessor", "extends": "InstantiationAwareBeanPostProcessorAdapter", "implements": ["MergedBeanDefinitionPostProcessor", "BeanFactoryAware", "EnvironmentAware"], "modifiers": ["public"]}}, {"method_name": "updateField", "params": ["EtcdValueTarget", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void updateField(EtcdValueTarget etcdValueTarget, String propertyValue) {        Object bean = etcdValueTarget.bean;        Field field = etcdValueTarget.field;        try {            ReflectionUtils.makeAccessible(field);            field.set(bean, BeanTypeConvertUtil.convertIfNecessary(beanFactory, field, propertyValue));            LOG.info(\"updateField beanName={},field={}\", etcdValueTarget.getBeanName(), field.getName());        } catch (Throwable e) {            LOG.error(\"updateField\", e);        }    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdValueAnnotationBeanPostProcessor.java", "stars": "4", "class": {"name": "EtcdValueAnnotationBeanPostProcessor", "extends": "InstantiationAwareBeanPostProcessorAdapter", "implements": ["MergedBeanDefinitionPostProcessor", "BeanFactoryAware", "EnvironmentAware"], "modifiers": ["public"]}}, {"method_name": "updateMethod", "params": ["EtcdValueTarget", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void updateMethod(EtcdValueTarget etcdValueTarget, String propertyValue) {        Method method = etcdValueTarget.method;        ReflectionUtils.makeAccessible(method);        try {            method.invoke(etcdValueTarget.bean, BeanTypeConvertUtil.convertIfNecessary(beanFactory, method, propertyValue));            LOG.info(\"updateMethod beanName={},method={}\", etcdValueTarget.getBeanName(), method.getName());        } catch (Throwable e) {            LOG.error(\"updateMethod\", e);        }    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdValueAnnotationBeanPostProcessor.java", "stars": "4", "class": {"name": "EtcdValueAnnotationBeanPostProcessor", "extends": "InstantiationAwareBeanPostProcessorAdapter", "implements": ["MergedBeanDefinitionPostProcessor", "BeanFactoryAware", "EnvironmentAware"], "modifiers": ["public"]}}, {"method_name": "getInjectedObject", "params": ["EtcdValue", "Object", "String", "Class<?>", "InjectionMetadata"], "throws": null, "modifiers": ["private"], "return_type": "Object", "snippet": "    private Object getInjectedObject(EtcdValue annotation, Object bean, String beanName, Class<?> injectedType, InjectionMetadata.InjectedElement injectedElement) {        String annotationValue = annotation.value();        //\u67e5\u627e\u4e0d\u5230\uff0c\u4f1a\u62a5\u9519\uff0c\u542f\u52a8\u5931\u8d25        String value = beanFactory.resolveEmbeddedValue(annotationValue);        Member member = injectedElement.getMember();        if (member instanceof Field) {            return BeanTypeConvertUtil.convertIfNecessary(beanFactory, (Field) member, value);        }        if (member instanceof Method) {            return BeanTypeConvertUtil.convertIfNecessary(beanFactory, (Method) member, value);        }        return null;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdValueAnnotationBeanPostProcessor.java", "stars": "4", "class": {"name": "EtcdValueAnnotationBeanPostProcessor", "extends": "InstantiationAwareBeanPostProcessorAdapter", "implements": ["MergedBeanDefinitionPostProcessor", "BeanFactoryAware", "EnvironmentAware"], "modifiers": ["public"]}}, {"method_name": "combine", "params": ["Collection<T>"], "throws": null, "modifiers": ["private", "static"], "return_type": "Collection<T>", "snippet": "    private static <T> Collection<T> combine(Collection<? extends T>... elements) {        List<T> allElements = new ArrayList<T>();        for (Collection<? extends T> e : elements) {            allElements.addAll(e);        }        return allElements;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdValueAnnotationBeanPostProcessor.java", "stars": "4", "class": {"name": "EtcdValueAnnotationBeanPostProcessor", "extends": "InstantiationAwareBeanPostProcessorAdapter", "implements": ["MergedBeanDefinitionPostProcessor", "BeanFactoryAware", "EnvironmentAware"], "modifiers": ["public"]}}, {"method_name": "buildAnnotatedMetadata", "params": ["Class<?>"], "throws": null, "modifiers": ["private"], "return_type": "EtcdValueAnnotationBeanPostProcessor", "snippet": "    private EtcdValueAnnotationBeanPostProcessor.AnnotatedInjectionMetadata buildAnnotatedMetadata(final Class<?> beanClass) {        Collection<AnnotatedFieldElement> fieldElements = findAnnotatedFieldMetadata(beanClass);        Collection<AnnotatedMethodElement> methodElements = findAnnotatedMethodMetadata(beanClass);        return new EtcdValueAnnotationBeanPostProcessor.AnnotatedInjectionMetadata(beanClass, fieldElements, methodElements);    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdValueAnnotationBeanPostProcessor.java", "stars": "4", "class": {"name": "EtcdValueAnnotationBeanPostProcessor", "extends": "InstantiationAwareBeanPostProcessorAdapter", "implements": ["MergedBeanDefinitionPostProcessor", "BeanFactoryAware", "EnvironmentAware"], "modifiers": ["public"]}}, {"method_name": "findAnnotatedFieldMetadata", "params": ["Class<?>"], "throws": null, "modifiers": ["private"], "return_type": "List<AnnotatedFieldElement>", "snippet": "    private List<AnnotatedFieldElement> findAnnotatedFieldMetadata(final Class<?> beanClass) {        final List<AnnotatedFieldElement> elements = new LinkedList<AnnotatedFieldElement>();        ReflectionUtils.doWithFields(beanClass, new ReflectionUtils.FieldCallback() {            @Override            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {                EtcdValue annotation = getAnnotation(field, annotationType);                if (annotation != null) {                    if (Modifier.isStatic(field.getModifiers())) {                        if (LOG.isWarnEnabled()) {                            LOG.warn(\"@\" + annotationType.getName() + \" is not supported on static fields: \" + field);                        }                        return;                    }                    elements.add(new EtcdValueAnnotationBeanPostProcessor.AnnotatedFieldElement(field, annotation));                }            }        });        return elements;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdValueAnnotationBeanPostProcessor.java", "stars": "4", "class": {"name": "EtcdValueAnnotationBeanPostProcessor", "extends": "InstantiationAwareBeanPostProcessorAdapter", "implements": ["MergedBeanDefinitionPostProcessor", "BeanFactoryAware", "EnvironmentAware"], "modifiers": ["public"]}}, {"method_name": "findAnnotatedMethodMetadata", "params": ["Class<?>"], "throws": null, "modifiers": ["private"], "return_type": "List<AnnotatedMethodElement>", "snippet": "    private List<AnnotatedMethodElement> findAnnotatedMethodMetadata(final Class<?> beanClass) {        final List<AnnotatedMethodElement> elements = new LinkedList<AnnotatedMethodElement>();        ReflectionUtils.doWithMethods(beanClass, new ReflectionUtils.MethodCallback() {            @Override            public void doWith(Method method) throws IllegalArgumentException, IllegalAccessException {                Method bridgedMethod = findBridgedMethod(method);                if (!isVisibilityBridgeMethodPair(method, bridgedMethod)) {                    return;                }                EtcdValue annotation = findAnnotation(bridgedMethod, annotationType);                if (annotation != null && method.equals(ClassUtils.getMostSpecificMethod(method, beanClass))) {                    if (Modifier.isStatic(method.getModifiers())) {                        if (LOG.isWarnEnabled()) {                            LOG.warn(\"@\" + annotationType.getSimpleName() + \" annotation is not supported on static methods: \" + method);                        }                        return;                    }                    if (method.getParameterTypes().length == 0) {                        if (LOG.isWarnEnabled()) {                            LOG.warn(\"@\" + annotationType.getSimpleName() + \" annotation should only be used on methods with parameters: \" +                                    method);                        }                    }                    PropertyDescriptor pd = BeanUtils.findPropertyForMethod(bridgedMethod, beanClass);                    elements.add(new EtcdValueAnnotationBeanPostProcessor.AnnotatedMethodElement(method, pd, annotation));                }            }        });        return elements;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdValueAnnotationBeanPostProcessor.java", "stars": "4", "class": {"name": "EtcdValueAnnotationBeanPostProcessor", "extends": "InstantiationAwareBeanPostProcessorAdapter", "implements": ["MergedBeanDefinitionPostProcessor", "BeanFactoryAware", "EnvironmentAware"], "modifiers": ["public"]}}, {"method_name": "resolvePlaceholder", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String resolvePlaceholder(String placeholder) {        if (!placeholder.startsWith(PLACEHOLDER_PREFIX)) {            return null;        }        if (!placeholder.endsWith(PLACEHOLDER_SUFFIX)) {            return null;        }        if (placeholder.length() <= PLACEHOLDER_PREFIX.length()                + PLACEHOLDER_SUFFIX.length()) {            return null;        }        int beginIndex = PLACEHOLDER_PREFIX.length();        int endIndex = placeholder.length() - PLACEHOLDER_PREFIX.length() + 1;        placeholder = placeholder.substring(beginIndex, endIndex);        int separatorIndex = placeholder.indexOf(VALUE_SEPARATOR);        if (separatorIndex != -1) {            return placeholder.substring(0, separatorIndex);        }        return placeholder;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdValueAnnotationBeanPostProcessor.java", "stars": "4", "class": {"name": "EtcdValueAnnotationBeanPostProcessor", "extends": "InstantiationAwareBeanPostProcessorAdapter", "implements": ["MergedBeanDefinitionPostProcessor", "BeanFactoryAware", "EnvironmentAware"], "modifiers": ["public"]}}, {"method_name": "getFieldElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Collection<AnnotatedFieldElement>", "snippet": "        public Collection<AnnotatedFieldElement> getFieldElements() {            return fieldElements;        }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdValueAnnotationBeanPostProcessor.java", "stars": "4", "class": {"name": "AnnotatedInjectionMetadata", "extends": "InjectionMetadata", "implements": null, "modifiers": ["private"]}}, {"method_name": "getMethodElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Collection<AnnotatedMethodElement>", "snippet": "        public Collection<AnnotatedMethodElement> getMethodElements() {            return methodElements;        }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdValueAnnotationBeanPostProcessor.java", "stars": "4", "class": {"name": "AnnotatedInjectionMetadata", "extends": "InjectionMetadata", "implements": null, "modifiers": ["private"]}}, {"method_name": "inject", "params": ["Object", "String", "PropertyValues"], "throws": ["Throwable"], "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void inject(Object bean, String beanName, PropertyValues pvs) throws Throwable {            Class<?> injectedType = pd.getPropertyType();            Object injectedObject = getInjectedObject(annotation, bean, beanName, injectedType, this);            ReflectionUtils.makeAccessible(method);            method.invoke(bean, injectedObject);            if (annotation.autoRefreshed()) {                //\u81ea\u52a8\u5237\u65b0                saveAutoRefreshed(annotation.value(), bean, beanName, method, null);            }        }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdValueAnnotationBeanPostProcessor.java", "stars": "4", "class": {"name": "AnnotatedMethodElement", "extends": "InjectionMetadata", "implements": null, "modifiers": ["private"]}}, {"method_name": "inject", "params": ["Object", "String", "PropertyValues"], "throws": ["Throwable"], "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void inject(Object bean, String beanName, PropertyValues pvs) throws Throwable {            Class<?> injectedType = field.getType();            Object injectedObject = getInjectedObject(annotation, bean, beanName, injectedType, this);            ReflectionUtils.makeAccessible(field);            field.set(bean, injectedObject);            if (annotation.autoRefreshed()) {                saveAutoRefreshed(annotation.value(), bean, beanName, null, field);            }        }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdValueAnnotationBeanPostProcessor.java", "stars": "4", "class": {"name": "AnnotatedFieldElement", "extends": "InjectionMetadata", "implements": null, "modifiers": ["public"]}}, {"method_name": "getBean", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getBean() {            return bean;        }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdValueAnnotationBeanPostProcessor.java", "stars": "4", "class": {"name": "EtcdValueTarget", "extends": null, "implements": null, "modifiers": ["private"]}}, {"method_name": "getBeanName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getBeanName() {            return beanName;        }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdValueAnnotationBeanPostProcessor.java", "stars": "4", "class": {"name": "EtcdValueTarget", "extends": null, "implements": null, "modifiers": ["private"]}}, {"method_name": "getMethod", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Method", "snippet": "        public Method getMethod() {            return method;        }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdValueAnnotationBeanPostProcessor.java", "stars": "4", "class": {"name": "EtcdValueTarget", "extends": null, "implements": null, "modifiers": ["private"]}}, {"method_name": "getField", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Field", "snippet": "        public Field getField() {            return field;        }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdValueAnnotationBeanPostProcessor.java", "stars": "4", "class": {"name": "EtcdValueTarget", "extends": null, "implements": null, "modifiers": ["private"]}}, {"method_name": "getLastValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getLastValue() {            return lastValue;        }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdValueAnnotationBeanPostProcessor.java", "stars": "4", "class": {"name": "EtcdValueTarget", "extends": null, "implements": null, "modifiers": ["private"]}}, {"method_name": "setLastValue", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setLastValue(String lastValue) {            this.lastValue = lastValue;        }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdValueAnnotationBeanPostProcessor.java", "stars": "4", "class": {"name": "EtcdValueTarget", "extends": null, "implements": null, "modifiers": ["private"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        show02();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/19.%E3%80%90File%E7%B1%BB%E3%80%81%E9%80%92%E5%BD%92%E3%80%91-%E7%AC%94%E8%AE%B0/code/08_FileAndRecursion/src/com/itheima/demo01/File/Demo06File.java", "stars": "2", "class": {"name": "Demo06File", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show02", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void show02() {        File file = new File(\"C:\\\\Users\\\\itcast\\\\IdeaProjects\\\\shungyuan\\\\08_FileAndRecursion\");        File[] files = file.listFiles();        for (File f : files) {            System.out.println(f);        }    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/19.%E3%80%90File%E7%B1%BB%E3%80%81%E9%80%92%E5%BD%92%E3%80%91-%E7%AC%94%E8%AE%B0/code/08_FileAndRecursion/src/com/itheima/demo01/File/Demo06File.java", "stars": "2", "class": {"name": "Demo06File", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show01", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void show01() {        //File file = new File(\"C:\\\\Users\\\\itcast\\\\IdeaProjects\\\\shungyuan\\\\08_FileAndRecursion\\\\1.txt\");//NullPointerException        //File file = new File(\"C:\\\\Users\\\\itcast\\\\IdeaProjects\\\\shungyuan\\\\08_Fi\");//NullPointerException        File file = new File(\"C:\\\\Users\\\\itcast\\\\IdeaProjects\\\\shungyuan\\\\08_FileAndRecursion\");        String[] arr = file.list();        for (String fileName : arr) {            System.out.println(fileName);        }    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/19.%E3%80%90File%E7%B1%BB%E3%80%81%E9%80%92%E5%BD%92%E3%80%91-%E7%AC%94%E8%AE%B0/code/08_FileAndRecursion/src/com/itheima/demo01/File/Demo06File.java", "stars": "2", "class": {"name": "Demo06File", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onAttach", "params": ["Context"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onAttach(@NonNull Context context) {        super.onAttach(context);        // \u83b7\u5f97\u5168\u5c40\u7684 Activity        mActivity = (A) requireActivity();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseFragment.java", "stars": "1", "class": {"name": "BaseFragment", "extends": "Fragment", "implements": ["ContextAction", "HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "onDetach", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDetach() {        removeCallbacks();        mActivity = null;        super.onDetach();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseFragment.java", "stars": "1", "class": {"name": "BaseFragment", "extends": "Fragment", "implements": ["ContextAction", "HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {        if (mRootView == null && getLayoutId() > 0) {            mRootView = inflater.inflate(getLayoutId(), null);        }        ViewGroup parent = (ViewGroup) mRootView.getParent();        if (parent != null) {            parent.removeView(mRootView);        }        return mRootView;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseFragment.java", "stars": "1", "class": {"name": "BaseFragment", "extends": "Fragment", "implements": ["ContextAction", "HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onResume() {        super.onResume();        if (!mInitialize) {            mInitialize = true;            initFragment();        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseFragment.java", "stars": "1", "class": {"name": "BaseFragment", "extends": "Fragment", "implements": ["ContextAction", "HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "getView", "params": [], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View getView() {        return mRootView;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseFragment.java", "stars": "1", "class": {"name": "BaseFragment", "extends": "Fragment", "implements": ["ContextAction", "HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "getAttachActivity", "params": [], "throws": null, "modifiers": ["public"], "return_type": "A", "snippet": "    public A getAttachActivity() {        return mActivity;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseFragment.java", "stars": "1", "class": {"name": "BaseFragment", "extends": "Fragment", "implements": ["ContextAction", "HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "initFragment", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initFragment() {        initView();        initData();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseFragment.java", "stars": "1", "class": {"name": "BaseFragment", "extends": "Fragment", "implements": ["ContextAction", "HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "getLayoutId", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "int", "snippet": "    protected abstract int getLayoutId();    /**     * \u521d\u59cb\u5316\u63a7\u4ef6     */    protected abstract void initView();    /**     * \u521d\u59cb\u5316\u6570\u636e     */    protected abstract void initData();    /**     * \u6839\u636e\u8d44\u6e90 id \u83b7\u53d6\u4e00\u4e2a View \u5bf9\u8c61     */    @Override    public <V extends View> V findViewById(@IdRes int id) {        return mRootView.findViewById(id);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseFragment.java", "stars": "1", "class": {"name": "BaseFragment", "extends": "Fragment", "implements": ["ContextAction", "HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "initView", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void initView();    /**     * \u521d\u59cb\u5316\u6570\u636e     */    protected abstract void initData();    /**     * \u6839\u636e\u8d44\u6e90 id \u83b7\u53d6\u4e00\u4e2a View \u5bf9\u8c61     */    @Override    public <V extends View> V findViewById(@IdRes int id) {        return mRootView.findViewById(id);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseFragment.java", "stars": "1", "class": {"name": "BaseFragment", "extends": "Fragment", "implements": ["ContextAction", "HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "initData", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void initData();    /**     * \u6839\u636e\u8d44\u6e90 id \u83b7\u53d6\u4e00\u4e2a View \u5bf9\u8c61     */    @Override    public <V extends View> V findViewById(@IdRes int id) {        return mRootView.findViewById(id);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseFragment.java", "stars": "1", "class": {"name": "BaseFragment", "extends": "Fragment", "implements": ["ContextAction", "HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "findViewById", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "V", "snippet": "    public <V extends View> V findViewById(@IdRes int id) {        return mRootView.findViewById(id);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseFragment.java", "stars": "1", "class": {"name": "BaseFragment", "extends": "Fragment", "implements": ["ContextAction", "HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "getBundle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Bundle", "snippet": "    public Bundle getBundle() {        return getArguments();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseFragment.java", "stars": "1", "class": {"name": "BaseFragment", "extends": "Fragment", "implements": ["ContextAction", "HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "startActivityForResult", "params": ["Class<Activity>", "BaseActivity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void startActivityForResult(Class<? extends Activity> clazz, BaseActivity.OnActivityCallback callback) {        startActivityForResult(new Intent(mActivity, clazz), null, callback);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseFragment.java", "stars": "1", "class": {"name": "BaseFragment", "extends": "Fragment", "implements": ["ContextAction", "HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "startActivityForResult", "params": ["Intent", "BaseActivity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void startActivityForResult(Intent intent, BaseActivity.OnActivityCallback callback) {        startActivityForResult(intent, null, callback);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseFragment.java", "stars": "1", "class": {"name": "BaseFragment", "extends": "Fragment", "implements": ["ContextAction", "HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "startActivityForResult", "params": ["Intent", "Bundle", "BaseActivity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void startActivityForResult(Intent intent, Bundle options, BaseActivity.OnActivityCallback callback) {        // \u56de\u8c03\u8fd8\u6ca1\u6709\u7ed3\u675f\uff0c\u6240\u4ee5\u4e0d\u80fd\u518d\u6b21\u8c03\u7528\u6b64\u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u53ea\u9002\u5408\u4e00\u5bf9\u4e00\u56de\u8c03\uff0c\u5176\u4ed6\u9700\u6c42\u8bf7\u4f7f\u7528\u539f\u751f\u7684\u65b9\u6cd5\u5b9e\u73b0        if (mActivityCallback == null) {            mActivityCallback = callback;            // \u968f\u673a\u751f\u6210\u8bf7\u6c42\u7801\uff0c\u8fd9\u4e2a\u8bf7\u6c42\u7801\u5728 0 - 255 \u4e4b\u95f4            mActivityRequestCode = new Random().nextInt(255);            startActivityForResult(intent, mActivityRequestCode, options);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseFragment.java", "stars": "1", "class": {"name": "BaseFragment", "extends": "Fragment", "implements": ["ContextAction", "HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "onActivityResult", "params": ["int", "int", "Intent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {        if (mActivityCallback != null && mActivityRequestCode == requestCode) {            mActivityCallback.onActivityResult(resultCode, data);            mActivityCallback = null;        } else {            super.onActivityResult(requestCode, resultCode, data);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseFragment.java", "stars": "1", "class": {"name": "BaseFragment", "extends": "Fragment", "implements": ["ContextAction", "HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "finish", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void finish() {        if (mActivity != null && !mActivity.isFinishing()) {            mActivity.finish();        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseFragment.java", "stars": "1", "class": {"name": "BaseFragment", "extends": "Fragment", "implements": ["ContextAction", "HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "onKeyDown", "params": ["int", "KeyEvent"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onKeyDown(int keyCode, KeyEvent event) {        // \u9ed8\u8ba4\u4e0d\u62e6\u622a\u6309\u952e\u4e8b\u4ef6\uff0c\u56de\u4f20\u7ed9 Activity        return false;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseFragment.java", "stars": "1", "class": {"name": "BaseFragment", "extends": "Fragment", "implements": ["ContextAction", "HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "solution", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int solution(int[] A) {        // write your code in Java SE 8        Set<Integer> testedSet = new HashSet<>();        Set<Integer> perfectSet = new HashSet<>();        for (int i = 0; i < A.length; i++) {            testedSet.add(A[i]);            perfectSet.add(i + 1);        }        for (int current : perfectSet) {            // as soon as find 1 element missing return false            if (!testedSet.contains(current))                return 0;        }        return 1;    }", "url": "https://raw.githubusercontent.com/njcodernoob/codility-java-solutions/master/PermCheck.java", "stars": "2", "class": {"name": "PermCheck", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\t// TODO Auto-generated method stub\t}", "url": "https://raw.githubusercontent.com/njcodernoob/codility-java-solutions/master/PermCheck.java", "stars": "2", "class": {"name": "PermCheck", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/SeekBarDialogFragment.java", "stars": "4", "class": {"name": "SeekBarDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateDialog", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "Dialog", "snippet": "    public Dialog onCreateDialog(Bundle savedInstanceState) {        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());        if (getArguments() == null || !getArguments().containsKey(MAX_VALUE) || !getArguments().containsKey(MIN_VALUE) || !getArguments().containsKey(TITLE) || mOnResultListener == null) {            return builder.create();        }        int defaultValue =  getArguments().getInt(DEFAULT_VALUE, getArguments().getInt(MAX_VALUE)/2);        LinearLayout layout = new LinearLayout(getActivity());        layout.setOrientation(LinearLayout.VERTICAL);        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);        layout.setLayoutParams(params);        final SeekBar seekbar = new SeekBar(getActivity());        seekbar.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));        seekbar.setMax(getArguments().getInt(MAX_VALUE));        seekbar.setProgress(defaultValue);        final TextView textSpeed = new TextView(getActivity());        textSpeed.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));        textSpeed.setGravity(Gravity.CENTER);        textSpeed.setTextAppearance(getActivity(), R.style.TextAppearance_AppCompat_Medium);        textSpeed.setText(defaultValue + \" Kb/s\");        seekbar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {            @Override            public void onProgressChanged(SeekBar seekBar, int i, boolean b) {                textSpeed.setText(i + \" Kb/s\");            }            @Override            public void onStartTrackingTouch(SeekBar seekBar) {            }            @Override            public void onStopTrackingTouch(SeekBar seekBar) {            }        });        layout.addView(seekbar);        layout.addView(textSpeed);        builder                .setView(layout)                .setTitle(getArguments().getString(TITLE))                .setPositiveButton(R.string.ok,                        new DialogInterface.OnClickListener() {                            @Override                            public void onClick(DialogInterface dialog, int which) {                                mOnResultListener.onNewValue(seekbar.getProgress() * 1000);                                dialog.dismiss();                            }                        })                .setNegativeButton(R.string.cancel,                        new DialogInterface.OnClickListener() {                            @Override                            public void onClick(DialogInterface dialog, int which) {                                dialog.dismiss();                            }                        }                );        return builder.create();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/SeekBarDialogFragment.java", "stars": "4", "class": {"name": "SeekBarDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "setOnResultListener", "params": ["ResultListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnResultListener(ResultListener resultListener) {        mOnResultListener = resultListener;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/SeekBarDialogFragment.java", "stars": "4", "class": {"name": "SeekBarDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        int left = (getWidth() - bitmap.getWidth()) / 2;        int top = (getHeight() - bitmap.getHeight()) / 2;        canvas.save();        canvas.clipRect(left + 50, top + 50, left + 300, top + 200);        canvas.drawBitmap(bitmap, left, top, paint);        canvas.restore();    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson4/Practice01ClipRectView.java", "stars": "2", "class": {"name": "Practice01ClipRectView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "generateCode", "params": [], "throws": ["CodeException"], "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String generateCode() throws CodeException {\t\tString result = \"\";\t\tresult += super.generateCode();\t\tswitch (expr.getType().getTypeCode()) {\t\tcase ARRAY:\t\t\tbreak;\t\tcase BOOLEAN:\t\t\tresult += tab() + \"scanf(\\\"%d\\\", &\" + expr.generateCode() + \"));\" + NL;\t\t\tbreak;\t\tcase ENUM:\t\t\tresult += tab() + \"scanf(\\\"%hu\\\", &\" + expr.generateCode() + \");\" + NL;\t\t\tbreak;\t\tcase INTEGER:\t\t\tresult += tab() + \"scanf(\\\"%d\\\", &\" + expr.generateCode() + \");\" + NL;\t\t\tbreak;\t\tcase FEATURE:\t\t\tbreak;\t\tcase FLOAT:\t\t\tresult += tab() + \"scanf(\\\"%f\\\", &\" + expr.generateCode() + \");\" + NL;\t\t\tbreak;\t\tdefault:\t\t\tthrow new CodeException(\"readln\");\t\t}\t\treturn result;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/StmREADLN.java", "stars": "3", "class": {"name": "StmREADLN", "extends": "Stm", "implements": null, "modifiers": ["public"]}}, {"method_name": "checkType", "params": [], "throws": ["TypeException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void checkType() throws TypeException {\t\texpr.checkType();\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/StmREADLN.java", "stars": "3", "class": {"name": "StmREADLN", "extends": "Stm", "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\treturn \"readln...\";\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/StmREADLN.java", "stars": "3", "class": {"name": "StmREADLN", "extends": "Stm", "implements": null, "modifiers": ["public"]}}, {"method_name": "configure", "params": ["SpringApplicationBuilder"], "throws": null, "modifiers": ["protected"], "return_type": "SpringApplicationBuilder", "snippet": "\tprotected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\t\treturn application.sources(MedicationApplication.class);\t}", "url": "https://raw.githubusercontent.com/WhiteFerrari666/Medication/develop/src/main/java/com/Medication/Medication/ServletInitializer.java", "stars": "2", "class": {"name": "ServletInitializer", "extends": "SpringBootServletInitializer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "\tpublic Long getId() {\t\treturn id;\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/api/model/ComentarioModel.java", "stars": "2", "class": {"name": "ComentarioModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setId(Long id) {\t\tthis.id = id;\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/api/model/ComentarioModel.java", "stars": "2", "class": {"name": "ComentarioModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDescricao", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getDescricao() {\t\treturn descricao;\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/api/model/ComentarioModel.java", "stars": "2", "class": {"name": "ComentarioModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDescricao", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setDescricao(String descricao) {\t\tthis.descricao = descricao;\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/api/model/ComentarioModel.java", "stars": "2", "class": {"name": "ComentarioModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDataEnvio", "params": [], "throws": null, "modifiers": ["public"], "return_type": "OffsetDateTime", "snippet": "\tpublic OffsetDateTime getDataEnvio() {\t\treturn dataEnvio;\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/api/model/ComentarioModel.java", "stars": "2", "class": {"name": "ComentarioModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDataEnvio", "params": ["OffsetDateTime"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setDataEnvio(OffsetDateTime dataEnvio) {\t\tthis.dataEnvio = dataEnvio;\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/api/model/ComentarioModel.java", "stars": "2", "class": {"name": "ComentarioModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tSpringApplication.run(DocAppointmentApplication.class, args);\t}", "url": "https://raw.githubusercontent.com/chandureddys/spring-boot-doc-appointment/master/src/main/java/com/docappointment/project/DocAppointmentApplication.java", "stars": "2", "class": {"name": "DocAppointmentApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_scan);        initViews();        BTManager.isDebugMode = true;        BTManager.getInstance().addDiscoveryListener(discoveryListener);                initialize();    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/app/src/main/java/cn/wandersnail/btsppexample/ScanActivity.java", "stars": "3", "class": {"name": "ScanActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "initViews", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initViews() {        refreshLayout = findViewById(R.id.refreshLayout);        ListView lv = findViewById(R.id.lv);        tvEmpty = findViewById(R.id.tvEmpty);        refreshLayout.setColorSchemeColors(ContextCompat.getColor(this, R.color.colorAccent));        listAdapter = new ListAdapter(this, devList);        lv.setAdapter(listAdapter);        lv.setOnItemClickListener((parent, view, position, id) -> {            Intent intent = new Intent(ScanActivity.this, MainActivityKt.class);            intent.putExtra(\"device\", devList.get(position).device);            startActivity(intent);        });        refreshLayout.setOnRefreshListener(() -> {            if (BTManager.getInstance().isInitialized()) {                BTManager.getInstance().stopDiscovery();                doStartDiscovery();            }            refreshLayout.postDelayed(() -> refreshLayout.setRefreshing(false), 500);        });    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/app/src/main/java/cn/wandersnail/btsppexample/ScanActivity.java", "stars": "3", "class": {"name": "ScanActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDestroy() {        super.onDestroy();        BTManager.getInstance().release();        Process.killProcess(Process.myPid());    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/app/src/main/java/cn/wandersnail/btsppexample/ScanActivity.java", "stars": "3", "class": {"name": "ScanActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNeedPermissions", "params": [], "throws": null, "modifiers": ["private"], "return_type": "List<String>", "snippet": "    private List<String> getNeedPermissions() {        List<String> list = new ArrayList<>();        list.add(Manifest.permission.ACCESS_FINE_LOCATION);//target sdk\u7248\u672c\u572829\u4ee5\u4e0a\u7684\u9700\u8981\u7cbe\u786e\u5b9a\u4f4d\u6743\u9650\u624d\u80fd\u641c\u7d22\u5230\u84dd\u7259\u8bbe\u5907        return list;    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/app/src/main/java/cn/wandersnail/btsppexample/ScanActivity.java", "stars": "3", "class": {"name": "ScanActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onResume() {        super.onResume();        Log.d(\"Main\", \"onResume\");        if (BTManager.getInstance().isInitialized()) {            if (BTManager.getInstance().isBluetoothOn()) {                doStartDiscovery();            } else {                startActivity(new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE));            }        }    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/app/src/main/java/cn/wandersnail/btsppexample/ScanActivity.java", "stars": "3", "class": {"name": "ScanActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onPause() {        super.onPause();        if (BTManager.getInstance().isInitialized()) {            BTManager.getInstance().stopDiscovery();        }    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/app/src/main/java/cn/wandersnail/btsppexample/ScanActivity.java", "stars": "3", "class": {"name": "ScanActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateOptionsMenu", "params": ["Menu"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onCreateOptionsMenu(Menu menu) {        getMenuInflater().inflate(R.menu.scan, menu);        MenuItem item = menu.findItem(R.id.menuProgress);        item.setActionView(R.layout.toolbar_indeterminate_progress);        item.setVisible(BTManager.getInstance().isDiscovering());        return super.onCreateOptionsMenu(menu);    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/app/src/main/java/cn/wandersnail/btsppexample/ScanActivity.java", "stars": "3", "class": {"name": "ScanActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "initialize", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initialize() {        //\u52a8\u6001\u7533\u8bf7\u6743\u9650        permissionsRequester = new PermissionsRequester(this);        permissionsRequester.setCallback(list -> {                    });        permissionsRequester.checkAndRequest(getNeedPermissions());    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/app/src/main/java/cn/wandersnail/btsppexample/ScanActivity.java", "stars": "3", "class": {"name": "ScanActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onRequestPermissionsResult", "params": ["int", "String", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        super.onRequestPermissionsResult(requestCode, permissions, grantResults);        permissionsRequester.onRequestPermissionsResult(requestCode, permissions, grantResults);    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/app/src/main/java/cn/wandersnail/btsppexample/ScanActivity.java", "stars": "3", "class": {"name": "ScanActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "doStartDiscovery", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void doStartDiscovery() {        devList.clear();        listAdapter.notifyDataSetChanged();        tvEmpty.setVisibility(View.VISIBLE);        BTManager.getInstance().startDiscovery();    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/app/src/main/java/cn/wandersnail/btsppexample/ScanActivity.java", "stars": "3", "class": {"name": "ScanActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean equals(Object o) {            if (this == o) return true;            if (!(o instanceof Device)) return false;            Device device1 = (Device) o;            return device.equals(device1.device);        }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/app/src/main/java/cn/wandersnail/btsppexample/ScanActivity.java", "stars": "3", "class": {"name": "Device", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int hashCode() {            return Objects.hash(device);        }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/app/src/main/java/cn/wandersnail/btsppexample/ScanActivity.java", "stars": "3", "class": {"name": "Device", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "createViewHolder", "params": ["int"], "throws": null, "modifiers": ["protected"], "return_type": "BaseViewHolder<Device>", "snippet": "        protected BaseViewHolder<Device> createViewHolder(int i) {            return new BaseViewHolder<Device>() {                TextView tvName;                TextView tvAddr;                TextView tvRssi;                @Override                public void onBind(@NonNull Device device, int i) {                    tvName.setText(TextUtils.isEmpty(device.device.getName()) ? \"N/A\" : device.device.getName());                    tvAddr.setText(device.device.getAddress());                    tvRssi.setText(\"\" + device.rssi);                }                @NotNull                @Override                public View createView() {                    View view = View.inflate(context, R.layout.item_scan, null);                    tvName = view.findViewById(R.id.tvName);                    tvAddr = view.findViewById(R.id.tvAddr);                    tvRssi = view.findViewById(R.id.tvRssi);                    return view;                }            };        }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/app/src/main/java/cn/wandersnail/btsppexample/ScanActivity.java", "stars": "3", "class": {"name": "ListAdapter", "extends": "BaseListAdapter", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "isRunning", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isRunning() {    return this.server.isRunning();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jmx/JmxJettyServer.java", "stars": "18", "class": {"name": "JmxJettyServer", "extends": null, "implements": ["JmxJettyServerMBean"], "modifiers": ["public"]}}, {"method_name": "isFailed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isFailed() {    return this.server.isFailed();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jmx/JmxJettyServer.java", "stars": "18", "class": {"name": "JmxJettyServer", "extends": null, "implements": ["JmxJettyServerMBean"], "modifiers": ["public"]}}, {"method_name": "getHost", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getHost() {    return this.connector.getHost();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jmx/JmxJettyServer.java", "stars": "18", "class": {"name": "JmxJettyServer", "extends": null, "implements": ["JmxJettyServerMBean"], "modifiers": ["public"]}}, {"method_name": "getPort", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getPort() {    return this.connector.getPort();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jmx/JmxJettyServer.java", "stars": "18", "class": {"name": "JmxJettyServer", "extends": null, "implements": ["JmxJettyServerMBean"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tSpringApplication.run(SampleSessionWebFluxApplication.class);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-session-webflux/src/main/java/smoketest/session/SampleSessionWebFluxApplication.java", "stars": "47572", "class": {"name": "SampleSessionWebFluxApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "springSecurityFilterChain", "params": ["ServerHttpSecurity"], "throws": null, "modifiers": ["public"], "return_type": "SecurityWebFilterChain", "snippet": "\tpublic SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) {\t\t// @formatter:off\t\treturn http\t\t\t.authorizeExchange()\t\t\t\t.anyExchange().authenticated()\t\t\t\t.and()\t\t\t.httpBasic().securityContextRepository(new WebSessionServerSecurityContextRepository())\t\t\t\t.and()\t\t\t.formLogin()\t\t\t\t.and()\t\t\t.build();\t\t// @formatter:on\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-session-webflux/src/main/java/smoketest/session/SampleSessionWebFluxApplication.java", "stars": "47572", "class": {"name": "SampleSessionWebFluxApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setData", "params": ["List<ClearingBean>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setData(List<ClearingBean> data) {        mDatas = data;        notifyDataSetChanged();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/adapter/contract/ClearingDropDownAdapter.java", "stars": "1", "class": {"name": "ClearingDropDownAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCount() {        return mDatas==null?0:mDatas.size();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/adapter/contract/ClearingDropDownAdapter.java", "stars": "1", "class": {"name": "ClearingDropDownAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "ClearingBean", "snippet": "    public ClearingBean getItem(int position) {        return mDatas.get(position);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/adapter/contract/ClearingDropDownAdapter.java", "stars": "1", "class": {"name": "ClearingDropDownAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getItemId(int position) {        return 0;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/adapter/contract/ClearingDropDownAdapter.java", "stars": "1", "class": {"name": "ClearingDropDownAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getView", "params": ["int", "View", "ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View getView(int position, View convertView, ViewGroup parent) {        ViewHolder viewHolder;        if (convertView != null) {            viewHolder = (ViewHolder) convertView.getTag();        } else {            convertView = LayoutInflater.from(context).inflate(R.layout.view_clearing_drop_down_item, null);            viewHolder = new ViewHolder();            viewHolder.tv_num = convertView.findViewById(R.id.tv_num);            viewHolder.tv_title = convertView.findViewById(R.id.tv_title);            viewHolder.tv_remark = convertView.findViewById(R.id.tv_remark);            viewHolder.tv_value = convertView.findViewById(R.id.tv_value);            viewHolder.tv_change = convertView.findViewById(R.id.tv_change);            convertView.setTag(viewHolder);        }        fillValue(position, viewHolder);        return convertView;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/adapter/contract/ClearingDropDownAdapter.java", "stars": "1", "class": {"name": "ClearingDropDownAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "fillValue", "params": ["int", "ViewHolder"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void fillValue(int position, ViewHolder viewHolder) {        ClearingBean item = getItem(position);        viewHolder.tv_num.setText(String.valueOf(item.getNum()));        viewHolder.tv_title.setText(item.getTitle());        viewHolder.tv_remark.setText(item.getRemark());        viewHolder.tv_value.setText(item.getValue());        viewHolder.tv_change.setText(item.getChange());    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/adapter/contract/ClearingDropDownAdapter.java", "stars": "1", "class": {"name": "ClearingDropDownAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "generateId", "params": ["long", "long", "long", "long"], "throws": null, "modifiers": ["public", "static"], "return_type": "long", "snippet": "    public static long generateId(long timestamp, long startTime , long dataCenterId, long workerId){        return ((timestamp - startTime) << timestampLeftShift) | (dataCenterId << dataCenterIdShift) | (workerId << workerIdShift);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/SnowFlake.java", "stars": "23", "class": {"name": "SnowFlake", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generateId", "params": ["long", "long"], "throws": null, "modifiers": ["public", "static"], "return_type": "long", "snippet": "    public static long generateId(long timestamp, long startTime){        return ((timestamp - startTime) << timestampLeftShift) | (maxDataCenterId << dataCenterIdShift) | (maxWorkerId << workerIdShift);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/SnowFlake.java", "stars": "23", "class": {"name": "SnowFlake", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "nextId", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "long", "snippet": "    public synchronized long nextId(){        long timestamp = timeGen();        if(timestamp < lastTimeStamp){            logger.info(\"clock is moving backwards.Rejecting request until \" + lastTimeStamp);        }        if(lastTimeStamp == timestamp){            sequence = (sequence + 1) & sequenceMask;            if(sequence == 0){                timestamp = tillNextMills(lastTimeStamp);            }        }else{            sequence = 0L;        }        lastTimeStamp = timestamp;        return ((timestamp - startTime) << timestampLeftShift)|(dataCenterId << dataCenterIdShift) | (workerId << workerIdShift) | sequence;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/SnowFlake.java", "stars": "23", "class": {"name": "SnowFlake", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "tillNextMills", "params": ["long"], "throws": null, "modifiers": ["private"], "return_type": "long", "snippet": "    private long tillNextMills(long lastTimeStamp){        long timestamp =  timeGen();        while(timestamp <= lastTimeStamp){            timestamp = timeGen();        }        return timestamp;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/SnowFlake.java", "stars": "23", "class": {"name": "SnowFlake", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "timeGen", "params": [], "throws": null, "modifiers": ["private"], "return_type": "long", "snippet": "    private long timeGen(){        return System.currentTimeMillis();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/SnowFlake.java", "stars": "23", "class": {"name": "SnowFlake", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onAttachedToWindow", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onAttachedToWindow() {        super.onAttachedToWindow();        animateBt = (Button) findViewById(R.id.animateBt);        imageView = (ImageView) findViewById(R.id.imageView);        if (SDK_INT > Build.VERSION_CODES.LOLLIPOP) {            // \u7ed9\u97f3\u4e50\u56fe\u6807\u52a0\u4e0a\u5408\u9002\u7684\u9634\u5f71            imageView.setOutlineProvider(new MusicOutlineProvider());        }        animateBt.setOnClickListener(new OnClickListener() {            @Override            public void onClick(final View v) {                // TODO \u5728\u8fd9\u91cc\u5904\u7406\u70b9\u51fb\u4e8b\u4ef6\uff0c\u901a\u8fc7 View.animate().translationX/Y/Z() \u6765\u8ba9 View \u5e73\u79fb                imageView.animate().translationX(200f)                        .translationY(200f)                        .translationZ(200f);            }        });    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson5/Practice01Translation.java", "stars": "2", "class": {"name": "Practice01Translation", "extends": "RelativeLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "getOutline", "params": ["View", "Outline"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void getOutline(View view, Outline outline) {            outline.setConvexPath(path);        }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson5/Practice01Translation.java", "stars": "2", "class": {"name": "MusicOutlineProvider", "extends": "ViewOutlineProvider", "implements": null, "modifiers": []}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args)\t{\t\t//\u7236\u7c7b\u578b\u5f15\u7528\u6307\u5411\u5b50\u7c7b\u578b\u5bf9\u8c61\t\t//\u5411\u4e0a\u8f6c\u578b\t\tAnimal a1 = new Cat();\t\tAnimal a2 = new Bird();\t\t\t\t//\u5411\u4e0b\u8f6c\u578b\u3010\u53ea\u6709\u5f53\u8bbf\u95ee\u5b50\u7c7b\u5bf9\u8c61\u5f53\u4e2d\u7279\u6709\u7684\u65b9\u6cd5\u3011\t\tif (a1 instanceof Cat) {\t\t\tCat ci = (Cat)a1;\t\t}\t\tif (a2 instanceof Bird) {\t\t\tBird b1 = (Bird)a2;\t\t}\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/duotai/Test2.java", "stars": "2", "class": {"name": "Test2", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAuthorities", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Collection<GrantedAuthority>", "snippet": "    public Collection<? extends GrantedAuthority> getAuthorities() {        return null;    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/entity/SdkUser.java", "stars": "1", "class": {"name": "SdkUser", "extends": null, "implements": ["UserDetails"], "modifiers": ["public"]}}, {"method_name": "getPassword", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPassword() {        return null;    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/entity/SdkUser.java", "stars": "1", "class": {"name": "SdkUser", "extends": null, "implements": ["UserDetails"], "modifiers": ["public"]}}, {"method_name": "getUsername", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getUsername() {        return null;    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/entity/SdkUser.java", "stars": "1", "class": {"name": "SdkUser", "extends": null, "implements": ["UserDetails"], "modifiers": ["public"]}}, {"method_name": "isAccountNonExpired", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isAccountNonExpired() {        return false;    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/entity/SdkUser.java", "stars": "1", "class": {"name": "SdkUser", "extends": null, "implements": ["UserDetails"], "modifiers": ["public"]}}, {"method_name": "isAccountNonLocked", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isAccountNonLocked() {        return false;    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/entity/SdkUser.java", "stars": "1", "class": {"name": "SdkUser", "extends": null, "implements": ["UserDetails"], "modifiers": ["public"]}}, {"method_name": "isCredentialsNonExpired", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isCredentialsNonExpired() {        return false;    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/entity/SdkUser.java", "stars": "1", "class": {"name": "SdkUser", "extends": null, "implements": ["UserDetails"], "modifiers": ["public"]}}, {"method_name": "isEnabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isEnabled() {        return false;    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/entity/SdkUser.java", "stars": "1", "class": {"name": "SdkUser", "extends": null, "implements": ["UserDetails"], "modifiers": ["public"]}}, {"method_name": "getPartialTicks", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getPartialTicks() {        return partialTicks;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/events/Render3DEvent.java", "stars": "12", "class": {"name": "Render3DEvent", "extends": "Event", "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getId() {        return id;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelation.java", "stars": "2", "class": {"name": "UmsAdminRoleRelation", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Long id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelation.java", "stars": "2", "class": {"name": "UmsAdminRoleRelation", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getAdminId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getAdminId() {        return adminId;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelation.java", "stars": "2", "class": {"name": "UmsAdminRoleRelation", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setAdminId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAdminId(Long adminId) {        this.adminId = adminId;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelation.java", "stars": "2", "class": {"name": "UmsAdminRoleRelation", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getRoleId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getRoleId() {        return roleId;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelation.java", "stars": "2", "class": {"name": "UmsAdminRoleRelation", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setRoleId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRoleId(Long roleId) {        this.roleId = roleId;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelation.java", "stars": "2", "class": {"name": "UmsAdminRoleRelation", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        StringBuilder sb = new StringBuilder();        sb.append(getClass().getSimpleName());        sb.append(\" [\");        sb.append(\"Hash = \").append(hashCode());        sb.append(\", id=\").append(id);        sb.append(\", adminId=\").append(adminId);        sb.append(\", roleId=\").append(roleId);        sb.append(\", serialVersionUID=\").append(serialVersionUID);        sb.append(\"]\");        return sb.toString();    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsAdminRoleRelation.java", "stars": "2", "class": {"name": "UmsAdminRoleRelation", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getCode() {    return code;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/ShieldCloudCheckResponse.java", "stars": "2", "class": {"name": "ShieldCloudCheckResponse", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setCode", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setCode(String code) {    this.code = code;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/ShieldCloudCheckResponse.java", "stars": "2", "class": {"name": "ShieldCloudCheckResponse", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getMsg", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getMsg() {    return msg;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/ShieldCloudCheckResponse.java", "stars": "2", "class": {"name": "ShieldCloudCheckResponse", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setMsg", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setMsg(String msg) {    this.msg = msg;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/ShieldCloudCheckResponse.java", "stars": "2", "class": {"name": "ShieldCloudCheckResponse", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getIp", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getIp() {    return ip;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/ShieldCloudCheckResponse.java", "stars": "2", "class": {"name": "ShieldCloudCheckResponse", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setIp", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setIp(String ip) {    this.ip = ip;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/ShieldCloudCheckResponse.java", "stars": "2", "class": {"name": "ShieldCloudCheckResponse", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getMessage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getMessage() {    return message;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/ShieldCloudCheckResponse.java", "stars": "2", "class": {"name": "ShieldCloudCheckResponse", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setMessage", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setMessage(String message) {    this.message = message;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/ShieldCloudCheckResponse.java", "stars": "2", "class": {"name": "ShieldCloudCheckResponse", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getSearchRange", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "  public List<String> getSearchRange() {    return searchRange;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/ShieldCloudCheckResponse.java", "stars": "2", "class": {"name": "ShieldCloudCheckResponse", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setSearchRange", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setSearchRange(List<String> searchRange) {    this.searchRange = searchRange;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/ShieldCloudCheckResponse.java", "stars": "2", "class": {"name": "ShieldCloudCheckResponse", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getShowErrorUrl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getShowErrorUrl() {    return showErrorUrl;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/ShieldCloudCheckResponse.java", "stars": "2", "class": {"name": "ShieldCloudCheckResponse", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setShowErrorUrl", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setShowErrorUrl(String showErrorUrl) {    this.showErrorUrl = showErrorUrl;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/ShieldCloudCheckResponse.java", "stars": "2", "class": {"name": "ShieldCloudCheckResponse", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean equals(Object o) {    if (this == o) return true;    if (!(o instanceof ShieldCloudCheckResponse)) return false;    ShieldCloudCheckResponse that = (ShieldCloudCheckResponse) o;    return Objects.equals(getCode(), that.getCode()) &&            Objects.equals(getMsg(), that.getMsg()) &&            Objects.equals(getIp(), that.getIp()) &&            Objects.equals(getMessage(), that.getMessage()) &&            Objects.equals(getSearchRange(), that.getSearchRange()) &&            Objects.equals(getShowErrorUrl(), that.getShowErrorUrl());  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/ShieldCloudCheckResponse.java", "stars": "2", "class": {"name": "ShieldCloudCheckResponse", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int hashCode() {    return Objects.hash(getCode(), getMsg(), getIp(), getMessage(), getSearchRange(), getShowErrorUrl());  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/ShieldCloudCheckResponse.java", "stars": "2", "class": {"name": "ShieldCloudCheckResponse", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "shouldSetParameter", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldSetParameter() throws Exception {    TYPE_HANDLER.setParameter(ps, 1, ZONED_DATE_TIME, null);    verify(ps).setObject(1, ZONED_DATE_TIME);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ZonedDateTimeTypeHandlerTest.java", "stars": "15", "class": {"name": "ZonedDateTimeTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByName() throws Exception {    when(rs.getObject(\"column\", ZonedDateTime.class)).thenReturn(ZONED_DATE_TIME);    assertEquals(ZONED_DATE_TIME, TYPE_HANDLER.getResult(rs, \"column\"));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ZonedDateTimeTypeHandlerTest.java", "stars": "15", "class": {"name": "ZonedDateTimeTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByName() throws Exception {    when(rs.getObject(\"column\", ZonedDateTime.class)).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(rs, \"column\"));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ZonedDateTimeTypeHandlerTest.java", "stars": "15", "class": {"name": "ZonedDateTimeTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByPosition() throws Exception {    when(rs.getObject(1, ZonedDateTime.class)).thenReturn(ZONED_DATE_TIME);    assertEquals(ZONED_DATE_TIME, TYPE_HANDLER.getResult(rs, 1));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ZonedDateTimeTypeHandlerTest.java", "stars": "15", "class": {"name": "ZonedDateTimeTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByPosition() throws Exception {    when(rs.getObject(1, ZonedDateTime.class)).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(rs, 1));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ZonedDateTimeTypeHandlerTest.java", "stars": "15", "class": {"name": "ZonedDateTimeTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromCallableStatement() throws Exception {    when(cs.getObject(1, ZonedDateTime.class)).thenReturn(ZONED_DATE_TIME);    assertEquals(ZONED_DATE_TIME, TYPE_HANDLER.getResult(cs, 1));    verify(cs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ZonedDateTimeTypeHandlerTest.java", "stars": "15", "class": {"name": "ZonedDateTimeTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromCallableStatement() throws Exception {    when(cs.getObject(1, ZonedDateTime.class)).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(cs, 1));    verify(cs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/ZonedDateTimeTypeHandlerTest.java", "stars": "15", "class": {"name": "ZonedDateTimeTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "nextId", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "long", "snippet": "    public synchronized long nextId() {        long timestamp = timeGen();        if (timestamp < lastTimestamp) {            throw new RuntimeException(String.format(\"Clock moved backwards.  Refusing to generate id for %d milliseconds\", lastTimestamp - timestamp));        }        if (lastTimestamp == timestamp) {            // \u5f53\u524d\u6beb\u79d2\u5185\uff0c\u5219+1            sequence = (sequence + 1) & sequenceMask;            if (sequence == 0) {                // \u5f53\u524d\u6beb\u79d2\u5185\u8ba1\u6570\u6ee1\u4e86\uff0c\u5219\u7b49\u5f85\u4e0b\u4e00\u79d2                timestamp = tilNextMillis(lastTimestamp);            }        } else {            sequence = 0L;        }        lastTimestamp = timestamp;        // ID\u504f\u79fb\u7ec4\u5408\u751f\u6210\u6700\u7ec8\u7684ID\uff0c\u5e76\u8fd4\u56deID        long nextId = ((timestamp - twepoch) << timestampLeftShift)                | (datacenterId << datacenterIdShift)                | (workerId << workerIdShift) | sequence;        return nextId;    }", "url": "https://raw.githubusercontent.com/okhurley/oauth2/master/oauth2_common/src/main/java/util/IdWorker.java", "stars": "2", "class": {"name": "IdWorker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "tilNextMillis", "params": ["long"], "throws": null, "modifiers": ["private"], "return_type": "long", "snippet": "    private long tilNextMillis(final long lastTimestamp) {        long timestamp = this.timeGen();        while (timestamp <= lastTimestamp) {            timestamp = this.timeGen();        }        return timestamp;    }", "url": "https://raw.githubusercontent.com/okhurley/oauth2/master/oauth2_common/src/main/java/util/IdWorker.java", "stars": "2", "class": {"name": "IdWorker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "timeGen", "params": [], "throws": null, "modifiers": ["private"], "return_type": "long", "snippet": "    private long timeGen() {        return System.currentTimeMillis();    }", "url": "https://raw.githubusercontent.com/okhurley/oauth2/master/oauth2_common/src/main/java/util/IdWorker.java", "stars": "2", "class": {"name": "IdWorker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMaxWorkerId", "params": ["long", "long"], "throws": null, "modifiers": ["static", "protected"], "return_type": "long", "snippet": "    protected static long getMaxWorkerId(long datacenterId, long maxWorkerId) {        StringBuffer mpid = new StringBuffer();        mpid.append(datacenterId);        String name = ManagementFactory.getRuntimeMXBean().getName();        if (!name.isEmpty()) {            /*             * GET jvmPid             */            mpid.append(name.split(\"@\")[0]);        }        /*         * MAC + PID \u7684 hashcode \u83b7\u53d616\u4e2a\u4f4e\u4f4d         */        return (mpid.toString().hashCode() & 0xffff) % (maxWorkerId + 1);    }", "url": "https://raw.githubusercontent.com/okhurley/oauth2/master/oauth2_common/src/main/java/util/IdWorker.java", "stars": "2", "class": {"name": "IdWorker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDatacenterId", "params": ["long"], "throws": null, "modifiers": ["static", "protected"], "return_type": "long", "snippet": "    protected static long getDatacenterId(long maxDatacenterId) {        long id = 0L;        try {            InetAddress ip = InetAddress.getLocalHost();            NetworkInterface network = NetworkInterface.getByInetAddress(ip);            if (network == null) {                id = 1L;            } else {                byte[] mac = network.getHardwareAddress();                id = ((0x000000FF & (long) mac[mac.length - 1])                        | (0x0000FF00 & (((long) mac[mac.length - 2]) << 8))) >> 6;                id = id % (maxDatacenterId + 1);            }        } catch (Exception e) {            System.out.println(\" getDatacenterId: \" + e.getMessage());        }        return id;    }", "url": "https://raw.githubusercontent.com/okhurley/oauth2/master/oauth2_common/src/main/java/util/IdWorker.java", "stars": "2", "class": {"name": "IdWorker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        IdWorker idWorker=new IdWorker(0,0);        for(int i=0;i<10000;i++){            long nextId = idWorker.nextId();            System.out.println(nextId);        }    }", "url": "https://raw.githubusercontent.com/okhurley/oauth2/master/oauth2_common/src/main/java/util/IdWorker.java", "stars": "2", "class": {"name": "IdWorker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addLayout", "params": ["LoadingLayout"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void addLayout(LoadingLayout layout) {\t\tif (null != layout) {\t\t\tmLoadingLayouts.add(layout);\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/LoadingLayoutProxy.java", "stars": "74", "class": {"name": "LoadingLayoutProxy", "extends": null, "implements": ["ILoadingLayout"], "modifiers": ["public"]}}, {"method_name": "setLastUpdatedLabel", "params": ["CharSequence"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setLastUpdatedLabel(CharSequence label) {\t\tfor (LoadingLayout layout : mLoadingLayouts) {\t\t\tlayout.setLastUpdatedLabel(label);\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/LoadingLayoutProxy.java", "stars": "74", "class": {"name": "LoadingLayoutProxy", "extends": null, "implements": ["ILoadingLayout"], "modifiers": ["public"]}}, {"method_name": "setLoadingDrawable", "params": ["Drawable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setLoadingDrawable(Drawable drawable) {\t\tfor (LoadingLayout layout : mLoadingLayouts) {\t\t\tlayout.setLoadingDrawable(drawable);\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/LoadingLayoutProxy.java", "stars": "74", "class": {"name": "LoadingLayoutProxy", "extends": null, "implements": ["ILoadingLayout"], "modifiers": ["public"]}}, {"method_name": "setRefreshingLabel", "params": ["CharSequence"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setRefreshingLabel(CharSequence refreshingLabel) {\t\tfor (LoadingLayout layout : mLoadingLayouts) {\t\t\tlayout.setRefreshingLabel(refreshingLabel);\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/LoadingLayoutProxy.java", "stars": "74", "class": {"name": "LoadingLayoutProxy", "extends": null, "implements": ["ILoadingLayout"], "modifiers": ["public"]}}, {"method_name": "setPullLabel", "params": ["CharSequence"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setPullLabel(CharSequence label) {\t\tfor (LoadingLayout layout : mLoadingLayouts) {\t\t\tlayout.setPullLabel(label);\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/LoadingLayoutProxy.java", "stars": "74", "class": {"name": "LoadingLayoutProxy", "extends": null, "implements": ["ILoadingLayout"], "modifiers": ["public"]}}, {"method_name": "setReleaseLabel", "params": ["CharSequence"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setReleaseLabel(CharSequence label) {\t\tfor (LoadingLayout layout : mLoadingLayouts) {\t\t\tlayout.setReleaseLabel(label);\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/LoadingLayoutProxy.java", "stars": "74", "class": {"name": "LoadingLayoutProxy", "extends": null, "implements": ["ILoadingLayout"], "modifiers": ["public"]}}, {"method_name": "setTextTypeface", "params": ["Typeface"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setTextTypeface(Typeface tf) {\t\tfor (LoadingLayout layout : mLoadingLayouts) {\t\t\tlayout.setTextTypeface(tf);\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/LoadingLayoutProxy.java", "stars": "74", "class": {"name": "LoadingLayoutProxy", "extends": null, "implements": ["ILoadingLayout"], "modifiers": ["public"]}}, {"method_name": "onAttachedToWindow", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onAttachedToWindow ()\t{\t\tn_onAttachedToWindow ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/CarouselPageRenderer.java", "stars": "2", "class": {"name": "CarouselPageRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onAttachedToWindow", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onAttachedToWindow ();\tpublic void onDetachedFromWindow ()\t{\t\tn_onDetachedFromWindow ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/CarouselPageRenderer.java", "stars": "2", "class": {"name": "CarouselPageRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onDetachedFromWindow", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDetachedFromWindow ()\t{\t\tn_onDetachedFromWindow ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/CarouselPageRenderer.java", "stars": "2", "class": {"name": "CarouselPageRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onDetachedFromWindow", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDetachedFromWindow ();\tpublic void onLayout (boolean p0, int p1, int p2, int p3, int p4)\t{\t\tn_onLayout (p0, p1, p2, p3, p4);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/CarouselPageRenderer.java", "stars": "2", "class": {"name": "CarouselPageRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onLayout (boolean p0, int p1, int p2, int p3, int p4)\t{\t\tn_onLayout (p0, p1, p2, p3, p4);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/CarouselPageRenderer.java", "stars": "2", "class": {"name": "CarouselPageRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onLayout (boolean p0, int p1, int p2, int p3, int p4);\tpublic void onPageScrollStateChanged (int p0)\t{\t\tn_onPageScrollStateChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/CarouselPageRenderer.java", "stars": "2", "class": {"name": "CarouselPageRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onPageScrollStateChanged", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onPageScrollStateChanged (int p0)\t{\t\tn_onPageScrollStateChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/CarouselPageRenderer.java", "stars": "2", "class": {"name": "CarouselPageRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onPageScrollStateChanged", "params": ["int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onPageScrollStateChanged (int p0);\tpublic void onPageScrolled (int p0, float p1, int p2)\t{\t\tn_onPageScrolled (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/CarouselPageRenderer.java", "stars": "2", "class": {"name": "CarouselPageRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onPageScrolled", "params": ["int", "float", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onPageScrolled (int p0, float p1, int p2)\t{\t\tn_onPageScrolled (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/CarouselPageRenderer.java", "stars": "2", "class": {"name": "CarouselPageRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onPageScrolled", "params": ["int", "float", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onPageScrolled (int p0, float p1, int p2);\tpublic void onPageSelected (int p0)\t{\t\tn_onPageSelected (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/CarouselPageRenderer.java", "stars": "2", "class": {"name": "CarouselPageRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onPageSelected", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onPageSelected (int p0)\t{\t\tn_onPageSelected (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/CarouselPageRenderer.java", "stars": "2", "class": {"name": "CarouselPageRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onPageSelected", "params": ["int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onPageSelected (int p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/CarouselPageRenderer.java", "stars": "2", "class": {"name": "CarouselPageRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/CarouselPageRenderer.java", "stars": "2", "class": {"name": "CarouselPageRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/CarouselPageRenderer.java", "stars": "2", "class": {"name": "CarouselPageRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "newCurrentThreadClassLoaderSwapper", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "ClassLoaderSwapper", "snippet": "    public static ClassLoaderSwapper newCurrentThreadClassLoaderSwapper() {        return new ClassLoaderSwapper();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/util/container/ClassLoaderSwapper.java", "stars": "23", "class": {"name": "ClassLoaderSwapper", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setCurrentThreadClassLoader", "params": ["ClassLoader"], "throws": null, "modifiers": ["public"], "return_type": "ClassLoader", "snippet": "    public ClassLoader setCurrentThreadClassLoader(ClassLoader classLoader) {        this.storeClassLoader = Thread.currentThread().getContextClassLoader();        Thread.currentThread().setContextClassLoader(classLoader);        return this.storeClassLoader;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/util/container/ClassLoaderSwapper.java", "stars": "23", "class": {"name": "ClassLoaderSwapper", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "restoreCurrentThreadClassLoader", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ClassLoader", "snippet": "    public ClassLoader restoreCurrentThreadClassLoader() {        ClassLoader classLoader = Thread.currentThread()                .getContextClassLoader();        Thread.currentThread().setContextClassLoader(this.storeClassLoader);        return classLoader;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/util/container/ClassLoaderSwapper.java", "stars": "23", "class": {"name": "ClassLoaderSwapper", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "initialize", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initialize() {        Point p = owner.getLocationOnScreen();        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();        this.setResizable(false);        this.setTitle(\"JR100\u30a8\u30df\u30e5\u30ec\u30fc\u30bf\u306b\u3064\u3044\u3066\");        this.setSize(300, 142);        int x = p.x + 10;        int y = p.y + 10;        if (x + this.getSize().width > d.width) {            x = d.width - this.getSize().width;        }        if (y + this.getSize().height > d.height) {            y = d.height - this.getSize().height;        }        this.setLocation(x, y);        this.setContentPane(getJContentPane());    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/AboutDialog.java", "stars": "4", "class": {"name": "AboutDialog", "extends": "JDialog", "implements": null, "modifiers": ["public"]}}, {"method_name": "getJContentPane", "params": [], "throws": null, "modifiers": ["private"], "return_type": "javax", "snippet": "    private javax.swing.JPanel getJContentPane() {        if(jContentPane == null) {            jLabel2 = new JLabel();            jLabel1 = new JLabel();            GridBagConstraints gridBagConstraints11 = new GridBagConstraints();            GridBagConstraints gridBagConstraints21 = new GridBagConstraints();            jLabel = new JLabel();            GridBagConstraints gridBagConstraints1 = new GridBagConstraints();            GridBagConstraints gridBagConstraints2 = new GridBagConstraints();            jContentPane = new javax.swing.JPanel();            jContentPane.setLayout(new GridBagLayout());            gridBagConstraints1.gridx = 0;            gridBagConstraints1.gridy = 0;            gridBagConstraints1.weighty = 0.2D;            jLabel.setText(\"JR100Emulator \" + JR100Application.REVISION_STRING);            gridBagConstraints2.gridx = 0;            gridBagConstraints2.gridy = 3;            gridBagConstraints2.weighty = 1.0D;            gridBagConstraints11.gridx = 0;            gridBagConstraints11.gridy = 1;            gridBagConstraints11.weighty = 0.2D;            jLabel1.setText(JR100Application.COPYRIGHT_STRING);            gridBagConstraints21.gridx = 0;            gridBagConstraints21.gridy = 2;            gridBagConstraints21.weighty = 0.2D;            jLabel2.setText(\"(kemusiro@asamomiji.jp)\");            jContentPane.add(jLabel, gridBagConstraints1);            jContentPane.add(getJButton(), gridBagConstraints2);            jContentPane.add(jLabel1, gridBagConstraints11);            jContentPane.add(jLabel2, gridBagConstraints21);        }        return jContentPane;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/AboutDialog.java", "stars": "4", "class": {"name": "AboutDialog", "extends": "JDialog", "implements": null, "modifiers": ["public"]}}, {"method_name": "getJButton", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JButton", "snippet": "    private JButton getJButton() {        if (jButton == null) {            jButton = new JButton();            jButton.setText(\"OK\");            jButton.addActionListener(new java.awt.event.ActionListener() {                public void actionPerformed(java.awt.event.ActionEvent e) {                    dispose();                }            });        }        return jButton;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/AboutDialog.java", "stars": "4", "class": {"name": "AboutDialog", "extends": "JDialog", "implements": null, "modifiers": ["public"]}}, {"method_name": "confirmerDistribution", "params": ["Model"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String confirmerDistribution(Model model) {        return \"confirmation-distribution-masques\";    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/main/java/fr/gouv/interieur/dmgp/remettant/application/ui/ConfirmationDistributionMasquesController.java", "stars": "5", "class": {"name": "ConfirmationDistributionMasquesController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setup", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setup() {        mockMvc = MockMvcBuilders.standaloneSetup(controller)            .setControllerAdvice(exceptionTranslator)            .setMessageConverters(jacksonMessageConverter)            .build();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/errors/ExceptionTranslatorIT.java", "stars": "2", "class": {"name": "ExceptionTranslatorIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testConcurrencyFailure", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testConcurrencyFailure() throws Exception {        mockMvc.perform(get(\"/test/concurrency-failure\"))            .andExpect(status().isConflict())            .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/errors/ExceptionTranslatorIT.java", "stars": "2", "class": {"name": "ExceptionTranslatorIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testMethodArgumentNotValid", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testMethodArgumentNotValid() throws Exception {        mockMvc.perform(post(\"/test/method-argument\").content(\"{}\").contentType(MediaType.APPLICATION_JSON))            .andExpect(status().isBadRequest())            .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/errors/ExceptionTranslatorIT.java", "stars": "2", "class": {"name": "ExceptionTranslatorIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testMissingServletRequestPartException", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testMissingServletRequestPartException() throws Exception {        mockMvc.perform(get(\"/test/missing-servlet-request-part\"))            .andExpect(status().isBadRequest())            .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/errors/ExceptionTranslatorIT.java", "stars": "2", "class": {"name": "ExceptionTranslatorIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testMissingServletRequestParameterException", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testMissingServletRequestParameterException() throws Exception {        mockMvc.perform(get(\"/test/missing-servlet-request-parameter\"))            .andExpect(status().isBadRequest())            .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/errors/ExceptionTranslatorIT.java", "stars": "2", "class": {"name": "ExceptionTranslatorIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testAccessDenied", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testAccessDenied() throws Exception {        mockMvc.perform(get(\"/test/access-denied\"))            .andExpect(status().isForbidden())            .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/errors/ExceptionTranslatorIT.java", "stars": "2", "class": {"name": "ExceptionTranslatorIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testUnauthorized", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testUnauthorized() throws Exception {        mockMvc.perform(get(\"/test/unauthorized\"))            .andExpect(status().isUnauthorized())            .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/errors/ExceptionTranslatorIT.java", "stars": "2", "class": {"name": "ExceptionTranslatorIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testMethodNotSupported", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testMethodNotSupported() throws Exception {        mockMvc.perform(post(\"/test/access-denied\"))            .andExpect(status().isMethodNotAllowed())            .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/errors/ExceptionTranslatorIT.java", "stars": "2", "class": {"name": "ExceptionTranslatorIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testExceptionWithResponseStatus", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testExceptionWithResponseStatus() throws Exception {        mockMvc.perform(get(\"/test/response-status\"))            .andExpect(status().isBadRequest())            .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/errors/ExceptionTranslatorIT.java", "stars": "2", "class": {"name": "ExceptionTranslatorIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testInternalServerError", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testInternalServerError() throws Exception {        mockMvc.perform(get(\"/test/internal-server-error\"))            .andExpect(status().isInternalServerError())            .andExpect(content().contentType(MediaType.APPLICATION_PROBLEM_JSON));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/errors/ExceptionTranslatorIT.java", "stars": "2", "class": {"name": "ExceptionTranslatorIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "dispose", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void dispose() {        this.listeners.clear();    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/events/EventDispatcher.java", "stars": "2", "class": {"name": "EventDispatcher", "extends": null, "implements": ["IEventDispatcher"], "modifiers": ["public"]}}, {"method_name": "registerEventListener", "params": ["IEventListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void registerEventListener(IEventListener listener) {        if(listener == null) return;        Method[] methods = listener.getClass().getDeclaredMethods();        if((methods == null) || (methods.length == 0)) return;        for(Method method : methods) {            if(!method.isAnnotationPresent(EventHandler.class)) continue;            Class<?>[] parameterTypes = method.getParameterTypes();            if(parameterTypes.length == 0) continue;            Class<?> eventClass = parameterTypes[0];            if(eventClass == null) continue;            String name = eventClass.getName();            Map<Method, IEventListener> existing = this.listeners.get(name);            if((existing == null) || (existing.size() == 0)) {                existing = new HashMap<>();                this.listeners.put(name, existing);            }            existing.put(method, listener);        }    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/events/EventDispatcher.java", "stars": "2", "class": {"name": "EventDispatcher", "extends": null, "implements": ["IEventDispatcher"], "modifiers": ["public"]}}, {"method_name": "dispatchEvent", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public <T extends NitroEvent> T dispatchEvent(T event) {        if(event == null) return null;        String name = event.getClass().getName();        Map<Method, IEventListener> methods = this.listeners.get(name);        if((methods == null) || (methods.size() == 0)) return event;        for(Method method : methods.keySet()) {            IEventListener listener = methods.get(method);            if(listener == null) continue;            try {                method.invoke(listener, event);            } catch(Exception e) {                System.out.println(e);            }        }        return event;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/events/EventDispatcher.java", "stars": "2", "class": {"name": "EventDispatcher", "extends": null, "implements": ["IEventDispatcher"], "modifiers": ["public"]}}, {"method_name": "isArray", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean isArray() {\t\treturn type.getSort() == Type.ARRAY;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/Unresolved.java", "stars": "12", "class": {"name": "Unresolved", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\treturn type.getInternalName();\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/Unresolved.java", "stars": "12", "class": {"name": "Unresolved", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int hashCode() {\t\treturn Objects.hash(type);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/Unresolved.java", "stars": "12", "class": {"name": "Unresolved", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean equals(Object o) {\t\tif (this == o)\t\t\treturn true;\t\tif (!(o instanceof Unresolved))\t\t\treturn false;\t\treturn Objects.equals(type, ((Unresolved) o).type);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/Unresolved.java", "stars": "12", "class": {"name": "Unresolved", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isSuccess", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isSuccess() {        return success;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/api/item/UserResponse.java", "stars": "4", "class": {"name": "UserResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "User", "snippet": "    public User getData() {        return data;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/api/item/UserResponse.java", "stars": "4", "class": {"name": "UserResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getErrorsMessages", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ArrayList<Error>", "snippet": "    public ArrayList<Error> getErrorsMessages() {        return errors_messages;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/api/item/UserResponse.java", "stars": "4", "class": {"name": "UserResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getErrorsString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getErrorsString () {        String output = \"\";        for (Error error : errors_messages) {            output = output.concat(error.getErrorMessage()).concat(\"\\n\");        }        return output.substring(0, output.lastIndexOf(\"\\n\"));    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/api/item/UserResponse.java", "stars": "4", "class": {"name": "UserResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "asLong", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long asLong() {        return (Long) this.getRawData();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/DateColumn.java", "stars": "23", "class": {"name": "DateColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "asString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String asString() {        try {            return ColumnCast.date2String(this);        } catch (Exception e) {            throw DataXException.asDataXException(                    CommonErrorCode.CONVERT_NOT_SUPPORT,                    String.format(\"Date[%s]\u7c7b\u578b\u4e0d\u80fd\u8f6c\u4e3aString .\", this.toString()));        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/DateColumn.java", "stars": "23", "class": {"name": "DateColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "asDate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date asDate() {        if (null == this.getRawData()) {            return null;        }        return new Date((Long) this.getRawData());    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/DateColumn.java", "stars": "23", "class": {"name": "DateColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "asBytes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte[] asBytes() {        throw DataXException.asDataXException(                CommonErrorCode.CONVERT_NOT_SUPPORT, \"Date\u7c7b\u578b\u4e0d\u80fd\u8f6c\u4e3aBytes .\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/DateColumn.java", "stars": "23", "class": {"name": "DateColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "asBoolean", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Boolean", "snippet": "    public Boolean asBoolean() {        throw DataXException.asDataXException(                CommonErrorCode.CONVERT_NOT_SUPPORT, \"Date\u7c7b\u578b\u4e0d\u80fd\u8f6c\u4e3aBoolean .\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/DateColumn.java", "stars": "23", "class": {"name": "DateColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "asDouble", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Double", "snippet": "    public Double asDouble() {        throw DataXException.asDataXException(                CommonErrorCode.CONVERT_NOT_SUPPORT, \"Date\u7c7b\u578b\u4e0d\u80fd\u8f6c\u4e3aDouble .\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/DateColumn.java", "stars": "23", "class": {"name": "DateColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "asBigInteger", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BigInteger", "snippet": "    public BigInteger asBigInteger() {        throw DataXException.asDataXException(                CommonErrorCode.CONVERT_NOT_SUPPORT, \"Date\u7c7b\u578b\u4e0d\u80fd\u8f6c\u4e3aBigInteger .\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/DateColumn.java", "stars": "23", "class": {"name": "DateColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "asBigDecimal", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BigDecimal", "snippet": "    public BigDecimal asBigDecimal() {        throw DataXException.asDataXException(                CommonErrorCode.CONVERT_NOT_SUPPORT, \"Date\u7c7b\u578b\u4e0d\u80fd\u8f6c\u4e3aBigDecimal .\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/DateColumn.java", "stars": "23", "class": {"name": "DateColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "getSubType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "DateType", "snippet": "    public DateType getSubType() {        return subType;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/DateColumn.java", "stars": "23", "class": {"name": "DateColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "setSubType", "params": ["DateType"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSubType(DateType subType) {        this.subType = subType;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/DateColumn.java", "stars": "23", "class": {"name": "DateColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "getStream", "params": ["String", "Object"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "InputStream", "snippet": "\tpublic InputStream getStream(String imageUri, Object extra) throws IOException {\t\tswitch (Scheme.ofUri(imageUri)) {\t\t\tcase HTTP:\t\t\tcase HTTPS:\t\t\t\treturn getStreamFromNetwork(imageUri, extra);\t\t\tcase FILE:\t\t\t\treturn getStreamFromFile(imageUri, extra);\t\t\tcase CONTENT:\t\t\t\treturn getStreamFromContent(imageUri, extra);\t\t\tcase ASSETS:\t\t\t\treturn getStreamFromAssets(imageUri, extra);\t\t\tcase DRAWABLE:\t\t\t\treturn getStreamFromDrawable(imageUri, extra);\t\t\tcase UNKNOWN:\t\t\tdefault:\t\t\t\treturn getStreamFromOtherSource(imageUri, extra);\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/download/BaseImageDownloader.java", "stars": "74", "class": {"name": "BaseImageDownloader", "extends": null, "implements": ["ImageDownloader"], "modifiers": ["public"]}}, {"method_name": "getStreamFromNetwork", "params": ["String", "Object"], "throws": ["IOException"], "modifiers": ["protected"], "return_type": "InputStream", "snippet": "\tprotected InputStream getStreamFromNetwork(String imageUri, Object extra) throws IOException {\t\tHttpURLConnection conn = createConnection(imageUri);\t\tint redirectCount = 0;\t\twhile (conn.getResponseCode() / 100 == 3 && redirectCount < MAX_REDIRECT_COUNT) {\t\t\tconn = createConnection(conn.getHeaderField(\"Location\"));\t\t\tredirectCount++;\t\t}\t\treturn new BufferedInputStream(conn.getInputStream(), BUFFER_SIZE);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/download/BaseImageDownloader.java", "stars": "74", "class": {"name": "BaseImageDownloader", "extends": null, "implements": ["ImageDownloader"], "modifiers": ["public"]}}, {"method_name": "createConnection", "params": ["String"], "throws": ["IOException"], "modifiers": ["protected"], "return_type": "HttpURLConnection", "snippet": "\tprotected HttpURLConnection createConnection(String url) throws IOException {\t\tString encodedUrl = Uri.encode(url, ALLOWED_URI_CHARS);\t\tHttpURLConnection conn = (HttpURLConnection) new URL(encodedUrl).openConnection();\t\tconn.setConnectTimeout(connectTimeout);\t\tconn.setReadTimeout(readTimeout);\t\treturn conn;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/download/BaseImageDownloader.java", "stars": "74", "class": {"name": "BaseImageDownloader", "extends": null, "implements": ["ImageDownloader"], "modifiers": ["public"]}}, {"method_name": "getStreamFromFile", "params": ["String", "Object"], "throws": ["IOException"], "modifiers": ["protected"], "return_type": "InputStream", "snippet": "\tprotected InputStream getStreamFromFile(String imageUri, Object extra) throws IOException {\t\tString filePath = Scheme.FILE.crop(imageUri);\t\treturn new BufferedInputStream(new FileInputStream(filePath), BUFFER_SIZE);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/download/BaseImageDownloader.java", "stars": "74", "class": {"name": "BaseImageDownloader", "extends": null, "implements": ["ImageDownloader"], "modifiers": ["public"]}}, {"method_name": "getStreamFromContent", "params": ["String", "Object"], "throws": ["FileNotFoundException"], "modifiers": ["protected"], "return_type": "InputStream", "snippet": "\tprotected InputStream getStreamFromContent(String imageUri, Object extra) throws FileNotFoundException {\t\tContentResolver res = context.getContentResolver();\t\tUri uri = Uri.parse(imageUri);\t\treturn res.openInputStream(uri);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/download/BaseImageDownloader.java", "stars": "74", "class": {"name": "BaseImageDownloader", "extends": null, "implements": ["ImageDownloader"], "modifiers": ["public"]}}, {"method_name": "getStreamFromAssets", "params": ["String", "Object"], "throws": ["IOException"], "modifiers": ["protected"], "return_type": "InputStream", "snippet": "\tprotected InputStream getStreamFromAssets(String imageUri, Object extra) throws IOException {\t\tString filePath = Scheme.ASSETS.crop(imageUri);\t\treturn context.getAssets().open(filePath);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/download/BaseImageDownloader.java", "stars": "74", "class": {"name": "BaseImageDownloader", "extends": null, "implements": ["ImageDownloader"], "modifiers": ["public"]}}, {"method_name": "getStreamFromDrawable", "params": ["String", "Object"], "throws": null, "modifiers": ["protected"], "return_type": "InputStream", "snippet": "\tprotected InputStream getStreamFromDrawable(String imageUri, Object extra) {\t\tString drawableIdString = Scheme.DRAWABLE.crop(imageUri);\t\tint drawableId = Integer.parseInt(drawableIdString);\t\tBitmapDrawable drawable = (BitmapDrawable) context.getResources().getDrawable(drawableId);\t\tBitmap bitmap = drawable.getBitmap();\t\tByteArrayOutputStream os = new ByteArrayOutputStream();\t\tbitmap.compress(CompressFormat.PNG, 0, os);\t\treturn new ByteArrayInputStream(os.toByteArray());\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/download/BaseImageDownloader.java", "stars": "74", "class": {"name": "BaseImageDownloader", "extends": null, "implements": ["ImageDownloader"], "modifiers": ["public"]}}, {"method_name": "getStreamFromOtherSource", "params": ["String", "Object"], "throws": ["IOException"], "modifiers": ["protected"], "return_type": "InputStream", "snippet": "\tprotected InputStream getStreamFromOtherSource(String imageUri, Object extra) throws IOException {\t\tthrow new UnsupportedOperationException(String.format(ERROR_UNSUPPORTED_SCHEME, imageUri));\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/download/BaseImageDownloader.java", "stars": "74", "class": {"name": "BaseImageDownloader", "extends": null, "implements": ["ImageDownloader"], "modifiers": ["public"]}}, {"method_name": "adapt", "params": ["MemorySection"], "throws": null, "modifiers": ["public"], "return_type": "Items", "snippet": "    public Items adapt(MemorySection section) {        if (section == null) return new Items();        Set<String> keys = section.getKeys(false);        if (keys.isEmpty()) return new Items();        List<ItemStack> itemStacks = new ArrayList<>();        for (String key : keys) {            ConfigurationSection configurationSection = section.getConfigurationSection(key);            ItemStack stack = ADAPTER.adapt(configurationSection, MemorySection.class, ItemStack.class);            if (stack == null) continue;            itemStacks.add(stack);        }        Items items = new Items();        if (!itemStacks.isEmpty())            items.setSection(itemStacks);        return items;    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/adapter/MemorySectionToItemsAdapter.java", "stars": "2", "class": {"name": "MemorySectionToItemsAdapter", "extends": null, "implements": ["ObjectAdapter"], "modifiers": ["public"]}}, {"method_name": "readHeader", "params": [], "throws": ["IOException"], "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int readHeader() throws IOException {        short LZO_LIBRARY_VERSION = 0x2060;        Log LOG = LogFactory.getLog(LzopInputStream.class);        byte[] LZOP_MAGIC = new byte[]{                -119, 'L', 'Z', 'O', 0, '\\r', '\\n', '\\032', '\\n'};        byte[] buf = new byte[9];        readBytes(buf, 0, 9);        if (!Arrays.equals(buf, LZOP_MAGIC)) {            throw new IOException(\"Invalid LZO header\");        }        Arrays.fill(buf, (byte) 0);        Adler32 adler = new Adler32();        CRC32 crc32 = new CRC32();        int hitem = readHeaderItem(buf, 2, adler, crc32); // lzop version        if (hitem > LzopConstants.LZOP_VERSION) {            LOG.debug(\"Compressed with later version of lzop: \"                    + Integer.toHexString(hitem) + \" (expected 0x\"                    + Integer.toHexString(LzopConstants.LZOP_VERSION) + \")\");        }        hitem = readHeaderItem(buf, 2, adler, crc32); // lzo library version        if (hitem > LZO_LIBRARY_VERSION) {            throw new IOException(\"Compressed with incompatible lzo version: 0x\"                    + Integer.toHexString(hitem) + \" (expected 0x\"                    + Integer.toHexString(LzoVersion.LZO_LIBRARY_VERSION) + \")\");        }        hitem = readHeaderItem(buf, 2, adler, crc32); // lzop extract version        if (hitem > LzopConstants.LZOP_VERSION) {            throw new IOException(\"Compressed with incompatible lzop version: 0x\"                    + Integer.toHexString(hitem) + \" (expected 0x\"                    + Integer.toHexString(LzopConstants.LZOP_VERSION) + \")\");        }        hitem = readHeaderItem(buf, 1, adler, crc32); // method        switch (hitem) {            case LzopConstants.M_LZO1X_1:            case LzopConstants.M_LZO1X_1_15:            case LzopConstants.M_LZO1X_999:                break;            default:                throw new IOException(\"Invalid strategy \" + Integer.toHexString(hitem));        }        readHeaderItem(buf, 1, adler, crc32); // ignore level        // flags        int flags = readHeaderItem(buf, 4, adler, crc32);        boolean useCRC32 = (flags & LzopConstants.F_H_CRC32) != 0;        boolean extraField = (flags & LzopConstants.F_H_EXTRA_FIELD) != 0;        if((flags & LzopConstants.F_MULTIPART) != 0) {            throw new IOException(\"Multipart lzop not supported\");        }        if((flags & LzopConstants.F_H_FILTER) != 0) {            throw new IOException(\"lzop filter not supported\");        }        if((flags & LzopConstants.F_RESERVED) != 0) {            throw new IOException(\"Unknown flags in header\");        }        // known !F_H_FILTER, so no optional block        readHeaderItem(buf, 4, adler, crc32); // ignore mode        readHeaderItem(buf, 4, adler, crc32); // ignore mtime        readHeaderItem(buf, 4, adler, crc32); // ignore gmtdiff        hitem = readHeaderItem(buf, 1, adler, crc32); // fn len        if (hitem > 0) {            byte[] tmp = (hitem > buf.length) ? new byte[hitem] : buf;            readHeaderItem(tmp, hitem, adler, crc32); // skip filename        }        int checksum = (int) (useCRC32 ? crc32.getValue() : adler.getValue());        hitem = readHeaderItem(buf, 4, adler, crc32); // read checksum        if (hitem != checksum) {            throw new IOException(\"Invalid header checksum: \"                    + Long.toHexString(checksum) + \" (expected 0x\"                    + Integer.toHexString(hitem) + \")\");        }        if (extraField) { // lzop 1.08 ultimately ignores this            LOG.debug(\"Extra header field not processed\");            adler.reset();            crc32.reset();            hitem = readHeaderItem(buf, 4, adler, crc32);            readHeaderItem(new byte[hitem], hitem, adler, crc32);            checksum = (int) (useCRC32 ? crc32.getValue() : adler.getValue());            if (checksum != readHeaderItem(buf, 4, adler, crc32)) {                throw new IOException(\"Invalid checksum for extra header field\");            }        }        return flags;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/reader/ExpandLzopInputStream.java", "stars": "23", "class": {"name": "ExpandLzopInputStream", "extends": "LzopInputStream", "implements": null, "modifiers": ["public"]}}, {"method_name": "readHeaderItem", "params": ["byte", "int", "Adler32", "CRC32"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "int", "snippet": "    private int readHeaderItem(@Nonnull byte[] buf, @Nonnegative int len, @Nonnull Adler32 adler, @Nonnull CRC32 crc32) throws IOException {        int ret = readInt(buf, len);        adler.update(buf, 0, len);        crc32.update(buf, 0, len);        Arrays.fill(buf, (byte) 0);        return ret;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/reader/ExpandLzopInputStream.java", "stars": "23", "class": {"name": "ExpandLzopInputStream", "extends": "LzopInputStream", "implements": null, "modifiers": ["public"]}}, {"method_name": "readInt", "params": ["byte", "int"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "int", "snippet": "    private int readInt(@Nonnull byte[] buf, @Nonnegative int len)            throws IOException {        readBytes(buf, 0, len);        int ret = (0xFF & buf[0]) << 24;        ret |= (0xFF & buf[1]) << 16;        ret |= (0xFF & buf[2]) << 8;        ret |= (0xFF & buf[3]);        return (len > 3) ? ret : (ret >>> (8 * (4 - len)));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/unstructuredstorage/reader/ExpandLzopInputStream.java", "stars": "23", "class": {"name": "ExpandLzopInputStream", "extends": "LzopInputStream", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //\u521b\u5efaRunnable\u63a5\u53e3\u7684\u5b9e\u73b0\u7c7b\u5bf9\u8c61        RunnableImpl run = new RunnableImpl();        //\u521b\u5efaThread\u7c7b\u5bf9\u8c61,\u6784\u9020\u65b9\u6cd5\u4e2d\u4f20\u9012Runnable\u63a5\u53e3\u7684\u5b9e\u73b0\u7c7b\u5bf9\u8c61        Thread t0 = new Thread(run);        Thread t1 = new Thread(run);        Thread t2 = new Thread(run);        //\u8c03\u7528start\u65b9\u6cd5\u5f00\u542f\u591a\u7ebf\u7a0b        t0.start();        t1.start();        t2.start();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/17.%E3%80%90%E7%BA%BF%E7%A8%8B%E3%80%81%E5%90%8C%E6%AD%A5%E3%80%91-%E7%AC%94%E8%AE%B0/code/06_Thread/src/com/itheima/demo09/Lock/Demo01Ticket.java", "stars": "2", "class": {"name": "Demo01Ticket", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOrderByClause", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOrderByClause(String orderByClause) {        this.orderByClause = orderByClause;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "UserPasswordDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOrderByClause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOrderByClause() {        return orderByClause;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "UserPasswordDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDistinct", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDistinct(boolean distinct) {        this.distinct = distinct;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "UserPasswordDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isDistinct", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isDistinct() {        return distinct;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "UserPasswordDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOredCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criteria>", "snippet": "    public List<Criteria> getOredCriteria() {        return oredCriteria;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "UserPasswordDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "or", "params": ["Criteria"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void or(Criteria criteria) {        oredCriteria.add(criteria);    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "UserPasswordDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "or", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "    public Criteria or() {        Criteria criteria = createCriteriaInternal();        oredCriteria.add(criteria);        return criteria;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "UserPasswordDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "    public Criteria createCriteria() {        Criteria criteria = createCriteriaInternal();        if (oredCriteria.size() == 0) {            oredCriteria.add(criteria);        }        return criteria;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "UserPasswordDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCriteriaInternal", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Criteria", "snippet": "    protected Criteria createCriteriaInternal() {        Criteria criteria = new Criteria();        return criteria;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "UserPasswordDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clear() {        oredCriteria.clear();        orderByClause = null;        distinct = false;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "UserPasswordDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isValid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isValid() {            return criteria.size() > 0;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getAllCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criterion>", "snippet": "        public List<Criterion> getAllCriteria() {            return criteria;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criterion>", "snippet": "        public List<Criterion> getCriteria() {            return criteria;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition) {            if (condition == null) {                throw new RuntimeException(\"Value for condition cannot be null\");            }            criteria.add(new Criterion(condition));        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String", "Object", "String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition, Object value, String property) {            if (value == null) {                throw new RuntimeException(\"Value for \" + property + \" cannot be null\");            }            criteria.add(new Criterion(condition, value));        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String", "Object", "Object", "String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition, Object value1, Object value2, String property) {            if (value1 == null || value2 == null) {                throw new RuntimeException(\"Between values for \" + property + \" cannot be null\");            }            criteria.add(new Criterion(condition, value1, value2));        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIsNull() {            addCriterion(\"id is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIsNotNull() {            addCriterion(\"id is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdEqualTo(Integer value) {            addCriterion(\"id =\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotEqualTo(Integer value) {            addCriterion(\"id <>\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdGreaterThan(Integer value) {            addCriterion(\"id >\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdGreaterThanOrEqualTo(Integer value) {            addCriterion(\"id >=\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdLessThan(Integer value) {            addCriterion(\"id <\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdLessThanOrEqualTo(Integer value) {            addCriterion(\"id <=\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIn(List<Integer> values) {            addCriterion(\"id in\", values, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotIn(List<Integer> values) {            addCriterion(\"id not in\", values, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdBetween(Integer value1, Integer value2) {            addCriterion(\"id between\", value1, value2, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotBetween(Integer value1, Integer value2) {            addCriterion(\"id not between\", value1, value2, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEncrptPasswordIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEncrptPasswordIsNull() {            addCriterion(\"encrpt_password is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEncrptPasswordIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEncrptPasswordIsNotNull() {            addCriterion(\"encrpt_password is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEncrptPasswordEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEncrptPasswordEqualTo(String value) {            addCriterion(\"encrpt_password =\", value, \"encrptPassword\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEncrptPasswordNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEncrptPasswordNotEqualTo(String value) {            addCriterion(\"encrpt_password <>\", value, \"encrptPassword\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEncrptPasswordGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEncrptPasswordGreaterThan(String value) {            addCriterion(\"encrpt_password >\", value, \"encrptPassword\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEncrptPasswordGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEncrptPasswordGreaterThanOrEqualTo(String value) {            addCriterion(\"encrpt_password >=\", value, \"encrptPassword\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEncrptPasswordLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEncrptPasswordLessThan(String value) {            addCriterion(\"encrpt_password <\", value, \"encrptPassword\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEncrptPasswordLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEncrptPasswordLessThanOrEqualTo(String value) {            addCriterion(\"encrpt_password <=\", value, \"encrptPassword\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEncrptPasswordLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEncrptPasswordLike(String value) {            addCriterion(\"encrpt_password like\", value, \"encrptPassword\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEncrptPasswordNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEncrptPasswordNotLike(String value) {            addCriterion(\"encrpt_password not like\", value, \"encrptPassword\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEncrptPasswordIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEncrptPasswordIn(List<String> values) {            addCriterion(\"encrpt_password in\", values, \"encrptPassword\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEncrptPasswordNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEncrptPasswordNotIn(List<String> values) {            addCriterion(\"encrpt_password not in\", values, \"encrptPassword\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEncrptPasswordBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEncrptPasswordBetween(String value1, String value2) {            addCriterion(\"encrpt_password between\", value1, value2, \"encrptPassword\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andEncrptPasswordNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andEncrptPasswordNotBetween(String value1, String value2) {            addCriterion(\"encrpt_password not between\", value1, value2, \"encrptPassword\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUserIdIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUserIdIsNull() {            addCriterion(\"user_id is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUserIdIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUserIdIsNotNull() {            addCriterion(\"user_id is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUserIdEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUserIdEqualTo(Integer value) {            addCriterion(\"user_id =\", value, \"userId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUserIdNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUserIdNotEqualTo(Integer value) {            addCriterion(\"user_id <>\", value, \"userId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUserIdGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUserIdGreaterThan(Integer value) {            addCriterion(\"user_id >\", value, \"userId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUserIdGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUserIdGreaterThanOrEqualTo(Integer value) {            addCriterion(\"user_id >=\", value, \"userId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUserIdLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUserIdLessThan(Integer value) {            addCriterion(\"user_id <\", value, \"userId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUserIdLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUserIdLessThanOrEqualTo(Integer value) {            addCriterion(\"user_id <=\", value, \"userId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUserIdIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUserIdIn(List<Integer> values) {            addCriterion(\"user_id in\", values, \"userId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUserIdNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUserIdNotIn(List<Integer> values) {            addCriterion(\"user_id not in\", values, \"userId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUserIdBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUserIdBetween(Integer value1, Integer value2) {            addCriterion(\"user_id between\", value1, value2, \"userId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andUserIdNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andUserIdNotBetween(Integer value1, Integer value2) {            addCriterion(\"user_id not between\", value1, value2, \"userId\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getCondition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getCondition() {            return condition;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getValue() {            return value;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSecondValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getSecondValue() {            return secondValue;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isNoValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isNoValue() {            return noValue;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isSingleValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isSingleValue() {            return singleValue;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isBetweenValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isBetweenValue() {            return betweenValue;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isListValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isListValue() {            return listValue;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getTypeHandler", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getTypeHandler() {            return typeHandler;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserPasswordDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "autocompleteSearch", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "List<GardenField>", "snippet": "    public List<GardenField> autocompleteSearch(@NotNull String partialSearchString) {        FullTextEntityManager fullTextEntityManager            = Search.getFullTextEntityManager(entityManager);        QueryBuilder queryBuilder = fullTextEntityManager.getSearchFactory()            .buildQueryBuilder()            .forEntity(GardenField.class)            .get();        BooleanJunction<?> junction = queryBuilder.bool();        createNameAndCityQuery(queryBuilder, junction, partialSearchString);        createDeletedNotNullQuery(queryBuilder, junction);        FullTextQuery fullTextQuery = fullTextEntityManager            .createFullTextQuery(junction.createQuery(), GardenField.class)            .setMaxResults(5);        return fullTextQuery.getResultList();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/repository/search/impl/GardenFieldSearchRepositoryImpl.java", "stars": "2", "class": {"name": "GardenFieldSearchRepositoryImpl", "extends": null, "implements": ["GardenFieldSearchRepository"], "modifiers": ["public"]}}, {"method_name": "filter", "params": ["Pageable", "GardenFieldFilterCriteria"], "throws": null, "modifiers": ["public"], "return_type": "Page<GardenField>", "snippet": "    public Page<GardenField> filter(Pageable pageable, @NotNull GardenFieldFilterCriteria gardenFieldFilterCriteria) {        FullTextEntityManager fullTextEntityManager            = Search.getFullTextEntityManager(entityManager);        QueryBuilder queryBuilder = fullTextEntityManager.getSearchFactory()            .buildQueryBuilder().forEntity(GardenField.class).get();        Query combinedQuery = this.buildCombinedQuery(queryBuilder, gardenFieldFilterCriteria);        LOGGER.debug(\"calculated filter query: \" + combinedQuery);        FullTextQuery fullTextQuery = fullTextEntityManager            .createFullTextQuery(combinedQuery, GardenField.class);        List<GardenField> gardenFields = fullTextQuery.getResultList();        //Remove all gardenfields that have leasings in search timeframe.        if (gardenFieldFilterCriteria.getLeasingTimeFrom() != null && gardenFieldFilterCriteria.getLeasingTimeTo() != null) {            gardenFields = gardenFields.stream().filter(gardenField -> isGardenFieldBookableBetween(gardenField, gardenFieldFilterCriteria.getLeasingTimeFrom(), gardenFieldFilterCriteria.getLeasingTimeTo())).collect(Collectors.toList());        }        return this.convertListToPage(pageable, gardenFields);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/repository/search/impl/GardenFieldSearchRepositoryImpl.java", "stars": "2", "class": {"name": "GardenFieldSearchRepositoryImpl", "extends": null, "implements": ["GardenFieldSearchRepository"], "modifiers": ["public"]}}, {"method_name": "buildCombinedQuery", "params": ["QueryBuilder", "GardenFieldFilterCriteria"], "throws": null, "modifiers": ["private"], "return_type": "Query", "snippet": "    private Query buildCombinedQuery(@NotNull final QueryBuilder queryBuilder,                                     @NotNull final GardenFieldFilterCriteria gardenFieldFilterCriteria) {        BooleanJunction<?> junction = queryBuilder.bool();        createMinPriceQuery(queryBuilder, junction, gardenFieldFilterCriteria.getMinPricePerM2());        createMaxPriceQuery(queryBuilder, junction, gardenFieldFilterCriteria.getMaxPricePerM2());        createMinSizeQuery(queryBuilder, junction, gardenFieldFilterCriteria.getSizeInM2LowerBound());        createMaxSizeQuery(queryBuilder, junction, gardenFieldFilterCriteria.getSizeInM2UpperBound());        createRoofedQuery(queryBuilder, junction, gardenFieldFilterCriteria.getRoofed());        createSpatialQuery(queryBuilder, junction, gardenFieldFilterCriteria.getLocationFilterCriteria());        createNameAndCityAndDescriptionQuery(queryBuilder, junction, gardenFieldFilterCriteria.getKeywords());        createWaterQuery(queryBuilder, junction, gardenFieldFilterCriteria.getWater());        createElectricityQuery(queryBuilder, junction, gardenFieldFilterCriteria.getElectricity());        createHighQuery(queryBuilder, junction, gardenFieldFilterCriteria.getHigh());        createGlassHouseQuery(queryBuilder, junction, gardenFieldFilterCriteria.getGlassHouse());        createDeletedNotNullQuery(queryBuilder, junction);        return junction.createQuery();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/repository/search/impl/GardenFieldSearchRepositoryImpl.java", "stars": "2", "class": {"name": "GardenFieldSearchRepositoryImpl", "extends": null, "implements": ["GardenFieldSearchRepository"], "modifiers": ["public"]}}, {"method_name": "createDeletedNotNullQuery", "params": ["QueryBuilder", "BooleanJunction<?>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void createDeletedNotNullQuery(QueryBuilder queryBuilder, BooleanJunction<?> junction) {        Query notDeletedQuery = queryBuilder            .keyword()            .onFields(\"deleted\")            .matching(null)            .createQuery();        junction.must(notDeletedQuery);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/repository/search/impl/GardenFieldSearchRepositoryImpl.java", "stars": "2", "class": {"name": "GardenFieldSearchRepositoryImpl", "extends": null, "implements": ["GardenFieldSearchRepository"], "modifiers": ["public"]}}, {"method_name": "convertListToPage", "params": ["Pageable", "List<GardenField>"], "throws": null, "modifiers": ["private"], "return_type": "Page<GardenField>", "snippet": "    private Page<GardenField> convertListToPage(@NotNull Pageable pageable, @Nullable List<GardenField> gardenFields) {        if (gardenFields == null || gardenFields.isEmpty()) {            return Page.empty(pageable);        }        int start = (int) pageable.getOffset();        int end = Math.min((start + pageable.getPageSize()), gardenFields.size());        return new PageImpl<>(gardenFields.subList(start, end), pageable, gardenFields.size());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/repository/search/impl/GardenFieldSearchRepositoryImpl.java", "stars": "2", "class": {"name": "GardenFieldSearchRepositoryImpl", "extends": null, "implements": ["GardenFieldSearchRepository"], "modifiers": ["public"]}}, {"method_name": "createMinPriceQuery", "params": ["QueryBuilder", "BooleanJunction<?>", "Double"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void createMinPriceQuery(@NotNull QueryBuilder queryBuilder, BooleanJunction<?> junction,                                     Double minPrice) {        if (minPrice != null) {            Query priceQuery = queryBuilder                .range()                .onField(\"pricePerMonth\")                .above(minPrice)                .createQuery();            junction.must(priceQuery);        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/repository/search/impl/GardenFieldSearchRepositoryImpl.java", "stars": "2", "class": {"name": "GardenFieldSearchRepositoryImpl", "extends": null, "implements": ["GardenFieldSearchRepository"], "modifiers": ["public"]}}, {"method_name": "createMaxPriceQuery", "params": ["QueryBuilder", "BooleanJunction<?>", "Double"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void createMaxPriceQuery(@NotNull QueryBuilder queryBuilder, BooleanJunction<?> junction,                                     Double maxPrice) {        if (maxPrice != null) {            Query priceQuery = queryBuilder                .range()                .onField(\"pricePerMonth\")                .below(maxPrice)                .createQuery();            junction.must(priceQuery);        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/repository/search/impl/GardenFieldSearchRepositoryImpl.java", "stars": "2", "class": {"name": "GardenFieldSearchRepositoryImpl", "extends": null, "implements": ["GardenFieldSearchRepository"], "modifiers": ["public"]}}, {"method_name": "createMinSizeQuery", "params": ["QueryBuilder", "BooleanJunction<?>", "Double"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void createMinSizeQuery(@NotNull QueryBuilder queryBuilder, BooleanJunction<?> junction,                                    Double minSize) {        if (minSize != null) {            Query priceQuery = queryBuilder                .range()                .onField(\"sizeInM2\")                .above(minSize)                .createQuery();            junction.must(priceQuery);        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/repository/search/impl/GardenFieldSearchRepositoryImpl.java", "stars": "2", "class": {"name": "GardenFieldSearchRepositoryImpl", "extends": null, "implements": ["GardenFieldSearchRepository"], "modifiers": ["public"]}}, {"method_name": "createMaxSizeQuery", "params": ["QueryBuilder", "BooleanJunction<?>", "Double"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void createMaxSizeQuery(@NotNull QueryBuilder queryBuilder, BooleanJunction<?> junction,                                    Double maxSize) {        if (maxSize != null) {            Query sizeQuery = queryBuilder                .range()                .onField(\"sizeInM2\")                .below(maxSize)                .createQuery();            junction.must(sizeQuery);        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/repository/search/impl/GardenFieldSearchRepositoryImpl.java", "stars": "2", "class": {"name": "GardenFieldSearchRepositoryImpl", "extends": null, "implements": ["GardenFieldSearchRepository"], "modifiers": ["public"]}}, {"method_name": "createRoofedQuery", "params": ["QueryBuilder", "BooleanJunction<?>", "Boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void createRoofedQuery(@NotNull QueryBuilder queryBuilder, BooleanJunction<?> junction, Boolean roofed) {        if (roofed != null) {            Query roofedQuery = queryBuilder                .keyword()                .onFields(\"roofed\")                .matching(roofed)                .createQuery();            junction.must(roofedQuery);        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/repository/search/impl/GardenFieldSearchRepositoryImpl.java", "stars": "2", "class": {"name": "GardenFieldSearchRepositoryImpl", "extends": null, "implements": ["GardenFieldSearchRepository"], "modifiers": ["public"]}}, {"method_name": "createSpatialQuery", "params": ["QueryBuilder", "BooleanJunction<?>", "LocationFilterCriteria"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void createSpatialQuery(@NotNull QueryBuilder queryBuilder, BooleanJunction<?> junction, LocationFilterCriteria locationFilterCriteria) {        if (locationFilterCriteria != null && locationFilterCriteria.checkNonNull()) {            Query locationQuery = queryBuilder                .spatial()                .within(locationFilterCriteria.getRadiusInKM(), Unit.KM)                .ofLatitude(locationFilterCriteria.getLatitude())                .andLongitude(locationFilterCriteria.getLongitude())                .createQuery();            junction.must(locationQuery);        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/repository/search/impl/GardenFieldSearchRepositoryImpl.java", "stars": "2", "class": {"name": "GardenFieldSearchRepositoryImpl", "extends": null, "implements": ["GardenFieldSearchRepository"], "modifiers": ["public"]}}, {"method_name": "createNameAndCityAndDescriptionQuery", "params": ["QueryBuilder", "BooleanJunction<?>", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void createNameAndCityAndDescriptionQuery(@NotNull final QueryBuilder queryBuilder,                                                      @NotNull final BooleanJunction<?> junction,                                                      @Nullable final String searchString) {        if (searchString != null) {            Query descriptionQuery = queryBuilder                .keyword()                .fuzzy()                .withPrefixLength(2)                .withEditDistanceUpTo(2)                .onFields(\"name\", \"city\", \"description\")                .matching(searchString)                .createQuery();            junction.must(descriptionQuery);        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/repository/search/impl/GardenFieldSearchRepositoryImpl.java", "stars": "2", "class": {"name": "GardenFieldSearchRepositoryImpl", "extends": null, "implements": ["GardenFieldSearchRepository"], "modifiers": ["public"]}}, {"method_name": "createNameAndCityQuery", "params": ["QueryBuilder", "BooleanJunction<?>", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void createNameAndCityQuery(@NotNull final QueryBuilder queryBuilder,                                        @NotNull final BooleanJunction<?> junction,                                        @Nullable final String searchString) {        if (searchString != null) {            Query descriptionQuery = queryBuilder                .keyword()                .fuzzy()                .withPrefixLength(3)                .withEditDistanceUpTo(2)                .onFields(\"name\", \"city\")                .matching(searchString)                .createQuery();            junction.must(descriptionQuery);        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/repository/search/impl/GardenFieldSearchRepositoryImpl.java", "stars": "2", "class": {"name": "GardenFieldSearchRepositoryImpl", "extends": null, "implements": ["GardenFieldSearchRepository"], "modifiers": ["public"]}}, {"method_name": "createWaterQuery", "params": ["QueryBuilder", "BooleanJunction<?>", "Boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void createWaterQuery(QueryBuilder queryBuilder, BooleanJunction<?> junction, Boolean water) {        if (water != null) {            Query waterQuery = queryBuilder                .keyword()                .onFields(\"water\")                .matching(water)                .createQuery();            junction.must(waterQuery);        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/repository/search/impl/GardenFieldSearchRepositoryImpl.java", "stars": "2", "class": {"name": "GardenFieldSearchRepositoryImpl", "extends": null, "implements": ["GardenFieldSearchRepository"], "modifiers": ["public"]}}, {"method_name": "createElectricityQuery", "params": ["QueryBuilder", "BooleanJunction<?>", "Boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void createElectricityQuery(QueryBuilder queryBuilder, BooleanJunction<?> junction, Boolean electricity) {        if (electricity != null) {            Query electricityQuery = queryBuilder                .keyword()                .onFields(\"electricity\")                .matching(electricity)                .createQuery();            junction.must(electricityQuery);        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/repository/search/impl/GardenFieldSearchRepositoryImpl.java", "stars": "2", "class": {"name": "GardenFieldSearchRepositoryImpl", "extends": null, "implements": ["GardenFieldSearchRepository"], "modifiers": ["public"]}}, {"method_name": "createHighQuery", "params": ["QueryBuilder", "BooleanJunction<?>", "Boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void createHighQuery(QueryBuilder queryBuilder, BooleanJunction<?> junction, Boolean high) {        if (high != null) {            Query highQuery = queryBuilder                .keyword()                .onFields(\"high\")                .matching(high)                .createQuery();            junction.must(highQuery);        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/repository/search/impl/GardenFieldSearchRepositoryImpl.java", "stars": "2", "class": {"name": "GardenFieldSearchRepositoryImpl", "extends": null, "implements": ["GardenFieldSearchRepository"], "modifiers": ["public"]}}, {"method_name": "createGlassHouseQuery", "params": ["QueryBuilder", "BooleanJunction<?>", "Boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void createGlassHouseQuery(QueryBuilder queryBuilder, BooleanJunction<?> junction, Boolean glassHouse) {        if (glassHouse != null) {            Query glassHouseQuery = queryBuilder                .keyword()                .onFields(\"glassHouse\")                .matching(glassHouse)                .createQuery();            junction.must(glassHouseQuery);        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/repository/search/impl/GardenFieldSearchRepositoryImpl.java", "stars": "2", "class": {"name": "GardenFieldSearchRepositoryImpl", "extends": null, "implements": ["GardenFieldSearchRepository"], "modifiers": ["public"]}}, {"method_name": "isGardenFieldBookableBetween", "params": ["GardenField", "Instant", "Instant"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isGardenFieldBookableBetween(GardenField gardenField, Instant from, Instant to) {        javax.persistence.Query query = entityManager.createQuery(\"SELECT l.id FROM Leasing l \" +            \"WHERE l.gardenField.id = :gardenFieldId \" +            \"AND l.status = 'RESERVED' AND ((:from <= l.from AND l.from <= :to ) \" +            \"OR ( :from <= l.to  AND l.to <= :to) OR (l.from <= :from AND :to <= l.to ))\")            .setParameter(\"gardenFieldId\", gardenField.getId())            .setParameter(\"from\", from)            .setParameter(\"to\", to)            .setMaxResults(1);        return !query.getResultStream().findAny().isPresent();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/repository/search/impl/GardenFieldSearchRepositoryImpl.java", "stars": "2", "class": {"name": "GardenFieldSearchRepositoryImpl", "extends": null, "implements": ["GardenFieldSearchRepository"], "modifiers": ["public"]}}, {"method_name": "getParamNames", "params": ["Method"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<String>", "snippet": "  public static List<String> getParamNames(Method method) {    return getParameterNames(method);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/ParamNameUtil.java", "stars": "15", "class": {"name": "ParamNameUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getParamNames", "params": ["Constructor<?>"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<String>", "snippet": "  public static List<String> getParamNames(Constructor<?> constructor) {    return getParameterNames(constructor);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/ParamNameUtil.java", "stars": "15", "class": {"name": "ParamNameUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getParameterNames", "params": ["Executable"], "throws": null, "modifiers": ["private", "static"], "return_type": "List<String>", "snippet": "  private static List<String> getParameterNames(Executable executable) {    return Arrays.stream(executable.getParameters()).map(Parameter::getName).collect(Collectors.toList());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/ParamNameUtil.java", "stars": "15", "class": {"name": "ParamNameUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveCollection", "params": ["PropertyTokenizer", "Object"], "throws": null, "modifiers": ["protected"], "return_type": "Object", "snippet": "  protected Object resolveCollection(PropertyTokenizer prop, Object object) {    if (\"\".equals(prop.getName())) {      return object;    } else {      return metaObject.getValue(prop.getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/wrapper/BaseWrapper.java", "stars": "15", "class": {"name": "BaseWrapper", "extends": null, "implements": ["ObjectWrapper"], "modifiers": ["public", "abstract"]}}, {"method_name": "getCollectionValue", "params": ["PropertyTokenizer", "Object"], "throws": null, "modifiers": ["protected"], "return_type": "Object", "snippet": "  protected Object getCollectionValue(PropertyTokenizer prop, Object collection) {    if (collection instanceof Map) {      return ((Map) collection).get(prop.getIndex());    } else {      int i = Integer.parseInt(prop.getIndex());      if (collection instanceof List) {        return ((List) collection).get(i);      } else if (collection instanceof Object[]) {        return ((Object[]) collection)[i];      } else if (collection instanceof char[]) {        return ((char[]) collection)[i];      } else if (collection instanceof boolean[]) {        return ((boolean[]) collection)[i];      } else if (collection instanceof byte[]) {        return ((byte[]) collection)[i];      } else if (collection instanceof double[]) {        return ((double[]) collection)[i];      } else if (collection instanceof float[]) {        return ((float[]) collection)[i];      } else if (collection instanceof int[]) {        return ((int[]) collection)[i];      } else if (collection instanceof long[]) {        return ((long[]) collection)[i];      } else if (collection instanceof short[]) {        return ((short[]) collection)[i];      } else {        throw new ReflectionException(\"The '\" + prop.getName() + \"' property of \" + collection + \" is not a List or Array.\");      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/wrapper/BaseWrapper.java", "stars": "15", "class": {"name": "BaseWrapper", "extends": null, "implements": ["ObjectWrapper"], "modifiers": ["public", "abstract"]}}, {"method_name": "setCollectionValue", "params": ["PropertyTokenizer", "Object", "Object"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void setCollectionValue(PropertyTokenizer prop, Object collection, Object value) {    if (collection instanceof Map) {      ((Map) collection).put(prop.getIndex(), value);    } else {      int i = Integer.parseInt(prop.getIndex());      if (collection instanceof List) {        ((List) collection).set(i, value);      } else if (collection instanceof Object[]) {        ((Object[]) collection)[i] = value;      } else if (collection instanceof char[]) {        ((char[]) collection)[i] = (Character) value;      } else if (collection instanceof boolean[]) {        ((boolean[]) collection)[i] = (Boolean) value;      } else if (collection instanceof byte[]) {        ((byte[]) collection)[i] = (Byte) value;      } else if (collection instanceof double[]) {        ((double[]) collection)[i] = (Double) value;      } else if (collection instanceof float[]) {        ((float[]) collection)[i] = (Float) value;      } else if (collection instanceof int[]) {        ((int[]) collection)[i] = (Integer) value;      } else if (collection instanceof long[]) {        ((long[]) collection)[i] = (Long) value;      } else if (collection instanceof short[]) {        ((short[]) collection)[i] = (Short) value;      } else {        throw new ReflectionException(\"The '\" + prop.getName() + \"' property of \" + collection + \" is not a List or Array.\");      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/wrapper/BaseWrapper.java", "stars": "15", "class": {"name": "BaseWrapper", "extends": null, "implements": ["ObjectWrapper"], "modifiers": ["public", "abstract"]}}, {"method_name": "replaceCount", "params": ["String", "String", "int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String replaceCount(String path, String value, int count, int maxCount) {        value = replacePathReference(value, path);        value =                value                        .replace(\"%current%\", String.valueOf(count))                        .replace(\"%count%\", String.valueOf(maxCount));        return value;    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/ConfigUtil.java", "stars": "3", "class": {"name": "ConfigUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "replacePathReferences", "params": ["T", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "T", "snippet": "    public static <T extends ConfigurationSection> T replacePathReferences(            T section, String basePath) {        if (basePath.startsWith(\".\")) {            basePath = basePath.replaceFirst(\"\\\\.\", \"\");        }        final String path = basePath;        final Function<String, String> replacer =                (input) -> {                    input = input.replaceAll(\"(?<!\\\\.\\\\.)/\", \".\");                    Matcher thisMatcher;                    while ((thisMatcher = THIS_PATH_PATTERN.matcher(input)).matches()) {                        input =                                thisMatcher.group(\"prefix\")                                        + thisMatcher.replaceFirst(                                        replacePathReference(thisMatcher.group(\"path\"), path))                                        + thisMatcher.group(\"suffix\");                    }                    return replaceVariableRefrences(path, input);                };        for (String key : section.getKeys(true)) {            if (section.isString(key)) {                section.set(key, replacer.apply(section.getString(key)));            } else if (section.isList(key)) {                List<String> stringList = section.getStringList(key);                List<String> newList = new ArrayList<>();                for (String item : stringList) {                    newList.add(replacer.apply(item));                }                section.set(key, newList);            }        }        return section;    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/ConfigUtil.java", "stars": "3", "class": {"name": "ConfigUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "replacePathReference", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String replacePathReference(String value, String basePath) {        value = value.replaceAll(\"(?<!\\\\.\\\\.)/\", \".\");        basePath = basePath.replaceAll(\"/\", \".\");        if (value.startsWith(\"this.\")) {            value = value.replaceFirst(\"this\", basePath).replaceFirst(\"^\\\\.\", \"\");        } else if (value.startsWith(\"../\")) {            String[] sections = basePath.split(\"\\\\.\");            basePath = \"\";            for (int i = sections.length - 1; i >= 0; --i) {                if (value.startsWith(\"../\")) {                    value = value.replaceFirst(\"^\\\\.\\\\./\", \"\");                } else {                    basePath = sections[i] + \".\" + basePath.replaceFirst(\"^\\\\.\", \"\");                }            }            value = basePath.replaceFirst(\"\\\\.$\", \"\") + \".\" + value.replaceFirst(\"^\\\\.\", \"\");        }        return value.replaceFirst(\"^\\\\.\", \"\");    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/ConfigUtil.java", "stars": "3", "class": {"name": "ConfigUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "replaceVariableRefrences", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String replaceVariableRefrences(String basePath, String value) {        if (value == null || value.equals(\"\")) {            return value;        }        Matcher matcher = VARIABLE_PATTERN.matcher(value);        if (matcher.matches()) {            String type = matcher.group(1);            String name = replacePathReference(matcher.group(2), basePath);            //            ConfigLoader loader = Quests.getQuestConfigLoader(type);            //            if (loader != null) {            //                try {            //                    return loader.replaceReference(name);            //                } catch (UnsupportedOperationException e) {            //                    RaidCraft.LOGGER.warning(\"The Quest Config loader \" + loader.getSuffix()            // + \" does not support reference replacements!\");            //                }            //            }        }        return value.replaceFirst(\"^\\\\.\", \"\");    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/ConfigUtil.java", "stars": "3", "class": {"name": "ConfigUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFileName", "params": ["ConfigurationSection"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getFileName(ConfigurationSection config) {        if (config == null) return \"NO-FILE\";        return getConfigurationBase(config)                .map(configurationBase -> configurationBase.getFile().getAbsolutePath())                .orElseGet(() -> config.getRoot() != null ? config.getRoot().getName() : \"UNKNOWN-ROOT\");    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/ConfigUtil.java", "stars": "3", "class": {"name": "ConfigUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getConfigurationBase", "params": ["ConfigurationSection"], "throws": null, "modifiers": ["public", "static"], "return_type": "Optional<ConfigurationBase>", "snippet": "    public static Optional<ConfigurationBase> getConfigurationBase(ConfigurationSection config) {        if (config == null) return Optional.empty();        ConfigurationBase base = null;        if (config instanceof ConfigurationBase) {            base = (ConfigurationBase) config;        } else {            Configuration root = config.getRoot();            if (root == null) return Optional.empty();            if (root instanceof ConfigurationBase) {                base = (ConfigurationBase) root;            }        }        return Optional.ofNullable(base);    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/ConfigUtil.java", "stars": "3", "class": {"name": "ConfigUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "saveConfig", "params": ["ConfigurationSection"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void saveConfig(ConfigurationSection config) {        getConfigurationBase(config).ifPresent(ConfigurationBase::save);    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/ConfigUtil.java", "stars": "3", "class": {"name": "ConfigUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "smartCast", "params": ["Type", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "Object", "snippet": "    public static Object smartCast(Type genericType, Object value) {        if (value == null) {            return null;        }        Type[] neededGenerics;        Class target = null;        if (genericType != null && genericType instanceof ParameterizedType) {            ParameterizedType type = (ParameterizedType) genericType;            Type raw = type.getRawType();            if (raw instanceof Class) {                target = (Class) raw;            }            neededGenerics = type.getActualTypeArguments();        } else {            if (genericType instanceof Class) {                target = (Class) genericType;            }            neededGenerics = new Type[0];        }        if (target == null) {            return null;        }        Object ret = null;        for (TypeConversion conversion : typeConversions) {            if ((ret = conversion.handle(target, neededGenerics, value)) != null) {                break;            }        }        return ret;    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/ConfigUtil.java", "stars": "3", "class": {"name": "ConfigUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "registerTypeConversion", "params": ["TypeConversion"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void registerTypeConversion(TypeConversion conversion) {        typeConversions.add(conversion);    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/ConfigUtil.java", "stars": "3", "class": {"name": "ConfigUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "prepareSerialization", "params": ["Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "Object", "snippet": "    public static Object prepareSerialization(Object obj) {        if (obj instanceof Collection) {            obj = new ArrayList((Collection) obj);        }        return obj;    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/ConfigUtil.java", "stars": "3", "class": {"name": "ConfigUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseKeyValueTable", "params": ["List<KeyValueMap>"], "throws": null, "modifiers": ["public", "static"], "return_type": "ConfigurationSection", "snippet": "    public static ConfigurationSection parseKeyValueTable(List<KeyValueMap> map) {        ConfigurationSection configuration = new MemoryConfiguration();        for (KeyValueMap entry : map) {            try {                configuration.set(entry.getDataKey(), Double.parseDouble(entry.getDataValue()));            } catch (NumberFormatException e) {                Boolean value = BooleanUtils.toBooleanObject(entry.getDataValue());                if (value == null) {                    configuration.set(entry.getDataKey(), entry.getDataValue());                } else {                    configuration.set(entry.getDataKey(), value);                }            }        }        return configuration;    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/ConfigUtil.java", "stars": "3", "class": {"name": "ConfigUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLocationFromConfig", "params": ["ConfigurationSection", "Player"], "throws": null, "modifiers": ["public", "static"], "return_type": "Location", "snippet": "    public static Location getLocationFromConfig(ConfigurationSection config, Player player) {        if (config == null) return null;        World world = LocationUtil.getCaseInsensitiveWorld(config.getString(\"world\"));        if (world == null) return null;        return new Location(                world,                config.getInt(\"x\"),                config.getInt(\"y\"),                config.getInt(\"z\"),                (float) config.getDouble(\"yaw\"),                (float) config.getDouble(\"float\"));    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/ConfigUtil.java", "stars": "3", "class": {"name": "ConfigUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLocationFromConfig", "params": ["ConfigurationSection"], "throws": null, "modifiers": ["public", "static"], "return_type": "Location", "snippet": "    public static Location getLocationFromConfig(ConfigurationSection section) {        return getLocationFromConfig(section, null);    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/ConfigUtil.java", "stars": "3", "class": {"name": "ConfigUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadRecursiveConfigs", "params": ["JavaPlugin", "String", "Class<TConfig>", "ConfigLoader<TConfig>"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static <TConfig extends de.exlll.configlib.configs.yaml.YamlConfiguration>    void loadRecursiveConfigs(            JavaPlugin plugin,            String path,            Class<TConfig> configClass,            ConfigLoader<TConfig>... loaders) {        File dir = new File(plugin.getDataFolder(), path);        dir.mkdirs();        loadConfigs(dir, \"\", configClass, Arrays.asList(loaders));    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/ConfigUtil.java", "stars": "3", "class": {"name": "ConfigUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadRecursiveConfigs", "params": ["Path", "Class<TConfig>", "ConfigLoader<TConfig>"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static <TConfig extends de.exlll.configlib.configs.yaml.YamlConfiguration>    void loadRecursiveConfigs(            Path path, Class<TConfig> configClass, ConfigLoader<TConfig>... configLoaders) {        File dir = path.toFile();        dir.mkdirs();        loadConfigs(dir, \"\", configClass, Arrays.asList(configLoaders));    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/ConfigUtil.java", "stars": "3", "class": {"name": "ConfigUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadConfigs", "params": ["File", "String", "Class<TConfig>", "Collection<ConfigLoader>"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static <TConfig extends de.exlll.configlib.configs.yaml.YamlConfiguration>    void loadConfigs(            File baseFolder,            String path,            Class<TConfig> configClass,            Collection<ConfigLoader<TConfig>> loaders) {        for (File file : Objects.requireNonNull(baseFolder.listFiles())) {            String fileName = file.getName();            if (file.isDirectory()) {                loadConfigs(file, path + \".\" + fileName.toLowerCase(), configClass, loaders);            } else {                path = StringUtils.strip(path, \".\");                for (ConfigLoader<TConfig> loader : loaders) {                    try {                        if (loader instanceof ConfiguredConfigLoader) {                            ConfiguredConfigLoader configuredConfigLoader = (ConfiguredConfigLoader) loader;                            if (!configuredConfigLoader.matches(file)) continue;                            configuredConfigLoader.setPath(path);                            String id =                                    path                                            + \".\"                                            + file.getName()                                            .toLowerCase()                                            .replace(configuredConfigLoader.getSuffix(), \"\");                            id = StringUtils.strip(id, \".\");                            TConfig config = configClass.getDeclaredConstructor(Path.class).newInstance(file.toPath());                            config.load();                            loader.loadConfig(                                    id,                                    file,                                    config);                        } else {                            String id = path + \".\" + file.getName().toLowerCase().replace(\".yaml\", \"\").replace(\".yml\", \"\");                            id = StringUtils.strip(id, \".\");                            TConfig config = configClass.getDeclaredConstructor(Path.class).newInstance(file.toPath());                            config.load();                            loader.loadConfig(                                    id,                                    file,                                    config);                        }                    } catch (InstantiationException                            | IllegalAccessException                            | InvocationTargetException                            | NoSuchMethodException e) {                        e.printStackTrace();                    }                }            }        }    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/ConfigUtil.java", "stars": "3", "class": {"name": "ConfigUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"User{\" +                \"id=\" + id +                \", username='\" + username + '\\'' +                \", password='\" + password + '\\'' +                '}';    }", "url": "https://raw.githubusercontent.com/984964551/JavassmDemo/master/src/main/java/wac/domain/Admin.java", "stars": "2", "class": {"name": "Admin", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getId() {        return id;    }", "url": "https://raw.githubusercontent.com/984964551/JavassmDemo/master/src/main/java/wac/domain/Admin.java", "stars": "2", "class": {"name": "Admin", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(int id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/984964551/JavassmDemo/master/src/main/java/wac/domain/Admin.java", "stars": "2", "class": {"name": "Admin", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getUsername", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getUsername() {        return username;    }", "url": "https://raw.githubusercontent.com/984964551/JavassmDemo/master/src/main/java/wac/domain/Admin.java", "stars": "2", "class": {"name": "Admin", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setUsername", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUsername(String username) {        this.username = username;    }", "url": "https://raw.githubusercontent.com/984964551/JavassmDemo/master/src/main/java/wac/domain/Admin.java", "stars": "2", "class": {"name": "Admin", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getPassword", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPassword() {        return password;    }", "url": "https://raw.githubusercontent.com/984964551/JavassmDemo/master/src/main/java/wac/domain/Admin.java", "stars": "2", "class": {"name": "Admin", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setPassword", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPassword(String password) {        this.password = password;    }", "url": "https://raw.githubusercontent.com/984964551/JavassmDemo/master/src/main/java/wac/domain/Admin.java", "stars": "2", "class": {"name": "Admin", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setParameter", "params": ["PreparedStatement", "int", "Long", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setParameter(PreparedStatement ps, int i, Long parameter, JdbcType jdbcType) throws SQLException {    ps.setLong(i, parameter);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/CustomLongTypeHandler.java", "stars": "15", "class": {"name": "CustomLongTypeHandler", "extends": null, "implements": ["TypeHandler"], "modifiers": ["public"]}}, {"method_name": "getResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Long", "snippet": "  public Long getResult(ResultSet rs, String columnName) throws SQLException {    return rs.getLong(columnName);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/CustomLongTypeHandler.java", "stars": "15", "class": {"name": "CustomLongTypeHandler", "extends": null, "implements": ["TypeHandler"], "modifiers": ["public"]}}, {"method_name": "getResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Long", "snippet": "  public Long getResult(ResultSet rs, int columnIndex) throws SQLException {    return rs.getLong(columnIndex);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/CustomLongTypeHandler.java", "stars": "15", "class": {"name": "CustomLongTypeHandler", "extends": null, "implements": ["TypeHandler"], "modifiers": ["public"]}}, {"method_name": "getResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Long", "snippet": "  public Long getResult(CallableStatement cs, int columnIndex) throws SQLException {    return cs.getLong(columnIndex);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/CustomLongTypeHandler.java", "stars": "15", "class": {"name": "CustomLongTypeHandler", "extends": null, "implements": ["TypeHandler"], "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getId() {        return id;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/controller/viewobject/UserVO.java", "stars": "1", "class": {"name": "UserVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Integer id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/controller/viewobject/UserVO.java", "stars": "1", "class": {"name": "UserVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/controller/viewobject/UserVO.java", "stars": "1", "class": {"name": "UserVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/controller/viewobject/UserVO.java", "stars": "1", "class": {"name": "UserVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGender", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Byte", "snippet": "    public Byte getGender() {        return gender;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/controller/viewobject/UserVO.java", "stars": "1", "class": {"name": "UserVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setGender", "params": ["Byte"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGender(Byte gender) {        this.gender = gender;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/controller/viewobject/UserVO.java", "stars": "1", "class": {"name": "UserVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAge", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getAge() {        return age;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/controller/viewobject/UserVO.java", "stars": "1", "class": {"name": "UserVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAge", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAge(Integer age) {        this.age = age;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/controller/viewobject/UserVO.java", "stars": "1", "class": {"name": "UserVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTelphone", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTelphone() {        return telphone;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/controller/viewobject/UserVO.java", "stars": "1", "class": {"name": "UserVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTelphone", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTelphone(String telphone) {        this.telphone = telphone;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/controller/viewobject/UserVO.java", "stars": "1", "class": {"name": "UserVO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getResponseFormattedList", "params": ["String", "ArrayList<Media>"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "ArrayList<Media>", "snippet": "    public ArrayList<Media> getResponseFormattedList(String responseStr, ArrayList<Media> currentList) throws IOException {        ArrayList<Media> formattedData = currentList;        List<butter.droid.base.providers.media.response.models.shows.Show> list = mapper.readValue(responseStr, mapper.getTypeFactory().constructCollectionType(List.class, butter.droid.base.providers.media.response.models.shows.Show.class));        if (!list.isEmpty()) {            formattedData = new TVResponse(list).formatListForPopcorn(currentList, this, getSubsProvider());        }        return formattedData;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/TVProvider.java", "stars": "4", "class": {"name": "TVProvider", "extends": "MediaProvider", "implements": null, "modifiers": ["public"]}}, {"method_name": "getResponseDetailsFormattedList", "params": ["String"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "ArrayList<Media>", "snippet": "    public ArrayList<Media> getResponseDetailsFormattedList(String responseStr) throws IOException {        ShowDetails detail = mapper.readValue(responseStr, ShowDetails.class);        return new TVDetailsReponse().formatDetailForPopcorn(detail, this, getSubsProvider());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/TVProvider.java", "stars": "4", "class": {"name": "TVProvider", "extends": "MediaProvider", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNavigation", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<NavInfo>", "snippet": "    public List<NavInfo> getNavigation() {        List<NavInfo> tabs = new ArrayList<>();        tabs.add(new NavInfo(R.id.tvshow_filter_trending, Filters.Sort.TRENDING, Filters.Order.DESC, ButterApplication.getAppContext().getString(R.string.trending), R.drawable.tvshow_filter_trending));        tabs.add(new NavInfo(R.id.tvshow_filter_popular_now, Filters.Sort.POPULARITY, Filters.Order.DESC, ButterApplication.getAppContext().getString(R.string.popular), R.drawable.tvshow_filter_popular_now));        tabs.add(new NavInfo(R.id.tvshow_filter_top_rated, Filters.Sort.RATING, Filters.Order.DESC, ButterApplication.getAppContext().getString(R.string.top_rated), R.drawable.tvshow_filter_top_rated));        tabs.add(new NavInfo(R.id.tvshow_filter_last_updated, Filters.Sort.DATE, Filters.Order.DESC, ButterApplication.getAppContext().getString(R.string.last_updated), R.drawable.tvshow_filter_last_updated));        tabs.add(new NavInfo(R.id.tvshow_filter_year, Filters.Sort.YEAR, Filters.Order.DESC, ButterApplication.getAppContext().getString(R.string.year), R.drawable.tvshow_filter_year));        tabs.add(new NavInfo(R.id.tvshow_filter_a_to_z, Filters.Sort.ALPHABET, Filters.Order.DESC, ButterApplication.getAppContext().getString(R.string.a_to_z), R.drawable.tvshow_filter_a_to_z));        return tabs;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/TVProvider.java", "stars": "4", "class": {"name": "TVProvider", "extends": "MediaProvider", "implements": null, "modifiers": ["public"]}}, {"method_name": "getGenres", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Genre>", "snippet": "    public List<Genre> getGenres() {        List<Genre> returnList = new ArrayList<>();        returnList.add(new Genre(\"all\", R.string.genre_all));        returnList.add(new Genre(\"action\", R.string.genre_action));        returnList.add(new Genre(\"adventure\", R.string.genre_adventure));        returnList.add(new Genre(\"animation\", R.string.genre_animation));        returnList.add(new Genre(\"comedy\", R.string.genre_comedy));        returnList.add(new Genre(\"crime\", R.string.genre_crime));        returnList.add(new Genre(\"disaster\", R.string.genre_disaster));        returnList.add(new Genre(\"documentary\", R.string.genre_documentary));        returnList.add(new Genre(\"drama\", R.string.genre_drama));        returnList.add(new Genre(\"eastern\", R.string.genre_eastern));        returnList.add(new Genre(\"family\", R.string.genre_family));        returnList.add(new Genre(\"fantasy\", R.string.genre_fantasy));        returnList.add(new Genre(\"fan-film\", R.string.genre_fan_film));        returnList.add(new Genre(\"film-noir\", R.string.genre_film_noir));        returnList.add(new Genre(\"history\", R.string.genre_history));        returnList.add(new Genre(\"holiday\", R.string.genre_holiday));        returnList.add(new Genre(\"horror\", R.string.genre_horror));        returnList.add(new Genre(\"indie\", R.string.genre_indie));        returnList.add(new Genre(\"music\", R.string.genre_music));        returnList.add(new Genre(\"mystery\", R.string.genre_mystery));        returnList.add(new Genre(\"road\", R.string.genre_road));        returnList.add(new Genre(\"romance\", R.string.genre_romance));        returnList.add(new Genre(\"science-fiction\", R.string.genre_sci_fi));        returnList.add(new Genre(\"short\", R.string.genre_short));        returnList.add(new Genre(\"sports\", R.string.genre_sport));        returnList.add(new Genre(\"suspense\", R.string.genre_suspense));        returnList.add(new Genre(\"thriller\", R.string.genre_thriller));        returnList.add(new Genre(\"tv-movie\", R.string.genre_tv_movie));        returnList.add(new Genre(\"war\", R.string.genre_war));        returnList.add(new Genre(\"western\", R.string.genre_western));        return returnList;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/TVProvider.java", "stars": "4", "class": {"name": "TVProvider", "extends": "MediaProvider", "implements": null, "modifiers": ["public"]}}, {"method_name": "getListView", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ListView", "snippet": "    public ListView getListView() {        return new DevicePickerListView(activity);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/DevicePicker.java", "stars": "4", "class": {"name": "DevicePicker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pickDevice", "params": ["ConnectableDevice"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void pickDevice(ConnectableDevice device) {        this.device = device;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/DevicePicker.java", "stars": "4", "class": {"name": "DevicePicker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "cancelPicker", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void cancelPicker() {        if (device != null) {            device.cancelPairing();        }        device = null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/DevicePicker.java", "stars": "4", "class": {"name": "DevicePicker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPickerDialog", "params": ["String", "OnItemClickListener"], "throws": null, "modifiers": ["public"], "return_type": "AlertDialog", "snippet": "    public AlertDialog getPickerDialog(String message, final OnItemClickListener listener) {        final DevicePickerListView view = new DevicePickerListView(activity);        TextView title = (TextView) activity.getLayoutInflater().inflate(android.R.layout.simple_list_item_1, null);        title.setText(message);        final AlertDialog pickerDialog = new AlertDialog.Builder(activity)        .setCustomTitle(title)        .setCancelable(true)        .setView(view)        .create();        view.setOnItemClickListener(new OnItemClickListener () {            @Override            public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,                    long arg3) {                listener.onItemClick(arg0, arg1, arg2, arg3);                pickerDialog.dismiss();            }        });        return pickerDialog;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/DevicePicker.java", "stars": "4", "class": {"name": "DevicePicker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "create", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "ExpressionTemplate", "snippet": "\tpublic static ExpressionTemplate create(String source){\t\treturn new ExpressionTemplate(Parser.parse(source));\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/ExpressionTemplate.java", "stars": "13", "class": {"name": "ExpressionTemplate", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNodes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Ast>", "snippet": "\tpublic List<Ast.Node> getNodes () {\t\treturn nodes;\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/ExpressionTemplate.java", "stars": "13", "class": {"name": "ExpressionTemplate", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "render", "params": ["ExpressionTemplateContext"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "\tpublic Object render (ExpressionTemplateContext context) {\t\treturn AstInterpreter.interpret(this, context);\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/ExpressionTemplate.java", "stars": "13", "class": {"name": "ExpressionTemplate", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "postProcessBeanFactory", "params": ["ConfigurableListableBeanFactory"], "throws": ["BeansException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {        String[] beanNames = beanFactory.getBeanDefinitionNames();        for (String beanName : beanNames) {            processPropertySource(beanName, beanFactory);        }    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdPropertySourcePostProcessor.java", "stars": "4", "class": {"name": "EtcdPropertySourcePostProcessor", "extends": null, "implements": ["BeanFactoryPostProcessor", "EnvironmentAware", "ApplicationContextAware"], "modifiers": ["public"]}}, {"method_name": "processPropertySource", "params": ["String", "ConfigurableListableBeanFactory"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void processPropertySource(String beanName, ConfigurableListableBeanFactory beanFactory) {        if (processedBeanNames.contains(beanName)) {            return;        }        BeanDefinition beanDefinition = beanFactory.getBeanDefinition(beanName);        if (!AnnotatedBeanDefinition.class.isAssignableFrom(beanDefinition.getClass())) {            return;        }        List<EtcdConfigPropertySource> etcdPropertySourceList = buildEtcdPropertySources(beanName, (AnnotatedBeanDefinition) beanDefinition);        for (EtcdConfigPropertySource etcdConfigPropertySource : etcdPropertySourceList) {            addEtcdPropertySource(etcdConfigPropertySource);            addListenerIfAutoRefreshed(etcdConfigPropertySource);        }        processedBeanNames.add(beanName);    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdPropertySourcePostProcessor.java", "stars": "4", "class": {"name": "EtcdPropertySourcePostProcessor", "extends": null, "implements": ["BeanFactoryPostProcessor", "EnvironmentAware", "ApplicationContextAware"], "modifiers": ["public"]}}, {"method_name": "addListenerIfAutoRefreshed", "params": ["EtcdConfigPropertySource"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void addListenerIfAutoRefreshed(EtcdConfigPropertySource oldProperties) {        if (!oldProperties.isAutoRefreshed()) {            return;        }        etcdConfigService.addListener(oldProperties.getDataId(), new UpdateCacheListener() {            @Override            public void receiveConfigInfo(String configInfo) {                MutablePropertySources propertySources = environment.getPropertySources();                Properties properties = ConfigParseUtil.toProperties(configInfo, oldProperties.getType());                EtcdConfigPropertySource newProperties = new EtcdConfigPropertySource(oldProperties.getName(), properties, oldProperties.getDataId(), oldProperties.getType());                newProperties.copy(oldProperties);                //\u66ff\u6362\u914d\u7f6e\u5185\u5bb9                propertySources.replace(newProperties.getName(), newProperties);                LOG.info(\"updateCacheListener replace etcd config,dataId={}\", newProperties.getDataId());            }        });        LOG.info(\"add updateCacheListener dataId={}\", oldProperties.getDataId());    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdPropertySourcePostProcessor.java", "stars": "4", "class": {"name": "EtcdPropertySourcePostProcessor", "extends": null, "implements": ["BeanFactoryPostProcessor", "EnvironmentAware", "ApplicationContextAware"], "modifiers": ["public"]}}, {"method_name": "addEtcdPropertySource", "params": ["EtcdConfigPropertySource"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void addEtcdPropertySource(EtcdConfigPropertySource etcdConfigPropertySource) {        MutablePropertySources propertySources = environment.getPropertySources();        boolean first = etcdConfigPropertySource.isFirst();        String before = etcdConfigPropertySource.getBefore();        String after = etcdConfigPropertySource.getAfter();        boolean hasBefore = !StringUtils.isEmpty(before);        boolean hasAfter = !StringUtils.isEmpty(after);        boolean isRelative = hasBefore || hasAfter;        if (first) {            // \u4f18\u5148\u7ea7\u6700\u9ad8            propertySources.addFirst(etcdConfigPropertySource);        } else if (isRelative) {            //\u8bbe\u7f6e\u4f18\u5148\u7ea7            if (hasBefore) {                propertySources.addBefore(before, etcdConfigPropertySource);            }            if (hasAfter) {                propertySources.addAfter(after, etcdConfigPropertySource);            }        } else {            // \u9ed8\u8ba4\u4f18\u5148\u7ea7\u6700\u4f4e            propertySources.addLast(etcdConfigPropertySource);        }        LOG.info(\"addEtcdPropertySource dataId={}\", etcdConfigPropertySource.getDataId());    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdPropertySourcePostProcessor.java", "stars": "4", "class": {"name": "EtcdPropertySourcePostProcessor", "extends": null, "implements": ["BeanFactoryPostProcessor", "EnvironmentAware", "ApplicationContextAware"], "modifiers": ["public"]}}, {"method_name": "buildEtcdPropertySources", "params": ["String", "AnnotatedBeanDefinition"], "throws": null, "modifiers": ["private"], "return_type": "List<EtcdConfigPropertySource>", "snippet": "    private List<EtcdConfigPropertySource> buildEtcdPropertySources(String beanName, AnnotatedBeanDefinition annotatedBeanDefinition) {        List<Map<String, Object>> annotationAttributesList = getAnnotationAttributesList(annotatedBeanDefinition);        List<EtcdConfigPropertySource> list = new ArrayList<>();        for (Map<String, Object> annotationAttributes : annotationAttributesList) {            //\u89e3\u6790\u6ce8\u89e3\u5185\u5bb9\uff0c\u6839\u636edataId\u83b7\u53d6\u914d\u7f6e\u4fe1\u606f            String dataId = (String) annotationAttributes.get(\"dataId\");            String name = (String) annotationAttributes.get(\"name\");            ConfigType configType = ((ConfigType) annotationAttributes.get(\"type\"));            if (StringUtils.isEmpty(dataId)) {                throw new IllegalArgumentException(\"dataId is null\");            }            String type = ConfigTypeUtil.getTypeWithDataId(configType, dataId);            if (StringUtils.isEmpty(name)) {                name = dataId;            }            //\u4ece\u914d\u7f6e\u4e2d\u5fc3\u52a0\u8f7d\u914d\u7f6e\u5185\u5bb9            String config = etcdConfigService.getConfig(dataId);            if (StringUtils.isEmpty(config)) {                throw new EtcdConfigException(\"config is null,dataId=\" + dataId);            }            Properties properties = ConfigParseUtil.toProperties(config, type);            EtcdConfigPropertySource etcdConfigPropertySource = new EtcdConfigPropertySource(name, properties, dataId, type);            setOther(etcdConfigPropertySource, annotationAttributes);            list.add(etcdConfigPropertySource);        }        return list;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdPropertySourcePostProcessor.java", "stars": "4", "class": {"name": "EtcdPropertySourcePostProcessor", "extends": null, "implements": ["BeanFactoryPostProcessor", "EnvironmentAware", "ApplicationContextAware"], "modifiers": ["public"]}}, {"method_name": "getAnnotationAttributesList", "params": ["AnnotatedBeanDefinition"], "throws": null, "modifiers": ["private"], "return_type": "List<Map>", "snippet": "    private List<Map<String, Object>> getAnnotationAttributesList(AnnotatedBeanDefinition annotatedBeanDefinition) {        List<Map<String, Object>> annotationAttributesList = new LinkedList<>();        AnnotationMetadata metadata = annotatedBeanDefinition.getMetadata();        Set<String> annotationTypes = metadata.getAnnotationTypes();        for (String annotationType : annotationTypes) {            if (EtcdPropertySources.class.getName().equals(annotationType)) {                Map<String, Object> annotationAttributes = metadata                        .getAnnotationAttributes(annotationType);                if (annotationAttributes != null) {                    annotationAttributesList.addAll(Arrays.asList(                            (Map<String, Object>[]) annotationAttributes.get(\"value\")));                }            } else if (EtcdPropertySource.class.getName().equals(annotationType)) {                Map<String, Object> annotationAttributes = metadata.getAnnotationAttributes(annotationType);                annotationAttributesList.add(annotationAttributes);            }        }        return annotationAttributesList;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdPropertySourcePostProcessor.java", "stars": "4", "class": {"name": "EtcdPropertySourcePostProcessor", "extends": null, "implements": ["BeanFactoryPostProcessor", "EnvironmentAware", "ApplicationContextAware"], "modifiers": ["public"]}}, {"method_name": "setOther", "params": ["EtcdConfigPropertySource", "Map<String,Object>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setOther(EtcdConfigPropertySource etcdConfigPropertySource, Map<String, Object> annotationAttributes) {        boolean autoRefreshed = Boolean.TRUE.equals(annotationAttributes.get(\"autoRefreshed\"));        boolean first = Boolean.TRUE.equals(annotationAttributes.get(\"first\"));        String before = (String) annotationAttributes.get(\"before\");        String after = (String) annotationAttributes.get(\"after\");        etcdConfigPropertySource.setAutoRefreshed(autoRefreshed);        etcdConfigPropertySource.setFirst(first);        etcdConfigPropertySource.setBefore(before);        etcdConfigPropertySource.setAfter(after);    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdPropertySourcePostProcessor.java", "stars": "4", "class": {"name": "EtcdPropertySourcePostProcessor", "extends": null, "implements": ["BeanFactoryPostProcessor", "EnvironmentAware", "ApplicationContextAware"], "modifiers": ["public"]}}, {"method_name": "setEnvironment", "params": ["Environment"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEnvironment(Environment environment) {        this.environment = (ConfigurableEnvironment) environment;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdPropertySourcePostProcessor.java", "stars": "4", "class": {"name": "EtcdPropertySourcePostProcessor", "extends": null, "implements": ["BeanFactoryPostProcessor", "EnvironmentAware", "ApplicationContextAware"], "modifiers": ["public"]}}, {"method_name": "setApplicationContext", "params": ["ApplicationContext"], "throws": ["BeansException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {        this.etcdConfigService = applicationContext.getBean(EtcdConfigServiceImpl.BEAN_NAME, EtcdConfigServiceImpl.class);    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdPropertySourcePostProcessor.java", "stars": "4", "class": {"name": "EtcdPropertySourcePostProcessor", "extends": null, "implements": ["BeanFactoryPostProcessor", "EnvironmentAware", "ApplicationContextAware"], "modifiers": ["public"]}}, {"method_name": "onEnable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onEnable() {        originalgamma = mc.gameSettings.gammaSetting;        mc.gameSettings.gammaSetting = 1.5999999E7F;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/visual/FullBright.java", "stars": "12", "class": {"name": "FullBright", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDisable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDisable()    {        mc.gameSettings.gammaSetting = originalgamma;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/visual/FullBright.java", "stars": "12", "class": {"name": "FullBright", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "requestSucceed", "params": ["Context", "Response", "Type"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object requestSucceed(Context context, Response response, Type type) throws Exception {        if (!response.isSuccessful()) {            // \u8fd4\u56de\u54cd\u5e94\u5f02\u5e38            throw new ResponseException(context.getString(R.string.http_server_error), response);        }        ResponseBody body = response.body();        if (body == null) {            return null;        }        if (Response.class.equals(type)) {            return response;        }        if (Bitmap.class.equals(type)) {            // \u5982\u679c\u8fd9\u662f\u4e00\u4e2a Bitmap \u5bf9\u8c61            return BitmapFactory.decodeStream(body.byteStream());        }        String text;        try {            text = body.string();        } catch (IOException e) {            // \u8fd4\u56de\u7ed3\u679c\u8bfb\u53d6\u5f02\u5e38            throw new DataException(context.getString(R.string.http_data_explain_error), e);        }        // \u6253\u5370\u8fd9\u4e2a Json        EasyLog.json(text);        final Object result;        if (String.class.equals(type)) {            // \u5982\u679c\u8fd9\u662f\u4e00\u4e2a String \u5bf9\u8c61            result = text;        } else if (JSONObject.class.equals(type)) {            try {                // \u5982\u679c\u8fd9\u662f\u4e00\u4e2a JSONObject \u5bf9\u8c61                result = new JSONObject(text);            } catch (JSONException e) {                throw new DataException(context.getString(R.string.http_data_explain_error), e);            }        } else if (JSONArray.class.equals(type)) {            try {                // \u5982\u679c\u8fd9\u662f\u4e00\u4e2a JSONArray \u5bf9\u8c61                result = new JSONArray(text);            }catch (JSONException e) {                throw new DataException(context.getString(R.string.http_data_explain_error), e);            }        } else {            try {                result = GSON.fromJson(text, type);            } catch (JsonSyntaxException e) {                // \u8fd4\u56de\u7ed3\u679c\u8bfb\u53d6\u5f02\u5e38                throw new DataException(context.getString(R.string.http_data_explain_error), e);            }            if (result instanceof HttpData) {                HttpData model = (HttpData) result;                if (model.getCode() == 0) {                    // \u4ee3\u8868\u6267\u884c\u6210\u529f                    return result;                } else if (model.getCode() == 1001) {                    // \u4ee3\u8868\u767b\u5f55\u5931\u6548\uff0c\u9700\u8981\u91cd\u65b0\u767b\u5f55                    throw new TokenException(context.getString(R.string.http_account_error));                } else {                    // \u4ee3\u8868\u6267\u884c\u5931\u8d25                    throw new ResultException(model.getMessage(), model);                }            }        }        return result;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/model/RequestHandler.java", "stars": "1", "class": {"name": "RequestHandler", "extends": null, "implements": ["IRequestHandler"], "modifiers": ["public", "final"]}}, {"method_name": "requestFail", "params": ["Context", "Exception"], "throws": null, "modifiers": ["public"], "return_type": "Exception", "snippet": "    public Exception requestFail(Context context, Exception e) {        // \u5224\u65ad\u8fd9\u4e2a\u5f02\u5e38\u662f\u4e0d\u662f\u81ea\u5df1\u629b\u7684        if (e instanceof HttpException) {            if (e instanceof TokenException) {                // \u767b\u5f55\u4fe1\u606f\u5931\u6548\uff0c\u8df3\u8f6c\u5230\u767b\u5f55\u9875                if (context instanceof Activity) {                    Intent intent = new Intent(context, LoginActivity.class);                    context.startActivity(intent);                }                // \u8fdb\u884c\u5185\u5b58\u4f18\u5316\uff0c\u9500\u6bc1\u9664\u767b\u5f55\u9875\u4e4b\u5916\u7684\u6240\u6709\u754c\u9762                ActivityStackManager.getInstance().finishAllActivities(LoginActivity.class);            }        } else {            if (e instanceof SocketTimeoutException) {                e = new TimeoutException(context.getString(R.string.http_server_out_time), e);            } else if (e instanceof UnknownHostException) {                NetworkInfo info = ((ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE)).getActiveNetworkInfo();                // \u5224\u65ad\u7f51\u7edc\u662f\u5426\u8fde\u63a5                if (info != null && info.isConnected()) {                    // \u6709\u8fde\u63a5\u5c31\u662f\u670d\u52a1\u5668\u7684\u95ee\u9898                    e = new ServerException(context.getString(R.string.http_server_error), e);                } else {                    // \u6ca1\u6709\u8fde\u63a5\u5c31\u662f\u7f51\u7edc\u5f02\u5e38                    e = new NetworkException(context.getString(R.string.http_network_error), e);                }            } else if (e instanceof IOException) {                //e = new CancelException(context.getString(R.string.http_request_cancel), e);                e = new CancelException(\"\", e);            }else {                e = new HttpException(e.getMessage(), e);            }        }        // \u6253\u5370\u9519\u8bef\u4fe1\u606f        EasyLog.print(e);        return e;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/model/RequestHandler.java", "stars": "1", "class": {"name": "RequestHandler", "extends": null, "implements": ["IRequestHandler"], "modifiers": ["public", "final"]}}, {"method_name": "getLocation", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Location", "snippet": "    public Location getLocation() {        return this.location;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/events/JumpEvent.java", "stars": "12", "class": {"name": "JumpEvent", "extends": "Event", "implements": null, "modifiers": ["public"]}}, {"method_name": "setLocation", "params": ["Location"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLocation(Location location) {        this.location = location;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/events/JumpEvent.java", "stars": "12", "class": {"name": "JumpEvent", "extends": "Event", "implements": null, "modifiers": ["public"]}}, {"method_name": "onMenuItemClick", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onMenuItemClick (android.view.MenuItem p0)\t{\t\treturn n_onMenuItemClick (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v7/widget/ActionMenuView_OnMenuItemClickListenerImplementor.java", "stars": "2", "class": {"name": "ActionMenuView_OnMenuItemClickListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onMenuItemClick", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onMenuItemClick (android.view.MenuItem p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v7/widget/ActionMenuView_OnMenuItemClickListenerImplementor.java", "stars": "2", "class": {"name": "ActionMenuView_OnMenuItemClickListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v7/widget/ActionMenuView_OnMenuItemClickListenerImplementor.java", "stars": "2", "class": {"name": "ActionMenuView_OnMenuItemClickListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v7/widget/ActionMenuView_OnMenuItemClickListenerImplementor.java", "stars": "2", "class": {"name": "ActionMenuView_OnMenuItemClickListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onCreateDialog", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "Dialog", "snippet": "    public Dialog onCreateDialog(Bundle savedInstanceState) {        return new AlertDialog.Builder(getActivity())                .setTitle(getArguments().getString(TITLE))                .setMessage(getArguments().getString(MESSAGE))                .setPositiveButton(getArguments().getString(POS_BUT), new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        if (mListener != null)                            mListener.onSelectionPositive();                        dialog.dismiss();                    }                })                .setNegativeButton(getArguments().getString(NEG_BUT), new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        if (mListener != null)                            mListener.onSelectionNegative();                        dialog.dismiss();                    }                })                .create();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/OptionDialogFragment.java", "stars": "4", "class": {"name": "OptionDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "show", "params": ["FragmentManager", "String", "String", "String", "String", "Listener"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void show(FragmentManager fm, String title, String message, String positiveButton, String negativeButton, Listener listener) {        try {            OptionDialogFragment dialogFragment = new OptionDialogFragment();            Bundle args = new Bundle();            args.putString(TITLE, title);            args.putString(MESSAGE, message);            args.putString(POS_BUT, positiveButton);            args.putString(NEG_BUT, negativeButton);            dialogFragment.setListener(listener);            dialogFragment.setArguments(args);            dialogFragment.show(fm, \"overlay_fragment\");        } catch (IllegalStateException e) {            // Eat exception        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/OptionDialogFragment.java", "stars": "4", "class": {"name": "OptionDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "show", "params": ["Context", "FragmentManager", "int", "int", "int", "int", "Listener"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void show(Context context, FragmentManager fm, int titleRes, int messageRes, int posButtonRes, int negButtonRes, Listener listener) {        show(fm, context.getString(titleRes), context.getString(messageRes), context.getString(posButtonRes), context.getString(negButtonRes), listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/OptionDialogFragment.java", "stars": "4", "class": {"name": "OptionDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "setListener", "params": ["Listener"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setListener(Listener listener) {        mListener = listener;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/OptionDialogFragment.java", "stars": "4", "class": {"name": "OptionDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "createHadoopConfiguration", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Configuration", "snippet": "  public Configuration createHadoopConfiguration() {    final String hadoopConfDirPath = requireNonNull(this.props.get(HADOOP_CONF_DIR_PATH));    final File hadoopConfDir = new File(requireNonNull(hadoopConfDirPath));    checkArgument(hadoopConfDir.exists() && hadoopConfDir.isDirectory());    final Configuration hadoopConf = new Configuration(false);    hadoopConf.addResource(new org.apache.hadoop.fs.Path(hadoopConfDirPath, \"core-site.xml\"));    hadoopConf.addResource(new org.apache.hadoop.fs.Path(hadoopConfDirPath, \"hdfs-site.xml\"));    hadoopConf.set(\"fs.hdfs.impl\", org.apache.hadoop.hdfs.DistributedFileSystem.class.getName());    return hadoopConf;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/HadoopModule.java", "stars": "18", "class": {"name": "HadoopModule", "extends": "AbstractModule", "implements": null, "modifiers": ["public"]}}, {"method_name": "createHadoopFileSystem", "params": ["Configuration", "HdfsAuth"], "throws": null, "modifiers": ["public"], "return_type": "FileSystem", "snippet": "  public FileSystem createHadoopFileSystem(final Configuration hadoopConf, final HdfsAuth auth) {    try {      auth.authorize();      return FileSystem.get(hadoopConf);    } catch (final IOException e) {      log.error(\"Unable to initialize HDFS\", e);      throw new AzkabanException(e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/HadoopModule.java", "stars": "18", "class": {"name": "HadoopModule", "extends": "AbstractModule", "implements": null, "modifiers": ["public"]}}, {"method_name": "configure", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void configure() {  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/HadoopModule.java", "stars": "18", "class": {"name": "HadoopModule", "extends": "AbstractModule", "implements": null, "modifiers": ["public"]}}, {"method_name": "setup", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setup() {    this.mockMvc = MockMvcBuilders.webAppContextSetup(this.applicationContext).build();  }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/test/java/com/avon/rga/controller/AbstractSpringMvcTest.java", "stars": "1", "class": {"name": "AbstractSpringMvcTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "descriptors", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "ImmutableSet<FileDescriptorProto>", "snippet": "  public static ImmutableSet<FileDescriptorProto> descriptors() {    return DESCRIPTORS;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/protobuf/WellKnownTypes.java", "stars": "3", "class": {"name": "WellKnownTypes", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fileNames", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "ImmutableSet<String>", "snippet": "  public static ImmutableSet<String> fileNames() {    return FILES;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/protobuf/WellKnownTypes.java", "stars": "3", "class": {"name": "WellKnownTypes", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTitle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTitle() {        return mTitle;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/htmlwidget/HtmlImageSpan.java", "stars": "74", "class": {"name": "HtmlImageSpan", "extends": "ImageSpan", "implements": null, "modifiers": ["public"]}}, {"method_name": "getAlt", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getAlt() {        return mAlt;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/htmlwidget/HtmlImageSpan.java", "stars": "74", "class": {"name": "HtmlImageSpan", "extends": "ImageSpan", "implements": null, "modifiers": ["public"]}}, {"method_name": "isShowDialog", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isShowDialog() {        return mDialog != null && mDialog.isShowing();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyActivity.java", "stars": "1", "class": {"name": "MyActivity", "extends": "BaseActivity", "implements": ["ToastAction", "TitleBarAction", "SwipeAction", "OnHttpListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "showDialog", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void showDialog() {        if (mDialog == null) {            mDialog = new WaitDialog.Builder(this)                    .setCancelable(false)                    .create();        }        if (!mDialog.isShowing()) {            mDialog.show();        }        mDialogTotal++;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyActivity.java", "stars": "1", "class": {"name": "MyActivity", "extends": "BaseActivity", "implements": ["ToastAction", "TitleBarAction", "SwipeAction", "OnHttpListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "hideDialog", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void hideDialog() {        if (mDialogTotal == 1) {            if (mDialog != null && mDialog.isShowing()) {                mDialog.dismiss();            }        }        if (mDialogTotal > 0) {            mDialogTotal--;        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyActivity.java", "stars": "1", "class": {"name": "MyActivity", "extends": "BaseActivity", "implements": ["ToastAction", "TitleBarAction", "SwipeAction", "OnHttpListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "initLayout", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initLayout() {        super.initLayout();        if (getTitleBar() != null) {            getTitleBar().setOnTitleBarListener(this);        }        ButterKnife.bind(this);        initImmersion();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyActivity.java", "stars": "1", "class": {"name": "MyActivity", "extends": "BaseActivity", "implements": ["ToastAction", "TitleBarAction", "SwipeAction", "OnHttpListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "initImmersion", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initImmersion() {        // \u521d\u59cb\u5316\u6c89\u6d78\u5f0f\u72b6\u6001\u680f        if (isStatusBarEnabled()) {            createStatusBarConfig().init();            // \u8bbe\u7f6e\u6807\u9898\u680f\u6c89\u6d78            if (mTitleBar != null) {                ImmersionBar.setTitleBar(this, mTitleBar);            }        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyActivity.java", "stars": "1", "class": {"name": "MyActivity", "extends": "BaseActivity", "implements": ["ToastAction", "TitleBarAction", "SwipeAction", "OnHttpListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "isStatusBarEnabled", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean isStatusBarEnabled() {        return true;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyActivity.java", "stars": "1", "class": {"name": "MyActivity", "extends": "BaseActivity", "implements": ["ToastAction", "TitleBarAction", "SwipeAction", "OnHttpListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "isStatusBarDarkFont", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean isStatusBarDarkFont() {        return true;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyActivity.java", "stars": "1", "class": {"name": "MyActivity", "extends": "BaseActivity", "implements": ["ToastAction", "TitleBarAction", "SwipeAction", "OnHttpListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "createStatusBarConfig", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "ImmersionBar", "snippet": "    protected ImmersionBar createStatusBarConfig() {        // \u5728BaseActivity\u91cc\u521d\u59cb\u5316        mImmersionBar = ImmersionBar.with(this)                // \u9ed8\u8ba4\u72b6\u6001\u680f\u5b57\u4f53\u989c\u8272\u4e3a\u9ed1\u8272                .statusBarDarkFont(isStatusBarDarkFont());        return mImmersionBar;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyActivity.java", "stars": "1", "class": {"name": "MyActivity", "extends": "BaseActivity", "implements": ["ToastAction", "TitleBarAction", "SwipeAction", "OnHttpListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "getStatusBarConfig", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ImmersionBar", "snippet": "    public ImmersionBar getStatusBarConfig() {        return mImmersionBar;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyActivity.java", "stars": "1", "class": {"name": "MyActivity", "extends": "BaseActivity", "implements": ["ToastAction", "TitleBarAction", "SwipeAction", "OnHttpListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "setTitle", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTitle(@StringRes int id) {        setTitle(getString(id));    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyActivity.java", "stars": "1", "class": {"name": "MyActivity", "extends": "BaseActivity", "implements": ["ToastAction", "TitleBarAction", "SwipeAction", "OnHttpListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "setTitle", "params": ["CharSequence"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTitle(CharSequence title) {        super.setTitle(title);        if (mTitleBar != null) {            mTitleBar.setTitle(title);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyActivity.java", "stars": "1", "class": {"name": "MyActivity", "extends": "BaseActivity", "implements": ["ToastAction", "TitleBarAction", "SwipeAction", "OnHttpListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "getTitleBar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TitleBar", "snippet": "    public TitleBar getTitleBar() {        if (mTitleBar == null) {            mTitleBar = findTitleBar(getContentView());        }        return mTitleBar;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyActivity.java", "stars": "1", "class": {"name": "MyActivity", "extends": "BaseActivity", "implements": ["ToastAction", "TitleBarAction", "SwipeAction", "OnHttpListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "onLeftClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onLeftClick(View v) {        onBackPressed();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyActivity.java", "stars": "1", "class": {"name": "MyActivity", "extends": "BaseActivity", "implements": ["ToastAction", "TitleBarAction", "SwipeAction", "OnHttpListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onResume() {        super.onResume();        UmengClient.onResume(this);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyActivity.java", "stars": "1", "class": {"name": "MyActivity", "extends": "BaseActivity", "implements": ["ToastAction", "TitleBarAction", "SwipeAction", "OnHttpListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onPause() {        UmengClient.onPause(this);        super.onPause();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyActivity.java", "stars": "1", "class": {"name": "MyActivity", "extends": "BaseActivity", "implements": ["ToastAction", "TitleBarAction", "SwipeAction", "OnHttpListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "startActivityForResult", "params": ["Intent", "int", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void startActivityForResult(Intent intent, int requestCode, @Nullable Bundle options) {        super.startActivityForResult(intent, requestCode, options);        overridePendingTransition(R.anim.activity_right_in, R.anim.activity_right_out);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyActivity.java", "stars": "1", "class": {"name": "MyActivity", "extends": "BaseActivity", "implements": ["ToastAction", "TitleBarAction", "SwipeAction", "OnHttpListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "finish", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void finish() {        super.finish();        overridePendingTransition(R.anim.activity_left_in, R.anim.activity_left_out);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyActivity.java", "stars": "1", "class": {"name": "MyActivity", "extends": "BaseActivity", "implements": ["ToastAction", "TitleBarAction", "SwipeAction", "OnHttpListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "onStart", "params": ["Call"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onStart(Call call) {        showDialog();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyActivity.java", "stars": "1", "class": {"name": "MyActivity", "extends": "BaseActivity", "implements": ["ToastAction", "TitleBarAction", "SwipeAction", "OnHttpListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "onSucceed", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSucceed(Object result) {        if (result instanceof HttpData) {            toast(((HttpData) result).getMessage());        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyActivity.java", "stars": "1", "class": {"name": "MyActivity", "extends": "BaseActivity", "implements": ["ToastAction", "TitleBarAction", "SwipeAction", "OnHttpListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "onFail", "params": ["Exception"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onFail(Exception e) {        toast(e.getMessage());    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyActivity.java", "stars": "1", "class": {"name": "MyActivity", "extends": "BaseActivity", "implements": ["ToastAction", "TitleBarAction", "SwipeAction", "OnHttpListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "onEnd", "params": ["Call"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onEnd(Call call) {        hideDialog();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyActivity.java", "stars": "1", "class": {"name": "MyActivity", "extends": "BaseActivity", "implements": ["ToastAction", "TitleBarAction", "SwipeAction", "OnHttpListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDestroy() {        EasyHttp.cancel(this);        if (isShowDialog()) {            mDialog.dismiss();        }        mDialog = null;        super.onDestroy();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyActivity.java", "stars": "1", "class": {"name": "MyActivity", "extends": "BaseActivity", "implements": ["ToastAction", "TitleBarAction", "SwipeAction", "OnHttpListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "getAll", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<TagsVO>", "snippet": "    public List<TagsVO> getAll() {        return tagsService.findAllWithArticleCount();    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/controller/admin/api/TagController.java", "stars": "1", "class": {"name": "TagController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createTag", "params": ["Tag"], "throws": null, "modifiers": ["public"], "return_type": "Tag", "snippet": "    public Tag createTag(@RequestBody Tag tag) {        return tagsService.createOrUpdateTag(tag);    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/controller/admin/api/TagController.java", "stars": "1", "class": {"name": "TagController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateTag", "params": ["Long", "Tag"], "throws": null, "modifiers": ["public"], "return_type": "Tag", "snippet": "    public Tag updateTag(@PathVariable Long id, @RequestBody Tag tag) {        tag.setId(id);        return tagsService.createOrUpdateTag(tag);    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/controller/admin/api/TagController.java", "stars": "1", "class": {"name": "TagController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteById", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void deleteById(@PathVariable Long id) {        tagsService.deleteById(id);    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/controller/admin/api/TagController.java", "stars": "1", "class": {"name": "TagController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOnHardwareAccelerationError", "params": ["HardwareAccelerationError"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnHardwareAccelerationError(HardwareAccelerationError error) {        nativeSetOnHardwareAccelerationError(error);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/LibVLC.java", "stars": "4", "class": {"name": "LibVLC", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "nativeSetOnHardwareAccelerationError", "params": ["HardwareAccelerationError"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "    private native void nativeSetOnHardwareAccelerationError(HardwareAccelerationError error);    /**     * Get the libVLC version     * @return the libVLC version string     */    public native String version();    /**     * Get the libVLC compiler     * @return the libVLC compiler string     */    public native String compiler();    /**     * Get the libVLC changeset     * @return the libVLC changeset string     */    public native String changeset();    @Override    protected Event onEventNative(int eventType, long arg1, float arg2) {        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/LibVLC.java", "stars": "4", "class": {"name": "LibVLC", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "version", "params": [], "throws": null, "modifiers": ["native", "public"], "return_type": "String", "snippet": "    public native String version();    /**     * Get the libVLC compiler     * @return the libVLC compiler string     */    public native String compiler();    /**     * Get the libVLC changeset     * @return the libVLC changeset string     */    public native String changeset();    @Override    protected Event onEventNative(int eventType, long arg1, float arg2) {        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/LibVLC.java", "stars": "4", "class": {"name": "LibVLC", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "compiler", "params": [], "throws": null, "modifiers": ["native", "public"], "return_type": "String", "snippet": "    public native String compiler();    /**     * Get the libVLC changeset     * @return the libVLC changeset string     */    public native String changeset();    @Override    protected Event onEventNative(int eventType, long arg1, float arg2) {        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/LibVLC.java", "stars": "4", "class": {"name": "LibVLC", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "changeset", "params": [], "throws": null, "modifiers": ["native", "public"], "return_type": "String", "snippet": "    public native String changeset();    @Override    protected Event onEventNative(int eventType, long arg1, float arg2) {        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/LibVLC.java", "stars": "4", "class": {"name": "LibVLC", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "onEventNative", "params": ["int", "long", "float"], "throws": null, "modifiers": ["protected"], "return_type": "Event", "snippet": "    protected Event onEventNative(int eventType, long arg1, float arg2) {        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/LibVLC.java", "stars": "4", "class": {"name": "LibVLC", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "onReleaseNative", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onReleaseNative() {        nativeRelease();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/LibVLC.java", "stars": "4", "class": {"name": "LibVLC", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "setOnNativeCrashListener", "params": ["OnNativeCrashListener"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setOnNativeCrashListener(OnNativeCrashListener l) {        sOnNativeCrashListener = l;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/LibVLC.java", "stars": "4", "class": {"name": "LibVLC", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "onNativeCrash", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void onNativeCrash() {        if (sOnNativeCrashListener != null)            sOnNativeCrashListener.onNativeCrash();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/LibVLC.java", "stars": "4", "class": {"name": "LibVLC", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUserAgent", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUserAgent(String name, String http){        nativeSetUserAgent(name, http);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/LibVLC.java", "stars": "4", "class": {"name": "LibVLC", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "nativeNew", "params": ["String"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "    private native void nativeNew(String[] options);    private native void nativeRelease();    private native void nativeSetUserAgent(String name, String http);    /* Load library before object instantiation */    static {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD_MR1) {            try {                if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB_MR1)                    System.loadLibrary(\"anw.10\");                else if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB_MR2)                    System.loadLibrary(\"anw.13\");                else if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.JELLY_BEAN_MR1)                    System.loadLibrary(\"anw.14\");                else if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.KITKAT_WATCH)                    System.loadLibrary(\"anw.18\");                else                    System.loadLibrary(\"anw.21\");            } catch (Throwable t) {                Log.w(TAG, \"Unable to load the anw library: \" + t);            }            try {                if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.GINGERBREAD_MR1)                    System.loadLibrary(\"iomx.10\");                else if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB_MR2)                    System.loadLibrary(\"iomx.13\");                else if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.JELLY_BEAN_MR1)                    System.loadLibrary(\"iomx.14\");                else if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.JELLY_BEAN_MR2)                    System.loadLibrary(\"iomx.18\");                else if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.KITKAT)                    System.loadLibrary(\"iomx.19\");            } catch (Throwable t) {                // No need to warn if it isn't found, when we intentionally don't build these except for debug                if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1)                    Log.w(TAG, \"Unable to load the iomx library: \" + t);            }        }        try {            System.loadLibrary(\"vlcjni\");        } catch (UnsatisfiedLinkError ule) {            Log.e(TAG, \"Can't load vlcjni library: \" + ule);            /// FIXME Alert user            System.exit(1);        } catch (SecurityException se) {            Log.e(TAG, \"Encountered a security issue when loading vlcjni library: \" + se);            /// FIXME Alert user            System.exit(1);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/LibVLC.java", "stars": "4", "class": {"name": "LibVLC", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "nativeRelease", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "    private native void nativeRelease();    private native void nativeSetUserAgent(String name, String http);    /* Load library before object instantiation */    static {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD_MR1) {            try {                if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB_MR1)                    System.loadLibrary(\"anw.10\");                else if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB_MR2)                    System.loadLibrary(\"anw.13\");                else if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.JELLY_BEAN_MR1)                    System.loadLibrary(\"anw.14\");                else if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.KITKAT_WATCH)                    System.loadLibrary(\"anw.18\");                else                    System.loadLibrary(\"anw.21\");            } catch (Throwable t) {                Log.w(TAG, \"Unable to load the anw library: \" + t);            }            try {                if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.GINGERBREAD_MR1)                    System.loadLibrary(\"iomx.10\");                else if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB_MR2)                    System.loadLibrary(\"iomx.13\");                else if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.JELLY_BEAN_MR1)                    System.loadLibrary(\"iomx.14\");                else if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.JELLY_BEAN_MR2)                    System.loadLibrary(\"iomx.18\");                else if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.KITKAT)                    System.loadLibrary(\"iomx.19\");            } catch (Throwable t) {                // No need to warn if it isn't found, when we intentionally don't build these except for debug                if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1)                    Log.w(TAG, \"Unable to load the iomx library: \" + t);            }        }        try {            System.loadLibrary(\"vlcjni\");        } catch (UnsatisfiedLinkError ule) {            Log.e(TAG, \"Can't load vlcjni library: \" + ule);            /// FIXME Alert user            System.exit(1);        } catch (SecurityException se) {            Log.e(TAG, \"Encountered a security issue when loading vlcjni library: \" + se);            /// FIXME Alert user            System.exit(1);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/LibVLC.java", "stars": "4", "class": {"name": "LibVLC", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "nativeSetUserAgent", "params": ["String", "String"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "    private native void nativeSetUserAgent(String name, String http);    /* Load library before object instantiation */    static {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD_MR1) {            try {                if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB_MR1)                    System.loadLibrary(\"anw.10\");                else if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB_MR2)                    System.loadLibrary(\"anw.13\");                else if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.JELLY_BEAN_MR1)                    System.loadLibrary(\"anw.14\");                else if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.KITKAT_WATCH)                    System.loadLibrary(\"anw.18\");                else                    System.loadLibrary(\"anw.21\");            } catch (Throwable t) {                Log.w(TAG, \"Unable to load the anw library: \" + t);            }            try {                if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.GINGERBREAD_MR1)                    System.loadLibrary(\"iomx.10\");                else if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB_MR2)                    System.loadLibrary(\"iomx.13\");                else if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.JELLY_BEAN_MR1)                    System.loadLibrary(\"iomx.14\");                else if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.JELLY_BEAN_MR2)                    System.loadLibrary(\"iomx.18\");                else if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.KITKAT)                    System.loadLibrary(\"iomx.19\");            } catch (Throwable t) {                // No need to warn if it isn't found, when we intentionally don't build these except for debug                if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1)                    Log.w(TAG, \"Unable to load the iomx library: \" + t);            }        }        try {            System.loadLibrary(\"vlcjni\");        } catch (UnsatisfiedLinkError ule) {            Log.e(TAG, \"Can't load vlcjni library: \" + ule);            /// FIXME Alert user            System.exit(1);        } catch (SecurityException se) {            Log.e(TAG, \"Encountered a security issue when loading vlcjni library: \" + se);            /// FIXME Alert user            System.exit(1);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/LibVLC.java", "stars": "4", "class": {"name": "LibVLC", "extends": "VLCObject", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["InterruptedException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) throws InterruptedException {\t\twhile(true) {\t\t\tHttpUtil.sendGet(Data.keepingUrl,Data.getHeaders());\t\t\tThread.sleep(1000*60*10);\t\t}\t}", "url": "https://raw.githubusercontent.com/meethigher/cpdaily-submit/master/KeepSession.java", "stars": "2", "class": {"name": "KeepSession", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resourceShouldBeAvailableOnMainPort", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid resourceShouldBeAvailableOnMainPort() {\t\tResponseEntity<String> entity = this.testRestTemplate.getForEntity(\"http://localhost:\" + this.port + \"/test\",\t\t\t\tString.class);\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\t\tassertThat(entity.getBody()).contains(\"test\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-jersey/src/test/java/smoketest/jersey/JerseyManagementPortTests.java", "stars": "47572", "class": {"name": "JerseyManagementPortTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "resourceShouldNotBeAvailableOnManagementPort", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid resourceShouldNotBeAvailableOnManagementPort() {\t\tResponseEntity<String> entity = this.testRestTemplate\t\t\t\t.getForEntity(\"http://localhost:\" + this.managementPort + \"/test\", String.class);\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-jersey/src/test/java/smoketest/jersey/JerseyManagementPortTests.java", "stars": "47572", "class": {"name": "JerseyManagementPortTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "customizer", "params": [], "throws": null, "modifiers": [], "return_type": "ResourceConfigCustomizer", "snippet": "\t\tResourceConfigCustomizer customizer() {\t\t\treturn new ResourceConfigCustomizer() {\t\t\t\t@Override\t\t\t\tpublic void customize(ResourceConfig config) {\t\t\t\t\tconfig.register(TestEndpoint.class);\t\t\t\t}\t\t\t};\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-jersey/src/test/java/smoketest/jersey/JerseyManagementPortTests.java", "stars": "47572", "class": {"name": "ResourceConfigConfiguration", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "test", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\t\t\tpublic String test() {\t\t\t\treturn \"test\";\t\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-jersey/src/test/java/smoketest/jersey/JerseyManagementPortTests.java", "stars": "47572", "class": {"name": "TestEndpoint", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "unloadConfig", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void unloadConfig(String id) {    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/ConfiguredConfigLoader.java", "stars": "3", "class": {"name": "ConfiguredConfigLoader", "extends": null, "implements": ["ConfigLoader", "Comparable"], "modifiers": ["public", "abstract"]}}, {"method_name": "matches", "params": ["File"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean matches(File file) {        return file.getName().toLowerCase().endsWith(getSuffix());    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/ConfiguredConfigLoader.java", "stars": "3", "class": {"name": "ConfiguredConfigLoader", "extends": null, "implements": ["ConfigLoader", "Comparable"], "modifiers": ["public", "abstract"]}}, {"method_name": "onLoadingComplete", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onLoadingComplete() {    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/ConfiguredConfigLoader.java", "stars": "3", "class": {"name": "ConfiguredConfigLoader", "extends": null, "implements": ["ConfigLoader", "Comparable"], "modifiers": ["public", "abstract"]}}, {"method_name": "decode", "params": ["ChannelHandlerContext", "ByteBuf", "List<Object>"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void decode(ChannelHandlerContext ctx, ByteBuf buffer, List<Object> out) {        int delimiter = buffer.readByte();        buffer.resetReaderIndex();        if(delimiter == 60) {            String policyString = \"<?xml version=\\\"1.0\\\"?>\\r\\n\"                    + \"<!DOCTYPE cross-domain-policy SYSTEM \\\"/xml/dtds/cross-domain-policy.dtd\\\">\\r\\n\"                    + \"<cross-domain-policy>\\r\\n\"                    + \"<allow-access-from domain=\\\"*\\\" to-ports=\\\"*\\\" />\\r\\n\"                    + \"</cross-domain-policy>\\0)\";            ChannelFuture future = ctx.channel().writeAndFlush(Unpooled.copiedBuffer(policyString.getBytes()));            future.addListener(ChannelFutureListener.CLOSE);        } else {            List<IMessageDataWrapper> wrappers = this.nettyServer.getCodec().decode(buffer);            if((wrappers == null) || (wrappers.size() < 1)) return;            out.addAll(wrappers);        }    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/communication/server/netty/codec/NettyDecoder.java", "stars": "2", "class": {"name": "NettyDecoder", "extends": "ByteToMessageDecoder", "implements": null, "modifiers": ["public"]}}, {"method_name": "parse", "params": ["URL"], "throws": ["IOException", "ParserConfigurationException", "SAXException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void parse(URL url) throws IOException, ParserConfigurationException, SAXException {        SAXParserFactory factory = SAXParserFactory.newInstance();        SAXParser saxParser;        SSDPDeviceDescriptionParser parser = new SSDPDeviceDescriptionParser(this);        URLConnection urlConnection = url.openConnection();        applicationURL = urlConnection.getHeaderField(\"Application-URL\");        if (applicationURL != null && !applicationURL.substring(applicationURL.length() - 1).equals(\"/\")) {            applicationURL = applicationURL.concat(\"/\");        }        InputStream in = new BufferedInputStream(urlConnection.getInputStream());        Scanner s = null;        try {            s = new Scanner(in).useDelimiter(\"\\\\A\");            locationXML = s.hasNext() ? s.next() : \"\";            saxParser = factory.newSAXParser();            saxParser.parse(new ByteArrayInputStream(locationXML.getBytes()), parser);        } finally {            in.close();            if (s != null)                s.close();        }        headers = urlConnection.getHeaderFields();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/ssdp/SSDPDevice.java", "stars": "4", "class": {"name": "SSDPDevice", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return friendlyName;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/ssdp/SSDPDevice.java", "stars": "4", "class": {"name": "SSDPDevice", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_verify_phone_no);        verify_button = findViewById(R.id.verify_button);        phoneNoEnteredByTheUser = findViewById(R.id.verification_code_entered_by_user);        progressBar = findViewById(R.id.progress_bar);        progressBar.setVisibility(View.GONE);        String phoneNo = getIntent().getStringExtra(\"phoneNo\");        sendVerificationToUser(phoneNo);        verify_button.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                String code = phoneNoEnteredByTheUser.getText().toString();                if(code.isEmpty() || code.length() < 6){                    phoneNoEnteredByTheUser.setError(\"Wrong OTP...\");                    phoneNoEnteredByTheUser.requestFocus();                    return;                }                progressBar.setVisibility(View.VISIBLE);                verifyCode(code);            }        });    }", "url": "https://raw.githubusercontent.com/yashjoshi007/HouseRent/master/app/src/main/java/com/example/houserent/verify_phone_no.java", "stars": "3", "class": {"name": "verify_phone_no", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "sendVerificationToUser", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void sendVerificationToUser(String phoneNo) {        PhoneAuthProvider.getInstance().verifyPhoneNumber(                \"+91\" + phoneNo,        // Phone number to verify                60,                 // Timeout duration                TimeUnit.SECONDS,   // Unit of timeout                TaskExecutors.MAIN_THREAD,               // Activity (for callback binding)                mCallbacks);        // OnVerificationStateChangedCallbacks    }", "url": "https://raw.githubusercontent.com/yashjoshi007/HouseRent/master/app/src/main/java/com/example/houserent/verify_phone_no.java", "stars": "3", "class": {"name": "verify_phone_no", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "verifyCode", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void verifyCode(String codeByUSer){        PhoneAuthCredential credential = PhoneAuthProvider.getCredential(verificationCodeBySystem,codeByUSer);        signInTheUserByCredentials(credential);    }", "url": "https://raw.githubusercontent.com/yashjoshi007/HouseRent/master/app/src/main/java/com/example/houserent/verify_phone_no.java", "stars": "3", "class": {"name": "verify_phone_no", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "signInTheUserByCredentials", "params": ["PhoneAuthCredential"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void signInTheUserByCredentials(PhoneAuthCredential credential){        FirebaseAuth firebaseAuth = FirebaseAuth.getInstance();        firebaseAuth.signInWithCredential(credential)                .addOnCompleteListener(verify_phone_no.this, new OnCompleteListener<AuthResult>() {                    @Override                    public void onComplete(@NonNull Task<AuthResult> task) {                        if (task.isSuccessful()) {                            Intent intent = new Intent(getApplicationContext(), UserProfile.class);                            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);                            startActivity(intent);                        } else {                            Toast.makeText(verify_phone_no.this, task.getException().getMessage(), Toast.LENGTH_SHORT).show();                        }                    }                });    }", "url": "https://raw.githubusercontent.com/yashjoshi007/HouseRent/master/app/src/main/java/com/example/houserent/verify_phone_no.java", "stars": "3", "class": {"name": "verify_phone_no", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String args[]) throws Exception {      //String filePath=\"D:\\\\ky-mall-product-master\\\\dao\\\\ProductMapper.xml\";      String filePath=args[0];      Configuration configuration = new Configuration();      configuration.setDefaultResultSetType(ResultSetType.SCROLL_INSENSITIVE);        String resource = \"file:///\"+filePath;        System.out.println(resource);        InputStream inputStream = Resources.getUrlAsStream(resource);        XMLMapperBuilder builder = new XMLMapperBuilder(inputStream, configuration, resource, configuration.getSqlFragments());        builder.parse();        inputStream.close();    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/awful_table/TestWljs3.java", "stars": "15", "class": {"name": "TestWljs3", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "toDistributionMasqueDatabaseDatabase_devrait_retourner_un_DistributionMasque_depuis_un_DistributionMasqueDatabase", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void toDistributionMasqueDatabaseDatabase_devrait_retourner_un_DistributionMasque_depuis_un_DistributionMasqueDatabase() {        // Given        DistributionMasqueDatabase distributionMasqueDatabase = aDistributionMasqueDatabase();        // When        DistributionMasque distributionMasque = distributionMasqueDatabaseMapper.toDistributionMasque(distributionMasqueDatabase);        // Then        assertThat(distributionMasque.getHashDemandeur()).isEqualTo(distributionMasqueDatabase.getDemandeur());        assertThat(distributionMasque.getDateDistribution()).isEqualTo(distributionMasqueDatabase.getDateDistribution());        assertThat(distributionMasque.getNbPersonnes()).isEqualTo(distributionMasqueDatabase.getNbPersonnes());        assertThat(distributionMasque.getTypeMasque()).isEqualTo(TypeMasque.valueOf(distributionMasqueDatabase.getTypeMasque()));        assertThat(distributionMasque.getNbMasques()).isEqualTo(distributionMasqueDatabase.getNbMasques());        assertThat(distributionMasque.getModeSaisie()).isEqualTo(ModeSaisie.valueOf(distributionMasqueDatabase.getModeSaisie()));        assertThat(distributionMasque.getCodePostal()).isEqualTo(distributionMasqueDatabase.getCodePostal());        assertThat(distributionMasque.getTypeRemettant()).isEqualTo(TypeRemettant.valueOf(distributionMasqueDatabase.getTypeRemettant()));    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/test/java/fr/gouv/interieur/dmgp/remettant/infrastructure/database/DistributionMasqueDatabaseMapperTest.java", "stars": "5", "class": {"name": "DistributionMasqueDatabaseMapperTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "toDistributionMasqueDatabase_devrait_retourner_un_DistributionMasqueDatabase_depuis_un_DistributionMasque", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void toDistributionMasqueDatabase_devrait_retourner_un_DistributionMasqueDatabase_depuis_un_DistributionMasque() {        // Given        DistributionMasque distributionMasque = aDistributionMasque();        // When        DistributionMasqueDatabase distributionMasqueDatabase = distributionMasqueDatabaseMapper.toDistributionMasqueDatabase(distributionMasque);        // Then        assertThat(distributionMasqueDatabase.getDemandeur()).isEqualTo(distributionMasque.getHashDemandeur());        assertThat(distributionMasqueDatabase.getDateDistribution()).isEqualTo(distributionMasque.getDateDistribution());        assertThat(distributionMasqueDatabase.getNbPersonnes()).isEqualTo(distributionMasque.getNbPersonnes());        assertThat(distributionMasqueDatabase.getTypeMasque()).isEqualTo(distributionMasque.getTypeMasque().name());        assertThat(distributionMasqueDatabase.getNbMasques()).isEqualTo(distributionMasque.getNbMasques());        assertThat(distributionMasqueDatabase.getModeSaisie()).isEqualTo(distributionMasque.getModeSaisie().name());        assertThat(distributionMasqueDatabase.getTypeRemettant()).isEqualTo(distributionMasque.getTypeRemettant().name());        assertThat(distributionMasqueDatabase.getCodePostal()).isEqualTo(distributionMasque.getCodePostal());    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/test/java/fr/gouv/interieur/dmgp/remettant/infrastructure/database/DistributionMasqueDatabaseMapperTest.java", "stars": "5", "class": {"name": "DistributionMasqueDatabaseMapperTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "generateStaticModel", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "TemplateHashModel", "snippet": "    public static TemplateHashModel generateStaticModel(String packageName) {        try {            TemplateHashModel staticModels = wrapper.getStaticModels();            TemplateHashModel fileStatics = (TemplateHashModel) staticModels.get(packageName);            return fileStatics;        } catch (Exception e) {            logger.error(e.getMessage(), e);        }        return null;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/util/FtlUtil.java", "stars": "1", "class": {"name": "FtlUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "connect", "params": ["String", "Properties"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Connection", "snippet": "    public Connection connect(String url, Properties info) throws SQLException {        return this.driver.connect(url, info);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/util/DriverWrapper.java", "stars": "23", "class": {"name": "DriverWrapper", "extends": null, "implements": ["Driver"], "modifiers": ["public"]}}, {"method_name": "acceptsURL", "params": ["String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean acceptsURL(String url) throws SQLException {        return this.driver.acceptsURL(url);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/util/DriverWrapper.java", "stars": "23", "class": {"name": "DriverWrapper", "extends": null, "implements": ["Driver"], "modifiers": ["public"]}}, {"method_name": "getPropertyInfo", "params": ["String", "Properties"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "DriverPropertyInfo", "snippet": "    public DriverPropertyInfo[] getPropertyInfo(String url, Properties info) throws SQLException {        return this.driver.getPropertyInfo(url, info);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/util/DriverWrapper.java", "stars": "23", "class": {"name": "DriverWrapper", "extends": null, "implements": ["Driver"], "modifiers": ["public"]}}, {"method_name": "getMajorVersion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getMajorVersion() {        return this.driver.getMajorVersion();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/util/DriverWrapper.java", "stars": "23", "class": {"name": "DriverWrapper", "extends": null, "implements": ["Driver"], "modifiers": ["public"]}}, {"method_name": "getMinorVersion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getMinorVersion() {        return this.driver.getMinorVersion();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/util/DriverWrapper.java", "stars": "23", "class": {"name": "DriverWrapper", "extends": null, "implements": ["Driver"], "modifiers": ["public"]}}, {"method_name": "jdbcCompliant", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean jdbcCompliant() {        return this.driver.jdbcCompliant();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/util/DriverWrapper.java", "stars": "23", "class": {"name": "DriverWrapper", "extends": null, "implements": ["Driver"], "modifiers": ["public"]}}, {"method_name": "getParentLogger", "params": [], "throws": ["SQLFeatureNotSupportedException"], "modifiers": ["public"], "return_type": "Logger", "snippet": "    public Logger getParentLogger() throws SQLFeatureNotSupportedException {        return this.driver.getParentLogger();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/util/DriverWrapper.java", "stars": "23", "class": {"name": "DriverWrapper", "extends": null, "implements": ["Driver"], "modifiers": ["public"]}}, {"method_name": "printBanner", "params": ["Environment", "Class<?>", "PrintStream"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void printBanner(Environment environment, Class<?> sourceClass, PrintStream out) {\t\ttry {\t\t\tString banner = StreamUtils.copyToString(this.resource.getInputStream(),\t\t\t\t\tenvironment.getProperty(\"spring.banner.charset\", Charset.class, StandardCharsets.UTF_8));\t\t\tfor (PropertyResolver resolver : getPropertyResolvers(environment, sourceClass)) {\t\t\t\tbanner = resolver.resolvePlaceholders(banner);\t\t\t}\t\t\tout.println(banner);\t\t}\t\tcatch (Exception ex) {\t\t\tlogger.warn(LogMessage.format(\"Banner not printable: %s (%s: '%s')\", this.resource, ex.getClass(),\t\t\t\t\tex.getMessage()), ex);\t\t}\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ResourceBanner.java", "stars": "47572", "class": {"name": "ResourceBanner", "extends": null, "implements": ["Banner"], "modifiers": ["public"]}}, {"method_name": "getPropertyResolvers", "params": ["Environment", "Class<?>"], "throws": null, "modifiers": ["protected"], "return_type": "List<PropertyResolver>", "snippet": "\tprotected List<PropertyResolver> getPropertyResolvers(Environment environment, Class<?> sourceClass) {\t\tList<PropertyResolver> resolvers = new ArrayList<>();\t\tresolvers.add(environment);\t\tresolvers.add(getVersionResolver(sourceClass));\t\tresolvers.add(getAnsiResolver());\t\tresolvers.add(getTitleResolver(sourceClass));\t\treturn resolvers;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ResourceBanner.java", "stars": "47572", "class": {"name": "ResourceBanner", "extends": null, "implements": ["Banner"], "modifiers": ["public"]}}, {"method_name": "getVersionResolver", "params": ["Class<?>"], "throws": null, "modifiers": ["private"], "return_type": "PropertyResolver", "snippet": "\tprivate PropertyResolver getVersionResolver(Class<?> sourceClass) {\t\tMutablePropertySources propertySources = new MutablePropertySources();\t\tpropertySources.addLast(new MapPropertySource(\"version\", getVersionsMap(sourceClass)));\t\treturn new PropertySourcesPropertyResolver(propertySources);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ResourceBanner.java", "stars": "47572", "class": {"name": "ResourceBanner", "extends": null, "implements": ["Banner"], "modifiers": ["public"]}}, {"method_name": "getVersionsMap", "params": ["Class<?>"], "throws": null, "modifiers": ["private"], "return_type": "Map<String,Object>", "snippet": "\tprivate Map<String, Object> getVersionsMap(Class<?> sourceClass) {\t\tString appVersion = getApplicationVersion(sourceClass);\t\tString bootVersion = getBootVersion();\t\tMap<String, Object> versions = new HashMap<>();\t\tversions.put(\"application.version\", getVersionString(appVersion, false));\t\tversions.put(\"spring-boot.version\", getVersionString(bootVersion, false));\t\tversions.put(\"application.formatted-version\", getVersionString(appVersion, true));\t\tversions.put(\"spring-boot.formatted-version\", getVersionString(bootVersion, true));\t\treturn versions;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ResourceBanner.java", "stars": "47572", "class": {"name": "ResourceBanner", "extends": null, "implements": ["Banner"], "modifiers": ["public"]}}, {"method_name": "getApplicationVersion", "params": ["Class<?>"], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "\tprotected String getApplicationVersion(Class<?> sourceClass) {\t\tPackage sourcePackage = (sourceClass != null) ? sourceClass.getPackage() : null;\t\treturn (sourcePackage != null) ? sourcePackage.getImplementationVersion() : null;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ResourceBanner.java", "stars": "47572", "class": {"name": "ResourceBanner", "extends": null, "implements": ["Banner"], "modifiers": ["public"]}}, {"method_name": "getBootVersion", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "\tprotected String getBootVersion() {\t\treturn SpringBootVersion.getVersion();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ResourceBanner.java", "stars": "47572", "class": {"name": "ResourceBanner", "extends": null, "implements": ["Banner"], "modifiers": ["public"]}}, {"method_name": "getVersionString", "params": ["String", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "\tprivate String getVersionString(String version, boolean format) {\t\tif (version == null) {\t\t\treturn \"\";\t\t}\t\treturn format ? \" (v\" + version + \")\" : version;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ResourceBanner.java", "stars": "47572", "class": {"name": "ResourceBanner", "extends": null, "implements": ["Banner"], "modifiers": ["public"]}}, {"method_name": "getAnsiResolver", "params": [], "throws": null, "modifiers": ["private"], "return_type": "PropertyResolver", "snippet": "\tprivate PropertyResolver getAnsiResolver() {\t\tMutablePropertySources sources = new MutablePropertySources();\t\tsources.addFirst(new AnsiPropertySource(\"ansi\", true));\t\treturn new PropertySourcesPropertyResolver(sources);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ResourceBanner.java", "stars": "47572", "class": {"name": "ResourceBanner", "extends": null, "implements": ["Banner"], "modifiers": ["public"]}}, {"method_name": "getTitleResolver", "params": ["Class<?>"], "throws": null, "modifiers": ["private"], "return_type": "PropertyResolver", "snippet": "\tprivate PropertyResolver getTitleResolver(Class<?> sourceClass) {\t\tMutablePropertySources sources = new MutablePropertySources();\t\tString applicationTitle = getApplicationTitle(sourceClass);\t\tMap<String, Object> titleMap = Collections.singletonMap(\"application.title\",\t\t\t\t(applicationTitle != null) ? applicationTitle : \"\");\t\tsources.addFirst(new MapPropertySource(\"title\", titleMap));\t\treturn new PropertySourcesPropertyResolver(sources);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ResourceBanner.java", "stars": "47572", "class": {"name": "ResourceBanner", "extends": null, "implements": ["Banner"], "modifiers": ["public"]}}, {"method_name": "getApplicationTitle", "params": ["Class<?>"], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "\tprotected String getApplicationTitle(Class<?> sourceClass) {\t\tPackage sourcePackage = (sourceClass != null) ? sourceClass.getPackage() : null;\t\treturn (sourcePackage != null) ? sourcePackage.getImplementationTitle() : null;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ResourceBanner.java", "stars": "47572", "class": {"name": "ResourceBanner", "extends": null, "implements": ["Banner"], "modifiers": ["public"]}}, {"method_name": "onIsEntityInsideOpaqueBlock", "params": ["CallbackInfoReturnable<Boolean>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void onIsEntityInsideOpaqueBlock(CallbackInfoReturnable<Boolean> cir) {        InsideBlockRenderEvent event = new InsideBlockRenderEvent();        Mercury.INSTANCE.getEventManager().fireEvent(event);        if(event.isCancelled()) {            cir.setReturnValue(false);        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/mixin/MixinEntity.java", "stars": "12", "class": {"name": "MixinEntity", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "animateScrollTo", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void animateScrollTo(int targetScrollY, int duration) {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {            ValueAnimator realSmoothScrollAnimation = ValueAnimator.ofInt(getScrollY(), targetScrollY);            realSmoothScrollAnimation.setDuration(duration);            realSmoothScrollAnimation.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {                @Override                public void onAnimationUpdate(ValueAnimator animation) {                    int scrollTo = (Integer) animation.getAnimatedValue();                    scrollTo(0, scrollTo);                }            });            realSmoothScrollAnimation.start();        } else {            smoothScrollTo(0, targetScrollY);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/widget/BottomSheetScrollView.java", "stars": "4", "class": {"name": "BottomSheetScrollView", "extends": "ScrollView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onScrollChanged", "params": ["int", "int", "int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onScrollChanged(int x, int y, int oldX, int oldY) {        super.onScrollChanged(x, y, oldX, oldY);        if (!mIsScrolling) {            if (mListener != null)                mListener.onScrollStart();        }        mIsScrolling = true;        if (mListener != null) {            Direction d = y > oldY ? Direction.DOWN : Direction.UP;            mListener.onScroll(y, d);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/widget/BottomSheetScrollView.java", "stars": "4", "class": {"name": "BottomSheetScrollView", "extends": "ScrollView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onTouchEvent", "params": ["MotionEvent"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onTouchEvent(MotionEvent ev) {        switch (ev.getAction()) {            case MotionEvent.ACTION_DOWN:                if (mListener != null && !mTouchDown)                    mListener.onTouch(true);                mTouchDown = true;                break;            case MotionEvent.ACTION_UP:                if (mListener != null && mTouchDown)                    mListener.onTouch(false);                mTouchDown = false;                mScrollerTask.run();                break;        }        return super.onTouchEvent(ev);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/widget/BottomSheetScrollView.java", "stars": "4", "class": {"name": "BottomSheetScrollView", "extends": "ScrollView", "implements": null, "modifiers": ["public"]}}, {"method_name": "setListener", "params": ["Listener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setListener(Listener listener) {        mListener = listener;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/widget/BottomSheetScrollView.java", "stars": "4", "class": {"name": "BottomSheetScrollView", "extends": "ScrollView", "implements": null, "modifiers": ["public"]}}, {"method_name": "overScrollBy", "params": ["int", "int", "int", "int", "int", "int", "int", "int", "boolean"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean overScrollBy(int deltaX, int deltaY, int scrollX, int scrollY, int scrollRangeX, int scrollRangeY, int maxOverScrollX, int maxOverScrollY, boolean isTouchEvent) {        return super.overScrollBy(                deltaX,                deltaY,                scrollX,                scrollY,                scrollRangeX,                scrollRangeY,                0,                0,                isTouchEvent);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/widget/BottomSheetScrollView.java", "stars": "4", "class": {"name": "BottomSheetScrollView", "extends": "ScrollView", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLoginCnt", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getLoginCnt(String id, String pw) {\t\tint cnt = 0 ;\t\tcon = db.getCon();\t\t// sql\t\tString sql = mSQL.getSQL(mSQL.SEL_LOGIN_CNT);\t\t\t\t// pstmt \uac00\uc838\uc624\uace0\t\tpstmt = db.getPSTMT(con, sql);\t\t\t\ttry{\t\t\t// \uc9c8\uc758 \uba85\ub839 \uc644\uc131\t\t\tpstmt.setString(1, id);\t\t\tpstmt.setString(2, pw);\t\t\t// \uc9c8\uc758\uba85\ub839\ubcf4\ub0b4\uace0 \uacb0\uacfc \ubc1b\uace0\t\t\trs = pstmt.executeQuery();\t\t\t// \ub370\uc774\ud130\uaebc\ub0b4\uc11c \ubcc0\uc218\uc5d0 \ub2f4\uace0\t\t\trs.next();\t\t\tcnt = rs.getInt(\"cnt\");\t\t}catch(Exception e) {\t\t\te.printStackTrace();\t\t} finally {\t\t\tdb.close(rs);\t\t\tdb.close(pstmt);\t\t\tdb.close(con);\t\t}\t\treturn cnt;\t}", "url": "https://raw.githubusercontent.com/increpas-cls2/clsProj/branch/clsProj/src/com/increpas/www/dao/MemberDAO.java", "stars": "2", "class": {"name": "MemberDAO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items\t\t\t\t.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.BUILDING_BLOCKS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/SoftSandstoneBlock.java", "stars": "2", "class": {"name": "SoftSandstoneBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPickBlock", "params": ["BlockState", "RayTraceResult", "IBlockReader", "BlockPos", "PlayerEntity"], "throws": null, "modifiers": ["public"], "return_type": "ItemStack", "snippet": "\t\tpublic ItemStack getPickBlock(BlockState state, RayTraceResult target, IBlockReader world, BlockPos pos, PlayerEntity player) {\t\t\treturn new ItemStack(SoftSandstoneBlock.block, (int) (1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/SoftSandstoneBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 0));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/SoftSandstoneBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "salvar", "params": ["Tabela"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void salvar(Tabela tabela) {        em.persist(tabela);    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/dao/TabelaDaoImpl.java", "stars": "2", "class": {"name": "TabelaDaoImpl", "extends": null, "implements": ["TabelaDao"], "modifiers": ["public"]}}, {"method_name": "recuperar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Tabela>", "snippet": "    public List<Tabela> recuperar() {        return em.createQuery(\"select t from Tabela t\", Tabela.class).getResultList();    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/dao/TabelaDaoImpl.java", "stars": "2", "class": {"name": "TabelaDaoImpl", "extends": null, "implements": ["TabelaDao"], "modifiers": ["public"]}}, {"method_name": "recuperarPorId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Tabela", "snippet": "    public Tabela recuperarPorId(Integer id) {        return em.find(Tabela.class, id);    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/dao/TabelaDaoImpl.java", "stars": "2", "class": {"name": "TabelaDaoImpl", "extends": null, "implements": ["TabelaDao"], "modifiers": ["public"]}}, {"method_name": "atualizar", "params": ["Tabela"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void atualizar(Tabela tabela) {        em.merge(tabela);    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/dao/TabelaDaoImpl.java", "stars": "2", "class": {"name": "TabelaDaoImpl", "extends": null, "implements": ["TabelaDao"], "modifiers": ["public"]}}, {"method_name": "excluir", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void excluir(Integer id) {        em.remove(em.getReference(Tabela.class, id));    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/dao/TabelaDaoImpl.java", "stars": "2", "class": {"name": "TabelaDaoImpl", "extends": null, "implements": ["TabelaDao"], "modifiers": ["public"]}}, {"method_name": "contextLoads", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid contextLoads() {\t}", "url": "https://raw.githubusercontent.com/bezkoder/spring-boot-upload-multiple-files/master/src/test/java/com/bezkoder/spring/files/uploadmultiple/SpringBootUploadMultipleFilesApplicationTests.java", "stars": "2", "class": {"name": "SpringBootUploadMultipleFilesApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        SpringApplication.run(TaoiotApplication.class, args);    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/TaoiotApplication.java", "stars": "6", "class": {"name": "TaoiotApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMsg", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getMsg() {        return msg;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/UpdatePackageResult.java", "stars": "1", "class": {"name": "UpdatePackageResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMsg", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMsg(String msg) {        this.msg = msg;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/UpdatePackageResult.java", "stars": "1", "class": {"name": "UpdatePackageResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCode() {        return code;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/UpdatePackageResult.java", "stars": "1", "class": {"name": "UpdatePackageResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCode", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCode(int code) {        this.code = code;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/UpdatePackageResult.java", "stars": "1", "class": {"name": "UpdatePackageResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CallPluginInfo", "snippet": "    public CallPluginInfo getData() {        return data;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/UpdatePackageResult.java", "stars": "1", "class": {"name": "UpdatePackageResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setData", "params": ["CallPluginInfo"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setData(CallPluginInfo data) {        this.data = data;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/UpdatePackageResult.java", "stars": "1", "class": {"name": "UpdatePackageResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"UpdatePackageResult{\" +                \"msg='\" + msg + '\\'' +                \", code=\" + code +                \", data=\" + data +                '}';    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/UpdatePackageResult.java", "stars": "1", "class": {"name": "UpdatePackageResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOneToOneUrl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getOneToOneUrl() {            return oneToOneUrl;        }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/UpdatePackageResult.java", "stars": "1", "class": {"name": "CallPluginInfo", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setOneToOneUrl", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setOneToOneUrl(String oneToOneUrl) {            this.oneToOneUrl = oneToOneUrl;        }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/UpdatePackageResult.java", "stars": "1", "class": {"name": "CallPluginInfo", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getOneToOneVer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getOneToOneVer() {            return oneToOneVer;        }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/UpdatePackageResult.java", "stars": "1", "class": {"name": "CallPluginInfo", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setOneToOneVer", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setOneToOneVer(int oneToOneVer) {            this.oneToOneVer = oneToOneVer;        }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/UpdatePackageResult.java", "stars": "1", "class": {"name": "CallPluginInfo", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String toString() {            return \"CallPluginInfo{\" +                    \"oneToOneUrl='\" + oneToOneUrl + '\\'' +                    \", oneToOneVer=\" + oneToOneVer +                    '}';        }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/UpdatePackageResult.java", "stars": "1", "class": {"name": "CallPluginInfo", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "asDirtyRecord", "params": ["Record"], "throws": null, "modifiers": ["public", "static"], "return_type": "DirtyRecord", "snippet": "    public static DirtyRecord asDirtyRecord(final Record record) {        DirtyRecord result = new DirtyRecord();        for (int i = 0; i < record.getColumnNumber(); i++) {            result.addColumn(record.getColumn(i));        }        return result;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/plugin/task/util/DirtyRecord.java", "stars": "23", "class": {"name": "DirtyRecord", "extends": null, "implements": ["Record"], "modifiers": ["public"]}}, {"method_name": "addColumn", "params": ["Column"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addColumn(Column column) {        this.columns.add(                DirtyColumn.asDirtyColumn(column, this.columns.size()));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/plugin/task/util/DirtyRecord.java", "stars": "23", "class": {"name": "DirtyRecord", "extends": null, "implements": ["Record"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return JSON.toJSONString(this.columns);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/plugin/task/util/DirtyRecord.java", "stars": "23", "class": {"name": "DirtyRecord", "extends": null, "implements": ["Record"], "modifiers": ["public"]}}, {"method_name": "setColumn", "params": ["int", "Column"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setColumn(int i, Column column) {        throw DataXException.asDataXException(FrameworkErrorCode.RUNTIME_ERROR,                \"\u8be5\u65b9\u6cd5\u4e0d\u652f\u6301!\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/plugin/task/util/DirtyRecord.java", "stars": "23", "class": {"name": "DirtyRecord", "extends": null, "implements": ["Record"], "modifiers": ["public"]}}, {"method_name": "getColumn", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Column", "snippet": "    public Column getColumn(int i) {        throw DataXException.asDataXException(FrameworkErrorCode.RUNTIME_ERROR,                \"\u8be5\u65b9\u6cd5\u4e0d\u652f\u6301!\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/plugin/task/util/DirtyRecord.java", "stars": "23", "class": {"name": "DirtyRecord", "extends": null, "implements": ["Record"], "modifiers": ["public"]}}, {"method_name": "getColumnNumber", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getColumnNumber() {        throw DataXException.asDataXException(FrameworkErrorCode.RUNTIME_ERROR,                \"\u8be5\u65b9\u6cd5\u4e0d\u652f\u6301!\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/plugin/task/util/DirtyRecord.java", "stars": "23", "class": {"name": "DirtyRecord", "extends": null, "implements": ["Record"], "modifiers": ["public"]}}, {"method_name": "getByteSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getByteSize() {        return 0;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/plugin/task/util/DirtyRecord.java", "stars": "23", "class": {"name": "DirtyRecord", "extends": null, "implements": ["Record"], "modifiers": ["public"]}}, {"method_name": "getMemorySize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getMemorySize() {        throw DataXException.asDataXException(FrameworkErrorCode.RUNTIME_ERROR,                \"\u8be5\u65b9\u6cd5\u4e0d\u652f\u6301!\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/plugin/task/util/DirtyRecord.java", "stars": "23", "class": {"name": "DirtyRecord", "extends": null, "implements": ["Record"], "modifiers": ["public"]}}, {"method_name": "copyElement", "params": [], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public <T>T copyElement() {        return (T)this;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/plugin/task/util/DirtyRecord.java", "stars": "23", "class": {"name": "DirtyRecord", "extends": null, "implements": ["Record"], "modifiers": ["public"]}}, {"method_name": "getColumns", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Column>", "snippet": "    public List<Column> getColumns() {        return columns;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/plugin/task/util/DirtyRecord.java", "stars": "23", "class": {"name": "DirtyRecord", "extends": null, "implements": ["Record"], "modifiers": ["public"]}}, {"method_name": "uid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String uid() {        return \"\";    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/plugin/task/util/DirtyRecord.java", "stars": "23", "class": {"name": "DirtyRecord", "extends": null, "implements": ["Record"], "modifiers": ["public"]}}, {"method_name": "setColumns", "params": ["List<Column>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setColumns(List<Column> columns) {        this.columns = columns;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/plugin/task/util/DirtyRecord.java", "stars": "23", "class": {"name": "DirtyRecord", "extends": null, "implements": ["Record"], "modifiers": ["public"]}}, {"method_name": "asDirtyColumn", "params": ["Column", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "Column", "snippet": "    public static Column asDirtyColumn(final Column column, int index) {        return new DirtyColumn(column, index);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/plugin/task/util/DirtyRecord.java", "stars": "23", "class": {"name": "DirtyColumn", "extends": "Column", "implements": null, "modifiers": []}}, {"method_name": "getIndex", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getIndex() {        return index;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/plugin/task/util/DirtyRecord.java", "stars": "23", "class": {"name": "DirtyColumn", "extends": "Column", "implements": null, "modifiers": []}}, {"method_name": "setIndex", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIndex(int index) {        this.index = index;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/plugin/task/util/DirtyRecord.java", "stars": "23", "class": {"name": "DirtyColumn", "extends": "Column", "implements": null, "modifiers": []}}, {"method_name": "asLong", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long asLong() {        throw DataXException.asDataXException(FrameworkErrorCode.RUNTIME_ERROR,                \"\u8be5\u65b9\u6cd5\u4e0d\u652f\u6301!\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/plugin/task/util/DirtyRecord.java", "stars": "23", "class": {"name": "DirtyColumn", "extends": "Column", "implements": null, "modifiers": []}}, {"method_name": "asDouble", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Double", "snippet": "    public Double asDouble() {        throw DataXException.asDataXException(FrameworkErrorCode.RUNTIME_ERROR,                \"\u8be5\u65b9\u6cd5\u4e0d\u652f\u6301!\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/plugin/task/util/DirtyRecord.java", "stars": "23", "class": {"name": "DirtyColumn", "extends": "Column", "implements": null, "modifiers": []}}, {"method_name": "asString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String asString() {        throw DataXException.asDataXException(FrameworkErrorCode.RUNTIME_ERROR,                \"\u8be5\u65b9\u6cd5\u4e0d\u652f\u6301!\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/plugin/task/util/DirtyRecord.java", "stars": "23", "class": {"name": "DirtyColumn", "extends": "Column", "implements": null, "modifiers": []}}, {"method_name": "asDate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date asDate() {        throw DataXException.asDataXException(FrameworkErrorCode.RUNTIME_ERROR,                \"\u8be5\u65b9\u6cd5\u4e0d\u652f\u6301!\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/plugin/task/util/DirtyRecord.java", "stars": "23", "class": {"name": "DirtyColumn", "extends": "Column", "implements": null, "modifiers": []}}, {"method_name": "asBytes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte[] asBytes() {        throw DataXException.asDataXException(FrameworkErrorCode.RUNTIME_ERROR,                \"\u8be5\u65b9\u6cd5\u4e0d\u652f\u6301!\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/plugin/task/util/DirtyRecord.java", "stars": "23", "class": {"name": "DirtyColumn", "extends": "Column", "implements": null, "modifiers": []}}, {"method_name": "asBoolean", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Boolean", "snippet": "    public Boolean asBoolean() {        throw DataXException.asDataXException(FrameworkErrorCode.RUNTIME_ERROR,                \"\u8be5\u65b9\u6cd5\u4e0d\u652f\u6301!\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/plugin/task/util/DirtyRecord.java", "stars": "23", "class": {"name": "DirtyColumn", "extends": "Column", "implements": null, "modifiers": []}}, {"method_name": "asBigDecimal", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BigDecimal", "snippet": "    public BigDecimal asBigDecimal() {        throw DataXException.asDataXException(FrameworkErrorCode.RUNTIME_ERROR,                \"\u8be5\u65b9\u6cd5\u4e0d\u652f\u6301!\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/plugin/task/util/DirtyRecord.java", "stars": "23", "class": {"name": "DirtyColumn", "extends": "Column", "implements": null, "modifiers": []}}, {"method_name": "asBigInteger", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BigInteger", "snippet": "    public BigInteger asBigInteger() {        throw DataXException.asDataXException(FrameworkErrorCode.RUNTIME_ERROR,                \"\u8be5\u65b9\u6cd5\u4e0d\u652f\u6301!\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/plugin/task/util/DirtyRecord.java", "stars": "23", "class": {"name": "DirtyColumn", "extends": "Column", "implements": null, "modifiers": []}}, {"method_name": "proxyBeanMethodsIsEnabledByDefault", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid proxyBeanMethodsIsEnabledByDefault() {\t\tAnnotationAttributes attributes = AnnotatedElementUtils\t\t\t\t.getMergedAnnotationAttributes(DefaultSpringBootConfiguration.class, Configuration.class);\t\tassertThat(attributes.get(\"proxyBeanMethods\")).isEqualTo(true);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringBootConfigurationTests.java", "stars": "47572", "class": {"name": "SpringBootConfigurationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "proxyBeanMethodsCanBeDisabled", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid proxyBeanMethodsCanBeDisabled() {\t\tAnnotationAttributes attributes = AnnotatedElementUtils\t\t\t\t.getMergedAnnotationAttributes(NoBeanMethodProxyingSpringBootConfiguration.class, Configuration.class);\t\tassertThat(attributes.get(\"proxyBeanMethods\")).isEqualTo(false);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringBootConfigurationTests.java", "stars": "47572", "class": {"name": "SpringBootConfigurationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "vaultInfoForCypher", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String vaultInfoForCypher(final String vaultCypher) {        return MAGIC_PART_DATA + \";\" + VERSION_PART_DATA + \";\" + vaultCypher;    }", "url": "https://raw.githubusercontent.com/sadv1r/ansible-vault-editor-idea-plugin/master/src/main/java/ru/sadv1r/ansible/vault/crypto/VaultInfo.java", "stars": "7", "class": {"name": "VaultInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getVaultVersion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getVaultVersion() {        return vaultVersion;    }", "url": "https://raw.githubusercontent.com/sadv1r/ansible-vault-editor-idea-plugin/master/src/main/java/ru/sadv1r/ansible/vault/crypto/VaultInfo.java", "stars": "7", "class": {"name": "VaultInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCypher", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Cypher", "snippet": "    public Cypher getCypher() {        return cypher;    }", "url": "https://raw.githubusercontent.com/sadv1r/ansible-vault-editor-idea-plugin/master/src/main/java/ru/sadv1r/ansible/vault/crypto/VaultInfo.java", "stars": "7", "class": {"name": "VaultInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "register", "params": ["UmsAdmin", "BindingResult"], "throws": null, "modifiers": ["public"], "return_type": "CommonResult<UmsAdmin>", "snippet": "    public CommonResult<UmsAdmin> register(@RequestBody UmsAdmin umsAdminParam, BindingResult result) {        UmsAdmin umsAdmin = adminService.register(umsAdminParam);        if (umsAdmin == null) {            CommonResult.failed();        }        return CommonResult.success(umsAdmin);    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/security-jwt/src/main/java/com/yyj/security/controller/UmsAdminController.java", "stars": "2", "class": {"name": "UmsAdminController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "login", "params": ["UmsAdminLoginParam", "BindingResult"], "throws": null, "modifiers": ["public"], "return_type": "CommonResult", "snippet": "    public CommonResult login(@RequestBody UmsAdminLoginParam umsAdminLoginParam, BindingResult result) {        String token = adminService.login(umsAdminLoginParam.getUsername(), umsAdminLoginParam.getPassword());        if (token == null) {            return CommonResult.validateFailed(\"\u7528\u6237\u540d\u6216\u5bc6\u7801\u9519\u8bef\");        }        Map<String, String> tokenMap = new HashMap<>();        tokenMap.put(\"token\", token);        tokenMap.put(\"tokenHead\", tokenHead);        return CommonResult.success(tokenMap);    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/security-jwt/src/main/java/com/yyj/security/controller/UmsAdminController.java", "stars": "2", "class": {"name": "UmsAdminController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPermissionList", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "CommonResult<List>", "snippet": "    public CommonResult<List<UmsPermission>> getPermissionList(@PathVariable Long adminId) {        List<UmsPermission> permissionList = adminService.getPermissionList(adminId);        return CommonResult.success(permissionList);    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/security-jwt/src/main/java/com/yyj/security/controller/UmsAdminController.java", "stars": "2", "class": {"name": "UmsAdminController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecutionId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getExecutionId() {    if (this.getParentFlow() != null) {      return this.getParentFlow().getExecutionId();    }    return -1;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlowBase.java", "stars": "18", "class": {"name": "ExecutableFlowBase", "extends": "ExecutableNode", "implements": null, "modifiers": ["public"]}}, {"method_name": "getProjectId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getProjectId() {    if (this.getParentFlow() != null) {      return this.getParentFlow().getProjectId();    }    return -1;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlowBase.java", "stars": "18", "class": {"name": "ExecutableFlowBase", "extends": "ExecutableNode", "implements": null, "modifiers": ["public"]}}, {"method_name": "getProjectName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getProjectName() {    if (this.getParentFlow() != null) {      return this.getParentFlow().getProjectName();    }    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlowBase.java", "stars": "18", "class": {"name": "ExecutableFlowBase", "extends": "ExecutableNode", "implements": null, "modifiers": ["public"]}}, {"method_name": "getVersion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getVersion() {    if (this.getParentFlow() != null) {      return this.getParentFlow().getVersion();    }    return -1;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlowBase.java", "stars": "18", "class": {"name": "ExecutableFlowBase", "extends": "ExecutableNode", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLastModifiedByUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getLastModifiedByUser() {    if (this.getParentFlow() != null) {      return this.getParentFlow().getLastModifiedByUser();    }    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlowBase.java", "stars": "18", "class": {"name": "ExecutableFlowBase", "extends": "ExecutableNode", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLastModifiedTimestamp", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getLastModifiedTimestamp() {    if (this.getParentFlow() != null) {      return this.getParentFlow().getLastModifiedTimestamp();    }    return -1;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlowBase.java", "stars": "18", "class": {"name": "ExecutableFlowBase", "extends": "ExecutableNode", "implements": null, "modifiers": ["public"]}}, {"method_name": "getFlowProps", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Collection<FlowProps>", "snippet": "  public Collection<FlowProps> getFlowProps() {    return this.flowProps.values();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlowBase.java", "stars": "18", "class": {"name": "ExecutableFlowBase", "extends": "ExecutableNode", "implements": null, "modifiers": ["public"]}}, {"method_name": "getFlowId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getFlowId() {    return this.flowId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlowBase.java", "stars": "18", "class": {"name": "ExecutableFlowBase", "extends": "ExecutableNode", "implements": null, "modifiers": ["public"]}}, {"method_name": "setFlow", "params": ["Project", "Flow"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void setFlow(final Project project, final Flow flow) {    this.flowId = flow.getId();    this.flowProps.putAll(flow.getAllFlowProps());    for (final Node node : flow.getNodes()) {      final String id = node.getId();      if (node.getType().equals(SpecialJobTypes.EMBEDDED_FLOW_TYPE)) {        final String embeddedFlowId = node.getEmbeddedFlowId();        final Flow subFlow = project.getFlow(embeddedFlowId);        final ExecutableFlowBase embeddedFlow =            new ExecutableFlowBase(project, node, subFlow, this);        this.executableNodes.put(id, embeddedFlow);      } else {        final ExecutableNode exNode = new ExecutableNode(node, this);        this.executableNodes.put(id, exNode);      }    }    for (final Edge edge : flow.getEdges()) {      final ExecutableNode sourceNode = this.executableNodes.get(edge.getSourceId());      final ExecutableNode targetNode = this.executableNodes.get(edge.getTargetId());      if (sourceNode == null) {        logger.info(\"Source node \" + edge.getSourceId() + \" doesn't exist\");      }      sourceNode.addOutNode(edge.getTargetId());      targetNode.addInNode(edge.getSourceId());    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlowBase.java", "stars": "18", "class": {"name": "ExecutableFlowBase", "extends": "ExecutableNode", "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecutableNodes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<ExecutableNode>", "snippet": "  public List<ExecutableNode> getExecutableNodes() {    return new ArrayList<>(this.executableNodes.values());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlowBase.java", "stars": "18", "class": {"name": "ExecutableFlowBase", "extends": "ExecutableNode", "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecutableNode", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "ExecutableNode", "snippet": "  public ExecutableNode getExecutableNode(final String id) {    return this.executableNodes.get(id);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlowBase.java", "stars": "18", "class": {"name": "ExecutableFlowBase", "extends": "ExecutableNode", "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecutableNodePath", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "ExecutableNode", "snippet": "  public ExecutableNode getExecutableNodePath(final String ids) {    final String[] split = ids.split(\":\");    return getExecutableNodePath(split);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlowBase.java", "stars": "18", "class": {"name": "ExecutableFlowBase", "extends": "ExecutableNode", "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecutableNodePath", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "ExecutableNode", "snippet": "  public ExecutableNode getExecutableNodePath(final String... ids) {    return getExecutableNodePath(this, ids, 0);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlowBase.java", "stars": "18", "class": {"name": "ExecutableFlowBase", "extends": "ExecutableNode", "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecutableNodePath", "params": ["ExecutableFlowBase", "String", "int"], "throws": null, "modifiers": ["private"], "return_type": "ExecutableNode", "snippet": "  private ExecutableNode getExecutableNodePath(final ExecutableFlowBase flow,      final String[] ids, int currentIdIdx) {    final ExecutableNode node = flow.getExecutableNode(ids[currentIdIdx]);    currentIdIdx++;    if (node == null) {      return null;    }    if (ids.length == currentIdIdx) {      return node;    } else if (node instanceof ExecutableFlowBase) {      return getExecutableNodePath((ExecutableFlowBase) node, ids, currentIdIdx);    } else {      return null;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlowBase.java", "stars": "18", "class": {"name": "ExecutableFlowBase", "extends": "ExecutableNode", "implements": null, "modifiers": ["public"]}}, {"method_name": "getStartNodes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "  public List<String> getStartNodes() {    if (this.startNodes == null) {      this.startNodes = new ArrayList<>();      for (final ExecutableNode node : this.executableNodes.values()) {        if (node.getInNodes().isEmpty()) {          this.startNodes.add(node.getId());        }      }    }    return this.startNodes;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlowBase.java", "stars": "18", "class": {"name": "ExecutableFlowBase", "extends": "ExecutableNode", "implements": null, "modifiers": ["public"]}}, {"method_name": "getEndNodes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "  public List<String> getEndNodes() {    if (this.endNodes == null) {      this.endNodes = new ArrayList<>();      for (final ExecutableNode node : this.executableNodes.values()) {        if (node.getOutNodes().isEmpty()) {          this.endNodes.add(node.getId());        }      }    }    return this.endNodes;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlowBase.java", "stars": "18", "class": {"name": "ExecutableFlowBase", "extends": "ExecutableNode", "implements": null, "modifiers": ["public"]}}, {"method_name": "toObject", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "  public Map<String, Object> toObject() {    final Map<String, Object> mapObj = new HashMap<>();    fillMapFromExecutable(mapObj);    return mapObj;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlowBase.java", "stars": "18", "class": {"name": "ExecutableFlowBase", "extends": "ExecutableNode", "implements": null, "modifiers": ["public"]}}, {"method_name": "fillMapFromExecutable", "params": ["Map<String,Object>"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void fillMapFromExecutable(final Map<String, Object> flowObjMap) {    super.fillMapFromExecutable(flowObjMap);    flowObjMap.put(FLOW_ID_PARAM, this.flowId);    final ArrayList<Object> nodes = new ArrayList<>();    for (final ExecutableNode node : this.executableNodes.values()) {      nodes.add(node.toObject());    }    flowObjMap.put(NODES_PARAM, nodes);    // Flow properties    final ArrayList<Object> props = new ArrayList<>();    for (final FlowProps fprop : this.flowProps.values()) {      final HashMap<String, Object> propObj = new HashMap<>();      final String source = fprop.getSource();      final String inheritedSource = fprop.getInheritedSource();      propObj.put(SOURCE_PARAM, source);      if (inheritedSource != null) {        propObj.put(INHERITED_PARAM, inheritedSource);      }      props.add(propObj);    }    flowObjMap.put(PROPERTIES_PARAM, props);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlowBase.java", "stars": "18", "class": {"name": "ExecutableFlowBase", "extends": "ExecutableNode", "implements": null, "modifiers": ["public"]}}, {"method_name": "fillExecutableFromMapObject", "params": ["TypedMapWrapper<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void fillExecutableFromMapObject(      final TypedMapWrapper<String, Object> flowObjMap) {    super.fillExecutableFromMapObject(flowObjMap);    this.flowId = flowObjMap.getString(FLOW_ID_PARAM);    final List<Object> nodes = flowObjMap.<Object>getList(NODES_PARAM);    if (nodes != null) {      for (final Object nodeObj : nodes) {        final Map<String, Object> nodeObjMap = (Map<String, Object>) nodeObj;        final TypedMapWrapper<String, Object> wrapper =            new TypedMapWrapper<>(nodeObjMap);        final String type = wrapper.getString(TYPE_PARAM);        if (type != null && type.equals(SpecialJobTypes.EMBEDDED_FLOW_TYPE)) {          final ExecutableFlowBase exFlow = new ExecutableFlowBase();          exFlow.fillExecutableFromMapObject(wrapper);          exFlow.setParentFlow(this);          this.executableNodes.put(exFlow.getId(), exFlow);        } else {          final ExecutableNode exJob = new ExecutableNode();          exJob.fillExecutableFromMapObject(nodeObjMap);          exJob.setParentFlow(this);          this.executableNodes.put(exJob.getId(), exJob);        }      }    }    final List<Object> properties = flowObjMap.<Object>getList(PROPERTIES_PARAM);    for (final Object propNode : properties) {      final HashMap<String, Object> fprop = (HashMap<String, Object>) propNode;      final String source = (String) fprop.get(\"source\");      final String inheritedSource = (String) fprop.get(\"inherited\");      final FlowProps flowProps = new FlowProps(inheritedSource, source);      this.flowProps.put(source, flowProps);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlowBase.java", "stars": "18", "class": {"name": "ExecutableFlowBase", "extends": "ExecutableNode", "implements": null, "modifiers": ["public"]}}, {"method_name": "toUpdateObject", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "  public Map<String, Object> toUpdateObject(final long lastUpdateTime) {    final Map<String, Object> updateData = super.toUpdateObject();    final List<Map<String, Object>> updatedNodes =        new ArrayList<>();    for (final ExecutableNode node : this.executableNodes.values()) {      if (node instanceof ExecutableFlowBase) {        final Map<String, Object> updatedNodeMap =            ((ExecutableFlowBase) node).toUpdateObject(lastUpdateTime);        // We add only flows to the list which either have a good update time,        // or has updated descendants.        if (node.getUpdateTime() > lastUpdateTime            || updatedNodeMap.containsKey(NODES_PARAM)) {          updatedNodes.add(updatedNodeMap);        }      } else {        if (node.getUpdateTime() > lastUpdateTime) {          final Map<String, Object> updatedNodeMap = node.toUpdateObject();          updatedNodes.add(updatedNodeMap);        }      }    }    // if there are no updated nodes, we just won't add it to the list. This is    // good    // since if this is a nested flow, the parent is given the option to include    // or    // discard these subflows.    if (!updatedNodes.isEmpty()) {      updateData.put(NODES_PARAM, updatedNodes);    }    return updateData;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlowBase.java", "stars": "18", "class": {"name": "ExecutableFlowBase", "extends": "ExecutableNode", "implements": null, "modifiers": ["public"]}}, {"method_name": "applyUpdateObject", "params": ["TypedMapWrapper<String,Object>", "List<ExecutableNode>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void applyUpdateObject(final TypedMapWrapper<String, Object> updateData,      final List<ExecutableNode> updatedNodes) {    super.applyUpdateObject(updateData);    if (updatedNodes != null) {      updatedNodes.add(this);    }    final List<Map<String, Object>> nodes =        (List<Map<String, Object>>) updateData            .<Map<String, Object>>getList(NODES_PARAM);    if (nodes != null) {      for (final Map<String, Object> node : nodes) {        final TypedMapWrapper<String, Object> nodeWrapper =            new TypedMapWrapper<>(node);        String id = nodeWrapper.getString(ID_PARAM);        if (id == null) {          // Legacy case          id = nodeWrapper.getString(\"jobId\");        }        final ExecutableNode exNode = this.executableNodes.get(id);        if (updatedNodes != null) {          updatedNodes.add(exNode);        }        if (exNode instanceof ExecutableFlowBase) {          ((ExecutableFlowBase) exNode).applyUpdateObject(nodeWrapper,              updatedNodes);        } else {          exNode.applyUpdateObject(nodeWrapper);        }      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlowBase.java", "stars": "18", "class": {"name": "ExecutableFlowBase", "extends": "ExecutableNode", "implements": null, "modifiers": ["public"]}}, {"method_name": "applyUpdateObject", "params": ["Map<String,Object>", "List<ExecutableNode>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void applyUpdateObject(final Map<String, Object> updateData,      final List<ExecutableNode> updatedNodes) {    final TypedMapWrapper<String, Object> typedMapWrapper =        new TypedMapWrapper<>(updateData);    applyUpdateObject(typedMapWrapper, updatedNodes);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlowBase.java", "stars": "18", "class": {"name": "ExecutableFlowBase", "extends": "ExecutableNode", "implements": null, "modifiers": ["public"]}}, {"method_name": "applyUpdateObject", "params": ["Map<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void applyUpdateObject(final Map<String, Object> updateData) {    final TypedMapWrapper<String, Object> typedMapWrapper =        new TypedMapWrapper<>(updateData);    applyUpdateObject(typedMapWrapper, null);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlowBase.java", "stars": "18", "class": {"name": "ExecutableFlowBase", "extends": "ExecutableNode", "implements": null, "modifiers": ["public"]}}, {"method_name": "reEnableDependents", "params": ["ExecutableNode"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void reEnableDependents(final ExecutableNode... nodes) {    for (final ExecutableNode node : nodes) {      for (final String dependent : node.getOutNodes()) {        final ExecutableNode dependentNode = getExecutableNode(dependent);        if (dependentNode.getStatus() == Status.KILLED) {          dependentNode.setStatus(Status.READY);          dependentNode.setUpdateTime(System.currentTimeMillis());          reEnableDependents(dependentNode);          if (dependentNode instanceof ExecutableFlowBase) {            ((ExecutableFlowBase) dependentNode).reEnableDependents();          }        } else if (dependentNode.getStatus() == Status.SKIPPED) {          dependentNode.setStatus(Status.DISABLED);          dependentNode.setUpdateTime(System.currentTimeMillis());          reEnableDependents(dependentNode);        }      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlowBase.java", "stars": "18", "class": {"name": "ExecutableFlowBase", "extends": "ExecutableNode", "implements": null, "modifiers": ["public"]}}, {"method_name": "getFlowPath", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getFlowPath() {    if (this.getParentFlow() == null) {      return this.getFlowId();    } else {      return this.getParentFlow().getFlowPath() + \",\" + this.getId() + \":\"          + this.getFlowId();    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutableFlowBase.java", "stars": "18", "class": {"name": "ExecutableFlowBase", "extends": "ExecutableNode", "implements": null, "modifiers": ["public"]}}, {"method_name": "paint", "params": ["Graphics"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void paint(Graphics g) {        g.setColor(Color.RED);        g.fillRect(0, 0, Utils.CHARACTER_SIZE, Utils.CHARACTER_SIZE);    }", "url": "https://raw.githubusercontent.com/radudioane99/Shape-Storm/master/Enemy.java", "stars": "2", "class": {"name": "Enemy", "extends": "JComponent", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init() {        requester.setId(1L);        simpleRequester.setId(1L);        owner.setId(2L);        gardenField.setId(1L);        gardenField.setName(\"testField\");        gardenField.setOwner(owner);        simpleGardenField.setId(1L);        simpleGardenField.setName(\"testField\");        Instant from = Instant.now().plus(100, ChronoUnit.DAYS);        Instant to = Instant.now().plus(200, ChronoUnit.DAYS);        leasing = new Leasing();        leasing.setGardenField(gardenField);        leasing.setUser(requester);        leasing.setFrom(from);        leasing.setTo(to);        leasing.setStatus(LeasingStatus.OPEN);        leasingDTO = new LeasingDTO();        leasingDTO.setGardenField(simpleGardenField);        leasingDTO.setUser(simpleRequester);        leasingDTO.setFrom(from);        leasingDTO.setTo(to);        leasingDTO.setStatus(LeasingStatus.OPEN);        creatorLeasingDTO = new CreatorLeasingDTO();        creatorLeasingDTO.setFrom(from);        creatorLeasingDTO.setTo(to);        creatorLeasingDTO.setGardenFieldId(simpleGardenField.getId());        creatorLeasingDTO.setUserId(requester.getId());        updatingLeasingDTO = new UpdatingLeasingDTO();        when(leasingMapper.toEntity(leasingDTO)).thenReturn(leasing);        when(leasingMapper.toDto(leasing)).thenReturn(leasingDTO);        when(creatorLeasingMapper.toEntity(creatorLeasingDTO)).thenReturn(leasing);        when(creatorLeasingMapper.toDto(leasing)).thenReturn(creatorLeasingDTO);        when(updatingLeasingMapper.toEntity(updatingLeasingDTO)).thenReturn(leasing);        when(userRepository.findById(requester.getId())).thenReturn(Optional.of(requester));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/LeasingServiceTest.java", "stars": "2", "class": {"name": "LeasingServiceTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testCreateJustLoggedInUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testCreateJustLoggedInUser() {        when(userRepository.findById(requester.getId())).thenReturn(Optional.empty());        assertThrows(UserForLeasingDoesNotExistServiceException.class,            () -> leasingService.createLeasing(creatorLeasingDTO, DEFAULT_PAYMENT_SESSION_ID));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/LeasingServiceTest.java", "stars": "2", "class": {"name": "LeasingServiceTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testCreateJustLeasingsWithoutOverlaps", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testCreateJustLeasingsWithoutOverlaps() {        List<Leasing> overlappings = new ArrayList<>();        overlappings.add(new Leasing());        when(leasingRepository.findAllOverlapping(gardenField, requester, leasing.getFrom(), leasing.getTo())).thenReturn(overlappings);        assertThrows(LeasingsOverlapServiceException.class, () -> leasingService.createLeasing(creatorLeasingDTO, DEFAULT_PAYMENT_SESSION_ID));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/LeasingServiceTest.java", "stars": "2", "class": {"name": "LeasingServiceTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testCreateJustInSpecificTimePeriodAllowed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testCreateJustInSpecificTimePeriodAllowed() {        leasing.setFrom(Instant.now().plus(13, ChronoUnit.DAYS));        when(leasingRepository.findById(leasing.getId())).thenReturn(Optional.of(leasing));        assertThrows(LeasingCreateNotAllowedServiceException.class, () -> leasingService.createLeasing(creatorLeasingDTO, DEFAULT_PAYMENT_SESSION_ID));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/LeasingServiceTest.java", "stars": "2", "class": {"name": "LeasingServiceTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testCreateJustOverAMinimumPeriodAllowed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testCreateJustOverAMinimumPeriodAllowed() {        leasing.setFrom(Instant.now().plus(20, ChronoUnit.DAYS));        leasing.setTo(leasing.getFrom().plus(6, ChronoUnit.DAYS));        assertThrows(LeasingTooShortServiceException.class, () -> leasingService.createLeasing(creatorLeasingDTO, DEFAULT_PAYMENT_SESSION_ID));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/LeasingServiceTest.java", "stars": "2", "class": {"name": "LeasingServiceTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testCreateLeasingSuccessfullyBoundaries", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testCreateLeasingSuccessfullyBoundaries() {        leasing.setFrom(Instant.now().plus(15, ChronoUnit.DAYS));        leasing.setTo(leasing.getFrom().plus(8, ChronoUnit.DAYS));        when(leasingRepository.findAllOverlapping(gardenField, requester, leasing.getFrom(), leasing.getTo())).thenReturn(new ArrayList<>());        when(leasingRepository.save(leasing)).thenReturn(leasing);        assertThat(leasingService.createLeasing(creatorLeasingDTO, DEFAULT_PAYMENT_SESSION_ID), is(leasingDTO));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/LeasingServiceTest.java", "stars": "2", "class": {"name": "LeasingServiceTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testCreateLeasingSuccessfully", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testCreateLeasingSuccessfully() {        when(leasingRepository.findAllOverlapping(gardenField, requester, leasing.getFrom(), leasing.getTo())).thenReturn(new ArrayList<>());        when(leasingRepository.save(leasing)).thenReturn(leasing);        assertThat(leasingService.createLeasing(creatorLeasingDTO, DEFAULT_PAYMENT_SESSION_ID), is(leasingDTO));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/LeasingServiceTest.java", "stars": "2", "class": {"name": "LeasingServiceTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testUpdateJustExistingLeasing", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testUpdateJustExistingLeasing() {        when(leasingRepository.findById(leasing.getId())).thenReturn(Optional.empty());        assertThrows(LeasingNotFoundServiceException.class, () -> leasingService.updateLeasing(updatingLeasingDTO));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/LeasingServiceTest.java", "stars": "2", "class": {"name": "LeasingServiceTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testUpdateJustInSpecificTimePeriodAllowed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testUpdateJustInSpecificTimePeriodAllowed() {        leasing.setFrom(Instant.now().plus(13, ChronoUnit.DAYS));        when(leasingRepository.findById(leasing.getId())).thenReturn(Optional.of(leasing));        assertThrows(LeasingUpdateNotAllowedServiceException.class, () -> leasingService.updateLeasing(updatingLeasingDTO));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/LeasingServiceTest.java", "stars": "2", "class": {"name": "LeasingServiceTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testUpdateOwnerWantToChangeStatusToOpen", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testUpdateOwnerWantToChangeStatusToOpen() {        leasing.setStatus(LeasingStatus.RESERVED);        when(leasingRepository.findById(leasing.getId())).thenReturn(Optional.of(leasing));        Leasing newLeasing = new Leasing();        newLeasing.setStatus(LeasingStatus.OPEN);        when(updatingLeasingMapper.toEntity(updatingLeasingDTO)).thenReturn(newLeasing);        assertThrows(InvalidLeasingStateServiceException.class, () -> leasingService.updateLeasing(updatingLeasingDTO));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/LeasingServiceTest.java", "stars": "2", "class": {"name": "LeasingServiceTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testUpdateLeasingByOwnerSuccessfullySetStatusReserved", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testUpdateLeasingByOwnerSuccessfullySetStatusReserved() {        when(securityHelperService.loggedInUserIsOwnerOfGardenField(gardenField.getId())).thenReturn(true);        Leasing newLeasing = new Leasing();        newLeasing.setStatus(LeasingStatus.RESERVED);        newLeasing.setGardenField(gardenField);        newLeasing.setUser(requester);        newLeasing.setFrom(leasing.getFrom());        newLeasing.setTo(leasing.getTo());        LeasingDTO newLeasingDTO = new LeasingDTO();        newLeasingDTO.setStatus(LeasingStatus.RESERVED);        newLeasingDTO.setGardenField(simpleGardenField);        newLeasingDTO.setUser(simpleRequester);        newLeasingDTO.setFrom(leasing.getFrom());        newLeasingDTO.setTo(leasing.getTo());        UpdatingLeasingDTO newUpdatingLeasingDTO = new UpdatingLeasingDTO();        newUpdatingLeasingDTO.setStatus(LeasingStatus.RESERVED);        newUpdatingLeasingDTO.setGardenFieldId(simpleGardenField.getId());        when(leasingRepository.findById(leasing.getId())).thenReturn(Optional.of(leasing));        when(updatingLeasingMapper.toEntity(newUpdatingLeasingDTO)).thenReturn(newLeasing);        when(leasingMapper.toDto(newLeasing)).thenReturn(newLeasingDTO);        when(leasingRepository.save(newLeasing)).thenReturn(newLeasing);        assertThat(leasingService.updateLeasing(newUpdatingLeasingDTO), is(newLeasingDTO));        verify(paymentService, times(1)).finalizePayment(leasing);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/LeasingServiceTest.java", "stars": "2", "class": {"name": "LeasingServiceTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testUpdateLeasingByOwnerSuccessfullySetStatusRejected", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testUpdateLeasingByOwnerSuccessfullySetStatusRejected() {        when(securityHelperService.loggedInUserIsOwnerOfGardenField(gardenField.getId())).thenReturn(true);        Leasing newLeasing = new Leasing();        newLeasing.setStatus(LeasingStatus.REJECTED);        newLeasing.setGardenField(gardenField);        newLeasing.setUser(requester);        newLeasing.setFrom(leasing.getFrom());        newLeasing.setTo(leasing.getTo());        LeasingDTO newLeasingDTO = new LeasingDTO();        newLeasingDTO.setStatus(LeasingStatus.REJECTED);        newLeasingDTO.setGardenField(simpleGardenField);        newLeasingDTO.setUser(simpleRequester);        newLeasingDTO.setFrom(leasing.getFrom());        newLeasingDTO.setTo(leasing.getTo());        UpdatingLeasingDTO newUpdatingLeasingDTO = new UpdatingLeasingDTO();        newUpdatingLeasingDTO.setStatus(LeasingStatus.REJECTED);        newUpdatingLeasingDTO.setGardenFieldId(simpleGardenField.getId());        when(leasingRepository.findById(leasing.getId())).thenReturn(Optional.of(leasing));        when(updatingLeasingMapper.toEntity(newUpdatingLeasingDTO)).thenReturn(newLeasing);        when(leasingMapper.toDto(newLeasing)).thenReturn(newLeasingDTO);        when(leasingRepository.save(newLeasing)).thenReturn(newLeasing);        assertThat(leasingService.updateLeasing(newUpdatingLeasingDTO), is(newLeasingDTO));        verify(paymentService, times(1)).cancelPayment(leasing.getPaymentSessionId());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/LeasingServiceTest.java", "stars": "2", "class": {"name": "LeasingServiceTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testUpdateLeasingByRequesterNotAuthorizedUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testUpdateLeasingByRequesterNotAuthorizedUser() {        doThrow(new MissingPermissionServiceException()).when(securityHelperService).checkPermission(requester.getId());        when(leasingRepository.findById(leasing.getId())).thenReturn(Optional.of(leasing));        assertThrows(MissingPermissionServiceException.class, () -> leasingService.updateLeasing(updatingLeasingDTO));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/LeasingServiceTest.java", "stars": "2", "class": {"name": "LeasingServiceTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testUpdateRequesterWantToChangeStatusToReserved", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testUpdateRequesterWantToChangeStatusToReserved() {        when(securityHelperService.loggedInUserIsOwnerOfGardenField(gardenField.getId())).thenReturn(false);        when(securityHelperService.getLoggedInUser()).thenReturn(requester);        leasing.setStatus(LeasingStatus.OPEN);        when(leasingRepository.findById(leasing.getId())).thenReturn(Optional.of(leasing));        Leasing newLeasing = new Leasing();        newLeasing.setStatus(LeasingStatus.RESERVED);        when(updatingLeasingMapper.toEntity(updatingLeasingDTO)).thenReturn(newLeasing);        assertThrows(InvalidLeasingStateServiceException.class, () -> leasingService.updateLeasing(updatingLeasingDTO));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/LeasingServiceTest.java", "stars": "2", "class": {"name": "LeasingServiceTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testUpdateRequesterWantToChangeStatusToOpen", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testUpdateRequesterWantToChangeStatusToOpen() {        when(securityHelperService.loggedInUserIsOwnerOfGardenField(gardenField.getId())).thenReturn(false);        when(securityHelperService.getLoggedInUser()).thenReturn(requester);        leasing.setStatus(LeasingStatus.CANCELLED);        when(leasingRepository.findById(leasing.getId())).thenReturn(Optional.of(leasing));        Leasing newLeasing = new Leasing();        newLeasing.setStatus(LeasingStatus.OPEN);        when(updatingLeasingMapper.toEntity(updatingLeasingDTO)).thenReturn(newLeasing);        assertThrows(InvalidLeasingStateServiceException.class, () -> leasingService.updateLeasing(updatingLeasingDTO));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/LeasingServiceTest.java", "stars": "2", "class": {"name": "LeasingServiceTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testUpdateLeasingByRequesterSuccessfullySetStatusCancelled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testUpdateLeasingByRequesterSuccessfullySetStatusCancelled() {        when(securityHelperService.loggedInUserIsOwnerOfGardenField(gardenField.getId())).thenReturn(false);        when(securityHelperService.getLoggedInUser()).thenReturn(requester);        Leasing newLeasing = new Leasing();        newLeasing.setStatus(LeasingStatus.CANCELLED);        newLeasing.setGardenField(gardenField);        newLeasing.setUser(requester);        newLeasing.setFrom(leasing.getFrom());        newLeasing.setTo(leasing.getTo());        LeasingDTO newLeasingDTO = new LeasingDTO();        newLeasingDTO.setStatus(LeasingStatus.CANCELLED);        newLeasingDTO.setGardenField(simpleGardenField);        newLeasingDTO.setUser(simpleRequester);        newLeasingDTO.setFrom(leasing.getFrom());        newLeasingDTO.setTo(leasing.getTo());        UpdatingLeasingDTO newUpdatingLeasingDTO = new UpdatingLeasingDTO();        newUpdatingLeasingDTO.setStatus(LeasingStatus.CANCELLED);        newUpdatingLeasingDTO.setGardenFieldId(simpleGardenField.getId());        when(leasingRepository.findById(leasing.getId())).thenReturn(Optional.of(leasing));        when(updatingLeasingMapper.toEntity(newUpdatingLeasingDTO)).thenReturn(newLeasing);        when(leasingMapper.toDto(newLeasing)).thenReturn(newLeasingDTO);        when(leasingRepository.save(newLeasing)).thenReturn(newLeasing);        assertThat(leasingService.updateLeasing(newUpdatingLeasingDTO), is(newLeasingDTO));        verify(paymentService, times(1)).cancelPayment(leasing.getPaymentSessionId());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/service/LeasingServiceTest.java", "stars": "2", "class": {"name": "LeasingServiceTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCheckSegMethod", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "io", "snippet": "  public static io.grpc.MethodDescriptor<generated.xn.services.ex.api.grpcstream.protos.SegmentReq,      generated.xn.services.ex.api.grpcstream.protos.SegmentResp> getCheckSegMethod() {    io.grpc.MethodDescriptor<generated.xn.services.ex.api.grpcstream.protos.SegmentReq, generated.xn.services.ex.api.grpcstream.protos.SegmentResp> getCheckSegMethod;    if ((getCheckSegMethod = SegmentServicesGrpc.getCheckSegMethod) == null) {      synchronized (SegmentServicesGrpc.class) {        if ((getCheckSegMethod = SegmentServicesGrpc.getCheckSegMethod) == null) {          SegmentServicesGrpc.getCheckSegMethod = getCheckSegMethod =               io.grpc.MethodDescriptor.<generated.xn.services.ex.api.grpcstream.protos.SegmentReq, generated.xn.services.ex.api.grpcstream.protos.SegmentResp>newBuilder()              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)              .setFullMethodName(generateFullMethodName(                  \"data_services_seg.SegmentServices\", \"checkSeg\"))              .setSampledToLocalTracing(true)              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(                  generated.xn.services.ex.api.grpcstream.protos.SegmentReq.getDefaultInstance()))              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(                  generated.xn.services.ex.api.grpcstream.protos.SegmentResp.getDefaultInstance()))                  .setSchemaDescriptor(new SegmentServicesMethodDescriptorSupplier(\"checkSeg\"))                  .build();          }        }     }     return getCheckSegMethod;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentServicesGrpc.java", "stars": "3", "class": {"name": "SegmentServicesGrpc", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "newStub", "params": ["io"], "throws": null, "modifiers": ["public", "static"], "return_type": "SegmentServicesStub", "snippet": "  public static SegmentServicesStub newStub(io.grpc.Channel channel) {    return new SegmentServicesStub(channel);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentServicesGrpc.java", "stars": "3", "class": {"name": "SegmentServicesGrpc", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "newBlockingStub", "params": ["io"], "throws": null, "modifiers": ["public", "static"], "return_type": "SegmentServicesBlockingStub", "snippet": "  public static SegmentServicesBlockingStub newBlockingStub(      io.grpc.Channel channel) {    return new SegmentServicesBlockingStub(channel);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentServicesGrpc.java", "stars": "3", "class": {"name": "SegmentServicesGrpc", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "newFutureStub", "params": ["io"], "throws": null, "modifiers": ["public", "static"], "return_type": "SegmentServicesFutureStub", "snippet": "  public static SegmentServicesFutureStub newFutureStub(      io.grpc.Channel channel) {    return new SegmentServicesFutureStub(channel);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentServicesGrpc.java", "stars": "3", "class": {"name": "SegmentServicesGrpc", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getServiceDescriptor", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "io", "snippet": "  public static io.grpc.ServiceDescriptor getServiceDescriptor() {    io.grpc.ServiceDescriptor result = serviceDescriptor;    if (result == null) {      synchronized (SegmentServicesGrpc.class) {        result = serviceDescriptor;        if (result == null) {          serviceDescriptor = result = io.grpc.ServiceDescriptor.newBuilder(SERVICE_NAME)              .setSchemaDescriptor(new SegmentServicesFileDescriptorSupplier())              .addMethod(getCheckSegMethod())              .build();        }      }    }    return result;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentServicesGrpc.java", "stars": "3", "class": {"name": "SegmentServicesGrpc", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "checkSeg", "params": ["generated", "io"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void checkSeg(generated.xn.services.ex.api.grpcstream.protos.SegmentReq request,        io.grpc.stub.StreamObserver<generated.xn.services.ex.api.grpcstream.protos.SegmentResp> responseObserver) {      asyncUnimplementedUnaryCall(getCheckSegMethod(), responseObserver);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentServicesGrpc.java", "stars": "3", "class": {"name": "SegmentServicesImplBase", "extends": null, "implements": ["io"], "modifiers": ["public", "static", "abstract"]}}, {"method_name": "bindService", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "io", "snippet": "    @java.lang.Override public final io.grpc.ServerServiceDefinition bindService() {      return io.grpc.ServerServiceDefinition.builder(getServiceDescriptor())          .addMethod(            getCheckSegMethod(),            asyncUnaryCall(              new MethodHandlers<                generated.xn.services.ex.api.grpcstream.protos.SegmentReq,                generated.xn.services.ex.api.grpcstream.protos.SegmentResp>(                  this, METHODID_CHECK_SEG)))          .build();    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentServicesGrpc.java", "stars": "3", "class": {"name": "SegmentServicesImplBase", "extends": null, "implements": ["io"], "modifiers": ["public", "static", "abstract"]}}, {"method_name": "build", "params": ["io", "io"], "throws": null, "modifiers": ["protected"], "return_type": "SegmentServicesStub", "snippet": "    protected SegmentServicesStub build(io.grpc.Channel channel,        io.grpc.CallOptions callOptions) {      return new SegmentServicesStub(channel, callOptions);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentServicesGrpc.java", "stars": "3", "class": {"name": "SegmentServicesStub", "extends": "io", "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "checkSeg", "params": ["generated", "io"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void checkSeg(generated.xn.services.ex.api.grpcstream.protos.SegmentReq request,        io.grpc.stub.StreamObserver<generated.xn.services.ex.api.grpcstream.protos.SegmentResp> responseObserver) {      asyncUnaryCall(          getChannel().newCall(getCheckSegMethod(), getCallOptions()), request, responseObserver);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentServicesGrpc.java", "stars": "3", "class": {"name": "SegmentServicesStub", "extends": "io", "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "build", "params": ["io", "io"], "throws": null, "modifiers": ["protected"], "return_type": "SegmentServicesBlockingStub", "snippet": "    protected SegmentServicesBlockingStub build(io.grpc.Channel channel,        io.grpc.CallOptions callOptions) {      return new SegmentServicesBlockingStub(channel, callOptions);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentServicesGrpc.java", "stars": "3", "class": {"name": "SegmentServicesBlockingStub", "extends": "io", "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "checkSeg", "params": ["generated"], "throws": null, "modifiers": ["public"], "return_type": "generated", "snippet": "    public generated.xn.services.ex.api.grpcstream.protos.SegmentResp checkSeg(generated.xn.services.ex.api.grpcstream.protos.SegmentReq request) {      return blockingUnaryCall(          getChannel(), getCheckSegMethod(), getCallOptions(), request);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentServicesGrpc.java", "stars": "3", "class": {"name": "SegmentServicesBlockingStub", "extends": "io", "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "build", "params": ["io", "io"], "throws": null, "modifiers": ["protected"], "return_type": "SegmentServicesFutureStub", "snippet": "    protected SegmentServicesFutureStub build(io.grpc.Channel channel,        io.grpc.CallOptions callOptions) {      return new SegmentServicesFutureStub(channel, callOptions);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentServicesGrpc.java", "stars": "3", "class": {"name": "SegmentServicesFutureStub", "extends": "io", "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "checkSeg", "params": ["generated"], "throws": null, "modifiers": ["public"], "return_type": "com", "snippet": "    public com.google.common.util.concurrent.ListenableFuture<generated.xn.services.ex.api.grpcstream.protos.SegmentResp> checkSeg(        generated.xn.services.ex.api.grpcstream.protos.SegmentReq request) {      return futureUnaryCall(          getChannel().newCall(getCheckSegMethod(), getCallOptions()), request);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentServicesGrpc.java", "stars": "3", "class": {"name": "SegmentServicesFutureStub", "extends": "io", "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "invoke", "params": ["Req", "io"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void invoke(Req request, io.grpc.stub.StreamObserver<Resp> responseObserver) {      switch (methodId) {        case METHODID_CHECK_SEG:          serviceImpl.checkSeg((generated.xn.services.ex.api.grpcstream.protos.SegmentReq) request,              (io.grpc.stub.StreamObserver<generated.xn.services.ex.api.grpcstream.protos.SegmentResp>) responseObserver);          break;        default:          throw new AssertionError();      }    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentServicesGrpc.java", "stars": "3", "class": {"name": "MethodHandlers", "extends": null, "implements": ["io", "io", "io", "io"], "modifiers": ["private", "static", "final"]}}, {"method_name": "invoke", "params": ["io"], "throws": null, "modifiers": ["public"], "return_type": "io", "snippet": "    public io.grpc.stub.StreamObserver<Req> invoke(        io.grpc.stub.StreamObserver<Resp> responseObserver) {      switch (methodId) {        default:          throw new AssertionError();      }    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentServicesGrpc.java", "stars": "3", "class": {"name": "MethodHandlers", "extends": null, "implements": ["io", "io", "io", "io"], "modifiers": ["private", "static", "final"]}}, {"method_name": "getFileDescriptor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "com", "snippet": "    public com.google.protobuf.Descriptors.FileDescriptor getFileDescriptor() {      return generated.xn.services.ex.api.grpcstream.protos.SegmentProtos.getDescriptor();    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentServicesGrpc.java", "stars": "3", "class": {"name": "SegmentServicesBaseDescriptorSupplier", "extends": null, "implements": ["io", "io"], "modifiers": ["private", "static", "abstract"]}}, {"method_name": "getServiceDescriptor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "com", "snippet": "    public com.google.protobuf.Descriptors.ServiceDescriptor getServiceDescriptor() {      return getFileDescriptor().findServiceByName(\"SegmentServices\");    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentServicesGrpc.java", "stars": "3", "class": {"name": "SegmentServicesBaseDescriptorSupplier", "extends": null, "implements": ["io", "io"], "modifiers": ["private", "static", "abstract"]}}, {"method_name": "getMethodDescriptor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "com", "snippet": "    public com.google.protobuf.Descriptors.MethodDescriptor getMethodDescriptor() {      return getServiceDescriptor().findMethodByName(methodName);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/xn/services/ex/api/grpcstream/protos/SegmentServicesGrpc.java", "stars": "3", "class": {"name": "SegmentServicesMethodDescriptorSupplier", "extends": "SegmentServicesBaseDescriptorSupplier", "implements": ["io"], "modifiers": ["private", "static", "final"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args)\t{\t\tThisss s1 = new Thisss();\t\ts1.name = \"zhangsan\";\t\t\t\ts1.shopping();\t\t\t\tThisss s2 = new Thisss();\t\ts2.name = \"lisi\";\t\t\t\ts2.shopping();\t\t\t\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/ray/This.java", "stars": "2", "class": {"name": "This", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "play", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void play() {        if (clip != null && location != null) {            try {                InputStream in = mc.getResourceManager().getResource(location).getInputStream();                System.out.println(mc.getResourceManager().getResource(location).getInputStream());                clip.open(AudioSystem.getAudioInputStream(in));                clip.start();            } catch (IOException | UnsupportedAudioFileException | LineUnavailableException e) {                e.printStackTrace();            }        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/audio/AudioPlayer.java", "stars": "12", "class": {"name": "AudioPlayer", "extends": null, "implements": ["Util"], "modifiers": ["public"]}}, {"method_name": "stop", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void stop() {        if (clip != null && location != null && clip.isActive()) {            clip.stop();        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/audio/AudioPlayer.java", "stars": "12", "class": {"name": "AudioPlayer", "extends": null, "implements": ["Util"], "modifiers": ["public"]}}, {"method_name": "close", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void close() {        if (clip != null && location != null && clip.isOpen()) {            clip.close();        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/audio/AudioPlayer.java", "stars": "12", "class": {"name": "AudioPlayer", "extends": null, "implements": ["Util"], "modifiers": ["public"]}}, {"method_name": "getVolume", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getVolume() {        FloatControl gainControl = (FloatControl) clip.getControl(FloatControl.Type.MASTER_GAIN);        return (float) Math.pow(10f, gainControl.getValue() / 20f);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/audio/AudioPlayer.java", "stars": "12", "class": {"name": "AudioPlayer", "extends": null, "implements": ["Util"], "modifiers": ["public"]}}, {"method_name": "setVolume", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setVolume(float volume) {        if (volume < 0f || volume > 1f)            throw new IllegalArgumentException(\"Volume not valid: \" + volume);        FloatControl gainControl = (FloatControl) clip.getControl(FloatControl.Type.MASTER_GAIN);        gainControl.setValue(20f * (float) Math.log10(volume));    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/audio/AudioPlayer.java", "stars": "12", "class": {"name": "AudioPlayer", "extends": null, "implements": ["Util"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState, int layoutId) {        String language = PrefUtils.get(this, Prefs.LOCALE, ButterApplication.getSystemLanguage());        LocaleUtils.setCurrent(this, LocaleUtils.toLocale(language));        super.onCreate(savedInstanceState);        setContentView(layoutId);        ButterKnife.bind(this);        ButterKnife.setDebug(true);        mHandler = new Handler(getMainLooper());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/base/TorrentBaseActivity.java", "stars": "4", "class": {"name": "TorrentBaseActivity", "extends": "AppCompatActivity", "implements": ["TorrentServerListener", "TorrentActivity"], "modifiers": ["public", "abstract"]}}, {"method_name": "onStart", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onStart() {        super.onStart();        TorrentService.bindHere(this, mServiceConnection);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/base/TorrentBaseActivity.java", "stars": "4", "class": {"name": "TorrentBaseActivity", "extends": "AppCompatActivity", "implements": ["TorrentServerListener", "TorrentActivity"], "modifiers": ["public", "abstract"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onResume() {        super.onResume();        if (null != mService) {            mService.addListener(this);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/base/TorrentBaseActivity.java", "stars": "4", "class": {"name": "TorrentBaseActivity", "extends": "AppCompatActivity", "implements": ["TorrentServerListener", "TorrentActivity"], "modifiers": ["public", "abstract"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onPause() {        super.onPause();        if (null != mService) {            mService.removeListener(this);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/base/TorrentBaseActivity.java", "stars": "4", "class": {"name": "TorrentBaseActivity", "extends": "AppCompatActivity", "implements": ["TorrentServerListener", "TorrentActivity"], "modifiers": ["public", "abstract"]}}, {"method_name": "onStop", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onStop() {        super.onStop();        if (null != mService) {            unbindService(mServiceConnection);            mService = null;        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/base/TorrentBaseActivity.java", "stars": "4", "class": {"name": "TorrentBaseActivity", "extends": "AppCompatActivity", "implements": ["TorrentServerListener", "TorrentActivity"], "modifiers": ["public", "abstract"]}}, {"method_name": "setContentView", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setContentView(int layoutResID) {        String language = PrefUtils.get(this, Prefs.LOCALE, ButterApplication.getSystemLanguage());        LocaleUtils.setCurrent(this, LocaleUtils.toLocale(language));        super.setContentView(layoutResID);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/base/TorrentBaseActivity.java", "stars": "4", "class": {"name": "TorrentBaseActivity", "extends": "AppCompatActivity", "implements": ["TorrentServerListener", "TorrentActivity"], "modifiers": ["public", "abstract"]}}, {"method_name": "getApp", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "ButterApplication", "snippet": "    protected ButterApplication getApp() {        return (ButterApplication) getApplication();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/base/TorrentBaseActivity.java", "stars": "4", "class": {"name": "TorrentBaseActivity", "extends": "AppCompatActivity", "implements": ["TorrentServerListener", "TorrentActivity"], "modifiers": ["public", "abstract"]}}, {"method_name": "getTorrentService", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TorrentService", "snippet": "    public TorrentService getTorrentService() {        return mService;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/base/TorrentBaseActivity.java", "stars": "4", "class": {"name": "TorrentBaseActivity", "extends": "AppCompatActivity", "implements": ["TorrentServerListener", "TorrentActivity"], "modifiers": ["public", "abstract"]}}, {"method_name": "onTorrentServiceConnected", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onTorrentServiceConnected() {        // Placeholder    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/base/TorrentBaseActivity.java", "stars": "4", "class": {"name": "TorrentBaseActivity", "extends": "AppCompatActivity", "implements": ["TorrentServerListener", "TorrentActivity"], "modifiers": ["public", "abstract"]}}, {"method_name": "onTorrentServiceDisconnected", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onTorrentServiceDisconnected() {        // Placeholder    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/base/TorrentBaseActivity.java", "stars": "4", "class": {"name": "TorrentBaseActivity", "extends": "AppCompatActivity", "implements": ["TorrentServerListener", "TorrentActivity"], "modifiers": ["public", "abstract"]}}, {"method_name": "onStreamPrepared", "params": ["Torrent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onStreamPrepared(Torrent torrent) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/base/TorrentBaseActivity.java", "stars": "4", "class": {"name": "TorrentBaseActivity", "extends": "AppCompatActivity", "implements": ["TorrentServerListener", "TorrentActivity"], "modifiers": ["public", "abstract"]}}, {"method_name": "onStreamStarted", "params": ["Torrent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onStreamStarted(Torrent torrent) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/base/TorrentBaseActivity.java", "stars": "4", "class": {"name": "TorrentBaseActivity", "extends": "AppCompatActivity", "implements": ["TorrentServerListener", "TorrentActivity"], "modifiers": ["public", "abstract"]}}, {"method_name": "onStreamReady", "params": ["Torrent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onStreamReady(Torrent torrent) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/base/TorrentBaseActivity.java", "stars": "4", "class": {"name": "TorrentBaseActivity", "extends": "AppCompatActivity", "implements": ["TorrentServerListener", "TorrentActivity"], "modifiers": ["public", "abstract"]}}, {"method_name": "onStreamError", "params": ["Torrent", "Exception"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onStreamError(Torrent torrent, Exception e) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/base/TorrentBaseActivity.java", "stars": "4", "class": {"name": "TorrentBaseActivity", "extends": "AppCompatActivity", "implements": ["TorrentServerListener", "TorrentActivity"], "modifiers": ["public", "abstract"]}}, {"method_name": "onStreamProgress", "params": ["Torrent", "StreamStatus"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onStreamProgress(Torrent torrent, StreamStatus streamStatus) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/base/TorrentBaseActivity.java", "stars": "4", "class": {"name": "TorrentBaseActivity", "extends": "AppCompatActivity", "implements": ["TorrentServerListener", "TorrentActivity"], "modifiers": ["public", "abstract"]}}, {"method_name": "onStreamStopped", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onStreamStopped() {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/base/TorrentBaseActivity.java", "stars": "4", "class": {"name": "TorrentBaseActivity", "extends": "AppCompatActivity", "implements": ["TorrentServerListener", "TorrentActivity"], "modifiers": ["public", "abstract"]}}, {"method_name": "onServerReady", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onServerReady(String url) {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/base/TorrentBaseActivity.java", "stars": "4", "class": {"name": "TorrentBaseActivity", "extends": "AppCompatActivity", "implements": ["TorrentServerListener", "TorrentActivity"], "modifiers": ["public", "abstract"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tint[] ns = { 1, 4, 9, 16, 25 };\t\t//System.out.println(Arrays.toString(ns));\t\t// \u5012\u5e8f\u6253\u5370\u6570\u7ec4\u5143\u7d20:\t\tfor (int i = 4; i >= 0; i--) {\t\t\tSystem.out.println(ns[i]);\t\t}\t}", "url": "https://raw.githubusercontent.com/IzzyPrime/JavaWorkspace/master/JavaPractice/part1/src/com/array/javapractice/ArrayLoop.java", "stars": "2", "class": {"name": "ArrayLoop", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/fragments/dialog/NumberPickerDialogFragment.java", "stars": "4", "class": {"name": "NumberPickerDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateDialog", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "Dialog", "snippet": "    public Dialog onCreateDialog(Bundle savedInstanceState) {        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());        if (getArguments() == null || !getArguments().containsKey(MAX_VALUE) || !getArguments().containsKey(MIN_VALUE) || !getArguments().containsKey(TITLE) || mOnResultListener == null) {            return builder.create();        }        final NumberPicker numberPicker = new NumberPicker(getActivity());        numberPicker.setLayoutParams(new NumberPicker.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));        numberPicker.setWrapSelectorWheel(false);        final int minValue = getArguments().getInt(MIN_VALUE);        final int maxValue = getArguments().getInt(MAX_VALUE);        final int currentValue = getArguments().getInt(DEFAULT_VALUE, (int) Math.floor((numberPicker.getMaxValue() - numberPicker.getMinValue()) / 2));        List<String> displayValues = new ArrayList<>();        for(int i = minValue; i < maxValue + 1; i++) {            displayValues.add(Integer.toString(i));        }        numberPicker.setDisplayedValues(displayValues.toArray(new String[displayValues.size()]));        if(minValue < 0) {            numberPicker.setMinValue(0);            numberPicker.setMaxValue(maxValue + Math.abs(minValue));            numberPicker.setValue(currentValue + Math.abs(minValue));        } else {            numberPicker.setMinValue(minValue);            numberPicker.setMaxValue(maxValue);            numberPicker.setValue(currentValue);        }        if(getArguments().containsKey(FOCUSABLE) && !getArguments().getBoolean(FOCUSABLE))            numberPicker.setDescendantFocusability(NumberPicker.FOCUS_BLOCK_DESCENDANTS);        builder                .setView(numberPicker)                .setTitle(getArguments().getString(TITLE))                .setPositiveButton(R.string.ok,                        new DialogInterface.OnClickListener() {                            @Override                            public void onClick(DialogInterface dialog, int which) {                                mOnResultListener.onNewValue(numberPicker.getValue() + (minValue < 0 ? minValue : 0));                                dialog.dismiss();                            }                        })                .setNegativeButton(R.string.cancel,                        new DialogInterface.OnClickListener() {                            @Override                            public void onClick(DialogInterface dialog, int which) {                                dialog.dismiss();                            }                        }                );        return builder.create();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/fragments/dialog/NumberPickerDialogFragment.java", "stars": "4", "class": {"name": "NumberPickerDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "setOnResultListener", "params": ["ResultListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnResultListener(ResultListener resultListener) {        mOnResultListener = resultListener;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/fragments/dialog/NumberPickerDialogFragment.java", "stars": "4", "class": {"name": "NumberPickerDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "injectDataSourceParamToConf", "params": ["CallBackService", "TaskConfiguration", "String"], "throws": null, "modifiers": ["protected"], "return_type": "DataSourceBase", "snippet": "    protected DataSourceBase injectDataSourceParamToConf(CallBackService callBackService,                                               TaskConfiguration configuration, String path){        Integer ds = null;        try{            ds = configuration.getInt(StringUtils.join(new String[]{path, DATASOURCE_ID_PARAMETER}, TaskConfiguration.SPLIT_CHAR));        }catch(Exception e){            //ignore        }        DataSourceBase dataSourceBase = null;        if(ds != null && ds > 0){            dataSourceBase = callBackService.getDataSource(ds).getData();            if(StringUtils.isNotBlank(dataSourceBase.getParameter())) {                Map<String, Object> map = Json.fromJson(dataSourceBase.getParameter(), Map.class);                map.forEach((key, value) -> {                    //Search and insert (key, value)                    if (!TaskConfiguration.searchKeyToInsertValue(configuration, path, key, value)) {                        //Not found, set the value to {path}.key node                        String key0 = StringUtils.join(new String[]{path, key}, TaskConfiguration.SPLIT_CHAR);                        configuration.set(key0, value);                    }                });            }        }        return dataSourceBase;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/AbstractTaskConfigBuilder.java", "stars": "23", "class": {"name": "AbstractTaskConfigBuilder", "extends": null, "implements": ["TaskConfigBuilder"], "modifiers": ["public", "abstract"]}}, {"method_name": "checkUidEditTextChanged", "params": ["EditText", "Button"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void checkUidEditTextChanged(EditText mLocalUIdEt, Button mBtn) {        mLocalUIdEt.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {            }            @Override            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {            }            @Override            public void afterTextChanged(Editable editable) {                String text = editable.toString();                int len = editable.toString().length();                if (text.startsWith(\"0\")) {//\u9996\u6570\u5b57\u4e0d\u53ef\u4e3a0//                    editable.replace(0, 1, \"\");                    editable.clear();                }                if (len > 0 && !text.startsWith(\"0\")) {                    mBtn.setEnabled(true);                } else {                    mBtn.setEnabled(false);                }            }        });    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/EditTextUtil.java", "stars": "2", "class": {"name": "EditTextUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkRoomIdEditTextChanged", "params": ["EditText", "Button"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void checkRoomIdEditTextChanged(EditText mLocalRoomIdEt, Button mBtn) {        mLocalRoomIdEt.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {            }            @Override            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {            }            @Override            public void afterTextChanged(Editable editable) {                int len = editable.toString().length();                if (len > 0) {                    mBtn.setEnabled(true);                } else {                    mBtn.setEnabled(false);                }            }        });    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/EditTextUtil.java", "stars": "2", "class": {"name": "EditTextUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getName() {    return name;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/property/PropertyTokenizer.java", "stars": "15", "class": {"name": "PropertyTokenizer", "extends": null, "implements": ["Iterator"], "modifiers": ["public"]}}, {"method_name": "getIndex", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getIndex() {    return index;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/property/PropertyTokenizer.java", "stars": "15", "class": {"name": "PropertyTokenizer", "extends": null, "implements": ["Iterator"], "modifiers": ["public"]}}, {"method_name": "getIndexedName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getIndexedName() {    return indexedName;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/property/PropertyTokenizer.java", "stars": "15", "class": {"name": "PropertyTokenizer", "extends": null, "implements": ["Iterator"], "modifiers": ["public"]}}, {"method_name": "getChildren", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getChildren() {    return children;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/property/PropertyTokenizer.java", "stars": "15", "class": {"name": "PropertyTokenizer", "extends": null, "implements": ["Iterator"], "modifiers": ["public"]}}, {"method_name": "hasNext", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean hasNext() {    return children != null;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/property/PropertyTokenizer.java", "stars": "15", "class": {"name": "PropertyTokenizer", "extends": null, "implements": ["Iterator"], "modifiers": ["public"]}}, {"method_name": "next", "params": [], "throws": null, "modifiers": ["public"], "return_type": "PropertyTokenizer", "snippet": "  public PropertyTokenizer next() {    return new PropertyTokenizer(children);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/property/PropertyTokenizer.java", "stars": "15", "class": {"name": "PropertyTokenizer", "extends": null, "implements": ["Iterator"], "modifiers": ["public"]}}, {"method_name": "remove", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void remove() {    throw new UnsupportedOperationException(\"Remove is not supported, as it has no meaning in the context of properties.\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/property/PropertyTokenizer.java", "stars": "15", "class": {"name": "PropertyTokenizer", "extends": null, "implements": ["Iterator"], "modifiers": ["public"]}}, {"method_name": "onCreateViewHolder", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "splitter_adapter", "snippet": "    public splitter_adapter.viewholder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {        View v= LayoutInflater.from(app).inflate(R.layout.money_split_row,parent,false);        return new viewholder(v);    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/splitter_adapter.java", "stars": "2", "class": {"name": "splitter_adapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBindViewHolder", "params": ["splitter_adapter", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBindViewHolder(@NonNull splitter_adapter.viewholder holder, int position) {        final money_split_data dat=l.get(position);        holder.t1.setText(dat.getName());        TextDrawable drawable = TextDrawable.builder().buildRound(dat.getName().substring(0,1).toUpperCase(), Color.rgb(15,167,255));        holder.contactimg.setBackground(drawable);        holder.t2.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                dat.setMoney(s.toString());                System.out.println(dat.getMoney());            }        });    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/splitter_adapter.java", "stars": "2", "class": {"name": "splitter_adapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getItemCount() {        return l.size();    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/splitter_adapter.java", "stars": "2", "class": {"name": "splitter_adapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "execAdb", "params": ["String", "String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String execAdb(String cmd, String serial) throws IOException {        if(log == null)log = Logger.getLogger();        String command = \"\";        if(serial == \"\" || serial == null){            command = String.format(\"adb %s\", cmd);        }else{            command = String.format(\"adb -s %s %s\",serial,cmd);        }        log.info(\"execute: \" + command);        Process process = Runtime.getRuntime().exec(command);        BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()));        StringBuilder ret = new StringBuilder();        String line = br.readLine();        while(line != null){            if(ret.length() == 0)ret.append(line);            else ret.append(\"\\n\").append(line);            line = br.readLine();        }        return ret.toString();    }", "url": "https://raw.githubusercontent.com/qintianchen/GAutomatorView/master/src/sample/utils/ShellUtils.java", "stars": "2", "class": {"name": "ShellUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "dispatch", "params": ["Computer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void dispatch(Computer computer) {        computer.setRunningStatus(Computer.STATUS_STOPPED);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/PowerOffEvent.java", "stars": "4", "class": {"name": "PowerOffEvent", "extends": "EmulatorEvent", "implements": null, "modifiers": ["public"]}}, {"method_name": "updateToolbarHeight", "params": ["Context", "Toolbar"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void updateToolbarHeight(Context context, Toolbar toolbar) {        toolbar.getLayoutParams().height = context.getResources().getDimensionPixelSize(                R.dimen.abc_action_bar_default_height_material);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/utils/ToolbarUtils.java", "stars": "4", "class": {"name": "ToolbarUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPageSql", "params": ["String", "RequestContext", "long", "long"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPageSql(String sql, RequestContext context, long offset, long limit) {        context.addParameter(offset + 1);        context.addParameter(offset + limit);        return \"SELECT * FROM (SELECT TMP_PAGE.*,ROWNUMBER() OVER() AS ROW_ID FROM ( \" + sql +                \" ) AS TMP_PAGE) TMP_PAGE WHERE ROW_ID BETWEEN ? AND ?\";    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/dialect/DB2Dialect.java", "stars": "13", "class": {"name": "DB2Dialect", "extends": null, "implements": ["Dialect"], "modifiers": ["public"]}}, {"method_name": "getImplClass", "params": ["Class<T>"], "throws": null, "modifiers": ["public"], "return_type": "Class<T>", "snippet": "    public <T> Class<? extends T> getImplClass(Class<T> ifc) {        return ifc2ImplClass.computeIfAbsent(ifc, aClass -> {            Set<Class<? extends T>> classes = scanner.getSubTypesOf(ifc);            if (classes.size() != 1) {                throw new RuntimeException(ifc + \" has 0 or more than one impl please update your config\");            }            return classes.iterator().next();        });    }", "url": "https://raw.githubusercontent.com/Jeka1978/coronadesinfectorlifedemo/master/src/main/java/com/epam/JavaConfig.java", "stars": "60", "class": {"name": "JavaConfig", "extends": null, "implements": ["Config"], "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run() {        /*         *Based on the message state, it will build the sending message.         */        String message = (isPublic) ? ClientMessageBuilder.publicFileSendMessage(file.getName(), file.length()) :                ClientMessageBuilder.privateFileSendMessage(file.getName(), file.length(), receivers);        try {            //Send the upload request to server to make it ready for downloading            client.sendMessageToServer(message);            Thread.sleep(1000);            sendingFile();        } catch (SendingMessageToServerFailed | InterruptedException e) {            logger.error(e.getMessage());        }    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Client/FileSharing/ClientFileUploader.java", "stars": "2", "class": {"name": "ClientFileUploader", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "sendingFile", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void sendingFile() {        try {            Socket fileGetterSocket = new Socket(client.getServerSocket().getInetAddress(),                    client.getServerSocket().getPort() + 1);            DataOutputStream toServer = new DataOutputStream(fileGetterSocket.getOutputStream());            RandomAccessFile randomAccessFile = new RandomAccessFile(file, \"r\");            byte[] buffer = new byte[BUFFER_SIZE];            Thread.sleep(1000);            sendingState(String.format(\"Sending %s started!\", file.getName()));            while (randomAccessFile.read(buffer) != -1) {                toServer.write(buffer);            }            randomAccessFile.close();            sendingState(String.format(\"%s Uploaded Successfully!\", file.getName()));        } catch (IOException | InterruptedException e) {            logger.error(e.getMessage());            sendingState(String.format(\"Sending %s to server was failed!\", file.getName()));        }    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Client/FileSharing/ClientFileUploader.java", "stars": "2", "class": {"name": "ClientFileUploader", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "sendingState", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void sendingState(String message) {        Platform.runLater(() -> mainWindowController.showPrivateMessage(new Message(                \"Client\",                new String[]{client.getUserName()},                message,                message.length(),                PRIVATE        )));    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Client/FileSharing/ClientFileUploader.java", "stars": "2", "class": {"name": "ClientFileUploader", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "getAddend1", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getAddend1() {    return addend1;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/Parameter.java", "stars": "15", "class": {"name": "Parameter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAddend1", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setAddend1(Integer addend1) {    this.addend1 = addend1;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/Parameter.java", "stars": "15", "class": {"name": "Parameter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAddend2", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getAddend2() {    return addend2;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/Parameter.java", "stars": "15", "class": {"name": "Parameter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAddend2", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setAddend2(Integer addend2) {    this.addend2 = addend2;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/Parameter.java", "stars": "15", "class": {"name": "Parameter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSum", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getSum() {    return sum;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/Parameter.java", "stars": "15", "class": {"name": "Parameter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSum", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setSum(Integer sum) {    this.sum = sum;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sptests/Parameter.java", "stars": "15", "class": {"name": "Parameter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "transportOneRecord", "params": ["RecordSender", "ResultSet", "ResultSetMetaData", "int", "String", "TaskPluginCollector"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void transportOneRecord(RecordSender recordSender, ResultSet rs,                                          ResultSetMetaData metaData, int columnNumber, String mandatoryEncoding,                                          TaskPluginCollector taskPluginCollector) {        Record record = recordSender.createRecord();        try {            for (int i = 1; i <= columnNumber; i++) {                switch (metaData.getColumnType(i)) {                    case Types.CHAR:                    case Types.NCHAR:                    case Types.VARCHAR:                    case Types.LONGVARCHAR:                    case Types.NVARCHAR:                    case Types.LONGNVARCHAR:                        String rawData;                        if (StringUtils.isBlank(mandatoryEncoding)) {                            rawData = rs.getString(i);                        } else {                            rawData = new String((rs.getBytes(i) == null ? EMPTY_CHAR_ARRAY :                                    rs.getBytes(i)), mandatoryEncoding);                        }                        record.addColumn(new StringColumn(rawData));                        break;                    case Types.CLOB:                    case Types.NCLOB:                        record.addColumn(new StringColumn(rs.getString(i)));                        break;                    case Types.SMALLINT:                    case Types.TINYINT:                    case Types.INTEGER:                    case Types.BIGINT:                        record.addColumn(new LongColumn(rs.getString(i)));                        break;                    case Types.NUMERIC:                    case Types.DECIMAL:                        record.addColumn(new DoubleColumn(rs.getString(i)));                        break;                    case Types.FLOAT:                    case Types.REAL:                    case Types.DOUBLE:                        record.addColumn(new DoubleColumn(rs.getString(i)));                        break;                    case Types.TIME:                        record.addColumn(new DateColumn(rs.getTime(i)));                        break;                    // for mysql bug, see http://bugs.mysql.com/bug.php?id=35115                    case Types.DATE:                        if (metaData.getColumnTypeName(i).equalsIgnoreCase(\"year\")) {                            record.addColumn(new LongColumn(rs.getInt(i)));                        } else {                            record.addColumn(new DateColumn(rs.getDate(i)));                        }                        break;                    case Types.TIMESTAMP:                        record.addColumn(new DateColumn(rs.getTimestamp(i)));                        break;                    case Types.BINARY:                    case Types.VARBINARY:                    case Types.BLOB:                    case Types.LONGVARBINARY:                        record.addColumn(new BytesColumn(rs.getBytes(i)));                        break;                    // warn: bit(1) -> Types.BIT \u53ef\u4f7f\u7528BoolColumn                    // warn: bit(>1) -> Types.VARBINARY \u53ef\u4f7f\u7528BytesColumn                    case Types.BOOLEAN:                    case Types.BIT:                        record.addColumn(new BoolColumn(rs.getBoolean(i)));                        break;                    case Types.NULL:                        String stringData = null;                        if (rs.getObject(i) != null) {                            stringData = rs.getObject(i).toString();                        }                        record.addColumn(new StringColumn(stringData));                        break;                    // TODO \u6dfb\u52a0BASIC_MESSAGE                    default:                        throw DataXException                                .asDataXException(                                        DBUtilErrorCode.UNSUPPORTED_TYPE,                                        String.format(                                                \"\u60a8\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u5217\u914d\u7f6e\u4fe1\u606f\u6709\u8bef. \u56e0\u4e3aDataX \u4e0d\u652f\u6301\u6570\u636e\u5e93\u8bfb\u53d6\u8fd9\u79cd\u5b57\u6bb5\u7c7b\u578b. \u5b57\u6bb5\u540d:[%s], \u5b57\u6bb5\u540d\u79f0:[%s], \u5b57\u6bb5Java\u7c7b\u578b:[%s]. \u8bf7\u5c1d\u8bd5\u4f7f\u7528\u6570\u636e\u5e93\u51fd\u6570\u5c06\u5176\u8f6c\u6362datax\u652f\u6301\u7684\u7c7b\u578b \u6216\u8005\u4e0d\u540c\u6b65\u8be5\u5b57\u6bb5 .\",                                                metaData.getColumnName(i),                                                metaData.getColumnType(i),                                                metaData.getColumnClassName(i)));                }            }        } catch (Exception e) {            if (IS_DEBUG) {                LOG.debug(\"read domain \" + record.toString()                        + \" occur exception:\", e);            }            //TODO \u8fd9\u91cc\u8bc6\u522b\u4e3a\u810f\u6570\u636e\u9760\u8c31\u5417\uff1f            taskPluginCollector.collectDirtyRecord(record, e);            if (e instanceof DataXException) {                throw (DataXException) e;            }        }        recordSender.sendToWriter(record);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/reader/ResultSetReadProxy.java", "stars": "23", "class": {"name": "ResultSetReadProxy", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        SpringApplication.run(RentHouseApplication.class, args);    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/RentHouseApplication.java", "stars": "3", "class": {"name": "RentHouseApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        super.onCreateView(inflater, container, savedInstanceState);        view = inflater.inflate(R.layout.fragment_profile, null);        findViews();        initLogic();        return view;    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/fragment/ProfileFragment.java", "stars": "4", "class": {"name": "ProfileFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "findViews", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void findViews () {        userFullName = view.findViewById(R.id.itemUserName);        userBio = view.findViewById(R.id.itemUserBio);        editProfile = view.findViewById(R.id.itemProfileButtonEdit);        userAvatar = view.findViewById(R.id.itemUserAvatar);    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/fragment/ProfileFragment.java", "stars": "4", "class": {"name": "ProfileFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "initLogic", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initLogic () {        MainActivity.progressBar.setVisibility(View.VISIBLE);        MainActivity.frameLayout.setVisibility(View.GONE);        userManager = UserManager.getInstance();        userManager.getUserManagerApi()                .get(new SketchcodeUtil.User(Objects.requireNonNull(getContext())).getToken())                .enqueue(new Callback<UserResponse>() {                    @Override                    public void onResponse(Call<UserResponse> call, retrofit2.Response<UserResponse> response) {                        UserResponse output = response.body();                        if(response.isSuccessful() && output != null && output.getData() != null && output.isSuccess()) {                            userFullName.setText(output.getData().getFirstName().concat(\" \").concat(output.getData().getSurname()));                            userBio.setText(output.getData().getBio());                            GlideUtil.set(output.getData().getAvatar(), userAvatar, getContext());                        } else if(output != null) {                            Toast.makeText(getContext(), output.getErrorsString(), Toast.LENGTH_SHORT).show();                        } else {                            Toast.makeText(getContext(), \"Auth failed\", Toast.LENGTH_SHORT).show();                        }                        MainActivity.progressBar.setVisibility(View.GONE);                        MainActivity.frameLayout.setVisibility(View.VISIBLE);                    }                    @Override                    public void onFailure(Call<UserResponse> call, Throwable t) {                        initLogic();                    }                });        editProfile.setOnClickListener(v -> startActivity(new Intent(getActivity(), ProfileEditActivity.class)));    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/fragment/ProfileFragment.java", "stars": "4", "class": {"name": "ProfileFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "getTest", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getTest() {    return test;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/criterion/Criterion.java", "stars": "15", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTest", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setTest(String test) {    this.test = test;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/criterion/Criterion.java", "stars": "15", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getValue() {    return value;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/criterion/Criterion.java", "stars": "15", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setValue", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setValue(Object value) {    this.value = value;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/criterion/Criterion.java", "stars": "15", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createOrder", "params": ["Integer", "Integer", "Integer", "Integer"], "throws": ["BusinessException"], "modifiers": ["public"], "return_type": "OrderModel", "snippet": "    public OrderModel createOrder(Integer userId, Integer itemId, Integer promoId, Integer amount) throws BusinessException {        if (userId == null || itemId == null || amount == null) throw new BusinessException(EmBusinessError.PARAMETER_VALIDATION_ERROR);        OrderModel orderModel = new OrderModel();        orderModel.setUserId(userId);        orderModel.setItemId(itemId);        orderModel.setAmount(amount);        UserModel userModel = userService.getUserById(userId);        if (userModel == null) throw new BusinessException(EmBusinessError.PARAMETER_VALIDATION_ERROR);        ItemModel itemModel = itemService.getItemById(itemId);        if (itemModel == null) throw new BusinessException(EmBusinessError.PARAMETER_VALIDATION_ERROR);        if (amount <= 0 || amount > 99) throw new BusinessException(EmBusinessError.PARAMETER_VALIDATION_ERROR);        if (promoId != null && itemModel.getPromoModel() != null && itemModel.getPromoModel().getStatus().intValue() == PromoModel.STATUS_NOW) {            if (promoId.intValue() != itemModel.getPromoModel().getId().intValue()) throw new BusinessException(EmBusinessError.PARAMETER_VALIDATION_ERROR);            orderModel.setItemPrice(itemModel.getPromoModel().getPromoItemPrice());        } else {            orderModel.setItemPrice(itemModel.getPrice());        }        orderModel.setId(createOrderId());        orderModel.setOrderPrice(orderModel.getItemPrice().multiply(new BigDecimal(orderModel.getAmount())));        orderDOMapper.insertSelective(convertFromModel(orderModel));        itemService.decreaseStock(itemId, amount);        itemService.increaseSales(itemId, amount);        return orderModel;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/service/impl/OrderServiceImpl.java", "stars": "1", "class": {"name": "OrderServiceImpl", "extends": null, "implements": ["OrderService"], "modifiers": ["public"]}}, {"method_name": "convertFromModel", "params": ["OrderModel"], "throws": null, "modifiers": ["private"], "return_type": "OrderDO", "snippet": "    private OrderDO convertFromModel(OrderModel orderModel) {        if (orderModel == null) return null;        OrderDO orderDO = new OrderDO();        BeanUtils.copyProperties(orderModel, orderDO);        return orderDO;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/service/impl/OrderServiceImpl.java", "stars": "1", "class": {"name": "OrderServiceImpl", "extends": null, "implements": ["OrderService"], "modifiers": ["public"]}}, {"method_name": "createOrderId", "params": [], "throws": ["BusinessException"], "modifiers": ["public"], "return_type": "String", "snippet": "    public String createOrderId() throws BusinessException {        String id = null;        StringBuilder builder = new StringBuilder();        String date = new SimpleDateFormat(\"yyyyMMdd\").format(new Date());        builder.append(date);        SequenceDO sequenceDO = sequenceDOMapper.selectByPrimaryKey(SequenceDO.ID_NAME_ORDER);        if (sequenceDO == null) throw new BusinessException(EmBusinessError.PARAMETER_VALIDATION_ERROR);        String sequence = String.valueOf(sequenceDO.getCurrentValue());        sequenceDO.setCurrentValue(sequenceDO.getCurrentValue() + sequenceDO.getStep());        sequenceDOMapper.updateByPrimaryKeySelective(sequenceDO);        for (int i = 0; i < 6 - sequence.length(); ++ i) {            builder.append(0);        }        builder.append(sequence);        builder.append(\"00\");        id = builder.toString();        return id;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/service/impl/OrderServiceImpl.java", "stars": "1", "class": {"name": "OrderServiceImpl", "extends": null, "implements": ["OrderService"], "modifiers": ["public"]}}, {"method_name": "a", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void a() throws Exception {        OrderDO orderDO = new OrderDO();        orderDO.setId(\"0005\");        orderDOMapper.insertSelective(orderDO);        SpringApplicationContextUtil.getApplicationContext().getBean(this.getClass()).b();        boolean e = false;        if (e)            throw new Exception();    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/service/impl/OrderServiceImpl.java", "stars": "1", "class": {"name": "OrderServiceImpl", "extends": null, "implements": ["OrderService"], "modifiers": ["public"]}}, {"method_name": "b", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void b() throws Exception {        OrderDO orderDO = new OrderDO();        orderDO.setId(\"0006\");        orderDOMapper.insertSelective(orderDO);        boolean e = true;        if (e)            throw new Exception();    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/service/impl/OrderServiceImpl.java", "stars": "1", "class": {"name": "OrderServiceImpl", "extends": null, "implements": ["OrderService"], "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "VFS", "snippet": "  public static VFS getInstance() {    return VFSHolder.INSTANCE;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/VFS.java", "stars": "15", "class": {"name": "VFS", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "addImplClass", "params": ["Class<VFS>"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void addImplClass(Class<? extends VFS> clazz) {    if (clazz != null) {      USER_IMPLEMENTATIONS.add(clazz);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/VFS.java", "stars": "15", "class": {"name": "VFS", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getClass", "params": ["String"], "throws": null, "modifiers": ["static", "protected"], "return_type": "Class<?>", "snippet": "  protected static Class<?> getClass(String className) {    try {      return Thread.currentThread().getContextClassLoader().loadClass(className);//      return ReflectUtil.findClass(className);    } catch (ClassNotFoundException e) {      if (log.isDebugEnabled()) {        log.debug(\"Class not found: \" + className);      }      return null;    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/VFS.java", "stars": "15", "class": {"name": "VFS", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getMethod", "params": ["Class<?>", "String", "Class<?>"], "throws": null, "modifiers": ["static", "protected"], "return_type": "Method", "snippet": "  protected static Method getMethod(Class<?> clazz, String methodName, Class<?>... parameterTypes) {    if (clazz == null) {      return null;    }    try {      return clazz.getMethod(methodName, parameterTypes);    } catch (SecurityException e) {      log.error(\"Security exception looking for method \" + clazz.getName() + \".\" + methodName + \".  Cause: \" + e);      return null;    } catch (NoSuchMethodException e) {      log.error(\"Method not found \" + clazz.getName() + \".\" + methodName + \".\" + methodName + \".  Cause: \" + e);      return null;    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/VFS.java", "stars": "15", "class": {"name": "VFS", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "invoke", "params": ["Method", "Object", "Object"], "throws": ["IOException", "RuntimeException"], "modifiers": ["static", "protected"], "return_type": "T", "snippet": "  protected static <T> T invoke(Method method, Object object, Object... parameters)      throws IOException, RuntimeException {    try {      return (T) method.invoke(object, parameters);    } catch (IllegalArgumentException | IllegalAccessException e) {      throw new RuntimeException(e);    } catch (InvocationTargetException e) {      if (e.getTargetException() instanceof IOException) {        throw (IOException) e.getTargetException();      } else {        throw new RuntimeException(e);      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/VFS.java", "stars": "15", "class": {"name": "VFS", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getResources", "params": ["String"], "throws": ["IOException"], "modifiers": ["static", "protected"], "return_type": "List<URL>", "snippet": "  protected static List<URL> getResources(String path) throws IOException {    return Collections.list(Thread.currentThread().getContextClassLoader().getResources(path));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/VFS.java", "stars": "15", "class": {"name": "VFS", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isValid", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "boolean", "snippet": "  public abstract boolean isValid();  /**   * Recursively list the full resource path of all the resources that are children of the   * resource identified by a URL.   *   * @param url The URL that identifies the resource to list.   * @param forPath The path to the resource that is identified by the URL. Generally, this is the   *            value passed to {@link #getResources(String)}", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/VFS.java", "stars": "15", "class": {"name": "VFS", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "list", "params": ["URL", "String"], "throws": ["IOException"], "modifiers": ["abstract", "protected"], "return_type": "List<String>", "snippet": "  protected abstract List<String> list(URL url, String forPath) throws IOException;  /**   * Recursively list the full resource path of all the resources that are children of all the   * resources found at the specified path.   *   * @param path The path of the resource(s) to list.   * @return A list containing the names of the child resources.   * @throws IOException If I/O errors occur   */  public List<String> list(String path) throws IOException {    List<String> names = new ArrayList<>();    for (URL url : getResources(path)) {      names.addAll(list(url, path));    }    return names;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/VFS.java", "stars": "15", "class": {"name": "VFS", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "list", "params": ["String"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "List<String>", "snippet": "  public List<String> list(String path) throws IOException {    List<String> names = new ArrayList<>();    for (URL url : getResources(path)) {      names.addAll(list(url, path));    }    return names;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/VFS.java", "stars": "15", "class": {"name": "VFS", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "createVFS", "params": [], "throws": null, "modifiers": ["static"], "return_type": "VFS", "snippet": "    static VFS createVFS() {      // Try the user implementations first, then the built-ins      List<Class<? extends VFS>> impls = new ArrayList<>();      impls.addAll(USER_IMPLEMENTATIONS);      impls.addAll(Arrays.asList((Class<? extends VFS>[]) IMPLEMENTATIONS));      // Try each implementation class until a valid one is found      VFS vfs = null;      for (int i = 0; vfs == null || !vfs.isValid(); i++) {        Class<? extends VFS> impl = impls.get(i);        try {          vfs = impl.getDeclaredConstructor().newInstance();          if (!vfs.isValid()) {            if (log.isDebugEnabled()) {              log.debug(\"VFS implementation \" + impl.getName() +                  \" is not valid in this environment.\");            }          }        } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {          log.error(\"Failed to instantiate \" + impl, e);          return null;        }      }      if (log.isDebugEnabled()) {        log.debug(\"Using VFS adapter \" + vfs.getClass().getName());      }      return vfs;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/io/VFS.java", "stars": "15", "class": {"name": "VFSHolder", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "modelMapper", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ModelMapper", "snippet": "    public ModelMapper modelMapper(){        return new ModelMapper();    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/config/GlobalBeanConfig.java", "stars": "3", "class": {"name": "GlobalBeanConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "gson", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Gson", "snippet": "    public Gson gson(){        return new Gson();    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/config/GlobalBeanConfig.java", "stars": "3", "class": {"name": "GlobalBeanConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "passwordEncoder", "params": [], "throws": null, "modifiers": ["public"], "return_type": "PasswordEncoder", "snippet": "    public PasswordEncoder passwordEncoder(){        return new BCryptPasswordEncoder();    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/config/GlobalBeanConfig.java", "stars": "3", "class": {"name": "GlobalBeanConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurrentTimeString", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String getCurrentTimeString() {  \t    DateTime dt = new DateTime();  \t    String time = dt.toString(FORMAT_TIME);  \t    return time;  \t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/JodaTimeUtils.java", "stars": "3", "class": {"name": "JodaTimeUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getCurrentTime", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Date", "snippet": "\tpublic static Date getCurrentTime() {  \t    DateTime dt = new DateTime();  \t    String times = dt.toString(FORMAT_TIME);\t    Timestamp time = Timestamp.valueOf(times);\t    return time;  \t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/JodaTimeUtils.java", "stars": "3", "class": {"name": "JodaTimeUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getCurrentDateString", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String getCurrentDateString() {  \t    DateTime dt = new DateTime();  \t    String date = dt.toString(FORTER_DATE);  \t    return date;  \t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/JodaTimeUtils.java", "stars": "3", "class": {"name": "JodaTimeUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getCurrentTimePattern", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String getCurrentTimePattern(String pattern) {  \t    DateTime dt = new DateTime();  \t    String time = dt.toString(pattern);  \t    return time;  \t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/JodaTimeUtils.java", "stars": "3", "class": {"name": "JodaTimeUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getCurrentDatePattern", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String getCurrentDatePattern(String pattern) {  \t    DateTime dt = new DateTime();  \t    String date = dt.toString(pattern);  \t    return date;  \t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/JodaTimeUtils.java", "stars": "3", "class": {"name": "JodaTimeUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getcurrMills", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "long", "snippet": "    public static long getcurrMills() {    \tInstant instant = Instant.now();    \treturn instant.getMillis();    }", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/JodaTimeUtils.java", "stars": "3", "class": {"name": "JodaTimeUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getcurrMillsPattern", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "long", "snippet": "    public static long getcurrMillsPattern(String pattern) {    \tInstant instant = Instant.parse(pattern);    \treturn instant.getMillis();    }", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/JodaTimeUtils.java", "stars": "3", "class": {"name": "JodaTimeUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getCurrentTimeMills", "params": ["long"], "throws": null, "modifiers": ["public", "static"], "return_type": "Timestamp", "snippet": "\tpublic static Timestamp getCurrentTimeMills(long Mills) {  \t    Timestamp timestamp = new Timestamp(Mills);\t    return timestamp;  \t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/JodaTimeUtils.java", "stars": "3", "class": {"name": "JodaTimeUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "format", "params": ["Date", "TimeZone", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String format(Date date, TimeZone timeZone, String parrten) {  \t    if (date == null) {  \t        return null;  \t    }  \t    SimpleDateFormat sdf = new SimpleDateFormat(parrten);  \t    sdf.setTimeZone(timeZone);  \t    return sdf.format(date);  \t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/JodaTimeUtils.java", "stars": "3", "class": {"name": "JodaTimeUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getPointTime", "params": ["Integer", "Integer", "Integer", "Integer", "Integer", "Integer"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String getPointTime(Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer seconds) {  \t    DateTime dt = new DateTime(year, month, day, hour, minute, seconds);  \t    String date = dt.toString(FORMAT_TIME);  \t    return date;  \t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/JodaTimeUtils.java", "stars": "3", "class": {"name": "JodaTimeUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getPointTimePattern", "params": ["Integer", "Integer", "Integer", "Integer", "Integer", "Integer", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String getPointTimePattern(Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer seconds, String parrten) {  \t    DateTime dt = new DateTime(year, month, day, hour, minute, seconds);  \t    String date = dt.toString(parrten);  \t    return date;  \t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/JodaTimeUtils.java", "stars": "3", "class": {"name": "JodaTimeUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getPointDate", "params": ["Integer", "Integer", "Integer"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String getPointDate(Integer year, Integer month, Integer day) {  \t    LocalDate dt = new LocalDate(year, month, day);  \t    String date = dt.toString(FORTER_DATE);  \t    return date;  \t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/JodaTimeUtils.java", "stars": "3", "class": {"name": "JodaTimeUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getPointDatParrten", "params": ["Integer", "Integer", "Integer", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String getPointDatParrten(Integer year, Integer month, Integer day, String parrten) {  \t    LocalDate dt = new LocalDate(year, month, day);  \t    String date = dt.toString(parrten);  \t    return date;  \t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/JodaTimeUtils.java", "stars": "3", "class": {"name": "JodaTimeUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getWeek", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String getWeek() {  \t    DateTime dts = new DateTime();  \t    String week = null;  \t    switch (dts.getDayOfWeek()) {  \t    case DateTimeConstants.SUNDAY:  \t        week = \"\u661f\u671f\u65e5\";  \t        break;  \t    case DateTimeConstants.MONDAY:  \t        week = \"\u661f\u671f\u4e00\";  \t        break;  \t    case DateTimeConstants.TUESDAY:  \t        week = \"\u661f\u671f\u4e8c\";  \t        break;  \t    case DateTimeConstants.WEDNESDAY:  \t        week = \"\u661f\u671f\u4e09\";  \t        break;  \t    case DateTimeConstants.THURSDAY:  \t        week = \"\u661f\u671f\u56db\";  \t        break;  \t    case DateTimeConstants.FRIDAY:  \t        week = \"\u661f\u671f\u4e94\";  \t        break;  \t    case DateTimeConstants.SATURDAY:  \t        week = \"\u661f\u671f\u516d\";  \t    default:  \t        break;  \t    }  \t    return week;  \t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/JodaTimeUtils.java", "stars": "3", "class": {"name": "JodaTimeUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getWeekPoint", "params": ["Integer", "Integer", "Integer"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String getWeekPoint(Integer year, Integer month, Integer day) {  \t    LocalDate dts = new LocalDate(year, month, day);  \t    String week = null;  \t    switch (dts.getDayOfWeek()) {  \t    case DateTimeConstants.SUNDAY:  \t        week = \"\u661f\u671f\u65e5\";  \t        break;  \t    case DateTimeConstants.MONDAY:  \t        week = \"\u661f\u671f\u4e00\";  \t        break;  \t    case DateTimeConstants.TUESDAY:  \t        week = \"\u661f\u671f\u4e8c\";  \t        break;  \t    case DateTimeConstants.WEDNESDAY:  \t        week = \"\u661f\u671f\u4e09\";  \t        break;  \t    case DateTimeConstants.THURSDAY:  \t        week = \"\u661f\u671f\u56db\";  \t        break;  \t    case DateTimeConstants.FRIDAY:  \t        week = \"\u661f\u671f\u4e94\";  \t        break;  \t    case DateTimeConstants.SATURDAY:  \t        week = \"\u661f\u671f\u516d\";  \t        break;  \t    default:  \t        break;  \t    }  \t    return week;  \t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/JodaTimeUtils.java", "stars": "3", "class": {"name": "JodaTimeUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "format", "params": ["Date"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String format(Date date) {  \t    if (date == null) {  \t        return null;  \t    }  \t    SimpleDateFormat format = new SimpleDateFormat(FORMAT_TIME);  \t    return format.format(date);  \t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/JodaTimeUtils.java", "stars": "3", "class": {"name": "JodaTimeUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "format", "params": ["Date", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String format(Date date, String pattern) {  \t    if (date == null) {  \t        return null;  \t    }  \t    SimpleDateFormat format = new SimpleDateFormat(pattern);  \t    return format.format(date);  \t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/JodaTimeUtils.java", "stars": "3", "class": {"name": "JodaTimeUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "parse", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Date", "snippet": "\tpublic static Date parse(String date, String pattern) {  \t    if (date == null) {  \t        return null;  \t    }  \t    Date resultDate = null;  \t    try {  \t        resultDate = new SimpleDateFormat(pattern).parse(date);  \t    } catch (ParseException e) {  \t    }  \t    return resultDate;  \t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/JodaTimeUtils.java", "stars": "3", "class": {"name": "JodaTimeUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "parse", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Date", "snippet": "\tpublic static Date parse(String date) {  \t    if (date == null) {  \t        return null;  \t    }  \t    try {  \t        return new SimpleDateFormat(FORMAT_TIME).parse(date);  \t    } catch (ParseException e) {  \t        return null;  \t    }  \t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/JodaTimeUtils.java", "stars": "3", "class": {"name": "JodaTimeUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "format", "params": ["Long", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String format(Long timestamp, String pattern) {  \t    String dateStr = \"\";  \t    if (null == timestamp || timestamp.longValue() < 0) {  \t        return dateStr;  \t    }  \t    try {  \t        Date date = new Date(timestamp);  \t        SimpleDateFormat format = new SimpleDateFormat(pattern);  \t        dateStr = format.format(date);  \t    } catch (Exception e) {  \t        // ignore  \t    }  \t    return dateStr;  \t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/JodaTimeUtils.java", "stars": "3", "class": {"name": "JodaTimeUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "format", "params": ["Long"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String format(Long timestamp) {  \t    String dateStr = \"\";  \t    if (null == timestamp || timestamp.longValue() < 0) {  \t        return dateStr;  \t    }  \t    try {  \t        Date date = new Date(timestamp);  \t        SimpleDateFormat format = new SimpleDateFormat(FORMAT_TIME);  \t        dateStr = format.format(date);  \t    } catch (Exception e) {  \t        // ignore  \t    }  \t    return dateStr;  \t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/JodaTimeUtils.java", "stars": "3", "class": {"name": "JodaTimeUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "forwardDay", "params": ["Integer", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String forwardDay(Integer days, String format) {  \t    DateTime dt = new DateTime();  \t    DateTime y = dt.minusDays(days);  \t    return y.toString(format);  \t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/JodaTimeUtils.java", "stars": "3", "class": {"name": "JodaTimeUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "forwardDay", "params": ["Integer"], "throws": null, "modifiers": ["public", "static"], "return_type": "Date", "snippet": "\tpublic static Date forwardDay(Integer days) {  \t    DateTime dt = new DateTime();  \t    DateTime y = dt.minusDays(days);  \t    return y.toDate();  \t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/JodaTimeUtils.java", "stars": "3", "class": {"name": "JodaTimeUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "day00", "params": ["Integer", "String", "String"], "throws": ["Throwable"], "modifiers": ["public", "static"], "return_type": "Date", "snippet": "\tpublic static Date day00(Integer days, String date, String zimeZone) throws Throwable {  \t    DateTime dt;  \t    TimeZone timeZone;  \t    try {  \t        if (StringUtils.isBlank(zimeZone)) {  \t            timeZone = TimeZone.getDefault();  \t        } else {  \t            timeZone = TimeZone.getTimeZone(zimeZone);  \t        }  \t        if (StringUtils.isBlank(date)) {  \t            dt = new DateTime().withZone(DateTimeZone.forTimeZone(timeZone)).toLocalDateTime().toDateTime();  \t        } else {  \t            dt = new DateTime(date).withZone(DateTimeZone.forTimeZone(timeZone)).toLocalDateTime().toDateTime();  \t        }  \t    } catch (Exception e) {  \t        throw new Throwable(e);  \t    }  \t    DateTime y = dt.minusDays(days).withHourOfDay(0).withMinuteOfHour(0).withSecondOfMinute(0);  \t    return y.toDate();  \t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/JodaTimeUtils.java", "stars": "3", "class": {"name": "JodaTimeUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "day59", "params": ["Integer", "String", "String"], "throws": ["Throwable"], "modifiers": ["public", "static"], "return_type": "Date", "snippet": "\tpublic static Date day59(Integer days, String date, String zimeZone) throws Throwable {  \t    DateTime dt;  \t    TimeZone timeZone;  \t    try {  \t        if (StringUtils.isBlank(zimeZone)) {  \t            timeZone = TimeZone.getDefault();  \t        } else {  \t            timeZone = TimeZone.getTimeZone(zimeZone);  \t        }  \t        if (StringUtils.isBlank(date)) {  \t            dt = new DateTime().withZone(DateTimeZone.forTimeZone(timeZone)).toLocalDateTime().toDateTime();  \t        } else {  \t            dt = new DateTime(date).withZone(DateTimeZone.forTimeZone(timeZone)).toLocalDateTime().toDateTime();  \t        }  \t    } catch (Exception e) {  \t        throw new Throwable(e);  \t    }  \t    DateTime y = dt.minusDays(days).withHourOfDay(23).withMinuteOfHour(59).withSecondOfMinute(59);  \t    return y.toDate();  \t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/JodaTimeUtils.java", "stars": "3", "class": {"name": "JodaTimeUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "diffDay", "params": ["Date", "Date"], "throws": null, "modifiers": ["public", "static"], "return_type": "Integer", "snippet": "\tpublic static Integer diffDay(Date startDate, Date endDate) {  \t    if (startDate == null || endDate == null) {  \t        return null;  \t    }  \t    DateTime dt1 = new DateTime(startDate);  \t    DateTime dt2 = new DateTime(endDate);  \t    int day = Days.daysBetween(dt1, dt2).getDays();  \t    return Math.abs(day);  \t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/JodaTimeUtils.java", "stars": "3", "class": {"name": "JodaTimeUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "lastDay", "params": ["Date", "Integer"], "throws": null, "modifiers": ["public", "static"], "return_type": "Date", "snippet": "\tpublic static Date lastDay(Date date, Integer month) {  \t    DateTime dt1;  \t    if (month == null) {  \t        month = 0;  \t    }  \t    if (date == null) {  \t        dt1 = new DateTime().minusMonths(month);  \t    } else {  \t        dt1 = new DateTime(date).minusMonths(month);  \t    }  \t    DateTime lastDay = dt1.dayOfMonth().withMaximumValue().  \t            withHourOfDay(23).withMinuteOfHour(59).withSecondOfMinute(59);  \t    return lastDay.toDate();  \t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/JodaTimeUtils.java", "stars": "3", "class": {"name": "JodaTimeUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "firstDay", "params": ["Date", "Integer"], "throws": null, "modifiers": ["public", "static"], "return_type": "Date", "snippet": "\tpublic static Date firstDay(Date date, Integer month) {  \t    DateTime dt1;  \t    if (month == null) {  \t        month = 0;  \t    }  \t    if (date == null) {  \t        dt1 = new DateTime().minusMonths(month);  \t    } else {  \t        dt1 = new DateTime(date).minusMonths(month);  \t    }  \t    DateTime lastDay = dt1.dayOfMonth().withMinimumValue().  \t            withHourOfDay(0).withMinuteOfHour(0).withSecondOfMinute(0);  \t    return lastDay.toDate();  \t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/JodaTimeUtils.java", "stars": "3", "class": {"name": "JodaTimeUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "addDay", "params": ["Date", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "Date", "snippet": "\tpublic static Date addDay(Date date, int offset) {  \t    DateTime dt1;  \t    if (date == null) {  \t        dt1 = new DateTime().plusDays(offset);  \t        return dt1.toDate();  \t    }  \t    dt1 = new DateTime(date).plusDays(offset);  \t    return dt1.toDate();  \t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/JodaTimeUtils.java", "stars": "3", "class": {"name": "JodaTimeUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getNewUpdateDateString", "params": ["Date", "Date"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String getNewUpdateDateString(Date now, Date createDate) {  \t    if (now == null || createDate == null) {  \t        return null;  \t    }  \t    Long time = (now.getTime() - createDate.getTime());  \t    if (time > (24 * 60 * 60 * 1000)) {  \t        return time / (24 * 60 * 60 * 1000) + \"\u5929\u524d\";  \t    } else if (time > (60 * 60 * 1000)) {  \t        return time / (60 * 60 * 1000) + \"\u5c0f\u65f6\u524d\";  \t    } else if (time > (60 * 1000)) {  \t        return time / (60 * 1000) + \"\u5206\u949f\u524d\";  \t    } else if (time >= 1000) {  \t        return time / 1000 + \"\u79d2\u524d\";  \t    }  \t    return \"\u521a\u521a\";  \t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/tools/JodaTimeUtils.java", "stars": "3", "class": {"name": "JodaTimeUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "insertExecutableQueue", "params": ["ExecutableFlow"], "throws": ["ExecutorManagerException"], "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void insertExecutableQueue(ExecutableFlow flow) throws ExecutorManagerException {        this.executionQueueDao.insertExecutableQueue(flow);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/JdbcExecutorQueueLoader.java", "stars": "18", "class": {"name": "JdbcExecutorQueueLoader", "extends": null, "implements": ["ExecutorQueueLoader"], "modifiers": ["public"]}}, {"method_name": "uploadExecutableQueue", "params": ["ExecutableFlow"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void uploadExecutableQueue(ExecutableFlow flow) throws ExecutorManagerException {    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/JdbcExecutorQueueLoader.java", "stars": "18", "class": {"name": "JdbcExecutorQueueLoader", "extends": null, "implements": ["ExecutorQueueLoader"], "modifiers": ["public"]}}, {"method_name": "fetchExecutableQueue", "params": [], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutableFlow>", "snippet": "    public List<ExecutableFlow> fetchExecutableQueue() throws ExecutorManagerException {        return this.executionQueueDao.fetchExecutableQueue();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/JdbcExecutorQueueLoader.java", "stars": "18", "class": {"name": "JdbcExecutorQueueLoader", "extends": null, "implements": ["ExecutorQueueLoader"], "modifiers": ["public"]}}, {"method_name": "deleteExecutableQueue", "params": ["int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "ExecutableFlow", "snippet": "    public ExecutableFlow deleteExecutableQueue(int execId) throws ExecutorManagerException {        return null;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/JdbcExecutorQueueLoader.java", "stars": "18", "class": {"name": "JdbcExecutorQueueLoader", "extends": null, "implements": ["ExecutorQueueLoader"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.random_diary_page);    }", "url": "https://raw.githubusercontent.com/RotonNorrison/StirDiary/master/app/src/main/java/com/example/stirdiary/RandomDiary.java", "stars": "2", "class": {"name": "RandomDiary", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "process", "params": ["ResponseEvent", "SipLayer", "SipConfig"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void process(ResponseEvent evt, SipLayer layer, SipConfig config) {\t\t// TODO Auto-generated method stub\t\t\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/response/impl/OtherResponseProcessor.java", "stars": "29", "class": {"name": "OtherResponseProcessor", "extends": null, "implements": ["ISIPResponseProcessor"], "modifiers": ["public"]}}, {"method_name": "isDebugEnabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isDebugEnabled() {    return log.isDebugEnabled();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/slf4j/Slf4jImpl.java", "stars": "15", "class": {"name": "Slf4jImpl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "isTraceEnabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isTraceEnabled() {    return log.isTraceEnabled();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/slf4j/Slf4jImpl.java", "stars": "15", "class": {"name": "Slf4jImpl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "error", "params": ["String", "Throwable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void error(String s, Throwable e) {    log.error(s, e);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/slf4j/Slf4jImpl.java", "stars": "15", "class": {"name": "Slf4jImpl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "error", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void error(String s) {    log.error(s);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/slf4j/Slf4jImpl.java", "stars": "15", "class": {"name": "Slf4jImpl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "debug", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void debug(String s) {    log.debug(s);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/slf4j/Slf4jImpl.java", "stars": "15", "class": {"name": "Slf4jImpl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "trace", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void trace(String s) {    log.trace(s);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/slf4j/Slf4jImpl.java", "stars": "15", "class": {"name": "Slf4jImpl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "warn", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void warn(String s) {    log.warn(s);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/slf4j/Slf4jImpl.java", "stars": "15", "class": {"name": "Slf4jImpl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "removeContainer", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "JobContainer", "snippet": "    public JobContainer removeContainer(Object containerId){        return this.jobContainers.remove(String.valueOf(containerId));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/JobContainerManager.java", "stars": "23", "class": {"name": "JobContainerManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addContainer", "params": ["Object", "JobContainer"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean addContainer(Object containerId, JobContainer jobContainer){        return this.jobContainers.putIfAbsent(String.valueOf(containerId), jobContainer) == null;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/JobContainerManager.java", "stars": "23", "class": {"name": "JobContainerManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getContainer", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "JobContainer", "snippet": "    public JobContainer getContainer(Object containerId){        return this.jobContainers.get(String.valueOf(containerId));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/JobContainerManager.java", "stars": "23", "class": {"name": "JobContainerManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "collectStateList", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<TaskState>", "snippet": "    public List<TaskState> collectStateList(){        List<TaskState> stateList = new ArrayList<>();        jobContainers.forEach((key, value) -> stateList.add(value.getState()));        return stateList;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/JobContainerManager.java", "stars": "23", "class": {"name": "JobContainerManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateTaskState", "params": ["Object", "TaskState"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean updateTaskState(Object containerId, TaskState state){        JobContainer container = getContainer(containerId);        if(null != container){            container.updateTaskState(state);            return true;        }        return false;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/JobContainerManager.java", "stars": "23", "class": {"name": "JobContainerManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "postProcessBeforeInitialization", "params": ["Object", "String"], "throws": ["BeansException"], "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {        EtcdConfigurationProperties etcdConfigurationProperties = AnnotationUtils.findAnnotation(bean.getClass(), EtcdConfigurationProperties.class);        if (etcdConfigurationProperties != null) {            bind(bean, beanName, etcdConfigurationProperties);            if (etcdConfigurationProperties.autoRefreshed()) {                //\u81ea\u52a8\u5237\u65b0                list.add(new EtcdValueTarget(bean, beanName, etcdConfigurationProperties));                if (addFlag.compareAndSet(false, true)) {                    etcdConfigService.addAllListener(new UpdateReferenceListener() {                        @Override                        public void receiveConfigInfo(String configInfo) {                            refresh();                        }                    });                    LOG.info(\"add updateReferenceListener for @EtcdConfigurationProperties\");                }            }        }        return bean;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdConfigurationPropertiesBindingPostProcessor.java", "stars": "4", "class": {"name": "EtcdConfigurationPropertiesBindingPostProcessor", "extends": null, "implements": ["BeanPostProcessor", "ApplicationContextAware"], "modifiers": ["public"]}}, {"method_name": "refresh", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void refresh() {        LOG.info(\"refresh for @EtcdConfigurationProperties, list size={}\", list.size());        for (EtcdValueTarget etcdValueTarget : list) {            bind(etcdValueTarget.getBean(), etcdValueTarget.getBeanName(), etcdValueTarget.getEtcdConfigurationProperties());        }    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdConfigurationPropertiesBindingPostProcessor.java", "stars": "4", "class": {"name": "EtcdConfigurationPropertiesBindingPostProcessor", "extends": null, "implements": ["BeanPostProcessor", "ApplicationContextAware"], "modifiers": ["public"]}}, {"method_name": "bind", "params": ["Object", "String", "EtcdConfigurationProperties"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void bind(Object bean, String beanName, EtcdConfigurationProperties etcdConfigurationProperties) {        Binder binder = Binder.get(applicationContext.getEnvironment());        ResolvableType type = ResolvableType.forClass(bean.getClass());        Bindable<?> target = Bindable.of(type).withExistingValue(bean);        binder.bind(etcdConfigurationProperties.prefix(), target, getBindHandler(etcdConfigurationProperties));    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdConfigurationPropertiesBindingPostProcessor.java", "stars": "4", "class": {"name": "EtcdConfigurationPropertiesBindingPostProcessor", "extends": null, "implements": ["BeanPostProcessor", "ApplicationContextAware"], "modifiers": ["public"]}}, {"method_name": "setApplicationContext", "params": ["ApplicationContext"], "throws": ["BeansException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void setApplicationContext(ApplicationContext applicationContext)            throws BeansException {        this.applicationContext = (ConfigurableApplicationContext) applicationContext;        this.etcdConfigService = applicationContext.getBean(EtcdConfigServiceImpl.BEAN_NAME, EtcdConfigServiceImpl.class);    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdConfigurationPropertiesBindingPostProcessor.java", "stars": "4", "class": {"name": "EtcdConfigurationPropertiesBindingPostProcessor", "extends": null, "implements": ["BeanPostProcessor", "ApplicationContextAware"], "modifiers": ["public"]}}, {"method_name": "getBindHandler", "params": ["EtcdConfigurationProperties"], "throws": null, "modifiers": ["private"], "return_type": "BindHandler", "snippet": "    private BindHandler getBindHandler(EtcdConfigurationProperties annotation) {        BindHandler handler = new IgnoreTopLevelConverterNotFoundBindHandler();        if (annotation.ignoreInvalidFields()) {            handler = new IgnoreErrorsBindHandler(handler);        }        if (!annotation.ignoreUnknownFields()) {            UnboundElementsSourceFilter filter = new UnboundElementsSourceFilter();            handler = new NoUnboundElementsBindHandler(handler, filter);        }        return handler;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdConfigurationPropertiesBindingPostProcessor.java", "stars": "4", "class": {"name": "EtcdConfigurationPropertiesBindingPostProcessor", "extends": null, "implements": ["BeanPostProcessor", "ApplicationContextAware"], "modifiers": ["public"]}}, {"method_name": "getBean", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getBean() {            return bean;        }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdConfigurationPropertiesBindingPostProcessor.java", "stars": "4", "class": {"name": "EtcdValueTarget", "extends": null, "implements": null, "modifiers": ["private"]}}, {"method_name": "getBeanName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getBeanName() {            return beanName;        }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdConfigurationPropertiesBindingPostProcessor.java", "stars": "4", "class": {"name": "EtcdValueTarget", "extends": null, "implements": null, "modifiers": ["private"]}}, {"method_name": "getEtcdConfigurationProperties", "params": [], "throws": null, "modifiers": ["public"], "return_type": "EtcdConfigurationProperties", "snippet": "        public EtcdConfigurationProperties getEtcdConfigurationProperties() {            return etcdConfigurationProperties;        }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/processor/EtcdConfigurationPropertiesBindingPostProcessor.java", "stars": "4", "class": {"name": "EtcdValueTarget", "extends": null, "implements": null, "modifiers": ["private"]}}, {"method_name": "setup", "params": ["int"], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void setup(int type) throws SQLException {    when(rs.next()).thenReturn(true);    when(rs.getMetaData()).thenReturn(metaData);    when(metaData.getColumnCount()).thenReturn(1);    when(metaData.getColumnType(1)).thenReturn(type);    when(metaData.getColumnLabel(1)).thenReturn(\"ColumnName\");    when(log.isTraceEnabled()).thenReturn(true);    ResultSet resultSet = ResultSetLogger.newInstance(rs, log, 1);    resultSet.next();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/logging/jdbc/ResultSetLoggerTest.java", "stars": "15", "class": {"name": "ResultSetLoggerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldNotPrintBlobs", "params": [], "throws": ["SQLException"], "modifiers": [], "return_type": "void", "snippet": "  void shouldNotPrintBlobs() throws SQLException {    setup(Types.LONGNVARCHAR);    verify(log).trace(\"<==    Columns: ColumnName\");    verify(log).trace(\"<==        Row: <<BLOB>>\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/logging/jdbc/ResultSetLoggerTest.java", "stars": "15", "class": {"name": "ResultSetLoggerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldPrintVarchars", "params": [], "throws": ["SQLException"], "modifiers": [], "return_type": "void", "snippet": "  void shouldPrintVarchars() throws SQLException {    when(rs.getString(1)).thenReturn(\"value\");    setup(Types.VARCHAR);    verify(log).trace(\"<==    Columns: ColumnName\");    verify(log).trace(\"<==        Row: value\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/logging/jdbc/ResultSetLoggerTest.java", "stars": "15", "class": {"name": "ResultSetLoggerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "load", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void load() {        adapter.registerAdapter(MemorySection.class, ItemStack.class, new CSToISAdapter());        adapter.registerAdapter(String.class, PrettyName.class, new StringToPrettyNameAdapter());        adapter.registerAdapter(String[].class, Permissions.class, new StringArrayToPermissionsAdapter());        adapter.registerAdapter(String[].class, Commands.class, new StringArrayToCommandsAdapter());        adapter.registerAdapter(MemorySection.class, Items.class, new MemorySectionToItemsAdapter());        adapter.registerAdapter(MemorySection.class, Title.class, new MemorySectionToTitleAdapter());        adapter.registerAdapter(File.class, VipType.class, new FileToVipTypeAdapter());        adapter.registerAdapter(ResultSet.class, Vip.class, new ResultSetToVipAdapter());        adapter.registerAdapter(ResultSet.class, VipPlayer.class, new ResultSetToVipPlayerAdapter());    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/VipsPlugin.java", "stars": "2", "class": {"name": "VipsPlugin", "extends": "BoilerplatePlugin", "implements": null, "modifiers": ["public"]}}, {"method_name": "enable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void enable() {        registerListeners();        registerCommands();    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/VipsPlugin.java", "stars": "2", "class": {"name": "VipsPlugin", "extends": "BoilerplatePlugin", "implements": null, "modifiers": ["public"]}}, {"method_name": "disable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void disable() {    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/VipsPlugin.java", "stars": "2", "class": {"name": "VipsPlugin", "extends": "BoilerplatePlugin", "implements": null, "modifiers": ["public"]}}, {"method_name": "registerListeners", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void registerListeners() {        PluginManager pluginManager = getServer().getPluginManager();        pluginManager.registerEvents(new TrafficListener(this), this);    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/VipsPlugin.java", "stars": "2", "class": {"name": "VipsPlugin", "extends": "BoilerplatePlugin", "implements": null, "modifiers": ["public"]}}, {"method_name": "registerCommands", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void registerCommands() {        CommandFrame commandFrame = new CommandFrame(this, false);        registerTypes(commandFrame);        commandFrame.registerCommands(                new VipCommand(),                new VipKeyCommand(),                new VipRankCommand(this)        );    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/VipsPlugin.java", "stars": "2", "class": {"name": "VipsPlugin", "extends": "BoilerplatePlugin", "implements": null, "modifiers": ["public"]}}, {"method_name": "registerTypes", "params": ["CommandFrame"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void registerTypes(CommandFrame commandFrame) {        commandFrame.registerType(String.class, String::valueOf);        commandFrame.registerType(Character.class, (argument) -> argument.charAt(0));        commandFrame.registerType(Integer.class, Integer::valueOf);        commandFrame.registerType(Double.class, Double::valueOf);        commandFrame.registerType(Long.class, TimeUtils::millisFromString);        commandFrame.registerType(Boolean.class, Boolean::valueOf);        commandFrame.registerType(Byte.class, Byte::valueOf);        commandFrame.registerType(Character.TYPE, (argument) -> argument.charAt(0));        commandFrame.registerType(Integer.TYPE, Integer::parseInt);        commandFrame.registerType(Double.TYPE, Double::parseDouble);        commandFrame.registerType(Long.TYPE, Long::parseLong);        commandFrame.registerType(Boolean.TYPE, Boolean::parseBoolean);        commandFrame.registerType(Byte.TYPE, Byte::parseByte);        commandFrame.registerType(VipType.class, (argument) -> vipTypeLifecycle.getVipTypeCache().find(argument.toLowerCase()));        commandFrame.registerType(Player.class, Bukkit::getPlayer);    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/VipsPlugin.java", "stars": "2", "class": {"name": "VipsPlugin", "extends": "BoilerplatePlugin", "implements": null, "modifiers": ["public"]}}, {"method_name": "log", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void log(String string) {        Bukkit.getConsoleSender().sendMessage(\"[\" + getDescription().getName() + \"] \" + string);    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/VipsPlugin.java", "stars": "2", "class": {"name": "VipsPlugin", "extends": "BoilerplatePlugin", "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "VipsPlugin", "snippet": "    public static VipsPlugin getInstance() {        return getPlugin(VipsPlugin.class);    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/VipsPlugin.java", "stars": "2", "class": {"name": "VipsPlugin", "extends": "BoilerplatePlugin", "implements": null, "modifiers": ["public"]}}, {"method_name": "insert", "params": ["List<T>", "T"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static <T extends Comparable<? super T>> void insert(List<T> list, T element) {        int index = Collections.binarySearch(list, element);        if (index < 0) {            index = -index - 1;        }        if (list.size() <= index) {            list.add(element);        }        else {            list.add(index, element);        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/TimeManager.java", "stars": "4", "class": {"name": "TimeManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addEvent", "params": ["Event"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addEvent(Event event) {        synchronized(eventList) {            insert(eventList, event);        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/TimeManager.java", "stars": "4", "class": {"name": "TimeManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addEvent", "params": ["long", "EventCommand"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addEvent(long timeOffset, EventCommand command) {        addEvent(new Event(timeOffset, command));    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/TimeManager.java", "stars": "4", "class": {"name": "TimeManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void start() {        ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();        executor.scheduleAtFixedRate(                new Runnable() {                    @Override                    public void run() {                        try {                            TimeManager.this.dispatcher();                        }                        catch (Throwable e) {                            e.printStackTrace();                        }                    }                },                0, 100, TimeUnit.MICROSECONDS);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/TimeManager.java", "stars": "4", "class": {"name": "TimeManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "dispatcher", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void dispatcher() {        long time_offset = System.nanoTime();        synchronized(eventList) {            Iterator<Event> itr = eventList.iterator();            while (itr.hasNext()) {                Event event = itr.next();                if (event.timeOffset < time_offset) {                    event.command.execute();                    itr.remove();                }            }        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/TimeManager.java", "stars": "4", "class": {"name": "TimeManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "compareTo", "params": ["Event"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int compareTo(Event e) {            return Long.compare(this.timeOffset, e.timeOffset);        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/TimeManager.java", "stars": "4", "class": {"name": "Event", "extends": null, "implements": ["Comparable"], "modifiers": []}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String toString() {            return String.format(\"timeOffset = %d %s\", timeOffset, command.toString());        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/TimeManager.java", "stars": "4", "class": {"name": "Event", "extends": null, "implements": ["Comparable"], "modifiers": []}}, {"method_name": "onDown", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onDown (android.view.MotionEvent p0)\t{\t\treturn n_onDown (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/InnerGestureListener.java", "stars": "2", "class": {"name": "InnerGestureListener", "extends": "java", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "n_onDown", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onDown (android.view.MotionEvent p0);\tpublic boolean onFling (android.view.MotionEvent p0, android.view.MotionEvent p1, float p2, float p3)\t{\t\treturn n_onFling (p0, p1, p2, p3);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/InnerGestureListener.java", "stars": "2", "class": {"name": "InnerGestureListener", "extends": "java", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "onFling", "params": ["android", "android", "float", "float"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onFling (android.view.MotionEvent p0, android.view.MotionEvent p1, float p2, float p3)\t{\t\treturn n_onFling (p0, p1, p2, p3);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/InnerGestureListener.java", "stars": "2", "class": {"name": "InnerGestureListener", "extends": "java", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "n_onFling", "params": ["android", "android", "float", "float"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onFling (android.view.MotionEvent p0, android.view.MotionEvent p1, float p2, float p3);\tpublic void onLongPress (android.view.MotionEvent p0)\t{\t\tn_onLongPress (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/InnerGestureListener.java", "stars": "2", "class": {"name": "InnerGestureListener", "extends": "java", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "onLongPress", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onLongPress (android.view.MotionEvent p0)\t{\t\tn_onLongPress (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/InnerGestureListener.java", "stars": "2", "class": {"name": "InnerGestureListener", "extends": "java", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "n_onLongPress", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onLongPress (android.view.MotionEvent p0);\tpublic boolean onScroll (android.view.MotionEvent p0, android.view.MotionEvent p1, float p2, float p3)\t{\t\treturn n_onScroll (p0, p1, p2, p3);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/InnerGestureListener.java", "stars": "2", "class": {"name": "InnerGestureListener", "extends": "java", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "onScroll", "params": ["android", "android", "float", "float"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onScroll (android.view.MotionEvent p0, android.view.MotionEvent p1, float p2, float p3)\t{\t\treturn n_onScroll (p0, p1, p2, p3);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/InnerGestureListener.java", "stars": "2", "class": {"name": "InnerGestureListener", "extends": "java", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "n_onScroll", "params": ["android", "android", "float", "float"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onScroll (android.view.MotionEvent p0, android.view.MotionEvent p1, float p2, float p3);\tpublic void onShowPress (android.view.MotionEvent p0)\t{\t\tn_onShowPress (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/InnerGestureListener.java", "stars": "2", "class": {"name": "InnerGestureListener", "extends": "java", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "onShowPress", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onShowPress (android.view.MotionEvent p0)\t{\t\tn_onShowPress (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/InnerGestureListener.java", "stars": "2", "class": {"name": "InnerGestureListener", "extends": "java", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "n_onShowPress", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onShowPress (android.view.MotionEvent p0);\tpublic boolean onSingleTapUp (android.view.MotionEvent p0)\t{\t\treturn n_onSingleTapUp (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/InnerGestureListener.java", "stars": "2", "class": {"name": "InnerGestureListener", "extends": "java", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "onSingleTapUp", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onSingleTapUp (android.view.MotionEvent p0)\t{\t\treturn n_onSingleTapUp (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/InnerGestureListener.java", "stars": "2", "class": {"name": "InnerGestureListener", "extends": "java", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "n_onSingleTapUp", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onSingleTapUp (android.view.MotionEvent p0);\tpublic boolean onDoubleTap (android.view.MotionEvent p0)\t{\t\treturn n_onDoubleTap (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/InnerGestureListener.java", "stars": "2", "class": {"name": "InnerGestureListener", "extends": "java", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "onDoubleTap", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onDoubleTap (android.view.MotionEvent p0)\t{\t\treturn n_onDoubleTap (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/InnerGestureListener.java", "stars": "2", "class": {"name": "InnerGestureListener", "extends": "java", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "n_onDoubleTap", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onDoubleTap (android.view.MotionEvent p0);\tpublic boolean onDoubleTapEvent (android.view.MotionEvent p0)\t{\t\treturn n_onDoubleTapEvent (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/InnerGestureListener.java", "stars": "2", "class": {"name": "InnerGestureListener", "extends": "java", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "onDoubleTapEvent", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onDoubleTapEvent (android.view.MotionEvent p0)\t{\t\treturn n_onDoubleTapEvent (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/InnerGestureListener.java", "stars": "2", "class": {"name": "InnerGestureListener", "extends": "java", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "n_onDoubleTapEvent", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onDoubleTapEvent (android.view.MotionEvent p0);\tpublic boolean onSingleTapConfirmed (android.view.MotionEvent p0)\t{\t\treturn n_onSingleTapConfirmed (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/InnerGestureListener.java", "stars": "2", "class": {"name": "InnerGestureListener", "extends": "java", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "onSingleTapConfirmed", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onSingleTapConfirmed (android.view.MotionEvent p0)\t{\t\treturn n_onSingleTapConfirmed (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/InnerGestureListener.java", "stars": "2", "class": {"name": "InnerGestureListener", "extends": "java", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "n_onSingleTapConfirmed", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onSingleTapConfirmed (android.view.MotionEvent p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/InnerGestureListener.java", "stars": "2", "class": {"name": "InnerGestureListener", "extends": "java", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/InnerGestureListener.java", "stars": "2", "class": {"name": "InnerGestureListener", "extends": "java", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/InnerGestureListener.java", "stars": "2", "class": {"name": "InnerGestureListener", "extends": "java", "implements": ["mono", "android", "android"], "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    Configuration configuration = new Configuration();    Environment environment = new Environment(\"development\", new JdbcTransactionFactory(),        PgContainer.getUnpooledDataSource());    configuration.setEnvironment(environment);    configuration.setMapUnderscoreToCamelCase(true);    configuration.addMapper(Mapper.class);    sqlSessionFactory = new SqlSessionFactoryBuilder().build(configuration);    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),        \"org/apache/ibatis/submitted/multiple_resultsets/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/multiple_resultsets/MultipleResultTest.java", "stars": "15", "class": {"name": "MultipleResultTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetMultipleResultSetsWithOneStatement", "params": [], "throws": ["IOException"], "modifiers": [], "return_type": "void", "snippet": "  void shouldGetMultipleResultSetsWithOneStatement() throws IOException {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      List<List<?>> results = mapper.getUsersAndGroups();      Assertions.assertEquals(2, results.size());      Assertions.assertEquals(6, results.get(0).size());      OrderDetail detail = (OrderDetail)results.get(0).get(0);      Assertions.assertEquals(1, detail.getOrderId());      Assertions.assertEquals(1, detail.getLineNumber());      Assertions.assertEquals(1, detail.getQuantity());      Assertions.assertEquals(\"Pen\", detail.getItemDescription());      Assertions.assertEquals(2, results.get(1).size());      OrderHeader header = (OrderHeader)results.get(1).get(0);      Assertions.assertEquals(1, header.getOrderId());      Assertions.assertEquals(\"Fred\", header.getCustName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/multiple_resultsets/MultipleResultTest.java", "stars": "15", "class": {"name": "MultipleResultTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldSkipNullResultSet", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSkipNullResultSet() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      try {        Mapper mapper = sqlSession.getMapper(Mapper.class);        List<List<?>> results = mapper.multiResultsWithUpdate();        Assertions.assertEquals(2, results.size());        Assertions.assertEquals(6, results.get(0).size());        OrderDetail detail = (OrderDetail) results.get(0).get(0);        Assertions.assertEquals(1, detail.getOrderId());        Assertions.assertEquals(1, detail.getLineNumber());        Assertions.assertEquals(1, detail.getQuantity());        Assertions.assertEquals(\"Pen\", detail.getItemDescription());        Assertions.assertEquals(2, results.get(1).size());        OrderHeader header = (OrderHeader) results.get(1).get(0);        Assertions.assertEquals(1, header.getOrderId());        Assertions.assertEquals(\"Fred\", header.getCustName());        results = mapper.getUsersAndGroups();        Assertions.assertEquals(7, results.get(0).size());        detail = (OrderDetail) results.get(0).get(6);        Assertions.assertEquals(2, detail.getOrderId());        Assertions.assertEquals(4, detail.getLineNumber());        Assertions.assertEquals(5, detail.getQuantity());        Assertions.assertEquals(\"Eraser\", detail.getItemDescription());      } finally {        sqlSession.rollback(true);      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/multiple_resultsets/MultipleResultTest.java", "stars": "15", "class": {"name": "MultipleResultTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onCreateViewHolder", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "PhotoViewAdapter", "snippet": "    public PhotoViewAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {        View view = inflater.inflate(R.layout.layout_photo_view, parent, false);        return new ViewHolder(view);    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/adapter/viewpager/PhotoViewAdapter.java", "stars": "4", "class": {"name": "PhotoViewAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBindViewHolder", "params": ["PhotoViewAdapter", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBindViewHolder(PhotoViewAdapter.ViewHolder holder, int position) {        GlideUtil.set(data.get(position), holder.photo, context);    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/adapter/viewpager/PhotoViewAdapter.java", "stars": "4", "class": {"name": "PhotoViewAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getItemCount() {        return data.size();    }", "url": "https://raw.githubusercontent.com/justneon33/Sketchcode/master/app/src/main/java/com/sketch/code/two/adapter/viewpager/PhotoViewAdapter.java", "stars": "4", "class": {"name": "PhotoViewAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateGuidance", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "GuidanceStylist", "snippet": "    public GuidanceStylist.Guidance onCreateGuidance(Bundle savedInstanceState) {        return new GuidanceStylist.Guidance(getString(R.string.terms_and_conditions), getString(R.string.terms), getString(R.string.app_name), null);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVWelcomeFragment.java", "stars": "4", "class": {"name": "TVWelcomeFragment", "extends": "GuidedStepFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateGuidanceStylist", "params": [], "throws": null, "modifiers": ["public"], "return_type": "GuidanceStylist", "snippet": "    public GuidanceStylist onCreateGuidanceStylist() {        return new TermsGuidanceStylist();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVWelcomeFragment.java", "stars": "4", "class": {"name": "TVWelcomeFragment", "extends": "GuidedStepFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateActions", "params": ["List<GuidedAction>", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreateActions(@NonNull List<GuidedAction> actions, Bundle savedInstanceState) {        GuidedAction acceptAction = new GuidedAction.Builder().id(R.id.action_accept).hasNext(true).title(getString(R.string.accept)).build();        GuidedAction declineAction = new GuidedAction.Builder().id(R.id.action_decline).hasNext(true).title(getString(R.string.leave)).build();        actions.add(acceptAction);        actions.add(declineAction);        super.onCreateActions(actions, savedInstanceState);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVWelcomeFragment.java", "stars": "4", "class": {"name": "TVWelcomeFragment", "extends": "GuidedStepFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onGuidedActionClicked", "params": ["GuidedAction"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onGuidedActionClicked(GuidedAction action) {        switch ((int) action.getId()) {            case R.id.action_accept:                //set first run flag to false, don't show welcome again                PrefUtils.save(getActivity(), Prefs.FIRST_RUN, false);                //start main activity                TVMainActivity.startActivity(getActivity());                getActivity().finish();                return;            case R.id.action_decline:                getActivity().finish();                return;        }        super.onGuidedActionClicked(action);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVWelcomeFragment.java", "stars": "4", "class": {"name": "TVWelcomeFragment", "extends": "GuidedStepFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onProvideLayoutId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int onProvideLayoutId() {            return R.layout.guidance_type1;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVWelcomeFragment.java", "stars": "4", "class": {"name": "TermsGuidanceStylist", "extends": "GuidanceStylist", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        float f = 0.1f * 0.1f;        System.out.println(f);        double d = 0.1*0.1;        System.out.println(d);        String myString = \"123\";        new Object();    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/floatDemo.java", "stars": "2", "class": {"name": "floatDemo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "assignFairly", "params": ["Configuration", "int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<Configuration>", "snippet": "    public static List<Configuration> assignFairly(Configuration configuration, int channelNumber, int channelsPerTaskGroup) {        Validate.isTrue(configuration != null, \"\u6846\u67b6\u83b7\u5f97\u7684 Job \u4e0d\u80fd\u4e3a null.\");        List<Configuration> contentConfig = configuration.getListConfiguration(CoreConstant.DATAX_JOB_CONTENT);        Validate.isTrue(contentConfig.size() > 0, \"\u6846\u67b6\u83b7\u5f97\u7684\u5207\u5206\u540e\u7684 Job \u65e0\u5185\u5bb9.\");        Validate.isTrue(channelNumber > 0 && channelsPerTaskGroup > 0,                \"\u6bcf\u4e2achannel\u7684\u5e73\u5747task\u6570[averTaskPerChannel]\uff0cchannel\u6570\u76ee[channelNumber]\uff0c\u6bcf\u4e2ataskGroup\u7684\u5e73\u5747channel\u6570[channelsPerTaskGroup]\u90fd\u5e94\u8be5\u4e3a\u6b63\u6570\");        int taskGroupNumber = (int) Math.ceil(1.0 * channelNumber / channelsPerTaskGroup);        Configuration aTaskConfig = contentConfig.get(0);        String readerResourceMark = aTaskConfig.getString(CoreConstant.JOB_READER_PARAMETER + \".\" +                CommonConstant.LOAD_BALANCE_RESOURCE_MARK);        String writerResourceMark = aTaskConfig.getString(String.format(CoreConstant.JOB_WRITER_PARAMETER, 0) + \".\" +                CommonConstant.LOAD_BALANCE_RESOURCE_MARK);        boolean hasLoadBalanceResourceMark = StringUtils.isNotBlank(readerResourceMark) ||                StringUtils.isNotBlank(writerResourceMark);        if (!hasLoadBalanceResourceMark) {            // fake \u4e00\u4e2a\u56fa\u5b9a\u7684 key \u4f5c\u4e3a\u8d44\u6e90\u6807\u8bc6\uff08\u5728 reader \u6216\u8005 writer \u4e0a\u5747\u53ef\uff0c\u6b64\u5904\u9009\u62e9\u5728 reader \u4e0a\u8fdb\u884c fake\uff09            for (Configuration conf : contentConfig) {                conf.set(CoreConstant.JOB_READER_PARAMETER + \".\" +                        CommonConstant.LOAD_BALANCE_RESOURCE_MARK, \"aFakeResourceMarkForLoadBalance\");            }            // \u662f\u4e3a\u4e86\u907f\u514d\u67d0\u4e9b\u63d2\u4ef6\u6ca1\u6709\u8bbe\u7f6e \u8d44\u6e90\u6807\u8bc6 \u800c\u8fdb\u884c\u4e86\u4e00\u6b21\u968f\u673a\u6253\u4e71\u64cd\u4f5c            Collections.shuffle(contentConfig, new Random(System.currentTimeMillis()));        }        LinkedHashMap<String, List<Integer>> resourceMarkAndTaskIdMap = parseAndGetResourceMarkAndTaskIdMap(contentConfig);        List<Configuration> taskGroupConfig = doAssign(resourceMarkAndTaskIdMap, configuration, taskGroupNumber);        // \u8c03\u6574 \u6bcf\u4e2a taskGroup \u5bf9\u5e94\u7684 RecordChannel \u4e2a\u6570\uff08\u5c5e\u4e8e\u4f18\u5316\u8303\u7574\uff09        adjustChannelNumPerTaskGroup(taskGroupConfig, channelNumber);        return taskGroupConfig;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/container/util/JobAssignUtil.java", "stars": "23", "class": {"name": "JobAssignUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "adjustChannelNumPerTaskGroup", "params": ["List<Configuration>", "int"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void adjustChannelNumPerTaskGroup(List<Configuration> taskGroupConfig, int channelNumber) {        int taskGroupNumber = taskGroupConfig.size();        int avgChannelsPerTaskGroup = channelNumber / taskGroupNumber;        int remainderChannelCount = channelNumber % taskGroupNumber;        // \u8868\u793a\u6709 remainderChannelCount \u4e2a taskGroup,\u5176\u5bf9\u5e94 RecordChannel \u4e2a\u6570\u5e94\u8be5\u4e3a\uff1aavgChannelsPerTaskGroup + 1\uff1b        // \uff08taskGroupNumber - remainderChannelCount\uff09\u4e2a taskGroup,\u5176\u5bf9\u5e94 RecordChannel \u4e2a\u6570\u5e94\u8be5\u4e3a\uff1aavgChannelsPerTaskGroup        int i = 0;        for (; i < remainderChannelCount; i++) {            taskGroupConfig.get(i).set(CoreConstant.DATAX_CORE_CONTAINER_TASKGROUP_CHANNEL, avgChannelsPerTaskGroup + 1);        }        for (int j = 0; j < taskGroupNumber - remainderChannelCount; j++) {            taskGroupConfig.get(i + j).set(CoreConstant.DATAX_CORE_CONTAINER_TASKGROUP_CHANNEL, avgChannelsPerTaskGroup);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/container/util/JobAssignUtil.java", "stars": "23", "class": {"name": "JobAssignUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "parseAndGetResourceMarkAndTaskIdMap", "params": ["List<Configuration>"], "throws": null, "modifiers": ["private", "static"], "return_type": "LinkedHashMap<String,List>", "snippet": "    private static LinkedHashMap<String, List<Integer>> parseAndGetResourceMarkAndTaskIdMap(List<Configuration> contentConfig) {        // key: resourceMark, value: taskId        LinkedHashMap<String, List<Integer>> readerResourceMarkAndTaskIdMap = new LinkedHashMap<>();        LinkedHashMap<String, List<Integer>> writerResourceMarkAndTaskIdMap = new LinkedHashMap<>();        for (Configuration aTaskConfig : contentConfig) {            int taskId = aTaskConfig.getInt(CoreConstant.TASK_ID);            // \u628a readerResourceMark \u52a0\u5230 readerResourceMarkAndTaskIdMap \u4e2d            String readerResourceMark = aTaskConfig.getString(CoreConstant.JOB_READER_PARAMETER + \".\" + CommonConstant.LOAD_BALANCE_RESOURCE_MARK);            readerResourceMarkAndTaskIdMap.computeIfAbsent(readerResourceMark, k -> new LinkedList<>());            readerResourceMarkAndTaskIdMap.get(readerResourceMark).add(taskId);            // \u628a writerResourceMark \u52a0\u5230 writerResourceMarkAndTaskIdMap \u4e2d            List<String> writerResourceMarks = new ArrayList<>();            List<Object> taskWriterList = aTaskConfig.getList(CoreConstant.JOB_WRITER);            for(int i = 0; i < taskWriterList.size(); i++){                writerResourceMarks.add(aTaskConfig.getString(String.format(CoreConstant.JOB_WRITER_PARAMETER, i) +                        \".\" + CommonConstant.LOAD_BALANCE_RESOURCE_MARK));            }            String[] resourceMarksArray = new String[writerResourceMarks.size()];            //Join all task writers' resource marks            String writerResourceMark = StringUtils.join(writerResourceMarks.toArray(resourceMarksArray), \"-\");            writerResourceMarkAndTaskIdMap.computeIfAbsent(writerResourceMark, k -> new LinkedList<>());            writerResourceMarkAndTaskIdMap.get(writerResourceMark).add(taskId);        }        if (readerResourceMarkAndTaskIdMap.size() >= writerResourceMarkAndTaskIdMap.size()) {            // \u91c7\u7528 reader \u5bf9\u8d44\u6e90\u505a\u7684\u6807\u8bb0\u8fdb\u884c shuffle            return readerResourceMarkAndTaskIdMap;        } else {            // \u91c7\u7528 writer \u5bf9\u8d44\u6e90\u505a\u7684\u6807\u8bb0\u8fdb\u884c shuffle            return writerResourceMarkAndTaskIdMap;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/container/util/JobAssignUtil.java", "stars": "23", "class": {"name": "JobAssignUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "doAssign", "params": ["LinkedHashMap<String,List>", "Configuration", "int"], "throws": null, "modifiers": ["private", "static"], "return_type": "List<Configuration>", "snippet": "    private static List<Configuration> doAssign(LinkedHashMap<String, List<Integer>> resourceMarkAndTaskIdMap, Configuration jobConfiguration, int taskGroupNumber) {        List<Configuration> contentConfig = jobConfiguration.getListConfiguration(CoreConstant.DATAX_JOB_CONTENT);        Configuration taskGroupTemplate = jobConfiguration.clone();        taskGroupTemplate.remove(CoreConstant.DATAX_JOB_CONTENT);        List<Configuration> result = new LinkedList<Configuration>();        List<List<Configuration>> taskGroupConfigList = new ArrayList<List<Configuration>>(taskGroupNumber);        for (int i = 0; i < taskGroupNumber; i++) {            taskGroupConfigList.add(new LinkedList<Configuration>());        }        int mapValueMaxLength = -1;        List<String> resourceMarks = new ArrayList<String>();        for (Map.Entry<String, List<Integer>> entry : resourceMarkAndTaskIdMap.entrySet()) {            resourceMarks.add(entry.getKey());            if (entry.getValue().size() > mapValueMaxLength) {                mapValueMaxLength = entry.getValue().size();            }        }        int taskGroupIndex = 0;        for (int i = 0; i < mapValueMaxLength; i++) {            for (String resourceMark : resourceMarks) {                if (resourceMarkAndTaskIdMap.get(resourceMark).size() > 0) {                    int taskId = resourceMarkAndTaskIdMap.get(resourceMark).get(0);                    taskGroupConfigList.get(taskGroupIndex % taskGroupNumber).add(contentConfig.get(taskId));                    taskGroupIndex++;                    resourceMarkAndTaskIdMap.get(resourceMark).remove(0);                }            }        }        Configuration tempTaskGroupConfig;        for (int i = 0; i < taskGroupNumber; i++) {            tempTaskGroupConfig = taskGroupTemplate.clone();            tempTaskGroupConfig.set(CoreConstant.DATAX_JOB_CONTENT, taskGroupConfigList.get(i));            tempTaskGroupConfig.set(CoreConstant.DATAX_CORE_CONTAINER_TASKGROUP_ID, i);            result.add(tempTaskGroupConfig);        }        return result;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/container/util/JobAssignUtil.java", "stars": "23", "class": {"name": "JobAssignUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onClick", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onClick (android.view.View p0)\t{\t\tn_onClick (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/android/support/v7/widget/Toolbar_NavigationOnClickEventDispatcher.java", "stars": "2", "class": {"name": "Toolbar_NavigationOnClickEventDispatcher", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onClick", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onClick (android.view.View p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/android/support/v7/widget/Toolbar_NavigationOnClickEventDispatcher.java", "stars": "2", "class": {"name": "Toolbar_NavigationOnClickEventDispatcher", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/android/support/v7/widget/Toolbar_NavigationOnClickEventDispatcher.java", "stars": "2", "class": {"name": "Toolbar_NavigationOnClickEventDispatcher", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/android/support/v7/widget/Toolbar_NavigationOnClickEventDispatcher.java", "stars": "2", "class": {"name": "Toolbar_NavigationOnClickEventDispatcher", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "interpreter", "params": ["HashMap<String,Integer>"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int interpreter(HashMap<String, Integer> var) {\t\treturn super.left.interpreter(var) - super.right.interpreter(var);\t}", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/interpreter/SubExpression.java", "stars": "2", "class": {"name": "SubExpression", "extends": "SymbolExpression", "implements": null, "modifiers": ["public"]}}, {"method_name": "dummy", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void dummy() {  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/CachingBatchExecutorTest.java", "stars": "15", "class": {"name": "CachingBatchExecutorTest", "extends": "BaseExecutorTest", "implements": null, "modifiers": []}}, {"method_name": "createExecutor", "params": ["Transaction"], "throws": null, "modifiers": ["protected"], "return_type": "Executor", "snippet": "  protected Executor createExecutor(Transaction transaction) {    return new CachingExecutor(new BatchExecutor(config, transaction));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/executor/CachingBatchExecutorTest.java", "stars": "15", "class": {"name": "CachingBatchExecutorTest", "extends": "BaseExecutorTest", "implements": null, "modifiers": []}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_detail_filter);        ButterKnife.bind(this);        backupRendType = GSYVideoType.getRenderType();        //\u8bbe\u7f6e\u4e3aGL\u64ad\u653e\u6a21\u5f0f\uff0c\u624d\u80fd\u652f\u6301\u6ee4\u955c\uff0c\u6ce8\u610f\u6b64\u8bbe\u7f6e\u662f\u5168\u5c40\u7684        GSYVideoType.setRenderType(GSYVideoType.GLSURFACE);        resolveNormalVideoUI();        initVideoBuilderMode();        initGifHelper();        detailPlayer.setLockClickListener(new LockClickListener() {            @Override            public void onClick(View view, boolean lock) {                if (orientationUtils != null) {                    //\u914d\u5408\u4e0b\u65b9\u7684onConfigurationChanged                    orientationUtils.setEnable(!lock);                }            }        });        //\u81ea\u5b9a\u4e49render\u9700\u8981\u5728\u64ad\u653e\u5668\u5f00\u59cb\u64ad\u653e\u4e4b\u524d\uff0c\u64ad\u653e\u8fc7\u7a0b\u4e2d\u4e0d\u5141\u8bb8\u5207\u6362render        //\u6c34\u5370\u56fe\u6548\u679c        /*Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher);        mGSYVideoGLViewCustomRender = new GSYVideoGLViewCustomRender();        mCustomBitmapIconEffect = new BitmapIconEffect(bitmap, dp2px(50), dp2px(50), 0.6f);        mGSYVideoGLViewCustomRender.setBitmapEffect(mCustomBitmapIconEffect);        detailPlayer.setCustomGLRenderer(mGSYVideoGLViewCustomRender);        detailPlayer.setGLRenderMode(GSYVideoGLView.MODE_RENDER_SIZE);*/        //\u591a\u7a97\u53e3\u64ad\u653e\u6548\u679c        //detailPlayer.setEffectFilter(new GammaEffect(0.8f));        //detailPlayer.setCustomGLRenderer(new GSYVideoGLViewCustomRender2());        //\u56fe\u7247\u7a7f\u5b54\u900f\u89c6\u64ad\u653e        //detailPlayer.setCustomGLRenderer(new GSYVideoGLViewCustomRender3());        //\u9ad8\u65af\u62c9\u4f38\u89c6\u9891\u94fa\u6ee1\u80cc\u666f\uff0c\u66ff\u6362\u9ed1\u8272\uff0c\u524d\u53f0\u6b63\u5e38\u6bd4\u4f8b\u64ad\u653e        //detailPlayer.setEffectFilter(new GaussianBlurEffect(6.0f, GaussianBlurEffect.TYPEXY));        //detailPlayer.setCustomGLRenderer(new GSYVideoGLViewCustomRender4());        //detailPlayer.setGLRenderMode(GSYVideoGLView.MODE_RENDER_SIZE);        changeFilter.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                resolveTypeUI();            }        });        //\u4f7f\u7528GL\u64ad\u653e\u7684\u8bdd\uff0c\u7528\u8fd9\u79cd\u65b9\u5f0f\u53ef\u4ee5\u89e3\u51b3\u9000\u51fa\u5168\u5c4f\u9ed1\u5c4f\u7684\u95ee\u9898        detailPlayer.setBackFromFullScreenListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                DetailFilterActivity.this.onBackPressed();            }        });        jump.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                //shotImage(v);                //JumpUtils.gotoControl(DetailFilterActivity.this);                //startActivity(new Intent(DetailControlActivity.this, MainActivity.class));                DetailFilterActivityPermissionsDispatcher.shotImageWithPermissionCheck(DetailFilterActivity.this, v);            }        });        anima.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                //\u753b\u9762\u65cb\u8f6c                cancelTask();                mTimerTask = new TaskLocal();                timer.schedule(mTimerTask, 0, 50);                percentageType++;                if (percentageType > 4) {                    percentageType = 1;                }                //\u6c34\u5370\u56fe\u52a8\u8d77\u6765                //cancelTask2();                //mTimerTask2 = new TaskLocal2();                //timer.schedule(mTimerTask2, 0, 400);                //moveBitmap = !moveBitmap;            }        });        startGif.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                DetailFilterActivityPermissionsDispatcher.startGifWithPermissionCheck(DetailFilterActivity.this);            }        });        stopGif.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                stopGif();            }        });        loadingView.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                //do nothing            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailFilterActivity.java", "stars": "2", "class": {"name": "DetailFilterActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "getGSYVideoPlayer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "StandardGSYVideoPlayer", "snippet": "    public StandardGSYVideoPlayer getGSYVideoPlayer() {        return detailPlayer;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailFilterActivity.java", "stars": "2", "class": {"name": "DetailFilterActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "getGSYVideoOptionBuilder", "params": [], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public GSYVideoOptionBuilder getGSYVideoOptionBuilder() {        //\u5185\u7f6e\u5c01\u9762\u53ef\u53c2\u8003SampleCoverVideo        ImageView imageView = new ImageView(this);        loadCover(imageView, url);        return new GSYVideoOptionBuilder()                .setThumbImageView(imageView)                .setUrl(url)                .setCacheWithPlay(true)                .setVideoTitle(\" \")                .setIsTouchWiget(true)                .setRotateViewAuto(false)                .setLockLand(false)                .setShowFullAnimation(false)                .setNeedLockFull(true)                .setSeekRatio(1);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailFilterActivity.java", "stars": "2", "class": {"name": "DetailFilterActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "clickForFullScreen", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clickForFullScreen() {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailFilterActivity.java", "stars": "2", "class": {"name": "DetailFilterActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDetailOrientationRotateAuto", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean getDetailOrientationRotateAuto() {        return true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailFilterActivity.java", "stars": "2", "class": {"name": "DetailFilterActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDestroy() {        super.onDestroy();        //\u6062\u590d\u5230\u539f\u672c\u7684\u7ed8\u5236\u6a21\u5f0f        GSYVideoType.setRenderType(backupRendType);        cancelTask();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailFilterActivity.java", "stars": "2", "class": {"name": "DetailFilterActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "shotImage", "params": ["View"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void shotImage(final View v) {        //\u83b7\u53d6\u622a\u56fe        detailPlayer.taskShotPic(new GSYVideoShotListener() {            @Override            public void getBitmap(Bitmap bitmap) {                if (bitmap != null) {                    try {                        CommonUtil.saveBitmap(bitmap);                    } catch (FileNotFoundException e) {                        showToast(\"save fail \");                        e.printStackTrace();                        return;                    }                    showToast(\"save success \");                } else {                    showToast(\"get bitmap fail \");                }            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailFilterActivity.java", "stars": "2", "class": {"name": "DetailFilterActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "initGifHelper", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initGifHelper() {        mGifCreateHelper = new GifCreateHelper(detailPlayer, new GSYVideoGifSaveListener() {            @Override            public void result(boolean success, File file) {                detailPlayer.post(new Runnable() {                    @Override                    public void run() {                        loadingView.setVisibility(View.GONE);                        Toast.makeText(detailPlayer.getContext(), \"\u521b\u5efa\u6210\u529f\", Toast.LENGTH_LONG).show();                    }                });            }            @Override            public void process(int curPosition, int total) {                Debuger.printfError(\" current \" + curPosition + \" total \" + total);            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailFilterActivity.java", "stars": "2", "class": {"name": "DetailFilterActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "startGif", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void startGif() {        //\u5f00\u59cb\u7f13\u5b58\u5404\u4e2a\u5e27        mGifCreateHelper.startGif(new File(FileUtils.getPath()));    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailFilterActivity.java", "stars": "2", "class": {"name": "DetailFilterActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "stopGif", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void stopGif() {        loadingView.setVisibility(View.VISIBLE);        mGifCreateHelper.stopGif(new File(FileUtils.getPath(), \"GSY-Z-\" + System.currentTimeMillis() + \".gif\"));    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailFilterActivity.java", "stars": "2", "class": {"name": "DetailFilterActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "loadCover", "params": ["ImageView", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void loadCover(ImageView imageView, String url) {        imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);        imageView.setImageResource(R.mipmap.xxx1);        Glide.with(this.getApplicationContext())                .setDefaultRequestOptions(                        new RequestOptions()                                .frame(3000000)                                .centerCrop()                                .error(R.mipmap.xxx2)                                .placeholder(R.mipmap.xxx1))                .load(url)                .into(imageView);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailFilterActivity.java", "stars": "2", "class": {"name": "DetailFilterActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveNormalVideoUI", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveNormalVideoUI() {        //\u589e\u52a0title        detailPlayer.getTitleTextView().setVisibility(View.GONE);        detailPlayer.getBackButton().setVisibility(View.GONE);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailFilterActivity.java", "stars": "2", "class": {"name": "DetailFilterActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveTypeUI", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveTypeUI() {        GSYVideoGLView.ShaderInterface effect = new NoEffect();        switch (type) {            case 0:                effect = new AutoFixEffect(deep);                break;            case 1:                effect = new PixelationEffect();                break;            case 2:                effect = new BlackAndWhiteEffect();                break;            case 3:                effect = new ContrastEffect(deep);                break;            case 4:                effect = new CrossProcessEffect();                break;            case 5:                effect = new DocumentaryEffect();                break;            case 6:                effect = new DuotoneEffect(Color.BLUE, Color.YELLOW);                break;            case 7:                effect = new FillLightEffect(deep);                break;            case 8:                effect = new GammaEffect(deep);                break;            case 9:                effect = new GrainEffect(deep);                break;            case 10:                effect = new GrainEffect(deep);                break;            case 11:                effect = new HueEffect(deep);                break;            case 12:                effect = new InvertColorsEffect();                break;            case 13:                effect = new LamoishEffect();                break;            case 14:                effect = new PosterizeEffect();                break;            case 15:                effect = new BarrelBlurEffect();                break;            case 16:                effect = new SaturationEffect(deep);                break;            case 17:                effect = new SepiaEffect();                break;            case 18:                effect = new SharpnessEffect(deep);                break;            case 19:                effect = new TemperatureEffect(deep);                break;            case 20:                effect = new TintEffect(Color.GREEN);                break;            case 21:                effect = new VignetteEffect(deep);                break;            case 22:                effect = new NoEffect();                break;            case 23:                effect = new OverlayEffect();                break;            case 24:                effect = new SampleBlurEffect(4.0f);                break;            case 25:                effect = new GaussianBlurEffect(6.0f, GaussianBlurEffect.TYPEXY);                break;            case 26:                effect = new BrightnessEffect(deep);                break;        }        detailPlayer.setEffectFilter(effect);        type++;        if (type > 25) {            type = 0;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailFilterActivity.java", "stars": "2", "class": {"name": "DetailFilterActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "cancelTask2", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void cancelTask2() {        if (mTimerTask2 != null) {            mTimerTask2.cancel();            mTimerTask2 = null;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailFilterActivity.java", "stars": "2", "class": {"name": "DetailFilterActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "cancelTask", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void cancelTask() {        if (mTimerTask != null) {            mTimerTask.cancel();            mTimerTask = null;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailFilterActivity.java", "stars": "2", "class": {"name": "DetailFilterActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "dp2px", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int dp2px(int dp) {        return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp,                getResources().getDisplayMetrics());    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailFilterActivity.java", "stars": "2", "class": {"name": "DetailFilterActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "showToast", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void showToast(final String tip) {        detailPlayer.post(new Runnable() {            @Override            public void run() {                Toast.makeText(DetailFilterActivity.this, tip, Toast.LENGTH_LONG).show();            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailFilterActivity.java", "stars": "2", "class": {"name": "DetailFilterActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "showRationaleForCamera", "params": ["PermissionRequest"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void showRationaleForCamera(final PermissionRequest request) {        new AlertDialog.Builder(this)                .setMessage(\"\u5feb\u7ed9\u6211\u6743\u9650\")                .setPositiveButton(\"\u5141\u8bb8\", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        request.proceed();                    }                })                .setNegativeButton(\"\u62d2\u7edd\", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        request.cancel();                    }                })                .show();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailFilterActivity.java", "stars": "2", "class": {"name": "DetailFilterActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "showDeniedForCamera", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void showDeniedForCamera() {        Toast.makeText(this, \"\u6ca1\u6709\u6743\u9650\u554a\", Toast.LENGTH_SHORT).show();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailFilterActivity.java", "stars": "2", "class": {"name": "DetailFilterActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "showNeverAskForCamera", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void showNeverAskForCamera() {        Toast.makeText(this, \"\u518d\u6b21\u6388\u6743\", Toast.LENGTH_SHORT).show();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailFilterActivity.java", "stars": "2", "class": {"name": "DetailFilterActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "onRequestPermissionsResult", "params": ["int", "String", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        super.onRequestPermissionsResult(requestCode, permissions, grantResults);        // NOTE: delegate the permission handling to generated method        DetailFilterActivityPermissionsDispatcher.onRequestPermissionsResult(this, requestCode, grantResults);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailFilterActivity.java", "stars": "2", "class": {"name": "DetailFilterActivity", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void run() {            float[] transform = new float[16];            //\u65cb\u8f6c\u5230\u6b63\u5e38\u89d2\u5ea6            Matrix.setRotateM(transform, 0, 180f, 0.0f, 0, 1.0f);            //\u8c03\u6574\u5927\u5c0f\u6bd4\u4f8b            Matrix.scaleM(transform, 0, mCustomBitmapIconEffect.getScaleW(), mCustomBitmapIconEffect.getScaleH(), 1);            if (moveBitmap) {                //\u8c03\u6574\u4f4d\u7f6e                Matrix.translateM(transform, 0, mCustomBitmapIconEffect.getPositionX(), mCustomBitmapIconEffect.getPositionY(), 0f);            } else {                float maxX = mCustomBitmapIconEffect.getMaxPositionX();                float minX = mCustomBitmapIconEffect.getMinPositionX();                float maxY = mCustomBitmapIconEffect.getMaxPositionY();                float minY = mCustomBitmapIconEffect.getMinPositionY();                float x = (float) Math.random() * (maxX - minX) + minX;                float y = (float) Math.random() * (maxY - minY) + minY;                //\u8c03\u6574\u4f4d\u7f6e                Matrix.translateM(transform, 0, x, y, 0f);                mGSYVideoGLViewCustomRender.setCurrentMVPMatrix(transform);            }        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailFilterActivity.java", "stars": "2", "class": {"name": "TaskLocal2", "extends": "TimerTask", "implements": null, "modifiers": ["private"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void run() {            float[] transform = new float[16];            switch (percentageType) {                case 1:                    //\u7ed9\u4e88x\u53d8\u5316                    Matrix.setRotateM(transform, 0, 360 * percentage / 100, 1.0f, 0, 0.0f);                    break;                case 2:                    //\u7ed9\u4e88y\u53d8\u5316                    Matrix.setRotateM(transform, 0, 360 * percentage / 100, 0.0f, 1.0f, 0.0f);                    break;                case 3:                    //\u7ed9\u4e88z\u53d8\u5316                    Matrix.setRotateM(transform, 0, 360 * percentage / 100, 0.0f, 0, 1.0f);                    break;                case 4:                    Matrix.setRotateM(transform, 0, 360, 0.0f, 0, 1.0f);                    break;            }            //\u8bbe\u7f6e\u6e32\u67d3transform            detailPlayer.setMatrixGL(transform);            percentage++;            if (percentage > 100) {                percentage = 1;            }        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/DetailFilterActivity.java", "stars": "2", "class": {"name": "TaskLocal", "extends": "TimerTask", "implements": null, "modifiers": ["private"]}}, {"method_name": "service", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": ["ServletException", "IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void service(HttpServletRequest request,HttpServletResponse response) throws ServletException,IOException\t{\t\tPrintWriter out=response.getWriter();\t\tresponse.setContentType(\"text/html\");\t\tString name=request.getParameter(\"NAME\");\t\tString pwd=request.getParameter(\"password\");\t\ttry\t\t{\t\t\tClass.forName(\"oracle.jdbc.driver.OracleDriver\");\t\t\tConnection con=DriverManager.getConnection(\"jdbc:oracle:thin:@localhost:1521:orcl\",\"scott\",\"tiger\");\t\t\tStatement st=con.createStatement();\t\t\tResultSet rs=st.executeQuery(\"select * from JavaQuiz\");\t\t\tint c=0;\t\t\twhile(rs.next())\t\t\t{\t\t\t\tif(rs.getString(1).equals(name) && rs.getString(4).equals(pwd))\t\t\t\t{c=1;\t\t\t\tbreak;\t\t\t\t}\t\t\t}\t\t\tst.close();\t\t\tcon.close();\t\t\tout.print(\"<head><style>\");\t\t\tout.print(\"body{padding:0%;margin:0%;}\");\t\t\tout.print(\".box form h1{padding:0%;margin:0%;}\");\t\t\tout.print(\".next{background-color:green;color:white;width:10%;font-size:15px;border-radius:35%;padding:10px;margin:2% 19%;}\");\t\t\tout.print(\"form{padding:0%;margin:0%;}\");\t\t\tout.print(\".image{padding:0%;border-radius:15%;}\");\t\t\tout.print(\".box{background-color:pink;color:white;margin:5%;padding:5%;border-radius:15%;}\");\t\t\tout.print(\".inst h2{color:green;}\");\t\t\tout.print(\".inst h3{padding:0%;margin:0%;}\");\t\t\tout.print(\".inst{width:70%;padding-left:30%;}\");\t\t\tout.print(\"</style></head>\");\t\t\tif(c==1)\t\t\t{\t\t\t\tout.print(\"<body>\");\t\t\t\tout.print(\"<div class=\\\"box\\\">\");\t\t\t\tout.print(\"<form action=quiz.com method=post>\");\t\t\t\tout.print(\"<div class=\\\"image\\\"><img src=\\\"img.jfif\\\" width=\\\"100%\\\" height=\\\"30%\\\"></div>\");\t\t\t\tout.print(\"<h1 align=center>ExQuizMe</h1><br>\");\t\t\t\tout.print(\"<h1 align=center>Quiz On Java</h1><br>\");\t\t\t\tout.print(\"<h1 align=center>=====================</h1><br><br>\");\t\t\t\tout.print(\"<div class=\\\"inst\\\">\");\t\t\t\tout.print(\"<h2>Read the following instructions before proceeding</h2><br>\");\t\t\t\tout.print(\"<h3>1. This test consists of 10 questions on java.</h3><br>\");\t\t\t\tout.print(\"<h3>2. Each question carries 1 mark.</h3><br>\");\t\t\t\tout.print(\"<h3>3. Questions are of multiple choice type</h3><br>\");\t\t\t\tout.print(\"<input type=submit value=\\\"Start Quiz\\\" class=next>\");\t\t\t\tout.print(\"</div>\");\t\t\t\tout.print(\"</form>\");\t\t\t\tout.print(\"</div>\");\t\t\t\tout.print(\"</body>\");  \t\t\t}\t\t\telse\t\t\t{\t\t\t\tout.print(\"<body bgcolor=pink text=white>\");\t\t\t\tout.print(\"<form action=welcome.html method=post>\");\t\t\t\tout.print(\"<h2 align=center>LOGIN..!!</h2>\");\t\t\t\tout.print(\"<hr><br></br>\");\t\t\t\tout.print(\"<h2 align=center>Authentication Failed...Please re-enter your details!!....</h2>\");\t\t\t\tout.print(\"<table align=center>\");\t\t\t\tout.print(\"<tr><td><input type=submit value=Back class=next></td></tr>\");\t\t\t\tout.print(\"</table></form></body>\");\t\t\t}\t\t\t\t}\t\tcatch(SQLException | ClassNotFoundException e)\t\t{\t\t\tout.print(\"<body bgcolor=pink text=white>\");\t\t\tout.print(\"<form action=welcome.html method=post>\");\t\t\tout.print(\"<h2 align=center>LOGIN..!!</h2>\");\t\t\tout.print(\"<hr><br></br>\");\t\t\tout.print(\"<h2 align=center>Authentication Failed...Please re-enter your details!!\"+e+\"....</h2>\");\t\t\tout.print(\"<table align=center>\");\t\t\tout.print(\"<tr><td><input type=submit value=Back class=next></td></tr>\");\t\t\tout.print(\"</table></form></body>\");\t\t}\t\tout.close();\t}", "url": "https://raw.githubusercontent.com/SShivani/Online-Quiz-Project/master/WEB-INF/classes/InstructionServlet.java", "stars": "2", "class": {"name": "InstructionServlet", "extends": "HttpServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPullToRefreshScrollDirection", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "Orientation", "snippet": "\tpublic final Orientation getPullToRefreshScrollDirection() {\t\treturn Orientation.VERTICAL;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshListView.java", "stars": "74", "class": {"name": "PullToRefreshListView", "extends": "PullToRefreshAdapterViewBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "onRefreshing", "params": ["boolean"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void onRefreshing(final boolean doScroll) {\t\t/**\t\t * If we're not showing the Refreshing view, or the list is empty, the\t\t * the header/footer views won't show so we use the normal method.\t\t */\t\tListAdapter adapter = mRefreshableView.getAdapter();\t\tif (!mListViewExtrasEnabled || !getShowViewWhileRefreshing() || null == adapter || adapter.isEmpty()) {\t\t\tsuper.onRefreshing(doScroll);\t\t\treturn;\t\t}\t\tsuper.onRefreshing(false);\t\tfinal LoadingLayout origLoadingView, listViewLoadingView, oppositeListViewLoadingView;\t\tfinal int selection, scrollToY;\t\tswitch (getCurrentMode()) {\t\t\tcase MANUAL_REFRESH_ONLY:\t\t\tcase PULL_FROM_END:\t\t\t\torigLoadingView = getFooterLayout();\t\t\t\tlistViewLoadingView = mFooterLoadingView;\t\t\t\toppositeListViewLoadingView = mHeaderLoadingView;\t\t\t\tselection = mRefreshableView.getCount() - 1;\t\t\t\tscrollToY = getScrollY() - getFooterSize();\t\t\t\tbreak;\t\t\tcase PULL_FROM_START:\t\t\tdefault:\t\t\t\torigLoadingView = getHeaderLayout();\t\t\t\tlistViewLoadingView = mHeaderLoadingView;\t\t\t\toppositeListViewLoadingView = mFooterLoadingView;\t\t\t\tselection = 0;\t\t\t\tscrollToY = getScrollY() + getHeaderSize();\t\t\t\tbreak;\t\t}\t\t// Hide our original Loading View\t\torigLoadingView.reset();\t\torigLoadingView.hideAllViews();\t\t// Make sure the opposite end is hidden too\t\toppositeListViewLoadingView.setVisibility(View.GONE);\t\t// Show the ListView Loading View and set it to refresh.\t\tlistViewLoadingView.setVisibility(View.VISIBLE);\t\tlistViewLoadingView.refreshing();\t\tif (doScroll) {\t\t\t// We need to disable the automatic visibility changes for now\t\t\tdisableLoadingLayoutVisibilityChanges();\t\t\t// We scroll slightly so that the ListView's header/footer is at the\t\t\t// same Y position as our normal header/footer\t\t\tsetHeaderScroll(scrollToY);\t\t\t// Make sure the ListView is scrolled to show the loading\t\t\t// header/footer\t\t\tmRefreshableView.setSelection(selection);\t\t\t// Smooth scroll as normal\t\t\tsmoothScrollTo(0);\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshListView.java", "stars": "74", "class": {"name": "PullToRefreshListView", "extends": "PullToRefreshAdapterViewBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "onReset", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void onReset() {\t\t/**\t\t * If the extras are not enabled, just call up to super and return.\t\t */\t\tif (!mListViewExtrasEnabled) {\t\t\tsuper.onReset();\t\t\treturn;\t\t}\t\tfinal LoadingLayout originalLoadingLayout, listViewLoadingLayout;\t\tfinal int scrollToHeight, selection;\t\tfinal boolean scrollLvToEdge;\t\tswitch (getCurrentMode()) {\t\t\tcase MANUAL_REFRESH_ONLY:\t\t\tcase PULL_FROM_END:\t\t\t\toriginalLoadingLayout = getFooterLayout();\t\t\t\tlistViewLoadingLayout = mFooterLoadingView;\t\t\t\tselection = mRefreshableView.getCount() - 1;\t\t\t\tscrollToHeight = getFooterSize();\t\t\t\tscrollLvToEdge = Math.abs(mRefreshableView.getLastVisiblePosition() - selection) <= 1;\t\t\t\tbreak;\t\t\tcase PULL_FROM_START:\t\t\tdefault:\t\t\t\toriginalLoadingLayout = getHeaderLayout();\t\t\t\tlistViewLoadingLayout = mHeaderLoadingView;\t\t\t\tscrollToHeight = -getHeaderSize();\t\t\t\tselection = 0;\t\t\t\tscrollLvToEdge = Math.abs(mRefreshableView.getFirstVisiblePosition() - selection) <= 1;\t\t\t\tbreak;\t\t}\t\t// If the ListView header loading layout is showing, then we need to\t\t// flip so that the original one is showing instead\t\tif (listViewLoadingLayout.getVisibility() == View.VISIBLE) {\t\t\t// Set our Original View to Visible\t\t\toriginalLoadingLayout.showInvisibleViews();\t\t\t// Hide the ListView Header/Footer\t\t\tlistViewLoadingLayout.setVisibility(View.GONE);\t\t\t/**\t\t\t * Scroll so the View is at the same Y as the ListView\t\t\t * header/footer, but only scroll if: we've pulled to refresh, it's\t\t\t * positioned correctly\t\t\t */\t\t\tif (scrollLvToEdge && getState() != State.MANUAL_REFRESHING) {\t\t\t\tmRefreshableView.setSelection(selection);\t\t\t\tsetHeaderScroll(scrollToHeight);\t\t\t}\t\t}\t\t// Finally, call up to super\t\tsuper.onReset();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshListView.java", "stars": "74", "class": {"name": "PullToRefreshListView", "extends": "PullToRefreshAdapterViewBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "createLoadingLayoutProxy", "params": ["boolean", "boolean"], "throws": null, "modifiers": ["protected"], "return_type": "LoadingLayoutProxy", "snippet": "\tprotected LoadingLayoutProxy createLoadingLayoutProxy(final boolean includeStart, final boolean includeEnd) {\t\tLoadingLayoutProxy proxy = super.createLoadingLayoutProxy(includeStart, includeEnd);\t\tif (mListViewExtrasEnabled) {\t\t\tfinal Mode mode = getMode();\t\t\tif (includeStart && mode.showHeaderLoadingLayout()) {\t\t\t\tproxy.addLayout(mHeaderLoadingView);\t\t\t}\t\t\tif (includeEnd && mode.showFooterLoadingLayout()) {\t\t\t\tproxy.addLayout(mFooterLoadingView);\t\t\t}\t\t}\t\treturn proxy;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshListView.java", "stars": "74", "class": {"name": "PullToRefreshListView", "extends": "PullToRefreshAdapterViewBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "createListView", "params": ["Context", "AttributeSet"], "throws": null, "modifiers": ["protected"], "return_type": "ListView", "snippet": "\tprotected ListView createListView(Context context, AttributeSet attrs) {\t\tfinal ListView lv;\t\tif (VERSION.SDK_INT >= VERSION_CODES.GINGERBREAD) {\t\t\tlv = new InternalListViewSDK9(context, attrs);\t\t} else {\t\t\tlv = new InternalListView(context, attrs);\t\t}\t\treturn lv;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshListView.java", "stars": "74", "class": {"name": "PullToRefreshListView", "extends": "PullToRefreshAdapterViewBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "createRefreshableView", "params": ["Context", "AttributeSet"], "throws": null, "modifiers": ["protected"], "return_type": "ListView", "snippet": "\tprotected ListView createRefreshableView(Context context, AttributeSet attrs) {\t\tListView lv = createListView(context, attrs);\t\t// Set it to this so it can be used in ListActivity/ListFragment\t\tlv.setId(android.R.id.list);\t\treturn lv;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshListView.java", "stars": "74", "class": {"name": "PullToRefreshListView", "extends": "PullToRefreshAdapterViewBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleStyledAttributes", "params": ["TypedArray"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void handleStyledAttributes(TypedArray a) {\t\tsuper.handleStyledAttributes(a);\t\tmListViewExtrasEnabled = a.getBoolean(R.styleable.PullToRefresh_ptrListViewExtrasEnabled, true);\t\tif (mListViewExtrasEnabled) {\t\t\tfinal FrameLayout.LayoutParams lp = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT,\t\t\t\t\tFrameLayout.LayoutParams.WRAP_CONTENT, Gravity.CENTER_HORIZONTAL);\t\t\t// Create Loading Views ready for use later\t\t\tFrameLayout frame = new FrameLayout(getContext());\t\t\tmHeaderLoadingView = createLoadingLayout(getContext(), Mode.PULL_FROM_START, a);\t\t\tmHeaderLoadingView.setVisibility(View.GONE);\t\t\tframe.addView(mHeaderLoadingView, lp);\t\t\tmRefreshableView.addHeaderView(frame, null, false);\t\t\tmLvFooterLoadingFrame = new FrameLayout(getContext());\t\t\tmFooterLoadingView = createLoadingLayout(getContext(), Mode.PULL_FROM_END, a);\t\t\tmFooterLoadingView.setVisibility(View.GONE);\t\t\tmLvFooterLoadingFrame.addView(mFooterLoadingView, lp);\t\t\t/**\t\t\t * If the value for Scrolling While Refreshing hasn't been\t\t\t * explicitly set via XML, enable Scrolling While Refreshing.\t\t\t */\t\t\tif (!a.hasValue(R.styleable.PullToRefresh_ptrScrollingWhileRefreshingEnabled)) {\t\t\t\tsetScrollingWhileRefreshingEnabled(true);\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshListView.java", "stars": "74", "class": {"name": "PullToRefreshListView", "extends": "PullToRefreshAdapterViewBase", "implements": null, "modifiers": ["public"]}}, {"method_name": "overScrollBy", "params": ["int", "int", "int", "int", "int", "int", "int", "int", "boolean"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "\t\tprotected boolean overScrollBy(int deltaX, int deltaY, int scrollX, int scrollY, int scrollRangeX,\t\t\t\tint scrollRangeY, int maxOverScrollX, int maxOverScrollY, boolean isTouchEvent) {\t\t\tfinal boolean returnValue = super.overScrollBy(deltaX, deltaY, scrollX, scrollY, scrollRangeX,\t\t\t\t\tscrollRangeY, maxOverScrollX, maxOverScrollY, isTouchEvent);\t\t\t// Does all of the hard work...\t\t\tOverscrollHelper.overScrollBy(PullToRefreshListView.this, deltaX, scrollX, deltaY, scrollY, isTouchEvent);\t\t\treturn returnValue;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshListView.java", "stars": "74", "class": {"name": "InternalListViewSDK9", "extends": "InternalListView", "implements": null, "modifiers": ["final"]}}, {"method_name": "dispatchDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\t\tprotected void dispatchDraw(Canvas canvas) {\t\t\t/**\t\t\t * This is a bit hacky, but Samsung's ListView has got a bug in it\t\t\t * when using Header/Footer Views and the list is empty. This masks\t\t\t * the issue so that it doesn't cause an FC. See Issue #66.\t\t\t */\t\t\ttry {\t\t\t\tsuper.dispatchDraw(canvas);\t\t\t} catch (IndexOutOfBoundsException e) {\t\t\t\te.printStackTrace();\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshListView.java", "stars": "74", "class": {"name": "InternalListView", "extends": "ListView", "implements": ["EmptyViewMethodAccessor"], "modifiers": ["protected"]}}, {"method_name": "dispatchTouchEvent", "params": ["MotionEvent"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean dispatchTouchEvent(MotionEvent ev) {\t\t\t/**\t\t\t * This is a bit hacky, but Samsung's ListView has got a bug in it\t\t\t * when using Header/Footer Views and the list is empty. This masks\t\t\t * the issue so that it doesn't cause an FC. See Issue #66.\t\t\t */\t\t\ttry {\t\t\t\treturn super.dispatchTouchEvent(ev);\t\t\t} catch (IndexOutOfBoundsException e) {\t\t\t\te.printStackTrace();\t\t\t\treturn false;\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshListView.java", "stars": "74", "class": {"name": "InternalListView", "extends": "ListView", "implements": ["EmptyViewMethodAccessor"], "modifiers": ["protected"]}}, {"method_name": "setAdapter", "params": ["ListAdapter"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void setAdapter(ListAdapter adapter) {\t\t\t// Add the Footer View at the last possible moment\t\t\tif (null != mLvFooterLoadingFrame && !mAddedLvFooter) {\t\t\t\taddFooterView(mLvFooterLoadingFrame, null, false);\t\t\t\tmAddedLvFooter = true;\t\t\t}\t\t\tsuper.setAdapter(adapter);\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshListView.java", "stars": "74", "class": {"name": "InternalListView", "extends": "ListView", "implements": ["EmptyViewMethodAccessor"], "modifiers": ["protected"]}}, {"method_name": "setEmptyView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void setEmptyView(View emptyView) {\t\t\tPullToRefreshListView.this.setEmptyView(emptyView);\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshListView.java", "stars": "74", "class": {"name": "InternalListView", "extends": "ListView", "implements": ["EmptyViewMethodAccessor"], "modifiers": ["protected"]}}, {"method_name": "setEmptyViewInternal", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void setEmptyViewInternal(View emptyView) {\t\t\tsuper.setEmptyView(emptyView);\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/PullToRefreshListView.java", "stars": "74", "class": {"name": "InternalListView", "extends": "ListView", "implements": ["EmptyViewMethodAccessor"], "modifiers": ["protected"]}}, {"method_name": "concurrentAccess", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void concurrentAccess() throws Exception {    class DataClass {      @SuppressWarnings(\"unused\")      private int id;    }    int run = 1000;    Map<String, Object> context = new HashMap<>();    List<Future<Object>> futures = new ArrayList<>();    context.put(\"data\", new DataClass());    ExecutorService executor = Executors.newCachedThreadPool();    IntStream.range(0, run).forEach(i -> {      futures.add(executor.submit(() -> {        return OgnlCache.getValue(\"data.id\", context);      }));    });    for (int i = 0; i < run; i++) {      assertNotNull(futures.get(i).get());    }    executor.shutdown();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/scripting/xmltags/OgnlCacheTest.java", "stars": "15", "class": {"name": "OgnlCacheTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "formatListForPopcorn", "params": ["ArrayList<Media>", "MediaProvider", "SubsProvider"], "throws": null, "modifiers": ["public"], "return_type": "ArrayList<Media>", "snippet": "    public ArrayList<Media> formatListForPopcorn(ArrayList<Media> existingList, MediaProvider mediaProvider, SubsProvider subsProvider) {        for (Movie item : responseItems) {            butter.droid.base.providers.media.models.Movie movie = new butter.droid.base.providers.media.models.Movie();            movie.videoId = item.getImdbId();            movie.imdbId = movie.videoId;            movie.title = item.getTitle();            movie.year = item.getYear();            List<String> genres = item.getGenres();            movie.genre = \"\";            if (genres.size() > 0) {                StringBuilder stringBuilder = new StringBuilder();                for (String genre : genres) {                    if (stringBuilder.length() > 0) {                        stringBuilder.append(\", \");                    }                    stringBuilder.append(StringUtils.capWords(genre));                }                movie.genre = stringBuilder.toString();            }            movie.rating = Double.toString(item.getRating().getPercentage() / 10);            movie.trailer = item.getTrailer();            movie.runtime = item.getRuntime();            movie.synopsis = item.getSynopsis();            movie.certification = item.getCertification();            if (item.getImages().getPoster() != null && !item.getImages().getPoster().contains(\"images/posterholder.png\")) {                movie.image = item.getImages().getPoster();                movie.fullImage = item.getImages().getPoster().replace(\"w500\", \"w1280\");            }            if (item.getImages().getFanart() != null && !item.getImages().getFanart().contains(\"images/posterholder.png\")) {                movie.headerImage = item.getImages().getFanart().replace(\"w500\", \"original\");            }            if (item.getTorrents() != null) {                for (Map.Entry<String, Language> language : item.getTorrents().getLanguages().entrySet()) {                    Map<String, Media.Torrent> torrentMap = new HashMap<>();                    for (Map.Entry<String, Quality> torrentQuality : language.getValue().getQualities().entrySet()) {                        if (torrentQuality == null) continue;                        Media.Torrent torrent = new Media.Torrent(torrentQuality.getValue().getUrl(), torrentQuality.getValue().getSeeds(), torrentQuality.getValue().getPeers());                        torrentMap.put(torrentQuality.getKey(), torrent);                    }                    movie.torrents.put(language.getKey(), torrentMap);                }            }            existingList.add(movie);        }        return existingList;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/MovieResponse.java", "stars": "4", "class": {"name": "MovieResponse", "extends": "Response", "implements": null, "modifiers": ["public"]}}, {"method_name": "getShader", "params": ["GLSurfaceView"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getShader(GLSurfaceView mGlSurfaceView) {        float weights[] = {805.0f / 2048.0f, 715.0f / 2048.0f,                557.0f / 2048.0f, 1575.0f / 2048.0f, 1405.0f / 2048.0f,                1097.0f / 2048.0f, 387.0f / 2048.0f, 344.0f / 2048.0f,                268.0f / 2048.0f};        String matrixString[] = new String[9];        matrixString[0] = \"  matrix[0][0]=\" + weights[0] + \";\\n\";        matrixString[1] = \"  matrix[0][1]=\" + weights[1] + \";\\n\";        matrixString[2] = \"  matrix[0][2]=\" + weights[2] + \";\\n\";        matrixString[3] = \"  matrix[1][0]=\" + weights[3] + \";\\n\";        matrixString[4] = \"  matrix[1][1]=\" + weights[4] + \";\\n\";        matrixString[5] = \"  matrix[1][2]=\" + weights[5] + \";\\n\";        matrixString[6] = \"  matrix[2][0]=\" + weights[6] + \";\\n\";        matrixString[7] = \"  matrix[2][1]=\" + weights[7] + \";\\n\";        matrixString[8] = \"  matrix[2][2]=\" + weights[8] + \";\\n\";        String shader = \"#extension GL_OES_EGL_image_external : require\\n\"                + \"precision mediump float;\\n\"                + \"uniform samplerExternalOES sTexture;\\n\" + \" mat3 matrix;\\n\"                + \"varying vec2 vTextureCoord;\\n\" + \"void main() {\\n\"                + matrixString[0] + matrixString[1] + matrixString[2]                + matrixString[3] + matrixString[4] + matrixString[5]                + matrixString[6] + matrixString[7] + matrixString[8]                + \"  vec4 color = texture2D(sTexture, vTextureCoord);\\n\"                + \"  vec3 new_color = min(matrix * color.rgb, 1.0);\\n\"                + \"  gl_FragColor = vec4(new_color.rgb, color.a);\\n\" + \"}\\n\";        return shader;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/effect/SepiaEffect.java", "stars": "2", "class": {"name": "SepiaEffect", "extends": null, "implements": ["ShaderInterface"], "modifiers": ["public"]}}, {"method_name": "initSipServer", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void initSipServer() {\t\tThread thread=new Thread(this);        thread.setDaemon(true);        thread.setName(\"sip server thread start\");        thread.start();\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/SipLayer.java", "stars": "29", "class": {"name": "SipLayer", "extends": null, "implements": ["SipListener", "Runnable"], "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void run() {\t\tSipFactory sipFactory = SipFactory.getInstance();\t\tsipFactory.setPathName(\"gov.nist\");\t\ttry {\t\t\theaderFactory = sipFactory.createHeaderFactory();\t\t\taddressFactory = sipFactory.createAddressFactory();\t\t\tmessageFactory = sipFactory.createMessageFactory();\t\t\tProperties properties = new Properties();\t\t\tproperties.setProperty(\"javax.sip.STACK_NAME\", \"GB28181_SIP\");\t\t\tproperties.setProperty(\"javax.sip.IP_ADDRESS\", sipConfig.getSipIp());\t\t\tproperties.setProperty(\"gov.nist.javax.sip.LOG_MESSAGE_CONTENT\", \"false\");\t\t\t/**\t\t\t * sip_server_log.log \u548c sip_debug_log.log public static final int TRACE_NONE =\t\t\t * 0; public static final int TRACE_MESSAGES = 16; public static final int\t\t\t * TRACE_EXCEPTION = 17; public static final int TRACE_DEBUG = 32;\t\t\t */\t\t\tproperties.setProperty(\"gov.nist.javax.sip.TRACE_LEVEL\", \"0\");\t\t\tproperties.setProperty(\"gov.nist.javax.sip.SERVER_LOG\", \"sip_server_log\");\t\t\tproperties.setProperty(\"gov.nist.javax.sip.DEBUG_LOG\", \"sip_debug_log\");\t\t\tsipStack = (SipStackImpl) sipFactory.createSipStack(properties);\t\t\tstartTcpListener();\t\t\tstartUdpListener();\t\t} catch (Exception e) {\t\t\tlogger.error(\"Sip Server \u542f\u52a8\u5931\u8d25\uff01 port {\" + sipConfig.getSipPort() + \"}\");\t\t\te.printStackTrace();\t\t}\t\tlogger.info(\"Sip Server \u542f\u52a8\u6210\u529f port {\" + sipConfig.getSipPort() + \"}\");\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/SipLayer.java", "stars": "29", "class": {"name": "SipLayer", "extends": null, "implements": ["SipListener", "Runnable"], "modifiers": ["public"]}}, {"method_name": "startTcpListener", "params": [], "throws": ["Exception"], "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void startTcpListener() throws Exception {\t\tListeningPoint tcpListeningPoint = sipStack.createListeningPoint(sipConfig.getSipIp(), sipConfig.getSipPort(), \"TCP\");\t\ttcpSipProvider = sipStack.createSipProvider(tcpListeningPoint);\t\ttcpSipProvider.addSipListener(this);\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/SipLayer.java", "stars": "29", "class": {"name": "SipLayer", "extends": null, "implements": ["SipListener", "Runnable"], "modifiers": ["public"]}}, {"method_name": "startUdpListener", "params": [], "throws": ["Exception"], "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void startUdpListener() throws Exception {\t\tListeningPoint udpListeningPoint = sipStack.createListeningPoint(sipConfig.getSipIp(), sipConfig.getSipPort(), \"UDP\");\t\tudpSipProvider = sipStack.createSipProvider(udpListeningPoint);\t\tudpSipProvider.addSipListener(this);\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/SipLayer.java", "stars": "29", "class": {"name": "SipLayer", "extends": null, "implements": ["SipListener", "Runnable"], "modifiers": ["public"]}}, {"method_name": "processRequest", "params": ["RequestEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void processRequest(RequestEvent evt) {\t\tISIPRequestProcessor processor = processorFactory.createRequestProcessor(evt);\t\tprocessor.process(evt, this, getServerTransaction(evt));\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/SipLayer.java", "stars": "29", "class": {"name": "SipLayer", "extends": null, "implements": ["SipListener", "Runnable"], "modifiers": ["public"]}}, {"method_name": "processResponse", "params": ["ResponseEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void processResponse(ResponseEvent evt) {\t\tResponse response = evt.getResponse();\t\tint status = response.getStatusCode();\t\tif ((status >= 200) && (status < 300)) { // Success!\t\t\tISIPResponseProcessor processor = processorFactory.createResponseProcessor(evt);\t\t\tprocessor.process(evt, this, sipConfig);\t\t} else {\t\t\tlogger.warn(\"\u63a5\u6536\u5230\u5931\u8d25\u7684response\u54cd\u5e94\uff01status\uff1a\" + status + \",message:\" + response.getContent().toString());\t\t}\t\t// trying\u4e0d\u4f1a\u56de\u590d\t\tif (status == Response.TRYING) {\t\t}\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/SipLayer.java", "stars": "29", "class": {"name": "SipLayer", "extends": null, "implements": ["SipListener", "Runnable"], "modifiers": ["public"]}}, {"method_name": "processTimeout", "params": ["TimeoutEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void processTimeout(TimeoutEvent timeoutEvent) {\t\t// TODO Auto-generated method stub\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/SipLayer.java", "stars": "29", "class": {"name": "SipLayer", "extends": null, "implements": ["SipListener", "Runnable"], "modifiers": ["public"]}}, {"method_name": "processIOException", "params": ["IOExceptionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void processIOException(IOExceptionEvent exceptionEvent) {\t\t// TODO Auto-generated method stub\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/SipLayer.java", "stars": "29", "class": {"name": "SipLayer", "extends": null, "implements": ["SipListener", "Runnable"], "modifiers": ["public"]}}, {"method_name": "processTransactionTerminated", "params": ["TransactionTerminatedEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void processTransactionTerminated(TransactionTerminatedEvent transactionTerminatedEvent) {\t\t// TODO Auto-generated method stub\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/SipLayer.java", "stars": "29", "class": {"name": "SipLayer", "extends": null, "implements": ["SipListener", "Runnable"], "modifiers": ["public"]}}, {"method_name": "processDialogTerminated", "params": ["DialogTerminatedEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void processDialogTerminated(DialogTerminatedEvent dialogTerminatedEvent) {\t\t// TODO Auto-generated method stub\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/SipLayer.java", "stars": "29", "class": {"name": "SipLayer", "extends": null, "implements": ["SipListener", "Runnable"], "modifiers": ["public"]}}, {"method_name": "getServerTransaction", "params": ["RequestEvent"], "throws": null, "modifiers": ["private"], "return_type": "ServerTransaction", "snippet": "\tprivate ServerTransaction getServerTransaction(RequestEvent evt) {\t\tRequest request = evt.getRequest();\t\tServerTransaction serverTransaction = evt.getServerTransaction();\t\t// \u5224\u65adTCP\u8fd8\u662fUDP\t\tboolean isTcp = false;\t\tViaHeader reqViaHeader = (ViaHeader) request.getHeader(ViaHeader.NAME);\t\tString transport = reqViaHeader.getTransport();\t\tif (transport.equals(\"TCP\")) {\t\t\tisTcp = true;\t\t}\t\tif (serverTransaction == null) {\t\t\ttry {\t\t\t\tif (isTcp) {\t\t\t\t\tserverTransaction = tcpSipProvider.getNewServerTransaction(request);\t\t\t\t} else {\t\t\t\t\tserverTransaction = udpSipProvider.getNewServerTransaction(request);\t\t\t\t}\t\t\t} catch (TransactionAlreadyExistsException e) {\t\t\t\te.printStackTrace();\t\t\t} catch (TransactionUnavailableException e) {\t\t\t\te.printStackTrace();\t\t\t}\t\t}\t\treturn serverTransaction;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/SipLayer.java", "stars": "29", "class": {"name": "SipLayer", "extends": null, "implements": ["SipListener", "Runnable"], "modifiers": ["public"]}}, {"method_name": "getAddressFactory", "params": [], "throws": null, "modifiers": ["public"], "return_type": "AddressFactory", "snippet": "\tpublic AddressFactory getAddressFactory() {\t\treturn addressFactory;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/SipLayer.java", "stars": "29", "class": {"name": "SipLayer", "extends": null, "implements": ["SipListener", "Runnable"], "modifiers": ["public"]}}, {"method_name": "getHeaderFactory", "params": [], "throws": null, "modifiers": ["public"], "return_type": "HeaderFactory", "snippet": "\tpublic HeaderFactory getHeaderFactory() {\t\treturn headerFactory;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/SipLayer.java", "stars": "29", "class": {"name": "SipLayer", "extends": null, "implements": ["SipListener", "Runnable"], "modifiers": ["public"]}}, {"method_name": "getMessageFactory", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MessageFactory", "snippet": "\tpublic MessageFactory getMessageFactory() {\t\treturn messageFactory;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/SipLayer.java", "stars": "29", "class": {"name": "SipLayer", "extends": null, "implements": ["SipListener", "Runnable"], "modifiers": ["public"]}}, {"method_name": "getTcpSipProvider", "params": [], "throws": null, "modifiers": ["public"], "return_type": "SipProvider", "snippet": "\tpublic SipProvider getTcpSipProvider() {\t\treturn tcpSipProvider;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/SipLayer.java", "stars": "29", "class": {"name": "SipLayer", "extends": null, "implements": ["SipListener", "Runnable"], "modifiers": ["public"]}}, {"method_name": "getUdpSipProvider", "params": [], "throws": null, "modifiers": ["public"], "return_type": "SipProvider", "snippet": "\tpublic SipProvider getUdpSipProvider() {\t\treturn udpSipProvider;\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/SipLayer.java", "stars": "29", "class": {"name": "SipLayer", "extends": null, "implements": ["SipListener", "Runnable"], "modifiers": ["public"]}}, {"method_name": "initContainer", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "PostgreSQLContainer<?>", "snippet": "  private static PostgreSQLContainer<?> initContainer() {    @SuppressWarnings(\"resource\")    PostgreSQLContainer<?> container = new PostgreSQLContainer<>().withDatabaseName(DB_NAME).withUsername(USERNAME)        .withPassword(PASSWORD);    container.start();    return container;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/testcontainers/PgContainer.java", "stars": "15", "class": {"name": "PgContainer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUnpooledDataSource", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "DataSource", "snippet": "  public static DataSource getUnpooledDataSource() {    return new UnpooledDataSource(PgContainer.DRIVER, INSTANCE.getJdbcUrl(), PgContainer.USERNAME,        PgContainer.PASSWORD);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/testcontainers/PgContainer.java", "stars": "15", "class": {"name": "PgContainer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onBind", "params": ["Intent"], "throws": null, "modifiers": ["public"], "return_type": "IBinder", "snippet": "    public IBinder onBind(Intent intent) {        return null;    }", "url": "https://raw.githubusercontent.com/dic1911/PseudoSpeedTest/master/app/src/main/java/moe/dic1911/test4speed/NetworkService.java", "stars": "4", "class": {"name": "NetworkService", "extends": "Service", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate() {        super.onCreate();        if (Build.VERSION.SDK_INT >= 26) {            NotificationChannel channel = new NotificationChannel(CHANNEL_ID,                    \"Default Notification Ch.\",                    NotificationManager.IMPORTANCE_MIN);            if (((NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE)).getNotificationChannels().size() == 0) {                ((NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE)).createNotificationChannel(channel);            }        }    }", "url": "https://raw.githubusercontent.com/dic1911/PseudoSpeedTest/master/app/src/main/java/moe/dic1911/test4speed/NetworkService.java", "stars": "4", "class": {"name": "NetworkService", "extends": "Service", "implements": null, "modifiers": ["public"]}}, {"method_name": "onStartCommand", "params": ["Intent", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int onStartCommand(Intent intent, int flags, int startId) {        super.onStartCommand(intent, flags, startId);        Toast.makeText(this, \"Service Started\", Toast.LENGTH_SHORT).show();        PendingIntent pi = PendingIntent.getActivity(this, 0, new Intent(this, MainActivity.class), PendingIntent.FLAG_UPDATE_CURRENT);        noti = new NotificationCompat.Builder(this, CHANNEL_ID)                .setOngoing(true)                .setContentTitle(getString(R.string.running_svc))                .setContentText(getString(R.string.running))                .setSmallIcon(R.drawable.ic_launcher_foreground)                .setLargeIcon(BitmapFactory.decodeResource(getResources(),R.drawable.ic_launcher_foreground))                .setContentIntent(pi)                .setDefaults(Notification.DEFAULT_SOUND).setVibrate(new long[]{0L})                .setVibrate(null)                .setChannelId(CHANNEL_ID)                .build();        //Start service, but different code for different android version        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {            startForeground(1, noti);        } else {            startService(new Intent(this, NetworkService.class));        }        AsyncTask.execute(new Runnable() {            @Override            public void run() {                //TODO: monitor activity + timer?                while(true) {                    try {                        NetworkUtils.pokeSpeedTest();                        Thread.currentThread().sleep(interval);                    } catch (InterruptedException e) {                        e.printStackTrace();                        break;                    }                }                stopSelf();            }        });        return START_NOT_STICKY;    }", "url": "https://raw.githubusercontent.com/dic1911/PseudoSpeedTest/master/app/src/main/java/moe/dic1911/test4speed/NetworkService.java", "stars": "4", "class": {"name": "NetworkService", "extends": "Service", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDestroy() {        super.onDestroy();        //Toast.makeText(this, \"Service Destroyed\", Toast.LENGTH_SHORT).show();    }", "url": "https://raw.githubusercontent.com/dic1911/PseudoSpeedTest/master/app/src/main/java/moe/dic1911/test4speed/NetworkService.java", "stars": "4", "class": {"name": "NetworkService", "extends": "Service", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemCount", "params": ["Container", "Item"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getItemCount(Container container, Item item) {        int itemCount = 0;        for (int i = 0; i < 45; ++i) {            if (container.getSlot(i).getHasStack()) {                final ItemStack is = container.getSlot(i).getStack();                if (is.getItem() == item) {                        itemCount += is.getCount();                }            }        }        return itemCount;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/InventoryUtil.java", "stars": "12", "class": {"name": "InventoryUtil", "extends": null, "implements": ["Util"], "modifiers": ["public"]}}, {"method_name": "getItemSlot", "params": ["Container", "Item"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getItemSlot(Container container, Item item) {        int slot = 0;        for (int i = 9; i < 45; ++i) {            if (container.getSlot(i).getHasStack()) {                ItemStack is = container.getSlot(i).getStack();                if (is.getItem() == item)                    slot = i;            }        }        return slot;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/InventoryUtil.java", "stars": "12", "class": {"name": "InventoryUtil", "extends": null, "implements": ["Util"], "modifiers": ["public"]}}, {"method_name": "getItemSlotInHotbar", "params": ["Item"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getItemSlotInHotbar(Item item) {        int slot = 0;        for (int i = 0; i < 9; i++) {                ItemStack is = mc.player.inventory.getStackInSlot(i);                if (is.getItem() == item) {                    slot = i;                    break;                }        }        return slot;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/InventoryUtil.java", "stars": "12", "class": {"name": "InventoryUtil", "extends": null, "implements": ["Util"], "modifiers": ["public"]}}, {"method_name": "swap", "params": ["int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void swap(int slot, int hotbarNum) {        mc.playerController.windowClick(mc.player.inventoryContainer.windowId, slot, 0, ClickType.PICKUP, mc.player);        mc.playerController.windowClick(mc.player.inventoryContainer.windowId, hotbarNum, 0, ClickType.PICKUP, mc.player);        mc.playerController.windowClick(mc.player.inventoryContainer.windowId, slot, 0, ClickType.PICKUP, mc.player);        mc.playerController.updateController();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/InventoryUtil.java", "stars": "12", "class": {"name": "InventoryUtil", "extends": null, "implements": ["Util"], "modifiers": ["public"]}}, {"method_name": "preHandle", "params": ["HttpServletRequest", "HttpServletResponse", "Object"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object o) throws Exception {        String uri = request.getRequestURI();        LOGGE.info(\"UserAgent: {}\", request.getHeader(USER_AGENT));        LOGGE.info(\"\u7528\u6237\u8bbf\u95ee\u5730\u5740: {}, \u6765\u8def\u5730\u5740: {}\", uri, IPKit.getIpAddrByRequest(request));        //\u8bf7\u6c42\u62e6\u622a\u5904\u7406        UserDomain user = TaleUtils.getLoginUser(request);        if (null == user) {            Integer uid = TaleUtils.getCookieUid(request);            if (null != uid) {                user = userService.getUserInfoById(uid);                request.getSession().setAttribute(WebConst.LOGIN_SESSION_KEY, user);            }        }        if (uri.startsWith(\"/admin\") && !uri.startsWith(\"/admin/login\") && null == user                && !uri.startsWith(\"/admin/css\") && !uri.startsWith(\"/admin/images\")                && !uri.startsWith(\"/admin/js\") && !uri.startsWith(\"/admin/plugins\")                && !uri.startsWith(\"/admin/editormd\")) {            response.sendRedirect(request.getContextPath() + \"/admin/login\");            return false;        }        //\u8bbe\u7f6eget\u8bf7\u6c42\u7684token        if (request.getMethod().equals(\"GET\")) {            String csrf_token = UUID.UU64();            // \u9ed8\u8ba4\u5b58\u50a830\u5206\u949f            cache.hset(Types.CSRF_TOKEN.getType(), csrf_token, uri, 30 * 60);            request.setAttribute(\"_csrf_token\", csrf_token);        }        return true;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/interceptor/BaseInterceptor.java", "stars": "2", "class": {"name": "BaseInterceptor", "extends": null, "implements": ["HandlerInterceptor"], "modifiers": ["public"]}}, {"method_name": "postHandle", "params": ["HttpServletRequest", "HttpServletResponse", "Object", "ModelAndView"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void postHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView) throws Exception {        OptionsDomain ov = optionService.getOptionByName(\"site_record\");        /**         * /\u4e00\u4e9b\u5de5\u5177\u7c7b\u548c\u516c\u5171\u65b9\u6cd5         * */        httpServletRequest.setAttribute(\"commons\", commons);        httpServletRequest.setAttribute(\"option\", ov);        httpServletRequest.setAttribute(\"adminCommons\", adminCommons);        initSiteConfig(httpServletRequest);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/interceptor/BaseInterceptor.java", "stars": "2", "class": {"name": "BaseInterceptor", "extends": null, "implements": ["HandlerInterceptor"], "modifiers": ["public"]}}, {"method_name": "initSiteConfig", "params": ["HttpServletRequest"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initSiteConfig(HttpServletRequest request) {        if (WebConst.initConfig.isEmpty()){            List<OptionsDomain> options = optionService.getOptions();            Map<String, String> querys = new HashMap<>();            options.forEach(option -> {                querys.put(option.getName(), option.getValue());            });            WebConst.initConfig = querys;        }    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/interceptor/BaseInterceptor.java", "stars": "2", "class": {"name": "BaseInterceptor", "extends": null, "implements": ["HandlerInterceptor"], "modifiers": ["public"]}}, {"method_name": "afterCompletion", "params": ["HttpServletRequest", "HttpServletResponse", "Object", "Exception"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void afterCompletion(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) throws Exception {    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/interceptor/BaseInterceptor.java", "stars": "2", "class": {"name": "BaseInterceptor", "extends": null, "implements": ["HandlerInterceptor"], "modifiers": ["public"]}}, {"method_name": "getThrowable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Throwable", "snippet": "    public Throwable getThrowable() {        return throwable;    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/util/ThrowableFailureEvent.java", "stars": "7", "class": {"name": "ThrowableFailureEvent", "extends": null, "implements": ["HasExecutionScope"], "modifiers": ["public"]}}, {"method_name": "isSuppressErrorUi", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isSuppressErrorUi() {        return suppressErrorUi;    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/util/ThrowableFailureEvent.java", "stars": "7", "class": {"name": "ThrowableFailureEvent", "extends": null, "implements": ["HasExecutionScope"], "modifiers": ["public"]}}, {"method_name": "getExecutionScope", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object getExecutionScope() {        return executionContext;    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/util/ThrowableFailureEvent.java", "stars": "7", "class": {"name": "ThrowableFailureEvent", "extends": null, "implements": ["HasExecutionScope"], "modifiers": ["public"]}}, {"method_name": "setExecutionScope", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setExecutionScope(Object executionContext) {        this.executionContext = executionContext;    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/util/ThrowableFailureEvent.java", "stars": "7", "class": {"name": "ThrowableFailureEvent", "extends": null, "implements": ["HasExecutionScope"], "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getId() {\t\treturn id;\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/leiTest/Customer.java", "stars": "2", "class": {"name": "Customer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setId(int id) {\t\tthis.id = id;\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/leiTest/Customer.java", "stars": "2", "class": {"name": "Customer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getName() {\t\treturn name;\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/leiTest/Customer.java", "stars": "2", "class": {"name": "Customer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setName(String name) {\t\tthis.name = name;\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/leiTest/Customer.java", "stars": "2", "class": {"name": "Customer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAge", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getAge() {\t\treturn age;\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/leiTest/Customer.java", "stars": "2", "class": {"name": "Customer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAge", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setAge(int age) {\t\tthis.age = age;\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/leiTest/Customer.java", "stars": "2", "class": {"name": "Customer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAddr", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getAddr() {\t\treturn addr;\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/leiTest/Customer.java", "stars": "2", "class": {"name": "Customer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAddr", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setAddr(String addr) {\t\tthis.addr = addr;\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/leiTest/Customer.java", "stars": "2", "class": {"name": "Customer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/StructuredItemsViewRenderer_3.java", "stars": "2", "class": {"name": "StructuredItemsViewRenderer_3", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/StructuredItemsViewRenderer_3.java", "stars": "2", "class": {"name": "StructuredItemsViewRenderer_3", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "authenticationManagerBean", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "AuthenticationManager", "snippet": "\tpublic AuthenticationManager authenticationManagerBean() throws Exception {\t\treturn super.authenticationManagerBean();\t}", "url": "https://raw.githubusercontent.com/bruinli28/stockmarket/master/cloud-auth2-service/src/main/java/com/iiht/stock/auth/security/WebSecurityConfigurer.java", "stars": "2", "class": {"name": "WebSecurityConfigurer", "extends": "WebSecurityConfigurerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "userDetailsServiceBean", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "UserDetailsService", "snippet": "\tpublic UserDetailsService userDetailsServiceBean() throws Exception {\t\treturn super.userDetailsServiceBean();\t}", "url": "https://raw.githubusercontent.com/bruinli28/stockmarket/master/cloud-auth2-service/src/main/java/com/iiht/stock/auth/security/WebSecurityConfigurer.java", "stars": "2", "class": {"name": "WebSecurityConfigurer", "extends": "WebSecurityConfigurerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "configure", "params": ["AuthenticationManagerBuilder"], "throws": ["Exception"], "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void configure(AuthenticationManagerBuilder auth) throws Exception {\t\tauth.inMemoryAuthentication().withUser(\"user\").password(\"user\").roles(\"USER\")\t\t\t.and().withUser(\"admin\").password(\"admin\").roles(\"USER\", \"ADMIN\");\t}", "url": "https://raw.githubusercontent.com/bruinli28/stockmarket/master/cloud-auth2-service/src/main/java/com/iiht/stock/auth/security/WebSecurityConfigurer.java", "stars": "2", "class": {"name": "WebSecurityConfigurer", "extends": "WebSecurityConfigurerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        // \u8bbe\u7f6e\u4e00\u4e2aexit transition        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {            getWindow().requestFeature(Window.FEATURE_CONTENT_TRANSITIONS);            getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);            getWindow().setEnterTransition(new Explode());            getWindow().setExitTransition(new Explode());        }        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_list_video);        ButterKnife.bind(this);        listNormalAdapter = new ListNormalAdapter(this);        videoList.setAdapter(listNormalAdapter);        videoList.setOnScrollListener(new AbsListView.OnScrollListener() {            @Override            public void onScrollStateChanged(AbsListView view, int scrollState) {            }            @Override            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {                int lastVisibleItem = firstVisibleItem + visibleItemCount;                //\u5927\u4e8e0\u8bf4\u660e\u6709\u64ad\u653e                if (GSYVideoManager.instance().getPlayPosition() >= 0) {                    //\u5f53\u524d\u64ad\u653e\u7684\u4f4d\u7f6e                    int position = GSYVideoManager.instance().getPlayPosition();                    //\u5bf9\u5e94\u7684\u64ad\u653e\u5217\u8868TAG                    if (GSYVideoManager.instance().getPlayTag().equals(ListNormalAdapter.TAG)                            && (position < firstVisibleItem || position > lastVisibleItem)) {                        if(GSYVideoManager.isFullState(ListVideoActivity.this)) {                            return;                        }                        //\u5982\u679c\u6ed1\u51fa\u53bb\u4e86\u4e0a\u9762\u548c\u4e0b\u9762\u5c31\u662f\u5426\uff0c\u548c\u4eca\u65e5\u5934\u6761\u4e00\u6837                        GSYVideoManager.releaseAllVideos();                        listNormalAdapter.notifyDataSetChanged();                    }                }            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/ListVideoActivity.java", "stars": "2", "class": {"name": "ListVideoActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBackPressed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBackPressed() {        //\u4e3a\u4e86\u652f\u6301\u91cd\u529b\u65cb\u8f6c        onBackPressAdapter();        if (GSYVideoManager.backFromWindowFull(this)) {            return;        }        super.onBackPressed();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/ListVideoActivity.java", "stars": "2", "class": {"name": "ListVideoActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onPause() {        super.onPause();        GSYVideoManager.onPause();        isPause = true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/ListVideoActivity.java", "stars": "2", "class": {"name": "ListVideoActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onResume() {        super.onResume();        GSYVideoManager.onResume();        isPause = false;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/ListVideoActivity.java", "stars": "2", "class": {"name": "ListVideoActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDestroy() {        super.onDestroy();        GSYVideoManager.releaseAllVideos();        if (listNormalAdapter != null) {            listNormalAdapter.onDestroy();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/ListVideoActivity.java", "stars": "2", "class": {"name": "ListVideoActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onConfigurationChanged", "params": ["Configuration"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onConfigurationChanged(Configuration newConfig) {        super.onConfigurationChanged(newConfig);        if (listNormalAdapter != null && listNormalAdapter.getListNeedAutoLand() && !isPause) {            listNormalAdapter.onConfigurationChanged(this, newConfig);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/ListVideoActivity.java", "stars": "2", "class": {"name": "ListVideoActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBackPressAdapter", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void onBackPressAdapter() {        //\u4e3a\u4e86\u652f\u6301\u91cd\u529b\u65cb\u8f6c        if (listNormalAdapter != null && listNormalAdapter.getListNeedAutoLand()) {            listNormalAdapter.onBackPressed();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/ListVideoActivity.java", "stars": "2", "class": {"name": "ListVideoActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tSpringApplication.run(QuickbuyApplication.class, args);\t}", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/QuickbuyApplication.java", "stars": "1", "class": {"name": "QuickbuyApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getClient", "params": ["Map<String,Object>", "File", "String"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "Hive", "snippet": "    public static Hive getClient(Map<String, Object> params,                                             File kerberos, String hivePrinciple) throws Exception {        final HiveConf conf = new HiveConf();        conf.setVar(HiveConf.ConfVars.METASTOREURIS, String.valueOf(params.get(PARAM_META_STORE_PATH)));        conf.setVar(HiveConf.ConfVars.METASTORE_USE_THRIFT_SASL, \"true\");        conf.setVar(HiveConf.ConfVars.METASTORE_KERBEROS_PRINCIPAL, hivePrinciple);        conf.set(\"hadoop.security.authentication\", \"kerberos\");        conf.setBoolean(String.format(\"fs.%s.impl.disable.cache\", URI.create(conf.get(FS_DEFAULT_NAME_KEY, \"\")).getScheme()), true);        String principle = String.valueOf(params.get(PARAM_KERBEROS_FILE_PRINCILE));        principle = principle.substring(0, principle.indexOf(\"@\"));        UserGroupInformation ugi = UserGroupInformationWrapper.loginUserFromKeytab(conf,                principle, kerberos.getPath());        return getHive(ugi, conf);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/conns/HiveMeta.java", "stars": "23", "class": {"name": "HiveMeta", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getClient", "params": ["Map<String,Object>", "String"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "Hive", "snippet": "    public static Hive getClient(Map<String, Object> params, String userName) throws Exception{        final HiveConf conf = new HiveConf();        if(StringUtils.isBlank(userName)){            userName = System.getProperty(\"user.name\", \"\");        }        conf.setVar(HiveConf.ConfVars.METASTOREURIS, String.valueOf(params.get(PARAM_META_STORE_PATH)));        conf.setBoolean(String.format(\"fs.%s.impl.disable.cache\", URI.create(conf.get(FS_DEFAULT_NAME_KEY, \"\")).getScheme()), true);        UserGroupInformation ugi = UserGroupInformationWrapper.createProxyUser(conf, userName);        return getHive(ugi, conf);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/conns/HiveMeta.java", "stars": "23", "class": {"name": "HiveMeta", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHive", "params": ["UserGroupInformation", "HiveConf"], "throws": ["IOException", "InterruptedException"], "modifiers": ["private", "static"], "return_type": "Hive", "snippet": "    private static Hive getHive(UserGroupInformation ugi,  HiveConf conf) throws IOException, InterruptedException {        return ugi.doAs((PrivilegedExceptionAction<Hive>) () -> {            Hive hive = Hive.get(conf);            hive.getMSC();            //to remove thread Local vars            Hive.set(null);            return hive;        });    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/conns/HiveMeta.java", "stars": "23", "class": {"name": "HiveMeta", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addLikeMessage", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addLikeMessage(int sent_id,int accept_id,int article_id) {        JdbcTemplate.update(SqlMappers.MessageSqlMapper.get(\"addLikeMessage\"),sent_id,accept_id,article_id,new Date(),1);    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/MessageDaoImpl.java", "stars": "10", "class": {"name": "MessageDaoImpl", "extends": "BaseDaoImpl", "implements": ["MessageDao"], "modifiers": ["public"]}}, {"method_name": "addCommentMessage", "params": ["int", "int", "int", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addCommentMessage(int send_id, int accept_id, int article_id, String content) {        JdbcTemplate.update(SqlMappers.MessageSqlMapper.get(\"addCommentMessage\"),send_id,accept_id,article_id,content,new Date(),2);    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/MessageDaoImpl.java", "stars": "10", "class": {"name": "MessageDaoImpl", "extends": "BaseDaoImpl", "implements": ["MessageDao"], "modifiers": ["public"]}}, {"method_name": "addOtherMessage", "params": ["int", "int", "int", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addOtherMessage(int send_id, int accept_id, int article_id, String content) {        JdbcTemplate.update(SqlMappers.MessageSqlMapper.get(\"addCommentMessage\"),send_id,accept_id,article_id,content,new Date(),3);    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/MessageDaoImpl.java", "stars": "10", "class": {"name": "MessageDaoImpl", "extends": "BaseDaoImpl", "implements": ["MessageDao"], "modifiers": ["public"]}}, {"method_name": "setLooked", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLooked(int accept_id) {        JdbcTemplate.update(SqlMappers.MessageSqlMapper.get(\"setLooked\"),accept_id);    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/MessageDaoImpl.java", "stars": "10", "class": {"name": "MessageDaoImpl", "extends": "BaseDaoImpl", "implements": ["MessageDao"], "modifiers": ["public"]}}, {"method_name": "deleteRead", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void deleteRead(int accept_id) {        JdbcTemplate.update(SqlMappers.MessageSqlMapper.get(\"deleteMessage\"),accept_id);    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/MessageDaoImpl.java", "stars": "10", "class": {"name": "MessageDaoImpl", "extends": "BaseDaoImpl", "implements": ["MessageDao"], "modifiers": ["public"]}}, {"method_name": "deleteLikeMessage", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void deleteLikeMessage(int send_id, int accept_id, int article_id) {        JdbcTemplate.update(SqlMappers.MessageSqlMapper.get(\"deleteLikeMessage\"),send_id,accept_id,article_id,1);    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/MessageDaoImpl.java", "stars": "10", "class": {"name": "MessageDaoImpl", "extends": "BaseDaoImpl", "implements": ["MessageDao"], "modifiers": ["public"]}}, {"method_name": "getAllMessages", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "List<Message>", "snippet": "    public List<Message> getAllMessages(int user_id) {        List<Message> list = JdbcTemplate.query(SqlMappers.MessageSqlMapper.get(\"getAllMessages\"),new BeanPropertyRowMapper<Message>(Message.class),user_id);        if(list.size() == 0){            return null;        }        return list;    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/MessageDaoImpl.java", "stars": "10", "class": {"name": "MessageDaoImpl", "extends": "BaseDaoImpl", "implements": ["MessageDao"], "modifiers": ["public"]}}, {"method_name": "deleteArticleMessage", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void deleteArticleMessage(int article_id) {        JdbcTemplate.update(SqlMappers.MessageSqlMapper.get(\"deleteArticleMessage\"),article_id);    }", "url": "https://raw.githubusercontent.com/373675032/Molihub/master/src/dao/impl/MessageDaoImpl.java", "stars": "10", "class": {"name": "MessageDaoImpl", "extends": "BaseDaoImpl", "implements": ["MessageDao"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        method(null);    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/16.%E3%80%90%E5%BC%82%E5%B8%B8%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%91-%E7%AC%94%E8%AE%B0/code/05_ExceptionAndThread/src/com/itheima/demo01/Exception/Demo04Objects.java", "stars": "2", "class": {"name": "Demo04Objects", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "method", "params": ["Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void method(Object obj){        //\u5bf9\u4f20\u9012\u8fc7\u6765\u7684\u53c2\u6570\u8fdb\u884c\u5408\u6cd5\u6027\u5224\u65ad,\u5224\u65ad\u662f\u5426\u4e3anull        /*if(obj == null){            throw new NullPointerException(\"\u4f20\u9012\u7684\u5bf9\u8c61\u7684\u503c\u662fnull\");        }*/        //Objects.requireNonNull(obj);        Objects.requireNonNull(obj,\"\u4f20\u9012\u7684\u5bf9\u8c61\u7684\u503c\u662fnull\");    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/16.%E3%80%90%E5%BC%82%E5%B8%B8%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%91-%E7%AC%94%E8%AE%B0/code/05_ExceptionAndThread/src/com/itheima/demo01/Exception/Demo04Objects.java", "stars": "2", "class": {"name": "Demo04Objects", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPageNum", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getPageNum() {        return pageNum;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/dto/PageParam.java", "stars": "1", "class": {"name": "PageParam", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPageNum", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPageNum(int pageNum) {        this.pageNum = pageNum;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/dto/PageParam.java", "stars": "1", "class": {"name": "PageParam", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPageSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getPageSize() {        return pageSize;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/dto/PageParam.java", "stars": "1", "class": {"name": "PageParam", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPageSize", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPageSize(int pageSize) {        this.pageSize = pageSize;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/dto/PageParam.java", "stars": "1", "class": {"name": "PageParam", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "helloHtml", "params": ["String", "HashMap<String,Object>", "Model", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String helloHtml(@RequestParam(value = \"value\",required = false) String value, HashMap<String, Object> map, Model model, HttpServletRequest request) {//        System.out.println(nickname+\"======AAAA=======\"+image);        logger.info(\"\u62ff\u5230index\u9875\u9762\u4f20\u6765\u7684\u503c:\"+value);        map.put(\"test\", request.getSession().getAttribute(\"user\"));        map.put(\"value\", value);        return \"test\";    }", "url": "https://raw.githubusercontent.com/visayang/wechatdev/master/src/main/java/com/chad/wechatdev/controller/HtmlPassValueController.java", "stars": "2", "class": {"name": "HtmlPassValueController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCmdType", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "CommandType", "snippet": "    protected CommandType getCmdType() {        return CommandType.ADD;    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/AddCmdBasicTest.java", "stars": "6", "class": {"name": "AddCmdBasicTest", "extends": "CommandTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "setup", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setup() {        testCommand = new AddCmd(TEST_PATH);        testLibrary = new LibraryData();        List<BookEntry> bookData = new ArrayList<>();        bookData.add(new BookEntry(\"TitleA\", new String[] { \"AuthorA\" }, 3.2f, \"ISBNA\", 500));        FieldTestUtils.setPrivateField(testLibrary, testLibrary.getClass(), \"books\", bookData);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/AddCmdBasicTest.java", "stars": "6", "class": {"name": "AddCmdBasicTest", "extends": "CommandTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "testParseArgumentsIllegalArgument", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testParseArgumentsIllegalArgument() {        String blankArg = \"\";        CommandTestUtils.checkArgumentInput(testCommand, false, blankArg);        String invalidPath = \"notACsvfile.dat\";        CommandTestUtils.checkArgumentInput(testCommand, false, invalidPath);        invalidPath = \"this/is/not/a/csv/file.txt\";        CommandTestUtils.checkArgumentInput(testCommand, false, invalidPath);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/AddCmdBasicTest.java", "stars": "6", "class": {"name": "AddCmdBasicTest", "extends": "CommandTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "testParseArgumentsLegalArgument", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testParseArgumentsLegalArgument() {        CommandTestUtils.checkArgumentInput(testCommand, true, TEST_PATH);        CommandTestUtils.checkArgumentInput(testCommand, true, \"this/is/some/test/path/for/books.csv\");    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/AddCmdBasicTest.java", "stars": "6", "class": {"name": "AddCmdBasicTest", "extends": "CommandTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "testExecuteLoadData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testExecuteLoadData() {        testCommand.execute(testLibrary);        List<BookEntry> books = testLibrary.getBookData();        int expectedBookAmount = 3;        assertEquals(\"Unexpected amount of books in library after loading file.\", expectedBookAmount, books.size());        List<Object[]> expectedBookValues = new ArrayList<>();        expectedBookValues.add(new Object[] { \"TitleA\", new String[] { \"AuthorA\" }, 3.2f, \"ISBNA\", 500 });        expectedBookValues.add(                new Object[] { \"The Changeling\", new String[] { \"Zilpha Keatley Snyder\" }, 4.17f, \"595321801\", 228 });        expectedBookValues.add(                new Object[] { \"Animal Farm\", new String[] { \"George Orwell\" }, 3.91f, \"452284244\", 122 });        for (int i = 0; i < books.size(); i++) {            BookEntryTestUtils.checkBookFieldValues(books.get(i), BookEntryBasicTest.BOOK_ENTRY_FIELD_NAMES,                    expectedBookValues.get(i));        }    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/AddCmdBasicTest.java", "stars": "6", "class": {"name": "AddCmdBasicTest", "extends": "CommandTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "testHealth", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testHealth() {\t\tResponseEntity<String> entity = this.restTemplate.withBasicAuth(\"user\", \"password\")\t\t\t\t.getForEntity(\"/admin/health\", String.class);\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\t\tassertThat(entity.getBody()).contains(\"\\\"status\\\":\\\"UP\\\"\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/ManagementPathSampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "ManagementPathSampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testHomeIsSecure", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testHomeIsSecure() {\t\tResponseEntity<Map<String, Object>> entity = asMapEntity(this.restTemplate.getForEntity(\"/\", Map.class));\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);\t\tassertThat(entity.getBody().get(\"error\")).isEqualTo(\"Unauthorized\");\t\tassertThat(entity.getHeaders()).doesNotContainKey(\"Set-Cookie\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/ManagementPathSampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "ManagementPathSampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "asMapEntity", "params": ["ResponseEntity<Map>"], "throws": null, "modifiers": ["static"], "return_type": "ResponseEntity<Map>", "snippet": "\tstatic <K, V> ResponseEntity<Map<K, V>> asMapEntity(ResponseEntity<Map> entity) {\t\treturn (ResponseEntity) entity;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/ManagementPathSampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "ManagementPathSampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testHome", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testHome() {\t\tResponseEntity<Map<String, Object>> entity = asMapEntity(\t\t\t\tnew TestRestTemplate(\"user\", \"password\").getForEntity(\"http://localhost:\" + this.port, Map.class));\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\t\tassertThat(entity.getBody().get(\"message\")).isEqualTo(\"Hello Phil\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/ManagementPortAndPathSampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "ManagementPortAndPathSampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testMetrics", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testMetrics() {\t\ttestHome(); // makes sure some requests have been made\t\tResponseEntity<Map<String, Object>> entity = asMapEntity(new TestRestTemplate()\t\t\t\t.getForEntity(\"http://localhost:\" + this.managementPort + \"/admin/metrics\", Map.class));\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/ManagementPortAndPathSampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "ManagementPortAndPathSampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testHealth", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testHealth() {\t\tResponseEntity<String> entity = new TestRestTemplate().withBasicAuth(\"user\", \"password\")\t\t\t\t.getForEntity(\"http://localhost:\" + this.managementPort + \"/admin/health\", String.class);\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\t\tassertThat(entity.getBody()).isEqualTo(\"{\\\"status\\\":\\\"UP\\\",\\\"groups\\\":[\\\"live\\\",\\\"ready\\\"]}\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/ManagementPortAndPathSampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "ManagementPortAndPathSampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testEnvNotFound", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testEnvNotFound() {\t\tString unknownProperty = \"test-does-not-exist\";\t\tassertThat(this.environment.containsProperty(unknownProperty)).isFalse();\t\tResponseEntity<String> entity = new TestRestTemplate().withBasicAuth(\"user\", \"password\").getForEntity(\t\t\t\t\"http://localhost:\" + this.managementPort + \"/admin/env/\" + unknownProperty, String.class);\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/ManagementPortAndPathSampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "ManagementPortAndPathSampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testMissing", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testMissing() {\t\tResponseEntity<String> entity = new TestRestTemplate(\"user\", \"password\")\t\t\t\t.getForEntity(\"http://localhost:\" + this.managementPort + \"/admin/missing\", String.class);\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);\t\tassertThat(entity.getBody()).contains(\"\\\"status\\\":404\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/ManagementPortAndPathSampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "ManagementPortAndPathSampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testErrorPage", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testErrorPage() {\t\tResponseEntity<Map<String, Object>> entity = asMapEntity(new TestRestTemplate(\"user\", \"password\")\t\t\t\t.getForEntity(\"http://localhost:\" + this.port + \"/error\", Map.class));\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);\t\tassertThat(entity.getBody().get(\"status\")).isEqualTo(999);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/ManagementPortAndPathSampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "ManagementPortAndPathSampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testManagementErrorPage", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testManagementErrorPage() {\t\tResponseEntity<Map<String, Object>> entity = asMapEntity(new TestRestTemplate(\"user\", \"password\")\t\t\t\t.getForEntity(\"http://localhost:\" + this.managementPort + \"/error\", Map.class));\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\t\tassertThat(entity.getBody().get(\"status\")).isEqualTo(999);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/ManagementPortAndPathSampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "ManagementPortAndPathSampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "asMapEntity", "params": ["ResponseEntity<Map>"], "throws": null, "modifiers": ["static"], "return_type": "ResponseEntity<Map>", "snippet": "\tstatic <K, V> ResponseEntity<Map<K, V>> asMapEntity(ResponseEntity<Map> entity) {\t\treturn (ResponseEntity) entity;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/ManagementPortAndPathSampleActuatorApplicationTests.java", "stars": "47572", "class": {"name": "ManagementPortAndPathSampleActuatorApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        // \u8bbe\u7f6e\u4e00\u4e2aexit transition        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {            getWindow().requestFeature(Window.FEATURE_CONTENT_TRANSITIONS);            getWindow().setEnterTransition(new Explode());            getWindow().setExitTransition(new Explode());        }        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_list_video2);        ButterKnife.bind(this);        //\u521b\u5efa\u5c0f\u7a97\u53e3\u5e2e\u52a9\u7c7b        smallVideoHelper = new GSYVideoHelper(this);        //\u5982\u679c\u4e0d\u8bbe\u7f6e\u5373\u4f7f\u7528\u9ed8\u8ba4\u7684 windowViewContainer        //smallVideoHelper.setFullViewContainer(videoFullContainer);        //\u914d\u7f6e        gsySmallVideoHelperBuilder = new GSYVideoHelper.GSYVideoHelperBuilder();        gsySmallVideoHelperBuilder                .setHideStatusBar(true)                .setNeedLockFull(true)                .setCacheWithPlay(true)                .setShowFullAnimation(false)                .setRotateViewAuto(false)                .setLockLand(true)                .setVideoAllCallBack(new GSYSampleCallBack(){            @Override            public void onPrepared(String url, Object... objects) {                super.onPrepared(url, objects);                Debuger.printfLog(\"Duration \" + smallVideoHelper.getGsyVideoPlayer().getDuration() + \" CurrentPosition \" + smallVideoHelper.getGsyVideoPlayer().getCurrentPositionWhenPlaying());            }            @Override            public void onQuitSmallWidget(String url, Object... objects) {                super.onQuitSmallWidget(url, objects);                //\u5927\u4e8e0\u8bf4\u660e\u6709\u64ad\u653e,//\u5bf9\u5e94\u7684\u64ad\u653e\u5217\u8868TAG                if (smallVideoHelper.getPlayPosition() >= 0 && smallVideoHelper.getPlayTAG().equals(ListVideoAdapter.TAG)) {                    //\u5f53\u524d\u64ad\u653e\u7684\u4f4d\u7f6e                    int position = smallVideoHelper.getPlayPosition();                    //\u4e0d\u53ef\u89c6\u7684\u662f\u65f6\u5019                    if ((position < firstVisibleItem || position > lastVisibleItem)) {                        //\u91ca\u653e\u6389\u89c6\u9891                        smallVideoHelper.releaseVideoPlayer();                        listVideoAdapter.notifyDataSetChanged();                    }                }            }        });        smallVideoHelper.setGsyVideoOptionBuilder(gsySmallVideoHelperBuilder);        listVideoAdapter = new ListVideoAdapter(this, smallVideoHelper, gsySmallVideoHelperBuilder);        listVideoAdapter.setRootView(activityListVideo);        videoList.setAdapter(listVideoAdapter);        videoList.setOnScrollListener(new AbsListView.OnScrollListener() {            @Override            public void onScrollStateChanged(AbsListView view, int scrollState) {            }            @Override            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {                ListVideo2Activity.this.firstVisibleItem = firstVisibleItem;                lastVisibleItem = firstVisibleItem + visibleItemCount;                //\u5927\u4e8e0\u8bf4\u660e\u6709\u64ad\u653e,//\u5bf9\u5e94\u7684\u64ad\u653e\u5217\u8868TAG                if (smallVideoHelper.getPlayPosition() >= 0 && smallVideoHelper.getPlayTAG().equals(ListVideoAdapter.TAG)) {                    //\u5f53\u524d\u64ad\u653e\u7684\u4f4d\u7f6e                    int position = smallVideoHelper.getPlayPosition();                    //\u4e0d\u53ef\u89c6\u7684\u662f\u65f6\u5019                    if ((position < firstVisibleItem || position > lastVisibleItem)) {                        //\u5982\u679c\u662f\u5c0f\u7a97\u53e3\u5c31\u4e0d\u9700\u8981\u5904\u7406                        if (!smallVideoHelper.isSmall()) {                            //\u5c0f\u7a97\u53e3                            int size = CommonUtil.dip2px(ListVideo2Activity.this, 150);                            smallVideoHelper.showSmallVideo(new Point(size, size), false, true);                        }                    } else {                        if (smallVideoHelper.isSmall()) {                            smallVideoHelper.smallVideoToNormal();                        }                    }                }            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/ListVideo2Activity.java", "stars": "2", "class": {"name": "ListVideo2Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBackPressed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBackPressed() {        if (smallVideoHelper.backFromFull()) {            return;        }        super.onBackPressed();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/ListVideo2Activity.java", "stars": "2", "class": {"name": "ListVideo2Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDestroy() {        super.onDestroy();        smallVideoHelper.releaseVideoPlayer();        GSYVideoManager.releaseAllVideos();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/ListVideo2Activity.java", "stars": "2", "class": {"name": "ListVideo2Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onAccuracyChanged", "params": ["android", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onAccuracyChanged (android.hardware.Sensor p0, int p1)\t{\t\tn_onAccuracyChanged (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/MagnetometerListener.java", "stars": "2", "class": {"name": "MagnetometerListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onAccuracyChanged", "params": ["android", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onAccuracyChanged (android.hardware.Sensor p0, int p1);\tpublic void onSensorChanged (android.hardware.SensorEvent p0)\t{\t\tn_onSensorChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/MagnetometerListener.java", "stars": "2", "class": {"name": "MagnetometerListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onSensorChanged", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onSensorChanged (android.hardware.SensorEvent p0)\t{\t\tn_onSensorChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/MagnetometerListener.java", "stars": "2", "class": {"name": "MagnetometerListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onSensorChanged", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onSensorChanged (android.hardware.SensorEvent p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/MagnetometerListener.java", "stars": "2", "class": {"name": "MagnetometerListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/MagnetometerListener.java", "stars": "2", "class": {"name": "MagnetometerListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/MagnetometerListener.java", "stars": "2", "class": {"name": "MagnetometerListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SelectableItemsViewRenderer_3.java", "stars": "2", "class": {"name": "SelectableItemsViewRenderer_3", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/SelectableItemsViewRenderer_3.java", "stars": "2", "class": {"name": "SelectableItemsViewRenderer_3", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "shouldUnwrapThrowable", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldUnwrapThrowable() {    Exception exception = new Exception();    assertEquals(exception, ExceptionUtil.unwrapThrowable(exception));    assertEquals(exception, ExceptionUtil.unwrapThrowable(new InvocationTargetException(exception, \"test\")));    assertEquals(exception, ExceptionUtil.unwrapThrowable(new UndeclaredThrowableException(exception, \"test\")));    assertEquals(exception, ExceptionUtil.unwrapThrowable(new InvocationTargetException(new InvocationTargetException(exception, \"test\"), \"test\")));    assertEquals(exception, ExceptionUtil.unwrapThrowable(new InvocationTargetException(new UndeclaredThrowableException(exception, \"test\"), \"test\")));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ExceptionUtilTest.java", "stars": "15", "class": {"name": "ExceptionUtilTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "starting", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid starting() {\t\tfor (SpringApplicationRunListener listener : this.listeners) {\t\t\tlistener.starting();\t\t}\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplicationRunListeners.java", "stars": "47572", "class": {"name": "SpringApplicationRunListeners", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "environmentPrepared", "params": ["ConfigurableEnvironment"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid environmentPrepared(ConfigurableEnvironment environment) {\t\tfor (SpringApplicationRunListener listener : this.listeners) {\t\t\tlistener.environmentPrepared(environment);\t\t}\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplicationRunListeners.java", "stars": "47572", "class": {"name": "SpringApplicationRunListeners", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "contextPrepared", "params": ["ConfigurableApplicationContext"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid contextPrepared(ConfigurableApplicationContext context) {\t\tfor (SpringApplicationRunListener listener : this.listeners) {\t\t\tlistener.contextPrepared(context);\t\t}\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplicationRunListeners.java", "stars": "47572", "class": {"name": "SpringApplicationRunListeners", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "contextLoaded", "params": ["ConfigurableApplicationContext"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid contextLoaded(ConfigurableApplicationContext context) {\t\tfor (SpringApplicationRunListener listener : this.listeners) {\t\t\tlistener.contextLoaded(context);\t\t}\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplicationRunListeners.java", "stars": "47572", "class": {"name": "SpringApplicationRunListeners", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "started", "params": ["ConfigurableApplicationContext"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid started(ConfigurableApplicationContext context) {\t\tfor (SpringApplicationRunListener listener : this.listeners) {\t\t\tlistener.started(context);\t\t}\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplicationRunListeners.java", "stars": "47572", "class": {"name": "SpringApplicationRunListeners", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "running", "params": ["ConfigurableApplicationContext"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid running(ConfigurableApplicationContext context) {\t\tfor (SpringApplicationRunListener listener : this.listeners) {\t\t\tlistener.running(context);\t\t}\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplicationRunListeners.java", "stars": "47572", "class": {"name": "SpringApplicationRunListeners", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "failed", "params": ["ConfigurableApplicationContext", "Throwable"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid failed(ConfigurableApplicationContext context, Throwable exception) {\t\tfor (SpringApplicationRunListener listener : this.listeners) {\t\t\tcallFailedListener(listener, context, exception);\t\t}\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplicationRunListeners.java", "stars": "47572", "class": {"name": "SpringApplicationRunListeners", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "callFailedListener", "params": ["SpringApplicationRunListener", "ConfigurableApplicationContext", "Throwable"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void callFailedListener(SpringApplicationRunListener listener, ConfigurableApplicationContext context,\t\t\tThrowable exception) {\t\ttry {\t\t\tlistener.failed(context, exception);\t\t}\t\tcatch (Throwable ex) {\t\t\tif (exception == null) {\t\t\t\tReflectionUtils.rethrowRuntimeException(ex);\t\t\t}\t\t\tif (this.log.isDebugEnabled()) {\t\t\t\tthis.log.error(\"Error handling failed\", ex);\t\t\t}\t\t\telse {\t\t\t\tString message = ex.getMessage();\t\t\t\tmessage = (message != null) ? message : \"no error message\";\t\t\t\tthis.log.warn(\"Error handling failed (\" + message + \")\");\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplicationRunListeners.java", "stars": "47572", "class": {"name": "SpringApplicationRunListeners", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //1\u3001\u5bfc\u5165jar\u5305        //2\u3001\u521b\u5efaJDBCTemplate\u5bf9\u8c61        JdbcTemplate template = new JdbcTemplate(JDBCUtils.getDataSource());        //3\u3001\u8c03\u7528\u65b9\u6cd5        String sql = \"update student set name = 'hahah' where id = ?\";        int count = template.update(sql, 3);        System.out.println(count);    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/jdbc/datasource/jdbctemplate/JdbcTemplateDemo1.java", "stars": "2", "class": {"name": "JdbcTemplateDemo1", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getKeyMatrix", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int[] getKeyMatrix() {        return keyMatrix;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Keyboard.java", "stars": "4", "class": {"name": "JR100Keyboard", "extends": "AbstractKeyboard", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "keyPressed", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void keyPressed(int keycode) {        super.keyPressed(keycode);        switch (keycode) {        case KeyEvent.VK_MINUS:            keyMatrix[8] |= 0x10;            break;        case KeyEvent.VK_ENTER:            keyMatrix[8] |= 0x08;            break;        case KeyEvent.VK_COLON:            keyMatrix[8] |= 0x04;            break;        case KeyEvent.VK_SPACE:            keyMatrix[8] |= 0x02;            break;        case KeyEvent.VK_PERIOD:            keyMatrix[8] |= 0x01;            break;        case KeyEvent.VK_COMMA:            keyMatrix[7] |= 0x10;            break;        case KeyEvent.VK_M:            keyMatrix[7] |= 0x08;            break;        case KeyEvent.VK_N:            keyMatrix[7] |= 0x04;            break;        case KeyEvent.VK_B:            keyMatrix[7] |= 0x02;            break;        case KeyEvent.VK_V:            keyMatrix[7] |= 0x01;            break;        case KeyEvent.VK_SEMICOLON:            keyMatrix[6] |= 0x10;            break;        case KeyEvent.VK_L:            keyMatrix[6] |= 0x08;            break;        case KeyEvent.VK_K:            keyMatrix[6] |= 0x04;            break;        case KeyEvent.VK_J:            keyMatrix[6] |= 0x02;            break;        case KeyEvent.VK_H:            keyMatrix[6] |= 0x01;            break;        case KeyEvent.VK_P:            keyMatrix[5] |= 0x10;            break;        case KeyEvent.VK_O:            keyMatrix[5] |= 0x08;            break;        case KeyEvent.VK_I:            keyMatrix[5] |= 0x04;            break;        case KeyEvent.VK_U:            keyMatrix[5] |= 0x02;            break;        case KeyEvent.VK_Y:            keyMatrix[5] |= 0x01;            break;        case KeyEvent.VK_0:            keyMatrix[4] |= 0x10;            break;        case KeyEvent.VK_9:            keyMatrix[4] |= 0x08;            break;        case KeyEvent.VK_8:            keyMatrix[4] |= 0x04;            break;        case KeyEvent.VK_7:            keyMatrix[4] |= 0x02;            break;        case KeyEvent.VK_6:            keyMatrix[4] |= 0x01;            break;        case KeyEvent.VK_C:            keyMatrix[0] |= 0x10;            break;        case KeyEvent.VK_X:            keyMatrix[0] |= 0x08;            break;        case KeyEvent.VK_Z:            keyMatrix[0] |= 0x04;            break;        case KeyEvent.VK_SHIFT:            keyMatrix[0] |= 0x02;            break;        case KeyEvent.VK_CONTROL:            keyMatrix[0] |= 0x01;            break;        case KeyEvent.VK_G:            keyMatrix[1] |= 0x10;            break;        case KeyEvent.VK_F:            keyMatrix[1] |= 0x08;            break;        case KeyEvent.VK_D:            keyMatrix[1] |= 0x04;            break;        case KeyEvent.VK_S:            keyMatrix[1] |= 0x02;            break;        case KeyEvent.VK_A:            keyMatrix[1] |= 0x01;            break;        case KeyEvent.VK_T:            keyMatrix[2] |= 0x10;            break;        case KeyEvent.VK_R:            keyMatrix[2] |= 0x08;            break;        case KeyEvent.VK_E:            keyMatrix[2] |= 0x04;            break;        case KeyEvent.VK_W:            keyMatrix[2] |= 0x02;            break;        case KeyEvent.VK_Q:            keyMatrix[2] |= 0x01;            break;        case KeyEvent.VK_5:            keyMatrix[3] |= 0x10;            break;        case KeyEvent.VK_4:            keyMatrix[3] |= 0x08;            break;        case KeyEvent.VK_3:            keyMatrix[3] |= 0x04;            break;        case KeyEvent.VK_2:            keyMatrix[3] |= 0x02;            break;        case KeyEvent.VK_1:            keyMatrix[3] |= 0x01;            break;        default:            // do nothing            break;        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Keyboard.java", "stars": "4", "class": {"name": "JR100Keyboard", "extends": "AbstractKeyboard", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "keyReleased", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void keyReleased(int keycode) {        super.keyReleased(keycode);        switch (keycode) {        case KeyEvent.VK_MINUS:            keyMatrix[8] &= 0xef;            break;        case KeyEvent.VK_ENTER:            keyMatrix[8] &= 0xf7;            break;        case KeyEvent.VK_COLON:            keyMatrix[8] &= 0xfb;            break;        case KeyEvent.VK_SPACE:            keyMatrix[8] &= 0xfd;            break;        case KeyEvent.VK_PERIOD:            keyMatrix[8] &= 0xfe;            break;        case KeyEvent.VK_COMMA:            keyMatrix[7] &= 0xef;            break;        case KeyEvent.VK_M:            keyMatrix[7] &= 0xf7;            break;        case KeyEvent.VK_N:            keyMatrix[7] &= 0xfb;            break;        case KeyEvent.VK_B:            keyMatrix[7] &= 0xfd;            break;        case KeyEvent.VK_V:            keyMatrix[7] &= 0xfe;            break;        case KeyEvent.VK_SEMICOLON:            keyMatrix[6] &= 0xef;            break;        case KeyEvent.VK_L:            keyMatrix[6] &= 0xf7;            break;        case KeyEvent.VK_K:            keyMatrix[6] &= 0xfb;            break;        case KeyEvent.VK_J:            keyMatrix[6] &= 0xfd;            break;        case KeyEvent.VK_H:            keyMatrix[6] &= 0xfe;            break;        case KeyEvent.VK_P:            keyMatrix[5] &= 0xef;            break;        case KeyEvent.VK_O:            keyMatrix[5] &= 0xf7;            break;        case KeyEvent.VK_I:            keyMatrix[5] &= 0xfb;            break;        case KeyEvent.VK_U:            keyMatrix[5] &= 0xfd;            break;        case KeyEvent.VK_Y:            keyMatrix[5] &= 0xfe;            break;        case KeyEvent.VK_0:            keyMatrix[4] &= 0xef;            break;        case KeyEvent.VK_9:            keyMatrix[4] &= 0xf7;            break;        case KeyEvent.VK_8:            keyMatrix[4] &= 0xfb;            break;        case KeyEvent.VK_7:            keyMatrix[4] &= 0xfd;            break;        case KeyEvent.VK_6:            keyMatrix[4] &= 0xfe;            break;        case KeyEvent.VK_C:            keyMatrix[0] &= 0xef;            break;        case KeyEvent.VK_X:            keyMatrix[0] &= 0xf7;            break;        case KeyEvent.VK_Z:            keyMatrix[0] &= 0xfb;            break;        case KeyEvent.VK_SHIFT:            keyMatrix[0] &= 0xfd;            break;        case KeyEvent.VK_CONTROL:            keyMatrix[0] &= 0xfe;            break;        case KeyEvent.VK_G:            keyMatrix[1] &= 0xef;            break;        case KeyEvent.VK_F:            keyMatrix[1] &= 0xf7;            break;        case KeyEvent.VK_D:            keyMatrix[1] &= 0xfb;            break;        case KeyEvent.VK_S:            keyMatrix[1] &= 0xfd;            break;        case KeyEvent.VK_A:            keyMatrix[1] &= 0xfe;            break;        case KeyEvent.VK_T:            keyMatrix[2] &= 0xef;            break;        case KeyEvent.VK_R:            keyMatrix[2] &= 0xf7;            break;        case KeyEvent.VK_E:            keyMatrix[2] &= 0xfb;            break;        case KeyEvent.VK_W:            keyMatrix[2] &= 0xfd;            break;        case KeyEvent.VK_Q:            keyMatrix[2] &= 0xfe;            break;        case KeyEvent.VK_5:            keyMatrix[3] &= 0xef;            break;        case KeyEvent.VK_4:            keyMatrix[3] &= 0xf7;            break;        case KeyEvent.VK_3:            keyMatrix[3] &= 0xfb;            break;        case KeyEvent.VK_2:            keyMatrix[3] &= 0xfd;            break;        case KeyEvent.VK_1:            keyMatrix[3] &= 0xfe;            break;        default:            // do nothing            break;        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Keyboard.java", "stars": "4", "class": {"name": "JR100Keyboard", "extends": "AbstractKeyboard", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "saveState", "params": ["StateSet"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void saveState(StateSet ss) {        super.saveState(ss);        ss.set(\"JR100Keyboard.keyMatrix\", keyMatrix);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Keyboard.java", "stars": "4", "class": {"name": "JR100Keyboard", "extends": "AbstractKeyboard", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "loadState", "params": ["StateSet"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void loadState(StateSet ss) {        super.loadState(ss);        keyMatrix = (int[])ss.get(\"JR100Keyboard.keyMatrix\");    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Keyboard.java", "stars": "4", "class": {"name": "JR100Keyboard", "extends": "AbstractKeyboard", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "execute", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void execute() {    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Keyboard.java", "stars": "4", "class": {"name": "JR100Keyboard", "extends": "AbstractKeyboard", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "init", "params": ["Context", "AttributeSet", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init(Context context, AttributeSet attrs, int defStyle) {        setClickable(true);        setFocusable(true);        LayoutInflater layoutInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);        mView = layoutInflater.inflate(R.layout.optionselector, this);        ButterKnife.bind(this, mView);        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.OptionSelector, defStyle, 0);        String str = a.getString(R.styleable.OptionSelector_optionText);        if (!TextUtils.isEmpty(str)) {            mText1.setText(str);            setContentDescription(str);        }        int res = a.getResourceId(R.styleable.OptionSelector_optionIcon, R.mipmap.ic_launcher);        mIcon.setImageResource(res);        setOnClickListener(mOnClickListener);        a.recycle();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/widget/OptionSelector.java", "stars": "4", "class": {"name": "OptionSelector", "extends": "LinearLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "setText", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setText(String str) {        mText1.setText(str);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/widget/OptionSelector.java", "stars": "4", "class": {"name": "OptionSelector", "extends": "LinearLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "setError", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setError(String errorMessage, String error) {        mText1.setTextColor(Color.RED);        mText1.setTypeface(Typeface.DEFAULT_BOLD);        mText1.setText(errorMessage);        mText2.setText(error);        mText2.setVisibility(VISIBLE);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/widget/OptionSelector.java", "stars": "4", "class": {"name": "OptionSelector", "extends": "LinearLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "setText", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setText(int strRes) {        mText1.setText(strRes);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/widget/OptionSelector.java", "stars": "4", "class": {"name": "OptionSelector", "extends": "LinearLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "setTitle", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTitle(int strRes) {        mTitle = strRes;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/widget/OptionSelector.java", "stars": "4", "class": {"name": "OptionSelector", "extends": "LinearLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "setIcon", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIcon(int iconRes) {        mIcon.setImageResource(iconRes);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/widget/OptionSelector.java", "stars": "4", "class": {"name": "OptionSelector", "extends": "LinearLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "setListener", "params": ["SelectorListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setListener(SelectorListener listener) {        mListener = listener;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/widget/OptionSelector.java", "stars": "4", "class": {"name": "OptionSelector", "extends": "LinearLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "setFragmentManager", "params": ["FragmentManager"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFragmentManager(FragmentManager fragmentManager) {        mFragmentManager = fragmentManager;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/widget/OptionSelector.java", "stars": "4", "class": {"name": "OptionSelector", "extends": "LinearLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "setData", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setData(String[] data) {        mData = data.clone();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/widget/OptionSelector.java", "stars": "4", "class": {"name": "OptionSelector", "extends": "LinearLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "setDefault", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDefault(int defaultOption) {        mDefaultOption = defaultOption;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/widget/OptionSelector.java", "stars": "4", "class": {"name": "OptionSelector", "extends": "LinearLayout", "implements": null, "modifiers": ["public"]}}, {"method_name": "validateNotEmpty", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void validateNotEmpty(String s, String name) {    if(StringUtils.isEmpty(s)) {      throw new IllegalArgumentException(name + \" cannot be empty.\");    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/javautils/ValidationUtils.java", "stars": "18", "class": {"name": "ValidationUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "validateAllOrNone", "params": ["Props", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void validateAllOrNone(Props props, String... keys) {    Objects.requireNonNull(keys);    boolean allExist = true;    boolean someExist = false;    for(String key : keys) {      Object val = props.get(key);      allExist &= val != null;      someExist |= val != null;    }    if(someExist && !allExist) {      throw new IllegalArgumentException(\"Either all of properties exist or none of them should exist for \" + Arrays.toString(keys));    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/javautils/ValidationUtils.java", "stars": "18", "class": {"name": "ValidationUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "validateAllNotEmpty", "params": ["Props", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void validateAllNotEmpty(Props props, String... keys) {    for(String key : keys) {      props.getString(key);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/javautils/ValidationUtils.java", "stars": "18", "class": {"name": "ValidationUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "validateAtleastOneNotEmpty", "params": ["Props", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void validateAtleastOneNotEmpty(Props props, String... keys) {    boolean exist = false;    for(String key : keys) {      Object val = props.get(key);      exist |= val != null;    }    if(!exist) {      throw new IllegalArgumentException(\"At least one of these keys should exist \" + Arrays.toString(keys));    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/javautils/ValidationUtils.java", "stars": "18", "class": {"name": "ValidationUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "validateSomeValuesNotEmpty", "params": ["int", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void validateSomeValuesNotEmpty(int notEmptyVals, String... vals) {    int count = 0;    for(String val : vals) {      if(!StringUtils.isEmpty(val)) {        count++;      }    }    if (count != notEmptyVals) {      throw new IllegalArgumentException(\"Number of not empty vals \" + count + \" is not desired number \" + notEmptyVals);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/javautils/ValidationUtils.java", "stars": "18", "class": {"name": "ValidationUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProjectionMatrix", "params": ["Camera", "float", "boolean", "CallbackInfoReturnable<Matrix4f>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void getProjectionMatrix(Camera camera, float f, boolean bl, CallbackInfoReturnable<Matrix4f> cir) {        if(!(client.getCameraEntity() instanceof CameraEntity)) return;        CameraEntity cameraEntity = (CameraEntity) client.getCameraEntity();        MatrixStack matrixStack = new MatrixStack();        matrixStack.peek().getModel().loadIdentity();        matrixStack.peek().getModel().multiply(Matrix4f.viewboxMatrix(70.0f - (cameraEntity.getZoom()), 16 / 9f, 0.05f, viewDistance * 4.0f));        cir.setReturnValue(matrixStack.peek().getModel());    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/mixin/GameRendererMixin.java", "stars": "5", "class": {"name": "GameRendererMixin", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "tick", "params": ["Camera"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void tick(Camera camera){        if(!(camera.getFocusedEntity() instanceof CameraEntity)){            camera.updateEyeHeight();        }    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/mixin/GameRendererMixin.java", "stars": "5", "class": {"name": "GameRendererMixin", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "inject", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void inject(Activity activity) {        inject(new ViewFinder(activity), activity);    }", "url": "https://raw.githubusercontent.com/itliuhao/haoLabrary/master/baselibrary/src/main/java/com/wander/baselibrary/ioc/ViewUtils.java", "stars": "2", "class": {"name": "ViewUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "inject", "params": ["View"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void inject(View view) {        inject(new ViewFinder(view), view);    }", "url": "https://raw.githubusercontent.com/itliuhao/haoLabrary/master/baselibrary/src/main/java/com/wander/baselibrary/ioc/ViewUtils.java", "stars": "2", "class": {"name": "ViewUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "inject", "params": ["View", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void inject(View view, Object object) {        inject(new ViewFinder(view), object);    }", "url": "https://raw.githubusercontent.com/itliuhao/haoLabrary/master/baselibrary/src/main/java/com/wander/baselibrary/ioc/ViewUtils.java", "stars": "2", "class": {"name": "ViewUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "inject", "params": ["ViewFinder", "Object"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void inject(ViewFinder viewFinder, Object object) {        //        injectFiled(viewFinder, object);        injectEvent(viewFinder, object);    }", "url": "https://raw.githubusercontent.com/itliuhao/haoLabrary/master/baselibrary/src/main/java/com/wander/baselibrary/ioc/ViewUtils.java", "stars": "2", "class": {"name": "ViewUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "injectFiled", "params": ["ViewFinder", "Object"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void injectFiled(ViewFinder viewFinder, Object object) {        // 1\u3001\u83b7\u53d6\u7c7b\u91cc\u9762\u6240\u6709\u7684\u5c5e\u6027        Class<?> aClass = object.getClass();        Field[] fields = aClass.getDeclaredFields(); // \u83b7\u53d6\u6240\u6709\u7684\u5c5e\u6027  \u5305\u62ec\u79c1\u6709\u548c\u516c\u6709\u7684        // 2\u3001\u83b7\u53d6ViewBind\u91cc\u9762\u7684value        for (Field field : fields) {            ViewBind viewBind = field.getAnnotation(ViewBind.class);            if (viewBind != null) {                // \u83b7\u53d6\u5230\u6ce8\u89e3\u91cc\u9762\u7684id\u503c                int[] viewIds = viewBind.value();                for (int viewId : viewIds) {                    // 3\u3001findviewbyid\u83b7\u53d6view                    View view = viewFinder.findViewById(viewId);                    if (view != null) {                        // \u80fd\u591f\u6ce8\u5165\u6240\u6709\u7684\u4fee\u9970\u7b26                        field.setAccessible(true);                        // 4\u3001\u6ce8\u5165\u627e\u5230\u7684view                        try {                            field.set(object, view);                        } catch (IllegalAccessException e) {                            e.printStackTrace();                        }                    }                }            }        }    }", "url": "https://raw.githubusercontent.com/itliuhao/haoLabrary/master/baselibrary/src/main/java/com/wander/baselibrary/ioc/ViewUtils.java", "stars": "2", "class": {"name": "ViewUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "injectEvent", "params": ["ViewFinder", "Object"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void injectEvent(ViewFinder viewFinder, Object object) {        // 1\u3001\u83b7\u53d6\u7c7b\u91cc\u9762\u6240\u6709\u7684\u65b9\u6cd5        Class<?> aClass = object.getClass();        Method[] methods = aClass.getDeclaredMethods();        // 2\u3001\u83b7\u53d6OnClick\u91cc\u9762\u7684value        for (Method method : methods) {            OnClick click = method.getAnnotation(OnClick.class);            if (click != null) {                // \u83b7\u53d6\u5230\u6ce8\u89e3\u91cc\u9762\u7684id\u503c                int[] viewIds = click.value();                for (int viewId : viewIds) {                    // 3\u3001findviewbyid\u83b7\u53d6view                    View view = viewFinder.findViewById(viewId);                    OnClickCheck onClikCheck = method.getAnnotation(OnClickCheck.class);                    if (onClikCheck != null) {                        String msg = onClikCheck.msg();                        int type = onClikCheck.type();                        long time = onClikCheck.time();                        // 4\u3001\u8bbe\u7f6e\u70b9\u51fb\u4e8b\u4ef6                        view.setOnClickListener(new DecleardOnClickListener(method, object, type, msg, time));                    } else {                        // 4\u3001\u8bbe\u7f6e\u70b9\u51fb\u4e8b\u4ef6                        view.setOnClickListener(new DecleardOnClickListener(method, object));                    }                }            }        }    }", "url": "https://raw.githubusercontent.com/itliuhao/haoLabrary/master/baselibrary/src/main/java/com/wander/baselibrary/ioc/ViewUtils.java", "stars": "2", "class": {"name": "ViewUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onClick(View view) {            if (onClickCheck == OnClickCheckUtils.CHECK_CLICKFAST) {                if (OnClickCheckUtils.isFastClick(minClicktime)) {                    return;                }            }            if (onClickCheck == OnClickCheckUtils.CHECK_NET) {                if (!OnClickCheckUtils.netWorkAvailable(view.getContext())) {                    Toast.makeText(view.getContext(), msg, Toast.LENGTH_SHORT).show();                    return;                }            }            if (onClickCheck == OnClickCheckUtils.CHECK_ALL) {                if (OnClickCheckUtils.isFastClick(minClicktime) || !OnClickCheckUtils.netWorkAvailable(view.getContext())) {                    Toast.makeText(view.getContext(), msg, Toast.LENGTH_SHORT).show();                    return;                }            }            try {                method.setAccessible(true);                // 5\u3001\u6ce8\u5165\u65b9\u6cd5                method.invoke(object, view);            } catch (Exception e) {                e.printStackTrace();                // \u9632\u6b62\u6309\u94ae\u70b9\u51fb\u65f6\u6ca1\u6709\u4f20\u5165view\u62a5\u9519                try {                    method.invoke(object, null);                } catch (Exception e1) {                    e1.printStackTrace();                }            }        }", "url": "https://raw.githubusercontent.com/itliuhao/haoLabrary/master/baselibrary/src/main/java/com/wander/baselibrary/ioc/ViewUtils.java", "stars": "2", "class": {"name": "DecleardOnClickListener", "extends": null, "implements": ["View"], "modifiers": ["private", "static"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Type", "snippet": "    public Type getType() {        return this.type;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/events/PlayerEvent.java", "stars": "12", "class": {"name": "PlayerEvent", "extends": "Event", "implements": null, "modifiers": ["public"]}}, {"method_name": "getEntity", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Entity", "snippet": "    public Entity getEntity() {        return this.entity;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/events/PlayerEvent.java", "stars": "12", "class": {"name": "PlayerEvent", "extends": "Event", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tsetUp(\"chrome\", \"https://opensource-demo.orangehrmlive.com/\");\t\t\t\t\t\tdriver.findElement(By.id(\"txtUsername\")).sendKeys(\"Admin\");\t\tWebElement password = driver.findElement(By.name(\"txtPassword\"));\t\tpassword.sendKeys(\"admin123\");\t\t\t\t\t\t\t\tdriver.findElement(By.className(\"button\")).click();\t\tString userName = \"Admin\";\t\tString welcomeText = driver.findElement(By.id(\"welcome\")).getText();\t\tif (welcomeText.contains(userName)) {\t\t\tSystem.out.println(\"Test Passed\");\t\t} else {\t\t\tSystem.out.println(\"test Failed\");\t\t}\t\t// lets take a screenshot of the test case\t\t// 1. Downcast the driver to TakesScreenShot\t\tTakesScreenshot ts = (TakesScreenshot) driver;\t\t// 2. getScreenshotAs() outputType\t\tFile screen = ts.getScreenshotAs(OutputType.FILE);\t\t// 3. FileUtils library\t\ttry {\t\t\tFileUtils.copyFile(screen, new File(\"screenshots/ORANGE/ValidLogin.png\"));\t\t} catch (IOException e) {\t\t\te.printStackTrace();\t\t}\t}", "url": "https://raw.githubusercontent.com/fadimedibi/SeleniumTurkish/master/src/com/class6/Screenshot.java", "stars": "3", "class": {"name": "Screenshot", "extends": "CommonMethods", "implements": null, "modifiers": ["public"]}}, {"method_name": "authorize", "params": ["LoginVM"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<JWTToken>", "snippet": "    public ResponseEntity<JWTToken> authorize(@Valid @RequestBody LoginVM loginVM) {        UsernamePasswordAuthenticationToken authenticationToken =            new UsernamePasswordAuthenticationToken(loginVM.getUsername(), loginVM.getPassword());        Authentication authentication;        try {            authentication = authenticationManagerBuilder.getObject().authenticate(authenticationToken);        } catch (AuthenticationException e) {            throw new UnauthorizedException(GardleErrorKey.PASSWORD_INVALID, e.getMessage());        }        SecurityContextHolder.getContext().setAuthentication(authentication);        boolean rememberMe = (loginVM.isRememberMe() == null) ? false : loginVM.isRememberMe();        String jwt = tokenProvider.createToken(authentication, rememberMe);        User user = userService.getUserWithAuthorities().orElseThrow(() -> new NotFoundException(GardleErrorKey.USER_NOT_FOUND));        HttpHeaders httpHeaders = new HttpHeaders();        httpHeaders.add(JWTFilter.AUTHORIZATION_HEADER, \"Bearer \" + jwt);        return new ResponseEntity<>(new JWTToken(jwt, user.getId(), user.getFirstName(), user.getLastName()), httpHeaders, HttpStatus.OK);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/UserJWTController.java", "stars": "2", "class": {"name": "UserJWTController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getIdToken", "params": [], "throws": null, "modifiers": [], "return_type": "String", "snippet": "        String getIdToken() {            return idToken;        }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/UserJWTController.java", "stars": "2", "class": {"name": "JWTToken", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": [], "return_type": "Long", "snippet": "        Long getId() {            return id;        }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/UserJWTController.java", "stars": "2", "class": {"name": "JWTToken", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "getFirstname", "params": [], "throws": null, "modifiers": [], "return_type": "String", "snippet": "        String getFirstname() {            return firstname;        }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/UserJWTController.java", "stars": "2", "class": {"name": "JWTToken", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "getLastname", "params": [], "throws": null, "modifiers": [], "return_type": "String", "snippet": "        String getLastname() {            return lastname;        }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/UserJWTController.java", "stars": "2", "class": {"name": "JWTToken", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "setIdToken", "params": ["String"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "        void setIdToken(String idToken) {            this.idToken = idToken;        }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/UserJWTController.java", "stars": "2", "class": {"name": "JWTToken", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tSpringApplication.run(FastjsonAutotypeBypassDemoApplication.class, args);\t}", "url": "https://raw.githubusercontent.com/iSafeBlue/fastjson-autotype-bypass-demo/master/src/main/java/com/github/isafeblue/fastjson/FastjsonAutotypeBypassDemoApplication.java", "stars": "29", "class": {"name": "FastjsonAutotypeBypassDemoApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "notNull", "params": ["Object", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "  private static void notNull(Object object, String message) {    if (object == null) {      throw new IllegalArgumentException(message);    }  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/ansi/AnsiOutput.java", "stars": "3", "class": {"name": "AnsiOutput", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setConsoleAvailable", "params": ["Boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void setConsoleAvailable(Boolean consoleAvailable) {    AnsiOutput.consoleAvailable = consoleAvailable;  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/ansi/AnsiOutput.java", "stars": "3", "class": {"name": "AnsiOutput", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getEnabled", "params": [], "throws": null, "modifiers": ["static"], "return_type": "Enabled", "snippet": "  static Enabled getEnabled() {    return AnsiOutput.enabled;  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/ansi/AnsiOutput.java", "stars": "3", "class": {"name": "AnsiOutput", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "encode", "params": ["AnsiElement"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String encode(AnsiElement element) {    if (isEnabled()) {      return ENCODE_START + element + ENCODE_END;    }    return \"\";  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/ansi/AnsiOutput.java", "stars": "3", "class": {"name": "AnsiOutput", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "toString", "params": ["Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String toString(Object... elements) {    StringBuilder sb = new StringBuilder();    if (isEnabled()) {      buildEnabled(sb, elements);    } else {      buildDisabled(sb, elements);    }    return sb.toString();  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/ansi/AnsiOutput.java", "stars": "3", "class": {"name": "AnsiOutput", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "buildEnabled", "params": ["StringBuilder", "Object"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "  private static void buildEnabled(StringBuilder sb, Object[] elements) {    boolean writingAnsi = false;    boolean containsEncoding = false;    for (Object element : elements) {      if (element instanceof AnsiElement) {        containsEncoding = true;        if (!writingAnsi) {          sb.append(ENCODE_START);          writingAnsi = true;        } else {          sb.append(ENCODE_JOIN);        }      } else {        if (writingAnsi) {          sb.append(RESET);          writingAnsi = false;        }      }      sb.append(element);    }    if (containsEncoding) {      sb.append(writingAnsi ? ENCODE_JOIN : ENCODE_START);      sb.append(AnsiColor.RESET);      sb.append(ENCODE_END);    }  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/ansi/AnsiOutput.java", "stars": "3", "class": {"name": "AnsiOutput", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "buildDisabled", "params": ["StringBuilder", "Object"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "  private static void buildDisabled(StringBuilder sb, Object[] elements) {    for (Object element : elements) {      if (!(element instanceof AnsiElement) && element != null) {        sb.append(element);      }    }  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/ansi/AnsiOutput.java", "stars": "3", "class": {"name": "AnsiOutput", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isEnabled", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "  private static boolean isEnabled() {    if (enabled == Enabled.DETECT) {      if (ansiCapable == null) {        ansiCapable = detectIfAnsiCapable();      }      return ansiCapable;    }    return enabled == Enabled.ALWAYS;  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/ansi/AnsiOutput.java", "stars": "3", "class": {"name": "AnsiOutput", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setEnabled", "params": ["Enabled"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void setEnabled(Enabled enabled) {    notNull(enabled, \"Enabled must not be null\");    AnsiOutput.enabled = enabled;  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/ansi/AnsiOutput.java", "stars": "3", "class": {"name": "AnsiOutput", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "detectIfAnsiCapable", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "  private static boolean detectIfAnsiCapable() {    try {      if (Boolean.FALSE.equals(consoleAvailable)) {        return false;      }      if ((consoleAvailable == null) && (System.console() == null)) {        return false;      }      return !(OPERATING_SYSTEM_NAME.contains(\"win\"));    } catch (Throwable ex) {      return false;    }  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/ansi/AnsiOutput.java", "stars": "3", "class": {"name": "AnsiOutput", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "overScrollBy", "params": ["PullToRefreshBase<?>", "int", "int", "int", "int", "boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void overScrollBy(final PullToRefreshBase<?> view, final int deltaX, final int scrollX,\t\t\tfinal int deltaY, final int scrollY, final boolean isTouchEvent) {\t\toverScrollBy(view, deltaX, scrollX, deltaY, scrollY, 0, isTouchEvent);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/OverscrollHelper.java", "stars": "74", "class": {"name": "OverscrollHelper", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "overScrollBy", "params": ["PullToRefreshBase<?>", "int", "int", "int", "int", "int", "boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void overScrollBy(final PullToRefreshBase<?> view, final int deltaX, final int scrollX,\t\t\tfinal int deltaY, final int scrollY, final int scrollRange, final boolean isTouchEvent) {\t\toverScrollBy(view, deltaX, scrollX, deltaY, scrollY, scrollRange, 0, DEFAULT_OVERSCROLL_SCALE, isTouchEvent);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/OverscrollHelper.java", "stars": "74", "class": {"name": "OverscrollHelper", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "overScrollBy", "params": ["PullToRefreshBase<?>", "int", "int", "int", "int", "int", "int", "float", "boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void overScrollBy(final PullToRefreshBase<?> view, final int deltaX, final int scrollX,\t\t\tfinal int deltaY, final int scrollY, final int scrollRange, final int fuzzyThreshold,\t\t\tfinal float scaleFactor, final boolean isTouchEvent) {\t\tfinal int deltaValue, currentScrollValue, scrollValue;\t\tswitch (view.getPullToRefreshScrollDirection()) {\t\t\tcase HORIZONTAL:\t\t\t\tdeltaValue = deltaX;\t\t\t\tscrollValue = scrollX;\t\t\t\tcurrentScrollValue = view.getScrollX();\t\t\t\tbreak;\t\t\tcase VERTICAL:\t\t\tdefault:\t\t\t\tdeltaValue = deltaY;\t\t\t\tscrollValue = scrollY;\t\t\t\tcurrentScrollValue = view.getScrollY();\t\t\t\tbreak;\t\t}\t\t// Check that OverScroll is enabled and that we're not currently\t\t// refreshing.\t\tif (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {\t\t\tfinal Mode mode = view.getMode();\t\t\t// Check that Pull-to-Refresh is enabled, and the event isn't from\t\t\t// touch\t\t\tif (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {\t\t\t\tfinal int newScrollValue = (deltaValue + scrollValue);\t\t\t\tif (PullToRefreshBase.DEBUG) {\t\t\t\t\tLog.d(LOG_TAG, \"OverScroll. DeltaX: \" + deltaX + \", ScrollX: \" + scrollX + \", DeltaY: \" + deltaY\t\t\t\t\t\t\t+ \", ScrollY: \" + scrollY + \", NewY: \" + newScrollValue + \", ScrollRange: \" + scrollRange\t\t\t\t\t\t\t+ \", CurrentScroll: \" + currentScrollValue);\t\t\t\t}\t\t\t\tif (newScrollValue < (0 - fuzzyThreshold)) {\t\t\t\t\t// Check the mode supports the overscroll direction, and\t\t\t\t\t// then move scroll\t\t\t\t\tif (mode.showHeaderLoadingLayout()) {\t\t\t\t\t\t// If we're currently at zero, we're about to start\t\t\t\t\t\t// overscrolling, so change the state\t\t\t\t\t\tif (currentScrollValue == 0) {\t\t\t\t\t\t\tview.setState(State.OVERSCROLLING);\t\t\t\t\t\t}\t\t\t\t\t\tview.setHeaderScroll((int) (scaleFactor * (currentScrollValue + newScrollValue)));\t\t\t\t\t}\t\t\t\t} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {\t\t\t\t\t// Check the mode supports the overscroll direction, and\t\t\t\t\t// then move scroll\t\t\t\t\tif (mode.showFooterLoadingLayout()) {\t\t\t\t\t\t// If we're currently at zero, we're about to start\t\t\t\t\t\t// overscrolling, so change the state\t\t\t\t\t\tif (currentScrollValue == 0) {\t\t\t\t\t\t\tview.setState(State.OVERSCROLLING);\t\t\t\t\t\t}\t\t\t\t\t\tview.setHeaderScroll((int) (scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));\t\t\t\t\t}\t\t\t\t} else if (Math.abs(newScrollValue) <= fuzzyThreshold\t\t\t\t\t\t|| Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {\t\t\t\t\t// Means we've stopped overscrolling, so scroll back to 0\t\t\t\t\tview.setState(State.RESET);\t\t\t\t}\t\t\t} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {\t\t\t\t// This condition means that we were overscrolling from a fling,\t\t\t\t// but the user has touched the View and is now overscrolling\t\t\t\t// from touch instead. We need to just reset.\t\t\t\tview.setState(State.RESET);\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/OverscrollHelper.java", "stars": "74", "class": {"name": "OverscrollHelper", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isAndroidOverScrollEnabled", "params": ["View"], "throws": null, "modifiers": ["static"], "return_type": "boolean", "snippet": "\tstatic boolean isAndroidOverScrollEnabled(View view) {\t\treturn view.getOverScrollMode() != View.OVER_SCROLL_NEVER;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/OverscrollHelper.java", "stars": "74", "class": {"name": "OverscrollHelper", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "operation", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void operation() {       log.info(\"\u4ea4\u4e92\u6d88\u606f:str{}\",str);    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/handler/Handler.java", "stars": "1", "class": {"name": "Handler", "extends": null, "implements": ["HandlerService"], "modifiers": ["public"]}}, {"method_name": "handlerMessage", "params": ["Request", "DataPacket"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void handlerMessage(Request request, DataPacket dataPacket) {        this.operation();        Integer cmd = dataPacket.getCmd();        //todo \u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f \u7ec6\u8282\u5339\u914d        /*\u8981\u4e0d\u8981\u5728\u8fd9\u91cc \u76f4\u63a5\u5c06\u6d88\u606f\u505a\u89e3\u6790\u4f20\u5165*/        try {            if(String.valueOf(cmd).length() == Const.Number.FOUR) {                HallServiceImpl.class.getMethod(methodName,Short.class,Request.class,DataPacket.class).invoke(hallService,cmd,request,dataPacket);            }else if(String.valueOf(cmd).length() == Const.Number.FRIVE){                RoomServiceImpl.class.getMethod(methodName,Short.class,Request.class,DataPacket.class).invoke(roomService,cmd,request,dataPacket);            }else {                log.info(\"\u534f\u8bae\u53f7\u4e0d\u5339\u914d cmd:{}\",cmd);            }        } catch (IllegalAccessException e) {            e.printStackTrace();        } catch (InvocationTargetException e) {            e.printStackTrace();        } catch (NoSuchMethodException e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/handler/Handler.java", "stars": "1", "class": {"name": "Handler", "extends": null, "implements": ["HandlerService"], "modifiers": ["public"]}}, {"method_name": "handlerMessage", "params": ["RequestMessageData"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void handlerMessage(RequestMessageData requestMessageData) {    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/handler/Handler.java", "stars": "1", "class": {"name": "Handler", "extends": null, "implements": ["HandlerService"], "modifiers": ["public"]}}, {"method_name": "getSayHelloMethod", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "io", "snippet": "  public static io.grpc.MethodDescriptor<generated.io.grpc.examples.helloworld.HelloRequest,      generated.io.grpc.examples.helloworld.HelloReply> getSayHelloMethod() {    io.grpc.MethodDescriptor<generated.io.grpc.examples.helloworld.HelloRequest, generated.io.grpc.examples.helloworld.HelloReply> getSayHelloMethod;    if ((getSayHelloMethod = GreeterGrpc.getSayHelloMethod) == null) {      synchronized (GreeterGrpc.class) {        if ((getSayHelloMethod = GreeterGrpc.getSayHelloMethod) == null) {          GreeterGrpc.getSayHelloMethod = getSayHelloMethod =               io.grpc.MethodDescriptor.<generated.io.grpc.examples.helloworld.HelloRequest, generated.io.grpc.examples.helloworld.HelloReply>newBuilder()              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)              .setFullMethodName(generateFullMethodName(                  \"helloworld.Greeter\", \"SayHello\"))              .setSampledToLocalTracing(true)              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(                  generated.io.grpc.examples.helloworld.HelloRequest.getDefaultInstance()))              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(                  generated.io.grpc.examples.helloworld.HelloReply.getDefaultInstance()))                  .setSchemaDescriptor(new GreeterMethodDescriptorSupplier(\"SayHello\"))                  .build();          }        }     }     return getSayHelloMethod;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/GreeterGrpc.java", "stars": "3", "class": {"name": "GreeterGrpc", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "newStub", "params": ["io"], "throws": null, "modifiers": ["public", "static"], "return_type": "GreeterStub", "snippet": "  public static GreeterStub newStub(io.grpc.Channel channel) {    return new GreeterStub(channel);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/GreeterGrpc.java", "stars": "3", "class": {"name": "GreeterGrpc", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "newBlockingStub", "params": ["io"], "throws": null, "modifiers": ["public", "static"], "return_type": "GreeterBlockingStub", "snippet": "  public static GreeterBlockingStub newBlockingStub(      io.grpc.Channel channel) {    return new GreeterBlockingStub(channel);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/GreeterGrpc.java", "stars": "3", "class": {"name": "GreeterGrpc", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "newFutureStub", "params": ["io"], "throws": null, "modifiers": ["public", "static"], "return_type": "GreeterFutureStub", "snippet": "  public static GreeterFutureStub newFutureStub(      io.grpc.Channel channel) {    return new GreeterFutureStub(channel);  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/GreeterGrpc.java", "stars": "3", "class": {"name": "GreeterGrpc", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getServiceDescriptor", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "io", "snippet": "  public static io.grpc.ServiceDescriptor getServiceDescriptor() {    io.grpc.ServiceDescriptor result = serviceDescriptor;    if (result == null) {      synchronized (GreeterGrpc.class) {        result = serviceDescriptor;        if (result == null) {          serviceDescriptor = result = io.grpc.ServiceDescriptor.newBuilder(SERVICE_NAME)              .setSchemaDescriptor(new GreeterFileDescriptorSupplier())              .addMethod(getSayHelloMethod())              .build();        }      }    }    return result;  }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/GreeterGrpc.java", "stars": "3", "class": {"name": "GreeterGrpc", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "sayHello", "params": ["generated", "io"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sayHello(generated.io.grpc.examples.helloworld.HelloRequest request,        io.grpc.stub.StreamObserver<generated.io.grpc.examples.helloworld.HelloReply> responseObserver) {      asyncUnimplementedUnaryCall(getSayHelloMethod(), responseObserver);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/GreeterGrpc.java", "stars": "3", "class": {"name": "GreeterImplBase", "extends": null, "implements": ["io"], "modifiers": ["public", "static", "abstract"]}}, {"method_name": "bindService", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "io", "snippet": "    @java.lang.Override public final io.grpc.ServerServiceDefinition bindService() {      return io.grpc.ServerServiceDefinition.builder(getServiceDescriptor())          .addMethod(            getSayHelloMethod(),            asyncUnaryCall(              new MethodHandlers<                generated.io.grpc.examples.helloworld.HelloRequest,                generated.io.grpc.examples.helloworld.HelloReply>(                  this, METHODID_SAY_HELLO)))          .build();    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/GreeterGrpc.java", "stars": "3", "class": {"name": "GreeterImplBase", "extends": null, "implements": ["io"], "modifiers": ["public", "static", "abstract"]}}, {"method_name": "build", "params": ["io", "io"], "throws": null, "modifiers": ["protected"], "return_type": "GreeterStub", "snippet": "    protected GreeterStub build(io.grpc.Channel channel,        io.grpc.CallOptions callOptions) {      return new GreeterStub(channel, callOptions);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/GreeterGrpc.java", "stars": "3", "class": {"name": "GreeterStub", "extends": "io", "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "sayHello", "params": ["generated", "io"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sayHello(generated.io.grpc.examples.helloworld.HelloRequest request,        io.grpc.stub.StreamObserver<generated.io.grpc.examples.helloworld.HelloReply> responseObserver) {      asyncUnaryCall(          getChannel().newCall(getSayHelloMethod(), getCallOptions()), request, responseObserver);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/GreeterGrpc.java", "stars": "3", "class": {"name": "GreeterStub", "extends": "io", "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "build", "params": ["io", "io"], "throws": null, "modifiers": ["protected"], "return_type": "GreeterBlockingStub", "snippet": "    protected GreeterBlockingStub build(io.grpc.Channel channel,        io.grpc.CallOptions callOptions) {      return new GreeterBlockingStub(channel, callOptions);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/GreeterGrpc.java", "stars": "3", "class": {"name": "GreeterBlockingStub", "extends": "io", "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "sayHello", "params": ["generated"], "throws": null, "modifiers": ["public"], "return_type": "generated", "snippet": "    public generated.io.grpc.examples.helloworld.HelloReply sayHello(generated.io.grpc.examples.helloworld.HelloRequest request) {      return blockingUnaryCall(          getChannel(), getSayHelloMethod(), getCallOptions(), request);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/GreeterGrpc.java", "stars": "3", "class": {"name": "GreeterBlockingStub", "extends": "io", "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "build", "params": ["io", "io"], "throws": null, "modifiers": ["protected"], "return_type": "GreeterFutureStub", "snippet": "    protected GreeterFutureStub build(io.grpc.Channel channel,        io.grpc.CallOptions callOptions) {      return new GreeterFutureStub(channel, callOptions);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/GreeterGrpc.java", "stars": "3", "class": {"name": "GreeterFutureStub", "extends": "io", "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "sayHello", "params": ["generated"], "throws": null, "modifiers": ["public"], "return_type": "com", "snippet": "    public com.google.common.util.concurrent.ListenableFuture<generated.io.grpc.examples.helloworld.HelloReply> sayHello(        generated.io.grpc.examples.helloworld.HelloRequest request) {      return futureUnaryCall(          getChannel().newCall(getSayHelloMethod(), getCallOptions()), request);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/GreeterGrpc.java", "stars": "3", "class": {"name": "GreeterFutureStub", "extends": "io", "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "invoke", "params": ["Req", "io"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void invoke(Req request, io.grpc.stub.StreamObserver<Resp> responseObserver) {      switch (methodId) {        case METHODID_SAY_HELLO:          serviceImpl.sayHello((generated.io.grpc.examples.helloworld.HelloRequest) request,              (io.grpc.stub.StreamObserver<generated.io.grpc.examples.helloworld.HelloReply>) responseObserver);          break;        default:          throw new AssertionError();      }    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/GreeterGrpc.java", "stars": "3", "class": {"name": "MethodHandlers", "extends": null, "implements": ["io", "io", "io", "io"], "modifiers": ["private", "static", "final"]}}, {"method_name": "invoke", "params": ["io"], "throws": null, "modifiers": ["public"], "return_type": "io", "snippet": "    public io.grpc.stub.StreamObserver<Req> invoke(        io.grpc.stub.StreamObserver<Resp> responseObserver) {      switch (methodId) {        default:          throw new AssertionError();      }    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/GreeterGrpc.java", "stars": "3", "class": {"name": "MethodHandlers", "extends": null, "implements": ["io", "io", "io", "io"], "modifiers": ["private", "static", "final"]}}, {"method_name": "getFileDescriptor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "com", "snippet": "    public com.google.protobuf.Descriptors.FileDescriptor getFileDescriptor() {      return generated.io.grpc.examples.helloworld.HelloWorldProto.getDescriptor();    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/GreeterGrpc.java", "stars": "3", "class": {"name": "GreeterBaseDescriptorSupplier", "extends": null, "implements": ["io", "io"], "modifiers": ["private", "static", "abstract"]}}, {"method_name": "getServiceDescriptor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "com", "snippet": "    public com.google.protobuf.Descriptors.ServiceDescriptor getServiceDescriptor() {      return getFileDescriptor().findServiceByName(\"Greeter\");    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/GreeterGrpc.java", "stars": "3", "class": {"name": "GreeterBaseDescriptorSupplier", "extends": null, "implements": ["io", "io"], "modifiers": ["private", "static", "abstract"]}}, {"method_name": "getMethodDescriptor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "com", "snippet": "    public com.google.protobuf.Descriptors.MethodDescriptor getMethodDescriptor() {      return getServiceDescriptor().findMethodByName(methodName);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/dist/benchmark/grpc-server/src/main/java/generated/io/grpc/examples/helloworld/GreeterGrpc.java", "stars": "3", "class": {"name": "GreeterMethodDescriptorSupplier", "extends": "GreeterBaseDescriptorSupplier", "implements": ["io"], "modifiers": ["private", "static", "final"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        if (Build.VERSION.SDK_INT >= 23){            requestAlertWindowPermission();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatActivity.java", "stars": "2", "class": {"name": "FloatActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "requestAlertWindowPermission", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void requestAlertWindowPermission() {        Intent intent = new Intent(\"android.settings.action.MANAGE_OVERLAY_PERMISSION\");        intent.setData(Uri.parse(\"package:\" + getPackageName()));        startActivityForResult(intent, 1);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatActivity.java", "stars": "2", "class": {"name": "FloatActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onActivityResult", "params": ["int", "int", "Intent"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (Build.VERSION.SDK_INT >= 23){            //todo \u752823\u4ee5\u4e0a\u7f16\u8bd1\u5373\u53ef\u51fa\u73b0canDrawOverlays            if (Util.hasPermission(this)) {                mPermissionListener.onSuccess();            } else {                mPermissionListener.onFail();            }        }        finish();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatActivity.java", "stars": "2", "class": {"name": "FloatActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "request", "params": ["Context", "PermissionListener"], "throws": null, "modifiers": ["synchronized", "static"], "return_type": "void", "snippet": "    static synchronized void request(Context context, PermissionListener permissionListener) {        if (mPermissionListenerList == null) {            mPermissionListenerList = new ArrayList<>();            mPermissionListener = new PermissionListener() {                @Override                public void onSuccess() {                    for (PermissionListener listener : mPermissionListenerList) {                        listener.onSuccess();                    }                }                @Override                public void onFail() {                    for (PermissionListener listener : mPermissionListenerList) {                        listener.onFail();                    }                }            };            Intent intent = new Intent(context, FloatActivity.class);            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);            context.startActivity(intent);        }        mPermissionListenerList.add(permissionListener);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/floatUtil/FloatActivity.java", "stars": "2", "class": {"name": "FloatActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getProperties", "params": [], "throws": null, "modifiers": ["synchronized", "public", "static"], "return_type": "Properties", "snippet": "    public static synchronized Properties getProperties(){        if(null == properties && new File(CoreConstant.DATAX_KERBEROS_PATH).exists()){            try (InputStream inputStream = new FileInputStream(CoreConstant.DATAX_LDAP_PATH)) {                Properties props = new Properties();                props.load(inputStream);                properties = props;            } catch (IOException e) {                if (e instanceof FileNotFoundException) {                    //Do nothing, just return null properties                    return properties;                }                throw DataXException.asDataXException(FrameworkErrorCode.SECRET_ERROR,                        \"Fail to read kerberos config file\", e);            }            //Ignore        }        return properties;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/webank/wedatasphere/exchangis/datax/util/KerberosUtil.java", "stars": "23", "class": {"name": "KerberosUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);                 // storing string resources into Array        String[] adobe_products = getResources().getStringArray(R.array.adobe_products);                 // Binding resources Array to ListAdapter        this.setListAdapter(new ArrayAdapter<String>(this, R.layout.list_item, R.id.label, adobe_products));                 ListView lv = getListView();         // listening to single list item on click        lv.setOnItemClickListener(new OnItemClickListener() {          public void onItemClick(AdapterView<?> parent, View view,              int position, long id) {                             // selected item              String product = ((TextView) view).getText().toString();                             // Launching new Activity on selecting single List Item              Intent i = new Intent(getApplicationContext(), SingleListItem.class);              // sending data to new activity              i.putExtra(\"product\", product);              startActivity(i);                       }        });    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/AndroidListViewActivity/src/com/example/androidlistviewactivity/AndroidListViewActivity.java", "stars": "74", "class": {"name": "AndroidListViewActivity", "extends": "ListActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "support", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String support() {        return \"max-len\";    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/validator/MaxLenValidator.java", "stars": "13", "class": {"name": "MaxLenValidator", "extends": null, "implements": ["IValidator"], "modifiers": ["public"]}}, {"method_name": "validate", "params": ["Object", "Node"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean validate(Object input, Node node) {        if (input instanceof String) {            int len = NumberUtils.toInt(DomUtils.getNodeAttributeValue(node, \"value\"), 0);            return len <= 0 || input.toString().length() <= len;        }        return false;    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/validator/MaxLenValidator.java", "stars": "13", "class": {"name": "MaxLenValidator", "extends": null, "implements": ["IValidator"], "modifiers": ["public"]}}, {"method_name": "isAccessAllowed", "params": ["ServletRequest", "ServletResponse", "Object"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean isAccessAllowed(ServletRequest req, ServletResponse resp, Object mappedValue)  {        Subject subject = getSubject(req, resp);        //\u83b7\u53d6\u5f53\u524d\u8bbf\u95ee\u8def\u5f84\u6240\u9700\u8981\u7684\u89d2\u8272\u96c6\u5408        String[] rolesArray = (String[]) mappedValue;        //\u6ca1\u6709\u89d2\u8272\u9650\u5236\uff0c\u6709\u6743\u9650\u8bbf\u95ee        if (rolesArray == null || rolesArray.length == 0) {            return true;        }        //\u5f53\u524dsubject\u662frolesArray\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\uff0c\u5219\u6709\u6743\u9650\u8bbf\u95ee        for (int i = 0; i < rolesArray.length; i++) {            if (subject.hasRole(rolesArray[i])) {                return true;            }        }        return false;    }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/config/CustomRolesOrAuthorizationFilter.java", "stars": "2", "class": {"name": "CustomRolesOrAuthorizationFilter", "extends": "AuthorizationFilter", "implements": null, "modifiers": ["public"]}}, {"method_name": "toDistributionMasque", "params": ["DistributionMasqueDatabase"], "throws": null, "modifiers": ["public"], "return_type": "DistributionMasque", "snippet": "    public DistributionMasque toDistributionMasque(DistributionMasqueDatabase distributionMasqueDatabase) {        return DistributionMasque.builder()                .hashDemandeur(distributionMasqueDatabase.getDemandeur())                .dateDistribution(distributionMasqueDatabase.getDateDistribution())                .nbPersonnes(distributionMasqueDatabase.getNbPersonnes())                .typeMasque(TypeMasque.valueOf(distributionMasqueDatabase.getTypeMasque()))                .nbMasques(distributionMasqueDatabase.getNbMasques())                .modeSaisie(ModeSaisie.valueOf(distributionMasqueDatabase.getModeSaisie()))                .codePostal(distributionMasqueDatabase.getCodePostal())                .typeRemettant(TypeRemettant.valueOf(distributionMasqueDatabase.getTypeRemettant()))                .build();    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/main/java/fr/gouv/interieur/dmgp/remettant/infrastructure/database/DistributionMasqueDatabaseMapper.java", "stars": "5", "class": {"name": "DistributionMasqueDatabaseMapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toDistributionMasqueDatabase", "params": ["DistributionMasque"], "throws": null, "modifiers": ["public"], "return_type": "DistributionMasqueDatabase", "snippet": "    public DistributionMasqueDatabase toDistributionMasqueDatabase(DistributionMasque distributionMasque) {        return DistributionMasqueDatabase.builder()                .demandeur(distributionMasque.getHashDemandeur())                .dateDistribution(distributionMasque.getDateDistribution())                .nbPersonnes(distributionMasque.getNbPersonnes())                .typeMasque(distributionMasque.getTypeMasque().name())                .nbMasques(distributionMasque.getNbMasques())                .modeSaisie(distributionMasque.getModeSaisie().name())                .codePostal(distributionMasque.getCodePostal())                .typeRemettant(distributionMasque.getTypeRemettant().name())                .build();    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/main/java/fr/gouv/interieur/dmgp/remettant/infrastructure/database/DistributionMasqueDatabaseMapper.java", "stars": "5", "class": {"name": "DistributionMasqueDatabaseMapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tSpringApplication.run(TestePagamentoIfoodApplication.class, args);\t}", "url": "https://raw.githubusercontent.com/asouza/implementacao-teste-ifood-pagamento-ddd-da-massa/master/src/main/java/com/deveficiente/testepagamentoifood/TestePagamentoIfoodApplication.java", "stars": "9", "class": {"name": "TestePagamentoIfoodApplication", "extends": null, "implements": ["CommandLineRunner"], "modifiers": ["public"]}}, {"method_name": "run", "params": ["String"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void run(String... args) throws Exception {\t\t\t\tRestaurante bulger = new Restaurante(\"bulger\",visa,master,elo,hipercard,maquininha);\t\tmanager.persist(bulger);\t\t\t\tRestaurante mil1900 = new Restaurante(\"1900\",master,hipercard,dinheiro);\t\tmanager.persist(mil1900);\t\t\t\tRestaurante ordinario = new Restaurante(\"ordinario\",cheque,elo);\t\tmanager.persist(ordinario);\t\t\t\tRestaurante lejazz = new Restaurante(\"lejazz\",dinheiro,cheque,visa);\t\tmanager.persist(lejazz);\t\t\t\tUsuario albertoVisa = new Usuario(\"alberto\",visa,elo,hipercard,dinheiro);\t\tmanager.persist(albertoVisa);\t\t\t\tUsuario heisenbergMaster = new Usuario(\"heisenberg\",master);\t\tmanager.persist(heisenbergMaster);\t\t\t\tUsuario shakaOnline = new Usuario(\"shaka\",master,visa);\t\tmanager.persist(shakaOnline);\t\t\t\tUsuario seiyaDinheiro = new Usuario(\"seiya\",dinheiro);\t\tmanager.persist(seiyaDinheiro);\t\t\t\tUsuario starkMaquininha = new Usuario(\"stark\",maquininha,dinheiro,cheque);\t\tmanager.persist(starkMaquininha);\t\t\t\tUsuario natasha = new Usuario(\"natasha\",visa,master,maquininha,dinheiro,cheque,elo,hipercard);\t\tmanager.persist(natasha);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "url": "https://raw.githubusercontent.com/asouza/implementacao-teste-ifood-pagamento-ddd-da-massa/master/src/main/java/com/deveficiente/testepagamentoifood/TestePagamentoIfoodApplication.java", "stars": "9", "class": {"name": "TestePagamentoIfoodApplication", "extends": null, "implements": ["CommandLineRunner"], "modifiers": ["public"]}}, {"method_name": "startActivity", "params": ["Context", "StreamInfo"], "throws": null, "modifiers": ["public", "static"], "return_type": "Intent", "snippet": "    public static Intent startActivity(Context context, StreamInfo info) {        return startActivity(context, info, 0);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVVideoPlayerActivity.java", "stars": "4", "class": {"name": "TVVideoPlayerActivity", "extends": "TVBaseActivity", "implements": ["TVVideoPlayerFragment"], "modifiers": ["public"]}}, {"method_name": "startActivity", "params": ["Context", "StreamInfo", "long"], "throws": null, "modifiers": ["public", "static"], "return_type": "Intent", "snippet": "    public static Intent startActivity(        Context context,        StreamInfo info,        @SuppressWarnings(\"UnusedParameters\") long resumePosition) {        Intent i = new Intent(context, TVVideoPlayerActivity.class);        i.putExtra(EXTRA_STREAM_INFO, info);        // todo: resume position        context.startActivity(i);        return i;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVVideoPlayerActivity.java", "stars": "4", "class": {"name": "TVVideoPlayerActivity", "extends": "TVBaseActivity", "implements": ["TVVideoPlayerFragment"], "modifiers": ["public"]}}, {"method_name": "startActivity", "params": ["Context", "StreamInfo", "Show"], "throws": null, "modifiers": ["public", "static"], "return_type": "Intent", "snippet": "    public static Intent startActivity(Context context, StreamInfo info, Show show) {        Intent i = new Intent(context, TVVideoPlayerActivity.class);        i.putExtra(EXTRA_STREAM_INFO, info);        i.putExtra(EXTRA_SHOW_INFO, show);        // todo: resume position        context.startActivity(i);        return i;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVVideoPlayerActivity.java", "stars": "4", "class": {"name": "TVVideoPlayerActivity", "extends": "TVBaseActivity", "implements": ["TVVideoPlayerFragment"], "modifiers": ["public"]}}, {"method_name": "onBackPressed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBackPressed() {        super.onBackPressed();        mIsBackPressed = true;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVVideoPlayerActivity.java", "stars": "4", "class": {"name": "TVVideoPlayerActivity", "extends": "TVBaseActivity", "implements": ["TVVideoPlayerFragment"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        TVButterApplication.getAppContext()                .getComponent()                .inject(this);        super.onCreate(savedInstanceState, R.layout.activity_videoplayer);        ButterKnife.bind(this);        createStreamInfo();        mPlayerFragment = (TVVideoPlayerFragment) getSupportFragmentManager().findFragmentById(R.id.fragment);        mPlaybackOverlayFragment = (TVPlaybackOverlayFragment) getSupportFragmentManager().findFragmentById(R.id.playback_overlay_fragment);        mPlayerFragment.onMediaReady();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVVideoPlayerActivity.java", "stars": "4", "class": {"name": "TVVideoPlayerActivity", "extends": "TVBaseActivity", "implements": ["TVVideoPlayerFragment"], "modifiers": ["public"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onResume() {        super.onResume();        mIsBackPressed = false;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVVideoPlayerActivity.java", "stars": "4", "class": {"name": "TVVideoPlayerActivity", "extends": "TVBaseActivity", "implements": ["TVVideoPlayerFragment"], "modifiers": ["public"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onPause() {        super.onPause();        if (mIsBackPressed) {            mPlayerFragment.deactivateMediaSession();        }        if (mPlayerFragment.isMediaSessionActive()) {            mPlaybackOverlayFragment.setKeepEventBusRegistration(true);        }        else {            mPlaybackOverlayFragment.setKeepEventBusRegistration(false);            PrefUtils.save(this, BaseVideoPlayerFragment.RESUME_POSITION, 0);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVVideoPlayerActivity.java", "stars": "4", "class": {"name": "TVVideoPlayerActivity", "extends": "TVBaseActivity", "implements": ["TVVideoPlayerFragment"], "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDestroy() {        if (!mCurrentStreamStopped) {            mService.stopStreaming();            mCurrentStreamStopped = true;        }        super.onDestroy();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVVideoPlayerActivity.java", "stars": "4", "class": {"name": "TVVideoPlayerActivity", "extends": "TVBaseActivity", "implements": ["TVVideoPlayerFragment"], "modifiers": ["public"]}}, {"method_name": "onVisibleBehindCanceled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onVisibleBehindCanceled() {        mPlayerFragment.pause();        super.onVisibleBehindCanceled();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVVideoPlayerActivity.java", "stars": "4", "class": {"name": "TVVideoPlayerActivity", "extends": "TVBaseActivity", "implements": ["TVVideoPlayerFragment"], "modifiers": ["public"]}}, {"method_name": "onOptionsItemSelected", "params": ["MenuItem"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onOptionsItemSelected(MenuItem item) {        switch (item.getItemId()) {            case android.R.id.home:                finish();                return true;        }        return super.onOptionsItemSelected(item);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVVideoPlayerActivity.java", "stars": "4", "class": {"name": "TVVideoPlayerActivity", "extends": "TVBaseActivity", "implements": ["TVVideoPlayerFragment"], "modifiers": ["public"]}}, {"method_name": "getInfo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "StreamInfo", "snippet": "    public StreamInfo getInfo() {        if (mStreamInfo == null)            createStreamInfo();        return mStreamInfo;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVVideoPlayerActivity.java", "stars": "4", "class": {"name": "TVVideoPlayerActivity", "extends": "TVBaseActivity", "implements": ["TVVideoPlayerFragment"], "modifiers": ["public"]}}, {"method_name": "getService", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TorrentService", "snippet": "    public TorrentService getService() {        return mService;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVVideoPlayerActivity.java", "stars": "4", "class": {"name": "TVVideoPlayerActivity", "extends": "TVBaseActivity", "implements": ["TVVideoPlayerFragment"], "modifiers": ["public"]}}, {"method_name": "onTorrentServiceConnected", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onTorrentServiceConnected() {        mService.addListener(mPlayerFragment);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVVideoPlayerActivity.java", "stars": "4", "class": {"name": "TVVideoPlayerActivity", "extends": "TVBaseActivity", "implements": ["TVVideoPlayerFragment"], "modifiers": ["public"]}}, {"method_name": "onTorrentServiceDisconnected", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onTorrentServiceDisconnected() {        mService.removeListener(mPlayerFragment);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVVideoPlayerActivity.java", "stars": "4", "class": {"name": "TVVideoPlayerActivity", "extends": "TVBaseActivity", "implements": ["TVVideoPlayerFragment"], "modifiers": ["public"]}}, {"method_name": "getResumePosition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getResumePosition() {        //todo: Implement ResumePosition on Android TV        return 0L;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVVideoPlayerActivity.java", "stars": "4", "class": {"name": "TVVideoPlayerActivity", "extends": "TVBaseActivity", "implements": ["TVVideoPlayerFragment"], "modifiers": ["public"]}}, {"method_name": "createStreamInfo", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void createStreamInfo() {        mStreamInfo = getIntent().getParcelableExtra(EXTRA_STREAM_INFO);        String location = mStreamInfo.getVideoLocation();        if (!location.startsWith(\"file://\") && !location.startsWith(\"http://\") && !location.startsWith(\"https://\")) {            location = \"file://\" + location;        }        mStreamInfo.setVideoLocation(location);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVVideoPlayerActivity.java", "stars": "4", "class": {"name": "TVVideoPlayerActivity", "extends": "TVBaseActivity", "implements": ["TVVideoPlayerFragment"], "modifiers": ["public"]}}, {"method_name": "skipTo", "params": ["StreamInfo", "Show"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void skipTo(StreamInfo info, Show show) {        mService.stopStreaming();        mCurrentStreamStopped = true;        mPlayerFragment.pause();        mPlayerFragment.onPlaybackEndReached();        finish();        TVStreamLoadingActivity.startActivity(this, info, show);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVVideoPlayerActivity.java", "stars": "4", "class": {"name": "TVVideoPlayerActivity", "extends": "TVBaseActivity", "implements": ["TVVideoPlayerFragment"], "modifiers": ["public"]}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "Date", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNonNullParameter(PreparedStatement ps, int i, Date parameter, JdbcType jdbcType)      throws SQLException {    ps.setDate(i, parameter);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/SqlDateTypeHandler.java", "stars": "15", "class": {"name": "SqlDateTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Date", "snippet": "  public Date getNullableResult(ResultSet rs, String columnName)      throws SQLException {    return rs.getDate(columnName);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/SqlDateTypeHandler.java", "stars": "15", "class": {"name": "SqlDateTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Date", "snippet": "  public Date getNullableResult(ResultSet rs, int columnIndex)      throws SQLException {    return rs.getDate(columnIndex);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/SqlDateTypeHandler.java", "stars": "15", "class": {"name": "SqlDateTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Date", "snippet": "  public Date getNullableResult(CallableStatement cs, int columnIndex)      throws SQLException {    return cs.getDate(columnIndex);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/SqlDateTypeHandler.java", "stars": "15", "class": {"name": "SqlDateTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "mapToXML", "params": ["Map"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String mapToXML(Map map) {        StringBuffer sb = new StringBuffer();        sb.append(\"<xml>\");        mapToXML2(map, sb);        sb.append(\"</xml>\");        try {            return sb.toString();        } catch (Exception e) {        }        return null;    }", "url": "https://raw.githubusercontent.com/tianhan1998/WechatMoocQuestion/master/src/main/java/cn/th/Utils/WeChatUtils.java", "stars": "2", "class": {"name": "WeChatUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "mapToXML2", "params": ["Map", "StringBuffer"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void mapToXML2(Map map, StringBuffer sb) {        Set set = map.keySet();        for (Iterator it = set.iterator(); it.hasNext();) {            String key = (String) it.next();            Object value = map.get(key);            if (null == value)                value = \"\";            if (value.getClass().getName().equals(\"java.util.ArrayList\")) {                ArrayList list = (ArrayList) map.get(key);                sb.append(\"<\" + key + \">\");                for (int i = 0; i < list.size(); i++) {                    HashMap hm = (HashMap) list.get(i);                    mapToXML2(hm, sb);                }                sb.append(\"</\" + key + \">\");            } else {                if (value instanceof HashMap) {                    sb.append(\"<\" + key + \">\");                    mapToXML2((HashMap) value, sb);                    sb.append(\"</\" + key + \">\");                } else {                    sb.append(\"<\" + key + \"><![CDATA[\" + value + \"]]></\" + key + \">\");                }            }        }    }", "url": "https://raw.githubusercontent.com/tianhan1998/WechatMoocQuestion/master/src/main/java/cn/th/Utils/WeChatUtils.java", "stars": "2", "class": {"name": "WeChatUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sendTextMsg", "params": ["Map<String,String>", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String sendTextMsg(Map<String,String> requestMap,String content){        Map<String,Object> map=new HashMap<String, Object>();        map.put(\"ToUserName\", requestMap.get(WeChatContant.FromUserName));        map.put(\"FromUserName\",  requestMap.get(WeChatContant.ToUserName));        map.put(\"MsgType\", WeChatContant.RESP_MESSAGE_TYPE_TEXT);        map.put(\"CreateTime\", new Date().getTime());        map.put(\"Content\", content);        return  mapToXML(map);    }", "url": "https://raw.githubusercontent.com/tianhan1998/WechatMoocQuestion/master/src/main/java/cn/th/Utils/WeChatUtils.java", "stars": "2", "class": {"name": "WeChatUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["android", "android", "android"], "throws": null, "modifiers": ["public"], "return_type": "android", "snippet": "\tpublic android.view.View onCreateView (android.view.LayoutInflater p0, android.view.ViewGroup p1, android.os.Bundle p2)\t{\t\treturn n_onCreateView (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/FragmentContainer.java", "stars": "2", "class": {"name": "FragmentContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onCreateView", "params": ["android", "android", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "android", "snippet": "\tprivate native android.view.View n_onCreateView (android.view.LayoutInflater p0, android.view.ViewGroup p1, android.os.Bundle p2);\tpublic void onDestroyView ()\t{\t\tn_onDestroyView ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/FragmentContainer.java", "stars": "2", "class": {"name": "FragmentContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onDestroyView", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDestroyView ()\t{\t\tn_onDestroyView ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/FragmentContainer.java", "stars": "2", "class": {"name": "FragmentContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onDestroyView", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDestroyView ();\tpublic void onHiddenChanged (boolean p0)\t{\t\tn_onHiddenChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/FragmentContainer.java", "stars": "2", "class": {"name": "FragmentContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onHiddenChanged", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onHiddenChanged (boolean p0)\t{\t\tn_onHiddenChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/FragmentContainer.java", "stars": "2", "class": {"name": "FragmentContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onHiddenChanged", "params": ["boolean"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onHiddenChanged (boolean p0);\tpublic void onPause ()\t{\t\tn_onPause ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/FragmentContainer.java", "stars": "2", "class": {"name": "FragmentContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onPause ()\t{\t\tn_onPause ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/FragmentContainer.java", "stars": "2", "class": {"name": "FragmentContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onPause", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onPause ();\tpublic void onResume ()\t{\t\tn_onResume ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/FragmentContainer.java", "stars": "2", "class": {"name": "FragmentContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onResume ()\t{\t\tn_onResume ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/FragmentContainer.java", "stars": "2", "class": {"name": "FragmentContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onResume", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onResume ();\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/FragmentContainer.java", "stars": "2", "class": {"name": "FragmentContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/FragmentContainer.java", "stars": "2", "class": {"name": "FragmentContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/FragmentContainer.java", "stars": "2", "class": {"name": "FragmentContainer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "startElement", "params": ["String", "String", "String", "Attributes"], "throws": ["SAXException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {        if (qName.equalsIgnoreCase(\"data\")) {            channel = new JSONObject();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/netcast/NetcastChannelParser.java", "stars": "4", "class": {"name": "NetcastChannelParser", "extends": "DefaultHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "endElement", "params": ["String", "String", "String"], "throws": ["SAXException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void endElement(String uri, String localName, String qName) throws SAXException {        try {            if (qName.equalsIgnoreCase(\"data\")) {                channelArray.put(channel);            }            else if (qName.equalsIgnoreCase(CHANNEL_TYPE)) {                channel.put(\"channelModeName\", value);            }            else if (qName.equalsIgnoreCase(MAJOR)) {                channel.put(\"majorNumber\", Integer.parseInt(value));            }            else if (qName.equalsIgnoreCase(DISPLAY_MAJOR)) {                channel.put(\"displayMajorNumber\", Integer.parseInt(value));            }            else if (qName.equalsIgnoreCase(MINOR)) {                channel.put(\"minorNumber\", Integer.parseInt(value));            }            else if (qName.equalsIgnoreCase(DISPLAY_MINOR)) {                channel.put(\"displayMinorNumber\", Integer.parseInt(value));            }            else if (qName.equalsIgnoreCase(SOURCE_INDEX)) {                channel.put(\"sourceIndex\", value);            }            else if (qName.equalsIgnoreCase(PHYSICAL_NUM)) {                channel.put(\"physicalNumber\", Integer.parseInt(value));            }            else if (qName.equalsIgnoreCase(CHANNEL_NAME)) {                channel.put(\"channelName\", value);            }            else if (qName.equalsIgnoreCase(PROGRAM_NAME)) {                channel.put(\"programName\", value);            }            else if (qName.equalsIgnoreCase(AUDIO_CHANNEL)) {                channel.put(\"audioCh\", value);            }            else if (qName.equalsIgnoreCase(INPUT_SOURCE_NAME)) {                channel.put(\"inputSourceName\", value);            }            else if (qName.equalsIgnoreCase(INPUT_SOURCE_TYPE)) {                channel.put(\"inputSourceType\", value);            }            else if (qName.equalsIgnoreCase(LABEL_NAME)) {                channel.put(\"labelName\", value);            }            else if (qName.equalsIgnoreCase(INPUT_SOURCE_INDEX)) {                channel.put(\"inputSourceIndex\", value);            }            value = null;        } catch (JSONException e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/netcast/NetcastChannelParser.java", "stars": "4", "class": {"name": "NetcastChannelParser", "extends": "DefaultHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "characters", "params": ["char", "int", "int"], "throws": ["SAXException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void characters(char[] ch, int start, int length) throws SAXException {        value = new String(ch, start, length);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/netcast/NetcastChannelParser.java", "stars": "4", "class": {"name": "NetcastChannelParser", "extends": "DefaultHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getJSONChannelArray", "params": [], "throws": null, "modifiers": ["public"], "return_type": "JSONArray", "snippet": "    public JSONArray getJSONChannelArray() {        return channelArray;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/netcast/NetcastChannelParser.java", "stars": "4", "class": {"name": "NetcastChannelParser", "extends": "DefaultHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "parseRawChannelData", "params": ["JSONObject"], "throws": null, "modifiers": ["public", "static"], "return_type": "ChannelInfo", "snippet": "    public static ChannelInfo parseRawChannelData(JSONObject channelRawData) {        String channelName = null;        String channelId = null;        String channelNumber = null;        int minorNumber = 0;        int majorNumber = 0;        ChannelInfo channelInfo = new ChannelInfo();        channelInfo.setRawData(channelRawData);        try {            if (!channelRawData.isNull(\"channelName\"))                 channelName = (String) channelRawData.get(\"channelName\");            if (!channelRawData.isNull(\"channelId\"))                 channelId = (String) channelRawData.get(\"channelId\");            if (!channelRawData.isNull(\"majorNumber\"))                majorNumber = (Integer) channelRawData.get(\"majorNumber\");            if (!channelRawData.isNull(\"minorNumber\"))                minorNumber = (Integer) channelRawData.get(\"minorNumber\");            if (!channelRawData.isNull(\"channelNumber\"))                 channelNumber = (String) channelRawData.get(\"channelNumber\");            else {                channelNumber = String.format(String.valueOf(majorNumber) + \"-\" + String.valueOf(minorNumber));            }            channelInfo.setName(channelName);            channelInfo.setId(channelId);            channelInfo.setNumber(channelNumber);            channelInfo.setMajorNumber(majorNumber);            channelInfo.setMinorNumber(minorNumber);        } catch (JSONException e) {            e.printStackTrace();        }        return channelInfo;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/netcast/NetcastChannelParser.java", "stars": "4", "class": {"name": "NetcastChannelParser", "extends": "DefaultHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCommand", "params": ["CommandSender", "Command", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {        // This command is only for players.        if (!(sender instanceof Player)) {            sender.sendMessage(ChatColor.RED + \"This command is only for players!\");            return true;        }        Player player = (Player) sender;        // Get a Bukkit player adapter.        PlayerAdapter<Player> playerAdapter = this.luckPerms.getPlayerAdapter(Player.class);        // Get a LuckPerms user for the player.        User user = playerAdapter.getUser(player);        // Get all of the groups they inherit from on the current server.        Collection<Group> groups = user.getInheritedGroups(playerAdapter.getQueryOptions(player));        // Convert to a comma separated string (e.g. \"admin, mod, default\")        String groupsString = groups.stream().map(Group::getName).collect(Collectors.joining(\", \"));        // Tell the sender.        sender.sendMessage(ChatColor.RED + \"You inherit from: \" + groupsString);        return true;    }", "url": "https://raw.githubusercontent.com/LuckPerms/api-cookbook/master/src/main/java/me/lucko/lpcookbook/commands/GetGroupsCommand.java", "stars": "1", "class": {"name": "GetGroupsCommand", "extends": null, "implements": ["CommandExecutor"], "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "    static void setUp() throws Exception {        // create an SqlSessionFactory        try (Reader reader = Resources                .getResourceAsReader(\"org/apache/ibatis/submitted/enum_with_method/mybatis-config.xml\")) {            sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);        }        // populate in-memory database        BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),                \"org/apache/ibatis/submitted/enum_with_method/CreateDB.sql\");    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/enum_with_method/EnumWithMethodTest.java", "stars": "15", "class": {"name": "EnumWithMethodTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetAUser", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void shouldGetAUser() {        try (SqlSession sqlSession = sqlSessionFactory.openSession()) {            Mapper mapper = sqlSession.getMapper(Mapper.class);            User user = mapper.getUser(1);            Assertions.assertEquals(\"User1\", user.getName());        }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/enum_with_method/EnumWithMethodTest.java", "stars": "15", "class": {"name": "EnumWithMethodTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldInsertAUser", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void shouldInsertAUser() {        try (SqlSession sqlSession = sqlSessionFactory.openSession()) {            Mapper mapper = sqlSession.getMapper(Mapper.class);            User user = new User();            user.setId(2);            user.setName(\"User2\");            user.setCur(Currency.Dollar);            mapper.insertUser(user);        }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/enum_with_method/EnumWithMethodTest.java", "stars": "15", "class": {"name": "EnumWithMethodTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "checkFlowName", "params": ["Project", "File", "String", "Props"], "throws": null, "modifiers": ["public"], "return_type": "Boolean", "snippet": "  public Boolean checkFlowName(final Project project,final File archive,                               final String fileType, final Props additionalProps) {    log.info(\"Check if the flow name is greater > 128 !!!\");    final Props prop = new Props(this.props);    prop.putAll(additionalProps);    File file = null;    final FlowLoader loader;    file = unzipProject(archive, fileType);    loader = this.flowLoaderFactory.createFlowLoader(file);    loader.loadProjectFlow(project, file);    Boolean flag = true;    final Map<String, Flow> flows = loader.getFlowMap();    Set<String> flowIds = new HashSet<>();    for (Flow flow : flows.values()) {      flowIds.add(flow.getId());      if( flow.getNodes().size() >1){        for(Node node:flow.getNodes()){          flowIds.add(node.getId());          if(node.getEmbeddedFlowId() != null){            this.getNodeId(project,node.getEmbeddedFlowId(),flowIds) ;          }        }      }    }    for(String flowId:flowIds){      //\u6821\u9a8cflowId\u957f\u5ea6\u662f\u5426\u5927\u4e8e128      if (flowId.length() > 128) {        flag = false;        break;      }    }    if (!flag) {      return false;    }    return true;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/AzkabanProjectLoader.java", "stars": "18", "class": {"name": "AzkabanProjectLoader", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getNodeId", "params": ["Project", "String", "Set<String>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void getNodeId(Project project, String nodeId, Set<String> flowIds){    Flow flow = project.getFlow(nodeId);    if(flow != null ){      for(Node node:flow.getNodes()){        flowIds.add(node.getId());        if(node.getEmbeddedFlowId() != null){          this.getNodeId(project, node.getEmbeddedFlowId(), flowIds);        }      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/AzkabanProjectLoader.java", "stars": "18", "class": {"name": "AzkabanProjectLoader", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "uploadProject", "params": ["Project", "File", "String", "User", "Props"], "throws": ["ProjectManagerException", "ExecutorManagerException"], "modifiers": ["public"], "return_type": "Map<String,ValidationReport>", "snippet": "  public Map<String, ValidationReport> uploadProject(final Project project,      final File archive, final String fileType, final User uploader, final Props additionalProps)      throws ProjectManagerException, ExecutorManagerException {    log.info(\"Uploading files to \" + project.getName());    final Map<String, ValidationReport> reports;    // Since props is an instance variable of ProjectManager, and each    // invocation to the uploadProject manager needs to pass a different    // value for the PROJECT_ARCHIVE_FILE_PATH key, it is necessary to    // create a new instance of Props to make sure these different values    // are isolated from each other.    final Props prop = new Props(this.props);    prop.putAll(additionalProps);    File file = null;    final FlowLoader loader;    try {      file = unzipProject(archive, fileType);      reports = validateProject(project, archive, file, prop);      loader = this.flowLoaderFactory.createFlowLoader(file);      reports.put(DIRECTORY_FLOW_REPORT_KEY, loader.loadProjectFlow(project, file));      // Check the validation report.      if (!isReportStatusValid(reports, project)) {        FlowLoaderUtils.cleanUpDir(file);        return reports;      }      // Upload the project to DB and storage.      persistProject(project, loader, archive, file, uploader);    } finally {      FlowLoaderUtils.cleanUpDir(file);    }    // Clean up project old installations after new project is uploaded successfully.    cleanUpProjectOldInstallations(project);    return reports;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/AzkabanProjectLoader.java", "stars": "18", "class": {"name": "AzkabanProjectLoader", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "unzipProject", "params": ["File", "String"], "throws": ["ProjectManagerException"], "modifiers": ["private"], "return_type": "File", "snippet": "  private File unzipProject(final File archive, final String fileType)      throws ProjectManagerException {    final File file;    try {      if (fileType == null) {        throw new ProjectManagerException(\"Unknown file type for \"            + archive.getName());      } else if (\"zip\".equals(fileType)) {        file = unzipFile(archive);      } else {        throw new ProjectManagerException(\"Unsupported archive type for file \"            + archive.getName());      }    } catch (final IOException e) {      throw new ProjectManagerException(\"Error unzipping file.\", e);    }    return file;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/AzkabanProjectLoader.java", "stars": "18", "class": {"name": "AzkabanProjectLoader", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "validateProject", "params": ["Project", "File", "File", "Props"], "throws": null, "modifiers": ["private"], "return_type": "Map<String,ValidationReport>", "snippet": "  private Map<String, ValidationReport> validateProject(final Project project,      final File archive, final File file, final Props prop) {    prop.put(ValidatorConfigs.PROJECT_ARCHIVE_FILE_PATH,        archive.getAbsolutePath());    // Basically, we want to make sure that for different invocations to the    // uploadProject method,    // the validators are using different values for the    // PROJECT_ARCHIVE_FILE_PATH configuration key.    // In addition, we want to reload the validator objects for each upload, so    // that we can change the validator configuration files without having to    // restart Azkaban web server. If the XmlValidatorManager is an instance    // variable, 2 consecutive invocations to the uploadProject    // method might cause the second one to overwrite the    // PROJECT_ARCHIVE_FILE_PATH configuration parameter    // of the first, thus causing a wrong archive file path to be passed to the    // validators. Creating a separate XmlValidatorManager object for each    // upload will prevent this issue without having to add    // synchronization between uploads. Since we're already reloading the XML    // config file and creating validator objects for each upload, this does    // not add too much additional overhead.    final ValidatorManager validatorManager = new XmlValidatorManager(prop);    log.info(\"Validating project \" + archive.getName()        + \" using the registered validators \"        + validatorManager.getValidatorsInfo().toString());    return validatorManager.validate(project, file);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/AzkabanProjectLoader.java", "stars": "18", "class": {"name": "AzkabanProjectLoader", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "isReportStatusValid", "params": ["Map<String,ValidationReport>", "Project"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean isReportStatusValid(final Map<String, ValidationReport> reports,      final Project project) {    ValidationStatus status = ValidationStatus.PASS;    for (final Entry<String, ValidationReport> report : reports.entrySet()) {      if (report.getValue().getStatus().compareTo(status) > 0) {        status = report.getValue().getStatus();      }    }    if (status == ValidationStatus.ERROR) {      log.error(\"Error found in uploading to \" + project.getName());      return false;    }    return true;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/AzkabanProjectLoader.java", "stars": "18", "class": {"name": "AzkabanProjectLoader", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "persistProject", "params": ["Project", "FlowLoader", "File", "File", "User"], "throws": ["ProjectManagerException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void persistProject(final Project project, final FlowLoader loader, final File archive,      final File projectDir, final User uploader) throws ProjectManagerException {    synchronized (project) {      final int newProjectVersion = this.projectLoader.getLatestProjectVersion(project) + 1;      final Map<String, Flow> flows = loader.getFlowMap();      for (final Flow flow : flows.values()) {        flow.setProjectId(project.getId());        flow.setVersion(newProjectVersion);      }      this.storageManager.uploadProject(project, newProjectVersion, archive, uploader);      log.info(\"Uploading flow to db for project \" + archive.getName());      this.projectLoader.uploadFlows(project, newProjectVersion, flows.values());      log.info(\"Changing project versions for project \" + archive.getName());      this.projectLoader.changeProjectVersion(project, newProjectVersion,          uploader.getUserId());      project.setFlows(flows);      if (loader instanceof DirectoryFlowLoader) {        final DirectoryFlowLoader directoryFlowLoader = (DirectoryFlowLoader) loader;        log.info(\"Uploading Job properties\");        this.projectLoader.uploadProjectProperties(project, new ArrayList<>(            directoryFlowLoader.getJobPropsMap().values()));        log.info(\"Uploading Props properties\");        this.projectLoader.uploadProjectProperties(project, directoryFlowLoader.getPropsList());      } else if (loader instanceof DirectoryYamlFlowLoader) {        uploadFlowFilesRecursively(projectDir, project, newProjectVersion);      } else {        throw new ProjectManagerException(\"Invalid type of flow loader.\");      }      this.projectLoader.postEvent(project, EventType.UPLOADED, uploader.getUserId(),          \"Uploaded project files zip \" + archive.getName());    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/AzkabanProjectLoader.java", "stars": "18", "class": {"name": "AzkabanProjectLoader", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "uploadFlowFilesRecursively", "params": ["File", "Project", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void uploadFlowFilesRecursively(final File projectDir, final Project project, final int      newProjectVersion) {    for (final File file : projectDir.listFiles(new SuffixFilter(Constants.FLOW_FILE_SUFFIX))) {      final int newFlowVersion = this.projectLoader          .getLatestFlowVersion(project.getId(), newProjectVersion, file.getName()) + 1;      this.projectLoader          .uploadFlowFile(project.getId(), newProjectVersion, file, newFlowVersion);    }    for (final File file : projectDir.listFiles(new DirFilter())) {      uploadFlowFilesRecursively(file, project, newProjectVersion);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/AzkabanProjectLoader.java", "stars": "18", "class": {"name": "AzkabanProjectLoader", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "cleanUpProjectOldInstallations", "params": ["Project"], "throws": ["ProjectManagerException", "ExecutorManagerException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void cleanUpProjectOldInstallations(final Project project)      throws ProjectManagerException, ExecutorManagerException {    log.info(\"Cleaning up old install files older than \"        + (project.getVersion() - this.projectVersionRetention));    final Map<Integer, Pair<ExecutionReference, ExecutableFlow>> unfinishedFlows = this.executorLoader        .fetchUnfinishedFlowsMetadata();    final List<Integer> versionsWithUnfinishedExecutions = unfinishedFlows.values()        .stream().map(pair -> pair.getSecond())        .filter(exflow -> exflow.getProjectId() == project.getId())        .map(exflow -> exflow.getVersion())        .collect(Collectors.toList());    this.projectLoader.cleanOlderProjectVersion(project.getId(),        project.getVersion() - this.projectVersionRetention, versionsWithUnfinishedExecutions);    // Clean up storage    this.storageManager.cleanupProjectArtifacts(project.getId());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/AzkabanProjectLoader.java", "stars": "18", "class": {"name": "AzkabanProjectLoader", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "unzipFile", "params": ["File"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "File", "snippet": "  private File unzipFile(final File archiveFile) throws IOException {    final ZipFile zipfile = new ZipFile(archiveFile);    final File unzipped = Utils.createTempDir(this.tempDir);    Utils.unzip(zipfile, unzipped);    zipfile.close();    return unzipped;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/AzkabanProjectLoader.java", "stars": "18", "class": {"name": "AzkabanProjectLoader", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getProjectFile", "params": ["Project", "int"], "throws": ["ProjectManagerException"], "modifiers": ["public"], "return_type": "ProjectFileHandler", "snippet": "  public ProjectFileHandler getProjectFile(final Project project, int version)      throws ProjectManagerException {    if (version == -1) {      version = this.projectLoader.getLatestProjectVersion(project);    }    return this.storageManager.getProjectFile(project.getId(), version);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/AzkabanProjectLoader.java", "stars": "18", "class": {"name": "AzkabanProjectLoader", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items\t\t\t\t.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.BUILDING_BLOCKS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/ChiseledMudBricksBlock.java", "stars": "2", "class": {"name": "ChiseledMudBricksBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 0));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/ChiseledMudBricksBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        SpringApplication.run(RbacShiroApplication.class, args);    }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/RbacShiroApplication.java", "stars": "2", "class": {"name": "RbacShiroApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //\u521b\u5efaHashSet\u96c6\u5408\u5bf9\u8c61        HashSet<String> set = new HashSet<>();        String s1 = new String(\"abc\");        String s2 = new String(\"abc\");        set.add(s1);        set.add(s2);        set.add(\"\u91cd\u5730\");        set.add(\"\u901a\u8bdd\");        set.add(\"abc\");        System.out.println(set);//[\u91cd\u5730, \u901a\u8bdd, abc]    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/14.%E3%80%90List%E3%80%81Set%E3%80%91-%E7%AC%94%E8%AE%B0/code/03_ListAndSet/src/com/itheima/demo02/Set/Demo02HashSetSaveString.java", "stars": "2", "class": {"name": "Demo02HashSetSaveString", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create an SqlSessionFactory    try (Reader reader = Resources      .getResourceAsReader(\"org/apache/ibatis/submitted/resolution/cachereffromxml/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),      \"org/apache/ibatis/submitted/resolution/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/resolution/cachereffromxml/CacheRefFromXmlTest.java", "stars": "15", "class": {"name": "CacheRefFromXmlTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetAUser", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetAUser() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      UserMapper mapper = sqlSession.getMapper(UserMapper.class);      User user = mapper.getUser(1);      Assertions.assertEquals(Integer.valueOf(1), user.getId());      Assertions.assertEquals(\"User1\", user.getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/resolution/cachereffromxml/CacheRefFromXmlTest.java", "stars": "15", "class": {"name": "CacheRefFromXmlTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "formatListForPopcorn", "params": ["ArrayList<Media>", "MediaProvider", "SubsProvider"], "throws": null, "modifiers": ["public"], "return_type": "ArrayList<Media>", "snippet": "    public ArrayList<Media> formatListForPopcorn(ArrayList<Media> existingList, MediaProvider mediaProvider, SubsProvider subsProvider) {        for (Show item : responseItems) {            butter.droid.base.providers.media.models.Show show = new butter.droid.base.providers.media.models.Show();            show.title = item.getTitle();            show.videoId = item.getImdbId();            show.seasons = item.getNumSeasons();            show.tvdbId = item.getTvdbId();            show.year = item.getYear();            if (item.getImages().getPoster() != null && !item.getImages().getPoster().contains(\"images/posterholder.png\")) {                show.image = item.getImages().getPoster();                show.fullImage = item.getImages().getPoster().replace(\"w500\", \"w1280\");            }            if (item.getImages().getFanart() != null && item.getImages().getFanart().contains(\"images/posterholder.png\")) {                show.headerImage = item.getImages().getFanart().replace(\"w500\", \"original\");            }            existingList.add(show);        }        return existingList;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/response/TVResponse.java", "stars": "4", "class": {"name": "TVResponse", "extends": "Response", "implements": null, "modifiers": ["public"]}}, {"method_name": "getStartAddress", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getStartAddress() {        return start;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/UnmappedMemory.java", "stars": "4", "class": {"name": "UnmappedMemory", "extends": null, "implements": ["Addressable"], "modifiers": ["public", "final"]}}, {"method_name": "getEndAddress", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getEndAddress() {        return start + length - 1;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/UnmappedMemory.java", "stars": "4", "class": {"name": "UnmappedMemory", "extends": null, "implements": ["Addressable"], "modifiers": ["public", "final"]}}, {"method_name": "load16", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "short", "snippet": "    public short load16(int address) {        if (address == 0xd000) {            return (short)0xaa00;        }        else {            return 0;        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/UnmappedMemory.java", "stars": "4", "class": {"name": "UnmappedMemory", "extends": null, "implements": ["Addressable"], "modifiers": ["public", "final"]}}, {"method_name": "load8", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte load8(int address) {        if (address == 0xd000) {            return (byte)0xaa;        }        else {            return 0;        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/UnmappedMemory.java", "stars": "4", "class": {"name": "UnmappedMemory", "extends": null, "implements": ["Addressable"], "modifiers": ["public", "final"]}}, {"method_name": "store16", "params": ["int", "short"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void store16(int address, short value) {        // do nothing    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/UnmappedMemory.java", "stars": "4", "class": {"name": "UnmappedMemory", "extends": null, "implements": ["Addressable"], "modifiers": ["public", "final"]}}, {"method_name": "store8", "params": ["int", "byte"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void store8(int address, byte value) {        // do nothing    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/UnmappedMemory.java", "stars": "4", "class": {"name": "UnmappedMemory", "extends": null, "implements": ["Addressable"], "modifiers": ["public", "final"]}}, {"method_name": "find", "params": ["UUID"], "throws": null, "modifiers": ["public"], "return_type": "VipPlayer", "snippet": "    public VipPlayer find(UUID uuid) {        return vipPlayers.get(uuid);    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/cache/VipPlayerCache.java", "stars": "2", "class": {"name": "VipPlayerCache", "extends": null, "implements": ["DAO"], "modifiers": ["public"]}}, {"method_name": "insert", "params": ["UUID", "VipPlayer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void insert(UUID uuid, VipPlayer vipPlayer) {        vipPlayers.put(uuid, vipPlayer);    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/cache/VipPlayerCache.java", "stars": "2", "class": {"name": "VipPlayerCache", "extends": null, "implements": ["DAO"], "modifiers": ["public"]}}, {"method_name": "delete", "params": ["UUID"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void delete(UUID uuid) {        vipPlayers.remove(uuid);    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/cache/VipPlayerCache.java", "stars": "2", "class": {"name": "VipPlayerCache", "extends": null, "implements": ["DAO"], "modifiers": ["public"]}}, {"method_name": "get", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String get() {    return value;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutorManagerUpdaterStage.java", "stars": "18", "class": {"name": "ExecutorManagerUpdaterStage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "set", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void set(String value) {    this.value = value;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutorManagerUpdaterStage.java", "stars": "18", "class": {"name": "ExecutorManagerUpdaterStage", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onMeasure", "params": ["int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {        super.onMeasure(SquareDelegate.measureWidth(widthMeasureSpec, heightMeasureSpec),                SquareDelegate.measureHeight(widthMeasureSpec, heightMeasureSpec));    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/widget/src/main/java/com/hjq/widget/square/SquareRelativeLayout.java", "stars": "1", "class": {"name": "SquareRelativeLayout", "extends": "RelativeLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onCreate(Bundle savedInstanceState) {\t\tsuper.onCreate(savedInstanceState);\t\tsetContentView(R.layout.ac_image_gallery);\t\tBundle bundle = getIntent().getExtras();\t\timageUrls = bundle.getStringArray(Extra.IMAGES);\t\toptions = new DisplayImageOptions.Builder()\t\t\t.showStubImage(R.drawable.ic_stub)\t\t\t.showImageForEmptyUri(R.drawable.ic_empty)\t\t\t.showImageOnFail(R.drawable.ic_error)\t\t\t.cacheInMemory(true)\t\t\t.cacheOnDisc(true)\t\t\t.bitmapConfig(Bitmap.Config.RGB_565)\t\t\t.build();\t\tGallery gallery = (Gallery) findViewById(R.id.gallery);\t\tgallery.setAdapter(new ImageGalleryAdapter());\t\tgallery.setOnItemClickListener(new OnItemClickListener() {\t\t\t@Override\t\t\tpublic void onItemClick(AdapterView<?> parent, View view, int position, long id) {\t\t\t\tstartImagePagerActivity(position);\t\t\t}\t\t});\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/sample/src/com/imageloader/example/universalimageloader/ImageGalleryActivity.java", "stars": "74", "class": {"name": "ImageGalleryActivity", "extends": "BaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "startImagePagerActivity", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void startImagePagerActivity(int position) {\t\tIntent intent = new Intent(this, ImagePagerActivity.class);\t\tintent.putExtra(Extra.IMAGES, imageUrls);\t\tintent.putExtra(Extra.IMAGE_POSITION, position);\t\tstartActivity(intent);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/sample/src/com/imageloader/example/universalimageloader/ImageGalleryActivity.java", "stars": "74", "class": {"name": "ImageGalleryActivity", "extends": "BaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\t\tpublic int getCount() {\t\t\treturn imageUrls.length;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/sample/src/com/imageloader/example/universalimageloader/ImageGalleryActivity.java", "stars": "74", "class": {"name": "ImageGalleryAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "\t\tpublic Object getItem(int position) {\t\t\treturn position;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/sample/src/com/imageloader/example/universalimageloader/ImageGalleryActivity.java", "stars": "74", "class": {"name": "ImageGalleryAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "getItemId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "\t\tpublic long getItemId(int position) {\t\t\treturn position;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/sample/src/com/imageloader/example/universalimageloader/ImageGalleryActivity.java", "stars": "74", "class": {"name": "ImageGalleryAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "getView", "params": ["int", "View", "ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "\t\tpublic View getView(int position, View convertView, ViewGroup parent) {\t\t\tImageView imageView = (ImageView) convertView;\t\t\tif (imageView == null) {\t\t\t\timageView = (ImageView) getLayoutInflater().inflate(R.layout.item_gallery_image, parent, false);\t\t\t}\t\t\timageLoader.displayImage(imageUrls[position], imageView, options);\t\t\treturn imageView;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/sample/src/com/imageloader/example/universalimageloader/ImageGalleryActivity.java", "stars": "74", "class": {"name": "ImageGalleryAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "display", "params": ["Bitmap", "ImageView", "LoadedFrom"], "throws": null, "modifiers": ["public"], "return_type": "Bitmap", "snippet": "\tpublic Bitmap display(Bitmap bitmap, ImageView imageView, LoadedFrom loadedFrom) {\t\tBitmap roundedBitmap = roundCorners(bitmap, imageView, roundPixels);\t\timageView.setImageBitmap(roundedBitmap);\t\treturn roundedBitmap;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/display/RoundedBitmapDisplayer.java", "stars": "74", "class": {"name": "RoundedBitmapDisplayer", "extends": null, "implements": ["BitmapDisplayer"], "modifiers": ["public"]}}, {"method_name": "roundCorners", "params": ["Bitmap", "ImageView", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "Bitmap", "snippet": "\tpublic static Bitmap roundCorners(Bitmap bitmap, ImageView imageView, int roundPixels) {\t\tBitmap roundBitmap;\t\tint bw = bitmap.getWidth();\t\tint bh = bitmap.getHeight();\t\tint vw = imageView.getWidth();\t\tint vh = imageView.getHeight();\t\tif (vw <= 0) vw = bw;\t\tif (vh <= 0) vh = bh;\t\tint width, height;\t\tRect srcRect;\t\tRect destRect;\t\tswitch (imageView.getScaleType()) {\t\t\tcase CENTER_INSIDE:\t\t\t\tfloat vRation = (float) vw / vh;\t\t\t\tfloat bRation = (float) bw / bh;\t\t\t\tint destWidth;\t\t\t\tint destHeight;\t\t\t\tif (vRation > bRation) {\t\t\t\t\tdestHeight = Math.min(vh, bh);\t\t\t\t\tdestWidth = (int) (bw / ((float) bh / destHeight));\t\t\t\t} else {\t\t\t\t\tdestWidth = Math.min(vw, bw);\t\t\t\t\tdestHeight = (int) (bh / ((float) bw / destWidth));\t\t\t\t}\t\t\t\tint x = (vw - destWidth) / 2;\t\t\t\tint y = (vh - destHeight) / 2;\t\t\t\tsrcRect = new Rect(0, 0, bw, bh);\t\t\t\tdestRect = new Rect(x, y, x + destWidth, y + destHeight);\t\t\t\twidth = vw;\t\t\t\theight = vh;\t\t\t\tbreak;\t\t\tcase FIT_CENTER:\t\t\tcase FIT_START:\t\t\tcase FIT_END:\t\t\tdefault:\t\t\t\tvRation = (float) vw / vh;\t\t\t\tbRation = (float) bw / bh;\t\t\t\tif (vRation > bRation) {\t\t\t\t\twidth = (int) (bw / ((float) bh / vh));\t\t\t\t\theight = vh;\t\t\t\t} else {\t\t\t\t\twidth = vw;\t\t\t\t\theight = (int) (bh / ((float) bw / vw));\t\t\t\t}\t\t\t\tsrcRect = new Rect(0, 0, bw, bh);\t\t\t\tdestRect = new Rect(0, 0, width, height);\t\t\t\tbreak;\t\t\tcase CENTER_CROP:\t\t\t\tvRation = (float) vw / vh;\t\t\t\tbRation = (float) bw / bh;\t\t\t\tint srcWidth;\t\t\t\tint srcHeight;\t\t\t\tif (vRation > bRation) {\t\t\t\t\tsrcWidth = bw;\t\t\t\t\tsrcHeight = (int) (vh * ((float) bw / vw));\t\t\t\t\tx = 0;\t\t\t\t\ty = (bh - srcHeight) / 2;\t\t\t\t} else {\t\t\t\t\tsrcWidth = (int) (vw * ((float) bh / vh));\t\t\t\t\tsrcHeight = bh;\t\t\t\t\tx = (bw - srcWidth) / 2;\t\t\t\t\ty = 0;\t\t\t\t}\t\t\t\twidth = srcWidth;// Math.min(vw, bw);\t\t\t\theight = srcHeight;//Math.min(vh, bh);\t\t\t\tsrcRect = new Rect(x, y, x + srcWidth, y + srcHeight);\t\t\t\tdestRect = new Rect(0, 0, width, height);\t\t\t\tbreak;\t\t\tcase FIT_XY:\t\t\t\twidth = vw;\t\t\t\theight = vh;\t\t\t\tsrcRect = new Rect(0, 0, bw, bh);\t\t\t\tdestRect = new Rect(0, 0, width, height);\t\t\t\tbreak;\t\t\tcase CENTER:\t\t\tcase MATRIX:\t\t\t\twidth = Math.min(vw, bw);\t\t\t\theight = Math.min(vh, bh);\t\t\t\tx = (bw - width) / 2;\t\t\t\ty = (bh - height) / 2;\t\t\t\tsrcRect = new Rect(x, y, x + width, y + height);\t\t\t\tdestRect = new Rect(0, 0, width, height);\t\t\t\tbreak;\t\t}\t\ttry {\t\t\troundBitmap = getRoundedCornerBitmap(bitmap, roundPixels, srcRect, destRect, width, height);\t\t} catch (OutOfMemoryError e) {\t\t\tL.e(e, \"Can't create bitmap with rounded corners. Not enough memory.\");\t\t\troundBitmap = bitmap;\t\t}\t\treturn roundBitmap;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/display/RoundedBitmapDisplayer.java", "stars": "74", "class": {"name": "RoundedBitmapDisplayer", "extends": null, "implements": ["BitmapDisplayer"], "modifiers": ["public"]}}, {"method_name": "getRoundedCornerBitmap", "params": ["Bitmap", "int", "Rect", "Rect", "int", "int"], "throws": null, "modifiers": ["private", "static"], "return_type": "Bitmap", "snippet": "\tprivate static Bitmap getRoundedCornerBitmap(Bitmap bitmap, int roundPixels, Rect srcRect, Rect destRect, int width, int height) {\t\tBitmap output = Bitmap.createBitmap(width, height, Config.ARGB_8888);\t\tCanvas canvas = new Canvas(output);\t\tfinal Paint paint = new Paint();\t\tfinal RectF destRectF = new RectF(destRect);\t\tpaint.setAntiAlias(true);\t\tcanvas.drawARGB(0, 0, 0, 0);\t\tpaint.setColor(0xFF000000);\t\tcanvas.drawRoundRect(destRectF, roundPixels, roundPixels, paint);\t\tpaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));\t\tcanvas.drawBitmap(bitmap, srcRect, destRectF, paint);\t\treturn output;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/display/RoundedBitmapDisplayer.java", "stars": "74", "class": {"name": "RoundedBitmapDisplayer", "extends": null, "implements": ["BitmapDisplayer"], "modifiers": ["public"]}}, {"method_name": "testPage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testPage() {        DiskManager diskManager = new DiskManager(\"1.db\");        byte[] tempData = new byte[1024 * 2];        /*\u5411page0 -2 \u5199\u5165\u6570\u636e*/        Arrays.fill(tempData, (byte) 0);        diskManager.writePage(diskManager.allocatePage(), tempData);        Arrays.fill(tempData, (byte) 1);        diskManager.writePage(diskManager.allocatePage(), \"tempData\".getBytes());        Arrays.fill(tempData, (byte) 2);        diskManager.writePage(diskManager.allocatePage(), tempData);        /*\u8bfb\u53d6page 1\u4e2d\u7684\u6570\u636e*/        diskManager.readPage(1, tempData);        assertEquals(tempData.length, 1024 * 2);        log.debug(\"{}\", tempData);        /*\u5411page 5\u5199\u5165\u6570\u636e*/        Arrays.fill(tempData, (byte) 5);        diskManager.writePage(5, tempData);        diskManager.readPage(5, tempData);        assertEquals(tempData.length, 1024 * 2);        log.debug(\"{}\", tempData);        /*\u8bfb\u53d6page 6\u6570\u636e*/        diskManager.readPage(6, tempData);        log.debug(\"{}\", tempData);    }", "url": "https://raw.githubusercontent.com/CNYuYang/BusTub/master/src/test/java/run/yuyang/db/storage/disk/DiskManagerTest.java", "stars": "2", "class": {"name": "DiskManagerTest", "extends": "TestCase", "implements": null, "modifiers": ["public"]}}, {"method_name": "testLog", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testLog() {        DiskManager diskManager = new DiskManager(\"1.db\");        diskManager.writeLog(\"YuYang\".getBytes(), 6);        byte[] bytes = new byte[6];        diskManager.readLog(bytes, 6, 0);        log.debug(new String(bytes));    }", "url": "https://raw.githubusercontent.com/CNYuYang/BusTub/master/src/test/java/run/yuyang/db/storage/disk/DiskManagerTest.java", "stars": "2", "class": {"name": "DiskManagerTest", "extends": "TestCase", "implements": null, "modifiers": ["public"]}}, {"method_name": "getBoundSql", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "BoundSql", "snippet": "  public BoundSql getBoundSql(Object parameterObject) {    return new BoundSql(configuration, sql, parameterMappings, parameterObject);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/StaticSqlSource.java", "stars": "15", "class": {"name": "StaticSqlSource", "extends": null, "implements": ["SqlSource"], "modifiers": ["public"]}}, {"method_name": "getSql", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getSql(){     return sql;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/StaticSqlSource.java", "stars": "15", "class": {"name": "StaticSqlSource", "extends": null, "implements": ["SqlSource"], "modifiers": ["public"]}}, {"method_name": "findAllWithArticleCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<TagsVO>", "snippet": "    public List<TagsVO> findAllWithArticleCount() {        List<TagsVO> vos = tagMapper.selectAllWithArticleCount();        return vos;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/service/impl/TagsServiceImpl.java", "stars": "1", "class": {"name": "TagsServiceImpl", "extends": null, "implements": ["TagsService"], "modifiers": ["public"]}}, {"method_name": "findArticlesByTagName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "List<TagArticlesVO>", "snippet": "    public List<TagArticlesVO> findArticlesByTagName(String name) {        return articleMapper.selectArticleByTagName(name);    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/service/impl/TagsServiceImpl.java", "stars": "1", "class": {"name": "TagsServiceImpl", "extends": null, "implements": ["TagsService"], "modifiers": ["public"]}}, {"method_name": "findTagIfExist", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Tag", "snippet": "    public Tag findTagIfExist(String name) {        return tagMapper.selectByName(name);    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/service/impl/TagsServiceImpl.java", "stars": "1", "class": {"name": "TagsServiceImpl", "extends": null, "implements": ["TagsService"], "modifiers": ["public"]}}, {"method_name": "findAll", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Tag>", "snippet": "    public List<Tag> findAll() {        return tagMapper.selectAll();    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/service/impl/TagsServiceImpl.java", "stars": "1", "class": {"name": "TagsServiceImpl", "extends": null, "implements": ["TagsService"], "modifiers": ["public"]}}, {"method_name": "deleteById", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void deleteById(Long id) {        tagMapper.deleteByPrimaryKey(id);    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/service/impl/TagsServiceImpl.java", "stars": "1", "class": {"name": "TagsServiceImpl", "extends": null, "implements": ["TagsService"], "modifiers": ["public"]}}, {"method_name": "createOrUpdateTag", "params": ["Tag"], "throws": null, "modifiers": ["public"], "return_type": "Tag", "snippet": "    public Tag createOrUpdateTag(Tag tag) {        if (tag.getId() == null) {            // \u65b0\u589e            Long id = tagMapper.insert(tag);            tag.setId(id);        } else {            // \u4fee\u6539            tagMapper.updateByPrimaryKey(tag);        }        return tag;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/service/impl/TagsServiceImpl.java", "stars": "1", "class": {"name": "TagsServiceImpl", "extends": null, "implements": ["TagsService"], "modifiers": ["public"]}}, {"method_name": "startActivity", "params": ["Activity", "String", "MediaProvider", "MediaProvider", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Intent", "snippet": "    public static Intent startActivity(Activity activity, String title, MediaProvider.Filters.Sort sort, MediaProvider.Filters.Order defOrder, String genre) {        Intent intent = new Intent(activity, TVMediaGridActivity.class);        intent.putExtra(EXTRA_TITLE, title);        intent.putExtra(EXTRA_GENRE, genre);        intent.putExtra(EXTRA_ORDER, defOrder);        intent.putExtra(EXTRA_SORT, sort);        activity.startActivity(intent);        return intent;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVMediaGridActivity.java", "stars": "4", "class": {"name": "TVMediaGridActivity", "extends": "TVBaseActivity", "implements": ["TVMediaGridFragment"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        TVButterApplication.getAppContext()                .getComponent()                .inject(this);        super.onCreate(savedInstanceState, R.layout.activity_movie_media_grid);        mSort = (MediaProvider.Filters.Sort) getIntent().getExtras().getSerializable(EXTRA_SORT);        mDefOrder = (MediaProvider.Filters.Order) getIntent().getExtras().getSerializable(EXTRA_ORDER);        mGenre = getIntent().getExtras().getString(EXTRA_GENRE);        String title = getIntent().getExtras().getString(EXTRA_TITLE);        setTitle(title);        mFilter.setSort(mSort);        mFilter.setOrder(mDefOrder);        mFilter.setGenre(mGenre);        //add media fragment        getFragmentManager().beginTransaction().replace(R.id.fragment, TVMediaGridFragment.newInstance()).commit();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVMediaGridActivity.java", "stars": "4", "class": {"name": "TVMediaGridActivity", "extends": "TVBaseActivity", "implements": ["TVMediaGridFragment"], "modifiers": ["public"]}}, {"method_name": "getFilters", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MediaProvider", "snippet": "    public MediaProvider.Filters getFilters() {        return mFilter;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVMediaGridActivity.java", "stars": "4", "class": {"name": "TVMediaGridActivity", "extends": "TVBaseActivity", "implements": ["TVMediaGridFragment"], "modifiers": ["public"]}}, {"method_name": "draw", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void draw (android.graphics.Canvas p0)\t{\t\tn_draw (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellToolbarTracker_FlyoutIconDrawerDrawable.java", "stars": "2", "class": {"name": "ShellToolbarTracker_FlyoutIconDrawerDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_draw", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_draw (android.graphics.Canvas p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellToolbarTracker_FlyoutIconDrawerDrawable.java", "stars": "2", "class": {"name": "ShellToolbarTracker_FlyoutIconDrawerDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellToolbarTracker_FlyoutIconDrawerDrawable.java", "stars": "2", "class": {"name": "ShellToolbarTracker_FlyoutIconDrawerDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellToolbarTracker_FlyoutIconDrawerDrawable.java", "stars": "2", "class": {"name": "ShellToolbarTracker_FlyoutIconDrawerDrawable", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) throws IOException{\t\t// TODO Auto-generated method stub\t\t\t\tlong time;\t\t\t\tCPUDigitsOfPi bench = new CPUDigitsOfPi();\t\tITiming timer = new Timing();\t\tILogger fileLogger = new FileLogger(\"writefile.txt\");\t\tILogger consoleLogger = new ConsoleLogger();\t\t\t\tfinal int workload = 100;\t\t\t\tbench.initialize(workload,timer);\t\t\t\ttimer.start();\t\tbench.warmUp();\t\ttime = timer.stop();\t\tTimeUnit WarmupUnit = TimeUnit.Sec;\t\tfileLogger.writeTime(\"Warmup took \", time, WarmupUnit  );\t\tconsoleLogger.writeTime(\"Warmup took \", time, WarmupUnit  );\t\t\t\ttimer.start();\t\tfor(int i=0; i<12; ++i) {\t\t\ttimer.resume();\t\t\tbench.run(1,5000000);\t\t\tbench.run(0,5000000);\t\t\ttime = timer.pause();\t\t\tTimeUnit unit = TimeUnit.Sec;\t\t\tfileLogger.write(\"Run \"+  i +\":\",time);\t\t\tconsoleLogger.write(\"Run \"+ i +\":\",time);\t\t\tfileLogger.writeTime(\" =\", time, unit  );\t\t\tconsoleLogger.writeTime(\" =\", time, unit  );\t\t}\t\ttime = timer.stop();\t\t\t\tTimeUnit unit = TimeUnit.Sec;\t\tfileLogger.write(\"Took \", time, \"ns.\\n\");\t\tfileLogger.writeTime(\"Took \", time, unit  );\t\tconsoleLogger.write(\"Took \", time, \"ns.\\n\");\t\tconsoleLogger.writeTime(\"Took \", time, unit  );\t\tfileLogger.close();\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/testbench/TestCPUDigitsOfPi.java", "stars": "2", "class": {"name": "TestCPUDigitsOfPi", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void setUp() throws Exception {    // create a SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/typehandler/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);      sqlSessionFactory.getConfiguration().getTypeHandlerRegistry().register(StringTrimmingTypeHandler.class);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/typehandler/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/typehandler/TypeHandlerTest.java", "stars": "15", "class": {"name": "TypeHandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "addMapper", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void addMapper() {    sqlSessionFactory.getConfiguration().addMapper(Mapper.class);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/typehandler/TypeHandlerTest.java", "stars": "15", "class": {"name": "TypeHandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetAUser", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetAUser() {    addMapper();    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = mapper.getUser(1);      assertEquals(\"User1\", user.getName());      assertEquals(\"Carmel\", user.getCity());      assertEquals(\"IN\", user.getState());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/typehandler/TypeHandlerTest.java", "stars": "15", "class": {"name": "TypeHandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldApplyTypeHandlerOnGeneratedKey", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldApplyTypeHandlerOnGeneratedKey() {    addMapper();    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Product product = new Product();      product.setName(\"new product\");      mapper.insertProduct(product);      assertNotNull(product.getId());      assertNotNull(product.getId().getValue());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/typehandler/TypeHandlerTest.java", "stars": "15", "class": {"name": "TypeHandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldApplyTypeHandlerWithJdbcTypeSpecified", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldApplyTypeHandlerWithJdbcTypeSpecified() {    addMapper();    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Product product = mapper.getProductByName(\"iPad\");      assertEquals(Integer.valueOf(2), product.getId().getValue());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/typehandler/TypeHandlerTest.java", "stars": "15", "class": {"name": "TypeHandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldApplyTypeHandlerUsingConstructor", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldApplyTypeHandlerUsingConstructor() {    addMapper();    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Product product = mapper.getProductByName(\"iPad\");      assertEquals(Integer.valueOf(2), product.getId().getValue());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/typehandler/TypeHandlerTest.java", "stars": "15", "class": {"name": "TypeHandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldApplyTypeHandlerOnReturnTypeWithJdbcTypeSpecified", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldApplyTypeHandlerOnReturnTypeWithJdbcTypeSpecified() {    addMapper();    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      ProductId productId = mapper.getProductIdByName(\"iPad\");      assertEquals(Integer.valueOf(2), productId.getValue());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/typehandler/TypeHandlerTest.java", "stars": "15", "class": {"name": "TypeHandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldPickSoleTypeHandlerOnXmlResultMap", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldPickSoleTypeHandlerOnXmlResultMap() {    addMapper();    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Product product = mapper.getProductByNameXml(\"iPad\");      assertEquals(Integer.valueOf(2), product.getId().getValue());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/typehandler/TypeHandlerTest.java", "stars": "15", "class": {"name": "TypeHandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldPickSameTypeHandlerMappedToDifferentJdbcTypes", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldPickSameTypeHandlerMappedToDifferentJdbcTypes() {    sqlSessionFactory.getConfiguration().getTypeHandlerRegistry().register(ProductId.class, JdbcType.BIGINT, ProductIdTypeHandler.class);    addMapper();    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Product product = mapper.getProductByNameXml(\"iPad\");      assertEquals(Integer.valueOf(2), product.getId().getValue());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/typehandler/TypeHandlerTest.java", "stars": "15", "class": {"name": "TypeHandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldFailIfMultipleHandlerMappedToAType", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFailIfMultipleHandlerMappedToAType() {    sqlSessionFactory.getConfiguration().getTypeHandlerRegistry().register(ProductId.class, JdbcType.BIGINT, ConstantProductIdTypeHandler.class);    // multiple type handlers are mapped to ProductId and    // none of them are mapped to null jdbcType.    Assertions.assertThrows(BuilderException.class, this::addMapper);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/typehandler/TypeHandlerTest.java", "stars": "15", "class": {"name": "TypeHandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldPickHandlerForNull", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldPickHandlerForNull() {    sqlSessionFactory.getConfiguration().getTypeHandlerRegistry().register(ProductId.class, null, ConstantProductIdTypeHandler.class);    // multiple type handlers are mapped to ProductId and    // one of them are mapped to null jdbcType.    addMapper();    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Product product = mapper.getProductByNameXml(\"iPad\");      assertEquals(Integer.valueOf(999), product.getId().getValue());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/typehandler/TypeHandlerTest.java", "stars": "15", "class": {"name": "TypeHandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "updateDatabase", "params": [], "throws": ["SQLException", "IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void updateDatabase()      throws SQLException, IOException {    final Set<String> tables = collectAllTables();    createTables(tables);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-db/src/main/java/azkaban/db/DatabaseSetup.java", "stars": "18", "class": {"name": "DatabaseSetup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "collectAllTables", "params": [], "throws": null, "modifiers": ["private"], "return_type": "Set<String>", "snippet": "  private Set<String> collectAllTables() {    final Set<String> tables = new HashSet<>();    final File directory = new File(this.scriptPath);    final File[] createScripts =        directory.listFiles(new PrefixSuffixFileFilter(            CREATE_SCRIPT_PREFIX, SQL_SCRIPT_SUFFIX));    if (createScripts != null) {      for (final File script : createScripts) {        final String name = script.getName();        final String[] nameSplit = name.split(\"\\\\.\");        final String tableName = nameSplit[1];        tables.add(tableName);      }    }    return tables;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-db/src/main/java/azkaban/db/DatabaseSetup.java", "stars": "18", "class": {"name": "DatabaseSetup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createTables", "params": ["Set<String>"], "throws": ["SQLException", "IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void createTables(final Set<String> tables) throws SQLException, IOException {    final Connection conn = this.dataSource.getConnection();    conn.setAutoCommit(false);    try {      for (final String table : tables) {        runTableScripts(conn, table);      }    } finally {      conn.close();    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-db/src/main/java/azkaban/db/DatabaseSetup.java", "stars": "18", "class": {"name": "DatabaseSetup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "runTableScripts", "params": ["Connection", "String"], "throws": ["IOException", "SQLException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void runTableScripts(final Connection conn, final String table)      throws IOException, SQLException {    logger.info(\"Creating new table \" + table);    final String dbSpecificScript = \"create.\" + table + \".sql\";    final File script = new File(this.scriptPath, dbSpecificScript);    BufferedInputStream buff = null;    try {      buff = new BufferedInputStream(new FileInputStream(script));      final String queryStr = IOUtils.toString(buff);      final String[] splitQuery = queryStr.split(\";\\\\s*\\n\");      final QueryRunner runner = new QueryRunner();      for (final String query : splitQuery) {        runner.update(conn, query);      }      conn.commit();    } finally {      IOUtils.closeQuietly(buff);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-db/src/main/java/azkaban/db/DatabaseSetup.java", "stars": "18", "class": {"name": "DatabaseSetup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "accept", "params": ["File"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean accept(final File pathname) {      if (!pathname.isFile() || pathname.isHidden()) {        return false;      }      final String name = pathname.getName();      final int length = name.length();      return this.suffix.length() <= length && this.prefix.length() <= length && name          .startsWith(this.prefix) && name.endsWith(this.suffix);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-db/src/main/java/azkaban/db/DatabaseSetup.java", "stars": "18", "class": {"name": "PrefixSuffixFileFilter", "extends": null, "implements": ["FileFilter"], "modifiers": ["public", "static"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init() {        sdkUserRepository = GetBeanUtil.getBean(SdkUserRepository.class);        redisUtil = GetBeanUtil.getBean(RedisUtil.class);    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/service/game/impl/SdkUserServiceImpl.java", "stars": "1", "class": {"name": "SdkUserServiceImpl", "extends": null, "implements": ["SdkUserService"], "modifiers": ["public"]}}, {"method_name": "getSdkUser", "params": ["Request", "String", "Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "SdkUser", "snippet": "    public SdkUser getSdkUser(Request request, String token, Integer gameId, Integer gameNum) {        SdkUser sdkUser = null;        boolean flag = false;        if (!StringUtils.isEmpty(token)) {            String usernameFromToken = jwtTokenUtils.getUsernameFromToken(token);            log.info(\"token\u83b7\u53d6\u7684\u7528\u6237\u4fe1\u606f usernameFromToken:{}\", usernameFromToken);            if (Objects.nonNull(usernameFromToken)) {                String s = redisUtil.getHash(Const.Constant.TOKEN, usernameFromToken);                log.info(\"\u83b7\u53d6\u7684token s =:{}\", s);                if (!StringUtils.isEmpty(s)) {                    boolean equals = s.equals(token);                    if (equals) {                        flag = true;                    }                }            }            if (flag) {                String[] split = usernameFromToken.split(\"_\");                sdkUser = sdkUserRepository.findBySdkUserOpenidAndSdkUserChannelid(split[Const.Number.ZERO],Integer.valueOf(split[Const.Number.ONE]));                //todo \u600e\u4e48\u6837\u83b7\u53d6\u7528\u6237id                String userId = \"\";                Request ws = WebSocketManager.getWebSocket(Integer.valueOf(sdkUser.getSdkUserId()));                if (Objects.nonNull(ws)) {                    ws.close();                    log.info(\"\u73a9\u5bb6\u5f02\u5730\u767b\u9646 userId:{}\", ws.getUserId());                }                //\u5173\u95ed\u4e4b\u524d\u7684 \u521b\u5efa\u65b0\u7684\u8fde\u63a5            }            WebSocketManager.bindWebSocket(sdkUser.getSdkUserId(), request, gameId, gameNum);            request.setChannel(sdkUser.getSdkUserChannelid());            //\u653e\u7f6e\u7528\u623724\u5c0f\u65f6\u8fc7\u671f        }        return sdkUser;    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/service/game/impl/SdkUserServiceImpl.java", "stars": "1", "class": {"name": "SdkUserServiceImpl", "extends": null, "implements": ["SdkUserService"], "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run() {        for (int i = 0; i <20 ; i++) {            System.out.println(\"HelloWorld\"+i);        }    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/17.%E3%80%90%E7%BA%BF%E7%A8%8B%E3%80%81%E5%90%8C%E6%AD%A5%E3%80%91-%E7%AC%94%E8%AE%B0/code/06_Thread/src/com/itheima/demo04/Runnable/RunnableImpl2.java", "stars": "2", "class": {"name": "RunnableImpl2", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "encrypt", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String encrypt(Object object) {        try {            return encrypt(objectMapper.writeValueAsString(object));        } catch (JsonProcessingException e) {            log.error(\"Json parser error:\", e);        }        return null;    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/util/src/main/java/com/integration/util/security/BaseSecurityUtil.java", "stars": "2", "class": {"name": "BaseSecurityUtil", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "encrypt", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String encrypt(String strIn) {        try {            return Base64.encodeBase64String(encryptCipher.doFinal(strIn.getBytes()));        } catch (Exception e) {            log.error(\"encrypt error:\", e);        }        return strIn;    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/util/src/main/java/com/integration/util/security/BaseSecurityUtil.java", "stars": "2", "class": {"name": "BaseSecurityUtil", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "decrypt", "params": ["String", "Class<T>"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public <T> T decrypt(String strIn, Class<T> valueType) {        try {            return objectMapper.readValue(decrypt(strIn), valueType);        } catch (IOException e) {            log.error(\"Json parser error:\", e);        }        return null;    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/util/src/main/java/com/integration/util/security/BaseSecurityUtil.java", "stars": "2", "class": {"name": "BaseSecurityUtil", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "decrypt", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String decrypt(String strIn) {        try {            return new String(decryptCipher.doFinal(Base64.decodeBase64(strIn)));        } catch (Exception e) {            log.error(\"decrypt error:\", e);        }        return strIn;    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/util/src/main/java/com/integration/util/security/BaseSecurityUtil.java", "stars": "2", "class": {"name": "BaseSecurityUtil", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getSecurityType", "params": [], "throws": null, "modifiers": ["abstract"], "return_type": "String", "snippet": "    abstract String getSecurityType();    /**     * \u751f\u6210\u5bc6\u94a5     * @param keyStr \u5bc6\u94a5\u5b57\u4e32     * @return \u5bc6\u94a5\u7ed3\u6784\u4f53     * @throws Exception \u751f\u6210\u94a5\u5319\u7684\u5f02\u5e38     */    abstract Key generateKey(String keyStr) throws Exception;}", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/util/src/main/java/com/integration/util/security/BaseSecurityUtil.java", "stars": "2", "class": {"name": "BaseSecurityUtil", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "generateKey", "params": ["String"], "throws": ["Exception"], "modifiers": ["abstract"], "return_type": "Key", "snippet": "    abstract Key generateKey(String keyStr) throws Exception;}", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/util/src/main/java/com/integration/util/security/BaseSecurityUtil.java", "stars": "2", "class": {"name": "BaseSecurityUtil", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onStartPrepared", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public  void onStartPrepared(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/listener/SampleListener.java", "stars": "2", "class": {"name": "SampleListener", "extends": null, "implements": ["VideoAllCallBack"], "modifiers": ["public"]}}, {"method_name": "onPrepared", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPrepared(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/listener/SampleListener.java", "stars": "2", "class": {"name": "SampleListener", "extends": null, "implements": ["VideoAllCallBack"], "modifiers": ["public"]}}, {"method_name": "onClickStartIcon", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClickStartIcon(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/listener/SampleListener.java", "stars": "2", "class": {"name": "SampleListener", "extends": null, "implements": ["VideoAllCallBack"], "modifiers": ["public"]}}, {"method_name": "onClickStartError", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClickStartError(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/listener/SampleListener.java", "stars": "2", "class": {"name": "SampleListener", "extends": null, "implements": ["VideoAllCallBack"], "modifiers": ["public"]}}, {"method_name": "onClickStop", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClickStop(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/listener/SampleListener.java", "stars": "2", "class": {"name": "SampleListener", "extends": null, "implements": ["VideoAllCallBack"], "modifiers": ["public"]}}, {"method_name": "onClickStopFullscreen", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClickStopFullscreen(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/listener/SampleListener.java", "stars": "2", "class": {"name": "SampleListener", "extends": null, "implements": ["VideoAllCallBack"], "modifiers": ["public"]}}, {"method_name": "onClickResume", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClickResume(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/listener/SampleListener.java", "stars": "2", "class": {"name": "SampleListener", "extends": null, "implements": ["VideoAllCallBack"], "modifiers": ["public"]}}, {"method_name": "onClickResumeFullscreen", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClickResumeFullscreen(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/listener/SampleListener.java", "stars": "2", "class": {"name": "SampleListener", "extends": null, "implements": ["VideoAllCallBack"], "modifiers": ["public"]}}, {"method_name": "onClickSeekbar", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClickSeekbar(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/listener/SampleListener.java", "stars": "2", "class": {"name": "SampleListener", "extends": null, "implements": ["VideoAllCallBack"], "modifiers": ["public"]}}, {"method_name": "onClickSeekbarFullscreen", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClickSeekbarFullscreen(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/listener/SampleListener.java", "stars": "2", "class": {"name": "SampleListener", "extends": null, "implements": ["VideoAllCallBack"], "modifiers": ["public"]}}, {"method_name": "onAutoComplete", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onAutoComplete(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/listener/SampleListener.java", "stars": "2", "class": {"name": "SampleListener", "extends": null, "implements": ["VideoAllCallBack"], "modifiers": ["public"]}}, {"method_name": "onEnterFullscreen", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onEnterFullscreen(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/listener/SampleListener.java", "stars": "2", "class": {"name": "SampleListener", "extends": null, "implements": ["VideoAllCallBack"], "modifiers": ["public"]}}, {"method_name": "onQuitFullscreen", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onQuitFullscreen(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/listener/SampleListener.java", "stars": "2", "class": {"name": "SampleListener", "extends": null, "implements": ["VideoAllCallBack"], "modifiers": ["public"]}}, {"method_name": "onQuitSmallWidget", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onQuitSmallWidget(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/listener/SampleListener.java", "stars": "2", "class": {"name": "SampleListener", "extends": null, "implements": ["VideoAllCallBack"], "modifiers": ["public"]}}, {"method_name": "onEnterSmallWidget", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onEnterSmallWidget(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/listener/SampleListener.java", "stars": "2", "class": {"name": "SampleListener", "extends": null, "implements": ["VideoAllCallBack"], "modifiers": ["public"]}}, {"method_name": "onTouchScreenSeekVolume", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onTouchScreenSeekVolume(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/listener/SampleListener.java", "stars": "2", "class": {"name": "SampleListener", "extends": null, "implements": ["VideoAllCallBack"], "modifiers": ["public"]}}, {"method_name": "onTouchScreenSeekPosition", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onTouchScreenSeekPosition(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/listener/SampleListener.java", "stars": "2", "class": {"name": "SampleListener", "extends": null, "implements": ["VideoAllCallBack"], "modifiers": ["public"]}}, {"method_name": "onTouchScreenSeekLight", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onTouchScreenSeekLight(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/listener/SampleListener.java", "stars": "2", "class": {"name": "SampleListener", "extends": null, "implements": ["VideoAllCallBack"], "modifiers": ["public"]}}, {"method_name": "onPlayError", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPlayError(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/listener/SampleListener.java", "stars": "2", "class": {"name": "SampleListener", "extends": null, "implements": ["VideoAllCallBack"], "modifiers": ["public"]}}, {"method_name": "onClickStartThumb", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClickStartThumb(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/listener/SampleListener.java", "stars": "2", "class": {"name": "SampleListener", "extends": null, "implements": ["VideoAllCallBack"], "modifiers": ["public"]}}, {"method_name": "onClickBlank", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClickBlank(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/listener/SampleListener.java", "stars": "2", "class": {"name": "SampleListener", "extends": null, "implements": ["VideoAllCallBack"], "modifiers": ["public"]}}, {"method_name": "onClickBlankFullscreen", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClickBlankFullscreen(String url, Object... objects) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/listener/SampleListener.java", "stars": "2", "class": {"name": "SampleListener", "extends": null, "implements": ["VideoAllCallBack"], "modifiers": ["public"]}}, {"method_name": "loggingAspect", "params": ["Environment"], "throws": null, "modifiers": ["public"], "return_type": "LoggingAspect", "snippet": "    public LoggingAspect loggingAspect(Environment env) {        return new LoggingAspect(env);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/config/LoggingAspectConfiguration.java", "stars": "2", "class": {"name": "LoggingAspectConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "process", "params": ["ResponseEvent", "SipLayer", "SipConfig"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void process(ResponseEvent evt, SipLayer layer, SipConfig config) {\t\ttry {\t\t\tDialog dialog = evt.getDialog();\t\t\tRequest reqAck =dialog.createAck(1L);\t\t\tdialog.sendAck(reqAck);\t\t} catch (InvalidArgumentException | SipException e) {\t\t\te.printStackTrace();\t\t}\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/response/impl/InviteResponseProcessor.java", "stars": "29", "class": {"name": "InviteResponseProcessor", "extends": null, "implements": ["ISIPResponseProcessor"], "modifiers": ["public"]}}, {"method_name": "setMessage", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder setMessage(String message) {      this.message = message;      return this;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/utils/LoadingDialog.java", "stars": "2", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setShowMessage", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder setShowMessage(boolean isShowMessage) {      this.isShowMessage = isShowMessage;      return this;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/utils/LoadingDialog.java", "stars": "2", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setCancelable", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder setCancelable(boolean isCancelable) {      this.isCancelable = isCancelable;      return this;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/utils/LoadingDialog.java", "stars": "2", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setCancelOutside", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "    public Builder setCancelOutside(boolean isCancelOutside) {      this.isCancelOutside = isCancelOutside;      return this;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/utils/LoadingDialog.java", "stars": "2", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "create", "params": [], "throws": null, "modifiers": ["public"], "return_type": "LoadingDialog", "snippet": "    public LoadingDialog create() {      LayoutInflater inflater = LayoutInflater.from(context);      View view = inflater.inflate(R.layout.dialog_loading, null);      //Set up a dialog with a custom theme      //\u8bbe\u7f6e\u5e26\u81ea\u5b9a\u4e49\u4e3b\u9898\u7684dialog      LoadingDialog loadingDailog = new LoadingDialog(context, R.style.MyDialogStyle);      TextView msgText = (TextView) view.findViewById(R.id.tipTextView);      if (isShowMessage) {        msgText.setText(message);      } else {        msgText.setVisibility(View.GONE);      }      loadingDailog.setContentView(view);      loadingDailog.setCancelable(isCancelable);      loadingDailog.setCanceledOnTouchOutside(isCancelOutside);      return loadingDailog;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/utils/LoadingDialog.java", "stars": "2", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //\u521b\u5efaStringBuilder\u5bf9\u8c61        StringBuilder bu = new StringBuilder();        //\u4f7f\u7528append\u65b9\u6cd5\u5f80StringBuilder\u4e2d\u6dfb\u52a0\u6570\u636e        //append\u65b9\u6cd5\u8fd4\u56de\u7684\u662fthis,\u8c03\u7528\u65b9\u6cd5\u7684\u5bf9\u8c61bu,this==bu        //StringBuilder bu2 = bu.append(\"abc\");//\u628abu\u7684\u5730\u5740\u8d4b\u503c\u7ed9\u4e86bu2        //System.out.println(bu);//\"abc\"        //System.out.println(bu2);//\"abc\"        //System.out.println(bu==bu2);//\u6bd4\u8f83\u7684\u662f\u5730\u5740 true        //\u4f7f\u7528append\u65b9\u6cd5\u65e0\u9700\u63a5\u6536\u8fd4\u56de\u503c//        bu.append(\"abc\");//        bu.append(1);//        bu.append(true);//        bu.append(8.8);//        bu.append('\u4e2d');//        System.out.println(bu);//abc1true8.8\u4e2d        /*            \u94fe\u5f0f\u7f16\u7a0b:\u65b9\u6cd5\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u5bf9\u8c61,\u53ef\u4ee5\u7ee7\u7eed\u8c03\u7528\u65b9\u6cd5         */        System.out.println(\"abc\".toUpperCase().toLowerCase().toUpperCase().toLowerCase());        bu.append(\"abc\").append(1).append(true).append(8.8).append('\u4e2d');        System.out.println(bu);//abc1true8.8\u4e2d    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/12.%E3%80%90Object%E7%B1%BB%E3%80%81%E5%B8%B8%E7%94%A8API%E3%80%91-%E7%AC%94%E8%AE%B0/code/01_API/src/com/itheima/demo06StringBuilder/Demo02StringBuilder.java", "stars": "2", "class": {"name": "Demo02StringBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "preHandle", "params": ["HttpServletRequest", "HttpServletResponse", "Object"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {        if(conf.enable() && !request.getRequestURI().equals(conf.authLoginUrl())) {            String token = AppUtil.getCookieValue(request, AuthConstraints.DEFAULT_SSO_COOKIE);            Map<String, String> headers = authTokenHelper.getAuthHeader(token);            String loginId = headers.get(X_AUTH_ID);            String allowUriJson = headers.get(ALLOWEDURIS);            boolean status = false;            response.setContentType(\"application/json;charset=UTF-8\");            if (loginId != null) {                response.setStatus(200);                status = checkUrl(request, loginId);            } else if (null != allowUriJson) {                List<String> allowUri = Json.fromJson(allowUriJson, String.class);                assert allowUri != null;                String reqURI = request.getRequestURI();                for(String allow : allowUri){                    if(reqURI.startsWith(allow)){                        status = true;                        break;                    }                }            }            if(status){                if(handler instanceof HandlerMethod){                    HandlerMethod method = (HandlerMethod)handler;                    if(method.getMethod().isAnnotationPresent(ContainerAPI.class)                            && loginId != null){                        status = false;                    }                }            }            if (!status) {                Response<String> r = new Response<>();                String m = \"The current user doesn't have permission to access the interface\";                r.errorResponse(CodeConstant.AUTH_ERROR, null, m);                //illegal request                response.setStatus(HttpStatus.UNAUTHORIZED.value());                response.getWriter().write(Objects.requireNonNull(Json.toJson(r, null)));            }            return status;        }        return true;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/auth/interceptors/AuthorityInterceptor.java", "stars": "23", "class": {"name": "AuthorityInterceptor", "extends": null, "implements": ["HandlerInterceptor"], "modifiers": ["public"]}}, {"method_name": "checkUrl", "params": ["HttpServletRequest", "String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean checkUrl(HttpServletRequest request, String loginid){        //TODO uc to validate        return true;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/auth/interceptors/AuthorityInterceptor.java", "stars": "23", "class": {"name": "AuthorityInterceptor", "extends": null, "implements": ["HandlerInterceptor"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tComparator<String> comparator = new Comparator<String>() {\t\t\t@Override\t\t\tpublic int compare(String o1, String o2) {\t\t\t\treturn o1.compareTo(o2);\t\t\t}\t\t};\t\tNTree<String> nTree = new NTree<String>(comparator);\t\t\t\tnTree.add(\"Root\");\t\tnTree.add(\"1.1\", \"Root\");\t\tnTree.add(\"1.2\", \"Root\");\t\tnTree.add(\"1.3\", \"Root\");\t\t\t\tSimpleList<NTreeNode<String>> sl = nTree.getRoot().getChilds();\t\tSimpleNode<NTreeNode<String>> aux = sl.getHead();\t\t\t\twhile(aux!=null) {\t\t\tSystem.out.println(aux.getInfo().getInfo());\t\t\taux = aux.getNext();\t\t}\t}", "url": "https://raw.githubusercontent.com/FabianCristancho/Grammatical-Tree-LF/master/tst/tests/TestNTree.java", "stars": "1", "class": {"name": "TestNTree", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isFastClick", "params": ["long"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isFastClick(long minCheckTime) {        boolean flag = false;        long curClickTime = System.currentTimeMillis();        if ((curClickTime - lastClickTime) < minCheckTime) {            flag = true;        }        lastClickTime = curClickTime;        return flag;    }", "url": "https://raw.githubusercontent.com/itliuhao/haoLabrary/master/baselibrary/src/main/java/com/wander/baselibrary/ioc/OnClickCheckUtils.java", "stars": "2", "class": {"name": "OnClickCheckUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "netWorkAvailable", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean netWorkAvailable(Context context) {        ConnectivityManager mConnectivityManager = (ConnectivityManager) context                .getSystemService(Context.CONNECTIVITY_SERVICE);        NetworkInfo mNetworkInfo = mConnectivityManager.getActiveNetworkInfo();        if (mNetworkInfo != null) {            return mNetworkInfo.isAvailable();        }        return false;    }", "url": "https://raw.githubusercontent.com/itliuhao/haoLabrary/master/baselibrary/src/main/java/com/wander/baselibrary/ioc/OnClickCheckUtils.java", "stars": "2", "class": {"name": "OnClickCheckUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onBackStackChanged", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onBackStackChanged ()\t{\t\tn_onBackStackChanged ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v4/app/FragmentManager_OnBackStackChangedListenerImplementor.java", "stars": "2", "class": {"name": "FragmentManager_OnBackStackChangedListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onBackStackChanged", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onBackStackChanged ();\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v4/app/FragmentManager_OnBackStackChangedListenerImplementor.java", "stars": "2", "class": {"name": "FragmentManager_OnBackStackChangedListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v4/app/FragmentManager_OnBackStackChangedListenerImplementor.java", "stars": "2", "class": {"name": "FragmentManager_OnBackStackChangedListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v4/app/FragmentManager_OnBackStackChangedListenerImplementor.java", "stars": "2", "class": {"name": "FragmentManager_OnBackStackChangedListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "getRequestId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getRequestId() {        String requestId = requestIdTL.get();        if (requestId == null || \"\".equals(requestId)) {            requestId = Thread.currentThread().getId() + \":\" + UUID.randomUUID().toString();            requestIdTL.set(requestId);        }        log.debug(\"current_request_Id is {} ,current_request_ThreadName is {} \" + requestId + \",\" + Thread.currentThread().getName());        return requestId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/distributelock/AbstractDistributeLock.java", "stars": "18", "class": {"name": "AbstractDistributeLock", "extends": null, "implements": ["DistributeLockAdapter"], "modifiers": ["public"]}}, {"method_name": "get", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "DistributeLock", "snippet": "    public DistributeLock get(String lock_resource) {        DistributeLock distributeLock = null;        try {            distributeLock = dbOperator.query(FetchDistributeLockHandler.FETCH_APPOINT_DISTRIBUTELOCK,                    new FetchDistributeLockHandler(),lock_resource);        } catch (Exception e) {            log.error(\"get exists lock failed {} lock_resource:\" + lock_resource , e);        }        return distributeLock;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/distributelock/AbstractDistributeLock.java", "stars": "18", "class": {"name": "AbstractDistributeLock", "extends": null, "implements": ["DistributeLockAdapter"], "modifiers": ["public"]}}, {"method_name": "insert", "params": ["DistributeLock"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int insert(DistributeLock distributeLock) {        String querySQL = \"insert into distribute_lock (request_id,lock_resource,lock_count,version,ip,timeout,create_time,update_time) \" +                \" values (?,?,?,?,?,?,?,?)\";        int result = 0;        try {            result = dbOperator.update(querySQL, distributeLock.getRequest_id(), distributeLock.getLock_resource(),                    distributeLock.getLock_count(),distributeLock.getVersion(),distributeLock.getIp(),                    distributeLock.getTimeout(),distributeLock.getCreate_time(), distributeLock.getUpdate_time());        } catch (SQLException e) {            log.error(\"acquire a lock failed {} distributeLock info:\" + distributeLock.toString() , e);        }        return result;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/distributelock/AbstractDistributeLock.java", "stars": "18", "class": {"name": "AbstractDistributeLock", "extends": null, "implements": ["DistributeLockAdapter"], "modifiers": ["public"]}}, {"method_name": "delete", "params": ["DistributeLock"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int delete(DistributeLock distributeLock) {        String querySQL = \"delete from distribute_lock \" +                \"WHERE lock_resource = ?\";        int result = 0;        try {            result = dbOperator.update(querySQL, distributeLock.getLock_resource());        } catch (SQLException e) {            log.error(\"delete lock failed {} distributeLock info:\" + distributeLock.toString() , e);        }        return result;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/distributelock/AbstractDistributeLock.java", "stars": "18", "class": {"name": "AbstractDistributeLock", "extends": null, "implements": ["DistributeLockAdapter"], "modifiers": ["public"]}}, {"method_name": "updateLock", "params": ["DistributeLock"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int updateLock(DistributeLock distributeLock) {        String querySQL = \"update distribute_lock dl set request_id=?,lock_count=?,version=version+1,ip=?,timeout=?,update_time=? \" +                \"WHERE lock_resource =? and version =?\";        int result = 0;        try {            result = dbOperator.update(querySQL, distributeLock.getRequest_id(),distributeLock.getLock_count(),                    distributeLock.getIp(), distributeLock.getTimeout(),distributeLock.getUpdate_time(),                    distributeLock.getLock_resource(), distributeLock.getVersion());        } catch (SQLException e) {            log.error(\"update lock failed {} distributeLock info:\" + distributeLock.toString() , e);        }        return result;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/distributelock/AbstractDistributeLock.java", "stars": "18", "class": {"name": "AbstractDistributeLock", "extends": null, "implements": ["DistributeLockAdapter"], "modifiers": ["public"]}}, {"method_name": "lock", "params": ["String", "long", "long"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean lock(String lock_key, long locktimeout, long gettimeout) {        return false;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/distributelock/AbstractDistributeLock.java", "stars": "18", "class": {"name": "AbstractDistributeLock", "extends": null, "implements": ["DistributeLockAdapter"], "modifiers": ["public"]}}, {"method_name": "unlock", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void unlock(String lock_key) { }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/distributelock/AbstractDistributeLock.java", "stars": "18", "class": {"name": "AbstractDistributeLock", "extends": null, "implements": ["DistributeLockAdapter"], "modifiers": ["public"]}}, {"method_name": "resetLock", "params": ["DistributeLock"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int resetLock(DistributeLock distributeLock) {        return 0;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/distributelock/AbstractDistributeLock.java", "stars": "18", "class": {"name": "AbstractDistributeLock", "extends": null, "implements": ["DistributeLockAdapter"], "modifiers": ["public"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "DistributeLock", "snippet": "        public DistributeLock handle(final ResultSet rs) throws SQLException {            if (!rs.next()) {                log.info(\"there is no exist lock\");                return null;            }            final int id = rs.getInt(1);            final String request_id = rs.getString(2);            final String lock_resource = rs.getString(3);            final long lock_count = rs.getInt(4);            final int version = rs.getInt(5);            final String ip = rs.getString(6);            final long timeout = rs.getLong(7);            final long create_time = rs.getLong(8);            final long update_time = rs.getLong(9);            DistributeLock distributeLock = new DistributeLock(id,request_id, lock_resource, lock_count,version,                    ip,timeout,create_time,update_time);            return distributeLock;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/distributelock/AbstractDistributeLock.java", "stars": "18", "class": {"name": "FetchDistributeLockHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["public", "static"]}}, {"method_name": "initComponents", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initComponents() {        jPanel1 = new javax.swing.JPanel();        nameFile = new javax.swing.JTextField();        jLabel1 = new javax.swing.JLabel();        listaTipos = new javax.swing.JComboBox();        jLabel2 = new javax.swing.JLabel();        ok = new javax.swing.JButton();        cancelar = new javax.swing.JButton();        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);        addWindowListener(new java.awt.event.WindowAdapter() {            public void windowClosing(java.awt.event.WindowEvent evt) {                formWindowClosing(evt);            }        });        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());        jLabel1.setText(\"Nombre del archivo:\");        listaTipos.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \".txt\", \".mem\" }));        jLabel2.setText(\"Tipo de archivo:\");        ok.setText(\"Aceptar\");        ok.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                okActionPerformed(evt);            }        });        cancelar.setText(\"Cancelar\");        cancelar.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                cancelarActionPerformed(evt);            }        });        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);        jPanel1.setLayout(jPanel1Layout);        jPanel1Layout.setHorizontalGroup(            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)            .addGroup(jPanel1Layout.createSequentialGroup()                .addContainerGap()                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)                    .addComponent(jLabel1)                    .addComponent(jLabel2))                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)                    .addGroup(jPanel1Layout.createSequentialGroup()                        .addComponent(cancelar)                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)                        .addComponent(ok)                        .addGap(0, 87, Short.MAX_VALUE))                    .addComponent(listaTipos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)                    .addComponent(nameFile))                .addContainerGap())        );        jPanel1Layout.setVerticalGroup(            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)            .addGroup(jPanel1Layout.createSequentialGroup()                .addGap(14, 14, 14)                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)                    .addComponent(jLabel1)                    .addComponent(nameFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))                .addGap(18, 18, 18)                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)                    .addComponent(listaTipos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)                    .addComponent(jLabel2))                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)                    .addComponent(ok)                    .addComponent(cancelar))                .addContainerGap())        );        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());        getContentPane().setLayout(layout);        layout.setHorizontalGroup(            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)            .addGroup(layout.createSequentialGroup()                .addContainerGap()                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)                .addContainerGap())        );        layout.setVerticalGroup(            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)            .addGroup(layout.createSequentialGroup()                .addContainerGap()                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)                .addContainerGap())        );        pack();    }", "url": "https://raw.githubusercontent.com/vandelvan/Decodificador/master/InstructionSet/src/main/SelectName.java", "stars": "2", "class": {"name": "SelectName", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "okActionPerformed", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okActionPerformed                //Se tome el nombre escrito en el campo        nombre = nameFile.getText();        //Si no se pone nombre se coloca uno por defaul, usando el horario (Cambiar a fecha)        if(nombre.equals(\"\")){            nombre = \"Sin_Nombre_\" + calendario.get(Calendar.HOUR_OF_DAY) + calendario.get(Calendar.MINUTE) + calendario.get(Calendar.SECOND);        }        //Ahora se crea la ruta para guardar el archivo        gr = new GenerarRuta(nombre, JFileChooser.DIRECTORIES_ONLY);                //Comprobacion para evitar errores al momento de presionar cancelar en el JFilechoser        if(!gr.getRutaArchivo().equals(\"\")){             //Se le concatena la extencion del archivo, .txt o .mem            ruta = gr.getRutaNom() + listaTipos.getSelectedItem();            System.out.println(ruta);            //Se crea el archivo, se manda por paramentros los datos y la ruta, a la clase de CrearArchivo            ca.crear(datos, ruta);            //Metodo para mostrar una nueva ventana del editor, con el archivo que se guardo seleccionado            ventanaEditor();        }else{            //Metodo para mostrar una nueva ventana del editor, con el archivo que se guardo seleccionado            ventanaEditor();        }                    }", "url": "https://raw.githubusercontent.com/vandelvan/Decodificador/master/InstructionSet/src/main/SelectName.java", "stars": "2", "class": {"name": "SelectName", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "cancelarActionPerformed", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarActionPerformed        ventanaEditor();    }", "url": "https://raw.githubusercontent.com/vandelvan/Decodificador/master/InstructionSet/src/main/SelectName.java", "stars": "2", "class": {"name": "SelectName", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "formWindowClosing", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing        ventanaEditor();    }", "url": "https://raw.githubusercontent.com/vandelvan/Decodificador/master/InstructionSet/src/main/SelectName.java", "stars": "2", "class": {"name": "SelectName", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "ventanaEditor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void ventanaEditor(){        dispose();        //Se define el objeto y se le mada la ruta y los datos guardados        te = new TextEditor(ruta, datos);        te.setLocationRelativeTo(null);        te.setVisible(true);    }", "url": "https://raw.githubusercontent.com/vandelvan/Decodificador/master/InstructionSet/src/main/SelectName.java", "stars": "2", "class": {"name": "SelectName", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLongitude", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getLongitude() {        return longitude;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/IssPosition.java", "stars": "1", "class": {"name": "IssPosition", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLongitude", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLongitude(String longitude) {        this.longitude = longitude;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/IssPosition.java", "stars": "1", "class": {"name": "IssPosition", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLatitude", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getLatitude() {        return latitude;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/IssPosition.java", "stars": "1", "class": {"name": "IssPosition", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLatitude", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLatitude(String latitude) {        this.latitude = latitude;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/IssPosition.java", "stars": "1", "class": {"name": "IssPosition", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAdditionalProperties", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "    public Map<String, Object> getAdditionalProperties() {        return this.additionalProperties;    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/IssPosition.java", "stars": "1", "class": {"name": "IssPosition", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAdditionalProperty", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAdditionalProperty(String name, Object value) {        this.additionalProperties.put(name, value);    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/IssPosition.java", "stars": "1", "class": {"name": "IssPosition", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"IssPosition{\" +                \"longitude='\" + longitude + '\\'' +                \", latitude='\" + latitude + '\\'' +                '}';    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/model/pojo/IssPosition.java", "stars": "1", "class": {"name": "IssPosition", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isToday", "params": ["Date"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isToday(Date date) {        Date now = new Date();        boolean result = true;        result &= date.getYear() == now.getYear();        result &= date.getMonth() == now.getMonth();        result &= date.getDate() == now.getDate();        return result;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "DaysBetween", "params": ["Date", "Date"], "throws": null, "modifiers": ["public", "static"], "return_type": "long", "snippet": "    public static long DaysBetween(Date date1, Date date2) {        if(date2 == null) {            date2 = new Date();        }        long day = (date2.getTime() - date1.getTime()) / 86400000L;        return day;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "compareDate", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean compareDate(String date1, String date2) {        SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");        try {            Date e = format.parse(date1);            Date d2 = format.parse(date2);            return !e.after(d2);        } catch (ParseException var5) {            var5.printStackTrace();            return false;        }    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "dateFormat", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Date", "snippet": "    public static Date dateFormat(String date, String dateFormat) {        if(date == null) {            return null;        } else {            SimpleDateFormat format = new SimpleDateFormat(dateFormat);            try {                return format.parse(date);            } catch (Exception ignored) {            }            return null;        }    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "dateFormat", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Date", "snippet": "    public static Date dateFormat(String date) {        return dateFormat(date, \"yyyy-MM-dd HH:mm:ss\");    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "dateFormat", "params": ["Date", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String dateFormat(Date date, String dateFormat) {        if(date != null) {            SimpleDateFormat format = new SimpleDateFormat(dateFormat);            if(date != null) {                return format.format(date);            }        }        return \"\";    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "birthdayFormat", "params": ["Date"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String birthdayFormat(Date date) {        if(date != null) {            SimpleDateFormat format = null;            if(date.before(tempDate)) {                format = new SimpleDateFormat(\"MM-dd\");            } else {                format = new SimpleDateFormat(\"yyyy-MM-dd\");            }            if(date != null) {                return format.format(date);            }        }        return \"\";    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "dateFormat", "params": ["Date"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String dateFormat(Date date) {        return dateFormat(date, \"yyyy-MM-dd HH:mm:ss\");    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isExpiredDay", "params": ["Date"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isExpiredDay(Date date1) {        long day = ((new Date()).getTime() - date1.getTime()) / 86400000L;        return day >= 1L;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getYesterday", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Date", "snippet": "    public static Date getYesterday() {        Date date = new Date();        long time = date.getTime() / 1000L - 86400L;        date.setTime(time * 1000L);        SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");        try {            date = format.parse(format.format(date));        } catch (Exception var5) {            System.out.println(var5.getMessage());        }        return date;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getWeekAgo", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Date", "snippet": "    public static Date getWeekAgo() {        Date date = new Date();        long time = date.getTime() / 1000L - 604800L;        date.setTime(time * 1000L);        SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");        try {            date = format.parse(format.format(date));        } catch (Exception var5) {            System.out.println(var5.getMessage());        }        return date;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDaysAgo", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getDaysAgo(int interval) {        Date date = new Date();        long time = date.getTime() / 1000L - (long)(interval * 60 * 60 * 24);        date.setTime(time * 1000L);        SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");        try {            return format.format(date);        } catch (Exception var6) {            System.out.println(var6.getMessage());            return \"\";        }    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTomorrow", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Date", "snippet": "    public static Date getTomorrow() {        Date date = new Date();        long time = date.getTime() / 1000L + 86400L;        date.setTime(time * 1000L);        SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");        try {            date = format.parse(format.format(date));        } catch (Exception var5) {            System.out.println(var5.getMessage());        }        return date;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBeforeDate", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Date", "snippet": "    public static Date getBeforeDate(String range) {        Calendar today = Calendar.getInstance();        if(\"week\".equalsIgnoreCase(range)) {            today.add(4, -1);        } else if(\"month\".equalsIgnoreCase(range)) {            today.add(2, -1);        } else {            today.clear();        }        return today.getTime();    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getThisWeekStartTime", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Date", "snippet": "    public static Date getThisWeekStartTime() {        Calendar today = Calendar.getInstance();        today.set(7, today.getFirstDayOfWeek());        Calendar weekFirstDay = Calendar.getInstance();        weekFirstDay.clear();        weekFirstDay.set(1, today.get(1));        weekFirstDay.set(2, today.get(2));        weekFirstDay.set(5, today.get(5));        return weekFirstDay.getTime();    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getToday", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getToday(String format) {        String result = \"\";        try {            Date today = new Date();            SimpleDateFormat simpleFormat = new SimpleDateFormat(format);            result = simpleFormat.format(today);        } catch (Exception var4) {            ;        }        return result;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStartDay", "params": ["int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "Date", "snippet": "    public static Date getStartDay(int year, int month) {        Calendar today = Calendar.getInstance();        today.clear();        today.set(1, year);        today.set(2, month - 1);        today.set(5, 1);        return today.getTime();    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBeforeYearList", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<Integer>", "snippet": "    public static List<Integer> getBeforeYearList(int before) {        Calendar today = Calendar.getInstance();        int theYear = today.get(1);        ArrayList list = new ArrayList();        for(int i = before; i >= 0; --i) {            list.add(Integer.valueOf(theYear - i));        }        return list;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "dateAdd", "params": ["int", "Date", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "Date", "snippet": "    public static Date dateAdd(int interval, Date date, int n) {        long time = date.getTime() / 1000L;        switch(interval) {            case 1:                time += (long)(n * 86400);                break;            case 2:                time += (long)(n * 604800);                break;            case 3:                time += (long)(n * 2678400);                break;            case 4:                time += (long)(n * 31536000);                break;            case 5:                time += (long)(n * 3600);                break;            case 6:                time += (long)(n * 60);                break;            case 7:                time += (long)n;        }        Date result = new Date();        result.setTime(time * 1000L);        return result;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "dateDiff", "params": ["int", "Date", "Date"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int dateDiff(int interval, Date begin, Date end) {        long beginTime = begin.getTime() / 1000L;        long endTime = end.getTime() / 1000L;        long tmp = 0L;        if(endTime == beginTime) {            return 0;        } else {            if(endTime < beginTime) {                tmp = beginTime;                beginTime = endTime;                endTime = tmp;            }            long intervalTime = endTime - beginTime;            long result = 0L;            switch(interval) {                case 1:                    result = intervalTime / 86400L;                    break;                case 2:                    result = intervalTime / 604800L;                    break;                case 3:                    result = intervalTime / 2678400L;                    break;                case 4:                    result = intervalTime / 31536000L;                    break;                case 5:                    result = intervalTime / 3600L;                    break;                case 6:                    result = intervalTime / 60L;                    break;                case 7:                    result = intervalTime / 1L;            }            if(tmp > 0L) {                result = 0L - result;            }            return (int)result;        }    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTodayYear", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getTodayYear() {        int yyyy = Integer.parseInt(dateFormat(new Date(), \"yyyy\"));        return yyyy;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNow", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Date", "snippet": "    public static Date getNow() {        return new Date();    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "dateFormatRss", "params": ["Date"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String dateFormatRss(Date date) {        return date != null?dateFormat(date, \"E, d MMM yyyy H:mm:ss\") + \" GMT\":\"\";    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "betweenStartDateAndEndDate", "params": ["Date", "Date"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean betweenStartDateAndEndDate(Date startDate, Date endDate) {        boolean bool = false;        Date curDate = new Date();        if(curDate.after(startDate) && curDate.before(dateAdd(1, endDate, 1))) {            bool = true;        }        return bool;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "nowDateBetweenStartDateAndEndDate", "params": ["Date", "Date"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean nowDateBetweenStartDateAndEndDate(Date startDate, Date endDate) {        boolean bool = false;        Date curDate = new Date();        if(curDate.after(startDate) && curDate.before(endDate)) {            bool = true;        }        return bool;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "nowDateAfterDate", "params": ["Date"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean nowDateAfterDate(Date date) {        boolean bool = false;        Date curDate = new Date();        if(curDate.after(date)) {            bool = true;        }        return bool;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBetweenTodaysStartDateAndEndDate", "params": ["Date", "Date"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getBetweenTodaysStartDateAndEndDate(Date startDate, Date endDate) {        byte betweentoday = 0;        if(startDate == null) {            return betweentoday;        } else {            if(endDate == null) {                Calendar calendar = Calendar.getInstance();                String year = Integer.toString(calendar.get(Calendar.YEAR));                String month = Integer.toString(calendar.get(Calendar.MONTH) + 1);                String day = Integer.toString(calendar.get(Calendar.DATE));                String strtodaytime = year + \"-\" + month + \"-\" + day;                SimpleDateFormat formatter = new SimpleDateFormat(\"yyyy-MM-dd\");                try {                    endDate = formatter.parse(strtodaytime);                } catch (ParseException var10) {                    var10.printStackTrace();                }            }            int betweentoday1;            if(endDate.after(startDate)) {                betweentoday1 = (int)((endDate.getTime() - startDate.getTime()) / 86400000L);            } else {                betweentoday1 = (int)((startDate.getTime() - endDate.getTime()) / 86400000L);            }            return betweentoday1;        }    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTime", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getTime(int format) {        StringBuffer cTime = new StringBuffer(10);        Calendar time = Calendar.getInstance();        int miltime = time.get(14);        int second = time.get(13);        int minute = time.get(12);        int hour = time.get(11);        int day = time.get(5);        int month = time.get(2) + 1;        int year = time.get(1);        if(format != 14) {            if(year >= 2000) {                year -= 2000;            } else {                year -= 1900;            }        }        if(format >= 2) {            if(format == 14) {                cTime.append(year);            } else {                cTime.append(getFormatTime(year, 2));            }        }        if(format >= 4) {            cTime.append(getFormatTime(month, 2));        }        if(format >= 6) {            cTime.append(getFormatTime(day, 2));        }        if(format >= 8) {            cTime.append(getFormatTime(hour, 2));        }        if(format >= 10) {            cTime.append(getFormatTime(minute, 2));        }        if(format >= 12) {            cTime.append(getFormatTime(second, 2));        }        if(format >= 15) {            cTime.append(getFormatTime(miltime, 3));        }        return cTime.toString();    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFormatTime", "params": ["int", "int"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "    private static String getFormatTime(int time, int format) {        StringBuffer numm = new StringBuffer();        int length = String.valueOf(time).length();        if(format < length) {            return null;        } else {            for(int i = 0; i < format - length; ++i) {                numm.append(\"0\");            }            numm.append(time);            return numm.toString().trim();        }    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUserAge", "params": ["Date"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getUserAge(Date birthday) {        if(birthday == null) {            return 0;        } else {            Calendar cal = Calendar.getInstance();            if(cal.before(birthday)) {                return 0;            } else {                int yearNow = cal.get(1);                cal.setTime(birthday);                int yearBirth = cal.get(1);                return yearNow - yearBirth;            }        }    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDateByUnixTime", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "Date", "snippet": "    public static Date getDateByUnixTime(int unixTime) {        return new Date((long)unixTime * 1000L);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUnixTimeLong", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "long", "snippet": "    public static long getUnixTimeLong() {        return (long)getUnixTimeByDate(new Date());    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurrentUnixTime", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getCurrentUnixTime() {        return getUnixTimeByDate(new Date());    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUnixTimeByDate", "params": ["Date"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getUnixTimeByDate(Date date) {        return (int)(date.getTime() / 1000L);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUnixTimeLong", "params": ["Date"], "throws": null, "modifiers": ["public", "static"], "return_type": "long", "snippet": "    public static long getUnixTimeLong(Date date) {        return date.getTime() / 1000L;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNextDay", "params": ["Date"], "throws": null, "modifiers": ["public", "static"], "return_type": "Date", "snippet": "    public static Date getNextDay(Date date) {        long time = date.getTime() / 1000L + 86400L;        date.setTime(time * 1000L);        SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");        try {            date = format.parse(format.format(date));        } catch (Exception var5) {            System.out.println(var5.getMessage());        }        return date;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "nextDay", "params": ["Date"], "throws": null, "modifiers": ["public", "static"], "return_type": "Date", "snippet": "    public static Date nextDay(Date date) {        Date newDate = (Date)date.clone();        long time = newDate.getTime() / 1000L + 86400L;        newDate.setTime(time * 1000L);        SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");        try {            newDate = format.parse(format.format(newDate));        } catch (Exception var6) {            System.out.println(var6.getMessage());        }        return newDate;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNowTime", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Date", "snippet": "    public static Date getNowTime() {        SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");        Date date = new Date();        String dateStr = dateFormat(date);        try {            date = format.parse(dateStr);        } catch (ParseException var4) {            var4.printStackTrace();        }        return date;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTomorrow", "params": ["Date"], "throws": null, "modifiers": ["public", "static"], "return_type": "Date", "snippet": "    public static Date getTomorrow(Date date1) {        Calendar now = Calendar.getInstance();        now.setTime(date1);        now.add(5, 1);        return now.getTime();    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getWeekAgo", "params": ["Date"], "throws": null, "modifiers": ["public", "static"], "return_type": "Date", "snippet": "    public static Date getWeekAgo(Date date) {        Date newDate = (Date)date.clone();        long time = newDate.getTime() / 1000L - 604800L;        newDate.setTime(time * 1000L);        SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");        try {            newDate = format.parse(format.format(newDate));        } catch (Exception var6) {            System.out.println(var6.getMessage());        }        return newDate;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDatebyTime", "params": ["Date", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "Date", "snippet": "    public static Date getDatebyTime(Date date, int n) {        String str = dateFormat(date, \"yyyy-MM-dd\");        String[] strs = StringUtils.split(str, \"-\");        int month = Integer.parseInt(strs[1]);        int monthnow = (month + n) % 12;        int year = Integer.parseInt(strs[0]) + (month + n) / 12;        str = year + \"-\" + monthnow + \"-\" + strs[2];        return dateFormat(str, \"yyyy-MM-dd\");    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "yesterday", "params": ["Date"], "throws": null, "modifiers": ["public", "static"], "return_type": "Date", "snippet": "    public static Date yesterday(Date date) {        Date newDate = (Date)date.clone();        long time = newDate.getTime() / 1000L - 86400L;        newDate.setTime(time * 1000L);        SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");        try {            newDate = format.parse(format.format(newDate));        } catch (Exception var6) {            System.out.println(var6.getMessage());        }        return newDate;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getYesterday", "params": ["Date"], "throws": null, "modifiers": ["public", "static"], "return_type": "Date", "snippet": "    public static Date getYesterday(Date date) {        long time = date.getTime() / 1000L - 86400L;        date.setTime(time * 1000L);        SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");        try {            date = format.parse(format.format(date));        } catch (Exception var5) {            System.out.println(var5.getMessage());        }        return date;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStringNowTime", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getStringNowTime() {        Date date = new Date();        String dateStr = dateFormat(date);        return dateStr;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSpecifyTimeSec", "params": ["long", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "long", "snippet": "    public static long getSpecifyTimeSec(long time, int range) {        Date date = new Date((time * 1000L + 28800000L) / 86400000L * 86400000L - 28800000L);        long zeroTime = date.getTime() / 1000L;        long specifyTime = (long)(range * 24 * 3600);        return zeroTime + specifyTime;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "formatDateByUnixTime", "params": ["long", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String formatDateByUnixTime(long unixTime, String dateFormat) {        return dateFormat(new Date(unixTime * 1000L), dateFormat);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "convertToDate", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Date", "snippet": "    public static Date convertToDate(String input) {        Date date = null;        if(null == input) {            return null;        } else {            Iterator var2 = dateFormats.iterator();            while(var2.hasNext()) {                SimpleDateFormat format = (SimpleDateFormat)var2.next();                try {                    format.setLenient(false);                    date = format.parse(input);                } catch (ParseException var5) {                    ;                }                if(date != null) {                    break;                }            }            return date;        }    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTodayTime", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Long", "snippet": "    public static Long getTodayTime() {        Calendar today = Calendar.getInstance();        today.set(11, 0);        today.set(12, 0);        today.set(13, 0);        return Long.valueOf(String.valueOf(today.getTimeInMillis()).substring(0, 10));    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getYesterdayTime", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Long", "snippet": "    public static Long getYesterdayTime() {        Calendar today = Calendar.getInstance();        today.set(11, -24);        today.set(12, 0);        today.set(13, 0);        return Long.valueOf(String.valueOf(today.getTimeInMillis()).substring(0, 10));    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTomorrowTime", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Long", "snippet": "    public static Long getTomorrowTime() {        Calendar tomorrow = Calendar.getInstance();        tomorrow.set(11, 24);        tomorrow.set(12, 0);        tomorrow.set(13, 0);        return Long.valueOf(String.valueOf(tomorrow.getTimeInMillis()).substring(0, 10));    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getYearStartDay", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Date", "snippet": "    public static Date getYearStartDay(String year, String dateFormat){        Calendar cale = Calendar.getInstance();        SimpleDateFormat format = new SimpleDateFormat(dateFormat);        // \u83b7\u53d6\u524d\u6708\u7684\u7b2c\u4e00\u5929        cale = Calendar.getInstance();        cale.add(Calendar.YEAR, 0);        cale.set(Calendar.DAY_OF_YEAR, 1);        return cale.getTime();    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getYearEndDay", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Date", "snippet": "    public static Date getYearEndDay(String year, String dateFormat){        Calendar cale = Calendar.getInstance();        SimpleDateFormat format = new SimpleDateFormat(dateFormat);        // \u83b7\u53d6\u524d\u6708\u7684\u6700\u540e\u4e00\u5929        cale = Calendar.getInstance();        cale.add(Calendar.YEAR, 1);        cale.set(Calendar.DAY_OF_YEAR, 0);        return cale.getTime();    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/DateKit.java", "stars": "2", "class": {"name": "DateKit", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void init() throws Exception {        // init i18n        initI18n();        // admin registry monitor run        JobRegistryMonitorHelper.getInstance().start();        // admin monitor run        JobFailMonitorHelper.getInstance().start();        // admin trigger pool start        JobTriggerPoolHelper.toStart();        // admin log report start        JobLogReportHelper.getInstance().start();        // start-schedule        JobScheduleHelper.getInstance().start();        logger.info(\">>>>>>>>> init xxl-job admin success.\");    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/scheduler/XxlJobScheduler.java", "stars": "1", "class": {"name": "XxlJobScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "destroy", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void destroy() throws Exception {        // stop-schedule        JobScheduleHelper.getInstance().toStop();        // admin log report stop        JobLogReportHelper.getInstance().toStop();        // admin trigger pool stop        JobTriggerPoolHelper.toStop();        // admin monitor stop        JobFailMonitorHelper.getInstance().toStop();        // admin registry stop        JobRegistryMonitorHelper.getInstance().toStop();    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/scheduler/XxlJobScheduler.java", "stars": "1", "class": {"name": "XxlJobScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initI18n", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initI18n(){        for (ExecutorBlockStrategyEnum item:ExecutorBlockStrategyEnum.values()) {            item.setTitle(I18nUtil.getString(\"jobconf_block_\".concat(item.name())));        }    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/scheduler/XxlJobScheduler.java", "stars": "1", "class": {"name": "XxlJobScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecutorBiz", "params": ["String"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "ExecutorBiz", "snippet": "    public static ExecutorBiz getExecutorBiz(String address) throws Exception {        // valid        if (address==null || address.trim().length()==0) {            return null;        }        // load-cache        address = address.trim();        ExecutorBiz executorBiz = executorBizRepository.get(address);        if (executorBiz != null) {            return executorBiz;        }        // set-cache        XxlRpcReferenceBean referenceBean = new XxlRpcReferenceBean();        referenceBean.setClient(NettyHttpClient.class);        referenceBean.setSerializer(HessianSerializer.class);        referenceBean.setCallType(CallType.SYNC);        referenceBean.setLoadBalance(LoadBalance.ROUND);        referenceBean.setIface(ExecutorBiz.class);        referenceBean.setVersion(null);        referenceBean.setTimeout(3000);        referenceBean.setAddress(address);        referenceBean.setAccessToken(XxlJobAdminConfig.getAdminConfig().getAccessToken());        referenceBean.setInvokeCallback(null);        referenceBean.setInvokerFactory(null);        executorBiz = (ExecutorBiz) referenceBean.getObject();        executorBizRepository.put(address, executorBiz);        return executorBiz;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/scheduler/XxlJobScheduler.java", "stars": "1", "class": {"name": "XxlJobScheduler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initChannel", "params": ["Channel"], "throws": ["Exception"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initChannel(Channel ch) throws Exception {//        if (sslCtx != null) {//            ch.pipeline().addLast(sslCtx.newHandler(ch.alloc()));//        }///*        ch.pipeline().addLast(new LengthFieldPrepender(4, false));//        ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());//        ch.pipeline().addLast(\"decoder\", new HttpRequestDecoder());*///        ch.pipeline().addLast(new HttpServerCodec());//        ch.pipeline().addLast(new HttpObjectAggregator(65536));//        ch.pipeline().addLast(new ChunkedWriteHandler());//        ch.pipeline().addLast(new IdleStateHandler(1000,//                1000, 1000, TimeUnit.MILLISECONDS));//        ch.pipeline().addLast(new WebSocketServerProtocolHandler(WEBSOCKET_PATH, null, true));//        ch.pipeline().addLast(\"logger\", new GameLoggerHandler(LogLevel.DEBUG));//        ch.pipeline().addLast(new WebSocketServerCompressionHandler());//        ch.pipeline().addLast(new WebSocketServerProtocolHandler(WEBSOCKET_PATH, null, true));//        ch.pipeline().addLast(new DefaultEventExecutorGroup(300), \"WebSocketHttpServerHandler\", new WebSocketHttpServerHandler());//        ch.pipeline().addLast(new DefaultEventExecutorGroup(300), \"WebSocketFrameServerHandler\", webSocketFrameServerHandler);    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/socket/netty/initializer/ServerInitializer.java", "stars": "1", "class": {"name": "ServerInitializer", "extends": "ChannelInitializer", "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": ["long"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void run(long balance);    /**     * \u5fc3\u8df3\u8bf7\u6c42\u6210\u529f     * @param balance \u5f53\u524d\u7528\u6237\u4f59\u989d     * @param ext \u6269\u5c55\u6570\u636e     */    public abstract void run(long balance, Object ext);}", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/task/AbstractHeartbeatSuccessTask.java", "stars": "1", "class": {"name": "AbstractHeartbeatSuccessTask", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "run", "params": ["long", "Object"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void run(long balance, Object ext);}", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/task/AbstractHeartbeatSuccessTask.java", "stars": "1", "class": {"name": "AbstractHeartbeatSuccessTask", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "createData", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "AnyData", "snippet": "    public AnyData createData() throws Exception {        if (!isOk())            return null;        return new City(                nameField.getText(),                Integer.parseInt(populationField.getText()),                mayorField.getText()        );    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/view/CityDlg.java", "stars": "2", "class": {"name": "CityDlg", "extends": "Dlg", "implements": null, "modifiers": ["public"]}}, {"method_name": "random", "params": ["int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int random(int min, int max) {        return r.nextInt(max - min + 1) + min;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/UUID.java", "stars": "2", "class": {"name": "UUID", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "UU64", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String UU64() {        return UU64(java.util.UUID.randomUUID());    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/UUID.java", "stars": "2", "class": {"name": "UUID", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "UU64", "params": ["java"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String UU64(java.util.UUID uu) {        int index = 0;        char[] cs = new char[22];        long L = uu.getMostSignificantBits();        long R = uu.getLeastSignificantBits();        long mask = 63;        // \u4eceL64\u4f4d\u53d610\u6b21\uff0c\u6bcf\u6b21\u53d66\u4f4d        for (int off = 58; off >= 4; off -= 6) {            long hex = (L & (mask << off)) >>> off;            cs[index++] = _UU64[(int) hex];        }        // \u4eceL64\u4f4d\u53d6\u6700\u540e\u76844\u4f4d \uff0b R64\u4f4d\u59342\u4f4d\u62fc\u4e0a        int l = (int) (((L & 0xF) << 2) | ((R & (3 << 62)) >>> 62));        cs[index++] = _UU64[l];        // \u4eceR64\u4f4d\u53d610\u6b21\uff0c\u6bcf\u6b21\u53d66\u4f4d        for (int off = 56; off >= 2; off -= 6) {            long hex = (R & (mask << off)) >>> off;            cs[index++] = _UU64[(int) hex];        }        // \u5269\u4e0b\u7684\u4e24\u4f4d\u6700\u540e\u53d6        cs[index++] = _UU64[(int) (R & 3)];        // \u8fd4\u56de\u5b57\u7b26\u4e32        return new String(cs);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/UUID.java", "stars": "2", "class": {"name": "UUID", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "fromUU64", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "java", "snippet": "    public static java.util.UUID fromUU64(String uu64) {        String uu16 = UU16FromUU64(uu64);        return java.util.UUID.fromString(UU(uu16));    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/UUID.java", "stars": "2", "class": {"name": "UUID", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "UU32", "params": ["java"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String UU32(java.util.UUID uu) {        StringBuilder sb = new StringBuilder();        long m = uu.getMostSignificantBits();        long l = uu.getLeastSignificantBits();        for (int i = 0; i < 13; i++) {            sb.append(_UU32[(int) (m >> ((13 - i - 1) * 5)) & 31]);        }        for (int i = 0; i < 13; i++) {            sb.append(_UU32[(int) (l >> ((13 - i - 1)) * 5) & 31]);        }        return sb.toString();    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/UUID.java", "stars": "2", "class": {"name": "UUID", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "UU32", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String UU32() {        return UU32(java.util.UUID.randomUUID());    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/UUID.java", "stars": "2", "class": {"name": "UUID", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "fromUU32", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "java", "snippet": "    public static java.util.UUID fromUU32(String u32) {        return new java.util.UUID(parseUnsignedLong(u32.substring(0, 13), 32),                        parseUnsignedLong(u32.substring(13), 32));    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/UUID.java", "stars": "2", "class": {"name": "UUID", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "parseUnsignedLong", "params": ["String", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "long", "snippet": "    public static long parseUnsignedLong(String s, int radix) {        int len = s.length();        long first = Long.parseLong(s.substring(0, len - 1), radix);        int second = Character.digit(s.charAt(len - 1), radix);        return first * radix + second;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/UUID.java", "stars": "2", "class": {"name": "UUID", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "UU", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String UU(String uu16) {        StringBuilder sb = new StringBuilder();        sb.append(uu16.substring(0, 8));        sb.append('-');        sb.append(uu16.substring(8, 12));        sb.append('-');        sb.append(uu16.substring(12, 16));        sb.append('-');        sb.append(uu16.substring(16, 20));        sb.append('-');        sb.append(uu16.substring(20));        return sb.toString();    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/UUID.java", "stars": "2", "class": {"name": "UUID", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "UU16FromUU64", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String UU16FromUU64(String uu64) {        byte[] bytes = new byte[32];        char[] cs = uu64.toCharArray();        int index = 0;        // \u6bcf\u6b21\u53d62\u4e2a\u5b57\u7b26\uff0c\u6062\u590d\u62103\u4e2abyte\uff0c\u91cd\u590d10\u6b21\uff0c        for (int i = 0; i < 10; i++) {            int off = i * 2;            char cl = cs[off];            char cr = cs[off + 1];            int l = Arrays.binarySearch(_UU64, cl);            int r = Arrays.binarySearch(_UU64, cr);            int n = (l << 6) | r;            bytes[index++] = (byte) ((n & 0xF00) >>> 8);            bytes[index++] = (byte) ((n & 0xF0) >>> 4);            bytes[index++] = (byte) (n & 0xF);        }        // \u6700\u540e\u4e00\u6b21\uff0c\u662f\u7528\u6700\u540e2\u4e2a\u5b57\u7b26\uff0c\u6062\u590d\u56de2\u4e2abyte        char cl = cs[20];        char cr = cs[21];        int l = Arrays.binarySearch(_UU64, cl);        int r = Arrays.binarySearch(_UU64, cr);        int n = (l << 2) | r;        bytes[index++] = (byte) ((n & 0xF0) >>> 4);        bytes[index++] = (byte) (n & 0xF);        // \u8fd4\u56de UUID \u5bf9\u8c61        char[] names = new char[32];        for (int i = 0; i < bytes.length; i++)            names[i] = _UU16[bytes[i]];        return new String(names);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/UUID.java", "stars": "2", "class": {"name": "UUID", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "captchaChar", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String captchaChar(int length) {        return captchaChar(length, false);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/UUID.java", "stars": "2", "class": {"name": "UUID", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "captchaChar", "params": ["int", "boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String captchaChar(int length, boolean caseSensitivity) {        StringBuilder sb = new StringBuilder();        Random rand = new Random();// \u968f\u673a\u7528\u4ee5\u4e0b\u4e09\u4e2a\u968f\u673a\u751f\u6210\u5668        Random randdata = new Random();        int data = 0;        for (int i = 0; i < length; i++) {            int index = rand.nextInt(caseSensitivity ? 3 : 2);            // \u76ee\u7684\u662f\u968f\u673a\u9009\u62e9\u751f\u6210\u6570\u5b57\uff0c\u5927\u5c0f\u5199\u5b57\u6bcd            switch (index) {            case 0:                data = randdata.nextInt(10);// \u4ec5\u4ec5\u4f1a\u751f\u62100~9, 0~9\u7684ASCII\u4e3a48~57                sb.append(data);                break;            case 1:                data = randdata.nextInt(26) + 97;// \u4fdd\u8bc1\u53ea\u4f1a\u4ea7\u751fASCII\u4e3a97~122(a-z)\u4e4b\u95f4\u7684\u6574\u6570,                sb.append((char) data);                break;            case 2: // caseSensitivity\u4e3atrue\u7684\u65f6\u5019, \u624d\u4f1a\u6709\u5927\u5199\u5b57\u6bcd                data = randdata.nextInt(26) + 65;// \u4fdd\u8bc1\u53ea\u4f1a\u4ea7\u751fASCII\u4e3a65~90(A~Z)\u4e4b\u95f4\u7684\u6574\u6570                sb.append((char) data);                break;            }        }        return sb.toString();    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/UUID.java", "stars": "2", "class": {"name": "UUID", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "captchaNumber", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String captchaNumber(int length) {        StringBuilder sb = new StringBuilder();        Random rand = new Random();        for (int i = 0; i < length; i++) {            sb.append(rand.nextInt(10));        }        return sb.toString();    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/UUID.java", "stars": "2", "class": {"name": "UUID", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "shouldRemoveLeastRecentlyUsedItemInBeyondFiveEntries", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldRemoveLeastRecentlyUsedItemInBeyondFiveEntries() {    LruCache cache = new LruCache(new PerpetualCache(\"default\"));    cache.setSize(5);    for (int i = 0; i < 5; i++) {      cache.putObject(i, i);    }    assertEquals(0, cache.getObject(0));    cache.putObject(5, 5);    assertNull(cache.getObject(1));    assertEquals(5, cache.getSize());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/cache/LruCacheTest.java", "stars": "15", "class": {"name": "LruCacheTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldRemoveItemOnDemand", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldRemoveItemOnDemand() {    Cache cache = new LruCache(new PerpetualCache(\"default\"));    cache.putObject(0, 0);    assertNotNull(cache.getObject(0));    cache.removeObject(0);    assertNull(cache.getObject(0));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/cache/LruCacheTest.java", "stars": "15", "class": {"name": "LruCacheTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldFlushAllItemsOnDemand", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFlushAllItemsOnDemand() {    Cache cache = new LruCache(new PerpetualCache(\"default\"));    for (int i = 0; i < 5; i++) {      cache.putObject(i, i);    }    assertNotNull(cache.getObject(0));    assertNotNull(cache.getObject(4));    cache.clear();    assertNull(cache.getObject(0));    assertNull(cache.getObject(4));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/cache/LruCacheTest.java", "stars": "15", "class": {"name": "LruCacheTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getId() {        return id;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelation.java", "stars": "2", "class": {"name": "UmsRolePermissionRelation", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Long id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelation.java", "stars": "2", "class": {"name": "UmsRolePermissionRelation", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getRoleId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getRoleId() {        return roleId;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelation.java", "stars": "2", "class": {"name": "UmsRolePermissionRelation", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setRoleId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRoleId(Long roleId) {        this.roleId = roleId;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelation.java", "stars": "2", "class": {"name": "UmsRolePermissionRelation", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getPermissionId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getPermissionId() {        return permissionId;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelation.java", "stars": "2", "class": {"name": "UmsRolePermissionRelation", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setPermissionId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPermissionId(Long permissionId) {        this.permissionId = permissionId;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelation.java", "stars": "2", "class": {"name": "UmsRolePermissionRelation", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        StringBuilder sb = new StringBuilder();        sb.append(getClass().getSimpleName());        sb.append(\" [\");        sb.append(\"Hash = \").append(hashCode());        sb.append(\", id=\").append(id);        sb.append(\", roleId=\").append(roleId);        sb.append(\", permissionId=\").append(permissionId);        sb.append(\", serialVersionUID=\").append(serialVersionUID);        sb.append(\"]\");        return sb.toString();    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRolePermissionRelation.java", "stars": "2", "class": {"name": "UmsRolePermissionRelation", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getReactNativeHost", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ReactNativeHost", "snippet": "  public ReactNativeHost getReactNativeHost() {    return mReactNativeHost;  }", "url": "https://raw.githubusercontent.com/VenkatSBitra/react-native-management-app/master/android/app/src/main/java/com/management/MainApplication.java", "stars": "2", "class": {"name": "MainApplication", "extends": "Application", "implements": ["ReactApplication"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onCreate() {    super.onCreate();    SoLoader.init(this, /* native exopackage */ false);    initializeFlipper(this, getReactNativeHost().getReactInstanceManager());  }", "url": "https://raw.githubusercontent.com/VenkatSBitra/react-native-management-app/master/android/app/src/main/java/com/management/MainApplication.java", "stars": "2", "class": {"name": "MainApplication", "extends": "Application", "implements": ["ReactApplication"], "modifiers": ["public"]}}, {"method_name": "initializeFlipper", "params": ["Context", "ReactInstanceManager"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "  private static void initializeFlipper(      Context context, ReactInstanceManager reactInstanceManager) {    if (BuildConfig.DEBUG) {      try {        /*         We use reflection here to pick up the class that initializes Flipper,        since Flipper library is not available in release mode        */        Class<?> aClass = Class.forName(\"com.management.ReactNativeFlipper\");        aClass            .getMethod(\"initializeFlipper\", Context.class, ReactInstanceManager.class)            .invoke(null, context, reactInstanceManager);      } catch (ClassNotFoundException e) {        e.printStackTrace();      } catch (NoSuchMethodException e) {        e.printStackTrace();      } catch (IllegalAccessException e) {        e.printStackTrace();      } catch (InvocationTargetException e) {        e.printStackTrace();      }    }  }", "url": "https://raw.githubusercontent.com/VenkatSBitra/react-native-management-app/master/android/app/src/main/java/com/management/MainApplication.java", "stars": "2", "class": {"name": "MainApplication", "extends": "Application", "implements": ["ReactApplication"], "modifiers": ["public"]}}, {"method_name": "getComments", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "List<CommentDomain>", "snippet": "    public List<CommentDomain> getComments(int limit) {        LOGGER.debug(\"Enter recentComments method:limit={}\", limit);        if (limit < 0 || limit > 10){            limit = 10;        }        PageHelper.startPage(1, limit);        List<CommentDomain> rs = commentDao.getCommentsByCond(new CommentCond());        LOGGER.debug(\"Exit recentComments method\");        return rs;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/serviceImp/SiteServiceImpl.java", "stars": "2", "class": {"name": "SiteServiceImpl", "extends": null, "implements": ["SiteService"], "modifiers": ["public"]}}, {"method_name": "getNewArticles", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "List<ContentDomain>", "snippet": "    public List<ContentDomain> getNewArticles(int limit) {        LOGGER.debug(\"Enter recentArticles method:limit={}\", limit);        if (limit < 0 || limit > 10)            limit = 10;        PageHelper.startPage(1, limit);        List<ContentDomain> rs = contentDao.getArticlesByCond(new ContentCond());        LOGGER.debug(\"Exit recentArticles method\");        return rs;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/serviceImp/SiteServiceImpl.java", "stars": "2", "class": {"name": "SiteServiceImpl", "extends": null, "implements": ["SiteService"], "modifiers": ["public"]}}, {"method_name": "getComment", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "CommentDomain", "snippet": "    public CommentDomain getComment(Integer coid) {        LOGGER.debug(\"Enter recentComment method\");        if (null == coid)            throw BusinessException.withErrorCode(ErrorConstant.Common.PARAM_IS_EMPTY);        CommentDomain comment = commentDao.getCommentById(coid);        LOGGER.debug(\"Exit recentComment method\");        return comment;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/serviceImp/SiteServiceImpl.java", "stars": "2", "class": {"name": "SiteServiceImpl", "extends": null, "implements": ["SiteService"], "modifiers": ["public"]}}, {"method_name": "getStatistics", "params": [], "throws": null, "modifiers": ["public"], "return_type": "StatisticsDto", "snippet": "    public StatisticsDto getStatistics() {        LOGGER.debug(\"Enter recentStatistics method\");        //\u6587\u7ae0\u603b\u6570        Long artices = contentDao.getArticleCount();        Long comments = commentDao.getCommentsCount();        Long links = metaDao.getMetasCountByType(Types.LINK.getType());        Long atts = attAchDao.getAttsCount();        StatisticsDto rs = new StatisticsDto();        rs.setArticles(artices);        rs.setAttachs(atts);        rs.setComments(comments);        rs.setLinks(links);        LOGGER.debug(\"Exit recentStatistics method\");        return rs;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/serviceImp/SiteServiceImpl.java", "stars": "2", "class": {"name": "SiteServiceImpl", "extends": null, "implements": ["SiteService"], "modifiers": ["public"]}}, {"method_name": "getArchivesSimple", "params": ["ContentCond"], "throws": null, "modifiers": ["public"], "return_type": "List<ArchiveDto>", "snippet": "    public List<ArchiveDto> getArchivesSimple(ContentCond contentCond) {        LOGGER.debug(\"Enter getArchives method\");        List<ArchiveDto> archives = contentDao.getArchive(contentCond);        LOGGER.debug(\"Exit getArchives method\");        return archives;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/serviceImp/SiteServiceImpl.java", "stars": "2", "class": {"name": "SiteServiceImpl", "extends": null, "implements": ["SiteService"], "modifiers": ["public"]}}, {"method_name": "getArchives", "params": ["ContentCond"], "throws": null, "modifiers": ["public"], "return_type": "List<ArchiveDto>", "snippet": "    public List<ArchiveDto> getArchives(ContentCond contentCond) {        LOGGER.debug(\"Enter getArchives method\");        List<ArchiveDto> archives = contentDao.getArchive(contentCond);        parseArchives(archives, contentCond);        LOGGER.debug(\"Exit getArchives method\");        return archives;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/serviceImp/SiteServiceImpl.java", "stars": "2", "class": {"name": "SiteServiceImpl", "extends": null, "implements": ["SiteService"], "modifiers": ["public"]}}, {"method_name": "parseArchives", "params": ["List<ArchiveDto>", "ContentCond"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void parseArchives(List<ArchiveDto> archives, ContentCond contentCond) {        if (null != archives){            archives.forEach(archive -> {                String date = archive.getDate();                Date sd = DateKit.dateFormat(date, \"yyyy\u5e74MM\u6708\");                int start = DateKit.getUnixTimeByDate(sd);                int end = DateKit.getUnixTimeByDate(DateKit.dateAdd(DateKit.INTERVAL_MONTH, sd, 1)) - 1;                ContentCond cond = new ContentCond();                cond.setStartTime(start);                cond.setEndTime(end);                cond.setType(contentCond.getType());                List<ContentDomain> contentss = contentDao.getArticlesByCond(cond);                archive.setArticles(contentss);            });        }    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/serviceImp/SiteServiceImpl.java", "stars": "2", "class": {"name": "SiteServiceImpl", "extends": null, "implements": ["SiteService"], "modifiers": ["public"]}}, {"method_name": "getMetas", "params": ["String", "String", "int"], "throws": null, "modifiers": ["public"], "return_type": "List<MetaDto>", "snippet": "    public List<MetaDto> getMetas(String type, String orderBy, int limit) {        LOGGER.debug(\"Enter metas method:type={},order={},limit={}\", type, orderBy, limit);        List<MetaDto> retList=null;        if (StringUtils.isNotBlank(type)) {            if(StringUtils.isBlank(orderBy)){                orderBy = \"count desc, a.mid desc\";            }            if(limit < 1 || limit > WebConst.MAX_POSTS){                limit = 10;            }            Map<String, Object> paraMap = new HashMap<>();            paraMap.put(\"type\", type);            paraMap.put(\"order\", orderBy);            paraMap.put(\"limit\", limit);            retList= metaDao.selectFromSql(paraMap);        }        LOGGER.debug(\"Exit metas method\");        return retList;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/serviceImp/SiteServiceImpl.java", "stars": "2", "class": {"name": "SiteServiceImpl", "extends": null, "implements": ["SiteService"], "modifiers": ["public"]}}, {"method_name": "comer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void comer() {        System.out.println(\"Comiendo\");    }", "url": "https://raw.githubusercontent.com/EduarAlexis/SOLID/master/src/main/java/Solid/I/Pinguino.java", "stars": "1", "class": {"name": "Pinguino", "extends": null, "implements": ["IAve", "IAveNadadora"], "modifiers": ["public"]}}, {"method_name": "nadar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void nadar() {        System.out.println(\"Ping\u00fcino Nadando\");    }", "url": "https://raw.githubusercontent.com/EduarAlexis/SOLID/master/src/main/java/Solid/I/Pinguino.java", "stars": "1", "class": {"name": "Pinguino", "extends": null, "implements": ["IAve", "IAveNadadora"], "modifiers": ["public"]}}, {"method_name": "executeInternal", "params": ["JobExecutionContext"], "throws": ["JobExecutionException"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void executeInternal(JobExecutionContext context) throws JobExecutionException {        try {            JobDataMap payloadData = context.getJobDetail().getJobDataMap();            int checkNum = payloadData.getIntValue(SchedulerClusterConstants.ALIVE_CHECK_NUM);            JobTaskService taskService = AppUtil.getBean(JobTaskService.class);            JobInfoService jobInfoService = AppUtil.getBean(JobInfoService.class);            taskService.checkAliveInBatch(checkNum, new JobTaskAliveCallback() {                @Override                public void alive(JobTask jobTask) {                    logger.info(\"Task jobId: [{}], taskId: [{}] is still alive\", jobTask.getJobId(), jobTask.getId());                }                @Override                public void notAlive(JobTask jobTask) {                    logger.info(\"Task jobId: [{}], taskId: [{}] is not alive, change the task status to [{}]\",                            jobTask.getJobId(), jobTask.getId(), ExecuteStatus.FAILD.name());                    JobTask realTimeTask = taskService.get(jobTask.getId());                    boolean needCheck = null != realTimeTask &&                            (realTimeTask.getStatus().equals(ExecuteStatus.RUNNING.name()) ||                                    realTimeTask.getStatus().equals(ExecuteStatus.RUNNING_TIMEOUT.name()));                    if(!needCheck){                        return;                    }                    jobTask.setStatus(ExecuteStatus.FAILD.name());                    if(taskService.update(jobTask)) {                        jobInfoService.sendInfoToAlarm(jobTask.getId(),                                jobTask.getJobId(), AlarmTemplate.TITLE_TASK_RUN_FAID,                                PatternInjectUtils.inject(AlarmTemplate.TASK_RUN_FAID,                                        new Object[]{jobTask.getJobName(), jobTask.getJobId(), jobTask.getId()}, false, false,true));                    }                }            });        }catch(Exception e){            logger.error(e.getMessage());        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/scheduler/cluster/bean/TaskAliveCheckBean.java", "stars": "23", "class": {"name": "TaskAliveCheckBean", "extends": "QuartzJobBean", "implements": null, "modifiers": ["public"]}}, {"method_name": "executeQuery", "params": ["String"], "throws": ["HiveQueryExecutionException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void executeQuery(String q) throws HiveQueryExecutionException {    LOG.info(\"Executing query: \" + q);    int returnCode = cli.processLine(q);    if (returnCode != 0) {      LOG.warn(\"Got exception \" + returnCode + \" from line: \" + q);      throw new HiveQueryExecutionException(returnCode, q);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/hiveutils/RealHiveQueryExecutor.java", "stars": "18", "class": {"name": "RealHiveQueryExecutor", "extends": null, "implements": ["HiveQueryExecutor"], "modifiers": []}}, {"method_name": "setOut", "params": ["PrintStream"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setOut(PrintStream out) {    ss.out = out;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/hiveutils/RealHiveQueryExecutor.java", "stars": "18", "class": {"name": "RealHiveQueryExecutor", "extends": null, "implements": ["HiveQueryExecutor"], "modifiers": []}}, {"method_name": "setIn", "params": ["InputStream"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setIn(InputStream in) {    ss.in = in;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/hiveutils/RealHiveQueryExecutor.java", "stars": "18", "class": {"name": "RealHiveQueryExecutor", "extends": null, "implements": ["HiveQueryExecutor"], "modifiers": []}}, {"method_name": "setErr", "params": ["PrintStream"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setErr(PrintStream err) {    ss.err = err;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/hiveutils/RealHiveQueryExecutor.java", "stars": "18", "class": {"name": "RealHiveQueryExecutor", "extends": null, "implements": ["HiveQueryExecutor"], "modifiers": []}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void run();}", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/task/AbstractJoinChannelFailureTask.java", "stars": "1", "class": {"name": "AbstractJoinChannelFailureTask", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "execute", "params": ["LibraryData"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void execute(LibraryData data) {        Objects.requireNonNull(data, LegalityCheck.LIBRARY_DATA_NULL_MESSAGE);        List<BookEntry> books = data.getBookData();        if (books.size() == 0) {            System.out.println(\"The library has no book entries.\");            return;        }        switch (groupBy) {            case AUTHOR:                // Uses Utils.listAllAuthorsSorted inside                printGroupByAuthors(books);                break;            case TITLE:                printBooksByTitleAlpha(books);                printBooksByTitleNum(books);                break;        }    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/src/GroupCmd.java", "stars": "6", "class": {"name": "GroupCmd", "extends": "LibraryCommand", "implements": null, "modifiers": ["public"]}}, {"method_name": "parseArguments", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean parseArguments(String argumentInput) {        Objects.requireNonNull(argumentInput, LegalityCheck.LIBRARY_DATA_NULL_MESSAGE);        switch (argumentInput) {            case GROUP_BY_AUTHOR:                this.groupBy = GroupingChoice.AUTHOR;                return true;            case GROUP_BY_TITLE:                this.groupBy = GroupingChoice.TITLE;                return true;            default:                return false;        }    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/src/GroupCmd.java", "stars": "6", "class": {"name": "GroupCmd", "extends": "LibraryCommand", "implements": null, "modifiers": ["public"]}}, {"method_name": "printGroupByAuthors", "params": ["List<BookEntry>"], "throws": null, "modifiers": ["static", "protected"], "return_type": "void", "snippet": "    protected static void printGroupByAuthors(List<BookEntry> books) {        System.out.println(\"Grouped data by AUTHOR\");        // First list all authors        List<String> authors = Utils.listAllAuthorsSorted(books);        // Then print books of each author        for (String author : authors) {            // For all authors            System.out.println(\"## \" + author);            for (BookEntry book : books) {                for (String aut : book.getAuthors()) {                    // Find the authors' book and print                    if (aut.equals(author)) {                        System.out.println(\"\\t\" + book.getTitle());                    }                }            }        }    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/src/GroupCmd.java", "stars": "6", "class": {"name": "GroupCmd", "extends": "LibraryCommand", "implements": null, "modifiers": ["public"]}}, {"method_name": "printBooksByTitleNum", "params": ["List<BookEntry>"], "throws": null, "modifiers": ["static", "protected"], "return_type": "void", "snippet": "    protected static void printBooksByTitleNum(List<BookEntry> books) {        boolean ifNumGroupExist = false;        StringBuilder outputNum = new StringBuilder();        for (BookEntry book : books) {            // 48 is the ASCII of 0 and 57 is the ASCII of 9            // Check whether books begin with numbers            if (48 <= book.getTitle().charAt(0) && book.getTitle().charAt(0) <= 57) {                ifNumGroupExist = true;                outputNum.append(\"\\t\").append(book.getTitle()).append(\"\\n\");            }        }        if (ifNumGroupExist) {            System.out.println(\"## [0-9]\");            System.out.println(\"\\t\" + outputNum.toString().trim());        }    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/src/GroupCmd.java", "stars": "6", "class": {"name": "GroupCmd", "extends": "LibraryCommand", "implements": null, "modifiers": ["public"]}}, {"method_name": "printBooksByTitleAlpha", "params": ["List<BookEntry>"], "throws": null, "modifiers": ["static", "protected"], "return_type": "void", "snippet": "    protected static void printBooksByTitleAlpha(List<BookEntry> books) {        System.out.println(\"Grouped data by TITLE\");        // To iterate all alphabets        for (int i = 0; i < 26; i++) {            StringBuilder outputAlpha = new StringBuilder();            boolean ifAlphaGroupExist = false;            // Iterate books            for (BookEntry book : books) {                // If is the current alphabetical group, add to string                if (book.getTitle().startsWith(Character.toString('A' + i))) {                    outputAlpha.append(\"\\t\").append(book.getTitle()).append(\"\\n\");                    ifAlphaGroupExist = true;                }            }            if (ifAlphaGroupExist) {                System.out.println(\"## \" + Character.toString('A' + i));                System.out.println(\"\\t\" + outputAlpha.toString().trim());            }        }    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/src/GroupCmd.java", "stars": "6", "class": {"name": "GroupCmd", "extends": "LibraryCommand", "implements": null, "modifiers": ["public"]}}, {"method_name": "getTempIntField", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getTempIntField() {    return tempIntField;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/not_null_column/Base.java", "stars": "15", "class": {"name": "Base", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setTempIntField", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setTempIntField(int tempIntField) {    this.tempIntField = tempIntField;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/not_null_column/Base.java", "stars": "15", "class": {"name": "Base", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getTempDateField", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "  public Date getTempDateField() {    return tempDateField;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/not_null_column/Base.java", "stars": "15", "class": {"name": "Base", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setTempDateField", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setTempDateField(Date tempDateField) {    this.tempDateField = tempDateField;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/not_null_column/Base.java", "stars": "15", "class": {"name": "Base", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "userEventTriggered", "params": ["ChannelHandlerContext", "Object"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {    if (evt instanceof IdleStateEvent) {      IdleState state = ((IdleStateEvent) evt).state();      if (state == IdleState.READER_IDLE) {        throw new Exception(\"idle exception\");      }    } else {      super.userEventTriggered(ctx, evt);    }  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/AcceptorIdleStateTrigger.java", "stars": "3", "class": {"name": "AcceptorIdleStateTrigger", "extends": "ChannelInboundHandlerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "setMessage", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMessage(String message) {        this.message = message;        if (message != null && message.length() > 48) {            this.message = message.substring(0, 46) + \"...\";        }    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Pacman.java", "stars": "15", "class": {"name": "Pacman", "extends": null, "implements": null, "modifiers": ["public"]}}]