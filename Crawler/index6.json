[{"method_name": "getSet", "params": ["int"], "throws": null, "modifiers": [], "return_type": "TreeSet<Integer>", "snippet": "    TreeSet<Integer> getSet(int type) {        switch (type) {            case SECOND:                return seconds;            case MINUTE:                return minutes;            case HOUR:                return hours;            case DAY_OF_MONTH:                return daysOfMonth;            case MONTH:                return months;            case DAY_OF_WEEK:                return daysOfWeek;            case YEAR:                return years;            default:                return null;        }    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/cron/CronExpression.java", "stars": "1", "class": {"name": "CronExpression", "extends": null, "implements": ["Serializable", "Cloneable"], "modifiers": ["public", "final"]}}, {"method_name": "getValue", "params": ["int", "String", "int"], "throws": null, "modifiers": ["protected"], "return_type": "ValueSet", "snippet": "    protected ValueSet getValue(int v, String s, int i) {        char c = s.charAt(i);        StringBuilder s1 = new StringBuilder(String.valueOf(v));        while (c >= '0' && c <= '9') {            s1.append(c);            i++;            if (i >= s.length()) {                break;            }            c = s.charAt(i);        }        ValueSet val = new ValueSet();                val.pos = (i < s.length()) ? i : i + 1;        val.value = Integer.parseInt(s1.toString());        return val;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/cron/CronExpression.java", "stars": "1", "class": {"name": "CronExpression", "extends": null, "implements": ["Serializable", "Cloneable"], "modifiers": ["public", "final"]}}, {"method_name": "getNumericValue", "params": ["String", "int"], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getNumericValue(String s, int i) {        int endOfVal = findNextWhiteSpace(i, s);        String val = s.substring(i, endOfVal);        return Integer.parseInt(val);    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/cron/CronExpression.java", "stars": "1", "class": {"name": "CronExpression", "extends": null, "implements": ["Serializable", "Cloneable"], "modifiers": ["public", "final"]}}, {"method_name": "getMonthNumber", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getMonthNumber(String s) {        Integer integer = monthMap.get(s);        if (integer == null) {            return -1;        }        return integer;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/cron/CronExpression.java", "stars": "1", "class": {"name": "CronExpression", "extends": null, "implements": ["Serializable", "Cloneable"], "modifiers": ["public", "final"]}}, {"method_name": "getDayOfWeekNumber", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getDayOfWeekNumber(String s) {        Integer integer = dayMap.get(s);        if (integer == null) {            return -1;        }        return integer;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/cron/CronExpression.java", "stars": "1", "class": {"name": "CronExpression", "extends": null, "implements": ["Serializable", "Cloneable"], "modifiers": ["public", "final"]}}, {"method_name": "getTimeAfter", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date getTimeAfter(Date afterTime) {        // Computation is based on Gregorian year only.        Calendar cl = new java.util.GregorianCalendar(getTimeZone());         // move ahead one second, since we're computing the time *after* the        // given time        afterTime = new Date(afterTime.getTime() + 1000);        // CronTrigger does not deal with milliseconds        cl.setTime(afterTime);        cl.set(Calendar.MILLISECOND, 0);        boolean gotOne = false;        // loop until we've computed the next time, or we've past the endTime        while (!gotOne) {            //if (endTime != null && cl.getTime().after(endTime)) return null;            if(cl.get(Calendar.YEAR) > 2999) { // prevent endless loop...                return null;            }            SortedSet<Integer> st = null;            int t = 0;            int sec = cl.get(Calendar.SECOND);            int min = cl.get(Calendar.MINUTE);            // get second.................................................            st = seconds.tailSet(sec);            if (st != null && st.size() != 0) {                sec = st.first();            } else {                sec = seconds.first();                min++;                cl.set(Calendar.MINUTE, min);            }            cl.set(Calendar.SECOND, sec);            min = cl.get(Calendar.MINUTE);            int hr = cl.get(Calendar.HOUR_OF_DAY);            t = -1;            // get minute.................................................            st = minutes.tailSet(min);            if (st != null && st.size() != 0) {                t = min;                min = st.first();            } else {                min = minutes.first();                hr++;            }            if (min != t) {                cl.set(Calendar.SECOND, 0);                cl.set(Calendar.MINUTE, min);                setCalendarHour(cl, hr);                continue;            }            cl.set(Calendar.MINUTE, min);            hr = cl.get(Calendar.HOUR_OF_DAY);            int day = cl.get(Calendar.DAY_OF_MONTH);            t = -1;            // get hour...................................................            st = hours.tailSet(hr);            if (st != null && st.size() != 0) {                t = hr;                hr = st.first();            } else {                hr = hours.first();                day++;            }            if (hr != t) {                cl.set(Calendar.SECOND, 0);                cl.set(Calendar.MINUTE, 0);                cl.set(Calendar.DAY_OF_MONTH, day);                setCalendarHour(cl, hr);                continue;            }            cl.set(Calendar.HOUR_OF_DAY, hr);            day = cl.get(Calendar.DAY_OF_MONTH);            int mon = cl.get(Calendar.MONTH) + 1;            // '+ 1' because calendar is 0-based for this field, and we are            // 1-based            t = -1;            int tmon = mon;                        // get day...................................................            boolean dayOfMSpec = !daysOfMonth.contains(NO_SPEC);            boolean dayOfWSpec = !daysOfWeek.contains(NO_SPEC);            if (dayOfMSpec && !dayOfWSpec) { // get day by day of month rule                st = daysOfMonth.tailSet(day);                if (lastdayOfMonth) {                    if(!nearestWeekday) {                        t = day;                        day = getLastDayOfMonth(mon, cl.get(Calendar.YEAR));                        day -= lastdayOffset;                        if(t > day) {                            mon++;                            if(mon > 12) {                                 mon = 1;                                tmon = 3333; // ensure test of mon != tmon further below fails                                cl.add(Calendar.YEAR, 1);                            }                            day = 1;                        }                    } else {                        t = day;                        day = getLastDayOfMonth(mon, cl.get(Calendar.YEAR));                        day -= lastdayOffset;                                                java.util.Calendar tcal = java.util.Calendar.getInstance(getTimeZone());                        tcal.set(Calendar.SECOND, 0);                        tcal.set(Calendar.MINUTE, 0);                        tcal.set(Calendar.HOUR_OF_DAY, 0);                        tcal.set(Calendar.DAY_OF_MONTH, day);                        tcal.set(Calendar.MONTH, mon - 1);                        tcal.set(Calendar.YEAR, cl.get(Calendar.YEAR));                                                int ldom = getLastDayOfMonth(mon, cl.get(Calendar.YEAR));                        int dow = tcal.get(Calendar.DAY_OF_WEEK);                        if(dow == Calendar.SATURDAY && day == 1) {                            day += 2;                        } else if(dow == Calendar.SATURDAY) {                            day -= 1;                        } else if(dow == Calendar.SUNDAY && day == ldom) {                             day -= 2;                        } else if(dow == Calendar.SUNDAY) {                             day += 1;                        }                                            tcal.set(Calendar.SECOND, sec);                        tcal.set(Calendar.MINUTE, min);                        tcal.set(Calendar.HOUR_OF_DAY, hr);                        tcal.set(Calendar.DAY_OF_MONTH, day);                        tcal.set(Calendar.MONTH, mon - 1);                        Date nTime = tcal.getTime();                        if(nTime.before(afterTime)) {                            day = 1;                            mon++;                        }                    }                } else if(nearestWeekday) {                    t = day;                    day = daysOfMonth.first();                    java.util.Calendar tcal = java.util.Calendar.getInstance(getTimeZone());                    tcal.set(Calendar.SECOND, 0);                    tcal.set(Calendar.MINUTE, 0);                    tcal.set(Calendar.HOUR_OF_DAY, 0);                    tcal.set(Calendar.DAY_OF_MONTH, day);                    tcal.set(Calendar.MONTH, mon - 1);                    tcal.set(Calendar.YEAR, cl.get(Calendar.YEAR));                                        int ldom = getLastDayOfMonth(mon, cl.get(Calendar.YEAR));                    int dow = tcal.get(Calendar.DAY_OF_WEEK);                    if(dow == Calendar.SATURDAY && day == 1) {                        day += 2;                    } else if(dow == Calendar.SATURDAY) {                        day -= 1;                    } else if(dow == Calendar.SUNDAY && day == ldom) {                         day -= 2;                    } else if(dow == Calendar.SUNDAY) {                         day += 1;                    }                                                            tcal.set(Calendar.SECOND, sec);                    tcal.set(Calendar.MINUTE, min);                    tcal.set(Calendar.HOUR_OF_DAY, hr);                    tcal.set(Calendar.DAY_OF_MONTH, day);                    tcal.set(Calendar.MONTH, mon - 1);                    Date nTime = tcal.getTime();                    if(nTime.before(afterTime)) {                        day = daysOfMonth.first();                        mon++;                    }                } else if (st != null && st.size() != 0) {                    t = day;                    day = st.first();                    // make sure we don't over-run a short month, such as february                    int lastDay = getLastDayOfMonth(mon, cl.get(Calendar.YEAR));                    if (day > lastDay) {                        day = daysOfMonth.first();                        mon++;                    }                } else {                    day = daysOfMonth.first();                    mon++;                }                                if (day != t || mon != tmon) {                    cl.set(Calendar.SECOND, 0);                    cl.set(Calendar.MINUTE, 0);                    cl.set(Calendar.HOUR_OF_DAY, 0);                    cl.set(Calendar.DAY_OF_MONTH, day);                    cl.set(Calendar.MONTH, mon - 1);                    // '- 1' because calendar is 0-based for this field, and we                    // are 1-based                    continue;                }            } else if (dayOfWSpec && !dayOfMSpec) { // get day by day of week rule                if (lastdayOfWeek) { // are we looking for the last XXX day of                    // the month?                    int dow = daysOfWeek.first(); // desired                    // d-o-w                    int cDow = cl.get(Calendar.DAY_OF_WEEK); // current d-o-w                    int daysToAdd = 0;                    if (cDow < dow) {                        daysToAdd = dow - cDow;                    }                    if (cDow > dow) {                        daysToAdd = dow + (7 - cDow);                    }                    int lDay = getLastDayOfMonth(mon, cl.get(Calendar.YEAR));                    if (day + daysToAdd > lDay) { // did we already miss the                        // last one?                        cl.set(Calendar.SECOND, 0);                        cl.set(Calendar.MINUTE, 0);                        cl.set(Calendar.HOUR_OF_DAY, 0);                        cl.set(Calendar.DAY_OF_MONTH, 1);                        cl.set(Calendar.MONTH, mon);                        // no '- 1' here because we are promoting the month                        continue;                    }                    // find date of last occurrence of this day in this month...                    while ((day + daysToAdd + 7) <= lDay) {                        daysToAdd += 7;                    }                    day += daysToAdd;                    if (daysToAdd > 0) {                        cl.set(Calendar.SECOND, 0);                        cl.set(Calendar.MINUTE, 0);                        cl.set(Calendar.HOUR_OF_DAY, 0);                        cl.set(Calendar.DAY_OF_MONTH, day);                        cl.set(Calendar.MONTH, mon - 1);                        // '- 1' here because we are not promoting the month                        continue;                    }                } else if (nthdayOfWeek != 0) {                    // are we looking for the Nth XXX day in the month?                    int dow = daysOfWeek.first(); // desired                    // d-o-w                    int cDow = cl.get(Calendar.DAY_OF_WEEK); // current d-o-w                    int daysToAdd = 0;                    if (cDow < dow) {                        daysToAdd = dow - cDow;                    } else if (cDow > dow) {                        daysToAdd = dow + (7 - cDow);                    }                    boolean dayShifted = false;                    if (daysToAdd > 0) {                        dayShifted = true;                    }                    day += daysToAdd;                    int weekOfMonth = day / 7;                    if (day % 7 > 0) {                        weekOfMonth++;                    }                    daysToAdd = (nthdayOfWeek - weekOfMonth) * 7;                    day += daysToAdd;                    if (daysToAdd < 0                            || day > getLastDayOfMonth(mon, cl                                    .get(Calendar.YEAR))) {                        cl.set(Calendar.SECOND, 0);                        cl.set(Calendar.MINUTE, 0);                        cl.set(Calendar.HOUR_OF_DAY, 0);                        cl.set(Calendar.DAY_OF_MONTH, 1);                        cl.set(Calendar.MONTH, mon);                        // no '- 1' here because we are promoting the month                        continue;                    } else if (daysToAdd > 0 || dayShifted) {                        cl.set(Calendar.SECOND, 0);                        cl.set(Calendar.MINUTE, 0);                        cl.set(Calendar.HOUR_OF_DAY, 0);                        cl.set(Calendar.DAY_OF_MONTH, day);                        cl.set(Calendar.MONTH, mon - 1);                        // '- 1' here because we are NOT promoting the month                        continue;                    }                } else {                    int cDow = cl.get(Calendar.DAY_OF_WEEK); // current d-o-w                    int dow = daysOfWeek.first(); // desired                    // d-o-w                    st = daysOfWeek.tailSet(cDow);                    if (st != null && st.size() > 0) {                        dow = st.first();                    }                    int daysToAdd = 0;                    if (cDow < dow) {                        daysToAdd = dow - cDow;                    }                    if (cDow > dow) {                        daysToAdd = dow + (7 - cDow);                    }                    int lDay = getLastDayOfMonth(mon, cl.get(Calendar.YEAR));                    if (day + daysToAdd > lDay) { // will we pass the end of                        // the month?                        cl.set(Calendar.SECOND, 0);                        cl.set(Calendar.MINUTE, 0);                        cl.set(Calendar.HOUR_OF_DAY, 0);                        cl.set(Calendar.DAY_OF_MONTH, 1);                        cl.set(Calendar.MONTH, mon);                        // no '- 1' here because we are promoting the month                        continue;                    } else if (daysToAdd > 0) { // are we swithing days?                        cl.set(Calendar.SECOND, 0);                        cl.set(Calendar.MINUTE, 0);                        cl.set(Calendar.HOUR_OF_DAY, 0);                        cl.set(Calendar.DAY_OF_MONTH, day + daysToAdd);                        cl.set(Calendar.MONTH, mon - 1);                        // '- 1' because calendar is 0-based for this field,                        // and we are 1-based                        continue;                    }                }            } else { // dayOfWSpec && !dayOfMSpec                throw new UnsupportedOperationException(                        \"Support for specifying both a day-of-week AND a day-of-month parameter is not implemented.\");            }            cl.set(Calendar.DAY_OF_MONTH, day);            mon = cl.get(Calendar.MONTH) + 1;            // '+ 1' because calendar is 0-based for this field, and we are            // 1-based            int year = cl.get(Calendar.YEAR);            t = -1;            // test for expressions that never generate a valid fire date,            // but keep looping...            if (year > MAX_YEAR) {                return null;            }            // get month...................................................            st = months.tailSet(mon);            if (st != null && st.size() != 0) {                t = mon;                mon = st.first();            } else {                mon = months.first();                year++;            }            if (mon != t) {                cl.set(Calendar.SECOND, 0);                cl.set(Calendar.MINUTE, 0);                cl.set(Calendar.HOUR_OF_DAY, 0);                cl.set(Calendar.DAY_OF_MONTH, 1);                cl.set(Calendar.MONTH, mon - 1);                // '- 1' because calendar is 0-based for this field, and we are                // 1-based                cl.set(Calendar.YEAR, year);                continue;            }            cl.set(Calendar.MONTH, mon - 1);            // '- 1' because calendar is 0-based for this field, and we are            // 1-based            year = cl.get(Calendar.YEAR);            t = -1;            // get year...................................................            st = years.tailSet(year);            if (st != null && st.size() != 0) {                t = year;                year = st.first();            } else {                return null; // ran out of years...            }            if (year != t) {                cl.set(Calendar.SECOND, 0);                cl.set(Calendar.MINUTE, 0);                cl.set(Calendar.HOUR_OF_DAY, 0);                cl.set(Calendar.DAY_OF_MONTH, 1);                cl.set(Calendar.MONTH, 0);                // '- 1' because calendar is 0-based for this field, and we are                // 1-based                cl.set(Calendar.YEAR, year);                continue;            }            cl.set(Calendar.YEAR, year);            gotOne = true;        } // while( !done )        return cl.getTime();    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/cron/CronExpression.java", "stars": "1", "class": {"name": "CronExpression", "extends": null, "implements": ["Serializable", "Cloneable"], "modifiers": ["public", "final"]}}, {"method_name": "setCalendarHour", "params": ["Calendar", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void setCalendarHour(Calendar cal, int hour) {        cal.set(java.util.Calendar.HOUR_OF_DAY, hour);        if (cal.get(java.util.Calendar.HOUR_OF_DAY) != hour && hour != 24) {            cal.set(java.util.Calendar.HOUR_OF_DAY, hour + 1);        }    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/cron/CronExpression.java", "stars": "1", "class": {"name": "CronExpression", "extends": null, "implements": ["Serializable", "Cloneable"], "modifiers": ["public", "final"]}}, {"method_name": "getTimeBefore", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date getTimeBefore(Date endTime) {         // FUTURE_TODO: implement QUARTZ-423        return null;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/cron/CronExpression.java", "stars": "1", "class": {"name": "CronExpression", "extends": null, "implements": ["Serializable", "Cloneable"], "modifiers": ["public", "final"]}}, {"method_name": "getFinalFireTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date getFinalFireTime() {        // FUTURE_TODO: implement QUARTZ-423        return null;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/cron/CronExpression.java", "stars": "1", "class": {"name": "CronExpression", "extends": null, "implements": ["Serializable", "Cloneable"], "modifiers": ["public", "final"]}}, {"method_name": "isLeapYear", "params": ["int"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean isLeapYear(int year) {        return ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0));    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/cron/CronExpression.java", "stars": "1", "class": {"name": "CronExpression", "extends": null, "implements": ["Serializable", "Cloneable"], "modifiers": ["public", "final"]}}, {"method_name": "getLastDayOfMonth", "params": ["int", "int"], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getLastDayOfMonth(int monthNum, int year) {        switch (monthNum) {            case 1:                return 31;            case 2:                return (isLeapYear(year)) ? 29 : 28;            case 3:                return 31;            case 4:                return 30;            case 5:                return 31;            case 6:                return 30;            case 7:                return 31;            case 8:                return 31;            case 9:                return 30;            case 10:                return 31;            case 11:                return 30;            case 12:                return 31;            default:                throw new IllegalArgumentException(\"Illegal month number: \"                        + monthNum);        }    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/cron/CronExpression.java", "stars": "1", "class": {"name": "CronExpression", "extends": null, "implements": ["Serializable", "Cloneable"], "modifiers": ["public", "final"]}}, {"method_name": "readObject", "params": ["java"], "throws": ["java.io.IOException", "ClassNotFoundException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void readObject(java.io.ObjectInputStream stream)        throws java.io.IOException, ClassNotFoundException {                stream.defaultReadObject();        try {            buildExpression(cronExpression);        } catch (Exception ignore) {        } // never happens    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/cron/CronExpression.java", "stars": "1", "class": {"name": "CronExpression", "extends": null, "implements": ["Serializable", "Cloneable"], "modifiers": ["public", "final"]}}, {"method_name": "clone", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object clone() {        return new CronExpression(this);    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/cron/CronExpression.java", "stars": "1", "class": {"name": "CronExpression", "extends": null, "implements": ["Serializable", "Cloneable"], "modifiers": ["public", "final"]}}, {"method_name": "find", "params": ["UUID"], "throws": null, "modifiers": ["public"], "return_type": "VipPlayer", "snippet": "    public VipPlayer find(UUID uuid) {        try (PreparedStatement statement = databaseConnection.getConnection(true).prepareStatement(FIND_STATEMENT)) {            statement.setString(1, uuid.toString());            ResultSet resultSet = statement.executeQuery();            return adapter.adapt(resultSet, ResultSet.class, VipPlayer.class);        } catch (Exception exception) {            exception.printStackTrace();            return null;        }    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/repository/vipplayer/VipPlayerMySQLRepository.java", "stars": "2", "class": {"name": "VipPlayerMySQLRepository", "extends": "VipPlayerRepository", "implements": null, "modifiers": ["public"]}}, {"method_name": "insert", "params": ["UUID", "VipPlayer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void insert(UUID uuid, VipPlayer vipPlayer) {        try (Connection connection = databaseConnection.getConnection(false);             PreparedStatement statement = connection.prepareStatement(INSERT_STATEMENT)) {            for (Vip vip : vipPlayer.getVips().values()) {                statement.setString(1, uuid.toString());                statement.setString(2, vip.getType().getIdentifier());                statement.setLong(3, vip.getTime());                statement.addBatch();            }            statement.executeBatch();            connection.setAutoCommit(true);        } catch (Exception exception) {            exception.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/repository/vipplayer/VipPlayerMySQLRepository.java", "stars": "2", "class": {"name": "VipPlayerMySQLRepository", "extends": "VipPlayerRepository", "implements": null, "modifiers": ["public"]}}, {"method_name": "delete", "params": ["UUID"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void delete(UUID uuid) {        try (Connection connection = databaseConnection.getConnection(true);             PreparedStatement statement = connection.prepareStatement(DELETE_STATEMENT)) {            statement.setString(1, uuid.toString());            statement.executeUpdate();        } catch (Exception exception) {            exception.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/repository/vipplayer/VipPlayerMySQLRepository.java", "stars": "2", "class": {"name": "VipPlayerMySQLRepository", "extends": "VipPlayerRepository", "implements": null, "modifiers": ["public"]}}, {"method_name": "newInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "CopyFragment", "snippet": "    public static CopyFragment newInstance() {        return new CopyFragment();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/CopyFragment.java", "stars": "1", "class": {"name": "CopyFragment", "extends": "MyFragment", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getLayoutId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getLayoutId() {        return R.layout.fragment_copy;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/CopyFragment.java", "stars": "1", "class": {"name": "CopyFragment", "extends": "MyFragment", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "initView", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initView() {    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/CopyFragment.java", "stars": "1", "class": {"name": "CopyFragment", "extends": "MyFragment", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "initData", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initData() {    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/CopyFragment.java", "stars": "1", "class": {"name": "CopyFragment", "extends": "MyFragment", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "filter", "params": ["ServerWebExchange", "GatewayFilterChain"], "throws": null, "modifiers": ["public"], "return_type": "Mono<Void>", "snippet": "    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {        LOG.info(Json.toJson(exchange.getRequest(), null));        if(exchange.getRequest().getPath().value().equals(loginUrl)) {            DataBufferFactory bufferFactory = exchange.getResponse().bufferFactory();            ServerHttpResponseDecorator responseDecorator = new ServerHttpResponseDecorator(exchange.getResponse()) {                @Override                @SuppressWarnings(\"unchecked\")                public Mono<Void> writeWith(Publisher<? extends DataBuffer> body) {                    if (body instanceof Flux) {                        Flux<? extends DataBuffer> fluxBody = (Flux<? extends DataBuffer>) body;                        return super.writeWith(fluxBody.map(dataBuffer -> {                            byte[] content = new byte[dataBuffer.readableByteCount()];                            dataBuffer.read(content);                            DataBufferUtils.release(dataBuffer);                            if(getStatusCode() == HttpStatus.OK) {                                String jsonStr = new String(content, StandardCharsets.UTF_8);                                try {                                    Response<Map<String, String>> response = Json.fromJson(jsonStr, Response.class, Map.class);                                    assert response != null;                                    if(response.getCode() == 0) {                                        Map<String, String> jsonMap = response.getData();                                        String loginId = jsonMap.getOrDefault(AuthConstraints.X_AUTH_ID, \"\");                                        if (StringUtils.isNotBlank(loginId)) {                                            AuthTokenBean tokenBean = new AuthTokenBean();                                            tokenBean.getHeaders().put(AuthConstraints.X_AUTH_ID, loginId);                                            tokenBean.getHeaders().put(AuthConstraints.HOST_PORT,                                                    String.format(\"%s:%s\", InetAddress.getLocalHost().getHostAddress() , serverPort));                                            tokenBean.getClaims().putAll(jsonMap);                                            String token = tokenBuilder.build(tokenBean);                                            addCookie(ResponseCookie.from(DEFAULT_SSO_COOKIE, token)                                                    .path(\"/\").httpOnly(true).secure(false)                                                    .maxAge(Duration.ofDays(1)).build());                                            LOG.info(\"Add token: \" + token.substring(0, 6) + \"**** to login response\");                                        }                                    }                                } catch (Exception e) {                                    LOG.error(\"Generate Token Fail: [\" + e.getMessage() +\"]\", e);                                    //Ignore                                }                            }                            //Just trainst data                            return bufferFactory.wrap(content);                        }));                    }                    return super.writeWith(body);                }            };            return chain.filter(exchange.mutate().response(responseDecorator).build());        }        return chain.filter(exchange);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/gateway/src/main/java/com/webank/wedatasphere/exchangis/gateway/auth/AuthEntranceFilter.java", "stars": "23", "class": {"name": "AuthEntranceFilter", "extends": null, "implements": ["GlobalFilter", "Ordered"], "modifiers": ["public"]}}, {"method_name": "getOrder", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getOrder() {        return NettyWriteResponseFilter.WRITE_RESPONSE_FILTER_ORDER - 1;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/gateway/src/main/java/com/webank/wedatasphere/exchangis/gateway/auth/AuthEntranceFilter.java", "stars": "23", "class": {"name": "AuthEntranceFilter", "extends": null, "implements": ["GlobalFilter", "Ordered"], "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        paint.setStrikeThruText(true);        canvas.drawText(text, 50, 100, paint);    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson3/Practice06SetStrikeThruTextView.java", "stars": "2", "class": {"name": "Practice06SetStrikeThruTextView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Option", "snippet": "    public Option getItem(int i) {        return mItems.get(i);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/adapters/FileArrayAdapter.java", "stars": "4", "class": {"name": "FileArrayAdapter", "extends": "ArrayAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getView", "params": ["int", "View", "ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View getView(int position, View convertView, @NonNull ViewGroup parent) {        ViewHolder holder;        if (convertView == null) {            convertView = mLayoutInflater.inflate(id, null);            holder = new ViewHolder(convertView);            convertView.setTag(holder);        } else {            holder = (ViewHolder) convertView.getTag();        }        Option option = mItems.get(position);        if (option != null) {            holder.text1.setText(option.getName());            holder.text2.setText(option.getData());        }        return convertView;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/adapters/FileArrayAdapter.java", "stars": "4", "class": {"name": "FileArrayAdapter", "extends": "ArrayAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getMessage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,List>", "snippet": "    public Map<String, List<String>> getMessage() {        Communication totalCommunication = this.jobCollector.collect();        return totalCommunication.getMessage();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/plugin/DefaultJobPluginCollector.java", "stars": "23", "class": {"name": "DefaultJobPluginCollector", "extends": null, "implements": ["JobPluginCollector"], "modifiers": ["public", "final"]}}, {"method_name": "getMessage", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> getMessage(String key) {        Communication totalCommunication = this.jobCollector.collect();        return totalCommunication.getMessage(key);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/plugin/DefaultJobPluginCollector.java", "stars": "23", "class": {"name": "DefaultJobPluginCollector", "extends": null, "implements": ["JobPluginCollector"], "modifiers": ["public", "final"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items\t\t\t\t.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.BUILDING_BLOCKS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/RedSandRippleBlock.java", "stars": "2", "class": {"name": "RedSandRippleBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": ["FMLCommonSetupEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void init(FMLCommonSetupEvent event) {\t\tfor (Biome biome : ForgeRegistries.BIOMES.getValues()) {\t\t\tboolean biomeCriteria = false;\t\t\tif (ForgeRegistries.BIOMES.getKey(biome).equals(new ResourceLocation(\"badlands\")))\t\t\t\tbiomeCriteria = true;\t\t\tif (ForgeRegistries.BIOMES.getKey(biome).equals(new ResourceLocation(\"badlands_plateau\")))\t\t\t\tbiomeCriteria = true;\t\t\tif (ForgeRegistries.BIOMES.getKey(biome).equals(new ResourceLocation(\"wooded_badlands_plateau\")))\t\t\t\tbiomeCriteria = true;\t\t\tif (ForgeRegistries.BIOMES.getKey(biome).equals(new ResourceLocation(\"eroded_badlands\")))\t\t\t\tbiomeCriteria = true;\t\t\tif (ForgeRegistries.BIOMES.getKey(biome).equals(new ResourceLocation(\"modified_wooded_badlands_plateau\")))\t\t\t\tbiomeCriteria = true;\t\t\tif (ForgeRegistries.BIOMES.getKey(biome).equals(new ResourceLocation(\"modified_badlands_plateau\")))\t\t\t\tbiomeCriteria = true;\t\t\tif (!biomeCriteria)\t\t\t\tcontinue;\t\t\tbiome.addFeature(GenerationStage.Decoration.UNDERGROUND_ORES, new OreFeature(OreFeatureConfig::deserialize) {\t\t\t\t@Override\t\t\t\tpublic boolean place(IWorld world, ChunkGenerator generator, Random rand, BlockPos pos, OreFeatureConfig config) {\t\t\t\t\tDimensionType dimensionType = world.getDimension().getType();\t\t\t\t\tboolean dimensionCriteria = false;\t\t\t\t\tif (dimensionType == DimensionType.OVERWORLD)\t\t\t\t\t\tdimensionCriteria = true;\t\t\t\t\tif (!dimensionCriteria)\t\t\t\t\t\treturn false;\t\t\t\t\treturn super.place(world, generator, rand, pos, config);\t\t\t\t}\t\t\t}.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create(\"redsandripple\", \"redsandripple\", blockAt -> {\t\t\t\tboolean blockCriteria = false;\t\t\t\tif (blockAt.getBlock() == Blocks.RED_SAND.getDefaultState().getBlock())\t\t\t\t\tblockCriteria = true;\t\t\t\treturn blockCriteria;\t\t\t}), block.getDefaultState(), 32)).withPlacement(Placement.COUNT_RANGE.configure(new CountRangeConfig(32, 0, 0, 256))));\t\t}\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/RedSandRippleBlock.java", "stars": "2", "class": {"name": "RedSandRippleBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/RedSandRippleBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "FallingBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getModeTip", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getModeTip() {        return modeTip;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/bean/UserMode.java", "stars": "2", "class": {"name": "UserMode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setModeTip", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setModeTip(String modeTip) {        this.modeTip = modeTip;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/bean/UserMode.java", "stars": "2", "class": {"name": "UserMode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getThunderMode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getThunderMode() {        return thunderMode;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/bean/UserMode.java", "stars": "2", "class": {"name": "UserMode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setThunderMode", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setThunderMode(int thunderMode) {        this.thunderMode = thunderMode;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/bean/UserMode.java", "stars": "2", "class": {"name": "UserMode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getModeType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getModeType() {        return modeType;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/bean/UserMode.java", "stars": "2", "class": {"name": "UserMode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setModeType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setModeType(String modeType) {        this.modeType = modeType;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/bean/UserMode.java", "stars": "2", "class": {"name": "UserMode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "execute", "params": ["MsgSender", "CQCodeUtil"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void execute(MsgSender msgSender, CQCodeUtil cqCodeUtil) {        List<Integer> list = DB.Instance.searchDeadLineGroup();        Map<String, List<String>> map = DB.Instance.clearTree(list);        Set<String> GroupQQs = map.keySet();        StringBuilder stringBuilder = new StringBuilder();        List<String> badMan;        for (String GroupQQ : GroupQQs) {            stringBuilder.delete(0, stringBuilder.length());            badMan = map.get(GroupQQ);            stringBuilder.append(\"\u4f1a\u6218\u7ed3\u675f\uff0c\u8f9b\u82e6\u8f9b\u82e6\\n\u4f46\u662f\uff1a\");            for (String QQ : badMan) {                stringBuilder.append(\"[CQ:at,qq=\").append(QQ).append(\"] \");            }            stringBuilder.append(\"\u4ed6\u4eec\u8fd8\u5728\u51fa\u5200\u3002\u90fd\u5df2\u7ecf\u7ed3\u675f\u5566\");            msgSender.SENDER.sendGroupMsg(GroupQQ, stringBuilder.toString());        }        AllCoolDown();    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/timeJob/clearEnd.java", "stars": "2", "class": {"name": "clearEnd", "extends": null, "implements": ["TimeJob"], "modifiers": ["public"]}}, {"method_name": "addDevice", "params": ["ConnectableDevice"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addDevice(ConnectableDevice device) {        if (device == null || device.getServices().size() == 0)            return;        if (!activeDevices.containsKey(device.getId()))            activeDevices.put(device.getId(), device);        JSONObject storedDevice = getStoredDevice(device.getId());        if (storedDevice != null) {            updateDevice(device);        } else {            storedDevices.put(device.getId(), device.toJSONObject());            store();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/DefaultConnectableDeviceStore.java", "stars": "4", "class": {"name": "DefaultConnectableDeviceStore", "extends": null, "implements": ["ConnectableDeviceStore"], "modifiers": ["public"]}}, {"method_name": "removeDevice", "params": ["ConnectableDevice"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeDevice(ConnectableDevice device) {        if (device == null)            return;        activeDevices.remove(device.getId());        storedDevices.remove(device.getId());        store();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/DefaultConnectableDeviceStore.java", "stars": "4", "class": {"name": "DefaultConnectableDeviceStore", "extends": null, "implements": ["ConnectableDeviceStore"], "modifiers": ["public"]}}, {"method_name": "updateDevice", "params": ["ConnectableDevice"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateDevice(ConnectableDevice device) {        if (device == null || device.getServices().size() == 0)            return;        JSONObject storedDevice = getStoredDevice(device.getId());        if (storedDevice == null)            return;        try {            storedDevice.put(ConnectableDevice.KEY_LAST_IP, device.getLastKnownIPAddress());            storedDevice.put(ConnectableDevice.KEY_LAST_SEEN, device.getLastSeenOnWifi());            storedDevice.put(ConnectableDevice.KEY_LAST_CONNECTED, device.getLastConnected());            storedDevice.put(ConnectableDevice.KEY_LAST_DETECTED, device.getLastDetection());            JSONObject services = storedDevice.optJSONObject(ConnectableDevice.KEY_SERVICES);            if (services == null)                services = new JSONObject();            for (DeviceService service : device.getServices()) {                JSONObject serviceInfo = service.toJSONObject();                if (serviceInfo != null)                    services.put(service.getServiceDescription().getUUID(), serviceInfo);            }            storedDevice.put(ConnectableDevice.KEY_SERVICES, services);            storedDevices.put(device.getId(), storedDevice);            activeDevices.put(device.getId(), device);            store();        } catch (JSONException e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/DefaultConnectableDeviceStore.java", "stars": "4", "class": {"name": "DefaultConnectableDeviceStore", "extends": null, "implements": ["ConnectableDeviceStore"], "modifiers": ["public"]}}, {"method_name": "removeAll", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeAll() {        activeDevices.clear();        storedDevices.clear();        store();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/DefaultConnectableDeviceStore.java", "stars": "4", "class": {"name": "DefaultConnectableDeviceStore", "extends": null, "implements": ["ConnectableDeviceStore"], "modifiers": ["public"]}}, {"method_name": "getStoredDevices", "params": [], "throws": null, "modifiers": ["public"], "return_type": "JSONObject", "snippet": "    public JSONObject getStoredDevices() {        JSONObject ret = new JSONObject();        for (java.util.Map.Entry<String, JSONObject> entry: storedDevices.entrySet()) {            try {                ret.put(entry.getKey(), entry.getValue());            } catch (JSONException e) {                e.printStackTrace();            }        }        return ret;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/DefaultConnectableDeviceStore.java", "stars": "4", "class": {"name": "DefaultConnectableDeviceStore", "extends": null, "implements": ["ConnectableDeviceStore"], "modifiers": ["public"]}}, {"method_name": "getDevice", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "ConnectableDevice", "snippet": "    public ConnectableDevice getDevice(String uuid) {        if (uuid == null || uuid.length() == 0)            return null;        ConnectableDevice foundDevice = getActiveDevice(uuid);        if (foundDevice == null) {            JSONObject foundDeviceInfo = getStoredDevice(uuid);            if (foundDeviceInfo != null)                foundDevice = new ConnectableDevice(foundDeviceInfo);        }        return foundDevice;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/DefaultConnectableDeviceStore.java", "stars": "4", "class": {"name": "DefaultConnectableDeviceStore", "extends": null, "implements": ["ConnectableDeviceStore"], "modifiers": ["public"]}}, {"method_name": "getActiveDevice", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "ConnectableDevice", "snippet": "    private ConnectableDevice getActiveDevice(String uuid) {        ConnectableDevice foundDevice = activeDevices.get(uuid);        if (foundDevice == null) {            for (ConnectableDevice device : activeDevices.values()) {                for (DeviceService service : device.getServices()) {                    if (uuid.equals(service.getServiceDescription().getUUID())) {                        return device;                    }                }            }        }        return foundDevice;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/DefaultConnectableDeviceStore.java", "stars": "4", "class": {"name": "DefaultConnectableDeviceStore", "extends": null, "implements": ["ConnectableDeviceStore"], "modifiers": ["public"]}}, {"method_name": "getStoredDevice", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "JSONObject", "snippet": "    private JSONObject getStoredDevice(String uuid) {        JSONObject foundDevice = storedDevices.get(uuid);        if (foundDevice == null) {            for (JSONObject device: storedDevices.values()) {                JSONObject services = device.optJSONObject(ConnectableDevice.KEY_SERVICES);                if (services != null && services.has(uuid))                    return device;            }        }        return foundDevice;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/DefaultConnectableDeviceStore.java", "stars": "4", "class": {"name": "DefaultConnectableDeviceStore", "extends": null, "implements": ["ConnectableDeviceStore"], "modifiers": ["public"]}}, {"method_name": "getServiceConfig", "params": ["ServiceDescription"], "throws": null, "modifiers": ["public"], "return_type": "ServiceConfig", "snippet": "    public ServiceConfig getServiceConfig(ServiceDescription serviceDescription) {        if (serviceDescription == null) {            return null;                    }        String uuid = serviceDescription.getUUID();        if (uuid == null || uuid.length() == 0) {            return null;        }        JSONObject device = getStoredDevice(uuid);        if (device != null) {            JSONObject services = device.optJSONObject(ConnectableDevice.KEY_SERVICES);            if (services != null) {                JSONObject service = services.optJSONObject(uuid);                if (service != null) {                    JSONObject serviceConfigInfo = service.optJSONObject(DeviceService.KEY_CONFIG);                    if (serviceConfigInfo != null) {                        return ServiceConfig.getConfig(serviceConfigInfo);                    }                }            }        }        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/DefaultConnectableDeviceStore.java", "stars": "4", "class": {"name": "DefaultConnectableDeviceStore", "extends": null, "implements": ["ConnectableDeviceStore"], "modifiers": ["public"]}}, {"method_name": "load", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void load() {        String line;        BufferedReader in = null;        File file = new File(fileFullPath);        if (!file.exists()) {            version = CURRENT_VERSION;            created = Util.getTime();            updated = Util.getTime();        } else {            boolean encounteredException = false;            try {                in = new BufferedReader(new FileReader(file));                StringBuilder sb = new StringBuilder();                while ((line = in.readLine()) != null) {                    sb.append(line);                }                in.close();                JSONObject data = new JSONObject(sb.toString());                JSONArray deviceArray = data.optJSONArray(KEY_DEVICES);                if (deviceArray != null) {                    for (int i = 0; i < deviceArray.length(); i++) {                        JSONObject device = deviceArray.getJSONObject(i);                        storedDevices.put(device.getString(ConnectableDevice.KEY_ID), device);                    }                }                version = data.optInt(KEY_VERSION, CURRENT_VERSION);                created = data.optLong(KEY_CREATED, 0);                updated = data.optLong(KEY_UPDATED, 0);            } catch (IOException e) {                e.printStackTrace();                // it is likely that the device store has been corrupted                encounteredException = true;            } catch (JSONException e) {                e.printStackTrace();                // it is likely that the device store has been corrupted                encounteredException = true;            }            if (encounteredException && storedDevices == null) {                file.delete();                version = CURRENT_VERSION;                created = Util.getTime();                updated = Util.getTime();            }        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/DefaultConnectableDeviceStore.java", "stars": "4", "class": {"name": "DefaultConnectableDeviceStore", "extends": null, "implements": ["ConnectableDeviceStore"], "modifiers": ["public"]}}, {"method_name": "store", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void store() {        updated = Util.getTime();        JSONObject deviceStore = new JSONObject();        try {            deviceStore.put(KEY_VERSION, version);            deviceStore.put(KEY_CREATED, created);            deviceStore.put(KEY_UPDATED, updated);            JSONArray deviceArray = new JSONArray(storedDevices.values());            deviceStore.put(KEY_DEVICES, deviceArray);        } catch (JSONException e) {            e.printStackTrace();        }        if (!waitToWrite)            writeStoreToDisk(deviceStore);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/DefaultConnectableDeviceStore.java", "stars": "4", "class": {"name": "DefaultConnectableDeviceStore", "extends": null, "implements": ["ConnectableDeviceStore"], "modifiers": ["public"]}}, {"method_name": "writeStoreToDisk", "params": ["JSONObject"], "throws": null, "modifiers": ["synchronized", "private"], "return_type": "void", "snippet": "    private synchronized void writeStoreToDisk(final JSONObject deviceStore) {        final long lastUpdate = updated;        waitToWrite = true;        Util.runInBackground(new Runnable() {            @Override            public void run() {                FileWriter out;                try {                    File output = new File(fileFullPath);                    if (!output.exists())                        output.getParentFile().mkdirs();                    out = new FileWriter(output);                    out.write(deviceStore.toString());                    out.close();                } catch (IOException e) {                    e.printStackTrace();                } finally {                    waitToWrite = false;                }                if (lastUpdate < updated)                    writeStoreToDisk(deviceStore);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/DefaultConnectableDeviceStore.java", "stars": "4", "class": {"name": "DefaultConnectableDeviceStore", "extends": null, "implements": ["ConnectableDeviceStore"], "modifiers": ["public"]}}, {"method_name": "length", "params": [], "throws": ["ProxyCacheException"], "modifiers": ["synchronized", "public"], "return_type": "long", "snippet": "    public synchronized long length() throws ProxyCacheException {        if (sourceInfo.length == Integer.MIN_VALUE) {            fetchContentInfo();        }        return sourceInfo.length;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpUrlSource.java", "stars": "2", "class": {"name": "HttpUrlSource", "extends": null, "implements": ["Source"], "modifiers": ["public"]}}, {"method_name": "open", "params": ["long"], "throws": ["ProxyCacheException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void open(long offset) throws ProxyCacheException {        try {            connection = openConnection(offset, -1);            String mime = connection.getContentType();            inputStream = new BufferedInputStream(connection.getInputStream(), DEFAULT_BUFFER_SIZE);            long length = readSourceAvailableBytes(connection, offset, connection.getResponseCode());            this.sourceInfo = new SourceInfo(sourceInfo.url, length, mime);            this.sourceInfoStorage.put(sourceInfo.url, sourceInfo);        } catch (IOException e) {            throw new ProxyCacheException(\"Error opening connection for \" + sourceInfo.url + \" with offset \" + offset, e);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpUrlSource.java", "stars": "2", "class": {"name": "HttpUrlSource", "extends": null, "implements": ["Source"], "modifiers": ["public"]}}, {"method_name": "readSourceAvailableBytes", "params": ["HttpURLConnection", "long", "int"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "long", "snippet": "    private long readSourceAvailableBytes(HttpURLConnection connection, long offset, int responseCode) throws IOException {        long contentLength = getContentLength(connection);        return responseCode == HTTP_OK ? contentLength                : responseCode == HTTP_PARTIAL ? contentLength + offset : sourceInfo.length;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpUrlSource.java", "stars": "2", "class": {"name": "HttpUrlSource", "extends": null, "implements": ["Source"], "modifiers": ["public"]}}, {"method_name": "getContentLength", "params": ["HttpURLConnection"], "throws": null, "modifiers": ["private"], "return_type": "long", "snippet": "    private long getContentLength(HttpURLConnection connection) {        String contentLengthValue = connection.getHeaderField(\"Content-Length\");        return contentLengthValue == null ? -1 : Long.parseLong(contentLengthValue);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpUrlSource.java", "stars": "2", "class": {"name": "HttpUrlSource", "extends": null, "implements": ["Source"], "modifiers": ["public"]}}, {"method_name": "close", "params": [], "throws": ["ProxyCacheException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void close() throws ProxyCacheException {        if (connection != null) {            try {                connection.disconnect();            } catch (NullPointerException | IllegalArgumentException e) {                String message = \"Wait... but why? WTF!? \" +                        \"Really shouldn't happen any more after fixing https://github.com/danikula/AndroidVideoCache/issues/43. \" +                        \"If you read it on your device log, please, notify me danikula@gmail.com or create issue here \" +                        \"https://github.com/danikula/AndroidVideoCache/issues.\";                throw new RuntimeException(message, e);            } catch (ArrayIndexOutOfBoundsException e) {                HttpProxyCacheDebuger.printfError(\"Error closing connection correctly. Should happen only on Android L. \" +                        \"If anybody know how to fix it, please visit https://github.com/danikula/AndroidVideoCache/issues/88. \" +                        \"Until good solution is not know, just ignore this issue :(\", e);            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpUrlSource.java", "stars": "2", "class": {"name": "HttpUrlSource", "extends": null, "implements": ["Source"], "modifiers": ["public"]}}, {"method_name": "read", "params": ["byte"], "throws": ["ProxyCacheException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int read(byte[] buffer) throws ProxyCacheException {        if (inputStream == null) {            throw new ProxyCacheException(\"Error reading data from \" + sourceInfo.url + \": connection is absent!\");        }        try {            return inputStream.read(buffer, 0, buffer.length);        } catch (InterruptedIOException e) {            throw new InterruptedProxyCacheException(\"Reading source \" + sourceInfo.url + \" is interrupted\", e);        } catch (IOException e) {            throw new ProxyCacheException(\"Error reading data from \" + sourceInfo.url, e);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpUrlSource.java", "stars": "2", "class": {"name": "HttpUrlSource", "extends": null, "implements": ["Source"], "modifiers": ["public"]}}, {"method_name": "fetchContentInfo", "params": [], "throws": ["ProxyCacheException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void fetchContentInfo() throws ProxyCacheException {        HttpURLConnection urlConnection = null;        InputStream inputStream = null;        try {            urlConnection = openConnection(0, 10000);            long length = getContentLength(urlConnection);            String mime = urlConnection.getContentType();            inputStream = urlConnection.getInputStream();            this.sourceInfo = new SourceInfo(sourceInfo.url, length, mime);            this.sourceInfoStorage.put(sourceInfo.url, sourceInfo);        } catch (IOException e) {            HttpProxyCacheDebuger.printfError(\"Error fetching info from \" + sourceInfo.url, e);        } finally {            ProxyCacheUtils.close(inputStream);            if (urlConnection != null) {                urlConnection.disconnect();            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpUrlSource.java", "stars": "2", "class": {"name": "HttpUrlSource", "extends": null, "implements": ["Source"], "modifiers": ["public"]}}, {"method_name": "openConnection", "params": ["long", "int"], "throws": ["IOException", "ProxyCacheException"], "modifiers": ["private"], "return_type": "HttpURLConnection", "snippet": "    private HttpURLConnection openConnection(long offset, int timeout) throws IOException, ProxyCacheException {        HttpURLConnection connection;        boolean redirected;        int redirectCount = 0;        String url = this.sourceInfo.url;        do {            connection = (HttpURLConnection) new URL(url).openConnection();            injectCustomHeaders(connection, url);            if (offset > 0) {                connection.setRequestProperty(\"Range\", \"bytes=\" + offset + \"-\");            }            if (timeout > 0) {                connection.setConnectTimeout(timeout);                connection.setReadTimeout(timeout);            }            int code = connection.getResponseCode();            redirected = code == HTTP_MOVED_PERM || code == HTTP_MOVED_TEMP || code == HTTP_SEE_OTHER;            if (redirected) {                url = connection.getHeaderField(\"Location\");                redirectCount++;                connection.disconnect();            }            if (redirectCount > MAX_REDIRECTS) {                throw new ProxyCacheException(\"Too many redirects: \" + redirectCount);            }        } while (redirected);        return connection;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpUrlSource.java", "stars": "2", "class": {"name": "HttpUrlSource", "extends": null, "implements": ["Source"], "modifiers": ["public"]}}, {"method_name": "injectCustomHeaders", "params": ["HttpURLConnection", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void injectCustomHeaders(HttpURLConnection connection, String url) {        Map<String, String> extraHeaders = headerInjector.addHeaders(url);        if (extraHeaders == null) {            return;        }        HttpProxyCacheDebuger.printfError(\"****** injectCustomHeaders ****** :\" + extraHeaders.size());        for (Map.Entry<String, String> header : extraHeaders.entrySet()) {            connection.setRequestProperty(header.getKey(), header.getValue());        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpUrlSource.java", "stars": "2", "class": {"name": "HttpUrlSource", "extends": null, "implements": ["Source"], "modifiers": ["public"]}}, {"method_name": "getMime", "params": [], "throws": ["ProxyCacheException"], "modifiers": ["synchronized", "public"], "return_type": "String", "snippet": "    public synchronized String getMime() throws ProxyCacheException {        if (TextUtils.isEmpty(sourceInfo.mime)) {            fetchContentInfo();        }        return sourceInfo.mime;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpUrlSource.java", "stars": "2", "class": {"name": "HttpUrlSource", "extends": null, "implements": ["Source"], "modifiers": ["public"]}}, {"method_name": "getUrl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getUrl() {        return sourceInfo.url;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpUrlSource.java", "stars": "2", "class": {"name": "HttpUrlSource", "extends": null, "implements": ["Source"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"HttpUrlSource{sourceInfo='\" + sourceInfo + \"}\";    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpUrlSource.java", "stars": "2", "class": {"name": "HttpUrlSource", "extends": null, "implements": ["Source"], "modifiers": ["public"]}}, {"method_name": "startPlayLogic", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void startPlayLogic() {        //\u6a21\u62df\u8bf7\u6c42        new Handler().postDelayed(new Runnable() {            @Override            public void run() {                int min = 1;                int max = 10;                Random random = new Random();                int i = random.nextInt(max) % (max - min + 1) + min;                if (i % 3 == 0) {                    mOriginUrl = \"http://wdquan-space.b0.upaiyun.com/VIDEO/2018/11/22/ae0645396048_hls_time10.m3u8\";                    mUrl = \"http://wdquan-space.b0.upaiyun.com/VIDEO/2018/11/22/ae0645396048_hls_time10.m3u8\";                    mTitle = \"ggg2\";                } else if (i % 4 == 0) {                    //\u6a21\u62df\u8bf7\u6c42\u5931\u8d25                    onError(0, 0);                } else {                    mOriginUrl = \"http://7xjmzj.com1.z0.glb.clouddn.com/20171026175005_JObCxCE2.mp4\";                    mUrl = \"http://7xjmzj.com1.z0.glb.clouddn.com/20171026175005_JObCxCE2.mp4\";                    mTitle = \"ffff1\";                }                mCache = false;                RequestListADVideoPlayer.super.startPlayLogic();            }        }, 2000);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/RequestListADVideoPlayer.java", "stars": "2", "class": {"name": "RequestListADVideoPlayer", "extends": "ListADVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getConnection", "params": [], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Connection", "snippet": "  public Connection getConnection() throws SQLException {    return popConnection(dataSource.getUsername(), dataSource.getPassword()).getProxyConnection();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "getConnection", "params": ["String", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Connection", "snippet": "  public Connection getConnection(String username, String password) throws SQLException {    return popConnection(username, password).getProxyConnection();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "setLoginTimeout", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setLoginTimeout(int loginTimeout) {    DriverManager.setLoginTimeout(loginTimeout);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "getLoginTimeout", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getLoginTimeout() {    return DriverManager.getLoginTimeout();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "setLogWriter", "params": ["PrintWriter"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setLogWriter(PrintWriter logWriter) {    DriverManager.setLogWriter(logWriter);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "getLogWriter", "params": [], "throws": null, "modifiers": ["public"], "return_type": "PrintWriter", "snippet": "  public PrintWriter getLogWriter() {    return DriverManager.getLogWriter();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "setDriver", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setDriver(String driver) {    dataSource.setDriver(driver);    forceCloseAll();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "setUrl", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setUrl(String url) {    dataSource.setUrl(url);    forceCloseAll();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "setUsername", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setUsername(String username) {    dataSource.setUsername(username);    forceCloseAll();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "setPassword", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setPassword(String password) {    dataSource.setPassword(password);    forceCloseAll();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "setDefaultAutoCommit", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setDefaultAutoCommit(boolean defaultAutoCommit) {    dataSource.setAutoCommit(defaultAutoCommit);    forceCloseAll();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "setDefaultTransactionIsolationLevel", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setDefaultTransactionIsolationLevel(Integer defaultTransactionIsolationLevel) {    dataSource.setDefaultTransactionIsolationLevel(defaultTransactionIsolationLevel);    forceCloseAll();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "setDriverProperties", "params": ["Properties"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setDriverProperties(Properties driverProps) {    dataSource.setDriverProperties(driverProps);    forceCloseAll();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "setDefaultNetworkTimeout", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setDefaultNetworkTimeout(Integer milliseconds) {    dataSource.setDefaultNetworkTimeout(milliseconds);    forceCloseAll();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "setPoolMaximumActiveConnections", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setPoolMaximumActiveConnections(int poolMaximumActiveConnections) {    this.poolMaximumActiveConnections = poolMaximumActiveConnections;    forceCloseAll();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "setPoolMaximumIdleConnections", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setPoolMaximumIdleConnections(int poolMaximumIdleConnections) {    this.poolMaximumIdleConnections = poolMaximumIdleConnections;    forceCloseAll();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "setPoolMaximumLocalBadConnectionTolerance", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setPoolMaximumLocalBadConnectionTolerance(      int poolMaximumLocalBadConnectionTolerance) {    this.poolMaximumLocalBadConnectionTolerance = poolMaximumLocalBadConnectionTolerance;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "setPoolMaximumCheckoutTime", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setPoolMaximumCheckoutTime(int poolMaximumCheckoutTime) {    this.poolMaximumCheckoutTime = poolMaximumCheckoutTime;    forceCloseAll();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "setPoolTimeToWait", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setPoolTimeToWait(int poolTimeToWait) {    this.poolTimeToWait = poolTimeToWait;    forceCloseAll();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "setPoolPingQuery", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setPoolPingQuery(String poolPingQuery) {    this.poolPingQuery = poolPingQuery;    forceCloseAll();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "setPoolPingEnabled", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setPoolPingEnabled(boolean poolPingEnabled) {    this.poolPingEnabled = poolPingEnabled;    forceCloseAll();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "setPoolPingConnectionsNotUsedFor", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setPoolPingConnectionsNotUsedFor(int milliseconds) {    this.poolPingConnectionsNotUsedFor = milliseconds;    forceCloseAll();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "getDriver", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getDriver() {    return dataSource.getDriver();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "getUrl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getUrl() {    return dataSource.getUrl();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "getUsername", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getUsername() {    return dataSource.getUsername();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "getPassword", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getPassword() {    return dataSource.getPassword();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "isAutoCommit", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isAutoCommit() {    return dataSource.isAutoCommit();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "getDefaultTransactionIsolationLevel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getDefaultTransactionIsolationLevel() {    return dataSource.getDefaultTransactionIsolationLevel();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "getDriverProperties", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Properties", "snippet": "  public Properties getDriverProperties() {    return dataSource.getDriverProperties();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "getDefaultNetworkTimeout", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getDefaultNetworkTimeout() {    return dataSource.getDefaultNetworkTimeout();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "getPoolMaximumActiveConnections", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getPoolMaximumActiveConnections() {    return poolMaximumActiveConnections;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "getPoolMaximumIdleConnections", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getPoolMaximumIdleConnections() {    return poolMaximumIdleConnections;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "getPoolMaximumLocalBadConnectionTolerance", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getPoolMaximumLocalBadConnectionTolerance() {    return poolMaximumLocalBadConnectionTolerance;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "getPoolMaximumCheckoutTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getPoolMaximumCheckoutTime() {    return poolMaximumCheckoutTime;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "getPoolTimeToWait", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getPoolTimeToWait() {    return poolTimeToWait;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "getPoolPingQuery", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getPoolPingQuery() {    return poolPingQuery;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "isPoolPingEnabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isPoolPingEnabled() {    return poolPingEnabled;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "getPoolPingConnectionsNotUsedFor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getPoolPingConnectionsNotUsedFor() {    return poolPingConnectionsNotUsedFor;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "forceCloseAll", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void forceCloseAll() {    synchronized (state) {      expectedConnectionTypeCode = assembleConnectionTypeCode(dataSource.getUrl(), dataSource.getUsername(), dataSource.getPassword());      for (int i = state.activeConnections.size(); i > 0; i--) {        try {          PooledConnection conn = state.activeConnections.remove(i - 1);          conn.invalidate();          Connection realConn = conn.getRealConnection();          if (!realConn.getAutoCommit()) {            realConn.rollback();          }          realConn.close();        } catch (Exception e) {          // ignore        }      }      for (int i = state.idleConnections.size(); i > 0; i--) {        try {          PooledConnection conn = state.idleConnections.remove(i - 1);          conn.invalidate();          Connection realConn = conn.getRealConnection();          if (!realConn.getAutoCommit()) {            realConn.rollback();          }          realConn.close();        } catch (Exception e) {          // ignore        }      }    }    if (log.isDebugEnabled()) {      log.debug(\"PooledDataSource forcefully closed/removed all connections.\");    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "getPoolState", "params": [], "throws": null, "modifiers": ["public"], "return_type": "PoolState", "snippet": "  public PoolState getPoolState() {    return state;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "assembleConnectionTypeCode", "params": ["String", "String", "String"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "  private int assembleConnectionTypeCode(String url, String username, String password) {    return (\"\" + url + username + password).hashCode();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "pushConnection", "params": ["PooledConnection"], "throws": ["SQLException"], "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void pushConnection(PooledConnection conn) throws SQLException {    synchronized (state) {      state.activeConnections.remove(conn);      if (conn.isValid()) {        if (state.idleConnections.size() < poolMaximumIdleConnections && conn.getConnectionTypeCode() == expectedConnectionTypeCode) {          state.accumulatedCheckoutTime += conn.getCheckoutTime();          if (!conn.getRealConnection().getAutoCommit()) {            conn.getRealConnection().rollback();          }          PooledConnection newConn = new PooledConnection(conn.getRealConnection(), this);          state.idleConnections.add(newConn);          newConn.setCreatedTimestamp(conn.getCreatedTimestamp());          newConn.setLastUsedTimestamp(conn.getLastUsedTimestamp());          conn.invalidate();          if (log.isDebugEnabled()) {            log.debug(\"Returned connection \" + newConn.getRealHashCode() + \" to pool.\");          }          state.notifyAll();        } else {          state.accumulatedCheckoutTime += conn.getCheckoutTime();          if (!conn.getRealConnection().getAutoCommit()) {            conn.getRealConnection().rollback();          }          conn.getRealConnection().close();          if (log.isDebugEnabled()) {            log.debug(\"Closed connection \" + conn.getRealHashCode() + \".\");          }          conn.invalidate();        }      } else {        if (log.isDebugEnabled()) {          log.debug(\"A bad connection (\" + conn.getRealHashCode() + \") attempted to return to the pool, discarding connection.\");        }        state.badConnectionCount++;      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "popConnection", "params": ["String", "String"], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "PooledConnection", "snippet": "  private PooledConnection popConnection(String username, String password) throws SQLException {    boolean countedWait = false;    PooledConnection conn = null;    long t = System.currentTimeMillis();    int localBadConnectionCount = 0;    while (conn == null) {      synchronized (state) {        if (!state.idleConnections.isEmpty()) {          // Pool has available connection          conn = state.idleConnections.remove(0);          if (log.isDebugEnabled()) {            log.debug(\"Checked out connection \" + conn.getRealHashCode() + \" from pool.\");          }        } else {          // Pool does not have available connection          if (state.activeConnections.size() < poolMaximumActiveConnections) {            // Can create new connection            conn = new PooledConnection(dataSource.getConnection(), this);            if (log.isDebugEnabled()) {              log.debug(\"Created connection \" + conn.getRealHashCode() + \".\");            }          } else {            // Cannot create new connection            PooledConnection oldestActiveConnection = state.activeConnections.get(0);            long longestCheckoutTime = oldestActiveConnection.getCheckoutTime();            if (longestCheckoutTime > poolMaximumCheckoutTime) {              // Can claim overdue connection              state.claimedOverdueConnectionCount++;              state.accumulatedCheckoutTimeOfOverdueConnections += longestCheckoutTime;              state.accumulatedCheckoutTime += longestCheckoutTime;              state.activeConnections.remove(oldestActiveConnection);              if (!oldestActiveConnection.getRealConnection().getAutoCommit()) {                try {                  oldestActiveConnection.getRealConnection().rollback();                } catch (SQLException e) {                  /*                     Just log a message for debug and continue to execute the following                     statement like nothing happened.                     Wrap the bad connection with a new PooledConnection, this will help                     to not interrupt current executing thread and give current thread a                     chance to join the next competition for another valid/good database                     connection. At the end of this loop, bad {@link @conn} will be set as null.                   */                  log.debug(\"Bad connection. Could not roll back\");                }              }              conn = new PooledConnection(oldestActiveConnection.getRealConnection(), this);              conn.setCreatedTimestamp(oldestActiveConnection.getCreatedTimestamp());              conn.setLastUsedTimestamp(oldestActiveConnection.getLastUsedTimestamp());              oldestActiveConnection.invalidate();              if (log.isDebugEnabled()) {                log.debug(\"Claimed overdue connection \" + conn.getRealHashCode() + \".\");              }            } else {              // Must wait              try {                if (!countedWait) {                  state.hadToWaitCount++;                  countedWait = true;                }                if (log.isDebugEnabled()) {                  log.debug(\"Waiting as long as \" + poolTimeToWait + \" milliseconds for connection.\");                }                long wt = System.currentTimeMillis();                state.wait(poolTimeToWait);                state.accumulatedWaitTime += System.currentTimeMillis() - wt;              } catch (InterruptedException e) {                break;              }            }          }        }        if (conn != null) {          // ping to server and check the connection is valid or not          if (conn.isValid()) {            if (!conn.getRealConnection().getAutoCommit()) {              conn.getRealConnection().rollback();            }            conn.setConnectionTypeCode(assembleConnectionTypeCode(dataSource.getUrl(), username, password));            conn.setCheckoutTimestamp(System.currentTimeMillis());            conn.setLastUsedTimestamp(System.currentTimeMillis());            state.activeConnections.add(conn);            state.requestCount++;            state.accumulatedRequestTime += System.currentTimeMillis() - t;          } else {            if (log.isDebugEnabled()) {              log.debug(\"A bad connection (\" + conn.getRealHashCode() + \") was returned from the pool, getting another connection.\");            }            state.badConnectionCount++;            localBadConnectionCount++;            conn = null;            if (localBadConnectionCount > (poolMaximumIdleConnections + poolMaximumLocalBadConnectionTolerance)) {              if (log.isDebugEnabled()) {                log.debug(\"PooledDataSource: Could not get a good connection to the database.\");              }              throw new SQLException(\"PooledDataSource: Could not get a good connection to the database.\");            }          }        }      }    }    if (conn == null) {      if (log.isDebugEnabled()) {        log.debug(\"PooledDataSource: Unknown severe error condition.  The connection pool returned a null connection.\");      }      throw new SQLException(\"PooledDataSource: Unknown severe error condition.  The connection pool returned a null connection.\");    }    return conn;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "pingConnection", "params": ["PooledConnection"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "  protected boolean pingConnection(PooledConnection conn) {    boolean result = true;    try {      result = !conn.getRealConnection().isClosed();    } catch (SQLException e) {      if (log.isDebugEnabled()) {        log.debug(\"Connection \" + conn.getRealHashCode() + \" is BAD: \" + e.getMessage());      }      result = false;    }    if (result) {      if (poolPingEnabled) {        if (poolPingConnectionsNotUsedFor >= 0 && conn.getTimeElapsedSinceLastUse() > poolPingConnectionsNotUsedFor) {          try {            if (log.isDebugEnabled()) {              log.debug(\"Testing connection \" + conn.getRealHashCode() + \" ...\");            }            Connection realConn = conn.getRealConnection();            try (Statement statement = realConn.createStatement()) {              statement.executeQuery(poolPingQuery).close();            }            if (!realConn.getAutoCommit()) {              realConn.rollback();            }            result = true;            if (log.isDebugEnabled()) {              log.debug(\"Connection \" + conn.getRealHashCode() + \" is GOOD!\");            }          } catch (Exception e) {            log.warn(\"Execution of ping query '\" + poolPingQuery + \"' failed: \" + e.getMessage());            try {              conn.getRealConnection().close();            } catch (Exception e2) {              //ignore            }            result = false;            if (log.isDebugEnabled()) {              log.debug(\"Connection \" + conn.getRealHashCode() + \" is BAD: \" + e.getMessage());            }          }        }      }    }    return result;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "unwrapConnection", "params": ["Connection"], "throws": null, "modifiers": ["public", "static"], "return_type": "Connection", "snippet": "  public static Connection unwrapConnection(Connection conn) {    if (Proxy.isProxyClass(conn.getClass())) {      InvocationHandler handler = Proxy.getInvocationHandler(conn);      if (handler instanceof PooledConnection) {        return ((PooledConnection) handler).getRealConnection();      }    }    return conn;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "finalize", "params": [], "throws": ["Throwable"], "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void finalize() throws Throwable {    forceCloseAll();    super.finalize();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "unwrap", "params": ["Class<T>"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "T", "snippet": "  public <T> T unwrap(Class<T> iface) throws SQLException {    throw new SQLException(getClass().getName() + \" is not a wrapper.\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "isWrapperFor", "params": ["Class<?>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isWrapperFor(Class<?> iface) {    return false;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "getParentLogger", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Logger", "snippet": "  public Logger getParentLogger() {    return Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "stars": "15", "class": {"name": "PooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "addInterceptors", "params": ["InterceptorRegistry"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addInterceptors(InterceptorRegistry registry) {        registry.addInterceptor(authenticationInterceptor).order(1).addPathPatterns(\"/**\");        registry.addInterceptor(authorityInterceptor).order(2).addPathPatterns(\"/**\");        registry.addInterceptor(userInfoSyncInterceptor).order(3).addPathPatterns(\"/**\");        registry.addInterceptor(userRoleInterceptor).order(4).addPathPatterns(\"/**\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/ServiceWebConfiguer.java", "stars": "23", "class": {"name": "ServiceWebConfiguer", "extends": null, "implements": ["WebMvcConfigurer"], "modifiers": ["public"]}}, {"method_name": "configureMessageConverters", "params": ["List<HttpMessageConverter>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {        converters.add(customHttpMessageConverter);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/ServiceWebConfiguer.java", "stars": "23", "class": {"name": "ServiceWebConfiguer", "extends": null, "implements": ["WebMvcConfigurer"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        SpringApplication.run(UtilApplication.class, args);    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/util/src/main/java/com/integration/util/UtilApplication.java", "stars": "2", "class": {"name": "UtilApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "victim", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int victim() {        synchronized (this) {            while (size > 0) {                if (hand == capacity) {                    hand = 0;                }                if (isPin[hand]) {                    hand++;                } else if (ref[hand]) {                    ref[hand++] = false;                } else {                    isPin[hand] = true;                    size--;                    return hand++;                }            }            return -1;        }    }", "url": "https://raw.githubusercontent.com/CNYuYang/BusTub/master/src/main/java/run/yuyang/db/buffer/ClockReplacer.java", "stars": "2", "class": {"name": "ClockReplacer", "extends": null, "implements": ["Replacer"], "modifiers": ["public"]}}, {"method_name": "pin", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void pin(int frameId) {        synchronized (this) {            if (!isPin[frameId]) {                isPin[frameId] = true;                size--;            }        }    }", "url": "https://raw.githubusercontent.com/CNYuYang/BusTub/master/src/main/java/run/yuyang/db/buffer/ClockReplacer.java", "stars": "2", "class": {"name": "ClockReplacer", "extends": null, "implements": ["Replacer"], "modifiers": ["public"]}}, {"method_name": "unpin", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void unpin(int frameId) {        synchronized (this) {            if (isPin[frameId]) {                isPin[frameId] = false;                ref[frameId] = true;                size++;            }        }    }", "url": "https://raw.githubusercontent.com/CNYuYang/BusTub/master/src/main/java/run/yuyang/db/buffer/ClockReplacer.java", "stars": "2", "class": {"name": "ClockReplacer", "extends": null, "implements": ["Replacer"], "modifiers": ["public"]}}, {"method_name": "size", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int size() {        synchronized (this) {            return size;        }    }", "url": "https://raw.githubusercontent.com/CNYuYang/BusTub/master/src/main/java/run/yuyang/db/buffer/ClockReplacer.java", "stars": "2", "class": {"name": "ClockReplacer", "extends": null, "implements": ["Replacer"], "modifiers": ["public"]}}, {"method_name": "printStackTrace", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void printStackTrace() {        super.printStackTrace();    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/exception/MusicNotFoundException.java", "stars": "2", "class": {"name": "MusicNotFoundException", "extends": "Exception", "implements": null, "modifiers": ["public"]}}, {"method_name": "printStackTrace", "params": ["PrintStream"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void printStackTrace(PrintStream s) {        super.printStackTrace(s);    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/exception/MusicNotFoundException.java", "stars": "2", "class": {"name": "MusicNotFoundException", "extends": "Exception", "implements": null, "modifiers": ["public"]}}, {"method_name": "printStackTrace", "params": ["PrintWriter"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void printStackTrace(PrintWriter s) {        super.printStackTrace(s);    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/exception/MusicNotFoundException.java", "stars": "2", "class": {"name": "MusicNotFoundException", "extends": "Exception", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getCode() {        return code;    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/exception/MusicNotFoundException.java", "stars": "2", "class": {"name": "MusicNotFoundException", "extends": "Exception", "implements": null, "modifiers": ["public"]}}, {"method_name": "getErrorMessage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getErrorMessage() {        return errorMessage;    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-service/src/main/java/com/upgrad/musichoster/service/exception/MusicNotFoundException.java", "stars": "2", "class": {"name": "MusicNotFoundException", "extends": "Exception", "implements": null, "modifiers": ["public"]}}, {"method_name": "getReachability", "params": ["InetAddress", "DeviceServiceReachabilityListener"], "throws": null, "modifiers": ["public", "static"], "return_type": "DeviceServiceReachability", "snippet": "    public static DeviceServiceReachability getReachability(InetAddress ipAddress, DeviceServiceReachabilityListener listener) {        return new DeviceServiceReachability(ipAddress, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/etc/helper/DeviceServiceReachability.java", "stars": "4", "class": {"name": "DeviceServiceReachability", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getReachability", "params": ["String", "DeviceServiceReachabilityListener"], "throws": null, "modifiers": ["public", "static"], "return_type": "DeviceServiceReachability", "snippet": "    public static DeviceServiceReachability getReachability(final String ipAddress, DeviceServiceReachabilityListener listener) {        InetAddress addr;        try {            addr = InetAddress.getByName(ipAddress);        } catch (UnknownHostException e) {            return null;        }        return getReachability(addr, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/etc/helper/DeviceServiceReachability.java", "stars": "4", "class": {"name": "DeviceServiceReachability", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getIpAddress", "params": [], "throws": null, "modifiers": ["public"], "return_type": "InetAddress", "snippet": "    public InetAddress getIpAddress() {        return ipAddress;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/etc/helper/DeviceServiceReachability.java", "stars": "4", "class": {"name": "DeviceServiceReachability", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setIpAddress", "params": ["InetAddress"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIpAddress(InetAddress ipAddress) {        this.ipAddress = ipAddress;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/etc/helper/DeviceServiceReachability.java", "stars": "4", "class": {"name": "DeviceServiceReachability", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isRunning", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isRunning() {        return testThread != null && testThread.isAlive();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/etc/helper/DeviceServiceReachability.java", "stars": "4", "class": {"name": "DeviceServiceReachability", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getListener", "params": [], "throws": null, "modifiers": ["public"], "return_type": "DeviceServiceReachabilityListener", "snippet": "    public DeviceServiceReachabilityListener getListener() {        return listener;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/etc/helper/DeviceServiceReachability.java", "stars": "4", "class": {"name": "DeviceServiceReachability", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setListener", "params": ["DeviceServiceReachabilityListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setListener(DeviceServiceReachabilityListener listener) {        this.listener = listener;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/etc/helper/DeviceServiceReachability.java", "stars": "4", "class": {"name": "DeviceServiceReachability", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void start() {        if (isRunning())            return;        testThread = new Thread(testReachability);        testThread.start();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/etc/helper/DeviceServiceReachability.java", "stars": "4", "class": {"name": "DeviceServiceReachability", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "stop", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void stop() {        if (!isRunning())            return;        testThread.interrupt();        testThread = null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/etc/helper/DeviceServiceReachability.java", "stars": "4", "class": {"name": "DeviceServiceReachability", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "unreachable", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void unreachable() {        stop();        if (listener != null)            listener.onLoseReachability(this);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/etc/helper/DeviceServiceReachability.java", "stars": "4", "class": {"name": "DeviceServiceReachability", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws Exception {        //1\u3001\u5bfc\u5165jar\u5305        //2\u3001\u5b9a\u4e49\u914d\u7f6e\u6587\u4ef6        //3\u3001\u52a0\u8f7d\u914d\u7f6e\u6587\u4ef6        Properties pro = new Properties();        InputStream is = DruidDemo1.class.getClassLoader().getResourceAsStream(\"druid.properties\");        pro.load(is);        //4\u3001\u83b7\u53d6\u8fde\u63a5\u6c60\u5bf9\u8c61        DataSource ds = DruidDataSourceFactory.createDataSource(pro);        //5\u3001\u83b7\u53d6\u8fde\u63a5        Connection conn = ds.getConnection();        System.out.println(conn);    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/jdbc/datasource/druid/DruidDemo1.java", "stars": "2", "class": {"name": "DruidDemo1", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "millisFromString", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Long", "snippet": "    public static Long millisFromString(String time) {        if (time == null) return null;        int timeLenght = time.length();        char last = time.charAt(timeLenght - 1);        String toParse = time;        Long multiplier = 1000L;        if (Character.isLetter(last)) {            toParse = time.substring(0, timeLenght - 1);            multiplier = TIME_VALUES.get(last);            if (multiplier == null) return null;        }        int timeInt;        try {            timeInt = Integer.parseInt(toParse);        } catch (Exception $) {            return null;        }        return timeInt * multiplier;    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/util/TimeUtils.java", "stars": "2", "class": {"name": "TimeUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "format", "params": ["long"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String format(long time) {        long second = (time / 1000) % 60;        long minute = (time / (1000 * 60)) % 60;        long hour = (time / (1000 * 60 * 60)) % 24;        long day = (time / (1000 * 60 * 60 * 24)) % 7;        long week = (time / (1000 * 60 * 60 * 24 * 7)) % 30;        StringBuilder builder = new StringBuilder();        if (week > 0) {            builder.append(week).append(\" \").append(week == 1 ? \"week\" : \"weeks\").append(\" \");        }        if (day > 0) {            builder.append(day).append(\" \").append(day == 1 ? \"day\" : \"days\").append(\" \");        }        if (hour > 0) {            builder.append(hour).append(\" \").append(hour == 1 ? \"hour\" : \"hours\").append(\" \");        }        if (minute > 0) {            builder.append(minute).append(\" \").append(minute == 1 ? \"minute\" : \"minutes\").append(\" \");        }        if (second > 0) {            builder.append(second).append(\" \").append(second == 1 ? \"second\" : \"seconds\").append(\" \");        }        return builder.toString().trim();    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/util/TimeUtils.java", "stars": "2", "class": {"name": "TimeUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isDebugEnabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isDebugEnabled() {    return logger.isDebugEnabled();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/slf4j/Slf4jLocationAwareLoggerImpl.java", "stars": "15", "class": {"name": "Slf4jLocationAwareLoggerImpl", "extends": null, "implements": ["Log"], "modifiers": []}}, {"method_name": "isTraceEnabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isTraceEnabled() {    return logger.isTraceEnabled();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/slf4j/Slf4jLocationAwareLoggerImpl.java", "stars": "15", "class": {"name": "Slf4jLocationAwareLoggerImpl", "extends": null, "implements": ["Log"], "modifiers": []}}, {"method_name": "error", "params": ["String", "Throwable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void error(String s, Throwable e) {    logger.log(MARKER, FQCN, LocationAwareLogger.ERROR_INT, s, null, e);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/slf4j/Slf4jLocationAwareLoggerImpl.java", "stars": "15", "class": {"name": "Slf4jLocationAwareLoggerImpl", "extends": null, "implements": ["Log"], "modifiers": []}}, {"method_name": "error", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void error(String s) {    logger.log(MARKER, FQCN, LocationAwareLogger.ERROR_INT, s, null, null);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/slf4j/Slf4jLocationAwareLoggerImpl.java", "stars": "15", "class": {"name": "Slf4jLocationAwareLoggerImpl", "extends": null, "implements": ["Log"], "modifiers": []}}, {"method_name": "debug", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void debug(String s) {    logger.log(MARKER, FQCN, LocationAwareLogger.DEBUG_INT, s, null, null);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/slf4j/Slf4jLocationAwareLoggerImpl.java", "stars": "15", "class": {"name": "Slf4jLocationAwareLoggerImpl", "extends": null, "implements": ["Log"], "modifiers": []}}, {"method_name": "trace", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void trace(String s) {    logger.log(MARKER, FQCN, LocationAwareLogger.TRACE_INT, s, null, null);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/slf4j/Slf4jLocationAwareLoggerImpl.java", "stars": "15", "class": {"name": "Slf4jLocationAwareLoggerImpl", "extends": null, "implements": ["Log"], "modifiers": []}}, {"method_name": "warn", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void warn(String s) {    logger.log(MARKER, FQCN, LocationAwareLogger.WARN_INT, s, null, null);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/slf4j/Slf4jLocationAwareLoggerImpl.java", "stars": "15", "class": {"name": "Slf4jLocationAwareLoggerImpl", "extends": null, "implements": ["Log"], "modifiers": []}}, {"method_name": "executeProcedure", "params": ["java"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void executeProcedure(java.util.HashMap<String, Object> dependencies) {\t\tif (dependencies.get(\"entity\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency entity for procedure DeathCapMushroomFoodEaten!\");\t\t\treturn;\t\t}\t\tEntity entity = (Entity) dependencies.get(\"entity\");\t\tif (entity instanceof LivingEntity)\t\t\t((LivingEntity) entity).addPotionEffect(new EffectInstance(Effects.SPEED, (int) 512, (int) 2, (false), (true)));\t\tif (entity instanceof LivingEntity)\t\t\t((LivingEntity) entity).addPotionEffect(new EffectInstance(Effects.STRENGTH, (int) 512, (int) 2, (false), (true)));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/procedures/DeathCapMushroomFoodEatenProcedure.java", "stars": "2", "class": {"name": "DeathCapMushroomFoodEatenProcedure", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "show", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void show() {        System.out.println(\"\u8fd9\u662fJava\u8bfe\u7a0b\u7684\u7b14\u8bb0\");    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/abstractfactory/JavaNote.java", "stars": "2", "class": {"name": "JavaNote", "extends": "Note", "implements": null, "modifiers": ["public"]}}, {"method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": ["ServletException", "IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void doGet(final HttpServletRequest req, final HttpServletResponse resp)      throws ServletException, IOException {    try {      resp.setContentType(JSON_MIME_TYPE);      resp.getOutputStream()          .println(new GsonBuilder()              .setPrettyPrinting()              .create()              .toJson(this.statusService.getStatus()));      resp.setStatus(HttpServletResponse.SC_OK);    } catch (final Exception e) {      log.error(\"Error!! while reporting status: \", e);      resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e.getMessage());    } finally {      resp.getOutputStream().close();    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/servlet/StatusServlet.java", "stars": "18", "class": {"name": "StatusServlet", "extends": "HttpServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldFailForBothOneAndMany", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFailForBothOneAndMany() {    Configuration configuration = new Configuration();    Assertions.assertThrows(RuntimeException.class, () -> {      configuration.addMapper(MapperWithOneAndMany.class);    });  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/WrongMapperTest.java", "stars": "15", "class": {"name": "WrongMapperTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "sayHello", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sayHello(){        System.out.println(\"Hello \u6211\u662fHuman!\");    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/24.%E3%80%90Stream%E6%B5%81%E3%80%81%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%E3%80%91%E7%AC%94%E8%AE%B0/code/13_StreamAndMethodReference/src/com/itheima/demo07/SuperMethodReference/Human.java", "stars": "2", "class": {"name": "Human", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "ad", "params": ["Component"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void ad(Component c){        c1.add(c);    }", "url": "https://raw.githubusercontent.com/4156/MindustryModMaker/master/src/ProjectViewer/ProjectManagement.java", "stars": "2", "class": {"name": "ProjectManagement", "extends": "JFrame", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\t    protected void onCreate(Bundle savedInstanceState) {\t        super.onCreate(savedInstanceState);\t        setContentView(R.layout.activity_main);\t \t        // get the listview\t        expListView = (ExpandableListView) findViewById(R.id.rewardListView);\t        giftCardButton=(Button)findViewById(R.id.gift_card_button);\t \t        giftCardButton.setOnClickListener(new OnClickListener() {\t\t\t\t\t\t\t\t@Override\t\t\t\tpublic void onClick(View arg0) {\t\t\t\t\t// TODO Auto-generated method stub\t\t\t\t\tIntent intentGiftCard=new Intent(getApplicationContext(),GiftCards.class);\t\t\t\t\tstartActivity(intentGiftCard);\t\t\t\t}\t\t\t});\t        // preparing list data\t        prepareListData();\t \t        listAdapter = new ExpandableListAdapter(this, listDataHeader, listDataChild);\t \t        // setting list adapter\t        expListView.setAdapter(listAdapter);\t    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/expandablelistview/src/com/example/expandablelistview/RewardPoints.java", "stars": "74", "class": {"name": "RewardPoints", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "prepareListData", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\t    private void prepareListData(){\t        listDataHeader = new ArrayList<String>();\t        listDataChild = new HashMap<String, List<String>>();\t \t        // Adding child data\t        listDataHeader.add(\"How can I earn rewards points?\");\t        listDataHeader.add(\"Look for our App e-Guy Logo,\");\t        listDataHeader.add(\"Do I only earn rewards points for purchases made through my personal My Apps Co e-Store?\");\t        listDataHeader.add(\"How many points can I earn?\");\t        listDataHeader.add(\"Where can I find my current points balance?\");\t        listDataHeader.add(\"How do I redeem my points?\");\t        listDataHeader.add(\"Do Reward Points expire?\");\t        listDataHeader.add(\"What Items Are Eligible For Rewards?\");\t        \t \t        // Adding child data\t        List<String> one = new ArrayList<String>();\t        one.add(\"Simply download the My Apps Co app and use it in place of your existing App store. For every $1.00, you spend for My Apps Co products directly, you accumulate 1 point. Your points will be calculated for each purchase, $1=1 point.\");\t \t        List<String> two = new ArrayList<String>();\t        two.add(\"to know when it's a My Apps Co direct purchase. Additionally, you can earn reward points for selling cell phone plans or renewals directly from your My Apps Co e-store, 15 points for each renewal & 50 points for each new line.\");\t \t        List<String> three = new ArrayList<String>();\t        three.add(\"Yes, all purchases must be made directly from your e-Store. No rewards points are given for purchases in iTunes or Google Play even though we do promote Apps in those platforms.\");\t \t        List<String> four = new ArrayList<String>();\t        four.add(\"There is no limit to how many Reward points you may earn. The more you spend with My Apps Co, the more you earn.\");\t \t        List<String> five = new ArrayList<String>();\t        five.add(\"Login to your account on your My Apps Co app or on www.myappsco.com to view your current rewards totals and or redeem them.\");\t \t        List<String> six = new ArrayList<String>();\t        six.add(\"It's very simple to redeem your My Apps Co Reward Points. Simply login to your account and follow the tutorial to redeem your points.\");\t \t        List<String> seven = new ArrayList<String>();\t        seven.add(\"Yes, you must redeem your My Apps Co Reward Points within 12 months of earning (or receiving them). Points earned on January 10, 2013 will expire on January 10, 2014. Any account with no activity for 1 year will be closed.\");\t \t        List<String> eight = new ArrayList<String>();\t        eight.add(\"Look for the App e-Guy Logo to know when it's a My Apps Co direct purchase. Currently we have the following items available for Rewards. We are always adding to our list of direct purchases:Select Android Apps in the My Apps Co Store All Books in the My Apps Co e-Book Store Tablets (Excluding Apportunity Tablets purchased during ABO enrollment) Cell Phones Plans - new lines and renewals\");\t\t       \t        listDataChild.put(listDataHeader.get(0), one); // Header, Child data\t        listDataChild.put(listDataHeader.get(1), two);\t        listDataChild.put(listDataHeader.get(2), three);\t        listDataChild.put(listDataHeader.get(3), four);\t        listDataChild.put(listDataHeader.get(4), five);\t        listDataChild.put(listDataHeader.get(5), six);\t        listDataChild.put(listDataHeader.get(6), seven);\t        listDataChild.put(listDataHeader.get(7), eight);\t   \t    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/expandablelistview/src/com/example/expandablelistview/RewardPoints.java", "stars": "74", "class": {"name": "RewardPoints", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getChild", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "\t    public Object getChild(int groupPosition, int childPosititon) {\t        return this._listDataChild.get(this._listDataHeader.get(groupPosition))\t                .get(childPosititon);\t    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/expandablelistview/src/com/example/expandablelistview/RewardPoints.java", "stars": "74", "class": {"name": "ExpandableListAdapter", "extends": "BaseExpandableListAdapter", "implements": null, "modifiers": []}}, {"method_name": "getChildId", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "\t    public long getChildId(int groupPosition, int childPosition) {\t        return childPosition;\t    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/expandablelistview/src/com/example/expandablelistview/RewardPoints.java", "stars": "74", "class": {"name": "ExpandableListAdapter", "extends": "BaseExpandableListAdapter", "implements": null, "modifiers": []}}, {"method_name": "getChildView", "params": ["int", "int", "boolean", "View", "ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "\t    public View getChildView(int groupPosition, final int childPosition,\t            boolean isLastChild, View convertView, ViewGroup parent) {\t \t        final String childText = (String) getChild(groupPosition, childPosition);\t \t        if (convertView == null) {\t            LayoutInflater infalInflater = (LayoutInflater) this._context\t                    .getSystemService(Context.LAYOUT_INFLATER_SERVICE);\t            convertView = infalInflater.inflate(R.layout.list_item, null);\t        }\t \t        TextView txtListChild = (TextView) convertView\t                .findViewById(R.id.lblListItem);\t \t        txtListChild.setText(childText);\t        return convertView;\t    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/expandablelistview/src/com/example/expandablelistview/RewardPoints.java", "stars": "74", "class": {"name": "ExpandableListAdapter", "extends": "BaseExpandableListAdapter", "implements": null, "modifiers": []}}, {"method_name": "getChildrenCount", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\t    public int getChildrenCount(int groupPosition) {\t        return this._listDataChild.get(this._listDataHeader.get(groupPosition))\t                .size();\t    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/expandablelistview/src/com/example/expandablelistview/RewardPoints.java", "stars": "74", "class": {"name": "ExpandableListAdapter", "extends": "BaseExpandableListAdapter", "implements": null, "modifiers": []}}, {"method_name": "getGroup", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "\t    public Object getGroup(int groupPosition) {\t        return this._listDataHeader.get(groupPosition);\t    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/expandablelistview/src/com/example/expandablelistview/RewardPoints.java", "stars": "74", "class": {"name": "ExpandableListAdapter", "extends": "BaseExpandableListAdapter", "implements": null, "modifiers": []}}, {"method_name": "getGroupCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\t    public int getGroupCount() {\t        return this._listDataHeader.size();\t    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/expandablelistview/src/com/example/expandablelistview/RewardPoints.java", "stars": "74", "class": {"name": "ExpandableListAdapter", "extends": "BaseExpandableListAdapter", "implements": null, "modifiers": []}}, {"method_name": "getGroupId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "\t    public long getGroupId(int groupPosition) {\t        return groupPosition;\t    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/expandablelistview/src/com/example/expandablelistview/RewardPoints.java", "stars": "74", "class": {"name": "ExpandableListAdapter", "extends": "BaseExpandableListAdapter", "implements": null, "modifiers": []}}, {"method_name": "getGroupView", "params": ["int", "boolean", "View", "ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "\t    public View getGroupView(int groupPosition, boolean isExpanded,\t            View convertView, ViewGroup parent) {\t        String headerTitle = (String) getGroup(groupPosition);\t        if (convertView == null) {\t            LayoutInflater infalInflater = (LayoutInflater) this._context\t                    .getSystemService(Context.LAYOUT_INFLATER_SERVICE);\t            convertView = infalInflater.inflate(R.layout.list_group, null);\t        }\t \t        TextView lblListHeader = (TextView) convertView\t                .findViewById(R.id.lblListHeader);\t        lblListHeader.setTypeface(null, Typeface.BOLD);\t        lblListHeader.setText(headerTitle);\t \t        return convertView;\t    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/expandablelistview/src/com/example/expandablelistview/RewardPoints.java", "stars": "74", "class": {"name": "ExpandableListAdapter", "extends": "BaseExpandableListAdapter", "implements": null, "modifiers": []}}, {"method_name": "hasStableIds", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t    public boolean hasStableIds() {\t        return false;\t    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/expandablelistview/src/com/example/expandablelistview/RewardPoints.java", "stars": "74", "class": {"name": "ExpandableListAdapter", "extends": "BaseExpandableListAdapter", "implements": null, "modifiers": []}}, {"method_name": "isChildSelectable", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t    public boolean isChildSelectable(int groupPosition, int childPosition) {\t        return true;\t    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/expandablelistview/src/com/example/expandablelistview/RewardPoints.java", "stars": "74", "class": {"name": "ExpandableListAdapter", "extends": "BaseExpandableListAdapter", "implements": null, "modifiers": []}}, {"method_name": "setOrientationManager", "params": ["OrientationManager"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOrientationManager(OrientationManager orientationManager) {        mOrientation = orientationManager;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Compass/src/com/google/android/glass/sample/compass/CompassView.java", "stars": "74", "class": {"name": "CompassView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "getHeading", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getHeading() {        return mHeading;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Compass/src/com/google/android/glass/sample/compass/CompassView.java", "stars": "74", "class": {"name": "CompassView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "setHeading", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setHeading(float degrees) {        mHeading = MathUtils.mod(degrees, 360.0f);        animateTo(mHeading);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Compass/src/com/google/android/glass/sample/compass/CompassView.java", "stars": "74", "class": {"name": "CompassView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "setNearbyPlaces", "params": ["List<Place>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setNearbyPlaces(List<Place> places) {        mNearbyPlaces = places;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Compass/src/com/google/android/glass/sample/compass/CompassView.java", "stars": "74", "class": {"name": "CompassView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        // The view displays 90 degrees across its width so that one 90 degree head rotation is        // equal to one full view cycle.        float pixelsPerDegree = getWidth() / 90.0f;        float centerX = getWidth() / 2.0f;        float centerY = getHeight() / 2.0f;        canvas.save();        canvas.translate(-mAnimatedHeading * pixelsPerDegree + centerX, centerY);        // In order to ensure that places on a boundary close to 0 or 360 get drawn correctly, we        // draw them three times; once to the left, once at the \"true\" bearing, and once to the        // right.        for (int i = -1; i <= 1; i++) {            drawPlaces(canvas, pixelsPerDegree, i * pixelsPerDegree * 360);        }        drawCompassDirections(canvas, pixelsPerDegree);        canvas.restore();        mPaint.setColor(NEEDLE_COLOR);        drawNeedle(canvas, false);        drawNeedle(canvas, true);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Compass/src/com/google/android/glass/sample/compass/CompassView.java", "stars": "74", "class": {"name": "CompassView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawCompassDirections", "params": ["Canvas", "float"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void drawCompassDirections(Canvas canvas, float pixelsPerDegree) {        float degreesPerTick = 360.0f / mDirections.length;        mPaint.setColor(Color.WHITE);        // We draw two extra ticks/labels on each side of the view so that the        // full range is visible even when the heading is approximately 0.        for (int i = -2; i <= mDirections.length + 2; i++) {            if (MathUtils.mod(i, 2) == 0) {                // Draw a text label for the even indices.                String direction = mDirections[MathUtils.mod(i, mDirections.length)];                mPaint.getTextBounds(direction, 0, direction.length(), mTextBounds);                canvas.drawText(direction,                        i * degreesPerTick * pixelsPerDegree - mTextBounds.width() / 2,                        mTextBounds.height() / 2, mPaint);            } else {                // Draw a tick mark for the odd indices.                canvas.drawLine(i * degreesPerTick * pixelsPerDegree, -TICK_HEIGHT / 2, i                        * degreesPerTick * pixelsPerDegree, TICK_HEIGHT / 2, mTickPaint);            }        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Compass/src/com/google/android/glass/sample/compass/CompassView.java", "stars": "74", "class": {"name": "CompassView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawPlaces", "params": ["Canvas", "float", "float"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void drawPlaces(Canvas canvas, float pixelsPerDegree, float offset) {        if (mOrientation.hasLocation() && mNearbyPlaces != null) {            synchronized (mNearbyPlaces) {                Location userLocation = mOrientation.getLocation();                double latitude1 = userLocation.getLatitude();                double longitude1 = userLocation.getLongitude();                mAllBounds.clear();                // Loop over the list of nearby places (those within 10 km of the user's current                // location), and compute the relative bearing from the user's location to the                // place's location. This determines the position on the compass view where the                // pin will be drawn.                for (Place place : mNearbyPlaces) {                    double latitude2 = place.getLatitude();                    double longitude2 = place.getLongitude();                    float bearing = MathUtils.getBearing(latitude1, longitude1, latitude2,                            longitude2);                    String name = place.getName();                    double distanceKm = MathUtils.getDistance(latitude1, longitude1, latitude2,                            longitude2);                    String text = getContext().getResources().getString(                        R.string.place_text_format, name, mDistanceFormat.format(distanceKm));                    // Measure the text and offset the text bounds to the location where the text                    // will finally be drawn.                    Rect textBounds = new Rect();                    mPlacePaint.getTextBounds(text, 0, text.length(), textBounds);                    textBounds.offsetTo((int) (offset + bearing * pixelsPerDegree                            + PLACE_PIN_WIDTH / 2 + PLACE_TEXT_MARGIN), canvas.getHeight() / 2                            - (int) PLACE_TEXT_HEIGHT);                    // Extend the bounds rectangle to include the pin icon and a small margin                    // to the right of the text, for the overlap calculations below.                    textBounds.left -= PLACE_PIN_WIDTH + PLACE_TEXT_MARGIN;                    textBounds.right += PLACE_TEXT_MARGIN;                    // This loop attempts to find the best vertical position for the string by                    // starting at the bottom of the display and checking to see if it overlaps                    // with any other labels that were already drawn. If there is an overlap, we                    // move up and check again, repeating this process until we find a vertical                    // position where there is no overlap, or when we reach the limit on                    // overlapping place names.                    boolean intersects;                    int numberOfTries = 0;                    do {                        intersects = false;                        numberOfTries++;                        textBounds.offset(0, (int) -(PLACE_TEXT_HEIGHT + PLACE_TEXT_LEADING));                        for (Rect existing : mAllBounds) {                            if (Rect.intersects(existing, textBounds)) {                                intersects = true;                                break;                            }                        }                    } while (intersects && numberOfTries <= MAX_OVERLAPPING_PLACE_NAMES);                    // Only draw the string if it would not go high enough to overlap the compass                    // directions. This means some places may not be drawn, even if they're nearby.                    if (numberOfTries <= MAX_OVERLAPPING_PLACE_NAMES) {                        mAllBounds.add(textBounds);                        canvas.drawBitmap(mPlaceBitmap, offset + bearing * pixelsPerDegree                                - PLACE_PIN_WIDTH / 2, textBounds.top + 2, mPaint);                        canvas.drawText(text,                                offset + bearing * pixelsPerDegree + PLACE_PIN_WIDTH / 2                                + PLACE_TEXT_MARGIN, textBounds.top + PLACE_TEXT_HEIGHT,                                mPlacePaint);                    }                }            }        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Compass/src/com/google/android/glass/sample/compass/CompassView.java", "stars": "74", "class": {"name": "CompassView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawNeedle", "params": ["Canvas", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void drawNeedle(Canvas canvas, boolean bottom) {        float centerX = getWidth() / 2.0f;        float origin;        float sign;        // Flip the vertical coordinates if we're drawing the bottom needle.        if (bottom) {            origin = getHeight();            sign = -1;        } else {            origin = 0;            sign = 1;        }        float needleHalfWidth = NEEDLE_WIDTH / 2;        mPath.reset();        mPath.moveTo(centerX - needleHalfWidth, origin);        mPath.lineTo(centerX - needleHalfWidth, origin + sign * (NEEDLE_HEIGHT - 4));        mPath.lineTo(centerX, origin + sign * NEEDLE_HEIGHT);        mPath.lineTo(centerX + needleHalfWidth, origin + sign * (NEEDLE_HEIGHT - 4));        mPath.lineTo(centerX + needleHalfWidth, origin);        mPath.close();        canvas.drawPath(mPath, mPaint);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Compass/src/com/google/android/glass/sample/compass/CompassView.java", "stars": "74", "class": {"name": "CompassView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "setupAnimator", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setupAnimator() {        mAnimator.setInterpolator(new LinearInterpolator());        mAnimator.setDuration(250);        // Notifies us at each frame of the animation so we can redraw the view.        mAnimator.addUpdateListener(new AnimatorUpdateListener() {            @Override            public void onAnimationUpdate(ValueAnimator animator) {                mAnimatedHeading = MathUtils.mod((Float) mAnimator.getAnimatedValue(), 360.0f);                invalidate();            }        });        // Notifies us when the animation is over. During an animation, the user's head may have        // continued to move to a different orientation than the original destination angle of the        // animation. Since we can't easily change the animation goal while it is running, we call        // animateTo() again, which will either redraw at the new orientation (if the difference is        // small enough), or start another animation to the new heading. This seems to produce        // fluid results.        mAnimator.addListener(new AnimatorListenerAdapter() {            @Override            public void onAnimationEnd(Animator animator) {                animateTo(mHeading);            }        });    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Compass/src/com/google/android/glass/sample/compass/CompassView.java", "stars": "74", "class": {"name": "CompassView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "animateTo", "params": ["float"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void animateTo(float end) {        // Only act if the animator is not currently running. If the user's orientation changes        // while the animator is running, we wait until the end of the animation to update the        // display again, to prevent jerkiness.        if (!mAnimator.isRunning()) {            float start = mAnimatedHeading;            float distance = Math.abs(end - start);            float reverseDistance = 360.0f - distance;            float shortest = Math.min(distance, reverseDistance);            if (Float.isNaN(mAnimatedHeading) || shortest < MIN_DISTANCE_TO_ANIMATE) {                // If the distance to the destination angle is small enough (or if this is the                // first time the compass is being displayed), it will be more fluid to just redraw                // immediately instead of doing an animation.                mAnimatedHeading = end;                invalidate();            } else {                // For larger distances (i.e., if the compass \"jumps\" because of sensor calibration                // issues), we animate the effect to provide a more fluid user experience. The                // calculation below finds the shortest distance between the two angles, which may                // involve crossing 0/360 degrees.                float goal;                if (distance < reverseDistance) {                    goal = end;                } else if (end < start) {                    goal = end + 360.0f;                } else {                    goal = end - 360.0f;                }                mAnimator.setFloatValues(start, goal);                mAnimator.start();            }        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Compass/src/com/google/android/glass/sample/compass/CompassView.java", "stars": "74", "class": {"name": "CompassView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": ["List<T>", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void init(List<T> pageResult, int pageSize) {    if (pageSize <= 0) {      throw new IllegalArgumentException(\"Paging size must be greater than zero.\");    }    if (null == pageResult) {      throw new NullPointerException(\"Paging resource list must be not null.\");    }    if (pageResult.size() % pageSize > 0) {      this.totalPage = (pageResult.size() / pageSize) + 1;    } else {      this.totalPage = pageResult.size() / pageSize;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/utils/PagingListStreamUtil.java", "stars": "18", "class": {"name": "PagingListStreamUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSurplusPage", "params": [], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "  private int getSurplusPage() {    if (instanceList.size() % pageSize > 0) {      return (instanceList.size() / pageSize) + 1;    } else {      return instanceList.size() / pageSize;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/utils/PagingListStreamUtil.java", "stars": "18", "class": {"name": "PagingListStreamUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hasNext", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean hasNext() {    return instanceList.size() > 0;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/utils/PagingListStreamUtil.java", "stars": "18", "class": {"name": "PagingListStreamUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTotalPage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getTotalPage() {    return totalPage;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/utils/PagingListStreamUtil.java", "stars": "18", "class": {"name": "PagingListStreamUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "next", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<T>", "snippet": "  public List<T> next() {    List<T> pagingData = instanceList.stream().limit(pageSize).collect(Collectors.toList());    instanceList = instanceList.stream().skip(pageSize).collect(Collectors.toList());    return pagingData;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/utils/PagingListStreamUtil.java", "stars": "18", "class": {"name": "PagingListStreamUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurPageNo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getCurPageNo() {    return totalPage - getSurplusPage();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/utils/PagingListStreamUtil.java", "stars": "18", "class": {"name": "PagingListStreamUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurrentPageData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<T>", "snippet": "  public List<T> getCurrentPageData(){    return this.currentPageData;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/utils/PagingListStreamUtil.java", "stars": "18", "class": {"name": "PagingListStreamUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCurrentPageData", "params": ["List<T>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setCurrentPageData(List<T> currentPageData){    this.currentPageData = currentPageData;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/utils/PagingListStreamUtil.java", "stars": "18", "class": {"name": "PagingListStreamUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCurPageNo", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setCurPageNo(int curPageNo){    this.curPageNo = curPageNo < 1 ? 1 : curPageNo > this.totalPage ? this.totalPage : curPageNo;    setCurrentPageData(currentPageData());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/utils/PagingListStreamUtil.java", "stars": "18", "class": {"name": "PagingListStreamUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "currentPageData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<T>", "snippet": "  public List<T> currentPageData(){    if(this.pageSize==0 || this.totalPage == 1 || this.totalPage == 0){      return this.instanceList;    }    List<T> currentPageData = new ArrayList<>();    instanceList.stream().skip((this.curPageNo - 1 ) * this.pageSize).limit(this.pageSize).forEach(        e->currentPageData.add(e)    );    return currentPageData;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/utils/PagingListStreamUtil.java", "stars": "18", "class": {"name": "PagingListStreamUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onNavigationItemSelected", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onNavigationItemSelected (android.view.MenuItem p0)\t{\t\treturn n_onNavigationItemSelected (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/design/widget/NavigationView_OnNavigationItemSelectedListenerImplementor.java", "stars": "2", "class": {"name": "NavigationView_OnNavigationItemSelectedListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onNavigationItemSelected", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onNavigationItemSelected (android.view.MenuItem p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/design/widget/NavigationView_OnNavigationItemSelectedListenerImplementor.java", "stars": "2", "class": {"name": "NavigationView_OnNavigationItemSelectedListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/design/widget/NavigationView_OnNavigationItemSelectedListenerImplementor.java", "stars": "2", "class": {"name": "NavigationView_OnNavigationItemSelectedListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/design/widget/NavigationView_OnNavigationItemSelectedListenerImplementor.java", "stars": "2", "class": {"name": "NavigationView_OnNavigationItemSelectedListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "start", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void start(Activity act) {        Intent starter = new Intent(act, TransformerActivity.class);        act.startActivity(starter);    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/TransformerActivity.java", "stars": "331", "class": {"name": "TransformerActivity", "extends": "AppCompatActivity", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_transformer);        buildTestData();        mViewPager = findViewById(R.id.vp);        mAdapter = new Adapter(mData);        mViewPager.setAdapter(mAdapter);        mViewPager.setPageTransformer(false, new Transformer(mAdapter));        // \u6dfb\u52a0\u5e03\u5c40\u53d8\u5316\u652f\u6301\u4fee\u590d\u6eda\u52a8        GraceViewPagerSupport.supportLayoutChange(mViewPager);        mViewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {            @Override            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {            }            @Override            public void onPageSelected(int position) {                Log.d(TAG, \"onPageSelected() called with: position = [\" + position + \"]\");            }            @Override            public void onPageScrollStateChanged(int state) {            }        });        mPlaceholderView = findViewById(R.id.placeholder);        findViewById(R.id.reverse_btn).setOnClickListener(this);        findViewById(R.id.add_btn).setOnClickListener(this);        findViewById(R.id.delete_btn).setOnClickListener(this);        findViewById(R.id.change_padding_btn).setOnClickListener(this);        findViewById(R.id.change_margin_btn).setOnClickListener(this);        findViewById(R.id.locate_btn).setOnClickListener(this);        findViewById(R.id.smooth_btn).setOnClickListener(this);    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/TransformerActivity.java", "stars": "331", "class": {"name": "TransformerActivity", "extends": "AppCompatActivity", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "buildTestData", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void buildTestData() {        for (int i = 0; i < 10; i++) {            mData.add(\"item:\" + i);        }    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/TransformerActivity.java", "stars": "331", "class": {"name": "TransformerActivity", "extends": "AppCompatActivity", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClick(View v) {        switch (v.getId()) {            case R.id.reverse_btn:                Collections.reverse(mData);                mAdapter.notifyDataSetChanged();                break;            case R.id.add_btn:                mData.add(mViewPager.getCurrentItem(), \"add item:\" + mData.size());                mAdapter.notifyDataSetChanged();                break;            case R.id.delete_btn:                if (mData.size() > 0) {                    mData.remove(mViewPager.getCurrentItem());                    mAdapter.notifyDataSetChanged();                }                break;            case R.id.change_padding_btn:                boolean visible = mPlaceholderView.getVisibility() == View.VISIBLE;                mPlaceholderView.setVisibility(visible ? View.GONE : View.VISIBLE);                int padding = visible ? dip2px(50) : dip2px(75);                mViewPager.setPadding(padding, 0, padding, 0);                break;            case R.id.change_margin_btn:                int pageMargin = mViewPager.getPageMargin();                if (pageMargin == 0) {                    pageMargin = dip2px(10);                } else {                    pageMargin = 0;                }//                mViewPager.setPageMargin(pageMargin);                GraceViewPagerSupport.setPageMargin(mViewPager, pageMargin);                break;            case R.id.locate_btn:            case R.id.smooth_btn:                int nextInt = new Random().nextInt(mData.size());                mViewPager.setCurrentItem(nextInt, v.getId() == R.id.smooth_btn);                break;        }    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/TransformerActivity.java", "stars": "331", "class": {"name": "TransformerActivity", "extends": "AppCompatActivity", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "dip2px", "params": ["float"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int dip2px(float dpValue) {        final float scale = getResources().getDisplayMetrics().density;        return (int) (dpValue * scale + 0.5f);    }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/TransformerActivity.java", "stars": "331", "class": {"name": "TransformerActivity", "extends": "AppCompatActivity", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "transformPageWithCorrectPosition", "params": ["View", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void transformPageWithCorrectPosition(@NonNull View page, float position) {            if (position >= -1 && position <= 1) {                // [-1,1]\uff0c\u4e2d\u95f4\u4ee5\u53ca\u76f8\u90bb\u7684\u9875\u9762\uff0c\u4e00\u822c\u76f8\u90bb\u7684\u624d\u4f1a\u7528\u4e8e\u8ba1\u7b97\u52a8\u753b                float scale = SCALE + (1 - SCALE) * (1 - Math.abs(position));                page.setScaleX(scale);                page.setScaleY(scale);            } else {                // [-Infinity,-1)\u3001(1,+Infinity]\uff0c\u8d85\u51fa\u76f8\u90bb\u7684\u8303\u56f4                page.setScaleX(SCALE);                page.setScaleY(SCALE);            }        }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/TransformerActivity.java", "stars": "331", "class": {"name": "Transformer", "extends": "GracePageTransformer", "implements": null, "modifiers": ["private"]}}, {"method_name": "instantiateItemView", "params": ["ViewGroup", "String", "int"], "throws": null, "modifiers": ["protected"], "return_type": "View", "snippet": "        protected View instantiateItemView(@NonNull ViewGroup container, String item, int position) {            return getLayoutInflater().inflate(R.layout.page_item, container, false);        }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/TransformerActivity.java", "stars": "331", "class": {"name": "Adapter", "extends": "GracePagerAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "bindItemView", "params": ["View", "String", "int", "boolean"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void bindItemView(@NonNull View itemView, String item, int position, boolean first) {            TextView tv = itemView.findViewById(R.id.tv);            tv.setText(item);        }", "url": "https://raw.githubusercontent.com/wurensen/GraceViewPager/master/app/src/main/java/com/lancewu/graceviewpager/example/TransformerActivity.java", "stars": "331", "class": {"name": "Adapter", "extends": "GracePagerAdapter", "implements": null, "modifiers": ["private"]}}, {"method_name": "now", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Date", "snippet": "    public static Date now() {        return new Date();    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/util/DateUtil.java", "stars": "1", "class": {"name": "DateUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDate", "params": ["Long"], "throws": null, "modifiers": ["public", "static"], "return_type": "Date", "snippet": "    public static Date getDate(Long time) {        return new Date(time);    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/util/DateUtil.java", "stars": "1", "class": {"name": "DateUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "betweenDays", "params": ["Date", "Date"], "throws": null, "modifiers": ["public", "static"], "return_type": "Long", "snippet": "    public static Long betweenDays(Date endDate, Date startDate) {        // \u83b7\u53d6\u76f8\u5dee\u7684\u5929\u6570        return (endDate.getTime() - startDate.getTime()) / (1000L * 3600L * 24L);    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/util/DateUtil.java", "stars": "1", "class": {"name": "DateUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "add", "params": ["Date", "long", "TimeUnit"], "throws": null, "modifiers": ["public", "static"], "return_type": "Date", "snippet": "    public static Date add(@NonNull Date date, long time, @NonNull TimeUnit timeUnit) {        Date result;        int timeIntValue;        if (time > Integer.MAX_VALUE) {            timeIntValue = Integer.MAX_VALUE;        } else {            timeIntValue = Long.valueOf(time).intValue();        }        switch (timeUnit) {            case DAYS:                result = DateUtils.addDays(date, timeIntValue);                break;            case HOURS:                result = DateUtils.addHours(date, timeIntValue);                break;            case MINUTES:                result = DateUtils.addMinutes(date, timeIntValue);                break;            case SECONDS:                result = DateUtils.addSeconds(date, timeIntValue);                break;            case MILLISECONDS:                result = DateUtils.addMilliseconds(date, timeIntValue);                break;            default:                result = date;        }        return result;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/util/DateUtil.java", "stars": "1", "class": {"name": "DateUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "recipes", "params": [], "throws": ["IOException"], "modifiers": ["private", "static"], "return_type": "Map<String,String>", "snippet": "    private static Map<String, String> recipes() throws IOException {        String fileName = \"src/main/resources/recipes.json\";        String recipesJson = new String(Files.readAllBytes(Paths.get(fileName).toAbsolutePath()));        final ObjectMapper mapper = new ObjectMapper();        final MapType type = mapper.getTypeFactory().constructMapType(                HashMap.class, String.class, String.class);        final HashMap<String, String> data = mapper.readValue(recipesJson, type);        return data;    }", "url": "https://raw.githubusercontent.com/EmojiMeals/meals-java/master/src/main/java/Meals.java", "stars": "2", "class": {"name": "Meals", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "allCombos", "params": [], "throws": ["IOException"], "modifiers": ["private", "static"], "return_type": "HashMap<Integer,String>", "snippet": "    private static HashMap<Integer,String> allCombos() throws IOException {        recipes().forEach((ingredients,recipe)-> {             recipes.put(new HashSet<String>(                     Arrays.asList(                             ingredients.split(                                     \"\"                             )                     )             ).hashCode(),recipe);        });        return recipes;    }", "url": "https://raw.githubusercontent.com/EmojiMeals/meals-java/master/src/main/java/Meals.java", "stars": "2", "class": {"name": "Meals", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "mealify", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String mealify(String ingredients) throws IOException {        Integer ingredientHash = new HashSet<String>(                Arrays.asList(                        ingredients.split(                                \"\"                        )                )        ).hashCode();        return allCombos().get(ingredientHash);    }", "url": "https://raw.githubusercontent.com/EmojiMeals/meals-java/master/src/main/java/Meals.java", "stars": "2", "class": {"name": "Meals", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onScrollStateChanged", "params": ["RecyclerView", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onScrollStateChanged(RecyclerView view, int scrollState) {        switch (scrollState) {            case RecyclerView.SCROLL_STATE_IDLE:                playVideo(view);                break;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/ScrollCalculatorHelper.java", "stars": "2", "class": {"name": "ScrollCalculatorHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onScroll", "params": ["RecyclerView", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onScroll(RecyclerView view, int firstVisibleItem, int lastVisibleItem, int visibleItemCount) {        if (firstVisible == firstVisibleItem) {            return;        }        firstVisible = firstVisibleItem;        lastVisible = lastVisibleItem;        visibleCount = visibleItemCount;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/ScrollCalculatorHelper.java", "stars": "2", "class": {"name": "ScrollCalculatorHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "playVideo", "params": ["RecyclerView"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void playVideo(RecyclerView view) {        if (view == null) {            return;        }        RecyclerView.LayoutManager layoutManager = view.getLayoutManager();        GSYBaseVideoPlayer gsyBaseVideoPlayer = null;        boolean needPlay = false;        for (int i = 0; i < visibleCount; i++) {            if (layoutManager.getChildAt(i) != null && layoutManager.getChildAt(i).findViewById(playId) != null) {                GSYBaseVideoPlayer player = (GSYBaseVideoPlayer) layoutManager.getChildAt(i).findViewById(playId);                Rect rect = new Rect();                player.getLocalVisibleRect(rect);                int height = player.getHeight();                //\u8bf4\u660e\u7b2c\u4e00\u4e2a\u5b8c\u5168\u53ef\u89c6                if (rect.top == 0 && rect.bottom == height) {                    gsyBaseVideoPlayer = player;                    if ((player.getCurrentPlayer().getCurrentState() == GSYBaseVideoPlayer.CURRENT_STATE_NORMAL                            || player.getCurrentPlayer().getCurrentState() == GSYBaseVideoPlayer.CURRENT_STATE_ERROR)) {                        needPlay = true;                    }                    break;                }            }        }        if (gsyBaseVideoPlayer != null && needPlay) {            if (runnable != null) {                GSYBaseVideoPlayer tmpPlayer = runnable.gsyBaseVideoPlayer;                playHandler.removeCallbacks(runnable);                runnable = null;                if (tmpPlayer == gsyBaseVideoPlayer) {                    return;                }            }            runnable = new PlayRunnable(gsyBaseVideoPlayer);            //\u964d\u4f4e\u9891\u7387            playHandler.postDelayed(runnable, 400);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/ScrollCalculatorHelper.java", "stars": "2", "class": {"name": "ScrollCalculatorHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "startPlayLogic", "params": ["GSYBaseVideoPlayer", "Context"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void startPlayLogic(GSYBaseVideoPlayer gsyBaseVideoPlayer, Context context) {        if (!com.shuyu.gsyvideoplayer.utils.CommonUtil.isWifiConnected(context)) {            //\u8fd9\u91cc\u5224\u65ad\u662f\u5426wifi            showWifiDialog(gsyBaseVideoPlayer, context);            return;        }        gsyBaseVideoPlayer.startPlayLogic();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/ScrollCalculatorHelper.java", "stars": "2", "class": {"name": "ScrollCalculatorHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "showWifiDialog", "params": ["GSYBaseVideoPlayer", "Context"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void showWifiDialog(final GSYBaseVideoPlayer gsyBaseVideoPlayer, Context context) {        if (!NetworkUtils.isAvailable(context)) {            Toast.makeText(context, context.getResources().getString(com.shuyu.gsyvideoplayer.R.string.no_net), Toast.LENGTH_LONG).show();            return;        }        AlertDialog.Builder builder = new AlertDialog.Builder(context);        builder.setMessage(context.getResources().getString(com.shuyu.gsyvideoplayer.R.string.tips_not_wifi));        builder.setPositiveButton(context.getResources().getString(com.shuyu.gsyvideoplayer.R.string.tips_not_wifi_confirm), new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                dialog.dismiss();                gsyBaseVideoPlayer.startPlayLogic();            }        });        builder.setNegativeButton(context.getResources().getString(com.shuyu.gsyvideoplayer.R.string.tips_not_wifi_cancel), new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                dialog.dismiss();            }        });        builder.create().show();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/ScrollCalculatorHelper.java", "stars": "2", "class": {"name": "ScrollCalculatorHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void run() {            boolean inPosition = false;            //\u5982\u679c\u672a\u64ad\u653e\uff0c\u9700\u8981\u64ad\u653e            if (gsyBaseVideoPlayer != null) {                int[] screenPosition = new int[2];                gsyBaseVideoPlayer.getLocationOnScreen(screenPosition);                int halfHeight = gsyBaseVideoPlayer.getHeight() / 2;                int rangePosition = screenPosition[1] + halfHeight;                //\u4e2d\u5fc3\u70b9\u5728\u64ad\u653e\u533a\u57df\u5185                if (rangePosition >= rangeTop && rangePosition <= rangeBottom) {                    inPosition = true;                }                if (inPosition) {                    startPlayLogic(gsyBaseVideoPlayer, gsyBaseVideoPlayer.getContext());                    //gsyBaseVideoPlayer.startPlayLogic();                }            }        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/ScrollCalculatorHelper.java", "stars": "2", "class": {"name": "PlayRunnable", "extends": null, "implements": ["Runnable"], "modifiers": ["private"]}}, {"method_name": "copy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "LeasingCriteria", "snippet": "    public LeasingCriteria copy() {        return new LeasingCriteria(this);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/dto/LeasingCriteria.java", "stars": "2", "class": {"name": "LeasingCriteria", "extends": null, "implements": ["Serializable", "Criteria"], "modifiers": ["public"]}}, {"method_name": "copy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "LeasingStatusFilter", "snippet": "        public LeasingStatusFilter copy() {            return new LeasingStatusFilter(this);        }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/service/dto/LeasingCriteria.java", "stars": "2", "class": {"name": "LeasingStatusFilter", "extends": "Filter", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onInflate", "params": ["android", "android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onInflate (android.support.v7.widget.ViewStubCompat p0, android.view.View p1)\t{\t\tn_onInflate (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v7/widget/ViewStubCompat_OnInflateListenerImplementor.java", "stars": "2", "class": {"name": "ViewStubCompat_OnInflateListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onInflate", "params": ["android", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onInflate (android.support.v7.widget.ViewStubCompat p0, android.view.View p1);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v7/widget/ViewStubCompat_OnInflateListenerImplementor.java", "stars": "2", "class": {"name": "ViewStubCompat_OnInflateListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v7/widget/ViewStubCompat_OnInflateListenerImplementor.java", "stars": "2", "class": {"name": "ViewStubCompat_OnInflateListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v7/widget/ViewStubCompat_OnInflateListenerImplementor.java", "stars": "2", "class": {"name": "ViewStubCompat_OnInflateListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "getInstance", "params": ["boolean", "long", "int", "int", "boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "PerfTrace", "snippet": "    public static PerfTrace getInstance(boolean isJob, long jobId, int taskGroupId, int priority, boolean enable) {        if (instance == null) {            synchronized (lock) {                if (instance == null) {                    instance = new PerfTrace(isJob, jobId, taskGroupId, priority, enable);                }            }        }        return instance;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "PerfTrace", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "PerfTrace", "snippet": "    public static PerfTrace getInstance() {        if (instance == null) {            LOG.error(\"PerfTrace instance not be init! must have some error! \");            synchronized (lock) {                if (instance == null) {                    instance = new PerfTrace(false, -1111, -1111, 0, false);                }            }        }        return instance;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "PerfTrace", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addTaskDetails", "params": ["int", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addTaskDetails(int taskId, String detail) {        if (enable) {            String before = \"\";            int index = detail.indexOf(\"?\");            String current = detail.substring(0, index == -1 ? detail.length() : index);            if (current.indexOf(\"[\") >= 0) {                current += \"]\";            }            if (taskDetails.containsKey(taskId)) {                before = taskDetails.get(taskId).trim();            }            if (StringUtils.isEmpty(before)) {                before = \"\";            } else {                before += \",\";            }            this.taskDetails.put(taskId, before + current);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "PerfTrace", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "tracePerfRecord", "params": ["PerfRecord"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void tracePerfRecord(PerfRecord perfRecord) {        try {            if (enable) {                long curNanoTime = System.nanoTime();                //ArrayList\u975e\u7ebf\u7a0b\u5b89\u5168                switch (perfRecord.getAction()) {                    case end:                        synchronized (totalEndReport) {                            totalEndReport.add(perfRecord);                            if (totalEndReport.size() > batchSize * 10) {                                sumPerf4EndPrint(totalEndReport);                            }                        }                        if (perfReportEnable && needReport(perfRecord)) {                            synchronized (needReportPool4NotEnd) {                                sumPerf4Report.add(curNanoTime, perfRecord);                                needReportPool4NotEnd.remove(perfRecord);                            }                        }                        break;                    case start:                        if (perfReportEnable && needReport(perfRecord)) {                            synchronized (needReportPool4NotEnd) {                                needReportPool4NotEnd.add(perfRecord);                            }                        }                        break;                }            }        } catch (Exception e) {            // do nothing        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "PerfTrace", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "needReport", "params": ["PerfRecord"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean needReport(PerfRecord perfRecord) {        switch (perfRecord.getPhase()) {            case TASK_TOTAL:            case SQL_QUERY:            case RESULT_NEXT_ALL:            case ODPS_BLOCK_CLOSE:                return true;        }        return false;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "PerfTrace", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "summarizeNoException", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String summarizeNoException() {        String res;        try {            res = summarize();        } catch (Exception e) {            res = \"PerfTrace summarize has Exception \" + e.getMessage();        }        return res;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "PerfTrace", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "summarize", "params": [], "throws": null, "modifiers": ["synchronized", "private"], "return_type": "String", "snippet": "    private synchronized String summarize() {        if (!enable) {            return \"PerfTrace not enable!\";        }        if (totalEndReport.size() > 0) {            sumPerf4EndPrint(totalEndReport);        }        StringBuilder info = new StringBuilder();        info.append(\"\\n === total summarize info === \\n\");        info.append(\"\\n   1. all phase average time info and max time task info: \\n\\n\");        info.append(String.format(\"%-20s | %18s | %18s | %18s | %18s | %-100s\\n\", \"PHASE\", \"AVERAGE USED TIME\", \"ALL TASK NUM\", \"MAX USED TIME\", \"MAX TASK ID\", \"MAX TASK INFO\"));        List<PHASE> keys = new ArrayList<PHASE>(perfRecordMaps4print.keySet());        Collections.sort(keys, new Comparator<PHASE>() {            @Override            public int compare(PHASE o1, PHASE o2) {                return o1.toInt() - o2.toInt();            }        });        for (PHASE phase : keys) {            SumPerfRecord4Print sumPerfRecord = perfRecordMaps4print.get(phase);            if (sumPerfRecord == null) {                continue;            }            long averageTime = sumPerfRecord.getAverageTime();            long maxTime = sumPerfRecord.getMaxTime();            int maxTaskId = sumPerfRecord.maxTaskId;            int maxTaskGroupId = sumPerfRecord.getMaxTaskGroupId();            info.append(String.format(\"%-20s | %18s | %18s | %18s | %18s | %-100s\\n\",                    phase, unitTime(averageTime), sumPerfRecord.totalCount, unitTime(maxTime), jobId + \"-\" + maxTaskGroupId + \"-\" + maxTaskId, taskDetails.get(maxTaskId)));        }        //SumPerfRecord4Print countSumPerf = Optional.fromNullable(perfRecordMaps4print.get(PHASE.READ_TASK_DATA)).or(new SumPerfRecord4Print());        SumPerfRecord4Print countSumPerf = perfRecordMaps4print.get(PHASE.READ_TASK_DATA);        if (countSumPerf == null) {            countSumPerf = new SumPerfRecord4Print();        }        long averageRecords = countSumPerf.getAverageRecords();        long averageBytes = countSumPerf.getAverageBytes();        long maxRecord = countSumPerf.getMaxRecord();        long maxByte = countSumPerf.getMaxByte();        int maxTaskId4Records = countSumPerf.getMaxTaskId4Records();        int maxTGID4Records = countSumPerf.getMaxTGID4Records();        info.append(\"\\n\\n 2. record average count and max count task info :\\n\\n\");        info.append(String.format(\"%-20s | %18s | %18s | %18s | %18s | %18s | %-100s\\n\", \"PHASE\", \"AVERAGE RECORDS\", \"AVERAGE BYTES\", \"MAX RECORDS\", \"MAX RECORD`S BYTES\", \"MAX TASK ID\", \"MAX TASK INFO\"));        if (maxTaskId4Records > -1) {            info.append(String.format(\"%-20s | %18s | %18s | %18s | %18s | %18s | %-100s\\n\"                    , PHASE.READ_TASK_DATA, averageRecords, unitSize(averageBytes), maxRecord, unitSize(maxByte), jobId + \"-\" + maxTGID4Records + \"-\" + maxTaskId4Records, taskDetails.get(maxTaskId4Records)));        }        return info.toString();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "PerfTrace", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "unitTime", "params": ["long"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String unitTime(long time) {        return unitTime(time, TimeUnit.NANOSECONDS);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "PerfTrace", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "unitTime", "params": ["long", "TimeUnit"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String unitTime(long time, TimeUnit timeUnit) {        return String.format(\"%,.3fs\", ((float) timeUnit.toNanos(time)) / 1000000000);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "PerfTrace", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "unitSize", "params": ["long"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String unitSize(long size) {        if (size > 1000000000) {            return String.format(\"%,.2fG\", (float) size / 1000000000);        } else if (size > 1000000) {            return String.format(\"%,.2fM\", (float) size / 1000000);        } else if (size > 1000) {            return String.format(\"%,.2fK\", (float) size / 1000);        } else {            return size + \"B\";        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "PerfTrace", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPerfRecordMaps4print", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "ConcurrentHashMap<PHASE,SumPerfRecord4Print>", "snippet": "    public synchronized ConcurrentHashMap<PHASE, SumPerfRecord4Print> getPerfRecordMaps4print() {        if (totalEndReport.size() > 0) {            sumPerf4EndPrint(totalEndReport);        }        return perfRecordMaps4print;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "PerfTrace", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSumPerf4Report", "params": [], "throws": null, "modifiers": ["public"], "return_type": "SumPerf4Report", "snippet": "    public SumPerf4Report getSumPerf4Report() {        return sumPerf4Report;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "PerfTrace", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNeedReportPool4NotEnd", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Set<PerfRecord>", "snippet": "    public Set<PerfRecord> getNeedReportPool4NotEnd() {        return needReportPool4NotEnd;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "PerfTrace", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTotalEndReport", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<PerfRecord>", "snippet": "    public List<PerfRecord> getTotalEndReport() {        return totalEndReport;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "PerfTrace", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTaskDetails", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<Integer,String>", "snippet": "    public Map<Integer, String> getTaskDetails() {        return taskDetails;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "PerfTrace", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isEnable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isEnable() {        return enable;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "PerfTrace", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isJob", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isJob() {        return isJob;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "PerfTrace", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setJobInfo", "params": ["Configuration", "boolean", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setJobInfo(Configuration jobInfo, boolean perfReportEnable, int channelNumber) {        try {            this.jobInfo = jobInfo;            if (jobInfo != null && perfReportEnable) {                cluster = jobInfo.getString(\"cluster\");                String srcDomain = jobInfo.getString(\"srcDomain\", \"null\");                String dstDomain = jobInfo.getString(\"dstDomain\", \"null\");                jobDomain = srcDomain + \"|\" + dstDomain;                srcType = jobInfo.getString(\"srcType\");                dstType = jobInfo.getString(\"dstType\");                srcGuid = jobInfo.getString(\"srcGuid\");                dstGuid = jobInfo.getString(\"dstGuid\");                windowStart = getWindow(jobInfo.getString(\"windowStart\"), true);                windowEnd = getWindow(jobInfo.getString(\"windowEnd\"), false);                String jobIdStr = jobInfo.getString(\"jobId\");                jobId = StringUtils.isEmpty(jobIdStr) ? (long) -5 : Long.parseLong(jobIdStr);                String jobVersionStr = jobInfo.getString(\"jobVersion\");                jobVersion = StringUtils.isEmpty(jobVersionStr) ? (long) -4 : Long.parseLong(jobVersionStr);                jobStartTime = new Date();            }            this.perfReportEnable = perfReportEnable;            this.channelNumber = channelNumber;        } catch (Exception e) {            this.perfReportEnable = false;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "PerfTrace", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getWindow", "params": ["String", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "Date", "snippet": "    private Date getWindow(String windowStr, boolean startWindow) {        SimpleDateFormat sdf1 = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");        SimpleDateFormat sdf2 = new SimpleDateFormat(\"yyyy-MM-dd 00:00:00\");        if (StringUtils.isNotEmpty(windowStr)) {            try {                return sdf1.parse(windowStr);            } catch (ParseException e) {                // do nothing            }        }        if (startWindow) {            try {                return sdf2.parse(sdf2.format(new Date()));            } catch (ParseException e1) {                //do nothing            }        }        return null;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "PerfTrace", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getInstId() {        return instId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "PerfTrace", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getJobInfo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Configuration", "snippet": "    public Configuration getJobInfo() {        return jobInfo;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "PerfTrace", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setBatchSize", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setBatchSize(int batchSize) {        this.batchSize = batchSize;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "PerfTrace", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getReports", "params": ["String"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "JobStatisticsDto2", "snippet": "    public synchronized JobStatisticsDto2 getReports(String mode) {        try {            if (!enable || !perfReportEnable) {                return null;            }            if ((\"job\".equalsIgnoreCase(mode) && !isJob) || \"tg\".equalsIgnoreCase(mode) && isJob) {                return null;            }            //\u6bcf\u6b21\u5c06\u672a\u5b8c\u6210\u7684task\u7684\u7edf\u8ba1\u6e05\u7a7a            sumPerf4Report4NotEnd = new SumPerf4Report();            Set<PerfRecord> needReportPool4NotEndTmp = null;            synchronized (needReportPool4NotEnd) {                needReportPool4NotEndTmp = new HashSet<PerfRecord>(needReportPool4NotEnd);            }            long curNanoTime = System.nanoTime();            for (PerfRecord perfRecord : needReportPool4NotEndTmp) {                sumPerf4Report4NotEnd.add(curNanoTime, perfRecord);            }            JobStatisticsDto2 jdo = new JobStatisticsDto2();            jdo.setInstId(this.instId);            if (isJob) {                jdo.setTaskGroupId(-6);            } else {                jdo.setTaskGroupId(this.taskGroupId);            }            jdo.setJobId(this.jobId);            jdo.setJobVersion(this.jobVersion);            jdo.setWindowStart(this.windowStart);            jdo.setWindowEnd(this.windowEnd);            jdo.setJobStartTime(jobStartTime);            jdo.setJobRunTimeMs(System.currentTimeMillis() - jobStartTime.getTime());            jdo.setJobPriority(this.priority);            jdo.setChannelNum(this.channelNumber);            jdo.setCluster(this.cluster);            jdo.setJobDomain(this.jobDomain);            jdo.setSrcType(this.srcType);            jdo.setDstType(this.dstType);            jdo.setSrcGuid(this.srcGuid);            jdo.setDstGuid(this.dstGuid);            jdo.setHostAddress(HostUtils.IP);            //sum            jdo.setTaskTotalTimeMs(sumPerf4Report4NotEnd.totalTaskRunTimeInMs + sumPerf4Report.totalTaskRunTimeInMs);            jdo.setOdpsBlockCloseTimeMs(sumPerf4Report4NotEnd.odpsCloseTimeInMs + sumPerf4Report.odpsCloseTimeInMs);            jdo.setSqlQueryTimeMs(sumPerf4Report4NotEnd.sqlQueryTimeInMs + sumPerf4Report.sqlQueryTimeInMs);            jdo.setResultNextTimeMs(sumPerf4Report4NotEnd.resultNextTimeInMs + sumPerf4Report.resultNextTimeInMs);            return jdo;        } catch (Exception e) {            // do nothing        }        return null;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "PerfTrace", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sumPerf4EndPrint", "params": ["List<PerfRecord>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void sumPerf4EndPrint(List<PerfRecord> totalEndReport) {        if (!enable || totalEndReport == null) {            return;        }        for (PerfRecord perfRecord : totalEndReport) {            SumPerfRecord4Print oldPrefRecord4Print = perfRecordMaps4print.putIfAbsent(perfRecord.getPhase(), new SumPerfRecord4Print());            if(oldPrefRecord4Print != null){                oldPrefRecord4Print.add(perfRecord);            }else {                perfRecordMaps4print.get(perfRecord.getPhase()).add(perfRecord);            }        }        totalEndReport.clear();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "PerfTrace", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setChannelNumber", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setChannelNumber(int needChannelNumber) {        this.channelNumber = needChannelNumber;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "PerfTrace", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "add", "params": ["long", "PerfRecord"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void add(long curNanoTime, PerfRecord perfRecord) {            try {                long runTimeEndInMs;                if (perfRecord.getElapsedTimeInNs() == -1) {                    runTimeEndInMs = (curNanoTime - perfRecord.getStartTimeInNs()) / 1000000;                } else {                    runTimeEndInMs = perfRecord.getElapsedTimeInNs() / 1000000;                }                switch (perfRecord.getPhase()) {                    case TASK_TOTAL:                        totalTaskRunTimeInMs += runTimeEndInMs;                        break;                    case SQL_QUERY:                        sqlQueryTimeInMs += runTimeEndInMs;                        break;                    case RESULT_NEXT_ALL:                        resultNextTimeInMs += runTimeEndInMs;                        break;                    case ODPS_BLOCK_CLOSE:                        odpsCloseTimeInMs += runTimeEndInMs;                        break;                }            } catch (Exception e) {                //do nothing            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "SumPerf4Report", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getTotalTaskRunTimeInMs", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "        public long getTotalTaskRunTimeInMs() {            return totalTaskRunTimeInMs;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "SumPerf4Report", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getOdpsCloseTimeInMs", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "        public long getOdpsCloseTimeInMs() {            return odpsCloseTimeInMs;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "SumPerf4Report", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSqlQueryTimeInMs", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "        public long getSqlQueryTimeInMs() {            return sqlQueryTimeInMs;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "SumPerf4Report", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getResultNextTimeInMs", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "        public long getResultNextTimeInMs() {            return resultNextTimeInMs;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "SumPerf4Report", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "add", "params": ["PerfRecord"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void add(PerfRecord perfRecord) {            if (perfRecord == null) {                return;            }            perfTimeTotal += perfRecord.getElapsedTimeInNs();            if (perfRecord.getElapsedTimeInNs() >= maxTime) {                maxTime = perfRecord.getElapsedTimeInNs();                maxTaskId = perfRecord.getTaskId();                maxTaskGroupId = perfRecord.getTaskGroupId();            }            recordsTotal += perfRecord.getCount();            sizesTotal += perfRecord.getSize();            if (perfRecord.getCount() >= maxRecord) {                maxRecord = perfRecord.getCount();                maxByte = perfRecord.getSize();                maxTaskId4Records = perfRecord.getTaskId();                maxTGID4Records = perfRecord.getTaskGroupId();            }            totalCount++;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "SumPerfRecord4Print", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getPerfTimeTotal", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "        public long getPerfTimeTotal() {            return perfTimeTotal;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "SumPerfRecord4Print", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getAverageTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "        public long getAverageTime() {            if (totalCount > 0) {                averageTime = perfTimeTotal / totalCount;            }            return averageTime;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "SumPerfRecord4Print", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getMaxTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "        public long getMaxTime() {            return maxTime;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "SumPerfRecord4Print", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getMaxTaskId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getMaxTaskId() {            return maxTaskId;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "SumPerfRecord4Print", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getMaxTaskGroupId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getMaxTaskGroupId() {            return maxTaskGroupId;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "SumPerfRecord4Print", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getRecordsTotal", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "        public long getRecordsTotal() {            return recordsTotal;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "SumPerfRecord4Print", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSizesTotal", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "        public long getSizesTotal() {            return sizesTotal;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "SumPerfRecord4Print", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getAverageRecords", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "        public long getAverageRecords() {            if (totalCount > 0) {                averageRecords = recordsTotal / totalCount;            }            return averageRecords;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "SumPerfRecord4Print", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getAverageBytes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "        public long getAverageBytes() {            if (totalCount > 0) {                averageBytes = sizesTotal / totalCount;            }            return averageBytes;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "SumPerfRecord4Print", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getMaxRecord", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "        public long getMaxRecord() {            return maxRecord;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "SumPerfRecord4Print", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getMaxByte", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "        public long getMaxByte() {            return maxByte;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "SumPerfRecord4Print", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getMaxTaskId4Records", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getMaxTaskId4Records() {            return maxTaskId4Records;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "SumPerfRecord4Print", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getMaxTGID4Records", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getMaxTGID4Records() {            return maxTGID4Records;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "SumPerfRecord4Print", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getTotalCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getTotalCount() {            return totalCount;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "SumPerfRecord4Print", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "        public Long getId() {            return id;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getGmtCreate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "        public Date getGmtCreate() {            return gmtCreate;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getGmtModified", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "        public Date getGmtModified() {            return gmtModified;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getInstId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "        public Long getInstId() {            return instId;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getJobId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "        public Long getJobId() {            return jobId;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getJobVersion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "        public Long getJobVersion() {            return jobVersion;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getTaskGroupId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "        public Integer getTaskGroupId() {            return taskGroupId;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getWindowStart", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "        public Date getWindowStart() {            return windowStart;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getWindowEnd", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "        public Date getWindowEnd() {            return windowEnd;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getJobStartTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "        public Date getJobStartTime() {            return jobStartTime;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getJobEndTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "        public Date getJobEndTime() {            return jobEndTime;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getJobRunTimeMs", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "        public Long getJobRunTimeMs() {            return jobRunTimeMs;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getJobPriority", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "        public Integer getJobPriority() {            return jobPriority;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getChannelNum", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "        public Integer getChannelNum() {            return channelNum;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getCluster", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getCluster() {            return cluster;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getJobDomain", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getJobDomain() {            return jobDomain;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getSrcType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getSrcType() {            return srcType;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getDstType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getDstType() {            return dstType;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getSrcGuid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getSrcGuid() {            return srcGuid;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getDstGuid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getDstGuid() {            return dstGuid;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getRecords", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "        public Long getRecords() {            return records;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getBytes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "        public Long getBytes() {            return bytes;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getSpeedRecord", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "        public Long getSpeedRecord() {            return speedRecord;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getSpeedByte", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "        public Long getSpeedByte() {            return speedByte;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getStagePercent", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getStagePercent() {            return stagePercent;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getErrorRecord", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "        public Long getErrorRecord() {            return errorRecord;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getErrorBytes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "        public Long getErrorBytes() {            return errorBytes;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getWaitReadTimeMs", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "        public Long getWaitReadTimeMs() {            return waitReadTimeMs;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getWaitWriteTimeMs", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "        public Long getWaitWriteTimeMs() {            return waitWriteTimeMs;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getOdpsBlockCloseTimeMs", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "        public Long getOdpsBlockCloseTimeMs() {            return odpsBlockCloseTimeMs;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getSqlQueryTimeMs", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "        public Long getSqlQueryTimeMs() {            return sqlQueryTimeMs;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getResultNextTimeMs", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "        public Long getResultNextTimeMs() {            return resultNextTimeMs;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getTaskTotalTimeMs", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "        public Long getTaskTotalTimeMs() {            return taskTotalTimeMs;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getHostAddress", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getHostAddress() {            return hostAddress;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setId(Long id) {            this.id = id;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setGmtCreate", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setGmtCreate(Date gmtCreate) {            this.gmtCreate = gmtCreate;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setGmtModified", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setGmtModified(Date gmtModified) {            this.gmtModified = gmtModified;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setInstId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setInstId(Long instId) {            this.instId = instId;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setJobId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setJobId(Long jobId) {            this.jobId = jobId;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setJobVersion", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setJobVersion(Long jobVersion) {            this.jobVersion = jobVersion;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setTaskGroupId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setTaskGroupId(Integer taskGroupId) {            this.taskGroupId = taskGroupId;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setWindowStart", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setWindowStart(Date windowStart) {            this.windowStart = windowStart;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setWindowEnd", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setWindowEnd(Date windowEnd) {            this.windowEnd = windowEnd;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setJobStartTime", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setJobStartTime(Date jobStartTime) {            this.jobStartTime = jobStartTime;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setJobEndTime", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setJobEndTime(Date jobEndTime) {            this.jobEndTime = jobEndTime;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setJobRunTimeMs", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setJobRunTimeMs(Long jobRunTimeMs) {            this.jobRunTimeMs = jobRunTimeMs;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setJobPriority", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setJobPriority(Integer jobPriority) {            this.jobPriority = jobPriority;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setChannelNum", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setChannelNum(Integer channelNum) {            this.channelNum = channelNum;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setCluster", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setCluster(String cluster) {            this.cluster = cluster;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setJobDomain", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setJobDomain(String jobDomain) {            this.jobDomain = jobDomain;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setSrcType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setSrcType(String srcType) {            this.srcType = srcType;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setDstType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setDstType(String dstType) {            this.dstType = dstType;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setSrcGuid", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setSrcGuid(String srcGuid) {            this.srcGuid = srcGuid;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setDstGuid", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setDstGuid(String dstGuid) {            this.dstGuid = dstGuid;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setRecords", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setRecords(Long records) {            this.records = records;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setBytes", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setBytes(Long bytes) {            this.bytes = bytes;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setSpeedRecord", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setSpeedRecord(Long speedRecord) {            this.speedRecord = speedRecord;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setSpeedByte", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setSpeedByte(Long speedByte) {            this.speedByte = speedByte;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setStagePercent", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setStagePercent(String stagePercent) {            this.stagePercent = stagePercent;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setErrorRecord", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setErrorRecord(Long errorRecord) {            this.errorRecord = errorRecord;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setErrorBytes", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setErrorBytes(Long errorBytes) {            this.errorBytes = errorBytes;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setWaitReadTimeMs", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setWaitReadTimeMs(Long waitReadTimeMs) {            this.waitReadTimeMs = waitReadTimeMs;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setWaitWriteTimeMs", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setWaitWriteTimeMs(Long waitWriteTimeMs) {            this.waitWriteTimeMs = waitWriteTimeMs;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setOdpsBlockCloseTimeMs", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setOdpsBlockCloseTimeMs(Long odpsBlockCloseTimeMs) {            this.odpsBlockCloseTimeMs = odpsBlockCloseTimeMs;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setSqlQueryTimeMs", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setSqlQueryTimeMs(Long sqlQueryTimeMs) {            this.sqlQueryTimeMs = sqlQueryTimeMs;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setResultNextTimeMs", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setResultNextTimeMs(Long resultNextTimeMs) {            this.resultNextTimeMs = resultNextTimeMs;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setTaskTotalTimeMs", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setTaskTotalTimeMs(Long taskTotalTimeMs) {            this.taskTotalTimeMs = taskTotalTimeMs;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setHostAddress", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setHostAddress(String hostAddress) {            this.hostAddress = hostAddress;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/statistics/PerfTrace.java", "stars": "23", "class": {"name": "JobStatisticsDto2", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testSoftDeletedEntityShouldNotBeRetrieved", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testSoftDeletedEntityShouldNotBeRetrieved() {        gardenFieldRepository.deleteAll();        User user = new User();        user.setLogin(\"testlogin\");        user.setPassword(RandomStringUtils.random(60));        user.setActivated(true);        user.setEmail(RandomStringUtils.randomAlphabetic(5) + \"@test.com\");        user.setFirstName(\"test\");        user.setLastName(\"test\");        user.setBankAccountIBAN(DEFAULT_IBAN);        user = userRepository.saveAndFlush(user);        GardenField gardenField = new GardenField();        gardenField.setName(\"test field\");        gardenField.setCity(\"test city\");        gardenField.setLongitude(1.0);        gardenField.setLatitude(1.0);        gardenField.setOwner(user);        gardenField.setPricePerM2(1.0);        gardenField.setSizeInM2(10.0);        gardenFieldRepository.saveAndFlush(gardenField);        assertThat(gardenFieldRepository.findAll()).containsExactly(gardenField);        gardenField.setDeleted(Instant.now());        gardenFieldRepository.saveAndFlush(gardenField);        assertThat(gardenFieldRepository.findAll()).isEmpty();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/repository/GardenFieldRepositoryTest.java", "stars": "2", "class": {"name": "GardenFieldRepositoryTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "forConfig", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "ProtocInvoker", "snippet": "    public static ProtocInvoker forConfig(String protoDiscoveryRoot) {        Path discoveryRootPath = Paths.get(protoDiscoveryRoot);        ImmutableList.Builder<Path> includePaths = ImmutableList.builder();        return new ProtocInvoker(discoveryRootPath, includePaths.build());    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/protobuf/ProtocInvoker.java", "stars": "3", "class": {"name": "ProtocInvoker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "invoke", "params": [], "throws": ["ProtocInvocationException"], "modifiers": ["public"], "return_type": "FileDescriptorSet", "snippet": "    public FileDescriptorSet invoke() throws ProtocInvocationException {        Path wellKnownTypesInclude;        try {            wellKnownTypesInclude = setupWellKnownTypes();        } catch (IOException e) {            throw new ProtocInvocationException(\"Unable to extract well known types\", e);        }        Path descriptorPath;        try {            descriptorPath = Files.createTempFile(\"descriptor\", \".pb.bin\");        } catch (IOException e) {            throw new ProtocInvocationException(\"Unable to create temporary file\", e);        }        ImmutableList<String> protocArgs = ImmutableList.<String>builder()                .addAll(scanProtoFiles(discoveryRoot))                .addAll(includePathArgs(wellKnownTypesInclude))                .add(\"--descriptor_set_out=\" + descriptorPath.toAbsolutePath().toString())                .add(\"--include_imports\")                .build();        invokeBinary(protocArgs);        try {            return FileDescriptorSet.parseFrom(Files.readAllBytes(descriptorPath));        } catch (IOException e) {            throw new ProtocInvocationException(\"Unable to parse the generated descriptors\", e);        }    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/protobuf/ProtocInvoker.java", "stars": "3", "class": {"name": "ProtocInvoker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "includePathArgs", "params": ["Path"], "throws": null, "modifiers": ["private"], "return_type": "ImmutableList<String>", "snippet": "    private ImmutableList<String> includePathArgs(Path wellKnownTypesInclude) {        ImmutableList.Builder<String> resultBuilder = ImmutableList.builder();        for (Path path : protocIncludePaths) {            resultBuilder.add(\"-I\" + path.toString());        }        // Add the include path which makes sure that protoc finds the well known types. Note that we        // add this *after* the user types above in case users want to provide their own well known        // types.        resultBuilder.add(\"-I\" + wellKnownTypesInclude.toString());        // Protoc requires that all files being compiled are present in the subtree rooted at one of        // the import paths (or the proto_root argument, which we don't use). Therefore, the safest        // thing to do is to add the discovery path itself as the *last* include.        resultBuilder.add(\"-I\" + discoveryRoot.toAbsolutePath().toString());        return resultBuilder.build();    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/protobuf/ProtocInvoker.java", "stars": "3", "class": {"name": "ProtocInvoker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "invokeBinary", "params": ["ImmutableList<String>"], "throws": ["ProtocInvocationException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void invokeBinary(ImmutableList<String> protocArgs) throws ProtocInvocationException {        int status;        String[] protocLogLines;        // The \"protoc\" library unconditionally writes to stdout. So, we replace stdout right before        // calling into the library in order to gather its output.        PrintStream stdoutBackup = System.out;        try {            ByteArrayOutputStream protocStdout = new ByteArrayOutputStream();            System.setOut(new PrintStream(protocStdout));            status = Protoc.runProtoc(protocArgs.toArray(new String[0]));            protocLogLines = protocStdout.toString().split(\"\\n\");        } catch (IOException | InterruptedException e) {            throw new ProtocInvocationException(\"Unable to execute protoc binary\", e);        } finally {            // Restore stdout.            System.setOut(stdoutBackup);        }        if (status != 0) {            // If protoc failed, we dump its output as a warning.            logger.warn(\"Protoc invocation failed with status: \" + status);            for (String line : protocLogLines) {                logger.warn(\"[Protoc log] \" + line);            }            throw new ProtocInvocationException(                    String.format(\"Got exit code [%d] from protoc with args [%s]\", status, protocArgs));        }    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/protobuf/ProtocInvoker.java", "stars": "3", "class": {"name": "ProtocInvoker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "scanProtoFiles", "params": ["Path"], "throws": ["ProtocInvocationException"], "modifiers": ["private"], "return_type": "ImmutableSet<String>", "snippet": "    private ImmutableSet<String> scanProtoFiles(Path protoRoot) throws ProtocInvocationException {        try (final Stream<Path> protoPaths = Files.walk(protoRoot)) {            return ImmutableSet.copyOf(protoPaths                    .filter(path -> PROTO_MATCHER.matches(path))                    .map(path -> path.toAbsolutePath().toString())                    .collect(Collectors.toSet()));        } catch (IOException e) {            throw new ProtocInvocationException(\"Unable to scan proto tree for files\", e);        }    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/protobuf/ProtocInvoker.java", "stars": "3", "class": {"name": "ProtocInvoker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setupWellKnownTypes", "params": [], "throws": ["IOException"], "modifiers": ["private", "static"], "return_type": "Path", "snippet": "    private static Path setupWellKnownTypes() throws IOException {        Path tmpdir = Files.createTempDirectory(\"polyglot-well-known-types\");        Path protoDir = Files.createDirectories(Paths.get(tmpdir.toString(), \"google\", \"protobuf\"));        for (String file : WellKnownTypes.fileNames()) {            Files.copy(                    ProtocInvoker.class.getResourceAsStream(\"/google/protobuf/\" + file),                    Paths.get(protoDir.toString(), file));        }        return tmpdir;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/protobuf/ProtocInvoker.java", "stars": "3", "class": {"name": "ProtocInvoker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSessionId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getSessionId() {        return sessionId;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/websocket/dto/ActivityDTO.java", "stars": "2", "class": {"name": "ActivityDTO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSessionId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSessionId(String sessionId) {        this.sessionId = sessionId;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/websocket/dto/ActivityDTO.java", "stars": "2", "class": {"name": "ActivityDTO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUserLogin", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getUserLogin() {        return userLogin;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/websocket/dto/ActivityDTO.java", "stars": "2", "class": {"name": "ActivityDTO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUserLogin", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUserLogin(String userLogin) {        this.userLogin = userLogin;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/websocket/dto/ActivityDTO.java", "stars": "2", "class": {"name": "ActivityDTO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getIpAddress", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getIpAddress() {        return ipAddress;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/websocket/dto/ActivityDTO.java", "stars": "2", "class": {"name": "ActivityDTO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setIpAddress", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIpAddress(String ipAddress) {        this.ipAddress = ipAddress;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/websocket/dto/ActivityDTO.java", "stars": "2", "class": {"name": "ActivityDTO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPage() {        return page;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/websocket/dto/ActivityDTO.java", "stars": "2", "class": {"name": "ActivityDTO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPage", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPage(String page) {        this.page = page;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/websocket/dto/ActivityDTO.java", "stars": "2", "class": {"name": "ActivityDTO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Instant", "snippet": "    public Instant getTime() {        return time;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/websocket/dto/ActivityDTO.java", "stars": "2", "class": {"name": "ActivityDTO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTime", "params": ["Instant"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTime(Instant time) {        this.time = time;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/websocket/dto/ActivityDTO.java", "stars": "2", "class": {"name": "ActivityDTO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"ActivityDTO{\" +            \"sessionId='\" + sessionId + '\\'' +            \", userLogin='\" + userLogin + '\\'' +            \", ipAddress='\" + ipAddress + '\\'' +            \", page='\" + page + '\\'' +            \", time='\" + time + '\\'' +            '}';    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/websocket/dto/ActivityDTO.java", "stars": "2", "class": {"name": "ActivityDTO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "luceneIndexServiceBean", "params": ["EntityManagerFactory"], "throws": null, "modifiers": ["public"], "return_type": "LuceneIndexServiceBean", "snippet": "    public LuceneIndexServiceBean luceneIndexServiceBean(EntityManagerFactory entityManagerFactory) {        LuceneIndexServiceBean luceneIndexServiceBean = new LuceneIndexServiceBean(entityManagerFactory);        luceneIndexServiceBean.triggerIndexing();        return luceneIndexServiceBean;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/config/LuceneConfig.java", "stars": "2", "class": {"name": "LuceneConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": [], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "\tpublic T get() {\t\tT obj;\t\tif((obj = queue.poll()) == null) {\t\t\treturn supplier.get();\t\t} else {\t\t\tresetter.accept(obj);\t\t\treturn obj;\t\t}\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/util/SimplePool.java", "stars": "3", "class": {"name": "SimplePool", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readd", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void readd(T t) {\t\tqueue.add(t);\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/util/SimplePool.java", "stars": "3", "class": {"name": "SimplePool", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCommand", "params": ["CommandSender", "Command", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {        if (args.length != 2) {            sender.sendMessage(ChatColor.RED + \"Please specify a player & a prefix!\");            return true;        }        String playerName = args[0];        String prefix = args[1];        // Get an OfflinePlayer object for the player        OfflinePlayer player = this.plugin.getServer().getOfflinePlayer(playerName);        // Player not known?        if (player == null) {            sender.sendMessage(ChatColor.RED + playerName +  \" has never joined the server!\");            return true;        }        // Load, modify & save the user in LuckPerms.        this.luckPerms.getUserManager().modifyUser(player.getUniqueId(), (User user) -> {            // Remove all other prefixes the user had before.            user.data().clear(NodeType.PREFIX::matches);            // Find the highest priority of their other prefixes            // We need to do this because they might inherit a prefix from a parent group,            // and we want the prefix we set to override that!            Map<Integer, String> inheritedPrefixes = user.getCachedData().getMetaData(QueryOptions.nonContextual()).getPrefixes();            int priority = inheritedPrefixes.keySet().stream().mapToInt(i -> i + 10).max().orElse(10);            // Create a node to add to the player.            Node node = PrefixNode.builder(prefix, priority).build();            // Add the node to the user.            user.data().add(node);            // Tell the sender.            sender.sendMessage(ChatColor.RED + user.getUsername() + \" now has the prefix \" + ChatColor.RESET + prefix);        });        return true;    }", "url": "https://raw.githubusercontent.com/LuckPerms/api-cookbook/master/src/main/java/me/lucko/lpcookbook/commands/SetPrefixCommand.java", "stars": "1", "class": {"name": "SetPrefixCommand", "extends": null, "implements": ["CommandExecutor"], "modifiers": ["public"]}}, {"method_name": "getCurrentAuditor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Optional<String>", "snippet": "    public Optional<String> getCurrentAuditor() {        return Optional.of(SecurityUtils.getCurrentUserLogin().orElse(Constants.SYSTEM_ACCOUNT));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/security/SpringSecurityAuditorAware.java", "stars": "2", "class": {"name": "SpringSecurityAuditorAware", "extends": null, "implements": ["AuditorAware"], "modifiers": ["public"]}}, {"method_name": "close", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void close() {        super.close();        try {            this.queue.put(TerminateRecord.get());        } catch (InterruptedException e) {            Thread.currentThread().interrupt();        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/memory/MemoryRecordChannel.java", "stars": "23", "class": {"name": "MemoryRecordChannel", "extends": "RecordChannel", "implements": null, "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clear() {        this.queue.clear();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/memory/MemoryRecordChannel.java", "stars": "23", "class": {"name": "MemoryRecordChannel", "extends": "RecordChannel", "implements": null, "modifiers": ["public"]}}, {"method_name": "doPush", "params": ["Record"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void doPush(Record r) {        try {            long startTime = System.nanoTime();            this.queue.put(r);            waitWriterTime.addAndGet(System.nanoTime() - startTime);            memoryBytes.addAndGet(r.getMemorySize());        } catch (InterruptedException ex) {            Thread.currentThread().interrupt();        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/memory/MemoryRecordChannel.java", "stars": "23", "class": {"name": "MemoryRecordChannel", "extends": "RecordChannel", "implements": null, "modifiers": ["public"]}}, {"method_name": "doPushAll", "params": ["Collection<Record>"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void doPushAll(Collection<Record> rs) {        try {            long startTime = System.nanoTime();            lock.lockInterruptibly();            int bytes = getRecordBytes(rs);            while (memoryBytes.get() + bytes > this.byteCapacity || rs.size() > this.queue.remainingCapacity()) {                notInsufficient.await(200L, TimeUnit.MILLISECONDS);            }            this.queue.addAll(rs);            waitWriterTime.addAndGet(System.nanoTime() - startTime);            memoryBytes.addAndGet(bytes);            notEmpty.signalAll();        } catch (InterruptedException e) {            Thread.currentThread().interrupt();            throw DataXException.asDataXException(                    FrameworkErrorCode.RUNTIME_ERROR, e);        } finally {            lock.unlock();        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/memory/MemoryRecordChannel.java", "stars": "23", "class": {"name": "MemoryRecordChannel", "extends": "RecordChannel", "implements": null, "modifiers": ["public"]}}, {"method_name": "doPull", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Record", "snippet": "    protected Record doPull() {        try {            long startTime = System.nanoTime();            Record r = this.queue.take();            waitReaderTime.addAndGet(System.nanoTime() - startTime);            memoryBytes.addAndGet(-r.getMemorySize());            return r;        } catch (InterruptedException e) {            Thread.currentThread().interrupt();            throw new IllegalStateException(e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/memory/MemoryRecordChannel.java", "stars": "23", "class": {"name": "MemoryRecordChannel", "extends": "RecordChannel", "implements": null, "modifiers": ["public"]}}, {"method_name": "doPullAll", "params": ["Collection<Record>"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void doPullAll(Collection<Record> rs) {        assert rs != null;        rs.clear();        try {            long startTime = System.nanoTime();            lock.lockInterruptibly();            while (this.queue.drainTo(rs, bufferSize) <= 0) {                notEmpty.await(200L, TimeUnit.MILLISECONDS);            }            waitReaderTime.addAndGet(System.nanoTime() - startTime);            int bytes = getRecordBytes(rs);            memoryBytes.addAndGet(-bytes);            notInsufficient.signalAll();        } catch (InterruptedException e) {            Thread.currentThread().interrupt();            throw DataXException.asDataXException(                    FrameworkErrorCode.RUNTIME_ERROR, e);        } finally {            lock.unlock();        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/memory/MemoryRecordChannel.java", "stars": "23", "class": {"name": "MemoryRecordChannel", "extends": "RecordChannel", "implements": null, "modifiers": ["public"]}}, {"method_name": "getRecordBytes", "params": ["Collection<Record>"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int getRecordBytes(Collection<Record> rs) {        int bytes = 0;        for (Record r : rs) {            bytes += r.getMemorySize();        }        return bytes;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/memory/MemoryRecordChannel.java", "stars": "23", "class": {"name": "MemoryRecordChannel", "extends": "RecordChannel", "implements": null, "modifiers": ["public"]}}, {"method_name": "size", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int size() {        return this.queue.size();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/memory/MemoryRecordChannel.java", "stars": "23", "class": {"name": "MemoryRecordChannel", "extends": "RecordChannel", "implements": null, "modifiers": ["public"]}}, {"method_name": "isEmpty", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isEmpty() {        return this.queue.isEmpty();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/memory/MemoryRecordChannel.java", "stars": "23", "class": {"name": "MemoryRecordChannel", "extends": "RecordChannel", "implements": null, "modifiers": ["public"]}}, {"method_name": "call", "params": [], "throws": ["DataXException"], "modifiers": ["public"], "return_type": "Boolean", "snippet": "    public Boolean call() throws DataXException {        String jdbcUrl = this.connection.getString(Key.JDBC_URL);        List<Object> querySqls = this.connection.getList(Key.QUERY_SQL, Object.class);        List<Object> splitPkSqls = this.connection.getList(Key.SPLIT_PK_SQL, Object.class);        List<Object> tables = this.connection.getList(Key.TABLE, Object.class);        Connection conn = DBUtil.getConnectionWithoutRetry(this.dataBaseType, jdbcUrl,                this.userName, password, proxyHost, proxyPort);        int fetchSize = 1;        if (DataBaseType.MySql.equals(dataBaseType) || DataBaseType.DRDS.equals(dataBaseType)) {            fetchSize = Integer.MIN_VALUE;        }        try {            for (int i = 0; i < querySqls.size(); i++) {                String splitPkSql = null;                String querySql = querySqls.get(i).toString();                String table = null;                if (tables != null && !tables.isEmpty()) {                    table = tables.get(i).toString();                }            /*verify query*/                ResultSet rs = null;                try {                    DBUtil.sqlValid(querySql, dataBaseType);                    if (i == 0) {                        rs = DBUtil.query(conn, querySql, fetchSize);                    }                } catch (ParserException e) {                    throw RdbmsException.asSqlParserException(this.dataBaseType, e, querySql);                } catch (Exception e) {                    throw RdbmsException.asQueryException(this.dataBaseType, e, querySql, table, userName);                } finally {                    DBUtil.closeDBResources(rs, null, null);                }            /*verify splitPK*/                try {                    if (splitPkSqls != null && !splitPkSqls.isEmpty()) {                        splitPkSql = splitPkSqls.get(i).toString();                        DBUtil.sqlValid(splitPkSql, dataBaseType);                        if (i == 0) {                            SingleTableSplitUtil.precheckSplitPk(conn, splitPkSql, fetchSize, table, userName);                        }                    }                } catch (ParserException e) {                    throw RdbmsException.asSqlParserException(this.dataBaseType, e, splitPkSql);                } catch (DataXException e) {                    throw e;                } catch (Exception e) {                    throw RdbmsException.asSplitPKException(this.dataBaseType, e, splitPkSql, this.splitPkId.trim());                }            }        } finally {            DBUtil.closeDBResources(null, conn);        }        return true;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/reader/util/PreCheckTask.java", "stars": "23", "class": {"name": "PreCheckTask", "extends": null, "implements": ["Callable"], "modifiers": ["public"]}}, {"method_name": "setApplicationContext", "params": ["ApplicationContext"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setApplicationContext(ApplicationContext applicationContext){        if(SpringUtil.applicationContext == null){            SpringUtil.applicationContext  = applicationContext;        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/util/SpringUtil.java", "stars": "7", "class": {"name": "SpringUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getApplicationContext", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "ApplicationContext", "snippet": "    public static ApplicationContext getApplicationContext() {        return applicationContext;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/util/SpringUtil.java", "stars": "7", "class": {"name": "SpringUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBean", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Object", "snippet": "    public static Object getBean(String name){        return getApplicationContext().getBean(name);    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/util/SpringUtil.java", "stars": "7", "class": {"name": "SpringUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBean", "params": ["Class<T>"], "throws": null, "modifiers": ["public", "static"], "return_type": "T", "snippet": "    public static <T> T getBean(Class<T> clazz){        return getApplicationContext().getBean(clazz);    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/util/SpringUtil.java", "stars": "7", "class": {"name": "SpringUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBean", "params": ["String", "Class<T>"], "throws": null, "modifiers": ["public", "static"], "return_type": "T", "snippet": "    public static <T> T getBean(String name,Class<T> clazz){        return getApplicationContext().getBean(name, clazz);    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/util/SpringUtil.java", "stars": "7", "class": {"name": "SpringUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseMaxXms", "params": ["Props"], "throws": null, "modifiers": ["public", "static"], "return_type": "MemConfValue", "snippet": "  public static MemConfValue parseMaxXms(final Props props) {    return parse(props,        Constants.JobProperties.JOB_MAX_XMS, Constants.JobProperties.MAX_XMS_DEFAULT);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/MemConfValue.java", "stars": "18", "class": {"name": "MemConfValue", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseMaxXmx", "params": ["Props"], "throws": null, "modifiers": ["public", "static"], "return_type": "MemConfValue", "snippet": "  public static MemConfValue parseMaxXmx(final Props props) {    return parse(props,        Constants.JobProperties.JOB_MAX_XMX, Constants.JobProperties.MAX_XMX_DEFAULT);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/MemConfValue.java", "stars": "18", "class": {"name": "MemConfValue", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parse", "params": ["Props", "String", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "MemConfValue", "snippet": "  private static MemConfValue parse(final Props props, final String key,      final String defaultValue) {    final String stringValue = props.getString(key, defaultValue);    Preconditions.checkArgument(!StringUtils.isBlank(stringValue),        String.format(\"%s must not have an empty value. \"            + \"Remove the property to use default or specify a valid value.\", key));    final long size = Utils.parseMemString(stringValue);    return new MemConfValue(stringValue, size);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/MemConfValue.java", "stars": "18", "class": {"name": "MemConfValue", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getString() {    return this.string;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/MemConfValue.java", "stars": "18", "class": {"name": "MemConfValue", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getSize() {    return this.size;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/MemConfValue.java", "stars": "18", "class": {"name": "MemConfValue", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getResultSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getResultSize(){        return Optional.ofNullable(list).orElse(Collections.emptyList()).size();    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/main/java/com/harry/renthouse/service/ServiceMultiResult.java", "stars": "3", "class": {"name": "ServiceMultiResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "exec", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String exec(HttpServletRequest req, HttpServletResponse resp) {\t\tString view = \"/clsProj/main.cls\";\t\treq.setAttribute(\"isRedirect\", true);\t\t\t\t// \ud30c\ub77c\ubbf8\ud130 \uac00\uc838\uc624\uace0\t\tString sid = req.getParameter(\"id\");\t\tString spw = req.getParameter(\"pw\");\t\tMemberDAO mDAO = new MemberDAO();\t\tint cnt = mDAO.getLoginCnt(sid, spw);\t\t\t\tif(cnt == 1) {\t\t\tHttpSession session = req.getSession();\t\t\tsession.setAttribute(\"SID\", sid);\t\t} else {\t\t\tview = \"/clsProj/member/login.cls\";\t\t}\t\t\t\treturn view;\t}", "url": "https://raw.githubusercontent.com/increpas-cls2/clsProj/branch/clsProj/src/com/increpas/www/controller/member/LoginProc.java", "stars": "2", "class": {"name": "LoginProc", "extends": null, "implements": ["ClsController"], "modifiers": ["public"]}}, {"method_name": "onPacket", "params": ["PacketEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPacket(PacketEvent event) {        if (outgoing) {            if (event.getType().equals(PacketEvent.Type.OUTGOING) && event.getPacket() instanceof CPacketChatMessage) {                CPacketChatMessage packet = (CPacketChatMessage) event.getPacket();                if (packet.getMessage().startsWith(\"/\") || packet.getMessage().startsWith(Commands.prefix))                    return;                    try {                        Language sourceLang = Language.valueOf(mainLang.equalsIgnoreCase(\"HillMari\") ? \"HillMari\" : org.apache.commons.lang3.StringUtils.capitalize(mainLang));                        Language lang = Language.valueOf(mainLang.equalsIgnoreCase(\"HillMari\") ? \"HillMari\" : org.apache.commons.lang3.StringUtils.capitalize(outgoingMode));                        packet.message = Mercury.INSTANCE.getTranslationManager().translate(packet.getMessage(), sourceLang, lang);                    } catch (IOException e) {                        e.printStackTrace();                    }            }        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/misc/Translator.java", "stars": "12", "class": {"name": "Translator", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "invalidate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void invalidate ()\t{\t\tn_invalidate ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64ee486da937c010f4/ImageRenderer.java", "stars": "2", "class": {"name": "ImageRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_invalidate", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_invalidate ();\tpublic boolean onTouchEvent (android.view.MotionEvent p0)\t{\t\treturn n_onTouchEvent (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64ee486da937c010f4/ImageRenderer.java", "stars": "2", "class": {"name": "ImageRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onTouchEvent", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onTouchEvent (android.view.MotionEvent p0)\t{\t\treturn n_onTouchEvent (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64ee486da937c010f4/ImageRenderer.java", "stars": "2", "class": {"name": "ImageRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onTouchEvent", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onTouchEvent (android.view.MotionEvent p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64ee486da937c010f4/ImageRenderer.java", "stars": "2", "class": {"name": "ImageRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64ee486da937c010f4/ImageRenderer.java", "stars": "2", "class": {"name": "ImageRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64ee486da937c010f4/ImageRenderer.java", "stars": "2", "class": {"name": "ImageRenderer", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getId() {    return delegate.getId();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/LoggingCache.java", "stars": "15", "class": {"name": "LoggingCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "getSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getSize() {    return delegate.getSize();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/LoggingCache.java", "stars": "15", "class": {"name": "LoggingCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "putObject", "params": ["Object", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void putObject(Object key, Object object) {    delegate.putObject(key, object);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/LoggingCache.java", "stars": "15", "class": {"name": "LoggingCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "getObject", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getObject(Object key) {    requests++;    final Object value = delegate.getObject(key);    if (value != null) {      hits++;    }    if (log.isDebugEnabled()) {      log.debug(\"Cache Hit Ratio [\" + getId() + \"]: \" + getHitRatio());    }    return value;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/LoggingCache.java", "stars": "15", "class": {"name": "LoggingCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "removeObject", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object removeObject(Object key) {    return delegate.removeObject(key);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/LoggingCache.java", "stars": "15", "class": {"name": "LoggingCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void clear() {    delegate.clear();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/LoggingCache.java", "stars": "15", "class": {"name": "LoggingCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int hashCode() {    return delegate.hashCode();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/LoggingCache.java", "stars": "15", "class": {"name": "LoggingCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean equals(Object obj) {    return delegate.equals(obj);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/LoggingCache.java", "stars": "15", "class": {"name": "LoggingCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "getHitRatio", "params": [], "throws": null, "modifiers": ["private"], "return_type": "double", "snippet": "  private double getHitRatio() {    return (double) hits / (double) requests;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/LoggingCache.java", "stars": "15", "class": {"name": "LoggingCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "getEngine", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Engine", "snippet": "    public static Engine getEngine()    {        return engine;    }", "url": "https://raw.githubusercontent.com/qintianchen/GAutomatorView/master/src/sample/utils/Engine.java", "stars": "2", "class": {"name": "Engine", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findElement", "params": ["String"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "Element", "snippet": "    public Element findElement(String path) throws Exception {        ArrayList<String> paths = new ArrayList<>();        paths.add(path);        JSONArray rets = (JSONArray) socketClient.sendCommand(Commands.FIND_ELEMENTS, paths);        JSONObject ret = rets.getJSONObject(0);        HashMap<String, Object> map = JSONObject.parseObject(ret.toJSONString(), HashMap.class);        if ((int) map.get(\"instance\") == -1) return null;        return new Element((String) ret.get(\"name\"), (int) ret.get(\"instance\"));//        return null;    }", "url": "https://raw.githubusercontent.com/qintianchen/GAutomatorView/master/src/sample/utils/Engine.java", "stars": "2", "class": {"name": "Engine", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getElementBound", "params": ["Element"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "ElementBound", "snippet": "    public ElementBound getElementBound(Element e) throws Exception {        ArrayList<Integer> params = new ArrayList<Integer>();        params.add(e.instance);        JSONArray ret = (JSONArray) socketClient.sendCommand(Commands.GET_ELEMENTS_BOUND, params);        JSONObject obj = ret.getJSONObject(0);        HashMap<String, Object> map = JSONObject.parseObject(obj.toJSONString(), HashMap.class);        boolean existed = (boolean) map.get(\"existed\");        if (!existed) return null;        ElementBound eb =  new ElementBound(                Float.parseFloat(map.get(\"x\").toString()),                Float.parseFloat(map.get(\"y\").toString()),                Float.parseFloat(map.get(\"width\").toString()),                Float.parseFloat(map.get(\"height\").toString()),                (boolean) map.get(\"visible\"));        e.eb = eb;        return eb;    }", "url": "https://raw.githubusercontent.com/qintianchen/GAutomatorView/master/src/sample/utils/Engine.java", "stars": "2", "class": {"name": "Engine", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getScene", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "String", "snippet": "    public String getScene() throws Exception {        String ret = (String) socketClient.sendCommand(Commands.GET_CURRENT_SCENE, \"\");        return ret;    }", "url": "https://raw.githubusercontent.com/qintianchen/GAutomatorView/master/src/sample/utils/Engine.java", "stars": "2", "class": {"name": "Engine", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getClickableNodes", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "String", "snippet": "    public String getClickableNodes() throws Exception {        String ret = (String) socketClient.sendCommand(Commands.GET_UI_INTERACT_STATUS, \"\");        return ret;    }", "url": "https://raw.githubusercontent.com/qintianchen/GAutomatorView/master/src/sample/utils/Engine.java", "stars": "2", "class": {"name": "Engine", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDumpTree", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDumpTree() throws Exception {        JSONObject obj = (JSONObject) socketClient.sendCommand(Commands.DUMP_TREE, \"\");        String ret = obj.toJSONString();        HashMap<String, Object> map = JSONObject.parseObject(ret, HashMap.class);        String xmlStr = (String) map.get(\"xml\");        return xmlStr;    }", "url": "https://raw.githubusercontent.com/qintianchen/GAutomatorView/master/src/sample/utils/Engine.java", "stars": "2", "class": {"name": "Engine", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTouchableElements", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "ArrayList<Element>", "snippet": "    public ArrayList<Element> getTouchableElements() throws Exception {        Object ret = socketClient.sendCommand(Commands.GET_UI_INTERACT_STATUS, null);        ArrayList<Element> elements = new ArrayList<>();        if (ret == null) return elements;        String jsonStr = ((JSONObject) ret).toJSONString();        HashMap<String, Object> map = JSONObject.parseObject(jsonStr, HashMap.class);        JSONArray array = (JSONArray) map.get(\"elements\");        for (int i = 0; i < array.size(); i++) {            JSONObject obj = array.getJSONObject(i);            HashMap<String, Object> node = JSONObject.parseObject(obj.toJSONString(), HashMap.class);            Element e = new Element((String) node.get(\"name\"), (int) node.get(\"instanceid\"));            elements.add(e);        }        return elements;    }", "url": "https://raw.githubusercontent.com/qintianchen/GAutomatorView/master/src/sample/utils/Engine.java", "stars": "2", "class": {"name": "Engine", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tSpringApplication.run(SampleKafkaApplication.class, args);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-kafka/src/main/java/smoketest/kafka/SampleKafkaApplication.java", "stars": "47572", "class": {"name": "SampleKafkaApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "kafkaTestTopic", "params": [], "throws": null, "modifiers": ["public"], "return_type": "NewTopic", "snippet": "\tpublic NewTopic kafkaTestTopic() {\t\treturn new NewTopic(\"testTopic\", 10, (short) 2);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-kafka/src/main/java/smoketest/kafka/SampleKafkaApplication.java", "stars": "47572", "class": {"name": "SampleKafkaApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "runner", "params": ["Producer"], "throws": null, "modifiers": ["public"], "return_type": "ApplicationRunner", "snippet": "\tpublic ApplicationRunner runner(Producer producer) {\t\treturn (args) -> producer.send(new SampleMessage(1, \"A simple test message\"));\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-kafka/src/main/java/smoketest/kafka/SampleKafkaApplication.java", "stars": "47572", "class": {"name": "SampleKafkaApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args)\t{\t\tint a = 1;\t\tint b = 2;\t\tint c = 3;\t\tSystem.out.println(a<b&&b>c);\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/ray/Luoji.java", "stars": "2", "class": {"name": "Luoji", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getId() {        return id;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/domain/Locker.java", "stars": "23", "class": {"name": "Locker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Integer id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/domain/Locker.java", "stars": "23", "class": {"name": "Locker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHost", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getHost() {        return host;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/domain/Locker.java", "stars": "23", "class": {"name": "Locker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setHost", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setHost(String host) {        this.host = host;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/domain/Locker.java", "stars": "23", "class": {"name": "Locker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getModifyTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date getModifyTime() {        return modifyTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/domain/Locker.java", "stars": "23", "class": {"name": "Locker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setModifyTime", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setModifyTime(Date modifyTime) {        this.modifyTime = modifyTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/domain/Locker.java", "stars": "23", "class": {"name": "Locker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSubGroup", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getSubGroup() {        return subGroup;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/domain/Locker.java", "stars": "23", "class": {"name": "Locker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSubGroup", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSubGroup(String subGroup) {        this.subGroup = subGroup;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/queue/domain/Locker.java", "stars": "23", "class": {"name": "Locker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStartAddress", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getStartAddress() {        return startAddr;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/ExtendedIOPort.java", "stars": "4", "class": {"name": "ExtendedIOPort", "extends": null, "implements": ["Addressable"], "modifiers": ["public"]}}, {"method_name": "getEndAddress", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getEndAddress() {        return endAddr;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/ExtendedIOPort.java", "stars": "4", "class": {"name": "ExtendedIOPort", "extends": null, "implements": ["Addressable"], "modifiers": ["public"]}}, {"method_name": "load8", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte load8(int address) {        // System.out.println(\"load8: \" + Integer.toHexString(address) + \" : \" + gamepadStatus);        if (address == 0xcc02) {            return gamepadStatus;        }        else {            return 0;        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/ExtendedIOPort.java", "stars": "4", "class": {"name": "ExtendedIOPort", "extends": null, "implements": ["Addressable"], "modifiers": ["public"]}}, {"method_name": "store8", "params": ["int", "byte"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void store8(int address, byte value) {        // System.out.println(\"store8: \" + Integer.toHexString(address) + \" : \" + gamepadStatus);        if (address == 0xcc02) {            // System.out.println(value);            gamepadStatus = value;        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/ExtendedIOPort.java", "stars": "4", "class": {"name": "ExtendedIOPort", "extends": null, "implements": ["Addressable"], "modifiers": ["public"]}}, {"method_name": "load16", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "short", "snippet": "    public short load16(int address) {        // System.out.println(\"load16: \" + Integer.toHexString(address) + \" : \" + gamepadStatus);        if (address == 0xcc01) {            return (short)(gamepadStatus & 0x00ff);        }        else if (address == 0xcc02) {            return (short)((gamepadStatus << 8) & 0xff00);        }        return 0;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/ExtendedIOPort.java", "stars": "4", "class": {"name": "ExtendedIOPort", "extends": null, "implements": ["Addressable"], "modifiers": ["public"]}}, {"method_name": "store16", "params": ["int", "short"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void store16(int address, short value) {    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/ExtendedIOPort.java", "stars": "4", "class": {"name": "ExtendedIOPort", "extends": null, "implements": ["Addressable"], "modifiers": ["public"]}}, {"method_name": "parseFile", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "TimedTextObject", "snippet": "    public TimedTextObject parseFile(String fileName, String[] inputString) {        TimedTextObject tto = new TimedTextObject();        tto.fileName = fileName;        Caption caption;        Style style;        //for the clock timer        float timer = 100;        //if the file is .SSA or .ASS        boolean isASS = false;        //variables to store the formats        String[] styleFormat;        String[] dialogueFormat;        String line;        int lineCounter = 0;        int stringIndex = 0;        try {            //we scour the file            line = getLine(inputString, stringIndex++);            lineCounter++;            while (line != null && stringIndex < inputString.length) {                line = line.trim();                //we skip any line until we find a section [section name]                if (line.startsWith(\"[\")) {                    //now we must identify the section                    if (line.equalsIgnoreCase(\"[Script info]\")) {                        //its the script info section section                        lineCounter++;                        line = getLine(inputString, stringIndex++).trim();                        //Each line is scanned for useful info until a new section is detected                        while (!line.startsWith(\"[\")) {                            if (line.startsWith(\"Title:\"))                                //We have found the title                                tto.title = line.split(\":\")[1].trim();                            else if (line.startsWith(\"Original Script:\"))                                //We have found the author                                tto.author = line.split(\":\")[1].trim();                            else if (line.startsWith(\"Script Type:\")) {                                //we have found the version                                if (line.split(\":\")[1].trim().equalsIgnoreCase(\"v4.00+\"))                                    isASS = true;                                    //we check the type to set isASS or to warn if it comes from an older version than the studied specs                                else if (!line.split(\":\")[1].trim().equalsIgnoreCase(\"v4.00\"))                                    tto.warnings += \"Script version is older than 4.00, it may produce parsing errors.\";                            } else if (line.startsWith(\"Timer:\"))                                //We have found the timer                                timer = Float.parseFloat(line.split(\":\")[1].trim().replace(',', '.'));                            //we go to the next line                            lineCounter++;                            line = getLine(inputString, stringIndex++).trim();                        }                    } else if (line.equalsIgnoreCase(\"[v4 Styles]\")                            || line.equalsIgnoreCase(\"[v4 Styles+]\")                            || line.equalsIgnoreCase(\"[v4+ Styles]\")) {                        //its the Styles description section                        if (line.contains(\"+\") && !isASS) {                            //its ASS and it had not been noted                            isASS = true;                            tto.warnings += \"ScriptType should be set to v4:00+ in the [Script Info] section.\\n\\n\";                        }                        lineCounter++;                        line = getLine(inputString, stringIndex++).trim();                        //the first line should define the format                        if (!line.startsWith(\"Format:\")) {                            //if not, we scan for the format.                            tto.warnings += \"Format: (format definition) expected at line \" + line + \" for the styles section\\n\\n\";                            while (!line.startsWith(\"Format:\")) {                                lineCounter++;                                line = getLine(inputString, stringIndex++).trim();                            }                        }                        // we recover the format's fields                        styleFormat = line.split(\":\")[1].trim().split(\",\");                        lineCounter++;                        line = getLine(inputString, stringIndex++).trim();                        // we parse each style until we reach a new section                        while (!line.startsWith(\"[\")) {                            //we check it is a style                            if (line.startsWith(\"Style:\")) {                                //we parse the style                                style = parseStyleForASS(line.split(\":\")[1].trim().split(\",\"), styleFormat, lineCounter, isASS, tto.warnings);                                //and save the style                                tto.styling.put(style.iD, style);                            }                            //next line                            lineCounter++;                            line = getLine(inputString, stringIndex++).trim();                        }                    } else if (line.trim().equalsIgnoreCase(\"[Events]\")) {                        //its the events specification section                        lineCounter++;                        line = getLine(inputString, stringIndex++).trim();                        tto.warnings += \"Only dialogue events are considered, all other events are ignored.\\n\\n\";                        //the first line should define the format of the dialogues                        if (!line.startsWith(\"Format:\")) {                            //if not, we scan for the format.                            tto.warnings += \"Format: (format definition) expected at line \" + line + \" for the events section\\n\\n\";                            while (!line.startsWith(\"Format:\")) {                                lineCounter++;                                line = getLine(inputString, stringIndex++).trim();                            }                        }                        // we recover the format's fields                        dialogueFormat = line.split(\":\")[1].trim().split(\",\");                        //next line                        lineCounter++;                        line = getLine(inputString, stringIndex++).trim();                        // we parse each style until we reach a new section                        while (!line.startsWith(\"[\")) {                            //we check it is a dialogue                            //WARNING: all other events are ignored.                            if (line.startsWith(\"Dialogue:\")) {                                //we parse the dialogue                                caption = parseDialogueForASS(line.split(\":\", 2)[1].trim().split(\",\", 10), dialogueFormat, timer, tto);                                //and save the caption                                int key = caption.start.mseconds;                                //in case the key is already there, we increase it by a millisecond, since no duplicates are allowed                                while (tto.captions.containsKey(key)) key++;                                tto.captions.put(key, caption);                            }                            //next line                            lineCounter++;                            line = getLine(inputString, stringIndex++).trim();                        }                    } else if (line.trim().equalsIgnoreCase(\"[Fonts]\") || line.trim().equalsIgnoreCase(\"[Graphics]\")) {                        //its the custom fonts or embedded graphics section                        //these are not supported                        tto.warnings += \"The section \" + line.trim() + \" is not supported for conversion, all information there will be lost.\\n\\n\";                        line = getLine(inputString, stringIndex++).trim();                    } else {                        tto.warnings += \"Unrecognized section: \" + line.trim() + \" all information there is ignored.\";                        line = getLine(inputString, stringIndex++).trim();                    }                } else {                    line = getLine(inputString, stringIndex++);                    lineCounter++;                }            }            // parsed styles that are not used should be eliminated            tto.cleanUnusedStyles();        } catch (NullPointerException e) {            tto.warnings += \"unexpected end of file, maybe last caption is not complete.\\n\\n\";        }        tto.built = true;        return tto;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/subs/FormatASS.java", "stars": "4", "class": {"name": "FormatASS", "extends": "TimedTextFileFormat", "implements": null, "modifiers": ["public"]}}, {"method_name": "toFile", "params": ["TimedTextObject"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String[] toFile(TimedTextObject tto) {        //first we check if the TimedTextObject had been built, otherwise...        if (!tto.built)            return null;        //we will write the lines in an ArrayList         int index = 0;        //the minimum size of the file is the number of captions and styles + lines for sections and formats and the script info, so we'll take some extra space.        ArrayList<String> file = new ArrayList<>(30 + tto.styling.size() + tto.captions.size());        //header is placed        file.add(index++, \"[Script Info]\");        //title next        String title = \"Title: \";        if (tto.title == null || tto.title.isEmpty())            title += tto.fileName;        else title += tto.title;        file.add(index++, title);        //author next        String author = \"Original Script: \";        if (tto.author == null || tto.author.isEmpty())            author += \"Unknown\";        else author += tto.author;        file.add(index++, author);        //additional info        if (tto.copyright != null && !tto.copyright.isEmpty())            file.add(index++, \"; \" + tto.copyright);        if (tto.description != null && !tto.description.isEmpty())            file.add(index++, \"; \" + tto.description);        file.add(index++, \"; Converted by the Online Subtitle Converter developed by J. David Requejo\");        //mandatory info        if (tto.useASSInsteadOfSSA)            file.add(index++, \"Script Type: V4.00+\");        else file.add(index++, \"Script Type: V4.00\");        file.add(index++, \"Collisions: Normal\");        file.add(index++, \"Timer: 100,0000\");        if (tto.useASSInsteadOfSSA)            file.add(index++, \"WrapStyle: 1\");        //an empty line is added        file.add(index++, \"\");        //Styles section        if (tto.useASSInsteadOfSSA)            file.add(index++, \"[V4+ Styles]\");        else file.add(index++, \"[V4 Styles]\");        //define the format        if (tto.useASSInsteadOfSSA)            file.add(index++, \"Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\");        else            file.add(index++, \"Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, TertiaryColour, BackColour, Bold, Italic, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, AlphaLevel, Encoding\");        //Next we iterate over the styles        for (Style style : tto.styling.values()) {            String styleLine = \"Style: \";            //name            styleLine += style.iD + \",\";            styleLine += style.font + \",\";            styleLine += style.fontSize + \",\";            styleLine += getColorsForASS(tto.useASSInsteadOfSSA, style);            styleLine += getOptionsForASS(tto.useASSInsteadOfSSA, style);            //BorderStyle, Outline, Shadow            styleLine += \"1,2,2,\";            styleLine += getAlignForASS(tto.useASSInsteadOfSSA, style.textAlign);            //MarginL, MarginR, MarginV            styleLine += \",0,0,0,\";            //AlphaLevel            if (!tto.useASSInsteadOfSSA) styleLine += \"0,\";            //Encoding            styleLine += \"0\";            //and we add the style definition line            file.add(index++, styleLine);        }        //an empty line is added        file.add(index++, \"\");        //Events section        file.add(index++, \"[Events]\");        //define the format        if (tto.useASSInsteadOfSSA)            file.add(index++, \"Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text\");        else            file.add(index++, \"Format: Marked, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text\");        //Next we iterate over the captions        for (Caption caption : tto.captions.values()) {            //for each caption            String line = \"Dialogue: 0,\";            //offset is applied            if (tto.offset != 0) {                caption.start.mseconds += tto.offset;                caption.end.mseconds += tto.offset;            }            //start time            line += caption.start.getTime(\"h:mm:ss.cs\") + \",\";            //end time            line += caption.end.getTime(\"h:mm:ss.cs\") + \",\";            //offset is undone            if (tto.offset != 0) {                caption.start.mseconds -= tto.offset;                caption.end.mseconds -= tto.offset;            }            //style            if (caption.style != null)                line += caption.style.iD;            else                line += \"Default\";            //default margins are used, no name or effect is recognized            line += \",,0000,0000,0000,,\";            //we add the caption text with \\N as line breaks  and clean of XML            line += caption.content.replaceAll(\"<br />\", \"\\\\N\").replaceAll(\"<.*?>\", \"\");            //and we add the caption line            file.add(index++, line);        }        //an empty line is added        file.add(index++, \"\");        //we return the expected file as an array of String        String[] toReturn = new String[file.size()];        for (int i = 0; i < toReturn.length; i++) {            toReturn[i] = file.get(i);        }        return toReturn;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/subs/FormatASS.java", "stars": "4", "class": {"name": "FormatASS", "extends": "TimedTextFileFormat", "implements": null, "modifiers": ["public"]}}, {"method_name": "parseStyleForASS", "params": ["String", "String", "int", "boolean", "String"], "throws": null, "modifiers": ["private"], "return_type": "Style", "snippet": "    private Style parseStyleForASS(String[] line, String[] styleFormat, int index, boolean isASS, String warnings) {        Style newStyle = new Style(Style.defaultID());        if (line.length != styleFormat.length) {            //both should have the same size            warnings += \"incorrectly formated line at \" + index + \"\\n\\n\";        } else {            for (int i = 0; i < styleFormat.length; i++) {                //we go through every format parameter and save the interesting values                if (styleFormat[i].trim().equalsIgnoreCase(\"Name\")) {                    //we save the name                    newStyle.iD = line[i].trim();                } else if (styleFormat[i].trim().equalsIgnoreCase(\"Fontname\")) {                    //we save the font                    newStyle.font = line[i].trim();                } else if (styleFormat[i].trim().equalsIgnoreCase(\"Fontsize\")) {                    //we save the size                    newStyle.fontSize = line[i].trim();                } else if (styleFormat[i].trim().equalsIgnoreCase(\"PrimaryColour\")) {                    //we save the color                    String color = line[i].trim();                    if (isASS) {                        if (color.startsWith(\"&H\"))                            newStyle.color = Style.getRGBValue(\"&HAABBGGRR\", color);                        else newStyle.color = Style.getRGBValue(\"decimalCodedAABBGGRR\", color);                    } else {                        if (color.startsWith(\"&H\"))                            newStyle.color = Style.getRGBValue(\"&HBBGGRR\", color);                        else newStyle.color = Style.getRGBValue(\"decimalCodedBBGGRR\", color);                    }                } else if (styleFormat[i].trim().equalsIgnoreCase(\"BackColour\")) {                    //we save the background color                    String color = line[i].trim();                    if (isASS) {                        if (color.startsWith(\"&H\"))                            newStyle.backgroundColor = Style.getRGBValue(\"&HAABBGGRR\", color);                        else                            newStyle.backgroundColor = Style.getRGBValue(\"decimalCodedAABBGGRR\", color);                    } else {                        if (color.startsWith(\"&H\"))                            newStyle.backgroundColor = Style.getRGBValue(\"&HBBGGRR\", color);                        else                            newStyle.backgroundColor = Style.getRGBValue(\"decimalCodedBBGGRR\", color);                    }                } else if (styleFormat[i].trim().equalsIgnoreCase(\"Bold\")) {                    //we save if bold                    newStyle.bold = Boolean.parseBoolean(line[i].trim());                } else if (styleFormat[i].trim().equalsIgnoreCase(\"Italic\")) {                    //we save if italic                    newStyle.italic = Boolean.parseBoolean(line[i].trim());                } else if (styleFormat[i].trim().equalsIgnoreCase(\"Underline\")) {                    //we save if underlined                    newStyle.underline = Boolean.parseBoolean(line[i].trim());                } else if (styleFormat[i].trim().equalsIgnoreCase(\"Alignment\")) {                    //we save the alignment                    int placement = Integer.parseInt(line[i].trim());                    if (isASS) {                        switch (placement) {                            case 1:                                newStyle.textAlign = \"bottom-left\";                                break;                            case 2:                                newStyle.textAlign = \"bottom-center\";                                break;                            case 3:                                newStyle.textAlign = \"bottom-right\";                                break;                            case 4:                                newStyle.textAlign = \"mid-left\";                                break;                            case 5:                                newStyle.textAlign = \"mid-center\";                                break;                            case 6:                                newStyle.textAlign = \"mid-right\";                                break;                            case 7:                                newStyle.textAlign = \"top-left\";                                break;                            case 8:                                newStyle.textAlign = \"top-center\";                                break;                            case 9:                                newStyle.textAlign = \"top-right\";                                break;                            default:                                warnings += \"undefined alignment for style at line \" + index + \"\\n\\n\";                        }                    } else {                        switch (placement) {                            case 9:                                newStyle.textAlign = \"bottom-left\";                                break;                            case 10:                                newStyle.textAlign = \"bottom-center\";                                break;                            case 11:                                newStyle.textAlign = \"bottom-right\";                                break;                            case 1:                                newStyle.textAlign = \"mid-left\";                                break;                            case 2:                                newStyle.textAlign = \"mid-center\";                                break;                            case 3:                                newStyle.textAlign = \"mid-right\";                                break;                            case 5:                                newStyle.textAlign = \"top-left\";                                break;                            case 6:                                newStyle.textAlign = \"top-center\";                                break;                            case 7:                                newStyle.textAlign = \"top-right\";                                break;                            default:                                warnings += \"undefined alignment for style at line \" + index + \"\\n\\n\";                        }                    }                }            }        }        return newStyle;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/subs/FormatASS.java", "stars": "4", "class": {"name": "FormatASS", "extends": "TimedTextFileFormat", "implements": null, "modifiers": ["public"]}}, {"method_name": "parseDialogueForASS", "params": ["String", "String", "float", "TimedTextObject"], "throws": null, "modifiers": ["private"], "return_type": "Caption", "snippet": "    private Caption parseDialogueForASS(String[] line, String[] dialogueFormat, float timer, TimedTextObject tto) {        Caption newCaption = new Caption();        //all information from fields 10 onwards are the caption text therefore needn't be split        String captionText = line[9];        //text is cleaned before being inserted into the caption        newCaption.content = captionText.replaceAll(\"\\\\{.*?\\\\}\", \"\").replace(\"\\n\", \"<br />\").replace(\"\\\\N\", \"<br />\");        for (int i = 0; i < dialogueFormat.length; i++) {            //we go through every format parameter and save the interesting values            if (dialogueFormat[i].trim().equalsIgnoreCase(\"Style\")) {                //we save the style                Style s = tto.styling.get(line[i].trim());                if (s != null)                    newCaption.style = s;                else                    tto.warnings += \"undefined style: \" + line[i].trim() + \"\\n\\n\";            } else if (dialogueFormat[i].trim().equalsIgnoreCase(\"Start\")) {                //we save the starting time                newCaption.start = new Time(\"h:mm:ss.cs\", line[i].trim());            } else if (dialogueFormat[i].trim().equalsIgnoreCase(\"End\")) {                //we save the starting time                newCaption.end = new Time(\"h:mm:ss.cs\", line[i].trim());            }        }        //timer is applied        if (timer != 100) {            newCaption.start.mseconds /= (timer / 100);            newCaption.end.mseconds /= (timer / 100);        }        return newCaption;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/subs/FormatASS.java", "stars": "4", "class": {"name": "FormatASS", "extends": "TimedTextFileFormat", "implements": null, "modifiers": ["public"]}}, {"method_name": "getColorsForASS", "params": ["boolean", "Style"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String getColorsForASS(boolean useASSInsteadOfSSA, Style style) {        String colors;        if (useASSInsteadOfSSA)            //primary color(BBGGRR) with Alpha level (00) in front + 00FFFFFF + 00000000 + background color(BBGGRR) with Alpha level (80) in front            colors = Integer.parseInt(\"00\" + style.color.substring(4, 6) + style.color.substring(2, 4) + style.color.substring(0, 2), 16) + \",16777215,0,\" + Long.parseLong(\"80\" + style.backgroundColor.substring(4, 6) + style.backgroundColor.substring(2, 4) + style.backgroundColor.substring(0, 2), 16) + \",\";        else {            //primary color(BBGGRR) + FFFFFF + 000000 + background color(BBGGRR)            String color = style.color.substring(4, 6) + style.color.substring(2, 4) + style.color.substring(0, 2);            String bgcolor = style.backgroundColor.substring(4, 6) + style.backgroundColor.substring(2, 4) + style.backgroundColor.substring(0, 2);            colors = Long.parseLong(color, 16) + \",16777215,0,\" + Long.parseLong(bgcolor, 16) + \",\";        }        return colors;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/subs/FormatASS.java", "stars": "4", "class": {"name": "FormatASS", "extends": "TimedTextFileFormat", "implements": null, "modifiers": ["public"]}}, {"method_name": "getOptionsForASS", "params": ["boolean", "Style"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String getOptionsForASS(boolean useASSInsteadOfSSA, Style style) {        String options;        if (style.bold)            options = \"-1,\";        else            options = \"0,\";        if (style.italic)            options += \"-1,\";        else            options += \"0,\";        if (useASSInsteadOfSSA) {            if (style.underline)                options += \"-1,\";            else                options += \"0,\";            options += \"0,100,100,0,0,\";        }        return options;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/subs/FormatASS.java", "stars": "4", "class": {"name": "FormatASS", "extends": "TimedTextFileFormat", "implements": null, "modifiers": ["public"]}}, {"method_name": "getAlignForASS", "params": ["boolean", "String"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int getAlignForASS(boolean useASSInsteadOfSSA, String align) {        if (useASSInsteadOfSSA) {            int placement = 2;            if (\"bottom-left\".equals(align))                placement = 1;            else if (\"bottom-center\".equals(align))                placement = 2;            else if (\"bottom-right\".equals(align))                placement = 3;            else if (\"mid-left\".equals(align))                placement = 4;            else if (\"mid-center\".equals(align))                placement = 5;            else if (\"mid-right\".equals(align))                placement = 6;            else if (\"top-left\".equals(align))                placement = 7;            else if (\"top-center\".equals(align))                placement = 8;            else if (\"top-right\".equals(align))                placement = 9;            return placement;        } else {            int placement = 10;            if (\"bottom-left\".equals(align))                placement = 9;            else if (\"bottom-center\".equals(align))                placement = 10;            else if (\"bottom-right\".equals(align))                placement = 11;            else if (\"mid-left\".equals(align))                placement = 1;            else if (\"mid-center\".equals(align))                placement = 2;            else if (\"mid-right\".equals(align))                placement = 3;            else if (\"top-left\".equals(align))                placement = 5;            else if (\"top-center\".equals(align))                placement = 6;            else if (\"top-right\".equals(align))                placement = 7;            return placement;        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/subs/FormatASS.java", "stars": "4", "class": {"name": "FormatASS", "extends": "TimedTextFileFormat", "implements": null, "modifiers": ["public"]}}, {"method_name": "updateDrawState", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void updateDrawState (android.text.TextPaint p0)\t{\t\tn_updateDrawState (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormattedStringExtensions_FontSpan.java", "stars": "2", "class": {"name": "FormattedStringExtensions_FontSpan", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_updateDrawState", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_updateDrawState (android.text.TextPaint p0);\tpublic void updateMeasureState (android.text.TextPaint p0)\t{\t\tn_updateMeasureState (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormattedStringExtensions_FontSpan.java", "stars": "2", "class": {"name": "FormattedStringExtensions_FontSpan", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "updateMeasureState", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void updateMeasureState (android.text.TextPaint p0)\t{\t\tn_updateMeasureState (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormattedStringExtensions_FontSpan.java", "stars": "2", "class": {"name": "FormattedStringExtensions_FontSpan", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_updateMeasureState", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_updateMeasureState (android.text.TextPaint p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormattedStringExtensions_FontSpan.java", "stars": "2", "class": {"name": "FormattedStringExtensions_FontSpan", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormattedStringExtensions_FontSpan.java", "stars": "2", "class": {"name": "FormattedStringExtensions_FontSpan", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormattedStringExtensions_FontSpan.java", "stars": "2", "class": {"name": "FormattedStringExtensions_FontSpan", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "setUp", "params": ["List<GSYVideoModel>", "int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean setUp(List<GSYVideoModel> url, int position) {        return setUp(url, position, null, new HashMap<String, String>());    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/exo/GSYExo2PlayerView.java", "stars": "2", "class": {"name": "GSYExo2PlayerView", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": ["List<GSYVideoModel>", "int", "File"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean setUp(List<GSYVideoModel> url, int position, File cachePath) {        return setUp(url, position, cachePath, new HashMap<String, String>());    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/exo/GSYExo2PlayerView.java", "stars": "2", "class": {"name": "GSYExo2PlayerView", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": ["List<GSYVideoModel>", "int", "File", "Map<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean setUp(List<GSYVideoModel> url, int position, File cachePath, Map<String, String> mapHeadData) {        return setUp(url, position, cachePath, mapHeadData, true);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/exo/GSYExo2PlayerView.java", "stars": "2", "class": {"name": "GSYExo2PlayerView", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": ["List<GSYVideoModel>", "int", "File", "Map<String,String>", "boolean"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean setUp(List<GSYVideoModel> url, int position, File cachePath, Map<String, String> mapHeadData, boolean changeState) {        mUriList = url;        mPlayPosition = position;        mMapHeadData = mapHeadData;        GSYVideoModel gsyVideoModel = url.get(position);        //\u4e0d\u652f\u6301\u8fb9\u64ad\u8fb9\u7f13\u5b58        boolean set = setUp(gsyVideoModel.getUrl(), false, cachePath, gsyVideoModel.getTitle(), changeState);        if (!TextUtils.isEmpty(gsyVideoModel.getTitle())) {            mTitleTextView.setText(gsyVideoModel.getTitle());        }        return set;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/exo/GSYExo2PlayerView.java", "stars": "2", "class": {"name": "GSYExo2PlayerView", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "cloneParams", "params": ["GSYBaseVideoPlayer", "GSYBaseVideoPlayer"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void cloneParams(GSYBaseVideoPlayer from, GSYBaseVideoPlayer to) {        super.cloneParams(from, to);        GSYExo2PlayerView sf = (GSYExo2PlayerView) from;        GSYExo2PlayerView st = (GSYExo2PlayerView) to;        st.mPlayPosition = sf.mPlayPosition;        st.mUriList = sf.mUriList;        st.mExoCache = sf.mExoCache;        st.mTitle = sf.mTitle;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/exo/GSYExo2PlayerView.java", "stars": "2", "class": {"name": "GSYExo2PlayerView", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "startWindowFullscreen", "params": ["Context", "boolean", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "GSYBaseVideoPlayer", "snippet": "    public GSYBaseVideoPlayer startWindowFullscreen(Context context, boolean actionBar, boolean statusBar) {        GSYBaseVideoPlayer gsyBaseVideoPlayer = super.startWindowFullscreen(context, actionBar, statusBar);        if (gsyBaseVideoPlayer != null) {            GSYExo2PlayerView GSYExo2PlayerView = (GSYExo2PlayerView) gsyBaseVideoPlayer;            GSYVideoModel gsyVideoModel = mUriList.get(mPlayPosition);            if (!TextUtils.isEmpty(gsyVideoModel.getTitle())) {                GSYExo2PlayerView.mTitleTextView.setText(gsyVideoModel.getTitle());            }        }        return gsyBaseVideoPlayer;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/exo/GSYExo2PlayerView.java", "stars": "2", "class": {"name": "GSYExo2PlayerView", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveNormalVideoShow", "params": ["View", "ViewGroup", "GSYVideoPlayer"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void resolveNormalVideoShow(View oldF, ViewGroup vp, GSYVideoPlayer gsyVideoPlayer) {        if (gsyVideoPlayer != null) {            GSYVideoModel gsyVideoModel = mUriList.get(mPlayPosition);            if (!TextUtils.isEmpty(gsyVideoModel.getTitle())) {                mTitleTextView.setText(gsyVideoModel.getTitle());            }        }        super.resolveNormalVideoShow(oldF, vp, gsyVideoPlayer);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/exo/GSYExo2PlayerView.java", "stars": "2", "class": {"name": "GSYExo2PlayerView", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "startPrepare", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void startPrepare() {        if (getGSYVideoManager().listener() != null) {            getGSYVideoManager().listener().onCompletion();        }        if (mVideoAllCallBack != null) {            Debuger.printfLog(\"onStartPrepared\");            mVideoAllCallBack.onStartPrepared(mOriginUrl, mTitle, this);        }        getGSYVideoManager().setListener(this);        getGSYVideoManager().setPlayTag(mPlayTag);        getGSYVideoManager().setPlayPosition(mPlayPosition);        mAudioManager.requestAudioFocus(onAudioFocusChangeListener, AudioManager.STREAM_MUSIC, AudioManager.AUDIOFOCUS_GAIN_TRANSIENT);        try {            ((Activity) getActivityContext()).getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);        } catch (Exception e) {            e.printStackTrace();        }        mBackUpPlayingBufferState = -1;        //prepare\u901a\u8fc7list\u521d\u59cb\u5316        List<String> urls = new ArrayList<>();        for (GSYVideoModel gsyVideoModel : mUriList) {            urls.add(gsyVideoModel.getUrl());        }        if (urls.size() == 0) {            Debuger.printfError(\"********************** urls isEmpty . Do you know why ? **********************\");        }        ((GSYExoVideoManager) getGSYVideoManager()).prepare(urls, (mMapHeadData == null) ? new HashMap<String, String>() : mMapHeadData, mLooping, mSpeed, mExoCache, mCachePath, mOverrideExtension);        setStateAndUi(CURRENT_STATE_PREPAREING);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/exo/GSYExo2PlayerView.java", "stars": "2", "class": {"name": "GSYExo2PlayerView", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "showWifiDialog", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void showWifiDialog() {        if (!NetworkUtils.isAvailable(mContext)) {            startPlayLogic();            return;        }        AlertDialog.Builder builder = new AlertDialog.Builder(getActivityContext());        builder.setMessage(getResources().getString(R.string.tips_not_wifi));        builder.setPositiveButton(getResources().getString(R.string.tips_not_wifi_confirm), new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                dialog.dismiss();                startPlayLogic();            }        });        builder.setNegativeButton(getResources().getString(R.string.tips_not_wifi_cancel), new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                dialog.dismiss();            }        });        builder.create().show();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/exo/GSYExo2PlayerView.java", "stars": "2", "class": {"name": "GSYExo2PlayerView", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setExoCache", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setExoCache(boolean exoCache) {        this.mExoCache = exoCache;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/exo/GSYExo2PlayerView.java", "stars": "2", "class": {"name": "GSYExo2PlayerView", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getGSYVideoManager", "params": [], "throws": null, "modifiers": ["public"], "return_type": "GSYVideoViewBridge", "snippet": "    public GSYVideoViewBridge getGSYVideoManager() {        GSYExoVideoManager.instance().initContext(getContext().getApplicationContext());        return GSYExoVideoManager.instance();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/exo/GSYExo2PlayerView.java", "stars": "2", "class": {"name": "GSYExo2PlayerView", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "backFromFull", "params": ["Context"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean backFromFull(Context context) {        return GSYExoVideoManager.backFromWindowFull(context);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/exo/GSYExo2PlayerView.java", "stars": "2", "class": {"name": "GSYExo2PlayerView", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "releaseVideos", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void releaseVideos() {        GSYExoVideoManager.releaseAllVideos();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/exo/GSYExo2PlayerView.java", "stars": "2", "class": {"name": "GSYExo2PlayerView", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getFullId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getFullId() {        return GSYExoVideoManager.FULLSCREEN_ID;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/exo/GSYExo2PlayerView.java", "stars": "2", "class": {"name": "GSYExo2PlayerView", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getSmallId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getSmallId() {        return GSYExoVideoManager.SMALL_ID;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/exo/GSYExo2PlayerView.java", "stars": "2", "class": {"name": "GSYExo2PlayerView", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "onInfo", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onInfo(int what, int extra) {        if (what == POSITION_DISCONTINUITY) {            int window =  ((GSYExo2MediaPlayer)getGSYVideoManager().getPlayer().getMediaPlayer()).getCurrentWindowIndex();            mPlayPosition = window;            GSYVideoModel gsyVideoModel = mUriList.get(window);            if (!TextUtils.isEmpty(gsyVideoModel.getTitle())) {                mTitleTextView.setText(gsyVideoModel.getTitle());            }        } else {            super.onInfo(what, extra);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/exo/GSYExo2PlayerView.java", "stars": "2", "class": {"name": "GSYExo2PlayerView", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "play", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void play() {        super.videoContext.setVideoState(VideoContext.PLAY_STATE);    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/state/VideoCloseState.java", "stars": "2", "class": {"name": "VideoCloseState", "extends": "VideoState", "implements": null, "modifiers": ["public"]}}, {"method_name": "pause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void pause() {        System.out.println(\"Error\uff0c\u89c6\u9891\u6b63\u5904\u5728\u5173\u95ed\u72b6\u6001\uff0c\u4e0d\u80fd\u6682\u505c\");    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/state/VideoCloseState.java", "stars": "2", "class": {"name": "VideoCloseState", "extends": "VideoState", "implements": null, "modifiers": ["public"]}}, {"method_name": "speed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void speed() {        System.out.println(\"Error\uff0c\u89c6\u9891\u6b63\u5904\u5728\u5173\u95ed\u72b6\u6001\uff0c\u4e0d\u80fd\u500d\u901f\u64ad\u653e\");    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/state/VideoCloseState.java", "stars": "2", "class": {"name": "VideoCloseState", "extends": "VideoState", "implements": null, "modifiers": ["public"]}}, {"method_name": "close", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void close() {        System.out.println(\"\u89c6\u9891\u6b63\u5904\u5728\u5173\u95ed\u72b6\u6001\");    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/state/VideoCloseState.java", "stars": "2", "class": {"name": "VideoCloseState", "extends": "VideoState", "implements": null, "modifiers": ["public"]}}, {"method_name": "show2", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void show2(){        System.out.println(\"Demo2...show...\");    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/java2/itcast/annotation/Demo2.java", "stars": "2", "class": {"name": "Demo2", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHelloMessage", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getHelloMessage(String name) {\t\treturn this.configuration.getGreeting() + \" \" + name;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-parent-context/src/main/java/smoketest/parent/HelloWorldService.java", "stars": "47572", "class": {"name": "HelloWorldService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "process", "params": ["RequestEvent", "SipLayer", "ServerTransaction"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void process(RequestEvent evt, SipLayer layer, ServerTransaction transaction) {\t\tRequest request = evt.getRequest();\t\ttry {\t\t\tResponse response = null;\t\t\tresponse = layer.getMessageFactory().createResponse(200, request);\t\t\tif (response != null) {\t\t\t\tExpiresHeader expireHeader = layer.getHeaderFactory().createExpiresHeader(30);\t\t\t\tresponse.setExpires(expireHeader);\t\t\t}\t\t\tSystem.out.println(\"response : \" + response.toString());\t\t\tif (transaction != null) {\t\t\t\ttransaction.sendResponse(response);\t\t\t\ttransaction.terminate();\t\t\t} else {\t\t\t\tSystem.out.println(\"processRequest serverTransactionId is null.\");\t\t\t}\t\t} catch (ParseException e) {\t\t\te.printStackTrace();\t\t} catch (SipException e) {\t\t\te.printStackTrace();\t\t} catch (InvalidArgumentException e) {\t\t\te.printStackTrace();\t\t}\t\t\t}", "url": "https://raw.githubusercontent.com/swwheihei/wvp/master/src/main/java/com/genersoft/iot/vmp/gb28181/transmit/request/impl/SubscribeRequestProcessor.java", "stars": "29", "class": {"name": "SubscribeRequestProcessor", "extends": null, "implements": ["ISIPRequestProcessor"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");        ScheduledExecutorService executor = Executors.newScheduledThreadPool(100);        for (int i = 10; i > 0; i--) {            executor.schedule(() -> System.out.println(\"Work start, thread id:\" + Thread.currentThread().getId() + \" \" + sdf.format(new Date())), i, TimeUnit.SECONDS);        }    }", "url": "https://raw.githubusercontent.com/chengxy-nds/delayqueue/master/src/main/java/com/chengxy/delayqueue/scheduledExecutor/ScheduledExecutorServiceDemo.java", "stars": "7", "class": {"name": "ScheduledExecutorServiceDemo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "ScheduledExecutorServiceTest", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void ScheduledExecutorServiceTest() throws InterruptedException {        ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(5);        System.out.println(\"\u521b\u5efa5\u79d2\u5ef6\u8fdf\u7684\u4efb\u52a1\");        ScheduledFuture<?> schedule = scheduledExecutorService.schedule(() -> doTask(\"5s\"), 5, TimeUnit.SECONDS);        Thread.sleep(4900);        schedule.cancel(false);        System.err.println(\"\u53d6\u6d885\u79d2\u5ef6\u8fdf\u7684\u4efb\u52a1\");        System.out.println(\"\u521b\u5efa3\u79d2\u5ef6\u8fdf\u7684\u4efb\u52a1\");        ScheduledFuture<?> schedule2 = scheduledExecutorService.schedule(new Runnable() {            @Override            public void run() {                doTask(\"3s\");            }        }, 3, TimeUnit.SECONDS);        Thread.sleep(4000);    }", "url": "https://raw.githubusercontent.com/chengxy-nds/delayqueue/master/src/main/java/com/chengxy/delayqueue/scheduledExecutor/ScheduledExecutorServiceDemo.java", "stars": "7", "class": {"name": "ScheduledExecutorServiceDemo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "doTask", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void doTask(String arg) {        System.out.println(arg + \" \u4efb\u52a1\u6267\u884c \");    }", "url": "https://raw.githubusercontent.com/chengxy-nds/delayqueue/master/src/main/java/com/chengxy/delayqueue/scheduledExecutor/ScheduledExecutorServiceDemo.java", "stars": "7", "class": {"name": "ScheduledExecutorServiceDemo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generateCode", "params": [], "throws": ["CodeException"], "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String generateCode() throws CodeException {\t\tString result = \"\";\t\tresult += super.generateCode();\t\t//init\t\tString checkVal = \"switch_check_\" + getId();\t\tString endLabel = \"switch_end_\" + getId();\t\tresult += tab() + \"int \" + checkVal + \";\" + NL;\t\tfor (int caseNum = 0; caseNum < getStms().size(); caseNum++) {\t\t\tString caseLabel = \"switch_\" + getId() + \"_case_\" + caseNum;\t\t\tExpr caseExpr = ((StmCASE)getStms().get(caseNum)).getExpr();\t\t\tresult += NL + tab() + \"//case \" + caseExpr + NL;\t\t\t//check case\t\t\tresult += tab() + checkVal + \" = \" + expr + \" != \" + caseExpr.generateCode() + \";\" + NL;\t\t\tresult += tab() + \"if (\" + checkVal + \") goto \" + caseLabel + \";\" + NL;\t\t\t//case code\t\t\tresult += getStms().get(caseNum).generateCode();\t\t\t//next case/switch end\t\t\tresult += tab() + \"goto \" + endLabel + \";\" + NL;\t\t\tresult += tab() + caseLabel + \":\" + NL;\t\t}\t\t\t\t//default\t\tresult += defaultStm.generateCode();\t\t//end\t\tresult += tab() + endLabel + \":\" + NL;\t\treturn result;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/StmSWITCH.java", "stars": "3", "class": {"name": "StmSWITCH", "extends": "StmList", "implements": null, "modifiers": ["public"]}}, {"method_name": "checkType", "params": [], "throws": ["TypeException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void checkType() throws TypeException {\t\texpr.checkType();\t\tTypeCode[] typeCodes = {TypeCode.INTEGER, TypeCode.ENUM};\t\texpr.getType().assertType(this, typeCodes);\t\tif (defaultStm != null)\t\t\tdefaultStm.checkType();\t\tIterator<Stm> iterator = getStms().iterator();\t\twhile (iterator.hasNext()) {\t\t\tStmCASE stmCASE = (StmCASE)iterator.next();\t\t\tstmCASE.checkType();\t\t\tstmCASE.getExpr().getType().assertType(stmCASE, expr.getType());\t\t\t\t\t}\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/StmSWITCH.java", "stars": "3", "class": {"name": "StmSWITCH", "extends": "StmList", "implements": null, "modifiers": ["public"]}}, {"method_name": "indent", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void indent() {\t\tIterator<Stm> iterator = getStms().iterator();\t\twhile (iterator.hasNext()) {\t\t\tStm stm = iterator.next();\t\t\tstm.setIndent(getIndent());\t\t\tstm.indent();\t\t}\t\tif (defaultStm != null) {\t\t\tdefaultStm.setIndent(getIndent());\t\t\tdefaultStm.indent();\t\t}\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/StmSWITCH.java", "stars": "3", "class": {"name": "StmSWITCH", "extends": "StmList", "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\treturn \"switch (\" + expr + \")\";\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/StmSWITCH.java", "stars": "3", "class": {"name": "StmSWITCH", "extends": "StmList", "implements": null, "modifiers": ["public"]}}, {"method_name": "i", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void i(String tag, String log) {//        Log.i(tag, log);        tv.athena.klog.api.KLog.i(tag, log);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/utils/LogUtil.java", "stars": "2", "class": {"name": "LogUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "w", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void w(String tag, String log) {//        Log.w(tag, log);        tv.athena.klog.api.KLog.w(tag, log);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/utils/LogUtil.java", "stars": "2", "class": {"name": "LogUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "e", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void e(String tag, String log) {//        Log.e(tag, log);        tv.athena.klog.api.KLog.e(tag, log);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/utils/LogUtil.java", "stars": "2", "class": {"name": "LogUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "d", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void d(String tag, String log) {//        Log.d(tag, log);        tv.athena.klog.api.KLog.d(tag, log);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/utils/LogUtil.java", "stars": "2", "class": {"name": "LogUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "v", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void v(String tag, String log) {//        Log.v(tag, log);        tv.athena.klog.api.KLog.v(tag, log);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/utils/LogUtil.java", "stars": "2", "class": {"name": "LogUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "testUnknownByDefault", "params": [], "throws": ["AnalyzerException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void testUnknownByDefault() throws AnalyzerException {\t\tClassNode node = getFromName(\"bin/javac/HelloWorld.class\");\t\tMethodNode mn = getMethod(node, \"helloFromGet\");\t\tSimAnalyzer analyzer = new SimAnalyzer(new SimInterpreter());\t\tFrame<AbstractValue>[] frames = analyzer.analyze(node.name, mn);\t\tint call = getMethodCallIndex(mn.instructions, \"println\");\t\tAbstractValue value = FrameUtil.getTopStack(frames[call]);\t\t// The \"Hello World\" text is loaded from a INVOKESTATIC call, so its unknown by default\t\tassertTrue(value.isValueUnresolved());\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/test/java/me/coley/analysis/design/TestStaticInvokeFactory.java", "stars": "12", "class": {"name": "TestStaticInvokeFactory", "extends": "TestUtils", "implements": null, "modifiers": ["public"]}}, {"method_name": "testUsesCustomValue", "params": [], "throws": ["AnalyzerException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void testUsesCustomValue() throws AnalyzerException {\t\tClassNode node = getFromName(\"bin/javac/HelloWorld.class\");\t\tMethodNode mn = getMethod(node, \"helloFromGet\");\t\tSimAnalyzer analyzer = new SimAnalyzer(new SimInterpreter()) {\t\t\t@Override\t\t\tprotected StaticInvokeFactory createStaticInvokeFactory() {\t\t\t\treturn new StaticInvokeFactoryTestImpl();\t\t\t}\t\t};\t\tFrame<AbstractValue>[] frames = analyzer.analyze(node.name, mn);\t\tint call = getMethodCallIndex(mn.instructions, \"println\");\t\tAbstractValue value = FrameUtil.getTopStack(frames[call]);\t\t// The \"Hello World\" text is loaded from a INVOKESTATIC call, but we have a handler for that.\t\t// We specify the return-value of the static call is \"Hello World\"\t\tassertTrue(value.isValueResolved());\t\tassertEquals(\"Hello World\", value.getValue());\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/test/java/me/coley/analysis/design/TestStaticInvokeFactory.java", "stars": "12", "class": {"name": "TestStaticInvokeFactory", "extends": "TestUtils", "implements": null, "modifiers": ["public"]}}, {"method_name": "invokeStatic", "params": ["MethodInsnNode", "List<AbstractValue>"], "throws": null, "modifiers": ["public"], "return_type": "AbstractValue", "snippet": "\t\tpublic AbstractValue invokeStatic(MethodInsnNode insn, List<?\t\t\t\textends AbstractValue> arguments) {\t\t\tif (insn.name.equals(\"getHello\")) {\t\t\t\treturn SimulatedVirtualValue.ofString((List<AbstractInsnNode>) null, null, \"Hello World\");\t\t\t}\t\t\treturn super.invokeStatic(insn, arguments);\t\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/test/java/me/coley/analysis/design/TestStaticInvokeFactory.java", "stars": "12", "class": {"name": "StaticInvokeFactoryTestImpl", "extends": "StaticInvokeFactory", "implements": null, "modifiers": ["static"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return ToStringBuilder.reflectionToString(this);    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/db/util/object/BaseDO.java", "stars": "7", "class": {"name": "BaseDO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "init", "params": ["Properties"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void init(Properties properties) {\t\tif(properties.containsKey(\"redis.status\") && 1==Integer.parseInt(properties.getProperty(\"redis.status\").trim())) {\t\t\tJedisPoolConfig poolConfig = new JedisPoolConfig();\t\t\tpoolConfig.setMaxTotal(Integer.parseInt(properties.getProperty(\"redis.pool.maxActive\").trim()));\t\t\tpoolConfig.setMaxIdle(Integer.parseInt(properties.getProperty(\"redis.pool.maxIdle\").trim()));\t\t\tpoolConfig.setMaxWaitMillis(Long.parseLong(properties.getProperty(\"redis.pool.maxWait\").trim()));\t\t\tpoolConfig.setTestOnBorrow(Boolean.parseBoolean(properties.getProperty(\"redis.pool.testOnBorrow\").trim()));\t\t\tpoolConfig.setTestOnReturn(Boolean.parseBoolean(properties.getProperty(\"redis.pool.testOnReturn\").trim()));\t\t\tpoolConfig.setBlockWhenExhausted(false);\t\t\t\t\t\tString name = null;\t\t\tString host = null;\t\t\tInteger port  = null;\t\t\tString pass = null;\t\t\tint db = 0;\t\t\tint nodeSize = Integer.parseInt(properties.getProperty(\"redis.node.size\").trim());\t\t\tfor (int id = 1; id <= nodeSize; id++) {\t\t\t\tname = properties.getProperty(\"redis.node\"+id+\".name\").trim();\t\t\t\thost = properties.getProperty(\"redis.node\"+id+\".host\").trim();\t\t\t\tport = Integer.valueOf(properties.getProperty(\"redis.node\"+id+\".port\").trim());\t\t\t\tpass = properties.getProperty(\"redis.node\"+id+\".pass\").trim();\t\t\t\tdb = 0;\t\t\t\tif(properties.containsKey(\"redis.node\"+id+\".db\")) {\t\t\t\t\tdb = Integer.parseInt(properties.getProperty(\"redis.node\"+id+\".db\").trim());\t\t\t\t}\t\t\t\tredisPoolNodeList.put(name, new JedisPool(poolConfig, host, port, Protocol.DEFAULT_TIMEOUT, pass, db));\t\t\t}\t\t\t\t\t\tlogger.info(\"redisPoolNodeList: names=\"+redisPoolNodeList.keySet().toString());\t\t}\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XRedis.java", "stars": "2", "class": {"name": "XRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getResource", "params": ["String"], "throws": null, "modifiers": ["synchronized", "private", "static"], "return_type": "Jedis", "snippet": "\tprivate synchronized static Jedis getResource(String name) {\t\tJedis jedis = null;\t\tJedisPool jedisPool = redisPoolNodeList.get(name);\t\tif (jedisPool != null) {\t\t\ttry{\t\t\t\tjedis = jedisPool.getResource();\t\t\t}catch(Exception e){\t\t\t\tlogger.error(\"getResource.Exception:\", e);\t\t\t}\t\t}\t\treturn jedis;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XRedis.java", "stars": "2", "class": {"name": "XRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "close", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void close() {\t\tfor (JedisPool jedisPool : redisPoolNodeList.values()) {\t\t\tjedisPool.close();\t\t}\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XRedis.java", "stars": "2", "class": {"name": "XRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "ttl", "params": ["RedisKey"], "throws": null, "modifiers": ["public", "static"], "return_type": "Long", "snippet": "\tpublic static Long ttl(RedisKey key) {\t\tif (key != null) {\t\t\tJedis jedis = null;\t\t\ttry {\t\t\t\tjedis = getResource(key.builder.node);\t\t\t\tif (jedis == null) {\t\t\t\t\tlogger.error(\"getResource.null: node=\" + key.builder.node);\t\t\t\t\treturn null;\t\t\t\t}\t\t\t\treturn jedis.ttl(key.name());\t\t\t} catch (Exception e) {\t\t\t\tlogger.error(\"ttl.Exception:\", e);\t\t\t} finally {\t\t\t\tif (jedis != null) {\t\t\t\t\tjedis.close();\t\t\t\t}\t\t\t}\t\t}\t\treturn 0L;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XRedis.java", "stars": "2", "class": {"name": "XRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "expire", "params": ["RedisKey"], "throws": null, "modifiers": ["public", "static"], "return_type": "Long", "snippet": "\tpublic static Long expire(RedisKey key) {\t    if(key != null) {\t    \tJedis jedis = null;\t    \ttry{\t    \t\tjedis = getResource(key.builder.node);\t    \t\tif(jedis == null) {\t    \t\t\tlogger.error(\"getResource.null: node=\"+key.builder.node);\t    \t\t\treturn null;\t    \t\t}\t    \t\treturn jedis.expire(key.name(), key.builder.expireTime);\t\t\t}catch(Exception e){\t\t\t\tlogger.error(\"expire.Exception:\", e);\t\t\t}finally {\t\t\t\tif (jedis != null) {\t\t\t\t\tjedis.close();\t\t\t\t}\t\t\t}\t    }\t    return 0L;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XRedis.java", "stars": "2", "class": {"name": "XRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "expireAt", "params": ["RedisKey", "long"], "throws": null, "modifiers": ["public", "static"], "return_type": "Long", "snippet": "\tpublic static Long expireAt(RedisKey key, long unixTime) {\t\tif(key != null) {\t\t\tJedis jedis = null;\t\t\ttry{\t\t\t\tjedis = getResource(key.builder.node);\t\t\t\tif(jedis == null) {\t\t\t\t\tlogger.error(\"getResource.null: node=\"+key.builder.node);\t\t\t\t\treturn null;\t\t\t\t}\t\t\t\treturn jedis.expireAt(key.name(), unixTime);\t\t\t}catch(Exception e){\t\t\t\tlogger.error(\"expireAt.Exception:\", e);\t\t\t}finally {\t\t\t\tif (jedis != null) {\t\t\t\t\tjedis.close();\t\t\t\t}\t\t\t}\t\t}\t\treturn 0L;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XRedis.java", "stars": "2", "class": {"name": "XRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "set", "params": ["RedisKey", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void set(RedisKey key, String value) {\t    if(key != null) {\t    \tJedis jedis = null;\t    \ttry{\t    \t\tjedis = getResource(key.builder.node);\t    \t\tif(jedis == null) {\t    \t\t\tlogger.error(\"getResource.null: node=\"+key.builder.node);\t    \t\t\treturn;\t    \t\t}\t\t\t\tString keyName = key.name();\t\t\t\tjedis.set(keyName, value);\t    \t\tif(key.builder.expireTime > 0) {\t    \t\t\tjedis.expire(keyName, key.builder.expireTime);\t    \t\t}\t\t\t}catch(Exception e){\t\t\t\tlogger.error(\"set.Exception:\", e);\t\t\t}finally {\t\t\t\tif (jedis != null) {\t\t\t\t\tjedis.close();\t\t\t\t}\t\t\t}\t    }\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XRedis.java", "stars": "2", "class": {"name": "XRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": ["RedisKey"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String get(RedisKey key) {\t\tif (key != null) {\t\t\tJedis jedis = null;\t\t\ttry {\t\t\t\tjedis = getResource(key.builder.node);\t\t\t\tif (jedis == null) {\t\t\t\t\tlogger.error(\"getResource.null: node=\" + key.builder.node);\t\t\t\t\treturn null;\t\t\t\t}\t\t\t\treturn jedis.get(key.name());\t\t\t} catch (Exception e) {\t\t\t\tlogger.error(\"get.Exception:\", e);\t\t\t} finally {\t\t\t\tif (jedis != null) {\t\t\t\t\tjedis.close();\t\t\t\t}\t\t\t}\t\t}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XRedis.java", "stars": "2", "class": {"name": "XRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "mget", "params": ["RedisKey"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<String>", "snippet": "\tpublic static List<String> mget(final RedisKey... keys) {\t\tif (keys != null && keys.length > 0) {\t\t\tJedis jedis = null;\t\t\ttry {\t\t\t\tjedis = getResource(keys[0].builder.node);\t\t\t\tif (jedis == null) {\t\t\t\t\tlogger.error(\"getResource.null: node=\" + keys[0].builder.node);\t\t\t\t\treturn null;\t\t\t\t}\t\t\t\tString[] keyList = new String[keys.length];\t\t\t\tfor(int i=0; i < keys.length; i++) {\t\t\t\t\tkeyList[i] = keys[i].name();\t\t\t\t}\t\t\t\treturn jedis.mget(keyList);\t\t\t} catch (Exception e) {\t\t\t\tlogger.error(\"mget.Exception:\", e);\t\t\t} finally {\t\t\t\tif (jedis != null) {\t\t\t\t\tjedis.close();\t\t\t\t}\t\t\t}\t\t\treturn null;\t\t}\t\treturn Collections.emptyList();\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XRedis.java", "stars": "2", "class": {"name": "XRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "mset", "params": ["Map<RedisKey,String>"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean mset(final Map<RedisKey, String> data) {\t\tif (data != null && data.size() > 0) {\t\t\tMap<String, JSONArray> keyGroup = new HashMap<String, JSONArray>();\t\t\tMap<String, Map<String, Integer>> keyExpires = new HashMap<String, Map<String, Integer>>(); \t\t\tJSONArray keysvalues = null;\t\t\tString keyName = null;\t\t\tfor(RedisKey key : data.keySet()) {\t\t\t\tif(!keyGroup.containsKey(key.builder.node)) {\t\t\t\t\tkeyGroup.put(key.builder.node, new JSONArray());\t\t\t\t}\t\t\t\tkeyName = key.name();\t\t\t\tkeysvalues = keyGroup.get(key.builder.node);\t\t\t\tkeysvalues.add(keyName);\t\t\t\tkeysvalues.add(data.get(key));\t\t\t\t\t\t\t\tif(!keyExpires.containsKey(key.builder.node)) {\t\t\t\t\tkeyExpires.put(key.builder.node, new HashMap<String, Integer>());\t\t\t\t}\t\t\t\tkeyExpires.get(key.builder.node).put(keyName, key.builder.expireTime);\t\t\t}\t\t\tfor(String node : keyGroup.keySet()) {\t\t\t\tif(!nodeMset(node, keyExpires.get(node), keyGroup.get(node).toArray(new String[0]))) {\t\t\t\t\treturn false;\t\t\t\t}\t\t\t}\t\t\treturn true;\t\t}\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XRedis.java", "stars": "2", "class": {"name": "XRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "nodeMset", "params": ["String", "Map<String,Integer>", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "\tprivate static boolean nodeMset(String node, Map<String, Integer> expireTimes, String... keysvalues) {\t\tJedis jedis = null;\t\ttry {\t\t\tjedis = getResource(node);\t\t\tif (jedis == null) {\t\t\t\tlogger.error(\"getResource.null: node=\" + node);\t\t\t\treturn false;\t\t\t}\t\t\tjedis.mset(keysvalues);\t\t\tint expireTime = 0;\t\t\tfor (String key : expireTimes.keySet()) {\t\t\t\texpireTime = expireTimes.get(key);\t\t\t\tif(expireTime > 0) {\t\t\t\t\tjedis.expire(key, expireTime);\t\t\t\t}\t\t\t}\t\t\treturn true;\t\t} catch (Exception e) {\t\t\tlogger.error(\"nodeDel.Exception:\", e);\t\t} finally {\t\t\tif (jedis != null) {\t\t\t\tjedis.close();\t\t\t}\t\t}\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XRedis.java", "stars": "2", "class": {"name": "XRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setnx", "params": ["RedisKey", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Long", "snippet": "\tpublic static Long setnx(final RedisKey key, String value) {\t\tif (key != null) {\t\t\tJedis jedis = null;\t\t\ttry {\t\t\t\tjedis = getResource(key.builder.node);\t\t\t\tif (jedis == null) {\t\t\t\t\tlogger.error(\"getResource.null: node=\" + key.builder.node);\t\t\t\t\treturn null;\t\t\t\t}\t\t\t\treturn jedis.setnx(key.name(), value);\t\t\t} catch (Exception e) {\t\t\t\tlogger.error(\"setnx.Exception:\", e);\t\t\t} finally {\t\t\t\tif (jedis != null) {\t\t\t\t\tjedis.close();\t\t\t\t}\t\t\t}\t\t}\t\treturn 0L;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XRedis.java", "stars": "2", "class": {"name": "XRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "del", "params": ["RedisKey"], "throws": null, "modifiers": ["public", "static"], "return_type": "Long", "snippet": "\tpublic static Long del(final RedisKey... keys) {\t\tif (keys != null && keys.length > 0) {\t\t\tMap<String, List<String>> keyGroup = new HashMap<String, List<String>>();\t\t\tRedisKey key = null;\t\t\tfor(int i=0; i<keys.length; i++) {\t\t\t\tkey = keys[i];\t\t\t\tif(!keyGroup.containsKey(key.builder.node)) {\t\t\t\t\tkeyGroup.put(key.builder.node, new ArrayList<String>());\t\t\t\t}\t\t\t\tkeyGroup.get(key.builder.node).add(key.name());\t\t\t}\t\t\tfor(String node : keyGroup.keySet()) {\t\t\t\tnodeDel(node, keyGroup.get(node).toArray(new String[0]));\t\t\t}\t\t}\t\treturn 0L;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XRedis.java", "stars": "2", "class": {"name": "XRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "nodeDel", "params": ["String", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "Long", "snippet": "\tprivate static Long nodeDel(String node, String... keys) {\t\tJedis jedis = null;\t\ttry {\t\t\tjedis = getResource(node);\t\t\tif (jedis == null) {\t\t\t\tlogger.error(\"getResource.null: node=\" + node);\t\t\t\treturn null;\t\t\t}\t\t\treturn jedis.del(keys);\t\t} catch (Exception e) {\t\t\tlogger.error(\"nodeDel.Exception:\", e);\t\t} finally {\t\t\tif (jedis != null) {\t\t\t\tjedis.close();\t\t\t}\t\t}\t\treturn 0L;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XRedis.java", "stars": "2", "class": {"name": "XRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "del", "params": ["RedisKey"], "throws": null, "modifiers": ["public", "static"], "return_type": "Long", "snippet": "\tpublic static Long del(RedisKey key) {\t\tif (key != null) {\t\t\tJedis jedis = null;\t\t\ttry {\t\t\t\tjedis = getResource(key.builder.node);\t\t\t\tif (jedis == null) {\t\t\t\t\tlogger.error(\"getResource.null: node=\" + key.builder.node);\t\t\t\t\treturn null;\t\t\t\t}\t\t\t\treturn jedis.del(key.name());\t\t\t} catch (Exception e) {\t\t\t\tlogger.error(\"del.Exception:\", e);\t\t\t} finally {\t\t\t\tif (jedis != null) {\t\t\t\t\tjedis.close();\t\t\t\t}\t\t\t}\t\t}\t\treturn 0L;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XRedis.java", "stars": "2", "class": {"name": "XRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hdel", "params": ["RedisKey", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Long", "snippet": "\tpublic static Long hdel(final RedisKey key, final String... fields) {\t\tif (key != null) {\t\t\tJedis jedis = null;\t\t\ttry {\t\t\t\tjedis = getResource(key.builder.node);\t\t\t\tif (jedis == null) {\t\t\t\t\tlogger.error(\"getResource.null: node=\" + key.builder.node);\t\t\t\t\treturn null;\t\t\t\t}\t\t\t\treturn jedis.hdel(key.name(), fields);\t\t\t} catch (Exception e) {\t\t\t\tlogger.error(\"hdel.Exception:\", e);\t\t\t} finally {\t\t\t\tif (jedis != null) {\t\t\t\t\tjedis.close();\t\t\t\t}\t\t\t}\t\t}\t\treturn 0L;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XRedis.java", "stars": "2", "class": {"name": "XRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "incr", "params": ["RedisKey"], "throws": null, "modifiers": ["public", "static"], "return_type": "Long", "snippet": "\tpublic static Long incr(final RedisKey key) {\t\tif (key != null) {\t\t\tJedis jedis = null;\t\t\ttry {\t\t\t\tjedis = getResource(key.builder.node);\t\t\t\tif (jedis == null) {\t\t\t\t\tlogger.error(\"getResource.null: node=\" + key.builder.node);\t\t\t\t\treturn null;\t\t\t\t}\t\t\t\tString keyName = key.name();\t\t\t\tLong result = jedis.incr(keyName);\t\t\t\tif(key.builder.expireTime > 0) {\t\t\t\t\tjedis.expire(keyName, key.builder.expireTime);\t\t\t\t}\t\t\t\treturn result;\t\t\t} catch (Exception e) {\t\t\t\tlogger.error(\"incr.Exception:\", e);\t\t\t} finally {\t\t\t\tif (jedis != null) {\t\t\t\t\tjedis.close();\t\t\t\t}\t\t\t}\t\t}\t\treturn 0L;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XRedis.java", "stars": "2", "class": {"name": "XRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "incrBy", "params": ["RedisKey", "long"], "throws": null, "modifiers": ["public", "static"], "return_type": "Long", "snippet": "\tpublic static Long incrBy(final RedisKey key, long value) {\t\tif (key != null) {\t\t\tJedis jedis = null;\t\t\ttry {\t\t\t\tjedis = getResource(key.builder.node);\t\t\t\tif (jedis == null) {\t\t\t\t\tlogger.error(\"getResource.null: node=\" + key.builder.node);\t\t\t\t\treturn null;\t\t\t\t}\t\t\t\tString keyName = key.name();\t\t\t\tLong result = jedis.incrBy(keyName, value);\t\t\t\tif(key.builder.expireTime > 0) {\t\t\t\t\tjedis.expire(keyName, key.builder.expireTime);\t\t\t\t}\t\t\t\treturn result;\t\t\t} catch (Exception e) {\t\t\t\tlogger.error(\"incr.Exception:\", e);\t\t\t} finally {\t\t\t\tif (jedis != null) {\t\t\t\t\tjedis.close();\t\t\t\t}\t\t\t}\t\t}\t\treturn 0L;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XRedis.java", "stars": "2", "class": {"name": "XRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "exists", "params": ["RedisKey"], "throws": null, "modifiers": ["public", "static"], "return_type": "Boolean", "snippet": "\tpublic static Boolean exists(RedisKey key) {\t\tif (key != null) {\t\t\tJedis jedis = null;\t\t\ttry {\t\t\t\tjedis = getResource(key.builder.node);\t\t\t\tif (jedis == null) {\t\t\t\t\tlogger.error(\"getResource.null: node=\" + key.builder.node);\t\t\t\t\treturn null;\t\t\t\t}\t\t\t\treturn jedis.exists(key.name());\t\t\t} catch (Exception e) {\t\t\t\tlogger.error(\"exists.Exception:\", e);\t\t\t} finally {\t\t\t\tif (jedis != null) {\t\t\t\t\tjedis.close();\t\t\t\t}\t\t\t}\t\t}\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XRedis.java", "stars": "2", "class": {"name": "XRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hexists", "params": ["RedisKey", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean hexists(RedisKey key, final String field) {\t\tif (key != null) {\t\t\tJedis jedis = null;\t\t\ttry {\t\t\t\tjedis = getResource(key.builder.node);\t\t\t\tif (jedis == null) {\t\t\t\t\tlogger.error(\"getResource.null: node=\" + key.builder.node);\t\t\t\t\treturn false;\t\t\t\t}\t\t\t\treturn jedis.hexists(key.name(), field);\t\t\t} catch (Exception e) {\t\t\t\tlogger.error(\"hexists.Exception:\", e);\t\t\t} finally {\t\t\t\tif (jedis != null) {\t\t\t\t\tjedis.close();\t\t\t\t}\t\t\t}\t\t}\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XRedis.java", "stars": "2", "class": {"name": "XRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hget", "params": ["RedisKey", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String hget(RedisKey key, final String field) {\t\tif (key != null) {\t\t\tJedis jedis = null;\t\t\ttry {\t\t\t\tjedis = getResource(key.builder.node);\t\t\t\tif (jedis == null) {\t\t\t\t\tlogger.error(\"getResource.null: node=\" + key.builder.node);\t\t\t\t\treturn null;\t\t\t\t}\t\t\t\treturn jedis.hget(key.name(), field);\t\t\t} catch (Exception e) {\t\t\t\tlogger.error(\"hget.Exception:\", e);\t\t\t} finally {\t\t\t\tif (jedis != null) {\t\t\t\t\tjedis.close();\t\t\t\t}\t\t\t}\t\t}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XRedis.java", "stars": "2", "class": {"name": "XRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hgetAll", "params": ["RedisKey"], "throws": null, "modifiers": ["public", "static"], "return_type": "Map<String,String>", "snippet": "\tpublic static Map<String, String> hgetAll(RedisKey key) {\t\tif (key != null) {\t\t\tJedis jedis = null;\t\t\ttry {\t\t\t\tjedis = getResource(key.builder.node);\t\t\t\tif (jedis == null) {\t\t\t\t\tlogger.error(\"getResource.null: node=\" + key.builder.node);\t\t\t\t\treturn null;\t\t\t\t}\t\t\t\treturn jedis.hgetAll(key.name());\t\t\t} catch (Exception e) {\t\t\t\tlogger.error(\"hget.Exception:\", e);\t\t\t} finally {\t\t\t\tif (jedis != null) {\t\t\t\t\tjedis.close();\t\t\t\t}\t\t\t}\t\t}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XRedis.java", "stars": "2", "class": {"name": "XRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hset", "params": ["RedisKey", "String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Long", "snippet": "\tpublic static Long hset(final RedisKey key, final String field, final String value) {\t\tif (key != null) {\t\t\tJedis jedis = null;\t\t\ttry {\t\t\t\tjedis = getResource(key.builder.node);\t\t\t\tif (jedis == null) {\t\t\t\t\tlogger.error(\"getResource.null: node=\" + key.builder.node);\t\t\t\t\treturn null;\t\t\t\t}\t\t\t\tString keyName = key.name();\t\t\t\tLong result = jedis.hset(keyName, field, value);\t\t\t\tif(key.builder.expireTime > 0) {\t\t\t\t\tjedis.expire(keyName, key.builder.expireTime);\t\t\t\t}\t\t\t\treturn result;\t\t\t} catch (Exception e) {\t\t\t\tlogger.error(\"hset.Exception:\", e);\t\t\t} finally {\t\t\t\tif (jedis != null) {\t\t\t\t\tjedis.close();\t\t\t\t}\t\t\t}\t\t}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XRedis.java", "stars": "2", "class": {"name": "XRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hmset", "params": ["RedisKey", "Map<String,String>"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String hmset(RedisKey key, final Map<String, String> hash) {\t\tif (key != null) {\t\t\tJedis jedis = null;\t\t\ttry {\t\t\t\tjedis = getResource(key.builder.node);\t\t\t\tif (jedis == null) {\t\t\t\t\tlogger.error(\"getResource.null: node=\" + key.builder.node);\t\t\t\t\treturn null;\t\t\t\t}\t\t\t\tString keyName = key.name();\t\t\t\tString result = jedis.hmset(keyName, hash);\t\t\t\tif(key.builder.expireTime > 0) {\t\t\t\t\tjedis.expire(keyName, key.builder.expireTime);\t\t\t\t}\t\t\t\treturn result;\t\t\t} catch (Exception e) {\t\t\t\tlogger.error(\"hmset.Exception:\", e);\t\t\t} finally {\t\t\t\tif (jedis != null) {\t\t\t\t\tjedis.close();\t\t\t\t}\t\t\t}\t\t}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XRedis.java", "stars": "2", "class": {"name": "XRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hmget", "params": ["RedisKey", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Map<String,String>", "snippet": "\tpublic static Map<String, String> hmget(RedisKey key, final String... fields) {\t\tif (key != null) {\t\t\tMap<String, String> result = new HashMap<>();\t\t\tif (fields.length == 0){\t\t\t\treturn result;\t\t\t}\t\t\tJedis jedis = null;\t\t\ttry {\t\t\t\tjedis = getResource(key.builder.node);\t\t\t\tif (jedis == null) {\t\t\t\t\tlogger.error(\"getResource.null: node=\" + key.builder.node);\t\t\t\t\treturn null;\t\t\t\t}\t\t\t\tList<String> values = jedis.hmget(key.name(), fields);\t\t\t\tfor (int i = 0; i < fields.length; i++) {\t\t\t\t\tresult.put(fields[i], values.get(i));\t\t\t\t}\t\t\t\treturn result;\t\t\t} catch (Exception e) {\t\t\t\tlogger.error(\"hmget.Exception:\", e);\t\t\t} finally {\t\t\t\tif (jedis != null) {\t\t\t\t\tjedis.close();\t\t\t\t}\t\t\t}\t\t}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XRedis.java", "stars": "2", "class": {"name": "XRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sadd", "params": ["RedisKey", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Long", "snippet": "\tpublic static Long sadd(RedisKey key, final String... members) {\t\tif (key != null) {\t\t\tJedis jedis = null;\t\t\ttry {\t\t\t\tjedis = getResource(key.builder.node);\t\t\t\tif (jedis == null) {\t\t\t\t\tlogger.error(\"getResource.null: node=\" + key.builder.node);\t\t\t\t\treturn null;\t\t\t\t}\t\t\t\tString keyName = key.name();\t\t\t\tLong result = jedis.sadd(keyName, members);\t\t\t\tif(key.builder.expireTime > 0) {\t\t\t\t\tjedis.expire(keyName, key.builder.expireTime);\t\t\t\t}\t\t\t\treturn result;\t\t\t} catch (Exception e) {\t\t\t\tlogger.error(\"sadd.Exception:\", e);\t\t\t} finally {\t\t\t\tif (jedis != null) {\t\t\t\t\tjedis.close();\t\t\t\t}\t\t\t}\t\t}\t\treturn 0L;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XRedis.java", "stars": "2", "class": {"name": "XRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "smembers", "params": ["RedisKey"], "throws": null, "modifiers": ["public", "static"], "return_type": "Set<String>", "snippet": "\tpublic static Set<String> smembers(final RedisKey key) {\t\tif (key != null) {\t\t\tJedis jedis = null;\t\t\ttry {\t\t\t\tjedis = getResource(key.builder.node);\t\t\t\tif (jedis == null) {\t\t\t\t\tlogger.error(\"getResource.null: node=\" + key.builder.node);\t\t\t\t\treturn null;\t\t\t\t}\t\t\t\treturn jedis.smembers(key.name());\t\t\t} catch (Exception e) {\t\t\t\tlogger.error(\"smembers.Exception:\", e);\t\t\t} finally {\t\t\t\tif (jedis != null) {\t\t\t\t\tjedis.close();\t\t\t\t}\t\t\t}\t\t}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XRedis.java", "stars": "2", "class": {"name": "XRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "srem", "params": ["RedisKey", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Long", "snippet": "\tpublic static Long srem(final RedisKey key, final String... members) {\t\tif (key != null) {\t\t\tJedis jedis = null;\t\t\ttry {\t\t\t\tjedis = getResource(key.builder.node);\t\t\t\tif (jedis == null) {\t\t\t\t\tlogger.error(\"getResource.null: node=\" + key.builder.node);\t\t\t\t\treturn null;\t\t\t\t}\t\t\t\treturn jedis.srem(key.name(), members);\t\t\t} catch (Exception e) {\t\t\t\tlogger.error(\"srem.Exception:\", e);\t\t\t} finally {\t\t\t\tif (jedis != null) {\t\t\t\t\tjedis.close();\t\t\t\t}\t\t\t}\t\t}\t\treturn 0L;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XRedis.java", "stars": "2", "class": {"name": "XRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "publish", "params": ["RedisKey", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Long", "snippet": "\tpublic static Long publish(final RedisKey channel, String message) {\t\tif (channel != null) {\t\t\tJedis jedis = null;\t\t\ttry {\t\t\t\tjedis = getResource(channel.builder.node);\t\t\t\tif (jedis == null) {\t\t\t\t\tlogger.error(\"getResource.null: node=\" + channel.builder.node);\t\t\t\t\treturn null;\t\t\t\t}\t\t\t\treturn jedis.publish(channel.name(), message);\t\t\t} catch (Exception e) {\t\t\t\tlogger.error(\"publish.Exception:\", e);\t\t\t} finally {\t\t\t\tif (jedis != null) {\t\t\t\t\tjedis.close();\t\t\t\t}\t\t\t}\t\t}\t\treturn 0L;\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XRedis.java", "stars": "2", "class": {"name": "XRedis", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "append", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "RedisKey", "snippet": "\t\tpublic RedisKey append(Object tag) {\t\t\tif(tag != null) {\t\t\t\tthis.tags.add(tag);\t\t\t}\t\t\treturn this;\t\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XRedis.java", "stars": "2", "class": {"name": "RedisKey", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "reset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "RedisKey", "snippet": "\t\tpublic RedisKey reset() {\t\t\tthis.tags.clear();\t\t\treturn this;\t\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XRedis.java", "stars": "2", "class": {"name": "RedisKey", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "append", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "RedisKey", "snippet": "\t\tpublic RedisKey append(Object[] tags) {\t\t\tif(tags != null) {\t\t\t\tfor(int i=0; i<tags.length; i++) {\t\t\t\t\tthis.tags.add(tags[i]);\t\t\t\t}\t\t\t}\t\t\treturn this;\t\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XRedis.java", "stars": "2", "class": {"name": "RedisKey", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "name", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\t\tpublic String name() {\t\t\tif(this.tags.size() > 0) {\t\t\t\tStringBuilder sb = new StringBuilder();\t\t\t\tsb.append(builder.prefix);\t\t\t\tfor(int i = 0; i < tags.size(); i++) {\t\t\t\t\tsb.append(\":\");\t\t\t\t\tsb.append(tags.get(i));\t\t\t\t}\t\t\t\tthis.tags.clear();\t\t\t\tthis.name = sb.toString();\t\t\t}\t\t\treturn this.name;\t\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XRedis.java", "stars": "2", "class": {"name": "RedisKey", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "build", "params": [], "throws": null, "modifiers": ["public"], "return_type": "RedisKey", "snippet": "\t\tpublic RedisKey build() {\t\t\treturn new RedisKey(this);\t\t}", "url": "https://raw.githubusercontent.com/xhigher/xtomcat-http-server/master/src/main/java/com/cheercent/xtomcat/httpserver/base/XRedis.java", "stars": "2", "class": {"name": "RedisKeyBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "v", "params": ["String", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void v(String message, Object... args) {    TREE_OF_SOULS.v(message, args);  }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Timber", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "v", "params": ["Throwable", "String", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void v(Throwable t, String message, Object... args) {    TREE_OF_SOULS.v(t, message, args);  }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Timber", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "v", "params": ["Throwable"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void v(Throwable t) {    TREE_OF_SOULS.v(t);  }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Timber", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "d", "params": ["String", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void d(String message, Object... args) {    TREE_OF_SOULS.d(message, args);  }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Timber", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "d", "params": ["Throwable", "String", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void d(Throwable t, String message, Object... args) {    TREE_OF_SOULS.d(t, message, args);  }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Timber", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "d", "params": ["Throwable"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void d(Throwable t) {    TREE_OF_SOULS.d(t);  }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Timber", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "i", "params": ["String", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void i(String message, Object... args) {    TREE_OF_SOULS.i(message, args);  }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Timber", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "i", "params": ["Throwable", "String", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void i(Throwable t, String message, Object... args) {    TREE_OF_SOULS.i(t, message, args);  }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Timber", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "i", "params": ["Throwable"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void i(Throwable t) {    TREE_OF_SOULS.i(t);  }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Timber", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "w", "params": ["String", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void w(String message, Object... args) {    TREE_OF_SOULS.w(message, args);  }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Timber", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "w", "params": ["Throwable", "String", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void w(Throwable t, String message, Object... args) {    TREE_OF_SOULS.w(t, message, args);  }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Timber", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "w", "params": ["Throwable"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void w(Throwable t) {    TREE_OF_SOULS.w(t);  }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Timber", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "e", "params": ["String", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void e(String message, Object... args) {    TREE_OF_SOULS.e(message, args);  }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Timber", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "e", "params": ["Throwable", "String", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void e(Throwable t, String message, Object... args) {    TREE_OF_SOULS.e(t, message, args);  }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Timber", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "e", "params": ["Throwable"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void e(Throwable t) {    TREE_OF_SOULS.e(t);  }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Timber", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "wtf", "params": ["String", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void wtf(String message, Object... args) {    TREE_OF_SOULS.wtf(message, args);  }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Timber", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "wtf", "params": ["Throwable", "String", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void wtf(Throwable t, String message, Object... args) {    TREE_OF_SOULS.wtf(t, message, args);  }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Timber", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "wtf", "params": ["Throwable"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void wtf(Throwable t) {    TREE_OF_SOULS.wtf(t);  }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Timber", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "log", "params": ["int", "String", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void log(int priority, String message, Object... args) {    TREE_OF_SOULS.log(priority, message, args);  }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Timber", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "log", "params": ["int", "Throwable", "String", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void log(int priority, Throwable t, String message, Object... args) {    TREE_OF_SOULS.log(priority, t, message, args);  }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Timber", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "log", "params": ["int", "Throwable"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void log(int priority, Throwable t) {    TREE_OF_SOULS.log(priority, t);  }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Timber", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "asTree", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Tree", "snippet": "  public static Tree asTree() {    return TREE_OF_SOULS;  }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Timber", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "tag", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Tree", "snippet": "  public static Tree tag(String tag) {    Tree[] forest = forestAsArray;    for (Tree tree : forest) {      tree.explicitTag.set(tag);    }    return TREE_OF_SOULS;  }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Timber", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "plant", "params": ["Tree"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void plant(Tree tree) {    if (tree == null) {      throw new NullPointerException(\"tree == null\");    }    if (tree == TREE_OF_SOULS) {      throw new IllegalArgumentException(\"Cannot plant Timber into itself.\");    }    synchronized (FOREST) {      FOREST.add(tree);      forestAsArray = FOREST.toArray(new Tree[FOREST.size()]);    }  }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Timber", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "plant", "params": ["Tree"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void plant(Tree... trees) {    if (trees == null) {      throw new NullPointerException(\"trees == null\");    }    for (Tree tree : trees) {      if (tree == null) {        throw new NullPointerException(\"trees contains null\");      }      if (tree == TREE_OF_SOULS) {        throw new IllegalArgumentException(\"Cannot plant Timber into itself.\");      }    }    synchronized (FOREST) {      Collections.addAll(FOREST, trees);      forestAsArray = FOREST.toArray(new Tree[FOREST.size()]);    }  }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Timber", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "uproot", "params": ["Tree"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void uproot(Tree tree) {    synchronized (FOREST) {      if (!FOREST.remove(tree)) {        throw new IllegalArgumentException(\"Cannot uproot tree which is not planted: \" + tree);      }      forestAsArray = FOREST.toArray(new Tree[FOREST.size()]);    }  }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Timber", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "uprootAll", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void uprootAll() {    synchronized (FOREST) {      FOREST.clear();      forestAsArray = TREE_ARRAY_EMPTY;    }  }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Timber", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "forest", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "List<Tree>", "snippet": "  public static List<Tree> forest() {    synchronized (FOREST) {      return unmodifiableList(new ArrayList<>(FOREST));    }  }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Timber", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "treeCount", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "  public static int treeCount() {    synchronized (FOREST) {      return FOREST.size();    }  }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Timber", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getTag", "params": [], "throws": null, "modifiers": [], "return_type": "String", "snippet": "    String getTag() {      String tag = explicitTag.get();      if (tag != null) {        explicitTag.remove();      }      return tag;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Tree", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "v", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void v(String message, Object... args) {      prepareLog(Log.VERBOSE, null, message, args);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Tree", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "v", "params": ["Throwable", "String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void v(Throwable t, String message, Object... args) {      prepareLog(Log.VERBOSE, t, message, args);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Tree", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "v", "params": ["Throwable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void v(Throwable t) {      prepareLog(Log.VERBOSE, t, null);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Tree", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "d", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void d(String message, Object... args) {      prepareLog(Log.DEBUG, null, message, args);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Tree", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "d", "params": ["Throwable", "String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void d(Throwable t, String message, Object... args) {      prepareLog(Log.DEBUG, t, message, args);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Tree", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "d", "params": ["Throwable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void d(Throwable t) {      prepareLog(Log.DEBUG, t, null);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Tree", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "i", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void i(String message, Object... args) {      prepareLog(Log.INFO, null, message, args);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Tree", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "i", "params": ["Throwable", "String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void i(Throwable t, String message, Object... args) {      prepareLog(Log.INFO, t, message, args);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Tree", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "i", "params": ["Throwable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void i(Throwable t) {      prepareLog(Log.INFO, t, null);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Tree", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "w", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void w(String message, Object... args) {      prepareLog(Log.WARN, null, message, args);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Tree", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "w", "params": ["Throwable", "String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void w(Throwable t, String message, Object... args) {      prepareLog(Log.WARN, t, message, args);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Tree", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "w", "params": ["Throwable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void w(Throwable t) {      prepareLog(Log.WARN, t, null);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Tree", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "e", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void e(String message, Object... args) {      prepareLog(Log.ERROR, null, message, args);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Tree", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "e", "params": ["Throwable", "String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void e(Throwable t, String message, Object... args) {      prepareLog(Log.ERROR, t, message, args);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Tree", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "e", "params": ["Throwable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void e(Throwable t) {      prepareLog(Log.ERROR, t, null);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Tree", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "wtf", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void wtf(String message, Object... args) {      prepareLog(Log.ASSERT, null, message, args);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Tree", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "wtf", "params": ["Throwable", "String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void wtf(Throwable t, String message, Object... args) {      prepareLog(Log.ASSERT, t, message, args);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Tree", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "wtf", "params": ["Throwable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void wtf(Throwable t) {      prepareLog(Log.ASSERT, t, null);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Tree", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "log", "params": ["int", "String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void log(int priority, String message, Object... args) {      prepareLog(priority, null, message, args);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Tree", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "log", "params": ["int", "Throwable", "String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void log(int priority, Throwable t, String message, Object... args) {      prepareLog(priority, t, message, args);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Tree", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "log", "params": ["int", "Throwable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void log(int priority, Throwable t) {      prepareLog(priority, t, null);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Tree", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "isLoggable", "params": ["int"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean isLoggable(int priority) {      return true;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Tree", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "isLoggable", "params": ["String", "int"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean isLoggable(String tag, int priority) {      //noinspection deprecation      return isLoggable(priority);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Tree", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "prepareLog", "params": ["int", "Throwable", "String", "Object"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void prepareLog(int priority, Throwable t, String message, Object... args) {      // Consume tag even when message is not loggable so that next message is correctly tagged.      String tag = getTag();      if (!isLoggable(tag, priority)) {        return;      }      if (message != null && message.length() == 0) {        message = null;      }      if (message == null) {        if (t == null) {          return; // Swallow message if it's null and there's no throwable.        }        message = getStackTraceString(t);      } else {        if (args != null && args.length > 0) {          message = formatMessage(message, args);        }        if (t != null) {          message += \"\\n\" + getStackTraceString(t);        }      }      log(priority, tag, message, t);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Tree", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "formatMessage", "params": ["String", "Object"], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "    protected String formatMessage(String message, Object[] args) {      return String.format(message, args);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Tree", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "getStackTraceString", "params": ["Throwable"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String getStackTraceString(Throwable t) {      // Don't replace this with Log.getStackTraceString() - it hides      // UnknownHostException, which is not what we want.      StringWriter sw = new StringWriter(256);      PrintWriter pw = new PrintWriter(sw, false);      t.printStackTrace(pw);      pw.flush();      return sw.toString();    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Tree", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "log", "params": ["int", "String", "String", "Throwable"], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void log(int priority, String tag, String message, Throwable t);  }  /** A {", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "Tree", "extends": null, "implements": null, "modifiers": ["public", "static", "abstract"]}}, {"method_name": "createStackElementTag", "params": ["StackTraceElement"], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "    protected String createStackElementTag(StackTraceElement element) {      String tag = element.getClassName();      Matcher m = ANONYMOUS_CLASS.matcher(tag);      if (m.find()) {        tag = m.replaceAll(\"\");      }      tag = tag.substring(tag.lastIndexOf('.') + 1);      // Tag length limit was removed in API 24.      if (tag.length() <= MAX_TAG_LENGTH || Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {        return tag;      }      return tag.substring(0, MAX_TAG_LENGTH);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "DebugTree", "extends": "Tree", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getTag", "params": [], "throws": null, "modifiers": ["final"], "return_type": "String", "snippet": "    @Override final String getTag() {      String tag = super.getTag();      if (tag != null) {        return tag;      }      // DO NOT switch this to Thread.getCurrentThread().getStackTrace(). The test will pass      // because Robolectric runs them on the JVM but on Android the elements are different.      StackTraceElement[] stackTrace = new Throwable().getStackTrace();      if (stackTrace.length <= CALL_STACK_INDEX) {        throw new IllegalStateException(            \"Synthetic stacktrace didn't have enough elements: are you using proguard?\");      }      return createStackElementTag(stackTrace[CALL_STACK_INDEX]);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "DebugTree", "extends": "Tree", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "log", "params": ["int", "String", "String", "Throwable"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    @Override protected void log(int priority, String tag, String message, Throwable t) {      if (message.length() < MAX_LOG_LENGTH) {        if (priority == Log.ASSERT) {          Log.wtf(tag, message);        } else {          Log.println(priority, tag, message);        }        return;      }      // Split by line, then ensure each line can fit into Log's maximum length.      for (int i = 0, length = message.length(); i < length; i++) {        int newline = message.indexOf('\\n', i);        newline = newline != -1 ? newline : length;        do {          int end = Math.min(newline, i + MAX_LOG_LENGTH);          String part = message.substring(i, end);          if (priority == Log.ASSERT) {            Log.wtf(tag, part);          } else {            Log.println(priority, tag, part);          }          i = end;        } while (i < newline);      }    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/util/Timber.java", "stars": "1", "class": {"name": "DebugTree", "extends": "Tree", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getIpAddr", "params": ["HttpServletRequest"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getIpAddr(HttpServletRequest request) {        if (request == null) {            return UNKNOWN;        }        String ip = request.getHeader(X_REAL_IP);        if (ip == null || ip.length() == 0 || UNKNOWN.equalsIgnoreCase(ip)) {            ip = request.getHeader(X_FORWARDED_FOR);        }        if (ip == null || ip.length() == 0 || UNKNOWN.equalsIgnoreCase(ip)) {            ip = request.getHeader(PROXY_CLIENT_IP);        }        if (ip == null || ip.length() == 0 || UNKNOWN.equalsIgnoreCase(ip)) {            ip = request.getHeader(WL_PROXY_CLIENT_IP);        }        if (ip == null || ip.length() == 0 || UNKNOWN.equalsIgnoreCase(ip)) {            ip = request.getRemoteAddr();        }        return ip;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/util/RequestIpUtil.java", "stars": "7", "class": {"name": "RequestIpUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDatabaseId", "params": ["DataSource"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getDatabaseId(DataSource dataSource) {    return properties.getProperty(\"name\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/multidb/DummyDatabaseIdProvider.java", "stars": "15", "class": {"name": "DummyDatabaseIdProvider", "extends": null, "implements": ["DatabaseIdProvider"], "modifiers": ["public"]}}, {"method_name": "setProperties", "params": ["Properties"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setProperties(Properties p) {    this.properties = p;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/multidb/DummyDatabaseIdProvider.java", "stars": "15", "class": {"name": "DummyDatabaseIdProvider", "extends": null, "implements": ["DatabaseIdProvider"], "modifiers": ["public"]}}, {"method_name": "newInstance", "params": ["Show"], "throws": null, "modifiers": ["public", "static"], "return_type": "ShowDetailAboutFragment", "snippet": "    public static ShowDetailAboutFragment newInstance(Show show) {        Bundle b = new Bundle();        sShow = show;        ShowDetailAboutFragment showDetailFragment = new ShowDetailAboutFragment();        showDetailFragment.setArguments(b);        return showDetailFragment;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/ShowDetailAboutFragment.java", "stars": "4", "class": {"name": "ShowDetailAboutFragment", "extends": "BaseDetailFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/ShowDetailAboutFragment.java", "stars": "4", "class": {"name": "ShowDetailAboutFragment", "extends": "BaseDetailFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        mRoot = inflater.inflate(R.layout.fragment_detail_about, container, false);        ButterKnife.bind(this, mRoot);        if (VersionUtils.isJellyBean() && container != null) {            mRoot.setMinimumHeight(container.getMinimumHeight());        }        if(sShow == null)            return mRoot;        mTitle.setText(sShow.title);        if (!sShow.rating.equals(\"-1\")) {            Double rating = Double.parseDouble(sShow.rating);            mRating.setProgress(rating.intValue());            mRating.setContentDescription(\"Rating: \" + rating.intValue() + \" out of 10\");            mRating.setVisibility(View.VISIBLE);        } else {            mRating.setVisibility(View.GONE);        }        StringBuilder metaDataStr = new StringBuilder();        metaDataStr.append(sShow.year);        if (sShow.status != Show.Status.UNKNOWN) {            metaDataStr.append(\" \u2022 \");            if (sShow.status == Show.Status.CONTINUING) {                metaDataStr.append(getString(R.string.continuing));            } else {                metaDataStr.append(getString(R.string.ended));            }        }        if (!TextUtils.isEmpty(sShow.genre)) {            metaDataStr.append(\" \u2022 \");            metaDataStr.append(sShow.genre);        }        mMeta.setText(metaDataStr.toString());        if (!TextUtils.isEmpty(sShow.synopsis)) {            mSynopsis.setText(sShow.synopsis);            mSynopsis.post(new Runnable() {                @Override                public void run() {                    boolean ellipsized = false;                    Layout layout = mSynopsis.getLayout();                    if (layout == null) return;                    int lines = layout.getLineCount();                    if (lines > 0) {                        int ellipsisCount = layout.getEllipsisCount(lines - 1);                        if (ellipsisCount > 0) {                            ellipsized = true;                        }                    }                    mInfoButtons.setVisibility(ellipsized ? View.VISIBLE : View.GONE);                }            });        } else {            mInfoButtons.setVisibility(View.GONE);        }        mOpenMagnet.setVisibility(View.GONE);        return mRoot;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/ShowDetailAboutFragment.java", "stars": "4", "class": {"name": "ShowDetailAboutFragment", "extends": "BaseDetailFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "openReadMore", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void openReadMore(View v) {        if (getFragmentManager().findFragmentByTag(\"overlay_fragment\") != null)            return;        SynopsisDialogFragment synopsisDialogFragment = new SynopsisDialogFragment();        Bundle b = new Bundle();        b.putString(\"text\", sShow.synopsis);        synopsisDialogFragment.setArguments(b);        synopsisDialogFragment.show(getFragmentManager(), \"overlay_fragment\");    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/ShowDetailAboutFragment.java", "stars": "4", "class": {"name": "ShowDetailAboutFragment", "extends": "BaseDetailFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCon", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Connection", "snippet": "\tpublic Connection getCon() {\t\tConnection con = null;\t\ttry {\t\t\t// \ucee4\ub125\uc158 \ud480\uc744 \uad00\ub9ac\ud558\ub294 DataSource\uc5d0\uc11c \uaebc\ub0b4\uc628\ub2e4.\t\t\tcon = ds.getConnection();\t\t} catch(Exception e) {\t\t\te.printStackTrace();\t\t}\t\treturn con;\t}", "url": "https://raw.githubusercontent.com/increpas-cls2/clsProj/branch/clsProj/src/com/increpas/www/DB/WebDBCP.java", "stars": "2", "class": {"name": "WebDBCP", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSTMT", "params": ["Connection"], "throws": null, "modifiers": ["public"], "return_type": "Statement", "snippet": "\tpublic Statement getSTMT(Connection con) {\t\tStatement stmt = null;\t\ttry {//\t\t\tstmt = con.createStatement();\t\t\tstmt = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);\t\t} catch(Exception e) {\t\t\te.printStackTrace();\t\t}\t\treturn stmt;\t}", "url": "https://raw.githubusercontent.com/increpas-cls2/clsProj/branch/clsProj/src/com/increpas/www/DB/WebDBCP.java", "stars": "2", "class": {"name": "WebDBCP", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPSTMT", "params": ["Connection", "String"], "throws": null, "modifiers": ["public"], "return_type": "PreparedStatement", "snippet": "\tpublic PreparedStatement getPSTMT(Connection con, String sql) {\t\tPreparedStatement pstmt = null;\t\ttry {//\t\t\tpstmt = con.prepareStatement(sql);\t\t\tpstmt = con.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);\t\t} catch(Exception e) {\t\t\te.printStackTrace();\t\t}\t\treturn pstmt;\t}", "url": "https://raw.githubusercontent.com/increpas-cls2/clsProj/branch/clsProj/src/com/increpas/www/DB/WebDBCP.java", "stars": "2", "class": {"name": "WebDBCP", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "close", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void close(Object o) {\t\ttry {\t\t\tif(o instanceof Connection) {\t\t\t\t((Connection) o).close();\t\t\t} else if(o instanceof Statement) {\t\t\t\t((Statement) o).close();\t\t\t} else if(o instanceof PreparedStatement) {\t\t\t\t((PreparedStatement) o).close();\t\t\t} else if(o instanceof ResultSet) {\t\t\t\t((ResultSet) o).close();\t\t\t}\t\t} catch(Exception e) {\t\t\te.printStackTrace();\t\t}\t}", "url": "https://raw.githubusercontent.com/increpas-cls2/clsProj/branch/clsProj/src/com/increpas/www/DB/WebDBCP.java", "stars": "2", "class": {"name": "WebDBCP", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getShader", "params": ["GLSurfaceView"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getShader(GLSurfaceView mGlSurfaceView) {        float color_ratio[] = {0.21f, 0.71f, 0.07f};        String color_ratioString[] = new String[3];        color_ratioString[0] = \"color_ratio[0] = \" + color_ratio[0] + \";\\n\";        color_ratioString[1] = \"color_ratio[1] = \" + color_ratio[1] + \";\\n\";        color_ratioString[2] = \"color_ratio[2] = \" + color_ratio[2] + \";\\n\";        float tint_color[] = {Color.red(mTint) / 255f,                Color.green(mTint) / 255f, Color.blue(mTint) / 255f};        String tintString[] = new String[3];        tintString[0] = \"tint[0] = \" + tint_color[0] + \";\\n\";        tintString[1] = \"tint[1] = \" + tint_color[1] + \";\\n\";        tintString[2] = \"tint[2] = \" + tint_color[2] + \";\\n\";        String shader = \"#extension GL_OES_EGL_image_external : require\\n\"                + \"precision mediump float;\\n\"                + \"uniform samplerExternalOES sTexture;\\n\"                + \" vec3 tint;\\n\"                + \" vec3 color_ratio;\\n\"                + \"varying vec2 vTextureCoord;\\n\"                + \"void main() {\\n\"                // Parameters that were created above                + color_ratioString[0]                + color_ratioString[1]                + color_ratioString[2]                + tintString[0]                + tintString[1]                + tintString[2]                + \"  vec4 color = texture2D(sTexture, vTextureCoord);\\n\"                + \"  float avg_color = dot(color_ratio, color.rgb);\\n\"                + \"  vec3 new_color = min(0.8 * avg_color + 0.2 * tint, 1.0);\\n\"                + \"  gl_FragColor = vec4(new_color.rgb, color.a);\\n\" + \"}\\n\";        return shader;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/effect/TintEffect.java", "stars": "2", "class": {"name": "TintEffect", "extends": null, "implements": ["ShaderInterface"], "modifiers": ["public"]}}, {"method_name": "of", "params": ["MethodHandles", "String", "Class<V>", "Class<?>", "Type<T>"], "throws": null, "modifiers": ["public", "static"], "return_type": "V", "snippet": "    public static <T, V extends Value<T>> V of(MethodHandles.Lookup lookup, String name, Class<V> klass, Class<?> declaringClass, Type<T> type) {        throw new UnsupportedOperationException(\"unimplemented\");    }", "url": "https://raw.githubusercontent.com/sstewartgallus/jsystemf/master/src/com/sstewartgallus/runtime/ValueBootstraps.java", "stars": "5", "class": {"name": "ValueBootstraps", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "convertAccount", "params": ["android"], "throws": null, "modifiers": ["private", "static"], "return_type": "Account", "snippet": "    private static Account convertAccount(android.accounts.Account account) {        return new Account(account.name, account.type);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/StandardAccountManager.java", "stars": "74", "class": {"name": "StandardAccountManager", "extends": "AccountManager", "implements": null, "modifiers": []}}, {"method_name": "convertAccountArray", "params": ["android"], "throws": null, "modifiers": ["private", "static"], "return_type": "Account", "snippet": "    private static Account[] convertAccountArray(android.accounts.Account[] accounts) {        Account[] array = new Account[accounts.length];        for (int i = 0; i < accounts.length; i++) {            array[i] = convertAccount(accounts[i]);        }        return array;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/StandardAccountManager.java", "stars": "74", "class": {"name": "StandardAccountManager", "extends": "AccountManager", "implements": null, "modifiers": []}}, {"method_name": "convertAccount", "params": ["Account"], "throws": null, "modifiers": ["private", "static"], "return_type": "android", "snippet": "    private static android.accounts.Account convertAccount(Account account) {        return new android.accounts.Account(account.name, account.type);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/StandardAccountManager.java", "stars": "74", "class": {"name": "StandardAccountManager", "extends": "AccountManager", "implements": null, "modifiers": []}}, {"method_name": "convertFuture", "params": ["android"], "throws": null, "modifiers": ["private", "static"], "return_type": "AccountManagerFuture<V>", "snippet": "    private static <V> AccountManagerFuture<V> convertFuture(            final android.accounts.AccountManagerFuture<V> future) {        return new AccountManagerFuture<V>() {            /**             * {@inheritDoc}             */            public boolean cancel(boolean mayInterruptIfRunning) {                return future.cancel(mayInterruptIfRunning);            }            /**             * {@inheritDoc}             */            public V getResult(long timeout, TimeUnit unit) throws OperationCanceledException,                    IOException, AuthenticatorException {                try {                    return future.getResult(timeout, unit);                } catch (android.accounts.AuthenticatorException e) {                    throw new AuthenticatorException(e);                } catch (android.accounts.OperationCanceledException e) {                    throw new OperationCanceledException(e);                }            }            /**             * {@inheritDoc}             */            public boolean isCancelled() {                return future.isCancelled();            }            /**             * {@inheritDoc}             */            public boolean isDone() {                return future.isDone();            }            /**             * {@inheritDoc}             */            public V getResult() throws OperationCanceledException, IOException,                    AuthenticatorException {                try {                    return future.getResult();                } catch (android.accounts.AuthenticatorException e) {                    throw new AuthenticatorException(e);                } catch (android.accounts.OperationCanceledException e) {                    throw new OperationCanceledException(e);                }            }        };    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/StandardAccountManager.java", "stars": "74", "class": {"name": "StandardAccountManager", "extends": "AccountManager", "implements": null, "modifiers": []}}, {"method_name": "convertAccountArrayFuture", "params": ["android"], "throws": null, "modifiers": ["private", "static"], "return_type": "AccountManagerFuture<Account>", "snippet": "    private static AccountManagerFuture<Account[]> convertAccountArrayFuture(            final android.accounts.AccountManagerFuture<android.accounts.Account[]> future) {        return new AccountManagerFuture<Account[]>() {            /**             * {@inheritDoc}             */            public boolean cancel(boolean mayInterruptIfRunning) {                return future.cancel(mayInterruptIfRunning);            }            /**             * {@inheritDoc}             */            public Account[] getResult(long timeout, TimeUnit unit)                    throws OperationCanceledException, IOException, AuthenticatorException {                try {                    return convertAccountArray(future.getResult(timeout, unit));                } catch (android.accounts.AuthenticatorException e) {                    throw new AuthenticatorException(e);                } catch (android.accounts.OperationCanceledException e) {                    throw new OperationCanceledException(e);                }            }            /**             * {@inheritDoc}             */            public boolean isCancelled() {                return future.isCancelled();            }            /**             * {@inheritDoc}             */            public boolean isDone() {                return future.isDone();            }            /**             * {@inheritDoc}             */            public Account[] getResult() throws OperationCanceledException, IOException,                    AuthenticatorException {                try {                    return convertAccountArray(future.getResult());                } catch (android.accounts.AuthenticatorException e) {                    throw new AuthenticatorException(e);                } catch (android.accounts.OperationCanceledException e) {                    throw new OperationCanceledException(e);                }            }        };    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/StandardAccountManager.java", "stars": "74", "class": {"name": "StandardAccountManager", "extends": "AccountManager", "implements": null, "modifiers": []}}, {"method_name": "convertCallback", "params": ["AccountManagerCallback<V>"], "throws": null, "modifiers": ["private", "static"], "return_type": "android", "snippet": "    private static <V> android.accounts.AccountManagerCallback<V> convertCallback(            final AccountManagerCallback<V> callback) {        if (callback != null) {            return new android.accounts.AccountManagerCallback<V>() {                public void run(android.accounts.AccountManagerFuture<V> future) {                    callback.run(convertFuture(future));                }            };        } else {            return null;        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/StandardAccountManager.java", "stars": "74", "class": {"name": "StandardAccountManager", "extends": "AccountManager", "implements": null, "modifiers": []}}, {"method_name": "convertAccountArrayCallback", "params": ["AccountManagerCallback<Account>"], "throws": null, "modifiers": ["private", "static"], "return_type": "android", "snippet": "    private static android.accounts.AccountManagerCallback<android.accounts.Account[]> convertAccountArrayCallback(            final AccountManagerCallback<Account[]> callback) {        if (callback != null) {            return new android.accounts.AccountManagerCallback<android.accounts.Account[]>() {                public void run(                        android.accounts.AccountManagerFuture<android.accounts.Account[]> future) {                    callback.run(convertAccountArrayFuture(future));                }            };        } else {            return null;        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/StandardAccountManager.java", "stars": "74", "class": {"name": "StandardAccountManager", "extends": "AccountManager", "implements": null, "modifiers": []}}, {"method_name": "getAccountsByType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Account", "snippet": "    public Account[] getAccountsByType(String type) {        return convertAccountArray(mManager.getAccountsByType(type));    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/StandardAccountManager.java", "stars": "74", "class": {"name": "StandardAccountManager", "extends": "AccountManager", "implements": null, "modifiers": []}}, {"method_name": "getAccountsByTypeAndFeatures", "params": ["String", "String", "AccountManagerCallback<Account>", "Handler"], "throws": null, "modifiers": ["public"], "return_type": "AccountManagerFuture<Account>", "snippet": "    public AccountManagerFuture<Account[]> getAccountsByTypeAndFeatures(final String type,            String[] features, AccountManagerCallback<Account[]> callback, Handler handler) {        if (features == null || features.length == 0) {            // AccountManagerService does not invoke the callback as it should            return new Future2Task<Account[]>(new Callable<Account[]>() {                public Account[] call() {                    return getAccountsByType(type);                }            }, handler, callback).start();        } else {            return convertAccountArrayFuture(mManager.getAccountsByTypeAndFeatures(type, features,                    convertAccountArrayCallback(callback), handler));        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/StandardAccountManager.java", "stars": "74", "class": {"name": "StandardAccountManager", "extends": "AccountManager", "implements": null, "modifiers": []}}, {"method_name": "getAuthToken", "params": ["Account", "String", "boolean", "AccountManagerCallback<Bundle>", "Handler"], "throws": null, "modifiers": ["public"], "return_type": "AccountManagerFuture<Bundle>", "snippet": "    public AccountManagerFuture<Bundle> getAuthToken(Account account, String authTokenType,            boolean notifyAuthFailure, AccountManagerCallback<Bundle> callback, Handler handler) {        return convertFuture(mManager.getAuthToken(convertAccount(account), authTokenType,                notifyAuthFailure, convertCallback(callback), handler));    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/StandardAccountManager.java", "stars": "74", "class": {"name": "StandardAccountManager", "extends": "AccountManager", "implements": null, "modifiers": []}}, {"method_name": "addAccount", "params": ["String", "String", "String", "Bundle", "Void", "AccountManagerCallback<Bundle>", "Handler"], "throws": null, "modifiers": ["public"], "return_type": "AccountManagerFuture<Bundle>", "snippet": "    public AccountManagerFuture<Bundle> addAccount(String accountType, String authTokenType,            String[] requiredFeatures, Bundle addAccountOptions, Void activity,            AccountManagerCallback<Bundle> callback, Handler handler) {        if (activity != null) {            throw new RuntimeException(\"Activity parameter is not supported\");        }        return convertFuture(mManager.addAccount(accountType, authTokenType, requiredFeatures,                addAccountOptions, null, convertCallback(callback), handler));    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/StandardAccountManager.java", "stars": "74", "class": {"name": "StandardAccountManager", "extends": "AccountManager", "implements": null, "modifiers": []}}, {"method_name": "addAccountExplicitly", "params": ["Account", "String", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean addAccountExplicitly(Account account, String password, Bundle extras) {        return mManager.addAccountExplicitly(convertAccount(account), password, extras);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/StandardAccountManager.java", "stars": "74", "class": {"name": "StandardAccountManager", "extends": "AccountManager", "implements": null, "modifiers": []}}, {"method_name": "removeAccount", "params": ["Account", "AccountManagerCallback<Boolean>", "Handler"], "throws": null, "modifiers": ["public"], "return_type": "AccountManagerFuture<Boolean>", "snippet": "    public AccountManagerFuture<Boolean> removeAccount(Account account,            AccountManagerCallback<Boolean> callback, Handler handler) {        return convertFuture(mManager.removeAccount(convertAccount(account),                convertCallback(callback), handler));    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/StandardAccountManager.java", "stars": "74", "class": {"name": "StandardAccountManager", "extends": "AccountManager", "implements": null, "modifiers": []}}, {"method_name": "invalidateAuthToken", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void invalidateAuthToken(String accountType, String authToken) {        mManager.invalidateAuthToken(accountType, authToken);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/accounts/StandardAccountManager.java", "stars": "74", "class": {"name": "StandardAccountManager", "extends": "AccountManager", "implements": null, "modifiers": []}}, {"method_name": "getNumeroUno", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Double", "snippet": "    public Double getNumeroUno() {        return numeroUno;    }", "url": "https://raw.githubusercontent.com/asuescun/Matematicas-Locas/master/numeros.java", "stars": "2", "class": {"name": "numeros", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setNumeroUno", "params": ["Double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setNumeroUno(Double numeroUno) {        this.numeroUno = numeroUno;    }", "url": "https://raw.githubusercontent.com/asuescun/Matematicas-Locas/master/numeros.java", "stars": "2", "class": {"name": "numeros", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNumeroDos", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Double", "snippet": "    public Double getNumeroDos() {        return numeroDos;    }", "url": "https://raw.githubusercontent.com/asuescun/Matematicas-Locas/master/numeros.java", "stars": "2", "class": {"name": "numeros", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setNumeroDos", "params": ["Double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setNumeroDos(Double numeroDos) {        this.numeroDos = numeroDos;    }", "url": "https://raw.githubusercontent.com/asuescun/Matematicas-Locas/master/numeros.java", "stars": "2", "class": {"name": "numeros", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"numeros{\" + \"numeroUno=\" + numeroUno + \", numeroDos=\" + numeroDos + '}';    }", "url": "https://raw.githubusercontent.com/asuescun/Matematicas-Locas/master/numeros.java", "stars": "2", "class": {"name": "numeros", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "evaluate", "params": ["Record", "Object"], "throws": null, "modifiers": ["public"], "return_type": "Record", "snippet": "    public Record evaluate(Record record, Object... paras) {        int columnIndex;        int startIndex;        int length;        try {            if (paras.length != 3) {                throw new RuntimeException(\"dx_substr paras must be 3\");            }            columnIndex = (Integer) paras[0];            startIndex = Integer.valueOf((String) paras[1]);            length = Integer.valueOf((String) paras[2]);        } catch (Exception e) {            throw DataXException.asDataXException(TransformerErrorCode.TRANSFORMER_ILLEGAL_PARAMETER, \"paras:\" + Arrays.asList(paras).toString() + \" => \" + e.getMessage());        }        Column column = record.getColumn(columnIndex);        try {            String oriValue = column.asString();            //\u5982\u679c\u5b57\u6bb5\u4e3a\u7a7a\uff0c\u8df3\u8fc7subStr\u5904\u7406            if (oriValue == null) {                return record;            }            String newValue;            if (startIndex > oriValue.length()) {                throw new RuntimeException(String.format(\"dx_substr startIndex(%s) out of range(%s)\", startIndex, oriValue.length()));            }            if (startIndex + length >= oriValue.length()) {                newValue = oriValue.substring(startIndex, oriValue.length());            } else {                newValue = oriValue.substring(startIndex, startIndex + length);            }            record.setColumn(columnIndex, new StringColumn(newValue));        } catch (Exception e) {            throw DataXException.asDataXException(TransformerErrorCode.TRANSFORMER_RUN_EXCEPTION, e.getMessage(), e);        }        return record;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/transformer/SubstrTransformer.java", "stars": "23", "class": {"name": "SubstrTransformer", "extends": "Transformer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getIncompleteTriggerInstances", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Collection<TriggerInstance>", "snippet": "  public Collection<TriggerInstance> getIncompleteTriggerInstances() {    final Collection<TriggerInstance> unfinished = new ArrayList<>();    try {      final Collection<TriggerInstance> triggerInsts = this.dbOperator          .query(SELECT_ALL_PENDING_EXECUTIONS,              new TriggerInstanceHandler(SORT_MODE.SORT_ON_START_TIME_ASC));      // select incomplete trigger instances      for (final TriggerInstance triggerInst : triggerInsts) {        if (!Status.isDone(triggerInst.getStatus()) || (triggerInst.getStatus() == Status.SUCCEEDED            && triggerInst.getFlowExecId() == Constants.UNASSIGNED_EXEC_ID)) {          unfinished.add(triggerInst);        }      }      // backfilling flow trigger for unfinished trigger instances      // dedup flow config id with a set to avoid downloading/parsing same flow file multiple times      final Set<FlowConfigID> flowConfigIDSet = unfinished.stream()          .map(triggerInstance -> new FlowConfigID(triggerInstance.getProject().getId(),              triggerInstance.getProject().getVersion(), triggerInstance.getFlowId(),              triggerInstance.getFlowVersion())).collect(Collectors.toSet());      final Map<FlowConfigID, FlowTrigger> flowTriggers = new HashMap<>();      for (final FlowConfigID flowConfigID : flowConfigIDSet) {        final File tempDir = Files.createTempDir();        try {          final File flowFile = this.projectLoader              .getUploadedFlowFile(flowConfigID.getProjectId(), flowConfigID.getProjectVersion(),                  flowConfigID.getFlowId() + \".flow\", flowConfigID.getFlowVersion(), tempDir);          if (flowFile != null) {            final FlowTrigger flowTrigger = FlowLoaderUtils.getFlowTriggerFromYamlFile(flowFile);            if (flowTrigger != null) {              flowTriggers.put(flowConfigID, flowTrigger);            }          } else {            logger.error(\"Unable to find flow file for \" + flowConfigID);          }        } catch (final Exception ex) {          logger.error(\"error in getting flow file\", ex);        } finally {          FlowLoaderUtils.cleanUpDir(tempDir);        }      }      for (final TriggerInstance triggerInst : unfinished) {        triggerInst.setFlowTrigger(flowTriggers.get(new FlowConfigID(triggerInst.getProject()            .getId(), triggerInst.getProject().getVersion(), triggerInst.getFlowId(),            triggerInst.getFlowVersion())));      }    } catch (final SQLException ex) {      handleSQLException(ex);    }    return unfinished;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/database/JdbcFlowTriggerInstanceLoaderImpl.java", "stars": "18", "class": {"name": "JdbcFlowTriggerInstanceLoaderImpl", "extends": null, "implements": ["FlowTriggerInstanceLoader"], "modifiers": ["public"]}}, {"method_name": "handleSQLException", "params": ["SQLException"], "throws": ["DependencyException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void handleSQLException(final SQLException ex)      throws DependencyException {    final String error = \"exception when accessing db!\";    logger.error(error, ex);    throw new DependencyException(error, ex);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/database/JdbcFlowTriggerInstanceLoaderImpl.java", "stars": "18", "class": {"name": "JdbcFlowTriggerInstanceLoaderImpl", "extends": null, "implements": ["FlowTriggerInstanceLoader"], "modifiers": ["public"]}}, {"method_name": "updateAssociatedFlowExecId", "params": ["TriggerInstance"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void updateAssociatedFlowExecId(final TriggerInstance triggerInst) {    final SQLTransaction<Integer> insertTrigger = transOperator -> {      for (final DependencyInstance depInst : triggerInst.getDepInstances()) {        transOperator            .update(UPDATE_DEPENDENCY_FLOW_EXEC_ID, triggerInst.getFlowExecId(),                triggerInst.getId(), depInst.getDepName());      }      return null;    };    executeTransaction(insertTrigger);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/database/JdbcFlowTriggerInstanceLoaderImpl.java", "stars": "18", "class": {"name": "JdbcFlowTriggerInstanceLoaderImpl", "extends": null, "implements": ["FlowTriggerInstanceLoader"], "modifiers": ["public"]}}, {"method_name": "executeUpdate", "params": ["String", "Object"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void executeUpdate(final String query, final Object... params) {    try {      this.dbOperator.update(query, params);    } catch (final SQLException ex) {      handleSQLException(ex);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/database/JdbcFlowTriggerInstanceLoaderImpl.java", "stars": "18", "class": {"name": "JdbcFlowTriggerInstanceLoaderImpl", "extends": null, "implements": ["FlowTriggerInstanceLoader"], "modifiers": ["public"]}}, {"method_name": "executeTransaction", "params": ["SQLTransaction<Integer>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void executeTransaction(final SQLTransaction<Integer> tran) {    try {      this.dbOperator.transaction(tran);    } catch (final SQLException ex) {      handleSQLException(ex);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/database/JdbcFlowTriggerInstanceLoaderImpl.java", "stars": "18", "class": {"name": "JdbcFlowTriggerInstanceLoaderImpl", "extends": null, "implements": ["FlowTriggerInstanceLoader"], "modifiers": ["public"]}}, {"method_name": "uploadTriggerInstance", "params": ["TriggerInstance"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void uploadTriggerInstance(final TriggerInstance triggerInst) {    final SQLTransaction<Integer> insertTrigger = transOperator -> {      for (final DependencyInstance depInst : triggerInst.getDepInstances()) {        transOperator            .update(INSERT_DEPENDENCY, triggerInst.getId(), depInst.getDepName(),                depInst.getStartTime(),                depInst.getEndTime(),                depInst.getStatus().ordinal(),                depInst.getCancellationCause().ordinal(),                triggerInst.getProject().getId(),                triggerInst.getProject().getVersion(),                triggerInst.getFlowId(),                triggerInst.getFlowVersion(),                triggerInst.getFlowExecId());      }      return null;    };    executeTransaction(insertTrigger);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/database/JdbcFlowTriggerInstanceLoaderImpl.java", "stars": "18", "class": {"name": "JdbcFlowTriggerInstanceLoaderImpl", "extends": null, "implements": ["FlowTriggerInstanceLoader"], "modifiers": ["public"]}}, {"method_name": "updateDependencyExecutionStatus", "params": ["DependencyInstance"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void updateDependencyExecutionStatus(final DependencyInstance depInst) {    executeUpdate(UPDATE_DEPENDENCY_STATUS_ENDTIME_AND_CANCELLEATION_CAUSE,        depInst.getStatus().ordinal(),        depInst.getEndTime(),        depInst.getCancellationCause().ordinal(),        depInst.getTriggerInstance().getId(),        depInst.getDepName());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/database/JdbcFlowTriggerInstanceLoaderImpl.java", "stars": "18", "class": {"name": "JdbcFlowTriggerInstanceLoaderImpl", "extends": null, "implements": ["FlowTriggerInstanceLoader"], "modifiers": ["public"]}}, {"method_name": "getRecentlyFinished", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Collection<TriggerInstance>", "snippet": "  public Collection<TriggerInstance> getRecentlyFinished(final int limit) {    final String query = String.format(SELECT_RECENTLY_FINISHED, limit);    try {      return this.dbOperator          .query(query, new TriggerInstanceHandler(SORT_MODE.SORT_ON_START_TIME_ASC));    } catch (final SQLException ex) {      handleSQLException(ex);    }    return Collections.emptyList();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/database/JdbcFlowTriggerInstanceLoaderImpl.java", "stars": "18", "class": {"name": "JdbcFlowTriggerInstanceLoaderImpl", "extends": null, "implements": ["FlowTriggerInstanceLoader"], "modifiers": ["public"]}}, {"method_name": "getRunning", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Collection<TriggerInstance>", "snippet": "  public Collection<TriggerInstance> getRunning() {    try {      //todo chengren311:      // 1. add index for the execution_dependencies table to accelerate selection.      return this.dbOperator.query(SELECT_ALL_RUNNING_EXECUTIONS, new TriggerInstanceHandler          (SORT_MODE.SORT_ON_START_TIME_ASC));    } catch (final SQLException ex) {      handleSQLException(ex);    }    return Collections.emptyList();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/database/JdbcFlowTriggerInstanceLoaderImpl.java", "stars": "18", "class": {"name": "JdbcFlowTriggerInstanceLoaderImpl", "extends": null, "implements": ["FlowTriggerInstanceLoader"], "modifiers": ["public"]}}, {"method_name": "populateFlowTriggerProperties", "params": ["TriggerInstance"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void populateFlowTriggerProperties(final TriggerInstance triggerInstance) {    if (triggerInstance != null) {      final int projectId = triggerInstance.getProject().getId();      final int projectVersion = triggerInstance.getProject().getVersion();      final String flowFileName = triggerInstance.getFlowId() + \".flow\";      final int flowVersion = triggerInstance.getFlowVersion();      final File tempDir = Files.createTempDir();      try {        final File flowFile = this.projectLoader            .getUploadedFlowFile(projectId, projectVersion, flowFileName, flowVersion, tempDir);        if (flowFile != null) {          final FlowTrigger flowTrigger = FlowLoaderUtils.getFlowTriggerFromYamlFile(flowFile);          if (flowTrigger != null) {            triggerInstance.setFlowTrigger(flowTrigger);          }        } else {          logger.error(\"Unable to find flow file for \" + triggerInstance);        }      } catch (final Exception ex) {        logger.error(\"error in getting flow file\", ex);      } finally {        FlowLoaderUtils.cleanUpDir(tempDir);      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/database/JdbcFlowTriggerInstanceLoaderImpl.java", "stars": "18", "class": {"name": "JdbcFlowTriggerInstanceLoaderImpl", "extends": null, "implements": ["FlowTriggerInstanceLoader"], "modifiers": ["public"]}}, {"method_name": "getTriggerInstanceByFlowExecId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "TriggerInstance", "snippet": "  public TriggerInstance getTriggerInstanceByFlowExecId(final int flowExecId) {    if (flowExecId == Constants.FAILED_EXEC_ID || flowExecId == Constants.UNASSIGNED_EXEC_ID) {      return null;    }    TriggerInstance triggerInstance = null;    try {      final Collection<TriggerInstance> res = this.dbOperator          .query(SELECT_EXECUTIONS_BY_EXEC_ID,              new TriggerInstanceHandler(SORT_MODE.SORT_ON_START_TIME_ASC), flowExecId);      triggerInstance = !res.isEmpty() ? res.iterator().next() : null;    } catch (final SQLException ex) {      handleSQLException(ex);    }    populateFlowTriggerProperties(triggerInstance);    return triggerInstance;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/database/JdbcFlowTriggerInstanceLoaderImpl.java", "stars": "18", "class": {"name": "JdbcFlowTriggerInstanceLoaderImpl", "extends": null, "implements": ["FlowTriggerInstanceLoader"], "modifiers": ["public"]}}, {"method_name": "getTriggerInstances", "params": ["int", "String", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "Collection<TriggerInstance>", "snippet": "  public Collection<TriggerInstance> getTriggerInstances(      final int projectId, final String flowId, final int from,      final int length) {    try {      final Collection<TriggerInstance> res = this.dbOperator          .query(SELECT_RECENT_WITH_START_AND_LENGTH, new TriggerInstanceHandler(SORT_MODE                  .SORT_ON_START_TIME_DESC), projectId,              flowId, length, from);      return res;    } catch (final SQLException ex) {      handleSQLException(ex);    }    return Collections.emptyList();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/database/JdbcFlowTriggerInstanceLoaderImpl.java", "stars": "18", "class": {"name": "JdbcFlowTriggerInstanceLoaderImpl", "extends": null, "implements": ["FlowTriggerInstanceLoader"], "modifiers": ["public"]}}, {"method_name": "deleteTriggerExecutionsFinishingOlderThan", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int deleteTriggerExecutionsFinishingOlderThan(final long timestamp) {    try {      final Collection<TriggerInstance> res = this.dbOperator          .query(SELECT_EXECUTION_OLDER_THAN,              new TriggerInstanceHandler(SORT_MODE.SORT_ON_START_TIME_DESC), timestamp);      final Set<String> toBeDeleted = new HashSet<>();      for (final TriggerInstance inst : res) {        if ((inst.getStatus() == Status.CANCELLED || (inst.getStatus() == Status.SUCCEEDED && inst            .getFlowExecId() != -1)) && inst.getEndTime() <= timestamp) {          toBeDeleted.add(inst.getId());        }      }      int numDeleted = 0;      if (!toBeDeleted.isEmpty()) {        final String ids = toBeDeleted.stream().map(s -> \"'\" + s + \"'\")            .collect(Collectors.joining(\", \"));        numDeleted = this.dbOperator.update(DELETE_EXECUTIONS.replace(\"?\", ids));      }      logger.info(\"{} dependency instance record(s) deleted\", numDeleted);      return numDeleted;    } catch (final SQLException ex) {      handleSQLException(ex);      return 0;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/database/JdbcFlowTriggerInstanceLoaderImpl.java", "stars": "18", "class": {"name": "JdbcFlowTriggerInstanceLoaderImpl", "extends": null, "implements": ["FlowTriggerInstanceLoader"], "modifiers": ["public"]}}, {"method_name": "getTriggerInstanceById", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "TriggerInstance", "snippet": "  public TriggerInstance getTriggerInstanceById(final String triggerInstanceId) {    TriggerInstance triggerInstance = null;    try {      final Collection<TriggerInstance> res = this.dbOperator          .query(SELECT_EXECUTIONS_BY_INSTANCE_ID,              new TriggerInstanceHandler(SORT_MODE.SORT_ON_START_TIME_ASC),              triggerInstanceId);      triggerInstance = !res.isEmpty() ? res.iterator().next() : null;    } catch (final SQLException ex) {      handleSQLException(ex);    }    populateFlowTriggerProperties(triggerInstance);    return triggerInstance;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/database/JdbcFlowTriggerInstanceLoaderImpl.java", "stars": "18", "class": {"name": "JdbcFlowTriggerInstanceLoaderImpl", "extends": null, "implements": ["FlowTriggerInstanceLoader"], "modifiers": ["public"]}}, {"method_name": "getProjectId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getProjectId() {      return this.projectId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/database/JdbcFlowTriggerInstanceLoaderImpl.java", "stars": "18", "class": {"name": "FlowConfigID", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getProjectVersion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getProjectVersion() {      return this.projectVerison;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/database/JdbcFlowTriggerInstanceLoaderImpl.java", "stars": "18", "class": {"name": "FlowConfigID", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getFlowId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getFlowId() {      return this.flowId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/database/JdbcFlowTriggerInstanceLoaderImpl.java", "stars": "18", "class": {"name": "FlowConfigID", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean equals(final Object o) {      if (this == o) {        return true;      }      if (o == null || getClass() != o.getClass()) {        return false;      }      final FlowConfigID that = (FlowConfigID) o;      return new EqualsBuilder()          .append(this.projectId, that.projectId)          .append(this.projectVerison, that.projectVerison)          .append(this.flowVersion, that.flowVersion)          .append(this.flowId, that.flowId)          .isEquals();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/database/JdbcFlowTriggerInstanceLoaderImpl.java", "stars": "18", "class": {"name": "FlowConfigID", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int hashCode() {      return new HashCodeBuilder(17, 37)          .append(this.projectId)          .append(this.projectVerison)          .append(this.flowId)          .append(this.flowVersion)          .toHashCode();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/database/JdbcFlowTriggerInstanceLoaderImpl.java", "stars": "18", "class": {"name": "FlowConfigID", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getFlowVersion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getFlowVersion() {      return this.flowVersion;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/database/JdbcFlowTriggerInstanceLoaderImpl.java", "stars": "18", "class": {"name": "FlowConfigID", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Collection<TriggerInstance>", "snippet": "    public Collection<TriggerInstance> handle(final ResultSet rs) throws SQLException {      final Map<TriggerInstKey, List<DependencyInstance>> triggerInstMap = new HashMap<>();      while (rs.next()) {        final String triggerInstId = rs.getString(DEPENDENCY_EXECUTIONS_COLUMNS[0]);        final String depName = rs.getString(DEPENDENCY_EXECUTIONS_COLUMNS[1]);        final long startTime = rs.getLong(DEPENDENCY_EXECUTIONS_COLUMNS[2]);        final long endTime = rs.getLong(DEPENDENCY_EXECUTIONS_COLUMNS[3]);        final Status status = Status.values()[rs.getInt(DEPENDENCY_EXECUTIONS_COLUMNS[4])];        final CancellationCause cause = CancellationCause.values()[rs.getInt            (DEPENDENCY_EXECUTIONS_COLUMNS[5])];        final int projId = rs.getInt(DEPENDENCY_EXECUTIONS_COLUMNS[6]);        final int projVersion = rs.getInt(DEPENDENCY_EXECUTIONS_COLUMNS[7]);        final String flowId = rs.getString(DEPENDENCY_EXECUTIONS_COLUMNS[8]);        final int flowVersion = rs.getInt(DEPENDENCY_EXECUTIONS_COLUMNS[9]);        final Project project = JdbcFlowTriggerInstanceLoaderImpl.this.projectManager            .getProject(projId);        final int flowExecId = rs.getInt(DEPENDENCY_EXECUTIONS_COLUMNS[10]);        final TriggerInstKey key = new TriggerInstKey(triggerInstId, project.getLastModifiedUser(),            projId, projVersion, flowId, flowVersion, flowExecId, project);        List<DependencyInstance> dependencyInstanceList = triggerInstMap.get(key);        final DependencyInstance depInst = new DependencyInstance(depName, startTime, endTime,            null, status, cause);        if (dependencyInstanceList == null) {          dependencyInstanceList = new ArrayList<>();          triggerInstMap.put(key, dependencyInstanceList);        }        dependencyInstanceList.add(depInst);      }      final List<TriggerInstance> res = new ArrayList<>();      for (final Map.Entry<TriggerInstKey, List<DependencyInstance>> entry : triggerInstMap          .entrySet()) {        res.add(new TriggerInstance(entry.getKey().triggerInstId, null, entry.getKey()            .flowConfigID.flowId, entry.getKey().flowConfigID.flowVersion, entry.getKey()            .submitUser, entry.getValue(), entry.getKey().flowExecId, entry.getKey().project));      }      if (this.mode == SORT_MODE.SORT_ON_START_TIME_ASC) {        Collections.sort(res, Comparator.comparing(TriggerInstance::getStartTime));      } else if (this.mode == SORT_MODE.SORT_ON_START_TIME_DESC) {        Collections.sort(res, Comparator.comparing(TriggerInstance::getStartTime).reversed());      }      return res;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/database/JdbcFlowTriggerInstanceLoaderImpl.java", "stars": "18", "class": {"name": "TriggerInstanceHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["private"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "      public boolean equals(final Object o) {        if (this == o) {          return true;        }        if (o == null || getClass() != o.getClass()) {          return false;        }        final TriggerInstKey that = (TriggerInstKey) o;        return new EqualsBuilder()            .append(this.triggerInstId, that.triggerInstId)            .append(this.flowConfigID, that.flowConfigID)            .isEquals();      }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/database/JdbcFlowTriggerInstanceLoaderImpl.java", "stars": "18", "class": {"name": "TriggerInstKey", "extends": null, "implements": null, "modifiers": ["private"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "      public int hashCode() {        return new HashCodeBuilder(17, 37)            .append(this.triggerInstId)            .append(this.flowConfigID)            .toHashCode();      }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/database/JdbcFlowTriggerInstanceLoaderImpl.java", "stars": "18", "class": {"name": "TriggerInstKey", "extends": null, "implements": null, "modifiers": ["private"]}}, {"method_name": "load", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void load() {        super.load();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/profile/ProfileManager.java", "stars": "12", "class": {"name": "ProfileManager", "extends": "HashMapManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "unload", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void unload() {        getRegistry().clear();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/profile/ProfileManager.java", "stars": "12", "class": {"name": "ProfileManager", "extends": "HashMapManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "getUUID", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "UUID", "snippet": "    public UUID getUUID(final String name) {        if (getRegistry().containsKey(name)) {            return getRegistry().get(name);        }        try {            final Reader uuidReader = new InputStreamReader(                    new URL(String.format(NAME, name)).openStream());            final JsonObject jsonObject = new JsonParser().parse(uuidReader).getAsJsonObject();            String unfomatted = jsonObject.get(\"id\").getAsString();            String formatted = \"\";            for (final int length : new int[] { 8, 4, 4, 4, 12 }) {                formatted += \"-\";                for (int i = 0; i < length; ++i) {                    formatted += unfomatted.charAt(0);                    unfomatted = unfomatted.substring(1);                }            }            formatted = formatted.substring(1);            final UUID uuid = UUID.fromString(formatted);            getRegistry().put(name, uuid);            return uuid;        } catch (Exception exception) {            exception.printStackTrace();            return null;        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/profile/ProfileManager.java", "stars": "12", "class": {"name": "ProfileManager", "extends": "HashMapManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": ["UUID"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName(final UUID uuid) {        try {            if (getRegistry().containsValue(uuid)) {                return getRegistry().entrySet().stream().filter(entry -> uuid == entry.getValue())                        .findFirst().get().getKey();            }        } catch (Exception ex) {        }        try {            final Reader uuidReader = new InputStreamReader(                    new URL(String.format(PROFILE,                            uuid.toString().replaceAll(\"-\", \"\"))).openStream());            final JsonObject jsonObject = new JsonParser().parse(uuidReader).getAsJsonObject();            final String name = jsonObject.get(\"name\").getAsString();            getRegistry().put(name, uuid);            return name;        } catch (Exception exception) {            exception.printStackTrace();            return \"\";        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/profile/ProfileManager.java", "stars": "12", "class": {"name": "ProfileManager", "extends": "HashMapManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "onMenuItemClick", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onMenuItemClick (android.view.MenuItem p0)\t{\t\treturn n_onMenuItemClick (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v7/widget/Toolbar_OnMenuItemClickListenerImplementor.java", "stars": "2", "class": {"name": "Toolbar_OnMenuItemClickListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onMenuItemClick", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onMenuItemClick (android.view.MenuItem p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v7/widget/Toolbar_OnMenuItemClickListenerImplementor.java", "stars": "2", "class": {"name": "Toolbar_OnMenuItemClickListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v7/widget/Toolbar_OnMenuItemClickListenerImplementor.java", "stars": "2", "class": {"name": "Toolbar_OnMenuItemClickListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/v7/widget/Toolbar_OnMenuItemClickListenerImplementor.java", "stars": "2", "class": {"name": "Toolbar_OnMenuItemClickListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "updateDrawState", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void updateDrawState (android.text.TextPaint p0)\t{\t\tn_updateDrawState (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormattedStringExtensions_TextDecorationSpan.java", "stars": "2", "class": {"name": "FormattedStringExtensions_TextDecorationSpan", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_updateDrawState", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_updateDrawState (android.text.TextPaint p0);\tpublic void updateMeasureState (android.text.TextPaint p0)\t{\t\tn_updateMeasureState (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormattedStringExtensions_TextDecorationSpan.java", "stars": "2", "class": {"name": "FormattedStringExtensions_TextDecorationSpan", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "updateMeasureState", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void updateMeasureState (android.text.TextPaint p0)\t{\t\tn_updateMeasureState (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormattedStringExtensions_TextDecorationSpan.java", "stars": "2", "class": {"name": "FormattedStringExtensions_TextDecorationSpan", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_updateMeasureState", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_updateMeasureState (android.text.TextPaint p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormattedStringExtensions_TextDecorationSpan.java", "stars": "2", "class": {"name": "FormattedStringExtensions_TextDecorationSpan", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormattedStringExtensions_TextDecorationSpan.java", "stars": "2", "class": {"name": "FormattedStringExtensions_TextDecorationSpan", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormattedStringExtensions_TextDecorationSpan.java", "stars": "2", "class": {"name": "FormattedStringExtensions_TextDecorationSpan", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "apply", "params": ["Project"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid apply(Project project) {\t\tproject.getPlugins().withType(JavaBasePlugin.class, (java) -> {\t\t\tproject.getPlugins().apply(TestFailuresPlugin.class);\t\t\tconfigureSpringJavaFormat(project);\t\t\tproject.setProperty(\"sourceCompatibility\", \"1.8\");\t\t\tconfigureJavaCompileConventions(project);\t\t\tconfigureJavadocConventions(project);\t\t\tconfigureTestConventions(project);\t\t\tconfigureJarManifestConventions(project);\t\t});\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/JavaConventions.java", "stars": "47572", "class": {"name": "JavaConventions", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "configureJarManifestConventions", "params": ["Project"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void configureJarManifestConventions(Project project) {\t\tproject.getTasks().withType(Jar.class, (jar) -> project.afterEvaluate((evaluated) -> {\t\t\tjar.metaInf((metaInf) -> copyLegalFiles(project, metaInf));\t\t\tjar.manifest((manifest) -> {\t\t\t\tMap<String, Object> attributes = new TreeMap<>();\t\t\t\tattributes.put(\"Automatic-Module-Name\", project.getName().replace(\"-\", \".\"));\t\t\t\tattributes.put(\"Build-Jdk-Spec\", project.property(\"sourceCompatibility\"));\t\t\t\tattributes.put(\"Built-By\", \"Spring\");\t\t\t\tattributes.put(\"Implementation-Title\", project.getDescription());\t\t\t\tattributes.put(\"Implementation-Version\", project.getVersion());\t\t\t\tmanifest.attributes(attributes);\t\t\t});\t\t}));\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/JavaConventions.java", "stars": "47572", "class": {"name": "JavaConventions", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "configureTestConventions", "params": ["Project"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void configureTestConventions(Project project) {\t\tproject.getTasks().withType(Test.class, (test) -> {\t\t\twithOptionalBuildJavaHome(project, (javaHome) -> test.setExecutable(javaHome + \"/bin/java\"));\t\t\ttest.useJUnitPlatform();\t\t\ttest.setMaxHeapSize(\"1024M\");\t\t});\t\tif (Boolean.parseBoolean(System.getenv(\"CI\"))) {\t\t\tproject.getPlugins().apply(TestRetryPlugin.class);\t\t\tproject.getTasks().withType(Test.class,\t\t\t\t\t(test) -> project.getPlugins().withType(TestRetryPlugin.class, (testRetryPlugin) -> {\t\t\t\t\t\tTestRetryTaskExtension testRetry = test.getExtensions().getByType(TestRetryTaskExtension.class);\t\t\t\t\t\ttestRetry.getFailOnPassedAfterRetry().set(true);\t\t\t\t\t\ttestRetry.getMaxRetries().set(3);\t\t\t\t\t}));\t\t}\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/JavaConventions.java", "stars": "47572", "class": {"name": "JavaConventions", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "configureJavadocConventions", "params": ["Project"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void configureJavadocConventions(Project project) {\t\tproject.getTasks().withType(Javadoc.class, (javadoc) -> {\t\t\tjavadoc.getOptions().source(\"1.8\").encoding(\"UTF-8\");\t\t\twithOptionalBuildJavaHome(project, (javaHome) -> javadoc.setExecutable(javaHome + \"/bin/javadoc\"));\t\t});\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/JavaConventions.java", "stars": "47572", "class": {"name": "JavaConventions", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "configureJavaCompileConventions", "params": ["Project"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void configureJavaCompileConventions(Project project) {\t\tproject.getTasks().withType(JavaCompile.class, (compile) -> {\t\t\tcompile.getOptions().setEncoding(\"UTF-8\");\t\t\twithOptionalBuildJavaHome(project, (javaHome) -> {\t\t\t\tcompile.getOptions().setFork(true);\t\t\t\tcompile.getOptions().getForkOptions().setJavaHome(new File(javaHome));\t\t\t\tcompile.getOptions().getForkOptions().setExecutable(javaHome + \"/bin/javac\");\t\t\t});\t\t\tList<String> args = compile.getOptions().getCompilerArgs();\t\t\tif (!args.contains(\"-parameters\")) {\t\t\t\targs.add(\"-parameters\");\t\t\t}\t\t});\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/JavaConventions.java", "stars": "47572", "class": {"name": "JavaConventions", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "withOptionalBuildJavaHome", "params": ["Project", "Consumer<String>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void withOptionalBuildJavaHome(Project project, Consumer<String> consumer) {\t\tString buildJavaHome = (String) project.findProperty(\"buildJavaHome\");\t\tif (buildJavaHome != null && !buildJavaHome.isEmpty()) {\t\t\tconsumer.accept(buildJavaHome);\t\t}\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/JavaConventions.java", "stars": "47572", "class": {"name": "JavaConventions", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "configureSpringJavaFormat", "params": ["Project"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void configureSpringJavaFormat(Project project) {\t\tproject.getPlugins().apply(SpringJavaFormatPlugin.class);\t\tproject.getTasks().withType(FormatTask.class, (formatTask) -> formatTask.setEncoding(\"UTF-8\"));\t\tproject.getPlugins().apply(CheckstylePlugin.class);\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\t\tcheckstyle.setToolVersion(\"8.29\");\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();\t\tcheckstyleDependencies\t\t\t\t.add(project.getDependencies().create(\"io.spring.javaformat:spring-javaformat-checkstyle:\" + version));\t\tcheckstyleDependencies\t\t\t\t.add(project.getDependencies().create(\"io.spring.nohttp:nohttp-checkstyle:0.0.3.RELEASE\"));\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/JavaConventions.java", "stars": "47572", "class": {"name": "JavaConventions", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "copyLegalFiles", "params": ["Project", "CopySpec"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid copyLegalFiles(Project project, CopySpec metaInf) {\t\tcopyNoticeFile(project, metaInf);\t\tcopyLicenseFile(project, metaInf);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/JavaConventions.java", "stars": "47572", "class": {"name": "JavaConventions", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "copyNoticeFile", "params": ["Project", "CopySpec"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid copyNoticeFile(Project project, CopySpec metaInf) {\t\ttry {\t\t\tInputStream notice = getClass().getClassLoader().getResourceAsStream(\"NOTICE.txt\");\t\t\tString noticeContent = FileCopyUtils.copyToString(new InputStreamReader(notice, StandardCharsets.UTF_8))\t\t\t\t\t.replace(\"${version}\", project.getVersion().toString());\t\t\tTextResourceFactory resourceFactory = project.getResources().getText();\t\t\tFile file = createLegalFile(resourceFactory.fromString(noticeContent).asFile(), \"NOTICE.txt\");\t\t\tmetaInf.from(file);\t\t}\t\tcatch (IOException ex) {\t\t\tthrow new GradleException(\"Failed to copy NOTICE.txt\", ex);\t\t}\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/JavaConventions.java", "stars": "47572", "class": {"name": "JavaConventions", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "copyLicenseFile", "params": ["Project", "CopySpec"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid copyLicenseFile(Project project, CopySpec metaInf) {\t\tURL license = getClass().getClassLoader().getResource(\"LICENSE.txt\");\t\ttry {\t\t\tTextResourceFactory resourceFactory = project.getResources().getText();\t\t\tFile file = createLegalFile(resourceFactory.fromUri(license.toURI()).asFile(), \"LICENSE.txt\");\t\t\tmetaInf.from(file);\t\t}\t\tcatch (URISyntaxException ex) {\t\t\tthrow new GradleException(\"Failed to copy LICENSE.txt\", ex);\t\t}\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/JavaConventions.java", "stars": "47572", "class": {"name": "JavaConventions", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "createLegalFile", "params": ["File", "String"], "throws": null, "modifiers": [], "return_type": "File", "snippet": "\tFile createLegalFile(File source, String filename) {\t\tFile legalFile = new File(source.getParentFile(), filename);\t\tsource.renameTo(legalFile);\t\treturn legalFile;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/buildSrc/src/main/java/org/springframework/boot/build/JavaConventions.java", "stars": "47572", "class": {"name": "JavaConventions", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "edit", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Editor", "snippet": "    public Editor edit() {        return new Editor();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/ObscuredSharedPreferences.java", "stars": "4", "class": {"name": "ObscuredSharedPreferences", "extends": null, "implements": ["SharedPreferences"], "modifiers": ["public"]}}, {"method_name": "getAll", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,?>", "snippet": "    public Map<String, ?> getAll() {        throw new UnsupportedOperationException(); // left as an exercise to the reader    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/ObscuredSharedPreferences.java", "stars": "4", "class": {"name": "ObscuredSharedPreferences", "extends": null, "implements": ["SharedPreferences"], "modifiers": ["public"]}}, {"method_name": "getBoolean", "params": ["String", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean getBoolean(String key, boolean defValue) {        final String v = delegate.getString(key, null);        return v != null ? Boolean.parseBoolean(decrypt(v)) : defValue;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/ObscuredSharedPreferences.java", "stars": "4", "class": {"name": "ObscuredSharedPreferences", "extends": null, "implements": ["SharedPreferences"], "modifiers": ["public"]}}, {"method_name": "getFloat", "params": ["String", "float"], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getFloat(String key, float defValue) {        final String v = delegate.getString(key, null);        return v != null ? Float.parseFloat(decrypt(v)) : defValue;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/ObscuredSharedPreferences.java", "stars": "4", "class": {"name": "ObscuredSharedPreferences", "extends": null, "implements": ["SharedPreferences"], "modifiers": ["public"]}}, {"method_name": "getInt", "params": ["String", "int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getInt(String key, int defValue) {        final String v = delegate.getString(key, null);        return v != null ? Integer.parseInt(decrypt(v)) : defValue;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/ObscuredSharedPreferences.java", "stars": "4", "class": {"name": "ObscuredSharedPreferences", "extends": null, "implements": ["SharedPreferences"], "modifiers": ["public"]}}, {"method_name": "getLong", "params": ["String", "long"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getLong(String key, long defValue) {        final String v = delegate.getString(key, null);        return v != null ? Long.parseLong(decrypt(v)) : defValue;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/ObscuredSharedPreferences.java", "stars": "4", "class": {"name": "ObscuredSharedPreferences", "extends": null, "implements": ["SharedPreferences"], "modifiers": ["public"]}}, {"method_name": "getString", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getString(String key, String defValue) {        final String v = delegate.getString(key, null);        return v != null ? decrypt(v) : defValue;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/ObscuredSharedPreferences.java", "stars": "4", "class": {"name": "ObscuredSharedPreferences", "extends": null, "implements": ["SharedPreferences"], "modifiers": ["public"]}}, {"method_name": "getStringSet", "params": ["String", "Set<String>"], "throws": null, "modifiers": ["public"], "return_type": "Set<String>", "snippet": "    public Set<String> getStringSet(String s, Set<String> strings) {        return delegate.getStringSet(s, strings);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/ObscuredSharedPreferences.java", "stars": "4", "class": {"name": "ObscuredSharedPreferences", "extends": null, "implements": ["SharedPreferences"], "modifiers": ["public"]}}, {"method_name": "contains", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean contains(String s) {        return delegate.contains(s);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/ObscuredSharedPreferences.java", "stars": "4", "class": {"name": "ObscuredSharedPreferences", "extends": null, "implements": ["SharedPreferences"], "modifiers": ["public"]}}, {"method_name": "registerOnSharedPreferenceChangeListener", "params": ["OnSharedPreferenceChangeListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void registerOnSharedPreferenceChangeListener(OnSharedPreferenceChangeListener onSharedPreferenceChangeListener) {        delegate.registerOnSharedPreferenceChangeListener(onSharedPreferenceChangeListener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/ObscuredSharedPreferences.java", "stars": "4", "class": {"name": "ObscuredSharedPreferences", "extends": null, "implements": ["SharedPreferences"], "modifiers": ["public"]}}, {"method_name": "unregisterOnSharedPreferenceChangeListener", "params": ["OnSharedPreferenceChangeListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void unregisterOnSharedPreferenceChangeListener(OnSharedPreferenceChangeListener onSharedPreferenceChangeListener) {        delegate.unregisterOnSharedPreferenceChangeListener(onSharedPreferenceChangeListener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/ObscuredSharedPreferences.java", "stars": "4", "class": {"name": "ObscuredSharedPreferences", "extends": null, "implements": ["SharedPreferences"], "modifiers": ["public"]}}, {"method_name": "encrypt", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String encrypt(String value) {        try {            final byte[] bytes = value != null ? value.getBytes(UTF8) : new byte[0];            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");            SecretKey key = keyFactory.generateSecret(new PBEKeySpec(SEKRIT));            Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");            pbeCipher.init(Cipher.ENCRYPT_MODE, key, new PBEParameterSpec(Settings.Secure.getString(context.getContentResolver(), Settings.Secure.ANDROID_ID).getBytes(UTF8), 20));            return new String(Base64.encode(pbeCipher.doFinal(bytes), Base64.NO_WRAP), UTF8);        } catch (Exception e) {            throw new RuntimeException(e);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/ObscuredSharedPreferences.java", "stars": "4", "class": {"name": "ObscuredSharedPreferences", "extends": null, "implements": ["SharedPreferences"], "modifiers": ["public"]}}, {"method_name": "decrypt", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String decrypt(String value) {        try {            final byte[] bytes = value != null ? Base64.decode(value, Base64.DEFAULT) : new byte[0];            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");            SecretKey key = keyFactory.generateSecret(new PBEKeySpec(SEKRIT));            Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");            pbeCipher.init(Cipher.DECRYPT_MODE, key, new PBEParameterSpec(Settings.Secure.getString(context.getContentResolver(), Settings.Secure.ANDROID_ID).getBytes(UTF8), 20));            return new String(pbeCipher.doFinal(bytes), UTF8);        } catch (Exception e) {            delegate.edit().clear().apply();            return null;        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/ObscuredSharedPreferences.java", "stars": "4", "class": {"name": "ObscuredSharedPreferences", "extends": null, "implements": ["SharedPreferences"], "modifiers": ["public"]}}, {"method_name": "putBoolean", "params": ["String", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "Editor", "snippet": "        public Editor putBoolean(String key, boolean value) {            delegate.putString(key, encrypt(Boolean.toString(value)));            return this;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/ObscuredSharedPreferences.java", "stars": "4", "class": {"name": "Editor", "extends": null, "implements": ["SharedPreferences"], "modifiers": ["public"]}}, {"method_name": "putFloat", "params": ["String", "float"], "throws": null, "modifiers": ["public"], "return_type": "Editor", "snippet": "        public Editor putFloat(String key, float value) {            delegate.putString(key, encrypt(Float.toString(value)));            return this;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/ObscuredSharedPreferences.java", "stars": "4", "class": {"name": "Editor", "extends": null, "implements": ["SharedPreferences"], "modifiers": ["public"]}}, {"method_name": "putInt", "params": ["String", "int"], "throws": null, "modifiers": ["public"], "return_type": "Editor", "snippet": "        public Editor putInt(String key, int value) {            delegate.putString(key, encrypt(Integer.toString(value)));            return this;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/ObscuredSharedPreferences.java", "stars": "4", "class": {"name": "Editor", "extends": null, "implements": ["SharedPreferences"], "modifiers": ["public"]}}, {"method_name": "putLong", "params": ["String", "long"], "throws": null, "modifiers": ["public"], "return_type": "Editor", "snippet": "        public Editor putLong(String key, long value) {            delegate.putString(key, encrypt(Long.toString(value)));            return this;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/ObscuredSharedPreferences.java", "stars": "4", "class": {"name": "Editor", "extends": null, "implements": ["SharedPreferences"], "modifiers": ["public"]}}, {"method_name": "putString", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Editor", "snippet": "        public Editor putString(String key, String value) {            delegate.putString(key, encrypt(value));            return this;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/ObscuredSharedPreferences.java", "stars": "4", "class": {"name": "Editor", "extends": null, "implements": ["SharedPreferences"], "modifiers": ["public"]}}, {"method_name": "putStringSet", "params": ["String", "Set<String>"], "throws": null, "modifiers": ["public"], "return_type": "SharedPreferences", "snippet": "        public SharedPreferences.Editor putStringSet(String s, Set<String> strings) {            delegate.putStringSet(s, strings);            return this;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/ObscuredSharedPreferences.java", "stars": "4", "class": {"name": "Editor", "extends": null, "implements": ["SharedPreferences"], "modifiers": ["public"]}}, {"method_name": "apply", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void apply() {            delegate.apply();        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/ObscuredSharedPreferences.java", "stars": "4", "class": {"name": "Editor", "extends": null, "implements": ["SharedPreferences"], "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Editor", "snippet": "        public Editor clear() {            delegate.clear();            return this;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/ObscuredSharedPreferences.java", "stars": "4", "class": {"name": "Editor", "extends": null, "implements": ["SharedPreferences"], "modifiers": ["public"]}}, {"method_name": "commit", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean commit() {            return delegate.commit();        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/ObscuredSharedPreferences.java", "stars": "4", "class": {"name": "Editor", "extends": null, "implements": ["SharedPreferences"], "modifiers": ["public"]}}, {"method_name": "remove", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Editor", "snippet": "        public Editor remove(String s) {            delegate.remove(s);            return this;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/content/ObscuredSharedPreferences.java", "stars": "4", "class": {"name": "Editor", "extends": null, "implements": ["SharedPreferences"], "modifiers": ["public"]}}, {"method_name": "invoke", "params": ["Object", "Object"], "throws": ["IllegalAccessException", "InvocationTargetException"], "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object invoke(Object target, Object[] args) throws IllegalAccessException, InvocationTargetException {    try {      return method.invoke(target, args);    } catch (IllegalAccessException e) {      if (Reflector.canControlMemberAccessible()) {        method.setAccessible(true);        return method.invoke(target, args);      } else {        throw e;      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/invoker/MethodInvoker.java", "stars": "15", "class": {"name": "MethodInvoker", "extends": null, "implements": ["Invoker"], "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Class<?>", "snippet": "  public Class<?> getType() {    return type;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/invoker/MethodInvoker.java", "stars": "15", "class": {"name": "MethodInvoker", "extends": null, "implements": ["Invoker"], "modifiers": ["public"]}}, {"method_name": "getRGBValue", "params": ["String", "String"], "throws": null, "modifiers": ["static"], "return_type": "String", "snippet": "    static String getRGBValue(String format, String value) {        String color = null;        if (format.equalsIgnoreCase(\"name\")) {            //standard color format from W3C            switch (value) {                case \"transparent\":                    color = \"00000000\";                    break;                case \"black\":                    color = \"000000ff\";                    break;                case \"silver\":                    color = \"c0c0c0ff\";                    break;                case \"gray\":                    color = \"808080ff\";                    break;                case \"white\":                    color = \"ffffffff\";                    break;                case \"maroon\":                    color = \"800000ff\";                    break;                case \"red\":                    color = \"ff0000ff\";                    break;                case \"purple\":                    color = \"800080ff\";                    break;                case \"fuchsia\":                    color = \"ff00ffff\";                    break;                case \"magenta\":                    color = \"ff00ffff \";                    break;                case \"green\":                    color = \"008000ff\";                    break;                case \"lime\":                    color = \"00ff00ff\";                    break;                case \"olive\":                    color = \"808000ff\";                    break;                case \"yellow\":                    color = \"ffff00ff\";                    break;                case \"navy\":                    color = \"000080ff\";                    break;                case \"blue\":                    color = \"0000ffff\";                    break;                case \"teal\":                    color = \"008080ff\";                    break;                case \"aqua\":                    color = \"00ffffff\";                    break;                case \"cyan\":                    color = \"00ffffff \";                    break;            }        } else if (format.equalsIgnoreCase(\"&HBBGGRR\")) {            //hex format from SSA            color = value.substring(6) +                    value.substring(4, 5) +                    value.substring(2, 3) +                    \"ff\";        } else if (format.equalsIgnoreCase(\"&HAABBGGRR\")) {            //hex format from ASS            color = value.substring(8) +                    value.substring(6, 7) +                    value.substring(4, 5) +                    value.substring(2, 3);        } else if (format.equalsIgnoreCase(\"decimalCodedBBGGRR\")) {            //normal format from SSA            color = Integer.toHexString(Integer.parseInt(value));            //any missing 0s are filled in            while (color.length() < 6) color = \"0\" + color;            //order is reversed            color = color.substring(4) + color.substring(2, 4) + color.substring(0, 2) + \"ff\";        } else if (format.equalsIgnoreCase(\"decimalCodedAABBGGRR\")) {            //normal format from ASS            color = Long.toHexString(Long.parseLong(value));            //any missing 0s are filled in            while (color.length() < 8) color = \"0\" + color;            //order is reversed            color = color.substring(6) + color.substring(4, 6) + color.substring(2, 4) + color.substring(0, 2);        }        return color;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/subs/Style.java", "stars": "4", "class": {"name": "Style", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "defaultID", "params": [], "throws": null, "modifiers": ["static"], "return_type": "String", "snippet": "    static String defaultID() {        return \"default\" + styleCounter++;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/subs/Style.java", "stars": "4", "class": {"name": "Style", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"Style{\" +                \"id='\" + iD + '\\'' +                \", font='\" + font + '\\'' +                \", fontSize='\" + fontSize + '\\'' +                \", color='\" + color + '\\'' +                \", backgroundColor='\" + backgroundColor + '\\'' +                \", textAlign='\" + textAlign + '\\'' +                \", italic=\" + italic +                \", bold=\" + bold +                \", underline=\" + underline +                '}';    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/subs/Style.java", "stars": "4", "class": {"name": "Style", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGattStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getGattStatus() {        return gattStatus;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/exception/ConnectException.java", "stars": "2", "class": {"name": "ConnectException", "extends": "BleException", "implements": null, "modifiers": ["public"]}}, {"method_name": "setGattStatus", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "ConnectException", "snippet": "    public ConnectException setGattStatus(int gattStatus) {        this.gattStatus = gattStatus;        return this;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/exception/ConnectException.java", "stars": "2", "class": {"name": "ConnectException", "extends": "BleException", "implements": null, "modifiers": ["public"]}}, {"method_name": "getBluetoothGatt", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BluetoothGatt", "snippet": "    public BluetoothGatt getBluetoothGatt() {        return bluetoothGatt;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/exception/ConnectException.java", "stars": "2", "class": {"name": "ConnectException", "extends": "BleException", "implements": null, "modifiers": ["public"]}}, {"method_name": "setBluetoothGatt", "params": ["BluetoothGatt"], "throws": null, "modifiers": ["public"], "return_type": "ConnectException", "snippet": "    public ConnectException setBluetoothGatt(BluetoothGatt bluetoothGatt) {        this.bluetoothGatt = bluetoothGatt;        return this;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/exception/ConnectException.java", "stars": "2", "class": {"name": "ConnectException", "extends": "BleException", "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"ConnectException{\" +               \"gattStatus=\" + gattStatus +               \", bluetoothGatt=\" + bluetoothGatt +               \"} \" + super.toString();    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/exception/ConnectException.java", "stars": "2", "class": {"name": "ConnectException", "extends": "BleException", "implements": null, "modifiers": ["public"]}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "Byte", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNonNullParameter(PreparedStatement ps, int i, Byte[] parameter, JdbcType jdbcType) throws SQLException {    ps.setBytes(i, ByteArrayUtils.convertToPrimitiveArray(parameter));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/ByteObjectArrayTypeHandler.java", "stars": "15", "class": {"name": "ByteObjectArrayTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Byte", "snippet": "  public Byte[] getNullableResult(ResultSet rs, String columnName) throws SQLException {    byte[] bytes = rs.getBytes(columnName);    return getBytes(bytes);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/ByteObjectArrayTypeHandler.java", "stars": "15", "class": {"name": "ByteObjectArrayTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Byte", "snippet": "  public Byte[] getNullableResult(ResultSet rs, int columnIndex) throws SQLException {    byte[] bytes = rs.getBytes(columnIndex);    return getBytes(bytes);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/ByteObjectArrayTypeHandler.java", "stars": "15", "class": {"name": "ByteObjectArrayTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Byte", "snippet": "  public Byte[] getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {    byte[] bytes = cs.getBytes(columnIndex);    return getBytes(bytes);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/ByteObjectArrayTypeHandler.java", "stars": "15", "class": {"name": "ByteObjectArrayTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getBytes", "params": ["byte"], "throws": null, "modifiers": ["private"], "return_type": "Byte", "snippet": "  private Byte[] getBytes(byte[] bytes) {    Byte[] returnValue = null;    if (bytes != null) {      returnValue = ByteArrayUtils.convertToObjectArray(bytes);    }    return returnValue;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/ByteObjectArrayTypeHandler.java", "stars": "15", "class": {"name": "ByteObjectArrayTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getId() {    return id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/bringrags/SimpleObject.java", "stars": "15", "class": {"name": "SimpleObject", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSimpleChildObjects", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<SimpleChildObject>", "snippet": "  public List<SimpleChildObject> getSimpleChildObjects() {    return simpleChildObjects;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/bringrags/SimpleObject.java", "stars": "15", "class": {"name": "SimpleObject", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onStart", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onStart() {        super.onStart();    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/core/ApiObserver.java", "stars": "1", "class": {"name": "ApiObserver", "extends": "DisposableObserver", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onNext", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onNext(T t) {    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/core/ApiObserver.java", "stars": "1", "class": {"name": "ApiObserver", "extends": "DisposableObserver", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onComplete", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onComplete() {        onFinally();    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/core/ApiObserver.java", "stars": "1", "class": {"name": "ApiObserver", "extends": "DisposableObserver", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onError", "params": ["Throwable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onError(Throwable e) {        resolveException(e);        onFinally();    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/core/ApiObserver.java", "stars": "1", "class": {"name": "ApiObserver", "extends": "DisposableObserver", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onFinally", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onFinally() {    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/core/ApiObserver.java", "stars": "1", "class": {"name": "ApiObserver", "extends": "DisposableObserver", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "resolveException", "params": ["Throwable"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveException(Throwable e) {        if (CallKit.getInstance().isDebugEnable()) {            e.printStackTrace();        }        boolean isConnected = true;        if (e instanceof ApiException) {            String msg = ((ApiException) e).getMsg();            if (msg == null || msg.isEmpty()) {                if (CallKit.getInstance().isDebugEnable()) {                    msg = String.format(Locale.CHINA, \"Unknown error\uff01Code\uff1a%d\", ((ApiException) e).getCode());                } else {                    msg = \"\";                }            }            onErrorResolved(e, msg);            isConnected = true;        } else if (e instanceof HttpException) {            HttpException httpException = (HttpException) e;            switch (httpException.code()) {                case HTTP_BAD_REQUEST:                case HTTP_FORBIDDEN:                case HTTP_NOT_FOUND:                case HTTP_INTERNAL_SERVER_ERROR:                    onErrorResolved(e, MSG_SERVER_ERROR);                    isConnected = true;                    break;                case HTTP_TOKEN_EXPIRED:                    onErrorResolved(e, MSG_TOKEN_EXPIRED);                    isConnected = true;                    break;                case HTTP_TIMEOUT:                    onErrorResolved(e, MSG_TIME_OUT);                    isConnected = false;                    break;                default:                    onErrorResolved(e, MSG_NETWORK_ERROR);                    isConnected = false;                    break;            }        } else if (e instanceof SocketTimeoutException) {            onErrorResolved(e, MSG_TIME_OUT);            isConnected = false;        } else if (e instanceof ConnectException) {            onErrorResolved(e, MSG_NETWORK_ERROR);            isConnected = false;        } else if (e instanceof UnknownHostException) {            onErrorResolved(e, MSG_NETWORK_CONNECTION_ERROR);            isConnected = false;        } else if (e instanceof SocketException) {            onErrorResolved(e, MSG_SERVER_ERROR);            isConnected = false;        }/* else if (e instanceof JsonSyntaxException) {            onErrorResolved(e, MSG_JSON_PARSE_ERROR);        } */ else if (e instanceof JSONException) {            onErrorResolved(e, MSG_JSON_PARSE_ERROR);            isConnected = true;        } else {            onErrorResolved(e, MSG_UNKNOWN_ERROR);            isConnected = true;        }        if (!isConnected) {            Timber.e(\"Network connection failed!!!\");        }    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/core/ApiObserver.java", "stars": "1", "class": {"name": "ApiObserver", "extends": "DisposableObserver", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onErrorResolved", "params": ["Throwable", "String"], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void onErrorResolved(Throwable e, String msg);}", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/core/ApiObserver.java", "stars": "1", "class": {"name": "ApiObserver", "extends": "DisposableObserver", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "write", "params": ["ChannelHandlerContext", "Object", "ChannelPromise"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {        ChannelPromise channelPromise = promise.unvoid();        channelPromise.addListener(exceptionListener);        ctx.write(msg, promise);    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/socket/netty/GameLoggerHandler.java", "stars": "1", "class": {"name": "GameLoggerHandler", "extends": "LoggingHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void main(String[] args) {    NettyMonitor.of().bind(8081).start(NettyMonitorApplication.class, args);  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/test/java/io/netty/monitor/NettyMonitorApplication.java", "stars": "3", "class": {"name": "NettyMonitorApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAddresses", "params": ["ArrayList<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAddresses(ArrayList<String> addresses) {        mAddresses.clear();        mAddresses.addAll(addresses);        this.notifyDataSetChanged();    }", "url": "https://raw.githubusercontent.com/raahul1705/Compute/master/app/src/main/java/com/rxn/compute/ComputeRecyclerAdapter.java", "stars": "2", "class": {"name": "ComputeRecyclerAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateViewHolder", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "ViewHolder", "snippet": "    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.layout_computeentry,                parent, false);        ViewHolder holder = new ViewHolder(view);        return holder;    }", "url": "https://raw.githubusercontent.com/raahul1705/Compute/master/app/src/main/java/com/rxn/compute/ComputeRecyclerAdapter.java", "stars": "2", "class": {"name": "ComputeRecyclerAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBindViewHolder", "params": ["ViewHolder", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {        Log.d(TAG, \"onBindViewHolder: called.\");        holder.computeAddress.setText(mAddresses.get(position));        holder.parentLayout.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                Toast.makeText(mContext, mAddresses.get(position), Toast.LENGTH_SHORT).show();            }        });    }", "url": "https://raw.githubusercontent.com/raahul1705/Compute/master/app/src/main/java/com/rxn/compute/ComputeRecyclerAdapter.java", "stars": "2", "class": {"name": "ComputeRecyclerAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getItemCount() {        return mAddresses.size();    }", "url": "https://raw.githubusercontent.com/raahul1705/Compute/master/app/src/main/java/com/rxn/compute/ComputeRecyclerAdapter.java", "stars": "2", "class": {"name": "ComputeRecyclerAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items\t\t\t\t.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.BUILDING_BLOCKS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/MudBlock.java", "stars": "2", "class": {"name": "MudBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": ["FMLCommonSetupEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void init(FMLCommonSetupEvent event) {\t\tfor (Biome biome : ForgeRegistries.BIOMES.getValues()) {\t\t\tboolean biomeCriteria = false;\t\t\tif (ForgeRegistries.BIOMES.getKey(biome).equals(new ResourceLocation(\"swamp\")))\t\t\t\tbiomeCriteria = true;\t\t\tif (ForgeRegistries.BIOMES.getKey(biome).equals(new ResourceLocation(\"swamp_hills\")))\t\t\t\tbiomeCriteria = true;\t\t\tif (!biomeCriteria)\t\t\t\tcontinue;\t\t\tbiome.addFeature(GenerationStage.Decoration.UNDERGROUND_ORES, new OreFeature(OreFeatureConfig::deserialize) {\t\t\t\t@Override\t\t\t\tpublic boolean place(IWorld world, ChunkGenerator generator, Random rand, BlockPos pos, OreFeatureConfig config) {\t\t\t\t\tDimensionType dimensionType = world.getDimension().getType();\t\t\t\t\tboolean dimensionCriteria = false;\t\t\t\t\tif (dimensionType == DimensionType.OVERWORLD)\t\t\t\t\t\tdimensionCriteria = true;\t\t\t\t\tif (!dimensionCriteria)\t\t\t\t\t\treturn false;\t\t\t\t\treturn super.place(world, generator, rand, pos, config);\t\t\t\t}\t\t\t}.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create(\"mud\", \"mud\", blockAt -> {\t\t\t\tboolean blockCriteria = false;\t\t\t\tif (blockAt.getBlock() == Blocks.GRASS_BLOCK.getDefaultState().getBlock())\t\t\t\t\tblockCriteria = true;\t\t\t\tif (blockAt.getBlock() == Blocks.DIRT.getDefaultState().getBlock())\t\t\t\t\tblockCriteria = true;\t\t\t\tif (blockAt.getBlock() == Blocks.CLAY.getDefaultState().getBlock())\t\t\t\t\tblockCriteria = true;\t\t\t\treturn blockCriteria;\t\t\t}), block.getDefaultState(), 36)).withPlacement(Placement.COUNT_RANGE.configure(new CountRangeConfig(36, 0, 0, 256))));\t\t}\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/MudBlock.java", "stars": "2", "class": {"name": "MudBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(MudBallItem.block, (int) (4)));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/MudBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "initialize", "params": ["ValidIBAN"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initialize(ValidIBAN constraint) {    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/validator/GardleIBANValidator.java", "stars": "2", "class": {"name": "GardleIBANValidator", "extends": null, "implements": ["ConstraintValidator"], "modifiers": ["public"]}}, {"method_name": "isValid", "params": ["String", "ConstraintValidatorContext"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isValid(String iban, ConstraintValidatorContext context) {        return IBANValidator.getInstance().isValid(iban) || iban.equals(TEST_IBAN);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/validator/GardleIBANValidator.java", "stars": "2", "class": {"name": "GardleIBANValidator", "extends": null, "implements": ["ConstraintValidator"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        SpringApplication.run(SpringBootDemoApplication.class, args);    }", "url": "https://raw.githubusercontent.com/lavanya172/ElasticSearch-RestAPI-JAVA/master/src/main/java/Employee/SpringBootDemoApplication.java", "stars": "2", "class": {"name": "SpringBootDemoApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProxyUrl", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getProxyUrl(String url) {        return getProxyUrl(url, true);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServer.java", "stars": "2", "class": {"name": "HttpProxyCacheServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProxyUrl", "params": ["String", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getProxyUrl(String url, boolean allowCachedFileUri) {        if (allowCachedFileUri && isCached(url)) {            File cacheFile = getCacheFile(url);            touchFileSafely(cacheFile);            return Uri.fromFile(cacheFile).toString();        }        return isAlive() ? appendToProxyUrl(url) : url;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServer.java", "stars": "2", "class": {"name": "HttpProxyCacheServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "registerCacheListener", "params": ["CacheListener", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void registerCacheListener(CacheListener cacheListener, String url) {        checkAllNotNull(cacheListener, url);        synchronized (clientsLock) {            try {                getClients(url).registerCacheListener(cacheListener);            } catch (ProxyCacheException e) {                HttpProxyCacheDebuger.printfWarning(\"Error registering cache listener\", e.getMessage());            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServer.java", "stars": "2", "class": {"name": "HttpProxyCacheServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "unregisterCacheListener", "params": ["CacheListener", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void unregisterCacheListener(CacheListener cacheListener, String url) {        checkAllNotNull(cacheListener, url);        synchronized (clientsLock) {            try {                getClients(url).unregisterCacheListener(cacheListener);            } catch (ProxyCacheException e) {                HttpProxyCacheDebuger.printfWarning(\"Error registering cache listener\", e.getMessage());            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServer.java", "stars": "2", "class": {"name": "HttpProxyCacheServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "unregisterCacheListener", "params": ["CacheListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void unregisterCacheListener(CacheListener cacheListener) {        checkNotNull(cacheListener);        synchronized (clientsLock) {            for (HttpProxyCacheServerClients clients : clientsMap.values()) {                clients.unregisterCacheListener(cacheListener);            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServer.java", "stars": "2", "class": {"name": "HttpProxyCacheServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isCached", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isCached(String url) {        checkNotNull(url, \"Url can't be null!\");        return getCacheFile(url).exists();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServer.java", "stars": "2", "class": {"name": "HttpProxyCacheServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shutdown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void shutdown() {        HttpProxyCacheDebuger.printfLog(\"Shutdown proxy server\");        shutdownClients();        config.sourceInfoStorage.release();        waitConnectionThread.interrupt();        try {            if (!serverSocket.isClosed()) {                serverSocket.close();            }        } catch (IOException e) {            onError(new ProxyCacheException(\"Error shutting down proxy server\", e));        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServer.java", "stars": "2", "class": {"name": "HttpProxyCacheServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isAlive", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isAlive() {        return pinger.ping(3, 70);   // 70+140+280=max~500ms    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServer.java", "stars": "2", "class": {"name": "HttpProxyCacheServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "appendToProxyUrl", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String appendToProxyUrl(String url) {        return String.format(Locale.US, \"http://%s:%d/%s\", PROXY_HOST, port, ProxyCacheUtils.encode(url));    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServer.java", "stars": "2", "class": {"name": "HttpProxyCacheServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCacheFile", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "File", "snippet": "    private File getCacheFile(String url) {        File cacheDir = config.cacheRoot;        String fileName = config.fileNameGenerator.generate(url);        return new File(cacheDir, fileName);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServer.java", "stars": "2", "class": {"name": "HttpProxyCacheServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "touchFileSafely", "params": ["File"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void touchFileSafely(File cacheFile) {        try {            config.diskUsage.touch(cacheFile);        } catch (IOException e) {            HttpProxyCacheDebuger.printfError(\"Error touching file \" + cacheFile, e);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServer.java", "stars": "2", "class": {"name": "HttpProxyCacheServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shutdownClients", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void shutdownClients() {        synchronized (clientsLock) {            for (HttpProxyCacheServerClients clients : clientsMap.values()) {                clients.shutdown();            }            clientsMap.clear();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServer.java", "stars": "2", "class": {"name": "HttpProxyCacheServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "waitForRequest", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void waitForRequest() {        try {            while (!Thread.currentThread().isInterrupted()) {                Socket socket = serverSocket.accept();                socketProcessor.submit(new SocketProcessorRunnable(socket));            }        } catch (IOException e) {            onError(new ProxyCacheException(\"Error during waiting connection\", e));        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServer.java", "stars": "2", "class": {"name": "HttpProxyCacheServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "processSocket", "params": ["Socket"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void processSocket(Socket socket) {        try {            GetRequest request = GetRequest.read(socket.getInputStream());            String url = ProxyCacheUtils.decode(request.uri);            if (pinger.isPingRequest(url)) {                pinger.responseToPing(socket);            } else {                HttpProxyCacheServerClients clients = getClients(url);                clients.processRequest(request, socket);            }        } catch (SocketException e) {            // There is no way to determine that client closed connection http://stackoverflow.com/a/10241044/999458            // So just to prevent log flooding don't log stacktrace        } catch (ProxyCacheException | IOException e) {            onError(new ProxyCacheException(\"Error processing request\", e));        } finally {            releaseSocket(socket);            HttpProxyCacheDebuger.printfLog(\"Opened connections: \" + getClientsCount());        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServer.java", "stars": "2", "class": {"name": "HttpProxyCacheServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getClients", "params": ["String"], "throws": ["ProxyCacheException"], "modifiers": ["private"], "return_type": "HttpProxyCacheServerClients", "snippet": "    private HttpProxyCacheServerClients getClients(String url) throws ProxyCacheException {        synchronized (clientsLock) {            HttpProxyCacheServerClients clients = clientsMap.get(url);            if (clients == null) {                clients = new HttpProxyCacheServerClients(url, config);                clientsMap.put(url, clients);            }            return clients;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServer.java", "stars": "2", "class": {"name": "HttpProxyCacheServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getClientsCount", "params": [], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int getClientsCount() {        synchronized (clientsLock) {            int count = 0;            for (HttpProxyCacheServerClients clients : clientsMap.values()) {                count += clients.getClientsCount();            }            return count;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServer.java", "stars": "2", "class": {"name": "HttpProxyCacheServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "releaseSocket", "params": ["Socket"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void releaseSocket(Socket socket) {        closeSocketInput(socket);        closeSocketOutput(socket);        closeSocket(socket);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServer.java", "stars": "2", "class": {"name": "HttpProxyCacheServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "closeSocketInput", "params": ["Socket"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void closeSocketInput(Socket socket) {        try {            if (!socket.isInputShutdown()) {                socket.shutdownInput();            }        } catch (SocketException e) {            // There is no way to determine that client closed connection http://stackoverflow.com/a/10241044/999458            // So just to prevent log flooding don't log stacktrace        } catch (IOException e) {           // onError(new ProxyCacheException(\"Error closing socket input stream\", e));        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServer.java", "stars": "2", "class": {"name": "HttpProxyCacheServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "closeSocketOutput", "params": ["Socket"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void closeSocketOutput(Socket socket) {        try {            if (!socket.isOutputShutdown()) {                socket.shutdownOutput();            }        } catch (IOException e) {            HttpProxyCacheDebuger.printfWarning(\"Failed to close socket on proxy side: {}. It seems client have already closed connection.\", e.getMessage());        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServer.java", "stars": "2", "class": {"name": "HttpProxyCacheServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "closeSocket", "params": ["Socket"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void closeSocket(Socket socket) {        try {            if (!socket.isClosed()) {                socket.close();            }        } catch (IOException e) {            //onError(new ProxyCacheException(\"Error closing socket\", e));        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServer.java", "stars": "2", "class": {"name": "HttpProxyCacheServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onError", "params": ["Throwable"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void onError(Throwable e) {        HttpProxyCacheDebuger.printfError(\"HttpProxyCacheServer error\", e.getMessage());    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServer.java", "stars": "2", "class": {"name": "HttpProxyCacheServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void run() {            startSignal.countDown();            waitForRequest();        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServer.java", "stars": "2", "class": {"name": "WaitRequestsRunnable", "extends": null, "implements": ["Runnable"], "modifiers": ["private", "final"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void run() {            processSocket(socket);        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServer.java", "stars": "2", "class": {"name": "SocketProcessorRunnable", "extends": null, "implements": ["Runnable"], "modifiers": ["private", "final"]}}, {"method_name": "cacheDirectory", "params": ["File"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder cacheDirectory(File file) {            this.cacheRoot = checkNotNull(file);            return this;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServer.java", "stars": "2", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "fileNameGenerator", "params": ["FileNameGenerator"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder fileNameGenerator(FileNameGenerator fileNameGenerator) {            this.fileNameGenerator = checkNotNull(fileNameGenerator);            return this;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServer.java", "stars": "2", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "maxCacheSize", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder maxCacheSize(long maxSize) {            this.diskUsage = new TotalSizeLruDiskUsage(maxSize);            return this;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServer.java", "stars": "2", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "maxCacheFilesCount", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder maxCacheFilesCount(int count) {            this.diskUsage = new TotalCountLruDiskUsage(count);            return this;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServer.java", "stars": "2", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "diskUsage", "params": ["DiskUsage"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder diskUsage(DiskUsage diskUsage) {            this.diskUsage = checkNotNull(diskUsage);            return this;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServer.java", "stars": "2", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "headerInjector", "params": ["HeaderInjector"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder headerInjector(HeaderInjector headerInjector) {            this.headerInjector = checkNotNull(headerInjector);            return this;        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServer.java", "stars": "2", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "build", "params": [], "throws": null, "modifiers": ["public"], "return_type": "HttpProxyCacheServer", "snippet": "        public HttpProxyCacheServer build() {            Config config = buildConfig();            return new HttpProxyCacheServer(config);        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServer.java", "stars": "2", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "buildConfig", "params": [], "throws": null, "modifiers": ["private"], "return_type": "Config", "snippet": "        private Config buildConfig() {            return new Config(cacheRoot, fileNameGenerator, diskUsage, sourceInfoStorage, headerInjector);        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/HttpProxyCacheServer.java", "stars": "2", "class": {"name": "Builder", "extends": null, "implements": null, "modifiers": ["public", "final", "static"]}}, {"method_name": "description", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String description() {        return super.description() + \" \u6d82\u62b9\u4e0a\u5976\u6cb9\";    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/decorate/example/CreamDecorate.java", "stars": "2", "class": {"name": "CreamDecorate", "extends": "AbstractDecorate", "implements": null, "modifiers": ["public"]}}, {"method_name": "calculatePrice", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int calculatePrice() {        return super.calculatePrice() + 15;    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/decorate/example/CreamDecorate.java", "stars": "2", "class": {"name": "CreamDecorate", "extends": "AbstractDecorate", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) /*throws RegisterException*/ {        //2.\u4f7f\u7528Scanner\u83b7\u53d6\u7528\u6237\u8f93\u5165\u7684\u6ce8\u518c\u7684\u7528\u6237\u540d(\u524d\u7aef,\u9875\u9762)        Scanner sc = new Scanner(System.in);        System.out.println(\"\u8bf7\u8f93\u5165\u60a8\u8981\u6ce8\u518c\u7684\u7528\u6237\u540d:\");        String username = sc.next();        checkUsername(username);    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/16.%E3%80%90%E5%BC%82%E5%B8%B8%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%91-%E7%AC%94%E8%AE%B0/code/05_ExceptionAndThread/src/com/itheima/demo04/MyException/Demo01RegisterException.java", "stars": "2", "class": {"name": "Demo01RegisterException", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkUsername", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void checkUsername(String username) /*throws RegisterException*/ {        //\u904d\u5386\u5b58\u50a8\u5df2\u7ecf\u6ce8\u518c\u8fc7\u7528\u6237\u540d\u7684\u6570\u7ec4,\u83b7\u53d6\u6bcf\u4e00\u4e2a\u7528\u6237\u540d        for (String name : usernames) {            //\u4f7f\u7528\u83b7\u53d6\u5230\u7684\u7528\u6237\u540d\u548c\u7528\u6237\u8f93\u5165\u7684\u7528\u6237\u540d\u6bd4\u8f83            if(name.equals(username)){                //true:\u7528\u6237\u540d\u5df2\u7ecf\u5b58\u5728,\u629b\u51faRegisterException\u5f02\u5e38,\u544a\u77e5\u7528\u6237\"\u4eb2\uff0c\u8be5\u7528\u6237\u540d\u5df2\u7ecf\u88ab\u6ce8\u518c\";                try {                    throw new RegisterException(\"\u4eb2\uff0c\u8be5\u7528\u6237\u540d\u5df2\u7ecf\u88ab\u6ce8\u518c\");                } catch (RegisterException e) {                    e.printStackTrace();                    return; //\u7ed3\u675f\u65b9\u6cd5                }            }        }        //\u5982\u679c\u5faa\u73af\u7ed3\u675f\u4e86,\u8fd8\u6ca1\u6709\u627e\u5230\u91cd\u590d\u7684\u7528\u6237\u540d,\u63d0\u793a\u7528\u6237\"\u606d\u559c\u60a8,\u6ce8\u518c\u6210\u529f!\";        System.out.println(\"\u606d\u559c\u60a8,\u6ce8\u518c\u6210\u529f!\");    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/16.%E3%80%90%E5%BC%82%E5%B8%B8%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%91-%E7%AC%94%E8%AE%B0/code/05_ExceptionAndThread/src/com/itheima/demo04/MyException/Demo01RegisterException.java", "stars": "2", "class": {"name": "Demo01RegisterException", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUserId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getUserId() {        return userId;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/RefuseRequest.java", "stars": "1", "class": {"name": "RefuseRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUserId", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUserId(long userId) {        this.userId = userId;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/RefuseRequest.java", "stars": "1", "class": {"name": "RefuseRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRefuseType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getRefuseType() {        return refuseType;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/RefuseRequest.java", "stars": "1", "class": {"name": "RefuseRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRefuseType", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRefuseType(int refuseType) {        this.refuseType = refuseType;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/RefuseRequest.java", "stars": "1", "class": {"name": "RefuseRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPlatform", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Platform", "snippet": "    public Platform getPlatform() {        return platform;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/RefuseRequest.java", "stars": "1", "class": {"name": "RefuseRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPlatform", "params": ["Platform"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPlatform(Platform platform) {        this.platform = platform;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/RefuseRequest.java", "stars": "1", "class": {"name": "RefuseRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"RefuseRequest{\" +                \"userId=\" + userId +                \", refuseType=\" + refuseType +                \", platform='\" + platform + '\\'' +                '}';    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/RefuseRequest.java", "stars": "1", "class": {"name": "RefuseRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "consumeSampleEvent", "params": ["SampleEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void consumeSampleEvent(SampleEvent event) {        //For Demo checks message id and delay that message        if (event.getMessageId() >= 0 && event.getMessageId() <= 100) {            throw new DelayException(\"Test Event\");        }        System.out.println(\"Message: \" + event.getMessage());    }", "url": "https://raw.githubusercontent.com/Merthaskan/sample-consumer/master/src/main/java/com/trendyol/sampleconsumer/service/ConsumeService.java", "stars": "2", "class": {"name": "ConsumeService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setVariables", "params": ["Properties"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setVariables(Properties variables) {    this.variables = variables;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/parsing/XPathParser.java", "stars": "15", "class": {"name": "XPathParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "evalString", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String evalString(String expression) {    return evalString(document, expression);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/parsing/XPathParser.java", "stars": "15", "class": {"name": "XPathParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "evalString", "params": ["Object", "String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String evalString(Object root, String expression) {    String result = (String) evaluate(expression, root, XPathConstants.STRING);    result = PropertyParser.parse(result, variables);    return result;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/parsing/XPathParser.java", "stars": "15", "class": {"name": "XPathParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "evalBoolean", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Boolean", "snippet": "  public Boolean evalBoolean(String expression) {    return evalBoolean(document, expression);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/parsing/XPathParser.java", "stars": "15", "class": {"name": "XPathParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "evalBoolean", "params": ["Object", "String"], "throws": null, "modifiers": ["public"], "return_type": "Boolean", "snippet": "  public Boolean evalBoolean(Object root, String expression) {    return (Boolean) evaluate(expression, root, XPathConstants.BOOLEAN);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/parsing/XPathParser.java", "stars": "15", "class": {"name": "XPathParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "evalShort", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Short", "snippet": "  public Short evalShort(String expression) {    return evalShort(document, expression);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/parsing/XPathParser.java", "stars": "15", "class": {"name": "XPathParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "evalShort", "params": ["Object", "String"], "throws": null, "modifiers": ["public"], "return_type": "Short", "snippet": "  public Short evalShort(Object root, String expression) {    return Short.valueOf(evalString(root, expression));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/parsing/XPathParser.java", "stars": "15", "class": {"name": "XPathParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "evalInteger", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer evalInteger(String expression) {    return evalInteger(document, expression);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/parsing/XPathParser.java", "stars": "15", "class": {"name": "XPathParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "evalInteger", "params": ["Object", "String"], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer evalInteger(Object root, String expression) {    return Integer.valueOf(evalString(root, expression));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/parsing/XPathParser.java", "stars": "15", "class": {"name": "XPathParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "evalLong", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "  public Long evalLong(String expression) {    return evalLong(document, expression);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/parsing/XPathParser.java", "stars": "15", "class": {"name": "XPathParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "evalLong", "params": ["Object", "String"], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "  public Long evalLong(Object root, String expression) {    return Long.valueOf(evalString(root, expression));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/parsing/XPathParser.java", "stars": "15", "class": {"name": "XPathParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "evalFloat", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Float", "snippet": "  public Float evalFloat(String expression) {    return evalFloat(document, expression);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/parsing/XPathParser.java", "stars": "15", "class": {"name": "XPathParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "evalFloat", "params": ["Object", "String"], "throws": null, "modifiers": ["public"], "return_type": "Float", "snippet": "  public Float evalFloat(Object root, String expression) {    return Float.valueOf(evalString(root, expression));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/parsing/XPathParser.java", "stars": "15", "class": {"name": "XPathParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "evalDouble", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Double", "snippet": "  public Double evalDouble(String expression) {    return evalDouble(document, expression);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/parsing/XPathParser.java", "stars": "15", "class": {"name": "XPathParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "evalDouble", "params": ["Object", "String"], "throws": null, "modifiers": ["public"], "return_type": "Double", "snippet": "  public Double evalDouble(Object root, String expression) {    return (Double) evaluate(expression, root, XPathConstants.NUMBER);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/parsing/XPathParser.java", "stars": "15", "class": {"name": "XPathParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "evalNodes", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "List<XNode>", "snippet": "  public List<XNode> evalNodes(String expression) {    return evalNodes(document, expression);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/parsing/XPathParser.java", "stars": "15", "class": {"name": "XPathParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "evalNodes", "params": ["Object", "String"], "throws": null, "modifiers": ["public"], "return_type": "List<XNode>", "snippet": "  public List<XNode> evalNodes(Object root, String expression) {    List<XNode> xnodes = new ArrayList<>();    NodeList nodes = (NodeList) evaluate(expression, root, XPathConstants.NODESET);    for (int i = 0; i < nodes.getLength(); i++) {      xnodes.add(new XNode(this, nodes.item(i), variables));    }    return xnodes;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/parsing/XPathParser.java", "stars": "15", "class": {"name": "XPathParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "evalNode", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "XNode", "snippet": "  public XNode evalNode(String expression) {    return evalNode(document, expression);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/parsing/XPathParser.java", "stars": "15", "class": {"name": "XPathParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "evalNode", "params": ["Object", "String"], "throws": null, "modifiers": ["public"], "return_type": "XNode", "snippet": "  public XNode evalNode(Object root, String expression) {    Node node = (Node) evaluate(expression, root, XPathConstants.NODE);    if (node == null) {      return null;    }    return new XNode(this, node, variables);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/parsing/XPathParser.java", "stars": "15", "class": {"name": "XPathParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "evaluate", "params": ["String", "Object", "QName"], "throws": null, "modifiers": ["private"], "return_type": "Object", "snippet": "  private Object evaluate(String expression, Object root, QName returnType) {    try {      return xpath.evaluate(expression, root, returnType);    } catch (Exception e) {      throw new BuilderException(\"Error evaluating XPath.  Cause: \" + e, e);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/parsing/XPathParser.java", "stars": "15", "class": {"name": "XPathParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createDocument", "params": ["InputSource"], "throws": null, "modifiers": ["private"], "return_type": "Document", "snippet": "  private Document createDocument(InputSource inputSource) {    // important: this must only be called AFTER common constructor    try {      DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();      factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);      factory.setValidating(validation);      factory.setNamespaceAware(false);      factory.setIgnoringComments(true);      factory.setIgnoringElementContentWhitespace(false);      factory.setCoalescing(false);      factory.setExpandEntityReferences(true);      DocumentBuilder builder = factory.newDocumentBuilder();      builder.setEntityResolver(entityResolver);      builder.setErrorHandler(new ErrorHandler() {        @Override        public void error(SAXParseException exception) throws SAXException {          throw exception;        }        @Override        public void fatalError(SAXParseException exception) throws SAXException {          throw exception;        }        @Override        public void warning(SAXParseException exception) throws SAXException {          // NOP        }      });      return builder.parse(inputSource);    } catch (Exception e) {      throw new BuilderException(\"Error creating document instance.  Cause: \" + e, e);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/parsing/XPathParser.java", "stars": "15", "class": {"name": "XPathParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "commonConstructor", "params": ["boolean", "Properties", "EntityResolver"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void commonConstructor(boolean validation, Properties variables, EntityResolver entityResolver) {    this.validation = validation;    this.entityResolver = entityResolver;    this.variables = variables;    XPathFactory factory = XPathFactory.newInstance();    this.xpath = factory.newXPath();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/parsing/XPathParser.java", "stars": "15", "class": {"name": "XPathParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parse", "params": ["String", "Class<?>", "Map<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "SqlSource", "snippet": "  public SqlSource parse(String originalSql, Class<?> parameterType, Map<String, Object> additionalParameters) {    ParameterMappingTokenHandler handler = new ParameterMappingTokenHandler(configuration, parameterType, additionalParameters);    GenericTokenParser parser = new GenericTokenParser(\"#{\", \"}\", handler);    String sql = parser.parse(originalSql);    return new StaticSqlSource(configuration, sql, handler.getParameterMappings());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/SqlSourceBuilder.java", "stars": "15", "class": {"name": "SqlSourceBuilder", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "getParameterMappings", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<ParameterMapping>", "snippet": "    public List<ParameterMapping> getParameterMappings() {      return parameterMappings;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/SqlSourceBuilder.java", "stars": "15", "class": {"name": "ParameterMappingTokenHandler", "extends": "BaseBuilder", "implements": ["TokenHandler"], "modifiers": ["private", "static"]}}, {"method_name": "handleToken", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String handleToken(String content) {      parameterMappings.add(buildParameterMapping(content));      return \"?\";    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/SqlSourceBuilder.java", "stars": "15", "class": {"name": "ParameterMappingTokenHandler", "extends": "BaseBuilder", "implements": ["TokenHandler"], "modifiers": ["private", "static"]}}, {"method_name": "buildParameterMapping", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "ParameterMapping", "snippet": "    private ParameterMapping buildParameterMapping(String content) {      Map<String, String> propertiesMap = parseParameterMapping(content);      String property = propertiesMap.get(\"property\");      Class<?> propertyType;      if (metaParameters.hasGetter(property)) { // issue #448 get type from additional params        propertyType = metaParameters.getGetterType(property);      } else if (typeHandlerRegistry.hasTypeHandler(parameterType)) {        propertyType = parameterType;      } else if (JdbcType.CURSOR.name().equals(propertiesMap.get(\"jdbcType\"))) {        propertyType = java.sql.ResultSet.class;      } else if (property == null || Map.class.isAssignableFrom(parameterType)) {        propertyType = Object.class;      } else {        MetaClass metaClass = MetaClass.forClass(parameterType, configuration.getReflectorFactory());        if (metaClass.hasGetter(property)) {          propertyType = metaClass.getGetterType(property);        } else {          propertyType = Object.class;        }      }      ParameterMapping.Builder builder = new ParameterMapping.Builder(configuration, property, propertyType);      Class<?> javaType = propertyType;      String typeHandlerAlias = null;      for (Map.Entry<String, String> entry : propertiesMap.entrySet()) {        String name = entry.getKey();        String value = entry.getValue();        if (\"javaType\".equals(name)) {          javaType = resolveClass(value);          builder.javaType(javaType);        } else if (\"jdbcType\".equals(name)) {          builder.jdbcType(resolveJdbcType(value));        } else if (\"mode\".equals(name)) {          builder.mode(resolveParameterMode(value));        } else if (\"numericScale\".equals(name)) {          builder.numericScale(Integer.valueOf(value));        } else if (\"resultMap\".equals(name)) {          builder.resultMapId(value);        } else if (\"typeHandler\".equals(name)) {          typeHandlerAlias = value;        } else if (\"jdbcTypeName\".equals(name)) {          builder.jdbcTypeName(value);        } else if (\"property\".equals(name)) {          // Do Nothing        } else if (\"expression\".equals(name)) {          throw new BuilderException(\"Expression based parameters are not supported yet\");        } else {          throw new BuilderException(\"An invalid property '\" + name + \"' was found in mapping #{\" + content + \"}.  Valid properties are \" + PARAMETER_PROPERTIES);        }      }      if (typeHandlerAlias != null) {        builder.typeHandler(resolveTypeHandler(javaType, typeHandlerAlias));      }      return builder.build();    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/SqlSourceBuilder.java", "stars": "15", "class": {"name": "ParameterMappingTokenHandler", "extends": "BaseBuilder", "implements": ["TokenHandler"], "modifiers": ["private", "static"]}}, {"method_name": "parseParameterMapping", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "Map<String,String>", "snippet": "    private Map<String, String> parseParameterMapping(String content) {      try {        return new ParameterExpression(content);      } catch (BuilderException ex) {        throw ex;      } catch (Exception ex) {        throw new BuilderException(\"Parsing error was found in mapping #{\" + content + \"}.  Check syntax #{property|(expression), var1=value1, var2=value2, ...} \", ex);      }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/SqlSourceBuilder.java", "stars": "15", "class": {"name": "ParameterMappingTokenHandler", "extends": "BaseBuilder", "implements": ["TokenHandler"], "modifiers": ["private", "static"]}}, {"method_name": "main", "params": ["String"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws Exception {        // param        String jobHandler = \"demoJobHandler\";        String params = \"\";        runTest(jobHandler, params);    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/test/java/com/xxl/job/executor/ExecutorBizTest.java", "stars": "1", "class": {"name": "ExecutorBizTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "runTest", "params": ["String", "String"], "throws": ["Exception"], "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void runTest(String jobHandler, String params) throws Exception {        // trigger data        TriggerParam triggerParam = new TriggerParam();        triggerParam.setJobId(1);        triggerParam.setExecutorHandler(jobHandler);        triggerParam.setExecutorParams(params);        triggerParam.setExecutorBlockStrategy(ExecutorBlockStrategyEnum.COVER_EARLY.name());        triggerParam.setGlueType(GlueTypeEnum.BEAN.name());        triggerParam.setGlueSource(null);        triggerParam.setGlueUpdatetime(System.currentTimeMillis());        triggerParam.setLogId(1);        triggerParam.setLogDateTime(System.currentTimeMillis());        // do remote trigger        String accessToken = null;        XxlRpcReferenceBean referenceBean = new XxlRpcReferenceBean();        referenceBean.setClient(NettyHttpClient.class);        referenceBean.setSerializer(HessianSerializer.class);        referenceBean.setCallType(CallType.SYNC);        referenceBean.setLoadBalance(LoadBalance.ROUND);        referenceBean.setIface(ExecutorBiz.class);        referenceBean.setVersion(null);        referenceBean.setTimeout(3000);        referenceBean.setAddress(\"127.0.0.1:9999\");        referenceBean.setAccessToken(accessToken);        referenceBean.setInvokeCallback(null);        referenceBean.setInvokerFactory(null);        ExecutorBiz executorBiz = (ExecutorBiz) referenceBean.getObject();        ReturnT<String> runResult = executorBiz.run(triggerParam);        System.out.println(runResult);        XxlRpcInvokerFactory.getInstance().stop();    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/test/java/com/xxl/job/executor/ExecutorBizTest.java", "stars": "1", "class": {"name": "ExecutorBizTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addComment", "params": ["CommentDomain"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addComment(CommentDomain comments) {        String msg = null;        if (null == comments) {            msg = \"\u8bc4\u8bba\u5bf9\u8c61\u4e3a\u7a7a\";        }        if (StringUtils.isBlank(comments.getAuthor())) {            comments.setAuthor(\"\u70ed\u5fc3\u7f51\u53cb\");        }        if (StringUtils.isNotBlank(comments.getMail()) && !TaleUtils.isEmail(comments.getMail())) {            msg =  \"\u8bf7\u8f93\u5165\u6b63\u786e\u7684\u90ae\u7bb1\u683c\u5f0f\";        }        if (StringUtils.isBlank(comments.getContent())) {            msg = \"\u8bc4\u8bba\u5185\u5bb9\u4e0d\u80fd\u4e3a\u7a7a\";        }        if (comments.getContent().length() < 5 || comments.getContent().length() > 2000) {            msg = \"\u8bc4\u8bba\u5b57\u6570\u57285-2000\u4e2a\u5b57\u7b26\";        }        if (null == comments.getCid()) {            msg = \"\u8bc4\u8bba\u6587\u7ae0\u4e0d\u80fd\u4e3a\u7a7a\";        }        if (msg != null)            throw BusinessException.withErrorCode(msg);        ContentDomain atricle = contentService.getAtricleById(comments.getCid());        if (null == atricle)            throw BusinessException.withErrorCode(\"\u8be5\u6587\u7ae0\u4e0d\u5b58\u5728\");        comments.setOwnerId(atricle.getAuthorId());        comments.setStatus(STATUS_MAP.get(STATUS_BLANK));        comments.setCreated(DateKit.getCurrentUnixTime());        commentDao.addComment(comments);        ContentDomain temp = new ContentDomain();        temp.setCid(atricle.getCid());        Integer count = atricle.getCommentsNum();        if (null == count){            count = 0;        }        temp.setCommentsNum(count + 1);        contentService.updateContentByCid(temp);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/serviceImp/CommentServiceImpl.java", "stars": "2", "class": {"name": "CommentServiceImpl", "extends": null, "implements": ["CommentService"], "modifiers": ["public"]}}, {"method_name": "deleteComment", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void deleteComment(Integer coid) {        if (null == coid)            throw BusinessException.withErrorCode(ErrorConstant.Common.PARAM_IS_EMPTY);        // \u5982\u679c\u5220\u9664\u7684\u8bc4\u8bba\u5b58\u5728\u5b50\u8bc4\u8bba\uff0c\u4e00\u5e76\u5220\u9664        //\u67e5\u627e\u5f53\u524d\u8bc4\u8bba\u662f\u5426\u6709\u5b50\u8bc4\u8bba        CommentCond commentCond = new CommentCond();        commentCond.setParent(coid);        CommentDomain comment = commentDao.getCommentById(coid);        List<CommentDomain> childComments = commentDao.getCommentsByCond(commentCond);        Integer count = 0;        //\u5220\u9664\u5b50\u8bc4\u8bba        if (null != childComments && childComments.size() > 0){            for (int i = 0; i < childComments.size(); i++) {                commentDao.deleteComment(childComments.get(i).getCoid());                count++;            }        }        //\u5220\u9664\u5f53\u524d\u8bc4\u8bba        commentDao.deleteComment(coid);        count++;        //\u66f4\u65b0\u5f53\u524d\u6587\u7ae0\u7684\u8bc4\u8bba\u6570        ContentDomain contentDomain = contentService.getAtricleById(comment.getCid());        if (null != contentDomain                && null != contentDomain.getCommentsNum()                && contentDomain.getCommentsNum() != 0){            contentDomain.setCommentsNum(contentDomain.getCommentsNum() - count);            contentService.updateContentByCid(contentDomain);        }    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/serviceImp/CommentServiceImpl.java", "stars": "2", "class": {"name": "CommentServiceImpl", "extends": null, "implements": ["CommentService"], "modifiers": ["public"]}}, {"method_name": "updateCommentStatus", "params": ["Integer", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateCommentStatus(Integer coid, String status) {        if (null == coid)            throw BusinessException.withErrorCode(ErrorConstant.Common.PARAM_IS_EMPTY);        commentDao.updateCommentStatus(coid, status);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/serviceImp/CommentServiceImpl.java", "stars": "2", "class": {"name": "CommentServiceImpl", "extends": null, "implements": ["CommentService"], "modifiers": ["public"]}}, {"method_name": "getCommentById", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "CommentDomain", "snippet": "    public CommentDomain getCommentById(Integer coid) {        if (null == coid)            throw BusinessException.withErrorCode(ErrorConstant.Common.PARAM_IS_EMPTY);        return commentDao.getCommentById(coid);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/serviceImp/CommentServiceImpl.java", "stars": "2", "class": {"name": "CommentServiceImpl", "extends": null, "implements": ["CommentService"], "modifiers": ["public"]}}, {"method_name": "getCommentsByCId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "List<CommentDomain>", "snippet": "    public List<CommentDomain> getCommentsByCId(Integer cid) {        if (null == cid)            throw BusinessException.withErrorCode(ErrorConstant.Common.PARAM_IS_EMPTY);        return commentDao.getCommentsByCId(cid);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/serviceImp/CommentServiceImpl.java", "stars": "2", "class": {"name": "CommentServiceImpl", "extends": null, "implements": ["CommentService"], "modifiers": ["public"]}}, {"method_name": "getCommentsByCond", "params": ["CommentCond", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "PageInfo<CommentDomain>", "snippet": "    public PageInfo<CommentDomain> getCommentsByCond(CommentCond commentCond, int pageNum, int pageSize) {        if (null == commentCond)            throw BusinessException.withErrorCode(ErrorConstant.Common.PARAM_IS_EMPTY);        PageHelper.startPage(pageNum, pageSize);        List<CommentDomain> comments = commentDao.getCommentsByCond(commentCond);        PageInfo<CommentDomain> pageInfo = new PageInfo<>(comments);        return pageInfo;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/serviceImp/CommentServiceImpl.java", "stars": "2", "class": {"name": "CommentServiceImpl", "extends": null, "implements": ["CommentService"], "modifiers": ["public"]}}, {"method_name": "createSecurityEnabledProxyUser", "params": ["String", "String", "Logger"], "throws": ["IOException"], "modifiers": ["private", "static"], "return_type": "UserGroupInformation", "snippet": "  private static UserGroupInformation createSecurityEnabledProxyUser(String userToProxy, String filelocation, Logger log          ) throws IOException {            if (!new File(filelocation).exists()) {      throw new RuntimeException(\"hadoop token file doesn't exist.\");    }    log.info(\"Found token file.  Setting \" + HadoopSecurityManager.MAPREDUCE_JOB_CREDENTIALS_BINARY            + \" to \" + filelocation);    System.setProperty(HadoopSecurityManager.MAPREDUCE_JOB_CREDENTIALS_BINARY, filelocation);    UserGroupInformation loginUser = null;    loginUser = UserGroupInformation.getLoginUser();    log.info(\"Current logged in user is \" + loginUser.getUserName());    UserGroupInformation proxyUser = UserGroupInformation.createProxyUser(userToProxy, loginUser);    for (Token<?> token : loginUser.getTokens()) {      proxyUser.addToken(token);    }    return proxyUser;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopSecureWrapperUtils.java", "stars": "18", "class": {"name": "HadoopSecureWrapperUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setupProxyUser", "params": ["Properties", "String", "Logger"], "throws": null, "modifiers": ["public", "static"], "return_type": "UserGroupInformation", "snippet": "  public static UserGroupInformation setupProxyUser(Properties jobProps,      String tokenFile, Logger log) {    UserGroupInformation proxyUser = null;    if (!HadoopSecureWrapperUtils.shouldProxy(jobProps)) {      log.info(\"submitting job as original submitter, not proxying\");      return proxyUser;    }    // set up hadoop related configurations    final Configuration conf = new Configuration();    UserGroupInformation.setConfiguration(conf);    boolean securityEnabled = UserGroupInformation.isSecurityEnabled();    // setting up proxy user if required    try {      String userToProxy = null;      userToProxy = jobProps.getProperty(HadoopSecurityManager.USER_TO_PROXY);      if (securityEnabled) {        proxyUser =            HadoopSecureWrapperUtils.createSecurityEnabledProxyUser(                userToProxy, tokenFile, log);        log.info(\"security enabled, proxying as user \" + userToProxy);      } else {        proxyUser = UserGroupInformation.createRemoteUser(userToProxy);        log.info(\"security not enabled, proxying as user \" + userToProxy);      }    } catch (IOException e) {      log.error(\"HadoopSecureWrapperUtils.setupProxyUser threw an IOException\",          e);    }    return proxyUser;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopSecureWrapperUtils.java", "stars": "18", "class": {"name": "HadoopSecureWrapperUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadAzkabanProps", "params": [], "throws": ["IOException", "FileNotFoundException"], "modifiers": ["public", "static"], "return_type": "Properties", "snippet": "  public static Properties loadAzkabanProps() throws IOException, FileNotFoundException {    String propsFile = System.getenv(ProcessJob.JOB_PROP_ENV);    Properties props = new Properties();    props.load(new BufferedReader(new FileReader(propsFile)));    return props;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopSecureWrapperUtils.java", "stars": "18", "class": {"name": "HadoopSecureWrapperUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldProxy", "params": ["Properties"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "  public static boolean shouldProxy(Properties props) {    String shouldProxy = props.getProperty(HadoopSecurityManager.ENABLE_PROXYING);    return shouldProxy != null && shouldProxy.equals(\"true\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/HadoopSecureWrapperUtils.java", "stars": "18", "class": {"name": "HadoopSecureWrapperUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        System.out.println(\"Hallo!\");        int zahl;        zahl = 12;        int zahl2 = 10;        System.out.println(zahl2);        zahl2 = 11;        System.out.println(zahl2);        zahl2 = 12;        // Ganzzahlige Datentypen        short s1;        int i1 = 1;        long l1;        // Flie\u00dfkomma Zahlen        float f1;        double d1 = 1.2;        // Zeichen        char c = 'c';        String s = \"Zeichenkette 123123\";        // Boolsche Ausdr\u00fccke        boolean boolscherWert1 = true;        boolean bf1 = false;        System.out.println(i1);        System.out.println(s);        System.out.println(d1);        System.out.println(boolscherWert1);        double d2 = 1.0 * i1 / 2;        System.out.println(d2);        System.out.println(10 + 10);        System.out.println(10 - 10);        System.out.println(10 % 8);        if (boolscherWert1 == false) {            System.out.println(\"boolscher Wert war true!\");        } else {            System.out.println(\"boolscher Wert war falsch!\");        }        i1 = 23;        if (i1 == 1) {            System.out.println(\"Jawohl, ist 1\");        } else if (i1 == 2) {            System.out.println(\"Jawohl, ist 2\");        } else if (i1 == 3) {            System.out.println(\"Jawohl, ist 3\");        } else {            System.out.println(\"Ist was anderes\");        }        switch (i1) {            case 1:                System.out.println(\"Ist eins\");                break;            case 2:                System.out.println(\"Ist zwei\");                break;            case 3:                System.out.println(\"Ist drei\");                break;            default:                System.out.println(\"Ist was anderes\");        }        // < \"echt kleiner\"        // <= \"kleiner gleich\"        // > \"echt gr\u00f6\u00dfer\"        // >= \"gr\u00f6\u00dfer gleich\"        for (int i = 0; i <= 10; i++) {            System.out.println(i);        }        int i2 = 0;        while (i2 <= 10) {            System.out.println(i2);            i2++;        }        i2 = 0;        do {            System.out.println(i2);            i2++;        } while (i2 <= 10);        for (int i = 0; i < 2; i++) {            for (int j = 0; j < 2; j++) {                System.out.println(i + j);            }        }        int[] intArray = new int[5];        intArray[0] = 111;        intArray[1] = 112;        intArray[2] = 113;        intArray[3] = 114;        intArray[4] = 115;        for (int i = 0; i < intArray.length; i++) {            System.out.println(intArray[i]);        }        for (int arrayValue: intArray) {            System.out.println(arrayValue);        }        int[][] mehrDimensional = new int[5][5];        mehrDimensional [0][0] = 0;        mehrDimensional [0][1] = 1;        mehrDimensional [0][2] = 2;        mehrDimensional [0][3] = 3;        mehrDimensional [0][4] = 4;        mehrDimensional [1][0] = 10;        mehrDimensional [1][1] = 11;        mehrDimensional [1][2] = 12;        mehrDimensional [1][3] = 13;        mehrDimensional [1][4] = 14;        mehrDimensional [2][0] = 20;        mehrDimensional [2][1] = 21;        mehrDimensional [2][2] = 22;        mehrDimensional [2][3] = 23;        mehrDimensional [2][4] = 24;        mehrDimensional [3][0] = 30;        mehrDimensional [3][1] = 31;        mehrDimensional [3][2] = 32;        mehrDimensional [3][3] = 33;        mehrDimensional [3][4] = 34;        mehrDimensional [4][0] = 40;        mehrDimensional [4][1] = 41;        mehrDimensional [4][2] = 42;        mehrDimensional [4][3] = 43;        mehrDimensional [4][4] = 44;        for (int i = 0; i < 5; i++) {            for (int j = 0; j < 5; j++) {                System.out.println(mehrDimensional[i][j]);            }        }        System.out.println(\"---\");        int ergebnis = meineErsteMethode(8,9);        System.out.println(ergebnis);        ichGebeNichtsZurueck(12, 12);    }", "url": "https://raw.githubusercontent.com/unterstein/dhbw-java-2020/master/src/ErsteKlasse.java", "stars": "3", "class": {"name": "ErsteKlasse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "meineErsteMethode", "params": ["int", "int"], "throws": null, "modifiers": ["static"], "return_type": "int", "snippet": "    static int meineErsteMethode(int i, int j) {        // ganz viel anderer code        System.out.println(\"klasjdlka\");        return i + j;    }", "url": "https://raw.githubusercontent.com/unterstein/dhbw-java-2020/master/src/ErsteKlasse.java", "stars": "3", "class": {"name": "ErsteKlasse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "ichGebeNichtsZurueck", "params": ["int", "int"], "throws": null, "modifiers": ["static"], "return_type": "void", "snippet": "    static void ichGebeNichtsZurueck(int i, int j) {        System.out.println(\"Ergebnis der Berechnung:\");        System.out.println(i + j);    }", "url": "https://raw.githubusercontent.com/unterstein/dhbw-java-2020/master/src/ErsteKlasse.java", "stars": "3", "class": {"name": "ErsteKlasse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run() {        synchronized (LOCK_KEY) {            if (isRunning) {                return;            } else {                isRunning = true;            }        }        List<String> list = redisUtil.getList(RedisKey.GAME_ROOM_CONFIG.getKey(), 0, 100);        if(CollectionUtils.isEmpty(list)){            return;        }        list.forEach(data->{            redisUtil.remove(RedisKey.GAME_ROOM_CONFIG.getKey(), data);        });        Map<String, BaseLocalMemory> runnerMap = null;        try {            runnerMap = applicationContext.getBeansOfType(BaseLocalMemory.class);            for (BaseLocalMemory value : runnerMap.values()) {                log.info(\"\u6240\u6709\u96c6\u6210\u8be5\u65b9\u6cd5\u7684\u4eba value:{}\",value.getClass());                value.detection();            }        } catch (BeansException e) {            e.printStackTrace();        } finally {            isRunning=false;        }    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/core/timing/GameConfigSchedule.java", "stars": "1", "class": {"name": "GameConfigSchedule", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tsetUp(\"chrome\", \"https://www.seleniumeasy.com/test/table-search-filter-demo.html\");\t\t// identifying the number of rows and columns\t\t// rows\t\tList<WebElement> rows = driver.findElements(By.xpath(\"//table[@id='task-table']/tbody/tr\"));\t\tSystem.out.println(\"Number of rows \" + rows.size()); // 7\t\t// columns (HEADERS)\t\tList<WebElement> cols = driver.findElements(By.xpath(\"//table[@id='task-table']/thead/tr/th\"));\t\tSystem.out.println(\"Number of cols \" + cols.size()); // 4\t\t// name of columns:\t\tfor (int i = 0; i < cols.size(); i++) {\t\t\tString nameOfCols = cols.get(i).getText();\t\t\tSystem.out.println(\"Name of the columns \" + nameOfCols); // # Task assignee, status, .....\t\t}\t\t// name of the rows\t\tIterator<WebElement> rowIt = rows.iterator();\t\twhile (rowIt.hasNext()) {\t\t\tString rowData = rowIt.next().getText();\t\t\tSystem.out.println(rowData);\t\t}\t\t// finding all the cells (all data)\t\tList<WebElement> cells = driver.findElements(By.xpath(\"//table[@id='task-table']/tbody/tr/td\"));\t\tfor (WebElement cell : cells) {\t\t\tString cellVal = cell.getText();\t\t\tSystem.out.println(cellVal);\t\t}\t\tdriver.quit();\t}", "url": "https://raw.githubusercontent.com/fadimedibi/SeleniumTurkish/master/src/com/class6/WebTables.java", "stars": "3", "class": {"name": "WebTables", "extends": "CommonMethods", "implements": null, "modifiers": ["public"]}}, {"method_name": "newInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "DeploysFragment", "snippet": "    public static DeploysFragment newInstance() {        DeploysFragment fragment = new DeploysFragment();        return fragment;    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/deploys/DeploysFragment.java", "stars": "1", "class": {"name": "DeploysFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/deploys/DeploysFragment.java", "stars": "1", "class": {"name": "DeploysFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        return inflater.inflate(R.layout.fragment_deploys, container, false);    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/deploys/DeploysFragment.java", "stars": "1", "class": {"name": "DeploysFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getId() {        return id;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/repository/timezone/DateTimeWrapper.java", "stars": "2", "class": {"name": "DateTimeWrapper", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Long id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/repository/timezone/DateTimeWrapper.java", "stars": "2", "class": {"name": "DateTimeWrapper", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getInstant", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Instant", "snippet": "    public Instant getInstant() {        return instant;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/repository/timezone/DateTimeWrapper.java", "stars": "2", "class": {"name": "DateTimeWrapper", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setInstant", "params": ["Instant"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setInstant(Instant instant) {        this.instant = instant;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/repository/timezone/DateTimeWrapper.java", "stars": "2", "class": {"name": "DateTimeWrapper", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getLocalDateTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "LocalDateTime", "snippet": "    public LocalDateTime getLocalDateTime() {        return localDateTime;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/repository/timezone/DateTimeWrapper.java", "stars": "2", "class": {"name": "DateTimeWrapper", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setLocalDateTime", "params": ["LocalDateTime"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLocalDateTime(LocalDateTime localDateTime) {        this.localDateTime = localDateTime;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/repository/timezone/DateTimeWrapper.java", "stars": "2", "class": {"name": "DateTimeWrapper", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getOffsetDateTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "OffsetDateTime", "snippet": "    public OffsetDateTime getOffsetDateTime() {        return offsetDateTime;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/repository/timezone/DateTimeWrapper.java", "stars": "2", "class": {"name": "DateTimeWrapper", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setOffsetDateTime", "params": ["OffsetDateTime"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOffsetDateTime(OffsetDateTime offsetDateTime) {        this.offsetDateTime = offsetDateTime;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/repository/timezone/DateTimeWrapper.java", "stars": "2", "class": {"name": "DateTimeWrapper", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getZonedDateTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ZonedDateTime", "snippet": "    public ZonedDateTime getZonedDateTime() {        return zonedDateTime;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/repository/timezone/DateTimeWrapper.java", "stars": "2", "class": {"name": "DateTimeWrapper", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setZonedDateTime", "params": ["ZonedDateTime"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setZonedDateTime(ZonedDateTime zonedDateTime) {        this.zonedDateTime = zonedDateTime;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/repository/timezone/DateTimeWrapper.java", "stars": "2", "class": {"name": "DateTimeWrapper", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getLocalTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "LocalTime", "snippet": "    public LocalTime getLocalTime() {        return localTime;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/repository/timezone/DateTimeWrapper.java", "stars": "2", "class": {"name": "DateTimeWrapper", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setLocalTime", "params": ["LocalTime"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLocalTime(LocalTime localTime) {        this.localTime = localTime;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/repository/timezone/DateTimeWrapper.java", "stars": "2", "class": {"name": "DateTimeWrapper", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getOffsetTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "OffsetTime", "snippet": "    public OffsetTime getOffsetTime() {        return offsetTime;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/repository/timezone/DateTimeWrapper.java", "stars": "2", "class": {"name": "DateTimeWrapper", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setOffsetTime", "params": ["OffsetTime"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOffsetTime(OffsetTime offsetTime) {        this.offsetTime = offsetTime;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/repository/timezone/DateTimeWrapper.java", "stars": "2", "class": {"name": "DateTimeWrapper", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getLocalDate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "LocalDate", "snippet": "    public LocalDate getLocalDate() {        return localDate;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/repository/timezone/DateTimeWrapper.java", "stars": "2", "class": {"name": "DateTimeWrapper", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setLocalDate", "params": ["LocalDate"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLocalDate(LocalDate localDate) {        this.localDate = localDate;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/repository/timezone/DateTimeWrapper.java", "stars": "2", "class": {"name": "DateTimeWrapper", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean equals(Object o) {        if (this == o) {            return true;        }        if (o == null || getClass() != o.getClass()) {            return false;        }        DateTimeWrapper dateTimeWrapper = (DateTimeWrapper) o;        return !(dateTimeWrapper.getId() == null || getId() == null) && Objects.equals(getId(), dateTimeWrapper.getId());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/repository/timezone/DateTimeWrapper.java", "stars": "2", "class": {"name": "DateTimeWrapper", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int hashCode() {        return Objects.hashCode(getId());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/repository/timezone/DateTimeWrapper.java", "stars": "2", "class": {"name": "DateTimeWrapper", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"TimeZoneTest{\" +            \"id=\" + id +            \", instant=\" + instant +            \", localDateTime=\" + localDateTime +            \", offsetDateTime=\" + offsetDateTime +            \", zonedDateTime=\" + zonedDateTime +            '}';    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/repository/timezone/DateTimeWrapper.java", "stars": "2", "class": {"name": "DateTimeWrapper", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "ifCoordinationInBound", "params": ["float", "float"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean ifCoordinationInBound(float x, float y)    {        float centerX = this.x;        float centerY = this.y;        if(visible && x >= centerX && x <= centerX + width && y >= centerY && y <=centerY + height)        {            return true;        }        return false;    }", "url": "https://raw.githubusercontent.com/qintianchen/GAutomatorView/master/src/sample/utils/ElementBound.java", "stars": "2", "class": {"name": "ElementBound", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLocationInfo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getLocationInfo()    {        return String.format(\"%d, %d\", (int)x, (int)y);    }", "url": "https://raw.githubusercontent.com/qintianchen/GAutomatorView/master/src/sample/utils/ElementBound.java", "stars": "2", "class": {"name": "ElementBound", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBounds", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getBounds()    {        return String.format(\"\u5bbd: %d, \u9ad8: %d, Visible: %b\", (int)width, (int)height, visible);    }", "url": "https://raw.githubusercontent.com/qintianchen/GAutomatorView/master/src/sample/utils/ElementBound.java", "stars": "2", "class": {"name": "ElementBound", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return String.format(\"location=(%f ,%f) size=(%f %f)\",x,y,width,height);    }", "url": "https://raw.githubusercontent.com/qintianchen/GAutomatorView/master/src/sample/utils/ElementBound.java", "stars": "2", "class": {"name": "ElementBound", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {        Hello.doSomething();                HelloInterface helloInterface = new Hello();        helloInterface.sayHello();    }", "url": "https://raw.githubusercontent.com/enriquedevs/java11/master/mainmodule/src/com/enriquedevs/main/MainApp.java", "stars": "1", "class": {"name": "MainApp", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getApi", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getApi() {        return \"\";    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/request/CopyApi.java", "stars": "1", "class": {"name": "CopyApi", "extends": null, "implements": ["IRequestApi"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        System.out.println(\"\u53cc\u91cd\u68c0\u67e5\");        Singleton instance1 = Singleton.getInstance();        Singleton instance2 = Singleton.getInstance();        System.out.println(instance1 == instance2);        System.out.println(\"instance1 \u7684 hashCode \u503c\u4e3a\uff1a\" + instance1.hashCode());        System.out.println(\"instance2 \u7684 hashCode \u503c\u4e3a\uff1a\" + instance2.hashCode());    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/singleton/type6/SingletonTest06.java", "stars": "2", "class": {"name": "SingletonTest06", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Singleton", "snippet": "    public static Singleton getInstance(){        if(instance == null){            synchronized (Singleton.class) {                if(instance == null){                    instance = new Singleton();                }            }        }        return instance;    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/singleton/type6/SingletonTest06.java", "stars": "2", "class": {"name": "Singleton", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getLayoutId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getLayoutId() {        return R.layout.activity_record_info;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/RecordInfoActivity.java", "stars": "1", "class": {"name": "RecordInfoActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "initView", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initView() {    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/RecordInfoActivity.java", "stars": "1", "class": {"name": "RecordInfoActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "initData", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initData() {    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/RecordInfoActivity.java", "stars": "1", "class": {"name": "RecordInfoActivity", "extends": "MyActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLayoutResId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getLayoutResId() {        return R.layout.activity_sound_effect;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/ui/SoundEffectActivity.java", "stars": "2", "class": {"name": "SoundEffectActivity", "extends": "BaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "initView", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initView() {        Toolbar toolbar = findViewById(R.id.toolbar);        mToolbarTitle = findViewById(R.id.toolbar_title);        toolbar.setTitle(\"\");        mToolbarTitle.setText(R.string.sound_effect);        toolbar.setNavigationOnClickListener(v -> SoundEffectActivity.this.finish());        recyclerView = findViewById(R.id.recyclerView);        adapter = new SoundEffectAdapter(new ArrayList<>());        LinearLayoutManager layoutManager = new LinearLayoutManager(this);        layoutManager.setOrientation(OrientationHelper.VERTICAL);        recyclerView.setLayoutManager(layoutManager);        DividerItemDecoration itemDecoration =                new DividerItemDecoration(this, DividerItemDecoration.VERTICAL);        itemDecoration                .setDrawable(new ColorDrawable(ContextCompat.getColor(this, R.color.bg_grey)));        recyclerView.addItemDecoration(itemDecoration);        recyclerView.setItemAnimator(new DefaultItemAnimator());        recyclerView.setAdapter(adapter);        adapter.setOnItemClickListener(new BaseAdapter.OnItemClickListener() {            @Override            public void onItemClick(View view, int position) {                adapter.selecte(position);                Constant.soundEffectPostion = position;                SoundMode soundMode = adapter.getData().get(position);                //The sound effect and voice change logic are mutually exclusive logic inside the SDK.                //\u97f3\u6548\u548c\u53d8\u58f0\u903b\u8f91\uff0cSDK\u5185\u90e8\u4e3a\u4e92\u65a5\u903b\u8f91\u3002                if (position <= 9) {                    RoomManager.getInstance(SoundEffectActivity.this)                            .setSoundEffect(soundMode.getValue());                } else {                    RoomManager.getInstance(SoundEffectActivity.this)                            .setVoiceChanger(soundMode.getValue());                }            }        });    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/ui/SoundEffectActivity.java", "stars": "2", "class": {"name": "SoundEffectActivity", "extends": "BaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "initData", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initData() {        initModeData();        adapter.selecte(Constant.soundEffectPostion);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/ui/SoundEffectActivity.java", "stars": "2", "class": {"name": "SoundEffectActivity", "extends": "BaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "initModeData", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initModeData() {        //The sound effect and voice change logic are mutually exclusive logic inside the SDK.        //\u97f3\u6548\u548c\u53d8\u58f0\u903b\u8f91\uff0cSDK\u5185\u90e8\u4e3a\u4e92\u65a5\u903b\u8f91\u3002        addModeData(\"\u5173\u95ed\u6a21\u5f0f\", ThunderRtcConstant.SoundEffectMode.THUNDER_SOUND_EFFECT_MODE_NONE);        addModeData(\"VALLEY\u6a21\u5f0f\",                ThunderRtcConstant.SoundEffectMode.THUNDER_SOUND_EFFECT_MODE_VALLEY);        addModeData(\"R&B\u6a21\u5f0f\", ThunderRtcConstant.SoundEffectMode.THUNDER_SOUND_EFFECT_MODE_RANDB);        addModeData(\"KTV\u6a21\u5f0f\", ThunderRtcConstant.SoundEffectMode.THUNDER_SOUND_EFFECT_MODE_KTV);        addModeData(\"CHARMING\u6a21\u5f0f\",                ThunderRtcConstant.SoundEffectMode.THUNDER_SOUND_EFFECT_MODE_CHARMING);        addModeData(\"\u6d41\u884c\u6a21\u5f0f\", ThunderRtcConstant.SoundEffectMode.THUNDER_SOUND_EFFECT_MODE_POP);        addModeData(\"\u563b\u54c8\u6a21\u5f0f\", ThunderRtcConstant.SoundEffectMode.THUNDER_SOUND_EFFECT_MODE_HIPHOP);        addModeData(\"\u6447\u6eda\u6a21\u5f0f\", ThunderRtcConstant.SoundEffectMode.THUNDER_SOUND_EFFECT_MODE_ROCK);        addModeData(\"\u6f14\u5531\u4f1a\u6a21\u5f0f\", ThunderRtcConstant.SoundEffectMode.THUNDER_SOUND_EFFECT_MODE_CONCERT);        addModeData(\"\u5f55\u97f3\u68da\u6a21\u5f0f\", ThunderRtcConstant.SoundEffectMode.THUNDER_SOUND_EFFECT_MODE_STUDIO);        //The sound effect and voice change logic are mutually exclusive logic inside the SDK.        //\u97f3\u6548\u548c\u53d8\u58f0\u903b\u8f91\uff0cSDK\u5185\u90e8\u4e3a\u4e92\u65a5\u903b\u8f91\u3002        addModeData(\"\u7a7a\u7075\", ThunderRtcConstant.VoiceChangerMode.THUNDER_VOICE_CHANGER_MODE_ETHEREAL);        addModeData(\"\u60ca\u609a\", ThunderRtcConstant.VoiceChangerMode.THUNDER_VOICE_CHANGER_MODE_THRILLER);        addModeData(\"\u9c81\u73ed\", ThunderRtcConstant.VoiceChangerMode.THUNDER_VOICE_CHANGER_MODE_LUBAN);        addModeData(\"\u841d\u8389\", ThunderRtcConstant.VoiceChangerMode.THUNDER_VOICE_CHANGER_MODE_LORIE);        addModeData(\"\u5927\u53d4\", ThunderRtcConstant.VoiceChangerMode.THUNDER_VOICE_CHANGER_MODE_UNCLE);        addModeData(\"\u6b7b\u80a5\u4ed4\", ThunderRtcConstant.VoiceChangerMode.THUNDER_VOICE_CHANGER_MODE_DIEFAT);        addModeData(\"\u718a\u5b69\u5b50\", ThunderRtcConstant.VoiceChangerMode.THUNDER_VOICE_CHANGER_MODE_BADBOY);        addModeData(\"\u9b54\u517d\u519c\u6c11\",                ThunderRtcConstant.VoiceChangerMode.THUNDER_VOICE_CHANGER_MODE_WRACRAFT);        addModeData(\"\u91cd\u91d1\u5c5e\",                ThunderRtcConstant.VoiceChangerMode.THUNDER_VOICE_CHANGER_MODE_HEAVYMETAL);        addModeData(\"\u611f\u5192\", ThunderRtcConstant.VoiceChangerMode.THUNDER_VOICE_CHANGER_MODE_COLD);        addModeData(\"\u91cd\u673a\u68b0\",                ThunderRtcConstant.VoiceChangerMode.THUNDER_VOICE_CHANGER_MODE_HEAVYMECHINERY);        addModeData(\"\u56f0\u517d\",                ThunderRtcConstant.VoiceChangerMode.THUNDER_VOICE_CHANGER_MODE_TRAPPEDBEAST);        addModeData(\"\u5f3a\u7535\u6d41\",                ThunderRtcConstant.VoiceChangerMode.THUNDER_VOICE_CHANGER_MODE_POWERCURRENT);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/ui/SoundEffectActivity.java", "stars": "2", "class": {"name": "SoundEffectActivity", "extends": "BaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "addModeData", "params": ["String", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void addModeData(String name, int value) {        adapter.addItem(new SoundMode(name, value));    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYAudio-android/master/app/src/main/java/com/mediaroom/ui/SoundEffectActivity.java", "stars": "2", "class": {"name": "SoundEffectActivity", "extends": "BaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getInputType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getInputType ()\t{\t\treturn n_getInputType ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/LocalizedDigitsKeyListener.java", "stars": "2", "class": {"name": "LocalizedDigitsKeyListener", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_getInputType", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "int", "snippet": "\tprivate native int n_getInputType ();\tpublic char[] getAcceptedChars ()\t{\t\treturn n_getAcceptedChars ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/LocalizedDigitsKeyListener.java", "stars": "2", "class": {"name": "LocalizedDigitsKeyListener", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "getAcceptedChars", "params": [], "throws": null, "modifiers": ["public"], "return_type": "char", "snippet": "\tpublic char[] getAcceptedChars ()\t{\t\treturn n_getAcceptedChars ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/LocalizedDigitsKeyListener.java", "stars": "2", "class": {"name": "LocalizedDigitsKeyListener", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_getAcceptedChars", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "char", "snippet": "\tprivate native char[] n_getAcceptedChars ();\tpublic java.lang.CharSequence filter (java.lang.CharSequence p0, int p1, int p2, android.text.Spanned p3, int p4, int p5)\t{\t\treturn n_filter (p0, p1, p2, p3, p4, p5);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/LocalizedDigitsKeyListener.java", "stars": "2", "class": {"name": "LocalizedDigitsKeyListener", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "filter", "params": ["java", "int", "int", "android", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "java", "snippet": "\tpublic java.lang.CharSequence filter (java.lang.CharSequence p0, int p1, int p2, android.text.Spanned p3, int p4, int p5)\t{\t\treturn n_filter (p0, p1, p2, p3, p4, p5);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/LocalizedDigitsKeyListener.java", "stars": "2", "class": {"name": "LocalizedDigitsKeyListener", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_filter", "params": ["java", "int", "int", "android", "int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "java", "snippet": "\tprivate native java.lang.CharSequence n_filter (java.lang.CharSequence p0, int p1, int p2, android.text.Spanned p3, int p4, int p5);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/LocalizedDigitsKeyListener.java", "stars": "2", "class": {"name": "LocalizedDigitsKeyListener", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/LocalizedDigitsKeyListener.java", "stars": "2", "class": {"name": "LocalizedDigitsKeyListener", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/LocalizedDigitsKeyListener.java", "stars": "2", "class": {"name": "LocalizedDigitsKeyListener", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "   public View onCreateView(LayoutInflater inflater,      ViewGroup container, Bundle savedInstanceState) {             //Inflate the layout for this fragment             return inflater.inflate(    \t\t  R.layout.fragment_one, container, false);   }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/FragmentsTest/src/com/javacodegeeks/android/fragmentstest/FragmentOne.java", "stars": "74", "class": {"name": "FragmentOne", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onTabReselected", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onTabReselected (android.support.design.widget.TabLayout.Tab p0)\t{\t\tn_onTabReselected (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/design/widget/TabLayout_BaseOnTabSelectedListenerImplementor.java", "stars": "2", "class": {"name": "TabLayout_BaseOnTabSelectedListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onTabReselected", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onTabReselected (android.support.design.widget.TabLayout.Tab p0);\tpublic void onTabSelected (android.support.design.widget.TabLayout.Tab p0)\t{\t\tn_onTabSelected (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/design/widget/TabLayout_BaseOnTabSelectedListenerImplementor.java", "stars": "2", "class": {"name": "TabLayout_BaseOnTabSelectedListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onTabSelected", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onTabSelected (android.support.design.widget.TabLayout.Tab p0)\t{\t\tn_onTabSelected (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/design/widget/TabLayout_BaseOnTabSelectedListenerImplementor.java", "stars": "2", "class": {"name": "TabLayout_BaseOnTabSelectedListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onTabSelected", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onTabSelected (android.support.design.widget.TabLayout.Tab p0);\tpublic void onTabUnselected (android.support.design.widget.TabLayout.Tab p0)\t{\t\tn_onTabUnselected (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/design/widget/TabLayout_BaseOnTabSelectedListenerImplementor.java", "stars": "2", "class": {"name": "TabLayout_BaseOnTabSelectedListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onTabUnselected", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onTabUnselected (android.support.design.widget.TabLayout.Tab p0)\t{\t\tn_onTabUnselected (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/design/widget/TabLayout_BaseOnTabSelectedListenerImplementor.java", "stars": "2", "class": {"name": "TabLayout_BaseOnTabSelectedListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onTabUnselected", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onTabUnselected (android.support.design.widget.TabLayout.Tab p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/design/widget/TabLayout_BaseOnTabSelectedListenerImplementor.java", "stars": "2", "class": {"name": "TabLayout_BaseOnTabSelectedListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/design/widget/TabLayout_BaseOnTabSelectedListenerImplementor.java", "stars": "2", "class": {"name": "TabLayout_BaseOnTabSelectedListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/mono/android/support/design/widget/TabLayout_BaseOnTabSelectedListenerImplementor.java", "stars": "2", "class": {"name": "TabLayout_BaseOnTabSelectedListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "run", "params": ["Object"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void run(Object... params) throws IOException {\t\t// TODO Auto-generated method stub\t\t\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/bench/Benchmark.java", "stars": "2", "class": {"name": "Benchmark", "extends": null, "implements": ["IBenchmark"], "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void run() {\t\t// TODO Auto-generated method stub\t\t\t\ttry {\t\tBufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(\"file.txt\")));\t\tString newline;\t\t\t\t\t\t\twhile ( (newline = in.readLine()) != null   && running) \t\t\t{\t\t\t\t String[] numbers = newline.split(\" \");\t\t\t\t for(int i=0; i<numbers.length && running; i++)\t\t         {\t\t\t\t\t list.add(numbers[i]);\t\t         }\t\t\t}\t\t\t\t\t\t\t\t\t\t\tin.close();\t\t} catch (Exception e) {\t\t\t// TODO Auto-generated catch block\t\t\tSystem.out.println(\"IO Error \"+e.getMessage());\t\t}\t\t\t\trunning = true;\t\t\t\t\t\tfor (int i=0; i<list.size() && running; i++)\t\t\tif(list.get(i).equals(\"15\"))\t\t\t\tSystem.out.println(\"15 is the array!\");\t\t\t\t\t\t\tSystem.out.println(list );\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/bench/Benchmark.java", "stars": "2", "class": {"name": "Benchmark", "extends": null, "implements": ["IBenchmark"], "modifiers": ["public"]}}, {"method_name": "initialize", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initialize(Object... params) {\t\t// TODO Auto-generated method stub\t\tArrayList list = new ArrayList(); \t\ttimer = (Timing)params[1];\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/bench/Benchmark.java", "stars": "2", "class": {"name": "Benchmark", "extends": null, "implements": ["IBenchmark"], "modifiers": ["public"]}}, {"method_name": "clean", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clean() {\t\t// TODO Auto-generated method stub\t\tlist.clear();\t\ttimer = null;\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/bench/Benchmark.java", "stars": "2", "class": {"name": "Benchmark", "extends": null, "implements": ["IBenchmark"], "modifiers": ["public"]}}, {"method_name": "cancel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void cancel() {\t\t// TODO Auto-generated method stub\t\trunning = false;\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/bench/Benchmark.java", "stars": "2", "class": {"name": "Benchmark", "extends": null, "implements": ["IBenchmark"], "modifiers": ["public"]}}, {"method_name": "warmUp", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void warmUp() throws IOException {\t\t// TODO Auto-generated method stub\t\t\t\tfor(int i=0; i<5; ++i) \t\t\trun();\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/bench/Benchmark.java", "stars": "2", "class": {"name": "Benchmark", "extends": null, "implements": ["IBenchmark"], "modifiers": ["public"]}}, {"method_name": "getResult", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getResult() {\t\t// TODO Auto-generated method stub\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/bench/Benchmark.java", "stars": "2", "class": {"name": "Benchmark", "extends": null, "implements": ["IBenchmark"], "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run() {        System.out.println(Thread.currentThread().getName()+\" \u65b0\u7ebf\u7a0b\u521b\u5efa\u4e86\");    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/18.%E3%80%90%E7%BA%BF%E7%A8%8B%E6%B1%A0%E3%80%81Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E3%80%91-%E7%AC%94%E8%AE%B0/code/07_ThreadAndLambda/src/com/itheima/demo03/Lambda/RunnableImpl.java", "stars": "2", "class": {"name": "RunnableImpl", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tint n;\t\tScanner sc = new Scanner(System.in);\t\tSystem.out.println(\"enter no of rows:\");\t\tn = sc.nextInt();\t\tint k;\t\tfor(int i = 1;i <= n; i++) {\t\t\tk = 0;\t\t\tfor(int j = 1 ;j <= i ; j++) {\t\t\t\twhile(k < n-i) {\t\t\t\t\tSystem.out.print(\" \");\t\t\t\t\tk = k + 1;\t\t\t\t}\t\t\t\tif(j == i) {\t\t\t\t\tSystem.out.print(\"*\");\t\t\t\t}\t\t\t\telse {\t\t\t\t\tSystem.out.print(\"* \");\t\t\t\t}\t\t\t}\t\t\tSystem.out.print(\"\\n\");\t\t}\t\tsc.close();\t}", "url": "https://raw.githubusercontent.com/likith22/java-programs/master/PyramidPattern.java", "stars": "3", "class": {"name": "PyramidPattern", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hasApi", "params": ["int"], "throws": null, "modifiers": ["static", "protected"], "return_type": "boolean", "snippet": "    protected static boolean hasApi(int apiLevel) {         return getApi() >= apiLevel;     }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/compat/Compatibility.java", "stars": "4", "class": {"name": "Compatibility", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "upToApi", "params": ["int"], "throws": null, "modifiers": ["static", "protected"], "return_type": "boolean", "snippet": "    protected static boolean upToApi(int apiLevel) {         return apiLevel < 1 || getApi() <= apiLevel;     }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/compat/Compatibility.java", "stars": "4", "class": {"name": "Compatibility", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getApi", "params": [], "throws": null, "modifiers": ["static", "protected"], "return_type": "int", "snippet": "    protected static int getApi() {         return Build.VERSION.SDK_INT;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/compat/Compatibility.java", "stars": "4", "class": {"name": "Compatibility", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setConsumedMsg", "params": ["Properties", "Logger", "String"], "throws": null, "modifiers": [], "return_type": "String", "snippet": "    String setConsumedMsg(Properties props, Logger log, String[] consumedMsgInfo){        String vNewMsgID = \"\";        try {            if(consumedMsgInfo!=null && consumedMsgInfo.length == 4){                vNewMsgID = consumedMsgInfo[0];                String vMsgName = consumedMsgInfo[1];                String vSender = consumedMsgInfo[2];                String vMsg = consumedMsgInfo[3];                if (null == vMsg) {                    props.put(EventChecker.MSG, \"NULL\");                } else {                    props.put(EventChecker.MSG, vMsg);                }                log.info(\"Received message : messageID: \" + vNewMsgID + \", messageName: \" + vMsgName + \", receiver: \" + vSender                        + \", messageBody: \" + vMsg);            }        }catch (Exception e) {            log.error(\"Error set consumed message failed {} setConsumedMsg failed\" + e);            return vNewMsgID;        }        return vNewMsgID;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/eventcheck/AbstractEventCheckReceiver.java", "stars": "18", "class": {"name": "AbstractEventCheckReceiver", "extends": "AbstractEventCheck", "implements": null, "modifiers": ["public"]}}, {"method_name": "updateMsgOffset", "params": ["int", "Properties", "Logger", "String", "String"], "throws": null, "modifiers": [], "return_type": "boolean", "snippet": "    boolean updateMsgOffset(int jobId, Properties props, Logger log, String[] consumedMsgInfo,String lastMsgId){        boolean result = false;        String vNewMsgID = \"-1\";        PreparedStatement updatePstmt = null;        PreparedStatement pstmtForGetID = null;        Connection msgConn = null;        vNewMsgID = setConsumedMsg(props,log,consumedMsgInfo);        try {            if(StringUtils.isNotEmpty(vNewMsgID) && StringUtils.isNotBlank(vNewMsgID) && !\"-1\".equals(vNewMsgID)){                msgConn = getEventCheckerConnection(props,log);                if(msgConn == null) return false;                msgConn.setAutoCommit(false);                String sqlForReadMsgID = \"SELECT msg_id FROM event_status WHERE receiver=? AND topic=? AND msg_name=? for update\";                pstmtForGetID = msgConn.prepareCall(sqlForReadMsgID);                pstmtForGetID.setString(1, receiver);                pstmtForGetID.setString(2, topic);                pstmtForGetID.setString(3, msgName);                ResultSet rs = pstmtForGetID.executeQuery();                String nowLastMsgId = rs.last()==true ? rs.getString(\"msg_id\"):\"0\";                log.info(\"receive message successfully , Now check to see if the latest offset has changed ,nowLastMsgId is {} \" + nowLastMsgId);                if(\"0\".equals(nowLastMsgId) || nowLastMsgId.equals(lastMsgId)){                    int vProcessID = jobId;                    String vReceiveTime = DateFormatUtils.format(new Date(), \"yyyy-MM-dd HH:mm:ss\");;                    String sqlForUpdateMsg = \"INSERT INTO event_status(receiver,topic,msg_name,receive_time,msg_id) VALUES(?,?,?,?,?) ON DUPLICATE KEY UPDATE receive_time=VALUES(receive_time),msg_id= CASE WHEN msg_id= \" + lastMsgId + \" THEN VALUES(msg_id) ELSE msg_id END\";                    updatePstmt = msgConn.prepareCall(sqlForUpdateMsg);                    updatePstmt.setString(1, receiver);                    updatePstmt.setString(2, topic);                    updatePstmt.setString(3, msgName);                    updatePstmt.setString(4, vReceiveTime);                    updatePstmt.setString(5, vNewMsgID);                    int updaters = updatePstmt.executeUpdate();                    log.info(\"updateMsgOffset successfully {} update result is:\" + updaters);                    if(updaters != 0){                        log.info(\"Received message successfully , update message status succeeded, consumed flow execution ID: \" + vProcessID);                        //return true after update success                        result = true;                    }else{                        log.info(\"Received message successfully , update message status failed, consumed flow execution ID: \" + vProcessID);                        result = false;                    }                }else{                    log.info(\"the latest offset has changed , Keep waiting for the signal\");                    result = false;                }                msgConn.commit();            }else{                result = false;            }        }catch (SQLException e){            log.error(\"Error update Msg Offset\" + e);            try {                msgConn.rollback();            } catch (SQLException ex) {                log.error(\"transaction rollback failed \" + e);            }            return false;        }finally {            closeQueryStmt(pstmtForGetID, log);            closeQueryStmt(updatePstmt, log);            closeConnection(msgConn, log);        }        return result;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/eventcheck/AbstractEventCheckReceiver.java", "stars": "18", "class": {"name": "AbstractEventCheckReceiver", "extends": "AbstractEventCheck", "implements": null, "modifiers": ["public"]}}, {"method_name": "getOffset", "params": ["int", "Properties", "Logger"], "throws": null, "modifiers": [], "return_type": "String", "snippet": "    String getOffset(int jobId, Properties props, Logger log){        String sqlForReadMsgID = \"SELECT msg_id FROM event_status WHERE receiver=? AND topic=? AND msg_name=?\";        PreparedStatement pstmtForGetID = null;        Connection msgConn = null;        ResultSet rs = null;        boolean flag = false;        String lastMsgId = \"0\";        try {            msgConn = getEventCheckerConnection(props,log);            pstmtForGetID = msgConn.prepareCall(sqlForReadMsgID);            pstmtForGetID.setString(1, receiver);            pstmtForGetID.setString(2, topic);            pstmtForGetID.setString(3, msgName);            rs = pstmtForGetID.executeQuery();            lastMsgId = rs.last()==true ? rs.getString(\"msg_id\"):\"0\";        } catch (SQLException e) {            throw new RuntimeException(\"get Offset failed \" + e);        }finally {            closeQueryStmt(pstmtForGetID,log);            closeConnection(msgConn,log);            closeQueryRef(rs,log);        }        log.debug(\"The last record id is {} \" + lastMsgId);        return lastMsgId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/eventcheck/AbstractEventCheckReceiver.java", "stars": "18", "class": {"name": "AbstractEventCheckReceiver", "extends": "AbstractEventCheck", "implements": null, "modifiers": ["public"]}}, {"method_name": "getMsg", "params": ["Properties", "Logger", "String"], "throws": null, "modifiers": [], "return_type": "String", "snippet": "    String[] getMsg(Properties props, Logger log,String ... params){        String sqlForReadTMsg = \"SELECT * FROM event_queue WHERE topic=? AND msg_name=? AND send_time >=? AND send_time <=? AND msg_id >? ORDER BY msg_id ASC LIMIT 1\";        PreparedStatement pstmt = null;        Connection msgConn = null;        ResultSet rs = null;        String[] consumedMsgInfo = null;        try {            msgConn = getEventCheckerConnection(props,log);            pstmt = msgConn.prepareCall(sqlForReadTMsg);            pstmt.setString(1, topic);            pstmt.setString(2, msgName);            pstmt.setString(3, params[0]);            pstmt.setString(4, params[1]);            pstmt.setString(5, params[2]);            log.info(\"reveiving ... param {} StartTime: \" + params[0] + \", EndTime: \" + params[1]                    + \", Topic: \" + topic + \", MessageName: \" + msgName + \", LastMessageID: \" + params[2]);            rs = pstmt.executeQuery();            if(rs.last()){                consumedMsgInfo = new String[4];                String[] msgKey = new String[]{\"msg_id\",\"msg_name\",\"sender\",\"msg\"};                for (int i = 0;i <= 3;i++) {                    consumedMsgInfo[i] = rs.getString(msgKey[i]);                }            }        } catch (SQLException e) {            throw new RuntimeException(\"EventChecker failed to receive message\" + e);        } finally {            closeQueryStmt(pstmt, log);            closeConnection(msgConn, log);            closeQueryRef(rs, log);        }        return consumedMsgInfo;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/eventcheck/AbstractEventCheckReceiver.java", "stars": "18", "class": {"name": "AbstractEventCheckReceiver", "extends": "AbstractEventCheck", "implements": null, "modifiers": ["public"]}}, {"method_name": "reciveMsg", "params": ["int", "Properties", "Logger"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean reciveMsg(int jobId, Properties props, Logger log) {        return super.reciveMsg(jobId, props, log);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/eventcheck/AbstractEventCheckReceiver.java", "stars": "18", "class": {"name": "AbstractEventCheckReceiver", "extends": "AbstractEventCheck", "implements": null, "modifiers": ["public"]}}, {"method_name": "generate", "params": ["int", "String"], "throws": null, "modifiers": ["public"], "return_type": "Pair<String,Long>", "snippet": "    public Pair<String, Long> generate(int nodeId, String execUser) {        return new MutablePair<>(UserType.REAL_USER.toString(), 0L);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/uid/PlatformUidGenerator.java", "stars": "23", "class": {"name": "PlatformUidGenerator", "extends": null, "implements": ["UidGenerator"], "modifiers": ["public"]}}, {"method_name": "getKey", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getKey() {    return key;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/foreach_map/StringStringMapEntry.java", "stars": "15", "class": {"name": "StringStringMapEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setKey", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setKey(String key) {    this.key = key;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/foreach_map/StringStringMapEntry.java", "stars": "15", "class": {"name": "StringStringMapEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getValue() {    return value;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/foreach_map/StringStringMapEntry.java", "stars": "15", "class": {"name": "StringStringMapEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setValue", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setValue(String value) {    this.value = value;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/foreach_map/StringStringMapEntry.java", "stars": "15", "class": {"name": "StringStringMapEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean equals(Object o) {    if (this == o)      return true;    if (o == null || getClass() != o.getClass())      return false;    StringStringMapEntry mapEntry = (StringStringMapEntry) o;    if (key != null ? !key.equals(mapEntry.key) : mapEntry.key != null)      return false;    if (value != null ? !value.equals(mapEntry.value) : mapEntry.value != null)      return false;    return true;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/foreach_map/StringStringMapEntry.java", "stars": "15", "class": {"name": "StringStringMapEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int hashCode() {    int result = key != null ? key.hashCode() : 0;    result = 31 * result + (value != null ? value.hashCode() : 0);    return result;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/foreach_map/StringStringMapEntry.java", "stars": "15", "class": {"name": "StringStringMapEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    return '{' + key.toString() + '=' + value + '}';  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/foreach_map/StringStringMapEntry.java", "stars": "15", "class": {"name": "StringStringMapEntry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getClasssFromPackage", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<Class>", "snippet": "    public static List<Class<?>> getClasssFromPackage(String packageName) {        List<Class<?>> clazzs = new ArrayList<>();        // \u662f\u5426\u5faa\u73af\u641c\u7d22\u5b50\u5305        boolean recursive = true;        // \u5305\u540d\u5bf9\u5e94\u7684\u8def\u5f84\u540d\u79f0        String packageDirName = packageName.replace('.', '/');        Enumeration<URL> dirs;        try {            dirs = Thread.currentThread().getContextClassLoader().getResources(packageDirName);            while (dirs.hasMoreElements()) {                URL url = dirs.nextElement();                String protocol = url.getProtocol();                if (\"file\".equals(protocol)) {                    String filePath = URLDecoder.decode(url.getFile(), \"UTF-8\");                    findClassInPackageByFile(packageName, filePath, recursive, clazzs);                }            }        } catch (Exception e) {            e.printStackTrace();        }        return clazzs;    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/core/util/SomeUtil.java", "stars": "1", "class": {"name": "SomeUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findClassInPackageByFile", "params": ["String", "String", "boolean", "List<Class>"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void findClassInPackageByFile(String packageName, String filePath, final boolean recursive,                                                List<Class<?>> clazzs) {        File dir = new File(filePath);        if (!dir.exists() || !dir.isDirectory()) {            return;        }        // \u5728\u7ed9\u5b9a\u7684\u76ee\u5f55\u4e0b\u627e\u5230\u6240\u6709\u7684\u6587\u4ef6\uff0c\u5e76\u4e14\u8fdb\u884c\u6761\u4ef6\u8fc7\u6ee4        File[] dirFiles = dir.listFiles(new FileFilter() {            @Override            public boolean accept(File file) {                boolean acceptDir = recursive && file.isDirectory();// \u63a5\u53d7dir\u76ee\u5f55                boolean acceptClass = file.getName().endsWith(\"class\");// \u63a5\u53d7class\u6587\u4ef6                return acceptDir || acceptClass;            }        });        for (File file : dirFiles) {            if (file.isDirectory()) {                findClassInPackageByFile(packageName + \".\" + file.getName(), file.getAbsolutePath(), recursive, clazzs);            } else {                String className = file.getName().substring(0, file.getName().length() - 6);                try {                    clazzs.add(Thread.currentThread().getContextClassLoader().loadClass(packageName + \".\" + className));                } catch (Exception e) {                    e.printStackTrace();                }            }        }    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/core/util/SomeUtil.java", "stars": "1", "class": {"name": "SomeUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parse", "params": ["JSONObject"], "throws": null, "modifiers": ["public"], "return_type": "List<HashMap>", "snippet": "\tpublic List<HashMap<String,Object>> parse(JSONObject jObject){\t\t\t\t\t\tJSONArray jCountries = null;\t\ttry {\t\t\t\t\t// Retrieves all the elements in the 'countries' array \t\t\tjCountries = jObject.getJSONArray(\"countries\");\t\t} catch (JSONException e) {\t\t\te.printStackTrace();\t\t}\t\t\t\t // Invoking getCountries with the array of json object\t\t // where each json object represent a country\t\treturn getCountries(jCountries);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/imageloaderListViewWithJSONFromURL/src/in/wptrafficanalyzer/listviewwithjsonfromurl/CountryJSONParser.java", "stars": "74", "class": {"name": "CountryJSONParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCountries", "params": ["JSONArray"], "throws": null, "modifiers": ["private"], "return_type": "List<HashMap>", "snippet": "\tprivate List<HashMap<String, Object>> getCountries(JSONArray jCountries){\t\tint countryCount = jCountries.length();\t\tList<HashMap<String, Object>> countryList = new ArrayList<HashMap<String,Object>>();\t\tHashMap<String, Object> country = null;\t\t\t// Taking each country, parses and adds to list object \t\tfor(int i=0; i<countryCount;i++){\t\t\ttry {\t\t\t\t// Call getCountry with country JSON object to parse the country \t\t\t\tcountry = getCountry((JSONObject)jCountries.get(i));\t\t\t\tcountryList.add(country);\t\t\t} catch (JSONException e) {\t\t\t\te.printStackTrace();\t\t\t}\t\t}\t\t\t\treturn countryList;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/imageloaderListViewWithJSONFromURL/src/in/wptrafficanalyzer/listviewwithjsonfromurl/CountryJSONParser.java", "stars": "74", "class": {"name": "CountryJSONParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCountry", "params": ["JSONObject"], "throws": null, "modifiers": ["private"], "return_type": "HashMap<String,Object>", "snippet": "\tprivate HashMap<String, Object> getCountry(JSONObject jCountry){\t\tHashMap<String, Object> country = new HashMap<String, Object>();\t\tString countryName = \"\";\t\tString flag=\"\";\t\tString language = \"\";\t\tString capital = \"\";\t\tString currencyCode = \"\";\t\tString currencyName = \"\";\t\t\t\t\t\ttry {\t\t\tcountryName = jCountry.getString(\"countryname\");\t\t\tflag = jCountry.getString(\"flag\");\t\t\tlanguage = jCountry.getString(\"language\");\t\t\tcapital = jCountry.getString(\"capital\");\t\t\tcurrencyCode = jCountry.getJSONObject(\"currency\").getString(\"code\");\t\t\tcurrencyName = jCountry.getJSONObject(\"currency\").getString(\"currencyname\");\t\t\t\t\t\tString details =        \"Language : \" + language + \"\\n\" +                    \"Capital : \" + capital + \"\\n\" +                    \"Currency : \" + currencyName + \"(\" + currencyCode + \")\";\t\t\t\t\t\tcountry.put(\"country\", countryName);\t\t\tcountry.put(\"flag\", R.drawable.blank);\t\t\tcountry.put(\"flag_path\", flag);\t\t\tcountry.put(\"details\", details);\t\t\t\t\t} catch (JSONException e) {\t\t\t\t\t\te.printStackTrace();\t\t}\t\t\t\treturn country;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/imageloaderListViewWithJSONFromURL/src/in/wptrafficanalyzer/listviewwithjsonfromurl/CountryJSONParser.java", "stars": "74", "class": {"name": "CountryJSONParser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "configStorage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "WxMpConfigStorage", "snippet": "  public WxMpConfigStorage configStorage() {    WxMpDefaultConfigImpl configStorage = new WxMpDefaultConfigImpl();    configStorage.setAppId(this.properties.getAppId());    configStorage.setSecret(this.properties.getSecret());    configStorage.setToken(this.properties.getToken());    configStorage.setAesKey(this.properties.getAesKey());    return configStorage;  }", "url": "https://raw.githubusercontent.com/visayang/wechatdev/master/src/main/java/com/chad/wechatdev/commons/config/WechatMpConfiguration.java", "stars": "2", "class": {"name": "WechatMpConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "wxMpService", "params": ["WxMpConfigStorage"], "throws": null, "modifiers": ["public"], "return_type": "WxMpService", "snippet": "  public WxMpService wxMpService(WxMpConfigStorage configStorage) {//        WxMpService wxMpService = new me.chanjar.weixin.mp.api.impl.okhttp.WxMpServiceImpl();//        WxMpService wxMpService = new me.chanjar.weixin.mp.api.impl.jodd.WxMpServiceImpl();//        WxMpService wxMpService = new me.chanjar.weixin.mp.api.impl.apache.WxMpServiceImpl();    WxMpService wxMpService = new me.chanjar.weixin.mp.api.impl.WxMpServiceImpl();    wxMpService.setWxMpConfigStorage(configStorage);    return wxMpService;  }", "url": "https://raw.githubusercontent.com/visayang/wechatdev/master/src/main/java/com/chad/wechatdev/commons/config/WechatMpConfiguration.java", "stars": "2", "class": {"name": "WechatMpConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "router", "params": ["WxMpService"], "throws": null, "modifiers": ["public"], "return_type": "WxMpMessageRouter", "snippet": "  public WxMpMessageRouter router(WxMpService wxMpService) {    final WxMpMessageRouter newRouter = new WxMpMessageRouter(wxMpService);    // \u8bb0\u5f55\u6240\u6709\u4e8b\u4ef6\u7684\u65e5\u5fd7 \uff08\u5f02\u6b65\u6267\u884c\uff09    newRouter.rule().handler(this.logHandler).next();    // \u63a5\u6536\u5ba2\u670d\u4f1a\u8bdd\u7ba1\u7406\u4e8b\u4ef6    newRouter.rule().async(false).msgType(XmlMsgType.EVENT)        .event(WxMpEventConstants.CustomerService.KF_CREATE_SESSION)        .handler(this.kfSessionHandler).end();    newRouter.rule().async(false).msgType(XmlMsgType.EVENT)        .event(WxMpEventConstants.CustomerService.KF_CLOSE_SESSION)        .handler(this.kfSessionHandler)        .end();    newRouter.rule().async(false).msgType(XmlMsgType.EVENT)        .event(WxMpEventConstants.CustomerService.KF_SWITCH_SESSION)        .handler(this.kfSessionHandler).end();    // \u95e8\u5e97\u5ba1\u6838\u4e8b\u4ef6    newRouter.rule().async(false).msgType(XmlMsgType.EVENT)        .event(WxMpEventConstants.POI_CHECK_NOTIFY)        .handler(this.storeCheckNotifyHandler).end();    // \u81ea\u5b9a\u4e49\u83dc\u5355\u4e8b\u4ef6    newRouter.rule().async(false).msgType(XmlMsgType.EVENT)        .event(MenuButtonType.CLICK).handler(this.getMenuHandler()).end();    // \u70b9\u51fb\u83dc\u5355\u8fde\u63a5\u4e8b\u4ef6    newRouter.rule().async(false).msgType(XmlMsgType.EVENT)        .event(MenuButtonType.VIEW).handler(this.nullHandler).end();    // \u5173\u6ce8\u4e8b\u4ef6    newRouter.rule().async(false).msgType(XmlMsgType.EVENT)        .event(EventType.SUBSCRIBE).handler(this.getSubscribeHandler())        .end();    // \u53d6\u6d88\u5173\u6ce8\u4e8b\u4ef6    newRouter.rule().async(false).msgType(XmlMsgType.EVENT)        .event(EventType.UNSUBSCRIBE)        .handler(this.getUnsubscribeHandler()).end();    // \u4e0a\u62a5\u5730\u7406\u4f4d\u7f6e\u4e8b\u4ef6    newRouter.rule().async(false).msgType(XmlMsgType.EVENT)        .event(EventType.LOCATION).handler(this.getLocationHandler())        .end();    // \u63a5\u6536\u5730\u7406\u4f4d\u7f6e\u6d88\u606f    newRouter.rule().async(false).msgType(XmlMsgType.LOCATION)        .handler(this.getLocationHandler()).end();    // \u626b\u7801\u4e8b\u4ef6    newRouter.rule().async(false).msgType(XmlMsgType.EVENT)        .event(EventType.SCAN).handler(this.getScanHandler()).end();    // \u9ed8\u8ba4    newRouter.rule().async(false).handler(this.getMsgHandler()).end();    return newRouter;  }", "url": "https://raw.githubusercontent.com/visayang/wechatdev/master/src/main/java/com/chad/wechatdev/commons/config/WechatMpConfiguration.java", "stars": "2", "class": {"name": "WechatMpConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMenuHandler", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "MenuHandler", "snippet": "  protected MenuHandler getMenuHandler() {    return this.menuHandler;  }", "url": "https://raw.githubusercontent.com/visayang/wechatdev/master/src/main/java/com/chad/wechatdev/commons/config/WechatMpConfiguration.java", "stars": "2", "class": {"name": "WechatMpConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSubscribeHandler", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "SubscribeHandler", "snippet": "  protected SubscribeHandler getSubscribeHandler() {    return this.subscribeHandler;  }", "url": "https://raw.githubusercontent.com/visayang/wechatdev/master/src/main/java/com/chad/wechatdev/commons/config/WechatMpConfiguration.java", "stars": "2", "class": {"name": "WechatMpConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUnsubscribeHandler", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "UnsubscribeHandler", "snippet": "  protected UnsubscribeHandler getUnsubscribeHandler() {    return this.unsubscribeHandler;  }", "url": "https://raw.githubusercontent.com/visayang/wechatdev/master/src/main/java/com/chad/wechatdev/commons/config/WechatMpConfiguration.java", "stars": "2", "class": {"name": "WechatMpConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLocationHandler", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "AbstractHandler", "snippet": "  protected AbstractHandler getLocationHandler() {    return this.locationHandler;  }", "url": "https://raw.githubusercontent.com/visayang/wechatdev/master/src/main/java/com/chad/wechatdev/commons/config/WechatMpConfiguration.java", "stars": "2", "class": {"name": "WechatMpConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMsgHandler", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "MsgHandler", "snippet": "  protected MsgHandler getMsgHandler() {    return this.msgHandler;  }", "url": "https://raw.githubusercontent.com/visayang/wechatdev/master/src/main/java/com/chad/wechatdev/commons/config/WechatMpConfiguration.java", "stars": "2", "class": {"name": "WechatMpConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getScanHandler", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "ScanHandler", "snippet": "  protected ScanHandler getScanHandler() {    return this.scanHandler;  }", "url": "https://raw.githubusercontent.com/visayang/wechatdev/master/src/main/java/com/chad/wechatdev/commons/config/WechatMpConfiguration.java", "stars": "2", "class": {"name": "WechatMpConfiguration", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getCount() {\t\treturn list.size();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/HorizontalScrollViewActivity/src/com/krish/horizontalscrollview/CenterLockHorizontalScrollview/CustomListAdapter.java", "stars": "74", "class": {"name": "CustomListAdapter", "extends": "ArrayAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getItem(int position) {\t\treturn list.get(position);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/HorizontalScrollViewActivity/src/com/krish/horizontalscrollview/CenterLockHorizontalScrollview/CustomListAdapter.java", "stars": "74", "class": {"name": "CustomListAdapter", "extends": "ArrayAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getView", "params": ["int", "View", "ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "\tpublic View getView(final int position, View convertView, ViewGroup parent) {\t\tRelativeLayout layout;\t\tif (convertView == null)\t\t{\t\t\tlayout = (RelativeLayout) View.inflate(context, layoutId, null);\t\t\tholder = new Holder();\t\t\tholder.title = (TextView) layout.findViewById(R.id.txtNewsSource);\t\t\tholder.aapimage=(ImageView)layout.findViewById(R.id.imageView1);\t\t\tlayout.setTag(holder);\t\t} \t\telse \t\t{\t\t\tlayout = (RelativeLayout) convertView;\t\t\tview = layout;\t\t\tholder = (Holder) layout.getTag();\t\t}\t\tString newsSource = getItem(position);\t\tholder.title.setText(newsSource);\t\treturn layout;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/HorizontalScrollViewActivity/src/com/krish/horizontalscrollview/CenterLockHorizontalScrollview/CustomListAdapter.java", "stars": "74", "class": {"name": "CustomListAdapter", "extends": "ArrayAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurrentPosition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getCurrentPosition(){\t\treturn currPosition;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/HorizontalScrollViewActivity/src/com/krish/horizontalscrollview/CenterLockHorizontalScrollview/CustomListAdapter.java", "stars": "74", "class": {"name": "CustomListAdapter", "extends": "ArrayAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "precioMedioAutomovil", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int precioMedioAutomovil() {        return 7800000;    }", "url": "https://raw.githubusercontent.com/EduarAlexis/SOLID/master/src/main/java/Solid/O/Renault_O.java", "stars": "1", "class": {"name": "Renault_O", "extends": "AbsAutomovil_O", "implements": null, "modifiers": ["public"]}}, {"method_name": "numAsientos", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int numAsientos() {        return 5;    }", "url": "https://raw.githubusercontent.com/EduarAlexis/SOLID/master/src/main/java/Solid/O/Renault_O.java", "stars": "1", "class": {"name": "Renault_O", "extends": "AbsAutomovil_O", "implements": null, "modifiers": ["public"]}}, {"method_name": "distribuerMasques_devrait_retourner_la_page_d_erreur_quand_il_y_a_une_exception_avec_le_status_500", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "    void distribuerMasques_devrait_retourner_la_page_d_erreur_quand_il_y_a_une_exception_avec_le_status_500() throws Exception {        // Given        String messageException = \"Exception durant la distribution de masques\";        doThrow(new RuntimeException(messageException)).when(distribuerMasques).distribuer(anyList());        Cookie cookieTypeRemettant = new Cookie(NOM_COOKIE_TYPE_REMETTANT, \"CCAS\");        Cookie cookieCodePostal = new Cookie(NOM_COOKIE_CODE_POSTAL_REMETTANT, \"31000\");        // When Then        mockMvc.perform(MockMvcRequestBuilders.post(\"/distribution-masques\")                .cookie(cookieTypeRemettant, cookieCodePostal)                .param(\"hashIdentite\", \"08c71b89ac55b6826a2daa9fe89edea26de\")                .param(\"nombreMineurs\", \"2\")                .param(\"modeSaisie\", SCAN.name())                .param(\"nbMasquesAdulteUsageUnique\", \"5\")                .param(\"nbMasquesAdulteReutilisables\", \"33\"))                .andExpect(view().name(\"erreur-500\"))                .andExpect(status().isInternalServerError())                .andExpect(content().string(containsString(\"500\")));    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/test/java/fr/gouv/interieur/dmgp/remettant/application/ui/DefaultExceptionHandlerTest.java", "stars": "5", "class": {"name": "DefaultExceptionHandlerTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        // \u672a\u4f7f\u7528\u7b80\u5355\u5de5\u5382        Audi audi = new Audi();        audi.run();        Byd byd = new Byd();        byd.run();//        // \u4f7f\u7528\u7b80\u5355\u5de5\u5382//        Car car = CarFactory.createCar(\"\u5965\u8fea\");//        // \u9632\u6b62\u7a7a\u6307\u9488\u5f02\u5e38//        if (car == null){//            return;//        }//        car.run();        Car car = CarFactory.createCar(Audi.class);        if (car == null){            return;        }        car.run();    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/simplefactory/Drive.java", "stars": "2", "class": {"name": "Drive", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "valueChanged", "params": ["ListSelectionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void valueChanged(ListSelectionEvent e) {        String path= ProjectViewer.unitString+\"\\\\\"+ GUI.pvv5.elementAt(GUI.pvl5.getSelectedIndex()).toString();        File file=new File(path);        StringBuilder result = new StringBuilder();        BufferedReader bf= null;        System.out.println(path);        try {            bf = new BufferedReader(new FileReader(file));            String s;            BufferedReader bf1=new BufferedReader(new FileReader(file));            String s1;            while((s1 = bf1.readLine())!=null){                result.append(System.lineSeparator()+s1);            }            bf.close();            GUI.jt1.setText(result.toString());        } catch (IOException ex) {            ex.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/4156/MindustryModMaker/master/src/Listener/UnitProjectListener.java", "stars": "2", "class": {"name": "UnitProjectListener", "extends": null, "implements": ["ListSelectionListener"], "modifiers": ["public"]}}, {"method_name": "readLine", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String readLine() {        try {            if (bufferedReader != null) {                return bufferedReader.readLine();            }        } catch (IOException e) {            System.err.println(\"Error reading file\");        }        return null;    }", "url": "https://raw.githubusercontent.com/gustavost645/tarefa_reviews/master/src/main/java/br/univates/tarefareviewv2/SimpleReader.java", "stars": "2", "class": {"name": "SimpleReader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "close", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void close() {        try {            if (bufferedReader != null) {                bufferedReader.close();            }        } catch(IOException e) {            System.err.println(\"Error closing file\");        }        bufferedReader = null;    }", "url": "https://raw.githubusercontent.com/gustavost645/tarefa_reviews/master/src/main/java/br/univates/tarefareviewv2/SimpleReader.java", "stars": "2", "class": {"name": "SimpleReader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onSuccess", "params": ["DependencyInstanceContext"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onSuccess(final DependencyInstanceContext depContext) {    this.service.markDependencySuccess(depContext);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/DependencyInstanceCallbackImpl.java", "stars": "18", "class": {"name": "DependencyInstanceCallbackImpl", "extends": null, "implements": ["DependencyInstanceCallback"], "modifiers": ["public"]}}, {"method_name": "onCancel", "params": ["DependencyInstanceContext"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onCancel(final DependencyInstanceContext depContext) {    this.service.markDependencyCancelled(depContext);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/DependencyInstanceCallbackImpl.java", "stars": "18", "class": {"name": "DependencyInstanceCallbackImpl", "extends": null, "implements": ["DependencyInstanceCallback"], "modifiers": ["public"]}}, {"method_name": "loginUserFromKeytab", "params": ["Configuration", "String", "String"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "UserGroupInformation", "snippet": "    public static UserGroupInformation loginUserFromKeytab(final Configuration conf, String  user, String path) throws Exception {        lock.lock();        try{            UserGroupInformation.setConfiguration(conf);            return UserGroupInformation.loginUserFromKeytabAndReturnUGI(user, path);        }catch(Exception e){            String message = e.getMessage();            if(StringUtils.isNotBlank(message)){                //Avoid path information in message                String[] messageArray = message.split(\" \");                for(int i = 0; i < messageArray.length; i++){                    if(messageArray[i].contains(path)){                        messageArray[i] = \"\";                    }                }                message = StringUtils.join(messageArray, \" \");            }            throw new DataAccessException(message, e);        }finally{            lock.unlock();        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/conns/UserGroupInformationWrapper.java", "stars": "23", "class": {"name": "UserGroupInformationWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createProxyUser", "params": ["Configuration", "String"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "UserGroupInformation", "snippet": "    public static UserGroupInformation createProxyUser(final Configuration conf, String user) throws Exception{        lock.lock();        try{            UserGroupInformation.setLoginUser(null);            UserGroupInformation.setConfiguration(conf);            return UserGroupInformation.createProxyUser(user, UserGroupInformation.getLoginUser());        }finally{            lock.unlock();        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/conns/UserGroupInformationWrapper.java", "stars": "23", "class": {"name": "UserGroupInformationWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createRemoteUser", "params": ["Configuration", "String"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "UserGroupInformation", "snippet": "    public static UserGroupInformation createRemoteUser(final Configuration conf, String user) throws Exception{        lock.lock();        try{            UserGroupInformation.setLoginUser(null);            UserGroupInformation.setConfiguration(conf);            return UserGroupInformation.createRemoteUser(user);        }finally{            lock.unlock();        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/conns/UserGroupInformationWrapper.java", "stars": "23", "class": {"name": "UserGroupInformationWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setConfiguration", "params": ["Configuration", "Callable"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setConfiguration(Configuration conf, Callable execute) throws Exception{        lock.lock();        try{            UserGroupInformation.setConfiguration(conf);            execute.call();        }finally{            lock.unlock();        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/conns/UserGroupInformationWrapper.java", "stars": "23", "class": {"name": "UserGroupInformationWrapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "appendId", "params": ["Identifier", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Identifier", "snippet": "\tpublic static Identifier appendId(Identifier path, String str) {\t\treturn new Identifier(path.getNamespace(), path.getPath() + str);\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/util/CBTUtil.java", "stars": "3", "class": {"name": "CBTUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "prependId", "params": ["Identifier", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Identifier", "snippet": "\tpublic static Identifier prependId(Identifier path, String str) {\t\treturn new Identifier(path.getNamespace(), str + path.getPath());\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/util/CBTUtil.java", "stars": "3", "class": {"name": "CBTUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "ensurePngExtension", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String ensurePngExtension(String string) {\t\tif(!string.endsWith(\".png\")) {\t\t\treturn string + \".png\";\t\t}\t\treturn string;\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/util/CBTUtil.java", "stars": "3", "class": {"name": "CBTUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "mapAnyMatch", "params": ["Collection<T>", "Function<T,U>", "Predicate<U>"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static <T, U> boolean mapAnyMatch(Collection<? extends T> collection, Function<? super T, ? extends U> mapper, Predicate<U> predicate) {\t\tfor(T t : collection) {\t\t\tif(predicate.test(mapper.apply(t))) {\t\t\t\treturn true;\t\t\t}\t\t}\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/util/CBTUtil.java", "stars": "3", "class": {"name": "CBTUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "allMatchThrowable", "params": ["Collection<T>", "ThrowingPredicate<T,U>"], "throws": ["U"], "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static <T, U extends Throwable> boolean allMatchThrowable(Collection<? extends T> collection, ThrowingPredicate<T, U> predicate) throws U {\t\tfor(T t : collection) {\t\t\tif(!predicate.test(t)) {\t\t\t\treturn false;\t\t\t}\t\t}\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/util/CBTUtil.java", "stars": "3", "class": {"name": "CBTUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "satisfiesAny", "params": ["Collection<IntPredicate>", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean satisfiesAny(Collection<IntPredicate> predicates, int i) {\t\tfor(IntPredicate p : predicates) {\t\t\tif(p.test(i)) {\t\t\t\treturn true;\t\t\t}\t\t}\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/util/CBTUtil.java", "stars": "3", "class": {"name": "CBTUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "directoryOf", "params": ["Identifier"], "throws": null, "modifiers": ["public", "static"], "return_type": "Identifier", "snippet": "\tpublic static Identifier directoryOf(Identifier id) {\t\tString path = id.getPath();\t\treturn new Identifier(id.getNamespace(), path.substring(0, path.lastIndexOf('/')));\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/util/CBTUtil.java", "stars": "3", "class": {"name": "CBTUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fileNameOf", "params": ["Identifier"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String fileNameOf(Identifier id) {\t\tString path = id.getPath();\t\treturn path.substring(path.lastIndexOf('/'), path.length());\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/util/CBTUtil.java", "stars": "3", "class": {"name": "CBTUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "stripBlankVariants", "params": ["ModelIdentifier"], "throws": null, "modifiers": ["public", "static"], "return_type": "Identifier", "snippet": "\tpublic static Identifier stripBlankVariants(ModelIdentifier modelId) {\t\tif(modelId.getVariant().equals(\"\")) {\t\t\treturn new Identifier(modelId.getNamespace(), modelId.getPath());\t\t}\t\treturn modelId;\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/util/CBTUtil.java", "stars": "3", "class": {"name": "CBTUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "stripVariants", "params": ["ModelIdentifier"], "throws": null, "modifiers": ["public", "static"], "return_type": "Identifier", "snippet": "\tpublic static Identifier stripVariants(ModelIdentifier modelId) {\t\treturn new Identifier(modelId.getNamespace(), modelId.getPath());\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/util/CBTUtil.java", "stars": "3", "class": {"name": "CBTUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "copy", "params": ["BufferedImage"], "throws": null, "modifiers": ["public", "static"], "return_type": "BufferedImage", "snippet": "\tpublic static BufferedImage copy(BufferedImage image) {\t\tBufferedImage newImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_ARGB);\t\tfor(int x = 0; x < image.getWidth(); x++) {\t\t\tfor(int y = 0; y < image.getHeight(); y++) {\t\t\t\tnewImage.setRGB(x, y, image.getRGB(x, y));\t\t\t}\t\t}\t\treturn newImage;\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/util/CBTUtil.java", "stars": "3", "class": {"name": "CBTUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "actualMod", "params": ["int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "\tpublic static int actualMod(int in, int modulo) {\t\tint mod = in % modulo;\t\tif(mod < 0) {\t\t\tmod += modulo;\t\t}\t\treturn mod;\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/util/CBTUtil.java", "stars": "3", "class": {"name": "CBTUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCmdType", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "CommandType", "snippet": "    protected CommandType getCmdType() {        return CommandType.GROUP;    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/GroupCmdTest.java", "stars": "6", "class": {"name": "GroupCmdTest", "extends": "CommandTest", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setup", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setup() {        testCommand = new GroupCmd(TITLE_ARGUMENT);        testLibrary = new LibraryData();        List<BookEntry> bookData = new ArrayList<>();        bookData.add(new BookEntry(\"B Title\", new String[] { \"B Author\" }, 3.2f, \"ISBNB\", 500));        bookData.add(new BookEntry(\"A Title\", new String[] { \"A Author\" }, 4.3f, \"ISBNA\", 400));        bookData.add(new BookEntry(\"B Title 2\", new String[] { \"B Author\" }, 4.3f, \"ISBNB2\", 400));        bookData.add(new BookEntry(\"C Title\", new String[] { \"C Author\" }, 1.3f, \"ISBNC\", 300));        bookData.add(new BookEntry(\"A Title 2\", new String[] { \"A Author\" }, 1.3f, \"ISBNA2\", 300));        bookData.add(new BookEntry(\"D Title\", new String[] { \"D Author\" }, 1.3f, \"ISBND\", 300));        bookData.add(new BookEntry(\"A Title 3\", new String[] { \"A Author\" }, 1.3f, \"ISBNA3\", 300));        bookData.add(new BookEntry(\"F Title\", new String[] { \"F Author\" }, 1.3f, \"ISBNF\", 300));        bookData.add(new BookEntry(\"E Title\", new String[] { \"E Author\" }, 1.3f, \"ISBNE\", 300));        FieldTestUtils.setPrivateField(testLibrary, testLibrary.getClass(), \"books\", bookData);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/GroupCmdTest.java", "stars": "6", "class": {"name": "GroupCmdTest", "extends": "CommandTest", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "checkOutputLineCount", "params": ["int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void checkOutputLineCount(int expectedLines) {        String[] executeStdOutLines = CommandTestUtils.captureExecuteStdOutputLines(testCommand, testLibrary);        assertEquals(\"Unexpected amount of output lines for group output.\", expectedLines, executeStdOutLines.length);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/GroupCmdTest.java", "stars": "6", "class": {"name": "GroupCmdTest", "extends": "CommandTest", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "checkOutputLinesIgnoringOrder", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void checkOutputLinesIgnoringOrder(String[] expectedOutputLines) {        CommandTestUtils.checkExecuteConsoleOutputLines(expectedOutputLines, testCommand, testLibrary);        checkOutputLineCount(expectedOutputLines.length);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/GroupCmdTest.java", "stars": "6", "class": {"name": "GroupCmdTest", "extends": "CommandTest", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "checkGroupOutputOrder", "params": ["String", "List<String>"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void checkGroupOutputOrder(String[] executeStdOutLines, List<String> expectedGroups) {        List<String> actualGroups = new ArrayList<>();        for (int i = 0; i < executeStdOutLines.length; i++) {            String currentLine = executeStdOutLines[i].strip();            if (currentLine.startsWith(GROUP_TITLE_PREFIX)) {                actualGroups.add(currentLine.substring(GROUP_TITLE_PREFIX.length()));            }        }        assertEquals(\"Groups not printed in expected order.\", expectedGroups, actualGroups);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/GroupCmdTest.java", "stars": "6", "class": {"name": "GroupCmdTest", "extends": "CommandTest", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "assertIsTrue", "params": ["boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void assertIsTrue(boolean condition) {    if (!condition) {      throw new AssertionError(\"Expected condition to be true\");    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/util/AppRTCUtils.java", "stars": "2", "class": {"name": "AppRTCUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getThreadInfo", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String getThreadInfo() {    return \"@[name=\" + Thread.currentThread().getName() + \", id=\" + Thread.currentThread().getId()        + \"]\";  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/util/AppRTCUtils.java", "stars": "2", "class": {"name": "AppRTCUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "logDeviceInfo", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void logDeviceInfo(String tag) {    Log.d(tag, \"Android SDK: \" + Build.VERSION.SDK_INT + \", \"            + \"Release: \" + Build.VERSION.RELEASE + \", \"            + \"Brand: \" + Build.BRAND + \", \"            + \"Device: \" + Build.DEVICE + \", \"            + \"Id: \" + Build.ID + \", \"            + \"Hardware: \" + Build.HARDWARE + \", \"            + \"Manufacturer: \" + Build.MANUFACTURER + \", \"            + \"Model: \" + Build.MODEL + \", \"            + \"Product: \" + Build.PRODUCT);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/util/AppRTCUtils.java", "stars": "2", "class": {"name": "AppRTCUtils", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "enable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void enable() {        configuration = plugin.getFileLifecycle().getConfiguration();        loadDatabase();    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/lifecycle/DatabaseLifecycle.java", "stars": "2", "class": {"name": "DatabaseLifecycle", "extends": "Lifecycle", "implements": null, "modifiers": ["public"]}}, {"method_name": "loadDatabase", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void loadDatabase() {        type = configuration.getString(\"database.type\");        if (type == null) {            return;        }        if (type.equalsIgnoreCase(\"SQLite\")) {            useSQLite();            return;        }        if (type.equalsIgnoreCase(\"MySQL\")) {            useMySQL();            return;        }        plugin.log(\"No database type found, using SQLite.\");        useSQLite();    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/lifecycle/DatabaseLifecycle.java", "stars": "2", "class": {"name": "DatabaseLifecycle", "extends": "Lifecycle", "implements": null, "modifiers": ["public"]}}, {"method_name": "useSQLite", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void useSQLite() {        String schema = plugin.getConfig().getString(\"database.schema\");        databaseConnection = new SQLiteConnection(new File(plugin.getDataFolder(), schema + \".db\"));        databaseConnection.openConnection();    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/lifecycle/DatabaseLifecycle.java", "stars": "2", "class": {"name": "DatabaseLifecycle", "extends": "Lifecycle", "implements": null, "modifiers": ["public"]}}, {"method_name": "useMySQL", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void useMySQL() {        databaseConnection = new MySQLConnection(                configuration.getString(\"database.hostname\"),                configuration.getString(\"database.username\"),                configuration.getString(\"database.password\"),                configuration.getString(\"database.schema\")        );        databaseConnection.openConnection();    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/lifecycle/DatabaseLifecycle.java", "stars": "2", "class": {"name": "DatabaseLifecycle", "extends": "Lifecycle", "implements": null, "modifiers": ["public"]}}, {"method_name": "execute", "params": ["JobExecutionContext"], "throws": ["JobExecutionException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void execute(JobExecutionContext context) throws JobExecutionException {        ExecutorConfiguration configuration = null;        try {            configuration = AppUtil.getBean(ExecutorConfiguration.class);        }catch(Exception e){            //Ignore        }        if(null == configuration){            return;        }        String historyPath = configuration.getJobLogHistory();        Long limitNum = configuration.getJobLogLimitNum();        if(StringUtils.isNotBlank(historyPath)){            File historyDir = new File(historyPath);            if(historyDir.isDirectory()){                List<File> logFiles = new ArrayList<>(FileUtils.listFiles(historyDir, new IOFileFilter() {                    @Override                    public boolean accept(File file) {                        return true;                    }                    @Override                    public boolean accept(File file, String s) {                        return true;                    }                }, null));                LOG.info(\"Scan to clean history log in [\" + historyPath + \"], actual number: [\" + logFiles.size() + \"/\" + limitNum + \"]\");                StringBuilder cleanPrint = new StringBuilder(\"\");                if(logFiles.size() > limitNum) {                    long count = 0;                    //First to do sort                    logFiles.sort((o1, o2) -> {                        long diff = o1.lastModified() - o2.lastModified();                        if (diff > 0)                            return -1;                        else if (diff == 0)                            return 0;                        else                            return 1;                    });                    for(int i = Math.toIntExact(limitNum); i < logFiles.size(); i ++, count++){                        File f = logFiles.get(i);                        if(!f.delete()){                            LOG.trace(\"Fail to delete logFile:[\" + f.getName() +\"] in history log directory\");                        }else{                            if(count == 0){                                cleanPrint.append(f.getName());                            }else if(count < 10){                                cleanPrint.append(\",\").append(f.getName());                            }                        }                    }                    LOG.info(\"Final to delete [\" + count + \"] logs, [\" + cleanPrint.toString() + \" ...]\");                }            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/backend/LogCleanerJob.java", "stars": "23", "class": {"name": "LogCleanerJob", "extends": null, "implements": ["Job"], "modifiers": ["public"]}}, {"method_name": "ping", "params": ["int", "int"], "throws": null, "modifiers": [], "return_type": "boolean", "snippet": "    boolean ping(int maxAttempts, int startTimeout) {        checkArgument(maxAttempts >= 1);        checkArgument(startTimeout > 0);        int timeout = startTimeout;        int attempts = 0;        while (attempts < maxAttempts) {            try {                Future<Boolean> pingFuture = pingExecutor.submit(new PingCallable());                boolean pinged = pingFuture.get(timeout, MILLISECONDS);                if (pinged) {                    return true;                }            } catch (TimeoutException e) {                HttpProxyCacheDebuger.printfWarning(\"Error pinging server (attempt: \" + attempts + \", timeout: \" + timeout + \"). \");            } catch (InterruptedException | ExecutionException e) {                HttpProxyCacheDebuger.printfError(\"Error pinging server due to unexpected error\", e);            }            attempts++;            timeout *= 2;        }        String error = String.format(Locale.US, \"Error pinging server (attempts: %d, max timeout: %d). \" +                        \"If you see this message, please, report at https://github.com/danikula/AndroidVideoCache/issues/134. \" +                        \"Default proxies are: %s\"                , attempts, timeout / 2, getDefaultProxies());        HttpProxyCacheDebuger.printfError(error, new ProxyCacheException(error));        return false;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/Pinger.java", "stars": "2", "class": {"name": "Pinger", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getDefaultProxies", "params": [], "throws": null, "modifiers": ["private"], "return_type": "List<Proxy>", "snippet": "    private List<Proxy> getDefaultProxies() {        try {            ProxySelector defaultProxySelector = ProxySelector.getDefault();            return defaultProxySelector.select(new URI(getPingUrl()));        } catch (URISyntaxException e) {            throw new IllegalStateException(e);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/Pinger.java", "stars": "2", "class": {"name": "Pinger", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "isPingRequest", "params": ["String"], "throws": null, "modifiers": [], "return_type": "boolean", "snippet": "    boolean isPingRequest(String request) {        return PING_REQUEST.equals(request);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/Pinger.java", "stars": "2", "class": {"name": "Pinger", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "responseToPing", "params": ["Socket"], "throws": ["IOException"], "modifiers": [], "return_type": "void", "snippet": "    void responseToPing(Socket socket) throws IOException {        OutputStream out = socket.getOutputStream();        out.write(\"HTTP/1.1 200 OK\\n\\n\".getBytes());        out.write(PING_RESPONSE.getBytes());    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/Pinger.java", "stars": "2", "class": {"name": "Pinger", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "pingServer", "params": [], "throws": ["ProxyCacheException"], "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean pingServer() throws ProxyCacheException {        String pingUrl = getPingUrl();        HttpUrlSource source = new HttpUrlSource(pingUrl);        try {            byte[] expectedResponse = PING_RESPONSE.getBytes();            source.open(0);            byte[] response = new byte[expectedResponse.length];            source.read(response);            boolean pingOk = Arrays.equals(expectedResponse, response);            HttpProxyCacheDebuger.printfLog(\"Ping response: `\" + new String(response) + \"`, pinged? \" + pingOk);            return pingOk;        } catch (ProxyCacheException e) {            HttpProxyCacheDebuger.printfError(\"Error reading ping response\", e);            return false;        } finally {            source.close();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/Pinger.java", "stars": "2", "class": {"name": "Pinger", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getPingUrl", "params": [], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String getPingUrl() {        return String.format(Locale.US, \"http://%s:%d/%s\", host, port, PING_REQUEST);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/Pinger.java", "stars": "2", "class": {"name": "Pinger", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "call", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "Boolean", "snippet": "        public Boolean call() throws Exception {            return pingServer();        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/Pinger.java", "stars": "2", "class": {"name": "PingCallable", "extends": null, "implements": ["Callable"], "modifiers": ["private"]}}, {"method_name": "findProject", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Mono<Project>", "snippet": "\tpublic Mono<Project> findProject(@DestinationVariable String name) {\t\treturn Mono.just(new Project(name));\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-rsocket/src/main/java/smoketest/rsocket/ProjectController.java", "stars": "47572", "class": {"name": "ProjectController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldSetParameter", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldSetParameter() throws Exception {    TYPE_HANDLER.setParameter(ps, 1, LOCAL_DATE_TIME, null);    verify(ps).setObject(1, LOCAL_DATE_TIME);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/LocalDateTimeTypeHandlerTest.java", "stars": "15", "class": {"name": "LocalDateTimeTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByName() throws Exception {    when(rs.getObject(\"column\", LocalDateTime.class)).thenReturn(LOCAL_DATE_TIME);    assertEquals(LOCAL_DATE_TIME, TYPE_HANDLER.getResult(rs, \"column\"));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/LocalDateTimeTypeHandlerTest.java", "stars": "15", "class": {"name": "LocalDateTimeTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByName() throws Exception {    when(rs.getObject(\"column\", LocalDateTime.class)).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(rs, \"column\"));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/LocalDateTimeTypeHandlerTest.java", "stars": "15", "class": {"name": "LocalDateTimeTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByPosition() throws Exception {    when(rs.getObject(1, LocalDateTime.class)).thenReturn(LOCAL_DATE_TIME);    assertEquals(LOCAL_DATE_TIME, TYPE_HANDLER.getResult(rs, 1));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/LocalDateTimeTypeHandlerTest.java", "stars": "15", "class": {"name": "LocalDateTimeTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByPosition() throws Exception {    when(rs.getObject(1, LocalDateTime.class)).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(rs, 1));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/LocalDateTimeTypeHandlerTest.java", "stars": "15", "class": {"name": "LocalDateTimeTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromCallableStatement() throws Exception {    when(cs.getObject(1, LocalDateTime.class)).thenReturn(LOCAL_DATE_TIME);    assertEquals(LOCAL_DATE_TIME, TYPE_HANDLER.getResult(cs, 1));    verify(cs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/LocalDateTimeTypeHandlerTest.java", "stars": "15", "class": {"name": "LocalDateTimeTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromCallableStatement() throws Exception {    when(cs.getObject(1, LocalDateTime.class)).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(cs, 1));    verify(cs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/LocalDateTimeTypeHandlerTest.java", "stars": "15", "class": {"name": "LocalDateTimeTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "checkOutputHeader", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void checkOutputHeader(String expectedHeader) {        String[] executeStdOutLines = CommandTestUtils.captureExecuteStdOutputLines(testCommand, testLibrary);        assertEquals(\"Unexpected group output header.\", expectedHeader, executeStdOutLines[0]);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/GroupCmdBasicTest.java", "stars": "6", "class": {"name": "GroupCmdBasicTest", "extends": "GroupCmdTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "testParseArgumentsIllegalArgument", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testParseArgumentsIllegalArgument() {        String blankArg = \"\";        CommandTestUtils.checkArgumentInput(testCommand, false, blankArg);        CommandTestUtils.checkArgumentInput(testCommand, false, \"nonsense\");    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/GroupCmdBasicTest.java", "stars": "6", "class": {"name": "GroupCmdBasicTest", "extends": "GroupCmdTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "testParseArgumentsLegalArgument", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testParseArgumentsLegalArgument() {        CommandTestUtils.checkArgumentInput(testCommand, true, TITLE_ARGUMENT);        CommandTestUtils.checkArgumentInput(testCommand, true, AUTHOR_ARGUMENT);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/GroupCmdBasicTest.java", "stars": "6", "class": {"name": "GroupCmdBasicTest", "extends": "GroupCmdTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "testExecuteEmptyBookData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testExecuteEmptyBookData() {        testLibrary = new LibraryData();        List<BookEntry> bookData = Collections.<BookEntry>emptyList();        FieldTestUtils.setPrivateField(testLibrary, testLibrary.getClass(), \"books\", bookData);        String expectedConsoleOutput = \"The library has no book entries.\";        CommandTestUtils.checkExecuteConsoleOutput(testCommand, testLibrary, expectedConsoleOutput);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/GroupCmdBasicTest.java", "stars": "6", "class": {"name": "GroupCmdBasicTest", "extends": "GroupCmdTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "testExecuteGroupByTitleLines", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testExecuteGroupByTitleLines() {        checkOutputLineCount(16); // one for the header, one for each group and one for each title entry    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/GroupCmdBasicTest.java", "stars": "6", "class": {"name": "GroupCmdBasicTest", "extends": "GroupCmdTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "testExecuteGroupByAuthorLines", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testExecuteGroupByAuthorLines() {        testCommand = new GroupCmd(AUTHOR_ARGUMENT);        checkOutputLineCount(16); // one for the header, one for each group and one for each title entry    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/GroupCmdBasicTest.java", "stars": "6", "class": {"name": "GroupCmdBasicTest", "extends": "GroupCmdTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "testExecuteGroupByTitleHeader", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testExecuteGroupByTitleHeader() {        checkOutputHeader(String.format(GROUP_HEADER_OUTPUT, TITLE_ARGUMENT));    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/GroupCmdBasicTest.java", "stars": "6", "class": {"name": "GroupCmdBasicTest", "extends": "GroupCmdTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "testExecuteGroupByAuthorHeader", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testExecuteGroupByAuthorHeader() {        testCommand = new GroupCmd(AUTHOR_ARGUMENT);        checkOutputHeader(String.format(GROUP_HEADER_OUTPUT, AUTHOR_ARGUMENT));    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/GroupCmdBasicTest.java", "stars": "6", "class": {"name": "GroupCmdBasicTest", "extends": "GroupCmdTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "testExecuteGroupByTitleGroups", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testExecuteGroupByTitleGroups() {        String[] executeStdOutLines = CommandTestUtils.captureExecuteStdOutputLines(testCommand, testLibrary);        List<String> expectedGroups = List.of(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\");        checkGroupOutputOrder(executeStdOutLines, expectedGroups);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/GroupCmdBasicTest.java", "stars": "6", "class": {"name": "GroupCmdBasicTest", "extends": "GroupCmdTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "testExecuteGroupByAuthorGroups", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testExecuteGroupByAuthorGroups() {        testCommand = new GroupCmd(AUTHOR_ARGUMENT);        String[] executeStdOutLines = CommandTestUtils.captureExecuteStdOutputLines(testCommand, testLibrary);        List<String> expectedGroups = List.of(\"A Author\", \"B Author\", \"C Author\", \"D Author\", \"E Author\", \"F Author\");        checkGroupOutputOrder(executeStdOutLines, expectedGroups);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/GroupCmdBasicTest.java", "stars": "6", "class": {"name": "GroupCmdBasicTest", "extends": "GroupCmdTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "getString", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getString(String key) {        return mMediaMeta.getString(key);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/IjkMediaMeta.java", "stars": "2", "class": {"name": "IjkMediaMeta", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInt", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getInt(String key) {        return getInt(key, 0);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/IjkMediaMeta.java", "stars": "2", "class": {"name": "IjkMediaMeta", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInt", "params": ["String", "int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getInt(String key, int defaultValue) {        String value = getString(key);        if (TextUtils.isEmpty(value))            return defaultValue;        try {            return Integer.parseInt(value);        } catch (NumberFormatException e) {            return defaultValue;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/IjkMediaMeta.java", "stars": "2", "class": {"name": "IjkMediaMeta", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLong", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getLong(String key) {        return getLong(key, 0);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/IjkMediaMeta.java", "stars": "2", "class": {"name": "IjkMediaMeta", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLong", "params": ["String", "long"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getLong(String key, long defaultValue) {        String value = getString(key);        if (TextUtils.isEmpty(value))            return defaultValue;        try {            return Long.parseLong(value);        } catch (NumberFormatException e) {            return defaultValue;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/IjkMediaMeta.java", "stars": "2", "class": {"name": "IjkMediaMeta", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getParcelableArrayList", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "ArrayList<Bundle>", "snippet": "    public ArrayList<Bundle> getParcelableArrayList(String key) {        return mMediaMeta.getParcelableArrayList(key);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/IjkMediaMeta.java", "stars": "2", "class": {"name": "IjkMediaMeta", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDurationInline", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDurationInline() {        long duration = mDurationUS + 5000;        long secs = duration / 1000000;        long mins = secs / 60;        secs %= 60;        long hours = mins / 60;        mins %= 60;        return String.format(Locale.US, \"%02d:%02d:%02d\", hours, mins, secs);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/IjkMediaMeta.java", "stars": "2", "class": {"name": "IjkMediaMeta", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parse", "params": ["Bundle"], "throws": null, "modifiers": ["public", "static"], "return_type": "IjkMediaMeta", "snippet": "    public static IjkMediaMeta parse(Bundle mediaMeta) {        if (mediaMeta == null)            return null;        IjkMediaMeta meta = new IjkMediaMeta();        meta.mMediaMeta = mediaMeta;        meta.mFormat = meta.getString(IJKM_KEY_FORMAT);        meta.mDurationUS = meta.getLong(IJKM_KEY_DURATION_US);        meta.mStartUS = meta.getLong(IJKM_KEY_START_US);        meta.mBitrate = meta.getLong(IJKM_KEY_BITRATE);        int videoStreamIndex = meta.getInt(IJKM_KEY_VIDEO_STREAM, -1);        int audioStreamIndex = meta.getInt(IJKM_KEY_AUDIO_STREAM, -1);        int subtitleStreamIndex = meta.getInt(IJKM_KEY_TIMEDTEXT_STREAM, -1);        ArrayList<Bundle> streams = meta                .getParcelableArrayList(IJKM_KEY_STREAMS);        if (streams == null)            return meta;        int index = -1;        for (Bundle streamBundle : streams) {            index++;            if (streamBundle == null) {                continue;            }            IjkStreamMeta streamMeta = new IjkStreamMeta(index);            streamMeta.mMeta = streamBundle;            streamMeta.mType = streamMeta.getString(IJKM_KEY_TYPE);            streamMeta.mLanguage = streamMeta.getString(IJKM_KEY_LANGUAGE);            if (TextUtils.isEmpty(streamMeta.mType))                continue;            streamMeta.mCodecName = streamMeta.getString(IJKM_KEY_CODEC_NAME);            streamMeta.mCodecProfile = streamMeta                    .getString(IJKM_KEY_CODEC_PROFILE);            streamMeta.mCodecLongName = streamMeta                    .getString(IJKM_KEY_CODEC_LONG_NAME);            streamMeta.mBitrate = streamMeta.getInt(IJKM_KEY_BITRATE);            if (streamMeta.mType.equalsIgnoreCase(IJKM_VAL_TYPE__VIDEO)) {                streamMeta.mWidth = streamMeta.getInt(IJKM_KEY_WIDTH);                streamMeta.mHeight = streamMeta.getInt(IJKM_KEY_HEIGHT);                streamMeta.mFpsNum = streamMeta.getInt(IJKM_KEY_FPS_NUM);                streamMeta.mFpsDen = streamMeta.getInt(IJKM_KEY_FPS_DEN);                streamMeta.mTbrNum = streamMeta.getInt(IJKM_KEY_TBR_NUM);                streamMeta.mTbrDen = streamMeta.getInt(IJKM_KEY_TBR_DEN);                streamMeta.mSarNum = streamMeta.getInt(IJKM_KEY_SAR_NUM);                streamMeta.mSarDen = streamMeta.getInt(IJKM_KEY_SAR_DEN);                if (videoStreamIndex == index) {                    meta.mVideoStream = streamMeta;                }            } else if (streamMeta.mType.equalsIgnoreCase(IJKM_VAL_TYPE__AUDIO)) {                streamMeta.mSampleRate = streamMeta                        .getInt(IJKM_KEY_SAMPLE_RATE);                streamMeta.mChannelLayout = streamMeta                        .getLong(IJKM_KEY_CHANNEL_LAYOUT);                if (audioStreamIndex == index) {                    meta.mAudioStream = streamMeta;                }            }            meta.mStreams.add(streamMeta);        }        return meta;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/IjkMediaMeta.java", "stars": "2", "class": {"name": "IjkMediaMeta", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getString", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getString(String key) {            return mMeta.getString(key);        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/IjkMediaMeta.java", "stars": "2", "class": {"name": "IjkStreamMeta", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getInt", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getInt(String key) {            return getInt(key, 0);        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/IjkMediaMeta.java", "stars": "2", "class": {"name": "IjkStreamMeta", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getInt", "params": ["String", "int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getInt(String key, int defaultValue) {            String value = getString(key);            if (TextUtils.isEmpty(value))                return defaultValue;            try {                return Integer.parseInt(value);            } catch (NumberFormatException e) {                return defaultValue;            }        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/IjkMediaMeta.java", "stars": "2", "class": {"name": "IjkStreamMeta", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getLong", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "        public long getLong(String key) {            return getLong(key, 0);        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/IjkMediaMeta.java", "stars": "2", "class": {"name": "IjkStreamMeta", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getLong", "params": ["String", "long"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "        public long getLong(String key, long defaultValue) {            String value = getString(key);            if (TextUtils.isEmpty(value))                return defaultValue;            try {                return Long.parseLong(value);            } catch (NumberFormatException e) {                return defaultValue;            }        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/IjkMediaMeta.java", "stars": "2", "class": {"name": "IjkStreamMeta", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getCodecLongNameInline", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getCodecLongNameInline() {            if (!TextUtils.isEmpty(mCodecLongName)) {                return mCodecLongName;            } else if (!TextUtils.isEmpty(mCodecName)) {                return mCodecName;            } else {                return \"N/A\";            }        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/IjkMediaMeta.java", "stars": "2", "class": {"name": "IjkStreamMeta", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getCodecShortNameInline", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getCodecShortNameInline() {            if (!TextUtils.isEmpty(mCodecName)) {                return mCodecName;            } else {                return \"N/A\";            }        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/IjkMediaMeta.java", "stars": "2", "class": {"name": "IjkStreamMeta", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getResolutionInline", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getResolutionInline() {            if (mWidth <= 0 || mHeight <= 0) {                return \"N/A\";            } else if (mSarNum <= 0 || mSarDen <= 0) {                return String.format(Locale.US, \"%d x %d\", mWidth, mHeight);            } else {                return String.format(Locale.US, \"%d x %d [SAR %d:%d]\", mWidth,                        mHeight, mSarNum, mSarDen);            }        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/IjkMediaMeta.java", "stars": "2", "class": {"name": "IjkStreamMeta", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getFpsInline", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getFpsInline() {            if (mFpsNum <= 0 || mFpsDen <= 0) {                return \"N/A\";            } else {                return String.valueOf(((float) (mFpsNum)) / mFpsDen);            }        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/IjkMediaMeta.java", "stars": "2", "class": {"name": "IjkStreamMeta", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getBitrateInline", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getBitrateInline() {            if (mBitrate <= 0) {                return \"N/A\";            } else if (mBitrate < 1000) {                return String.format(Locale.US, \"%d bit/s\", mBitrate);            } else {                return String.format(Locale.US, \"%d kb/s\", mBitrate / 1000);            }        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/IjkMediaMeta.java", "stars": "2", "class": {"name": "IjkStreamMeta", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSampleRateInline", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getSampleRateInline() {            if (mSampleRate <= 0) {                return \"N/A\";            } else {                return String.format(Locale.US, \"%d Hz\", mSampleRate);            }        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/IjkMediaMeta.java", "stars": "2", "class": {"name": "IjkStreamMeta", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getChannelLayoutInline", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getChannelLayoutInline() {            if (mChannelLayout <= 0) {                return \"N/A\";            } else {                if (mChannelLayout == AV_CH_LAYOUT_MONO) {                    return \"mono\";                } else if (mChannelLayout == AV_CH_LAYOUT_STEREO) {                    return \"stereo\";                } else {                    return String.format(Locale.US, \"%x\", mChannelLayout);                }            }        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/IjkMediaMeta.java", "stars": "2", "class": {"name": "IjkStreamMeta", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "climbStairs", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int climbStairs(int n) {        if(n == 1 || n == 2) {            return n;        }        int[] dp = new int[n];        dp[0] = 1;        dp[1] = 2;        for(int i = 2; i < dp.length; i ++) {            dp[i] = dp[i - 1] + dp[i - 2];        }        return dp[n - 1];    }", "url": "https://raw.githubusercontent.com/nishantc1527/LeetCode/master/src/ClimbingStairs.java", "stars": "1", "class": {"name": "ClimbingStairs", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        WeChatSubscription weChatSubscription = new WeChatSubscription();        Observer Tom = new User(\"Tom\");        Observer Jack = new User(\"Jack\");        Observer Mary = new User(\"Mary\");        weChatSubscription.addObserver(Tom);        weChatSubscription.addObserver(Jack);        weChatSubscription.addObserver(Mary);        weChatSubscription.setMessage(\"\u6e90\u7801\u7cfb\u5217\u4e4b\u4ece\u6e90\u7801\u770bArrayList\");        weChatSubscription.notifyObserver();        System.out.println(\"*****************************************\");        //\u53d6\u6d88\u5173\u6ce8        weChatSubscription.delObserver(Jack);        weChatSubscription.setMessage(\"\u6e90\u7801\u7cfb\u5217\u4e4b\u4ece\u6e90\u7801\u770bHashMap\");        weChatSubscription.notifyObserver();    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/observer/ObserverTest.java", "stars": "2", "class": {"name": "ObserverTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hasWrapperFor", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean hasWrapperFor(Object object) {    return object.getClass().equals(CustomCollection.class);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomObjectWrapperFactory.java", "stars": "15", "class": {"name": "CustomObjectWrapperFactory", "extends": null, "implements": ["org"], "modifiers": ["public"]}}, {"method_name": "getWrapperFor", "params": ["MetaObject", "Object"], "throws": null, "modifiers": ["public"], "return_type": "ObjectWrapper", "snippet": "  public ObjectWrapper getWrapperFor(MetaObject metaObject, Object object) {    return new org.apache.ibatis.submitted.custom_collection_handling.CustomObjectWrapper((CustomCollection) object);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomObjectWrapperFactory.java", "stars": "15", "class": {"name": "CustomObjectWrapperFactory", "extends": null, "implements": ["org"], "modifiers": ["public"]}}, {"method_name": "getCommandList", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "List<String>", "snippet": "  protected List<String> getCommandList() {    final ArrayList<String> list = new ArrayList<>();    list.add(createCommandLine());    return list;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/JavaProcessJob.java", "stars": "18", "class": {"name": "JavaProcessJob", "extends": "ProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "createCommandLine", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "  protected String createCommandLine() {    String command = JAVA_COMMAND + \" \";    command += getJVMArguments() + \" \";    command += \"-Xms\" + getInitialMemorySize() + \" \";    command += \"-Xmx\" + getMaxMemorySize() + \" \";    command += \"-cp \" + createArguments(getClassPaths(), \":\") + \" \";    command += getJavaClass() + \" \";    command += getMainArguments();    return command;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/JavaProcessJob.java", "stars": "18", "class": {"name": "JavaProcessJob", "extends": "ProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "getJavaClass", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "  protected String getJavaClass() {    return getJobProps().getString(JAVA_CLASS);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/JavaProcessJob.java", "stars": "18", "class": {"name": "JavaProcessJob", "extends": "ProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "getClassPathParam", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "  protected String getClassPathParam() {    final List<String> classPath = getClassPaths();    if (classPath == null || classPath.size() == 0) {      return \"\";    }    return \"-cp \" + createArguments(classPath, \":\") + \" \";  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/JavaProcessJob.java", "stars": "18", "class": {"name": "JavaProcessJob", "extends": "ProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "getClassPaths", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "List<String>", "snippet": "  protected List<String> getClassPaths() {    final List<String> classPaths = getJobProps().getStringList(CLASSPATH, null, \",\");    final ArrayList<String> classpathList = new ArrayList<>();    // Adding global properties used system wide.    if (getJobProps().containsKey(GLOBAL_CLASSPATH)) {      final List<String> globalClasspath =          getJobProps().getStringList(GLOBAL_CLASSPATH);      for (final String global : globalClasspath) {        getLog().info(\"Adding to global classpath:\" + global);        classpathList.add(global);      }    }    if (classPaths == null) {      final File path = new File(getPath());      // File parent = path.getParentFile();      getLog().info(          \"No classpath specified. Trying to load classes from \" + path);      if (path != null) {        for (final File file : path.listFiles()) {          if (file.getName().endsWith(\".jar\")) {            // log.info(\"Adding to classpath:\" + file.getName());            classpathList.add(file.getName());          }        }      }    } else {      classpathList.addAll(classPaths);    }    return classpathList;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/JavaProcessJob.java", "stars": "18", "class": {"name": "JavaProcessJob", "extends": "ProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "getInitialMemorySize", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "  protected String getInitialMemorySize() {    return getJobProps().getString(INITIAL_MEMORY_SIZE,        DEFAULT_INITIAL_MEMORY_SIZE);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/JavaProcessJob.java", "stars": "18", "class": {"name": "JavaProcessJob", "extends": "ProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "getMaxMemorySize", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "  protected String getMaxMemorySize() {    return getJobProps().getString(MAX_MEMORY_SIZE, DEFAULT_MAX_MEMORY_SIZE);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/JavaProcessJob.java", "stars": "18", "class": {"name": "JavaProcessJob", "extends": "ProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "getMainArguments", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "  protected String getMainArguments() {    return getJobProps().getString(MAIN_ARGS, \"\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/JavaProcessJob.java", "stars": "18", "class": {"name": "JavaProcessJob", "extends": "ProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "getJVMArguments", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "  protected String getJVMArguments() {    final String globalJVMArgs = getJobProps().getString(GLOBAL_JVM_PARAMS, null);    if (globalJVMArgs == null) {      return getJobProps().getString(JVM_PARAMS, \"\");    }    return globalJVMArgs + \" \" + getJobProps().getString(JVM_PARAMS, \"\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/JavaProcessJob.java", "stars": "18", "class": {"name": "JavaProcessJob", "extends": "ProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "createArguments", "params": ["List<String>", "String"], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "  protected String createArguments(final List<String> arguments, final String separator) {    if (arguments != null && arguments.size() > 0) {      String param = \"\";      for (final String arg : arguments) {        param += arg + separator;      }      return param.substring(0, param.length() - 1);    }    return \"\";  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/JavaProcessJob.java", "stars": "18", "class": {"name": "JavaProcessJob", "extends": "ProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "getProcMemoryRequirement", "params": [], "throws": ["Exception"], "modifiers": ["protected"], "return_type": "Pair<Long,Long>", "snippet": "  protected Pair<Long, Long> getProcMemoryRequirement() throws Exception {    final String strXms = getInitialMemorySize();    final String strXmx = getMaxMemorySize();    final long xms = Utils.parseMemString(strXms);    final long xmx = Utils.parseMemString(strXmx);    final Props azkabanProperties = AzkabanServer.getAzkabanProperties();    if (azkabanProperties != null) {      final MemConfValue maxXms = MemConfValue.parseMaxXms(azkabanProperties);      final MemConfValue maxXmx = MemConfValue.parseMaxXmx(azkabanProperties);      if (xms > maxXms.getSize()) {        throw new Exception(            String.format(\"%s: Xms value has exceeded the allowed limit (max Xms = %s)\",                getId(), maxXms.getString()));      }      if (xmx > maxXmx.getSize()) {        throw new Exception(            String.format(\"%s: Xmx value has exceeded the allowed limit (max Xmx = %s)\",                getId(), maxXmx.getString()));      }    }    return new Pair<>(xms, xmx);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/jobExecutor/JavaProcessJob.java", "stars": "18", "class": {"name": "JavaProcessJob", "extends": "ProcessJob", "implements": null, "modifiers": ["public"]}}, {"method_name": "isSupported", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "  public static boolean isSupported() {    return Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT        && Build.VERSION.SDK_INT < Build.VERSION_CODES.N;  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CpuMonitor.java", "stars": "2", "class": {"name": "CpuMonitor", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "pause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void pause() {    if (executor != null) {      Log.d(TAG, \"pause\");      executor.shutdownNow();      executor = null;    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CpuMonitor.java", "stars": "2", "class": {"name": "CpuMonitor", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "resume", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void resume() {    Log.d(TAG, \"resume\");    resetStat();    scheduleCpuUtilizationTask();  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CpuMonitor.java", "stars": "2", "class": {"name": "CpuMonitor", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "reset", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "  public synchronized void reset() {    if (executor != null) {      Log.d(TAG, \"reset\");      resetStat();      cpuOveruse = false;    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CpuMonitor.java", "stars": "2", "class": {"name": "CpuMonitor", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getCpuUsageCurrent", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "int", "snippet": "  public synchronized int getCpuUsageCurrent() {    return doubleToPercent(userCpuUsage.getCurrent() + systemCpuUsage.getCurrent());  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CpuMonitor.java", "stars": "2", "class": {"name": "CpuMonitor", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getCpuUsageAverage", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "int", "snippet": "  public synchronized int getCpuUsageAverage() {    return doubleToPercent(userCpuUsage.getAverage() + systemCpuUsage.getAverage());  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CpuMonitor.java", "stars": "2", "class": {"name": "CpuMonitor", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getFrequencyScaleAverage", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "int", "snippet": "  public synchronized int getFrequencyScaleAverage() {    return doubleToPercent(frequencyScale.getAverage());  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CpuMonitor.java", "stars": "2", "class": {"name": "CpuMonitor", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "scheduleCpuUtilizationTask", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void scheduleCpuUtilizationTask() {    if (executor != null) {      executor.shutdownNow();      executor = null;    }    executor = Executors.newSingleThreadScheduledExecutor();    @SuppressWarnings(\"unused\") // Prevent downstream linter warnings.    Future<?> possiblyIgnoredError = executor.scheduleAtFixedRate(new Runnable() {      @Override      public void run() {        cpuUtilizationTask();      }    }, 0, CPU_STAT_SAMPLE_PERIOD_MS, TimeUnit.MILLISECONDS);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CpuMonitor.java", "stars": "2", "class": {"name": "CpuMonitor", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "cpuUtilizationTask", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void cpuUtilizationTask() {    boolean cpuMonitorAvailable = sampleCpuUtilization();    if (cpuMonitorAvailable        && SystemClock.elapsedRealtime() - lastStatLogTimeMs >= CPU_STAT_LOG_PERIOD_MS) {      lastStatLogTimeMs = SystemClock.elapsedRealtime();      String statString = getStatString();      Log.d(TAG, statString);    }  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CpuMonitor.java", "stars": "2", "class": {"name": "CpuMonitor", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void init() {    try (FileInputStream fin = new FileInputStream(\"/sys/devices/system/cpu/present\");         InputStreamReader streamReader = new InputStreamReader(fin, Charset.forName(\"UTF-8\"));         BufferedReader reader = new BufferedReader(streamReader);         Scanner scanner = new Scanner(reader).useDelimiter(\"[-\\n]\");) {      scanner.nextInt(); // Skip leading number 0.      cpusPresent = 1 + scanner.nextInt();      scanner.close();    } catch (FileNotFoundException e) {      Log.e(TAG, \"Cannot do CPU stats since /sys/devices/system/cpu/present is missing\");    } catch (IOException e) {      Log.e(TAG, \"Error closing file\");    } catch (Exception e) {      Log.e(TAG, \"Cannot do CPU stats due to /sys/devices/system/cpu/present parsing problem\");    }    cpuFreqMax = new long[cpusPresent];    maxPath = new String[cpusPresent];    curPath = new String[cpusPresent];    curFreqScales = new double[cpusPresent];    for (int i = 0; i < cpusPresent; i++) {      cpuFreqMax[i] = 0; // Frequency \"not yet determined\".      curFreqScales[i] = 0;      maxPath[i] = \"/sys/devices/system/cpu/cpu\" + i + \"/cpufreq/cpuinfo_max_freq\";      curPath[i] = \"/sys/devices/system/cpu/cpu\" + i + \"/cpufreq/scaling_cur_freq\";    }    lastProcStat = new ProcStat(0, 0, 0);    resetStat();    initialized = true;  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CpuMonitor.java", "stars": "2", "class": {"name": "CpuMonitor", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "resetStat", "params": [], "throws": null, "modifiers": ["synchronized", "private"], "return_type": "void", "snippet": "  private synchronized void resetStat() {    userCpuUsage.reset();    systemCpuUsage.reset();    totalCpuUsage.reset();    frequencyScale.reset();    lastStatLogTimeMs = SystemClock.elapsedRealtime();  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CpuMonitor.java", "stars": "2", "class": {"name": "CpuMonitor", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getBatteryLevel", "params": [], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "  private int getBatteryLevel() {    // Use sticky broadcast with null receiver to read battery level once only.    Intent intent = appContext.registerReceiver(        null /* receiver */, new IntentFilter(Intent.ACTION_BATTERY_CHANGED));    int batteryLevel = 0;    int batteryScale = intent.getIntExtra(BatteryManager.EXTRA_SCALE, 100);    if (batteryScale > 0) {      batteryLevel =          (int) (100f * intent.getIntExtra(BatteryManager.EXTRA_LEVEL, 0) / batteryScale);    }    return batteryLevel;  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CpuMonitor.java", "stars": "2", "class": {"name": "CpuMonitor", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "sampleCpuUtilization", "params": [], "throws": null, "modifiers": ["synchronized", "private"], "return_type": "boolean", "snippet": "  private synchronized boolean sampleCpuUtilization() {    long lastSeenMaxFreq = 0;    long cpuFreqCurSum = 0;    long cpuFreqMaxSum = 0;    if (!initialized) {      init();    }    if (cpusPresent == 0) {      return false;    }    actualCpusPresent = 0;    for (int i = 0; i < cpusPresent; i++) {      /*       * For each CPU, attempt to first read its max frequency, then its       * current frequency.  Once as the max frequency for a CPU is found,       * save it in cpuFreqMax[].       */      curFreqScales[i] = 0;      if (cpuFreqMax[i] == 0) {        // We have never found this CPU's max frequency.  Attempt to read it.        long cpufreqMax = readFreqFromFile(maxPath[i]);        if (cpufreqMax > 0) {          Log.d(TAG, \"Core \" + i + \". Max frequency: \" + cpufreqMax);          lastSeenMaxFreq = cpufreqMax;          cpuFreqMax[i] = cpufreqMax;          maxPath[i] = null; // Kill path to free its memory.        }      } else {        lastSeenMaxFreq = cpuFreqMax[i]; // A valid, previously read value.      }      long cpuFreqCur = readFreqFromFile(curPath[i]);      if (cpuFreqCur == 0 && lastSeenMaxFreq == 0) {        // No current frequency information for this CPU core - ignore it.        continue;      }      if (cpuFreqCur > 0) {        actualCpusPresent++;      }      cpuFreqCurSum += cpuFreqCur;      /* Here, lastSeenMaxFreq might come from       * 1. cpuFreq[i], or       * 2. a previous iteration, or       * 3. a newly read value, or       * 4. hypothetically from the pre-loop dummy.       */      cpuFreqMaxSum += lastSeenMaxFreq;      if (lastSeenMaxFreq > 0) {        curFreqScales[i] = (double) cpuFreqCur / lastSeenMaxFreq;      }    }    if (cpuFreqCurSum == 0 || cpuFreqMaxSum == 0) {      Log.e(TAG, \"Could not read max or current frequency for any CPU\");      return false;    }    /*     * Since the cycle counts are for the period between the last invocation     * and this present one, we average the percentual CPU frequencies between     * now and the beginning of the measurement period.  This is significantly     * incorrect only if the frequencies have peeked or dropped in between the     * invocations.     */    double currentFrequencyScale = cpuFreqCurSum / (double) cpuFreqMaxSum;    if (frequencyScale.getCurrent() > 0) {      currentFrequencyScale = (frequencyScale.getCurrent() + currentFrequencyScale) * 0.5;    }    ProcStat procStat = readProcStat();    if (procStat == null) {      return false;    }    long diffUserTime = procStat.userTime - lastProcStat.userTime;    long diffSystemTime = procStat.systemTime - lastProcStat.systemTime;    long diffIdleTime = procStat.idleTime - lastProcStat.idleTime;    long allTime = diffUserTime + diffSystemTime + diffIdleTime;    if (currentFrequencyScale == 0 || allTime == 0) {      return false;    }    // Update statistics.    frequencyScale.addValue(currentFrequencyScale);    double currentUserCpuUsage = diffUserTime / (double) allTime;    userCpuUsage.addValue(currentUserCpuUsage);    double currentSystemCpuUsage = diffSystemTime / (double) allTime;    systemCpuUsage.addValue(currentSystemCpuUsage);    double currentTotalCpuUsage =        (currentUserCpuUsage + currentSystemCpuUsage) * currentFrequencyScale;    totalCpuUsage.addValue(currentTotalCpuUsage);    // Save new measurements for next round's deltas.    lastProcStat = procStat;    return true;  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CpuMonitor.java", "stars": "2", "class": {"name": "CpuMonitor", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "doubleToPercent", "params": ["double"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "  private int doubleToPercent(double d) {    return (int) (d * 100 + 0.5);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CpuMonitor.java", "stars": "2", "class": {"name": "CpuMonitor", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getStatString", "params": [], "throws": null, "modifiers": ["synchronized", "private"], "return_type": "String", "snippet": "  private synchronized String getStatString() {    StringBuilder stat = new StringBuilder();    stat.append(\"CPU User: \")        .append(doubleToPercent(userCpuUsage.getCurrent()))        .append(\"/\")        .append(doubleToPercent(userCpuUsage.getAverage()))        .append(\". System: \")        .append(doubleToPercent(systemCpuUsage.getCurrent()))        .append(\"/\")        .append(doubleToPercent(systemCpuUsage.getAverage()))        .append(\". Freq: \")        .append(doubleToPercent(frequencyScale.getCurrent()))        .append(\"/\")        .append(doubleToPercent(frequencyScale.getAverage()))        .append(\". Total usage: \")        .append(doubleToPercent(totalCpuUsage.getCurrent()))        .append(\"/\")        .append(doubleToPercent(totalCpuUsage.getAverage()))        .append(\". Cores: \")        .append(actualCpusPresent);    stat.append(\"( \");    for (int i = 0; i < cpusPresent; i++) {      stat.append(doubleToPercent(curFreqScales[i])).append(\" \");    }    stat.append(\"). Battery: \").append(getBatteryLevel());    if (cpuOveruse) {      stat.append(\". Overuse.\");    }    return stat.toString();  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CpuMonitor.java", "stars": "2", "class": {"name": "CpuMonitor", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "readFreqFromFile", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "long", "snippet": "  private long readFreqFromFile(String fileName) {    long number = 0;    try (FileInputStream stream = new FileInputStream(fileName);         InputStreamReader streamReader = new InputStreamReader(stream, Charset.forName(\"UTF-8\"));         BufferedReader reader = new BufferedReader(streamReader)) {      String line = reader.readLine();      number = parseLong(line);    } catch (FileNotFoundException e) {      // CPU core is off, so file with its scaling frequency .../cpufreq/scaling_cur_freq      // is not present. This is not an error.    } catch (IOException e) {      // CPU core is off, so file with its scaling frequency .../cpufreq/scaling_cur_freq      // is empty. This is not an error.    }    return number;  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CpuMonitor.java", "stars": "2", "class": {"name": "CpuMonitor", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "parseLong", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "long", "snippet": "  private static long parseLong(String value) {    long number = 0;    try {      number = Long.parseLong(value);    } catch (NumberFormatException e) {      Log.e(TAG, \"parseLong error.\", e);    }    return number;  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CpuMonitor.java", "stars": "2", "class": {"name": "CpuMonitor", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "readProcStat", "params": [], "throws": null, "modifiers": ["private"], "return_type": "ProcStat", "snippet": "  private @Nullable ProcStat readProcStat() {    long userTime = 0;    long systemTime = 0;    long idleTime = 0;    try (FileInputStream stream = new FileInputStream(\"/proc/stat\");         InputStreamReader streamReader = new InputStreamReader(stream, Charset.forName(\"UTF-8\"));         BufferedReader reader = new BufferedReader(streamReader)) {      // line should contain something like this:      // cpu  5093818 271838 3512830 165934119 101374 447076 272086 0 0 0      //       user    nice  system     idle   iowait  irq   softirq      String line = reader.readLine();      String[] lines = line.split(\"\\\\s+\");      int length = lines.length;      if (length >= 5) {        userTime = parseLong(lines[1]); // user        userTime += parseLong(lines[2]); // nice        systemTime = parseLong(lines[3]); // system        idleTime = parseLong(lines[4]); // idle      }      if (length >= 8) {        userTime += parseLong(lines[5]); // iowait        systemTime += parseLong(lines[6]); // irq        systemTime += parseLong(lines[7]); // softirq      }    } catch (FileNotFoundException e) {      Log.e(TAG, \"Cannot open /proc/stat for reading\", e);      return null;    } catch (Exception e) {      Log.e(TAG, \"Problems parsing /proc/stat\", e);      return null;    }    return new ProcStat(userTime, systemTime, idleTime);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CpuMonitor.java", "stars": "2", "class": {"name": "CpuMonitor", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "reset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void reset() {      Arrays.fill(circBuffer, 0);      circBufferIndex = 0;      sum = 0;      currentValue = 0;    }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CpuMonitor.java", "stars": "2", "class": {"name": "MovingAverage", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "addValue", "params": ["double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addValue(double value) {      sum -= circBuffer[circBufferIndex];      circBuffer[circBufferIndex++] = value;      currentValue = value;      sum += value;      if (circBufferIndex >= size) {        circBufferIndex = 0;      }    }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CpuMonitor.java", "stars": "2", "class": {"name": "MovingAverage", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "getCurrent", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "    public double getCurrent() {      return currentValue;    }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CpuMonitor.java", "stars": "2", "class": {"name": "MovingAverage", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "getAverage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "    public double getAverage() {      return sum / (double) size;    }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CpuMonitor.java", "stars": "2", "class": {"name": "MovingAverage", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "getPetAndRoom", "params": ["SqlSession"], "throws": null, "modifiers": ["protected"], "return_type": "List<Pet>", "snippet": "  protected List<Pet> getPetAndRoom(SqlSession sqlSession) {    List<Pet> pets = sqlSession.selectList(\"org.apache.ibatis.submitted.column_prefix.MapperNestedQuery.selectPets\");    return pets;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/column_prefix/ColumnPrefixNestedQueryTest.java", "stars": "15", "class": {"name": "ColumnPrefixNestedQueryTest", "extends": "ColumnPrefixTest", "implements": null, "modifiers": []}}, {"method_name": "getPersons", "params": ["SqlSession"], "throws": null, "modifiers": ["protected"], "return_type": "List<Person>", "snippet": "  protected List<Person> getPersons(SqlSession sqlSession) {    List<Person> list = sqlSession        .selectList(\"org.apache.ibatis.submitted.column_prefix.MapperNestedQuery.selectPersons\");    return list;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/column_prefix/ColumnPrefixNestedQueryTest.java", "stars": "15", "class": {"name": "ColumnPrefixNestedQueryTest", "extends": "ColumnPrefixTest", "implements": null, "modifiers": []}}, {"method_name": "getConfigPath", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "  protected String getConfigPath() {    return \"org/apache/ibatis/submitted/column_prefix/ConfigNestedQuery.xml\";  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/column_prefix/ColumnPrefixNestedQueryTest.java", "stars": "15", "class": {"name": "ColumnPrefixNestedQueryTest", "extends": "ColumnPrefixTest", "implements": null, "modifiers": []}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCount() {        return mData.size();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/PlayerAdapter.java", "stars": "4", "class": {"name": "PlayerAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getItem(int position) {        return mData.get(position).get(\"name\");    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/PlayerAdapter.java", "stars": "4", "class": {"name": "PlayerAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getItemId(int position) {        return position;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/PlayerAdapter.java", "stars": "4", "class": {"name": "PlayerAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getView", "params": ["int", "View", "ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View getView(int position, View convertView, ViewGroup parent) {        ViewHolder holder;        if (convertView == null) {            convertView = mInflater.inflate(android.R.layout.simple_list_item_1, parent, false);            holder = new ViewHolder(convertView);            holder.text1.setPadding(32, 0, 0, 0);            convertView.setTag(holder);        } else {            holder = (ViewHolder) convertView.getTag();        }        holder.text1.setText(getItem(position));        return convertView;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/PlayerAdapter.java", "stars": "4", "class": {"name": "PlayerAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "onAccessibilityStateChanged", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onAccessibilityStateChanged (boolean p0)\t{\t\tn_onAccessibilityStateChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/view/accessibility/AccessibilityManagerCompat_AccessibilityStateChangeListenerImplementor.java", "stars": "2", "class": {"name": "AccessibilityManagerCompat_AccessibilityStateChangeListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onAccessibilityStateChanged", "params": ["boolean"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onAccessibilityStateChanged (boolean p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/view/accessibility/AccessibilityManagerCompat_AccessibilityStateChangeListenerImplementor.java", "stars": "2", "class": {"name": "AccessibilityManagerCompat_AccessibilityStateChangeListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/view/accessibility/AccessibilityManagerCompat_AccessibilityStateChangeListenerImplementor.java", "stars": "2", "class": {"name": "AccessibilityManagerCompat_AccessibilityStateChangeListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/view/accessibility/AccessibilityManagerCompat_AccessibilityStateChangeListenerImplementor.java", "stars": "2", "class": {"name": "AccessibilityManagerCompat_AccessibilityStateChangeListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "method", "params": ["String", "Consumer<String>"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void method(String name, Consumer<String> con){        con.accept(name);    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/23.%E3%80%90%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3%E3%80%91-%E7%AC%94%E8%AE%B0/code/12_FunctionalInterface/src/com/itheima/demo05/Consumer/Demo01Consumer.java", "stars": "2", "class": {"name": "Demo01Consumer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //\u8c03\u7528method\u65b9\u6cd5,\u4f20\u9012\u5b57\u7b26\u4e32\u59d3\u540d,\u65b9\u6cd5\u7684\u53e6\u4e00\u4e2a\u53c2\u6570\u662fConsumer\u63a5\u53e3,\u662f\u4e00\u4e2a\u51fd\u6570\u5f0f\u63a5\u53e3,\u6240\u4ee5\u53ef\u4ee5\u4f20\u9012Lambda\u8868\u8fbe\u5f0f        method(\"\u8d75\u4e3d\u9896\",(String name)->{            //\u5bf9\u4f20\u9012\u7684\u5b57\u7b26\u4e32\u8fdb\u884c\u6d88\u8d39            //\u6d88\u8d39\u65b9\u5f0f:\u76f4\u63a5\u8f93\u51fa\u5b57\u7b26\u4e32            //System.out.println(name);            //\u6d88\u8d39\u65b9\u5f0f:\u628a\u5b57\u7b26\u4e32\u8fdb\u884c\u53cd\u8f6c\u8f93\u51fa            String reName = new StringBuffer(name).reverse().toString();            System.out.println(reName);        });    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/23.%E3%80%90%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3%E3%80%91-%E7%AC%94%E8%AE%B0/code/12_FunctionalInterface/src/com/itheima/demo05/Consumer/Demo01Consumer.java", "stars": "2", "class": {"name": "Demo01Consumer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHost", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getHost() {        return \"https://www.baidu.com/\";    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/server/ReleaseServer.java", "stars": "1", "class": {"name": "ReleaseServer", "extends": null, "implements": ["IRequestServer"], "modifiers": ["public"]}}, {"method_name": "getPath", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPath() {        return \"api/\";    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/server/ReleaseServer.java", "stars": "1", "class": {"name": "ReleaseServer", "extends": null, "implements": ["IRequestServer"], "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getId() {        return id;    }", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/model/domain/entity/Book.java", "stars": "2", "class": {"name": "Book", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Long id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/model/domain/entity/Book.java", "stars": "2", "class": {"name": "Book", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTitle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTitle() {        return title;    }", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/model/domain/entity/Book.java", "stars": "2", "class": {"name": "Book", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTitle", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTitle(String title) {        this.title = title;    }", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/model/domain/entity/Book.java", "stars": "2", "class": {"name": "Book", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAuthor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getAuthor() {        return author;    }", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/model/domain/entity/Book.java", "stars": "2", "class": {"name": "Book", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAuthor", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAuthor(String author) {        this.author = author;    }", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/model/domain/entity/Book.java", "stars": "2", "class": {"name": "Book", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSummary", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getSummary() {\t\treturn summary;\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/model/domain/entity/Book.java", "stars": "2", "class": {"name": "Book", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSummary", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setSummary(String summary) {\t\tthis.summary = summary;\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/model/domain/entity/Book.java", "stars": "2", "class": {"name": "Book", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAno", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getAno() {\t\treturn ano;\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/model/domain/entity/Book.java", "stars": "2", "class": {"name": "Book", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAno", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setAno(int ano) {\t\tthis.ano = ano;\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/model/domain/entity/Book.java", "stars": "2", "class": {"name": "Book", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"BookEntity{\" +                \"id=\" + id +                \", title='\" + title + '\\'' +                \", author='\" + author + '\\'' +                '}';    }", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/model/domain/entity/Book.java", "stars": "2", "class": {"name": "Book", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["SQLiteDatabase"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onCreate(SQLiteDatabase arg0) {\t\t// TODO Auto-generated method stub\t\targ0.execSQL(\"create table tabname(_id integer primary key\" +\",\"+ KEY_NAME \t\t\t\t + \" varchar,\" + KEY_IMAGEURL + \" varchar)\");\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/imageloadergoogle/src/com/example/imageloadergoogle/sqlhb.java", "stars": "74", "class": {"name": "sqlhb", "extends": "SQLiteOpenHelper", "implements": null, "modifiers": ["public"]}}, {"method_name": "onUpgrade", "params": ["SQLiteDatabase", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onUpgrade(SQLiteDatabase arg0, int arg1, int arg2) {\t\t// TODO Auto-generated method stub\t\targ0.execSQL(\"DROP TABLE IF EXISTS\");\t\tonCreate(arg0);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/imageloadergoogle/src/com/example/imageloadergoogle/sqlhb.java", "stars": "74", "class": {"name": "sqlhb", "extends": "SQLiteOpenHelper", "implements": null, "modifiers": ["public"]}}, {"method_name": "addcontent", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void addcontent(String name,String imageurl)\t{\t\tSQLiteDatabase db=getWritableDatabase();\t\tContentValues cv=new ContentValues();\t\tcv.put(\"name\", name);\t\tcv.put(\"imageurl\",imageurl);\t\tdb.insert(\"tabname\", null, cv);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/imageloadergoogle/src/com/example/imageloadergoogle/sqlhb.java", "stars": "74", "class": {"name": "sqlhb", "extends": "SQLiteOpenHelper", "implements": null, "modifiers": ["public"]}}, {"method_name": "getnames", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ArrayList<String>", "snippet": "\tpublic ArrayList<String> getnames()\t{\tArrayList<String> ar=new ArrayList<String>();\tSQLiteDatabase db=getWritableDatabase();\tCursor c=db.rawQuery(\"select * from tabname\",null);\tc.moveToFirst();\t{\tdo\t{\tString name=c.getString(c.getColumnIndex(\"name\"));\tar.add(name);\t}while(c.moveToNext());\treturn ar;\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/imageloadergoogle/src/com/example/imageloadergoogle/sqlhb.java", "stars": "74", "class": {"name": "sqlhb", "extends": "SQLiteOpenHelper", "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchalldata", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Cursor", "snippet": "\tpublic Cursor fetchalldata() {\t\t\tSQLiteDatabase db=getWritableDatabase();\t\tCursor c=db.rawQuery(\"select * from tabname\",null);\t\treturn c;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/imageloadergoogle/src/com/example/imageloadergoogle/sqlhb.java", "stars": "74", "class": {"name": "sqlhb", "extends": "SQLiteOpenHelper", "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": ["String"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void run(String... arg0) throws Exception {        if (arg0.length > 0 && arg0[0].equals(\"exitcode\")) {            throw new ExitException();        }    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/io/swagger/Swagger2SpringBoot.java", "stars": "2", "class": {"name": "Swagger2SpringBoot", "extends": null, "implements": ["CommandLineRunner"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws Exception {        new SpringApplication(Swagger2SpringBoot.class).run(args);    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/io/swagger/Swagger2SpringBoot.java", "stars": "2", "class": {"name": "Swagger2SpringBoot", "extends": null, "implements": ["CommandLineRunner"], "modifiers": ["public"]}}, {"method_name": "getExitCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getExitCode() {            return 10;        }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/io/swagger/Swagger2SpringBoot.java", "stars": "2", "class": {"name": "ExitException", "extends": "RuntimeException", "implements": ["ExitCodeGenerator"], "modifiers": []}}, {"method_name": "testSplit1", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void testSplit1() {    String s1 = \"thrift://hcat1:port,thrift://hcat2:port;thrift://hcat3:port,thrift://hcat4:port;\";    p.put(EXTRA_HCAT_CLUSTERS, s1);    List<String> s2 = Arrays.asList(\"thrift://hcat1:port,thrift://hcat2:port\" , \"thrift://hcat3:port,thrift://hcat4:port\");    Assert.assertTrue(p.getStringListFromCluster(EXTRA_HCAT_CLUSTERS).equals(s2));    String s3 = \"thrift://hcat1:port,thrift://hcat2:port     ;      thrift://hcat3:port,thrift://hcat4:port;\";    p.put(EXTRA_HCAT_CLUSTERS, s3);    List<String> s4 = Arrays.asList( \"thrift://hcat1:port,thrift://hcat2:port\" , \"thrift://hcat3:port,thrift://hcat4:port\");    Assert.assertTrue(p.getStringListFromCluster(EXTRA_HCAT_CLUSTERS).equals(s4));    String s5 = \"thrift://hcat1:port,thrift://hcat2:port\";    p.put(EXTRA_HCAT_CLUSTERS, s5);    List<String> s6 = Arrays.asList(\"thrift://hcat1:port,thrift://hcat2:port\");    Assert.assertTrue(p.getStringListFromCluster(EXTRA_HCAT_CLUSTERS).equals(s6));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/test/java/azkaban/utils/PropsTest.java", "stars": "18", "class": {"name": "PropsTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "act", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void act()     {        checkMovimiento();    }", "url": "https://raw.githubusercontent.com/jesus-antulio/Tankzors-Fangame/master/Player.java", "stars": "1", "class": {"name": "Player", "extends": "Actor", "implements": null, "modifiers": ["public"]}}, {"method_name": "gira", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void gira(int g){        turn(g);    }", "url": "https://raw.githubusercontent.com/jesus-antulio/Tankzors-Fangame/master/Player.java", "stars": "1", "class": {"name": "Player", "extends": "Actor", "implements": null, "modifiers": ["public"]}}, {"method_name": "checkMovimiento", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void checkMovimiento(){        int x = getX();        int y = getY();                if(Greenfoot.isKeyDown(\"up\")){            if (intersects(p1) || intersects(p2) || intersects(p3) || intersects(p4)){                setLocation(x, y+=5);            } else {                setLocation(x, y-(yDirection*vel));            }        }        if(Greenfoot.isKeyDown(\"down\")){            if (intersects(p1) || intersects(p2) || intersects(p3) || intersects(p4)){                setLocation(x, y-=5);            } else {                setLocation(x, y+(yDirection*vel));            }        }        if(Greenfoot.isKeyDown(\"left\")){            if (intersects(p1) || intersects(p2) || intersects(p3) || intersects(p4)){                setLocation(x+=5, y);            } else {                setLocation(x-(xDirection*vel), y);            }        }        if(Greenfoot.isKeyDown(\"right\")){            if (intersects(p1) || intersects(p2) || intersects(p3) || intersects(p4)){                setLocation(x-=5, y);            } else {                setLocation(x+(xDirection*vel), y);            }        }                    }", "url": "https://raw.githubusercontent.com/jesus-antulio/Tankzors-Fangame/master/Player.java", "stars": "1", "class": {"name": "Player", "extends": "Actor", "implements": null, "modifiers": ["public"]}}, {"method_name": "getSourceArgs", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String[] getSourceArgs() {\t\treturn this.args;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/DefaultApplicationArguments.java", "stars": "47572", "class": {"name": "DefaultApplicationArguments", "extends": null, "implements": ["ApplicationArguments"], "modifiers": ["public"]}}, {"method_name": "getOptionNames", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Set<String>", "snippet": "\tpublic Set<String> getOptionNames() {\t\tString[] names = this.source.getPropertyNames();\t\treturn Collections.unmodifiableSet(new HashSet<>(Arrays.asList(names)));\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/DefaultApplicationArguments.java", "stars": "47572", "class": {"name": "DefaultApplicationArguments", "extends": null, "implements": ["ApplicationArguments"], "modifiers": ["public"]}}, {"method_name": "containsOption", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean containsOption(String name) {\t\treturn this.source.containsProperty(name);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/DefaultApplicationArguments.java", "stars": "47572", "class": {"name": "DefaultApplicationArguments", "extends": null, "implements": ["ApplicationArguments"], "modifiers": ["public"]}}, {"method_name": "getOptionValues", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "\tpublic List<String> getOptionValues(String name) {\t\tList<String> values = this.source.getOptionValues(name);\t\treturn (values != null) ? Collections.unmodifiableList(values) : null;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/DefaultApplicationArguments.java", "stars": "47572", "class": {"name": "DefaultApplicationArguments", "extends": null, "implements": ["ApplicationArguments"], "modifiers": ["public"]}}, {"method_name": "getNonOptionArgs", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "\tpublic List<String> getNonOptionArgs() {\t\treturn this.source.getNonOptionArgs();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/DefaultApplicationArguments.java", "stars": "47572", "class": {"name": "DefaultApplicationArguments", "extends": null, "implements": ["ApplicationArguments"], "modifiers": ["public"]}}, {"method_name": "getNonOptionArgs", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "\t\tpublic List<String> getNonOptionArgs() {\t\t\treturn super.getNonOptionArgs();\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/DefaultApplicationArguments.java", "stars": "47572", "class": {"name": "Source", "extends": "SimpleCommandLinePropertySource", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "getOptionValues", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "\t\tpublic List<String> getOptionValues(String name) {\t\t\treturn super.getOptionValues(name);\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/DefaultApplicationArguments.java", "stars": "47572", "class": {"name": "Source", "extends": "SimpleCommandLinePropertySource", "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "isMainPlayer", "params": ["CallbackInfoReturnable<Boolean>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void isMainPlayer(CallbackInfoReturnable<Boolean> cr){        if(client.getCameraEntity() instanceof CameraEntity){            cr.setReturnValue(false);            cr.cancel();        }    }", "url": "https://raw.githubusercontent.com/Rushmead/Fabric-NDI/master/src/main/java/dev/imabad/fabricndi/mixin/ClientPlayerEntityMixin.java", "stars": "5", "class": {"name": "ClientPlayerEntityMixin", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSession", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Session", "snippet": "  public Session getSession(final String sessionId) {    final Session elem = this.cache.getIfPresent(sessionId);    return elem;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/session/SessionCache.java", "stars": "18", "class": {"name": "SessionCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEffectiveSessionTimeToLive", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getEffectiveSessionTimeToLive() {    return effectiveSessionTimeToLive;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/session/SessionCache.java", "stars": "18", "class": {"name": "SessionCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addSession", "params": ["Session"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void addSession(final Session session) {    this.cache.put(session.getSessionId(), session);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/session/SessionCache.java", "stars": "18", "class": {"name": "SessionCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeSession", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void removeSession(final String id) {    this.cache.invalidate(id);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/session/SessionCache.java", "stars": "18", "class": {"name": "SessionCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCache", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Cache<String,Session>", "snippet": "  public Cache<String, Session> getCache() {    return cache;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/session/SessionCache.java", "stars": "18", "class": {"name": "SessionCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSessionByUsername", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Session", "snippet": "  public Session getSessionByUsername(String username){    for(Session session: this.cache.asMap().values()){      if(session.getUser().getUserId().equals(username)){        return session;      }    }    return null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/server/session/SessionCache.java", "stars": "18", "class": {"name": "SessionCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readColorMapFile", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean readColorMapFile(String file) {        if (file == null) {            Application.getLogger().log(Level.SEVERE, \"\u30d5\u30a1\u30a4\u30eb \u540d\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\");            return false;        }        try {            int index = 0;            String line;            BufferedReader r = new BufferedReader(new FileReader(new File(file)));            while ((line = r.readLine()) != null) {                StringTokenizer st = new StringTokenizer(line);                while (st.hasMoreTokens()) {                    String s = st.nextToken();                    int value;                    try {                        value = Integer.parseInt(s, 16);                    }                    catch (NumberFormatException ee) {                        Application.getLogger().log(Level.WARNING, \"\u4e0d\u6b63\u306a\u6570\u5024(\" + s + \")\u304c\u3042\u308a\u307e\u3057\u305f\u30020xff0000(\u8d64)\u3068\u3057\u3066\u6271\u3044\u307e\u3059\u3002\", ee);                        value = 0xff0000;                    }                    colorMap[index / 256][index % 256] = value;                    index++;                    if (index == 2 * 256) {                        r.close();                        return true;                    }                }            }            r.close();            return true;        }        catch (FileNotFoundException e) {            Application.getLogger().log(Level.SEVERE, \"\u30d5\u30a1\u30a4\u30eb \" + file + \" \u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3002\", e);            return false;        }        catch (IOException e) {            Application.getLogger().log(Level.SEVERE, \"\u30d5\u30a1\u30a4\u30eb \" + file + \" \u306e\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\", e);            return false;        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Display.java", "stars": "4", "class": {"name": "JR100Display", "extends": "AbstractDisplay", "implements": null, "modifiers": ["public"]}}, {"method_name": "applyDisplayColor", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void applyDisplayColor() {        double rgb[][] = new double[2][3];        switch (getPropertyOfDisplayType()) {        case DISPLAYTYPE_MONOCHROME:            rgb[0][0] = 31;            rgb[0][1] = 31;            rgb[0][2] = 31;            rgb[1][0] = 255;            rgb[1][1] = 255;            rgb[1][2] = 255;            break;        case DISPLAYTYPE_GREEN:            rgb[0][0] = 0;            rgb[0][1] = 31;            rgb[0][2] = 0;            rgb[1][0] = 0;            rgb[1][1] = 223;            rgb[1][2] = 31;            break;        case DISPLAYTYPE_AMBER:            rgb[0][0] = 31;            rgb[0][1] = 0;            rgb[0][2] = 0;            rgb[1][0] = 255;            rgb[1][1] = 127;            rgb[1][2] = 0;            break;        default:            rgb[0][0] = 31;            rgb[0][1] = 31;            rgb[0][2] = 31;            rgb[1][0] = 255;            rgb[1][1] = 255;            rgb[1][2] = 255;            break;        }        for (int i = 0; i < 2; i++) {            for (int j = 0; j < 256; j++) {                if (getPropertyOfDisplayType() != DISPLAYTYPE_COLOR) {                    double r0 = (double)((colorMap[i][j] & 0xff0000) >> 16);                    double g0 = (double)((colorMap[i][j] & 0x00ff00) >> 8);                    double b0 = (double)( colorMap[i][j] & 0x0000ff);                    double y = 0.299 * r0 + 0.587 * g0 + 0.114 * b0;                    int r = (int)(y * rgb[1][0] / 255 + rgb[0][0]);                    int g = (int)(y * rgb[1][1] / 255 + rgb[0][1]);                    int b = (int)(y * rgb[1][2] / 255 + rgb[0][2]);                    if (r > 255) {                        r = 255;                    }                    if (g > 255) {                        g = 255;                    }                    if (b > 255) {                        b = 255;                    }                    colorMap[i][j] = (r << 16) + (g << 8) + b;                }            }        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Display.java", "stars": "4", "class": {"name": "JR100Display", "extends": "AbstractDisplay", "implements": null, "modifiers": ["public"]}}, {"method_name": "initializeColors", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initializeColors() {        int maptype = getPropertyOfDisplayColorMap();        if (maptype == COLORMAP_DEFAULT) {            for  (int i = 0; i < 2; i++) {                System.arraycopy(defaultColorMap[i], 0, colorMap[i], 0, defaultColorMap[i].length);            }        }        else if (maptype == COLORMAP_FILE){            if (!readColorMapFile(getPropertyOfDisplayColorMapFile())) {                Application.getLogger().log(Level.WARNING, \"\u30ab\u30e9\u30fc\u30de\u30c3\u30d7\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3057\u305f\u305f\u3081\u30c7\u30d5\u30a9\u30eb\u30c8\u30ab\u30e9\u30fc\u30de\u30c3\u30d7\u3092\u9069\u7528\u3057\u307e\u3059\u3002\");                for  (int i = 0; i < 2; i++) {                    System.arraycopy(defaultColorMap[i], 0, colorMap[i], 0, defaultColorMap[i].length);                }            }        }        applyDisplayColor();    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Display.java", "stars": "4", "class": {"name": "JR100Display", "extends": "AbstractDisplay", "implements": null, "modifiers": ["public"]}}, {"method_name": "initializeFonts", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initializeFonts() {        int[] bitmasks = new int[] {0xff0000, 0x00ff00, 0x0000ff};        DirectColorModel cm = new DirectColorModel(24, bitmasks[0], bitmasks[1], bitmasks[2]);        for (int i = 0; i < fonts.length; i++) {            for (int j = 0; j < fonts[i].length; j++) {                fonts[i][j] =                    new BufferedImage(                        cm,                        Raster.createWritableRaster(                            new SinglePixelPackedSampleModel(DataBuffer.TYPE_INT, PPC, PPC, bitmasks),                            new Point()),                        false,                        null);            }        }        for (int code = 0; code < 128; code++) {            DataBuffer db0a = fonts[FONT_NORMAL][code].getRaster().getDataBuffer();            DataBuffer db0b = fonts[FONT_NORMAL][code + 128].getRaster().getDataBuffer();            DataBuffer db1a = fonts[FONT_USER_DEFINED][code].getRaster().getDataBuffer();            for (int line = 0; line < PPC; line++) {                int value = memory.load8(characterRom + code * 8 + line);                for (int bit = 0; bit < PPC; bit++) {                    int index = line * PPC + (PPC - bit - 1);                    // CMODE0\u6642\u306e\u901a\u5e38\u6587\u5b57 (0x00-0x7f)                    db0a.setElem(index, colorMap[value & 0x01][code]);                    // CMODE1\u6642\u306e\u901a\u5e38\u6587\u5b57 (0x00-0x7f)                    db1a.setElem(index, colorMap[value & 0x01][code]);                    // CMODE0\u6642\u306e\u53cd\u8ee2\u6587\u5b57 (0x80-0xff)                    db0b.setElem(index, colorMap[1 - (value & 0x01)][code + 128]);                    value >>= 1;                }            }        }        // \u30e6\u30fc\u30b6\u5b9a\u7fa9\u6587\u5b57\u751f\u6210        for (int code = 128; code < 256; code++) {            DataBuffer db1b = fonts[FONT_USER_DEFINED][code].getRaster().getDataBuffer();            for (int line = 0; line < PPC; line++) {                int value = memory.load8(userDefinedRam + (code - 128) * PPC + line);                for (int bit = 0; bit < PPC; bit++) {                    // CMODE1\u6642\u306e\u53cd\u8ee2\u6587\u5b57 (0x80-0xff)                    db1b.setElem(line * PPC + (PPC - bit - 1), colorMap[value & 0x01][code]);                    value >>= 1;                }            }        }//        try {//            ImageIO.write(fonts, \"png\", new File(\"fonts.png\"));//        }//        catch (Exception e) {//            e.printStackTrace();//        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Display.java", "stars": "4", "class": {"name": "JR100Display", "extends": "AbstractDisplay", "implements": null, "modifiers": ["public"]}}, {"method_name": "updateFont", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateFont(int code, int line, int value) {        DataBuffer db1b = fonts[FONT_USER_DEFINED][code + 128].getRaster().getDataBuffer();        for (int bit = 0; bit < PPC; bit++) {            db1b.setElem(line * PPC + PPC - bit - 1, colorMap[value & 0x01][code + 128]);            value >>= 1;        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Display.java", "stars": "4", "class": {"name": "JR100Display", "extends": "AbstractDisplay", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPreferredSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Dimension", "snippet": "    public Dimension getPreferredSize() {        return new Dimension(width * scaling, height * scaling);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Display.java", "stars": "4", "class": {"name": "JR100Display", "extends": "AbstractDisplay", "implements": null, "modifiers": ["public"]}}, {"method_name": "setCurrentFont", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCurrentFont(int plane) {        currentFont = fonts[plane];    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Display.java", "stars": "4", "class": {"name": "JR100Display", "extends": "AbstractDisplay", "implements": null, "modifiers": ["public"]}}, {"method_name": "renderDisplay", "params": ["Graphics"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void renderDisplay(Graphics g) {        for (int x = 0; x < cx; x++) {            for (int y = 0; y < cy; y++) {                int value = memory.load8(videoRam + x + y * cx) & 0xff;                g.drawImage(                    currentFont[value],                    x * px * scaling,                    y * py * scaling,                    (x + 1) * px * scaling,                    (y + 1) * py * scaling,                    0,                    0,                    px,                    py,                    null);            }        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Display.java", "stars": "4", "class": {"name": "JR100Display", "extends": "AbstractDisplay", "implements": null, "modifiers": ["public"]}}, {"method_name": "getFonts", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BufferedImage", "snippet": "    public BufferedImage[][] getFonts() {        return fonts;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Display.java", "stars": "4", "class": {"name": "JR100Display", "extends": "AbstractDisplay", "implements": null, "modifiers": ["public"]}}, {"method_name": "saveState", "params": ["StateSet"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void saveState(StateSet ss) {        super.saveState(ss);        int index;        if (currentFont == fonts[0]) {            index = 0;        }        else {            index = 1;        }        ss.set(\"JR100Display.currentFont\", index);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Display.java", "stars": "4", "class": {"name": "JR100Display", "extends": "AbstractDisplay", "implements": null, "modifiers": ["public"]}}, {"method_name": "loadState", "params": ["StateSet"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void loadState(StateSet ss) {        super.loadState(ss);        initializeFonts();        int index;        index = (Integer)ss.get(\"JR100Display.currentFont\");        currentFont = fonts[index];    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/jr100/JR100Display.java", "stars": "4", "class": {"name": "JR100Display", "extends": "AbstractDisplay", "implements": null, "modifiers": ["public"]}}, {"method_name": "registerCreator", "params": ["String", "MailCreator"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void registerCreator(final String name, final MailCreator creator) {    registeredCreators.put(name, creator);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/mail/DefaultMailCreator.java", "stars": "18", "class": {"name": "DefaultMailCreator", "extends": null, "implements": ["MailCreator"], "modifiers": ["public"]}}, {"method_name": "getCreator", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "MailCreator", "snippet": "  public static MailCreator getCreator(final String name) {    MailCreator creator = registeredCreators.get(name);    if (creator == null) {      creator = defaultCreator;    }    return creator;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/mail/DefaultMailCreator.java", "stars": "18", "class": {"name": "DefaultMailCreator", "extends": null, "implements": ["MailCreator"], "modifiers": ["public"]}}, {"method_name": "convertMSToString", "params": ["long"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String convertMSToString(final long timeInMS) {    if (timeInMS < 0) {      return \"N/A\";    } else {      return DATE_FORMATTER.format(new Date(timeInMS));    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/mail/DefaultMailCreator.java", "stars": "18", "class": {"name": "DefaultMailCreator", "extends": null, "implements": ["MailCreator"], "modifiers": ["public"]}}, {"method_name": "findFailedJobs", "params": ["ExecutableFlow"], "throws": null, "modifiers": ["private", "static"], "return_type": "List<String>", "snippet": "  private static List<String> findFailedJobs(final ExecutableFlow flow) {    final ArrayList<String> failedJobs = new ArrayList<>();    for (final ExecutableNode node : flow.getExecutableNodes()) {      if (node.getStatus() == Status.FAILED) {        failedJobs.add(node.getId());      }    }    return failedJobs;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/mail/DefaultMailCreator.java", "stars": "18", "class": {"name": "DefaultMailCreator", "extends": null, "implements": ["MailCreator"], "modifiers": ["public"]}}, {"method_name": "createFirstErrorMessage", "params": ["ExecutableFlow", "EmailMessage", "String", "String", "String", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean createFirstErrorMessage(final ExecutableFlow flow,      final EmailMessage message, final String azkabanName, final String scheme,      final String clientHostname, final String clientPortNumber, final String... vars) {    final ExecutionOptions option = flow.getExecutionOptions();    final List<String> emailList = option.getFailureEmails();    final int execId = flow.getExecutionId();    if (emailList != null && !emailList.isEmpty()) {      message.addAllToAddress(emailList);      message.setMimeType(\"text/html;charset=UTF-8\");      message.setSubject(\"\u5de5\u4f5c\u6d41 '\" + flow.getFlowId() + \"' \u6267\u884c\u5931\u8d25 \"          + azkabanName);      message.println(\"<h2 style=\\\"color:#FF0000\\\"> \u6267\u884cID '\"          + flow.getExecutionId() + \"' \u5de5\u4f5c\u6d41\u540d\uff1a '\" + flow.getFlowId() + \"' \u9879\u76ee\u540d\uff1a '\"          + flow.getProjectName() + \"' \u6267\u884c\u5931\u8d25\uff0c\u7cfb\u7edf\u540d\uff1a \" + azkabanName + \"</h2>\");      if (option.getFailureAction() == FailureAction.CANCEL_ALL) {        message            .println(\"\u8fd9\u4e2a\u5de5\u4f5c\u6d41\u8bbe\u7f6e\u51fa\u9519\u65f6\u7ec8\u6b62\u6240\u6709\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1.\");      } else if (option.getFailureAction() == FailureAction.FINISH_ALL_POSSIBLE) {        message            .println(\"\u8fd9\u4e2a\u5de5\u4f5c\u6d41\u8bbe\u7f6e\u51fa\u9519\u65f6\u5b8c\u6210\u6240\u6709\u53ef\u4ee5\u6267\u884c\u7684\u4efb\u52a1.\");      } else {        message            .println(\"\u8fd9\u4e2a\u5de5\u4f5c\u6d41\u8bbe\u7f6e\u5b8c\u6210\u5f53\u524d\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1.\");      }      message.println(\"<table>\");      message.println(\"<tr><td>\u5f00\u59cb\u65f6\u95f4</td><td>\"          + convertMSToString(flow.getStartTime()) + \"</td></tr>\");      message.println(\"<tr><td>\u7ed3\u675f\u65f6\u95f4</td><td>\"          + convertMSToString(flow.getEndTime()) + \"</td></tr>\");      message.println(\"<tr><td>\u6267\u884c\u65f6\u957f</td><td>\"          + Utils.formatDuration(flow.getStartTime(), flow.getEndTime())          + \"</td></tr>\");      message.println(\"<tr><td>\u6267\u884c\u72b6\u6001</td><td>\" + flow.getStatus() + \"</td></tr>\");      message.println(\"</table>\");      message.println(\"\");      final String executionUrl =          scheme + \"://\" + clientHostname + \":\" + clientPortNumber + \"/\"              + \"executor?\" + \"execid=\" + execId;      message.println(\"<a href=\\\"\" + executionUrl + \"\\\">\" + flow.getFlowId()          + \" \u6267\u884c\u94fe\u63a5</a>\");      message.println(\"\");      message.println(\"<h3>Reason</h3>\");      final List<String> failedJobs = findFailedJobs(flow);      message.println(\"<ul>\");      for (final String jobId : failedJobs) {        message.println(\"<li><a href=\\\"\" + executionUrl + \"&job=\" + jobId            + \"\\\"> \u9519\u8bef\u7684\u4efb\u52a1 '\" + jobId + \"' \u94fe\u63a5</a></li>\");      }      message.println(\"</ul>\");      return true;    }    return false;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/mail/DefaultMailCreator.java", "stars": "18", "class": {"name": "DefaultMailCreator", "extends": null, "implements": ["MailCreator"], "modifiers": ["public"]}}, {"method_name": "createErrorEmail", "params": ["ExecutableFlow", "EmailMessage", "String", "String", "String", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean createErrorEmail(final ExecutableFlow flow, final EmailMessage message,      final String azkabanName, final String scheme, final String clientHostname,      final String clientPortNumber, final String... vars) {    final ExecutionOptions option = flow.getExecutionOptions();    final List<String> emailList = option.getFailureEmails();    final int execId = flow.getExecutionId();    if (emailList != null && !emailList.isEmpty()) {      message.addAllToAddress(emailList);      message.setMimeType(\"text/html;charset=UTF-8\");      message.setSubject(\"\u5de5\u4f5c\u6d41 '\" + flow.getFlowId() + \"' \u6267\u884c\u5931\u8d25 \"          + azkabanName);      message.println(\"<h2 style=\\\"color:#FF0000\\\"> \u6267\u884cID '\" + execId          + \"' \u5de5\u4f5c\u6d41\u540d '\" + flow.getFlowId() + \"' \u9879\u76ee\u540d '\"          + flow.getProjectName() + \"' \u6267\u884c\u5931\u8d25\uff0c\u7cfb\u7edf\u540d \" + azkabanName + \"</h2>\");      message.println(\"<table>\");      message.println(\"<tr><td>\u5f00\u59cb\u65f6\u95f4</td><td>\"          + convertMSToString(flow.getStartTime()) + \"</td></tr>\");      message.println(\"<tr><td>\u7ed3\u675f\u65f6\u95f4</td><td>\"          + convertMSToString(flow.getEndTime()) + \"</td></tr>\");      message.println(\"<tr><td>\u6267\u884c\u65f6\u957f</td><td>\"          + Utils.formatDuration(flow.getStartTime(), flow.getEndTime())          + \"</td></tr>\");      message.println(\"<tr><td>\u6267\u884c\u72b6\u6001</td><td>\" + flow.getStatus() + \"</td></tr>\");      message.println(\"</table>\");      message.println(\"\");      final String executionUrl =          scheme + \"://\" + clientHostname + \":\" + clientPortNumber + \"/\"              + \"executor?\" + \"execid=\" + execId;      message.println(\"<a href=\\\"\" + executionUrl + \"\\\">\" + flow.getFlowId()          + \" \u6267\u884c\u94fe\u63a5</a>\");      message.println(\"\");      message.println(\"<h3>Reason</h3>\");      final List<String> failedJobs = findFailedJobs(flow);      message.println(\"<ul>\");      for (final String jobId : failedJobs) {        message.println(\"<li><a href=\\\"\" + executionUrl + \"&job=\" + jobId            + \"\\\"> \u9519\u8bef\u7684\u4efb\u52a1 '\" + jobId + \"' \u94fe\u63a5</a></li>\");      }      for (final String reasons : vars) {        message.println(\"<li>\" + reasons + \"</li>\");      }      message.println(\"</ul>\");      return true;    }    return false;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/mail/DefaultMailCreator.java", "stars": "18", "class": {"name": "DefaultMailCreator", "extends": null, "implements": ["MailCreator"], "modifiers": ["public"]}}, {"method_name": "createSuccessEmail", "params": ["ExecutableFlow", "EmailMessage", "String", "String", "String", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean createSuccessEmail(final ExecutableFlow flow, final EmailMessage message,      final String azkabanName, final String scheme, final String clientHostname,      final String clientPortNumber, final String... vars) {    final ExecutionOptions option = flow.getExecutionOptions();    final List<String> emailList = option.getSuccessEmails();    final int execId = flow.getExecutionId();    if (emailList != null && !emailList.isEmpty()) {      message.addAllToAddress(emailList);      message.setMimeType(\"text/html;charset=UTF-8\");      message.setSubject(\"\u5de5\u4f5c\u6d41 '\" + flow.getFlowId() + \"' \u6267\u884c\u6210\u529f \"          + azkabanName);      message.println(\"<h2> \u6267\u884cID '\" + flow.getExecutionId()          + \"' \u5de5\u4f5c\u6d41\u540d '\" + flow.getFlowId() + \"' \u9879\u76ee\u540d '\"          + flow.getProjectName() + \"' \u6267\u884c\u6210\u529f\uff0c\u7cfb\u7edf\u540d \" + azkabanName + \"</h2>\");      message.println(\"<table>\");      message.println(\"<tr><td>\u5f00\u59cb\u65f6\u95f4</td><td>\"          + convertMSToString(flow.getStartTime()) + \"</td></tr>\");      message.println(\"<tr><td>\u7ed3\u675f\u65f6\u95f4</td><td>\"          + convertMSToString(flow.getEndTime()) + \"</td></tr>\");      message.println(\"<tr><td>\u6267\u884c\u65f6\u957f</td><td>\"          + Utils.formatDuration(flow.getStartTime(), flow.getEndTime())          + \"</td></tr>\");      message.println(\"<tr><td>\u6267\u884c\u72b6\u6001</td><td>\" + flow.getStatus() + \"</td></tr>\");      message.println(\"</table>\");      message.println(\"\");      final String executionUrl =          scheme + \"://\" + clientHostname + \":\" + clientPortNumber + \"/\"              + \"executor?\" + \"execid=\" + execId;      message.println(\"<a href=\\\"\" + executionUrl + \"\\\">\" + flow.getFlowId()          + \" \u6267\u884c\u94fe\u63a5</a>\");      return true;    }    return false;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/mail/DefaultMailCreator.java", "stars": "18", "class": {"name": "DefaultMailCreator", "extends": null, "implements": ["MailCreator"], "modifiers": ["public"]}}, {"method_name": "createFailedUpdateMessage", "params": ["List<ExecutableFlow>", "Executor", "ExecutorManagerException", "EmailMessage", "String", "String", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean createFailedUpdateMessage(final List<ExecutableFlow> flows,      final Executor executor, final ExecutorManagerException updateException,      final EmailMessage message, final String azkabanName,      final String scheme, final String clientHostname, final String clientPortNumber) {    final ExecutionOptions option = flows.get(0).getExecutionOptions();    final List<String> emailList = option.getFailureEmails();    if (emailList != null && !emailList.isEmpty()) {      message.addAllToAddress(emailList);      message.setMimeType(\"text/html\");      message.setSubject(          \"Flow status could not be updated from \" + executor.getHost() + \" on \" + azkabanName);      message.println(          \"<h2 style=\\\"color:#FF0000\\\"> Flow status could not be updated from \" + executor.getHost()              + \" on \" + azkabanName + \"</h2>\");      message.println(\"The actual status of these executions is unknown, \"          + \"because getting status update from azkaban executor is failing\");      message.println(\"\");      message.println(\"<h3>Error detail</h3>\");      message.println(\"<pre>\" + ExceptionUtils.getStackTrace(updateException) + \"</pre>\");      message.println(\"\");      message.println(\"<h3>Affected executions</h3>\");      message.println(\"<ul>\");      for (final ExecutableFlow flow : flows) {        final int execId = flow.getExecutionId();        final String executionUrl =            scheme + \"://\" + clientHostname + \":\" + clientPortNumber + \"/\"                + \"executor?\" + \"execid=\" + execId;        message.println(\"<li>Execution '\" + flow.getExecutionId() + \"' of flow '\" + flow.getFlowId()            + \"' of project '\" + flow.getProjectName() + \"' - \" +            \" <a href=\\\"\" + executionUrl + \"\\\">Execution Link</a></li>\");      }      message.println(\"</ul>\");      return true;    }    return false;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/mail/DefaultMailCreator.java", "stars": "18", "class": {"name": "DefaultMailCreator", "extends": null, "implements": ["MailCreator"], "modifiers": ["public"]}}, {"method_name": "calculpts", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "\tprivate String calculpts(String letter) {    \tString unpoint=\"eainorstul\";    \tString deuxpoint=\"dmg\";    \tString troispoint=\"bcp\";    \tString quatrepoint=\"fhv\";    \tString huitpoint=\"jq\";    \tString dixpoint=\"kwxyz\";    \tArrayList points=new ArrayList();    \tpoints.add(unpoint);    \tpoints.add(deuxpoint);    \tpoints.add(troispoint);    \tpoints.add(quatrepoint);    \tpoints.add(huitpoint);    \tpoints.add(dixpoint);    \tint[] val= {1,2,3,4,8,10};    \tfor(int a=0;a<points.size();a++) {    \t\tif(((String)points.get(a)).contains(letter.toLowerCase())) {    \t\t\treturn (Integer.toString(val[a]));    \t\t}    \t}    \treturn \"\";    }", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Jeton.java", "stars": "4", "class": {"name": "Jeton", "extends": "StackPane", "implements": null, "modifiers": ["public"]}}, {"method_name": "appuyer", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void appuyer(int positionX, int positionY) {\t\trectangle.setFill(Color.DARKGREY);\t\tif (rectangle.getId() != null) {\t\t\t((Case) ((Group) ((AnchorPane) rectangle.getParent().getParent()).getChildren().get(0)).getChildren()\t\t\t\t\t.get(Integer.parseInt(rectangle.getId()))).getChildren().get(0).setId(\"false\");\t\t\trectangle.setId(null);\t\t}\t\t// System.out.println(positionX+\"/\"+positionY);\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Jeton.java", "stars": "4", "class": {"name": "Jeton", "extends": "StackPane", "implements": null, "modifiers": ["public"]}}, {"method_name": "relacher", "params": ["double", "double", "double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void relacher(double base, double posX, double posY) {\t\t// variable de la position du curseur dans le rectangle\t\t// base -> layoutX du chevalet / 50 -> marge gauche // 618 -> layoutY grille -\t\t// layoutY chevalet\t\tint diffLayoutXGrille=(int)test.acceuilgauche.getChildren().get(0).getLayoutX();\t\tint diffLayoutYGrille=(int)test.acceuilgauche.getChildren().get(2).getLayoutY()-(int)test.acceuilgauche.getChildren().get(0).getLayoutY();\t\tdouble positionJetonX = posX + rectangle.getLayoutX() + base - diffLayoutXGrille;\t\tdouble positionJetonY = posY + rectangle.getLayoutY() + diffLayoutYGrille;\t\tint caseX = (int) positionJetonX / 33;\t\tint caseY = (int) positionJetonY / 33;\t\t/** Reposition du Jeton **/\t\tif (positionJetonY < 0 || positionJetonY > 494 || positionJetonX < 0 || positionJetonX > 494\t\t\t\t|| position(caseX, caseY)) {\t\t\trectangle.setLayoutY(origineY);\t\t\trectangle.setLayoutX(origineX);\t\t\tlettre.setLayoutX(origineX + texteX);\t\t\tlettre.setLayoutY(origineY + texteY);\t\t\tlettre.setId(null);\t\t} else {\t\t\t// extreme gauche 0 - 495 extreme droite // plateau = 500 // case = 33 -> 495 ->\t\t\t// exteme droite.\t\t\tlettre.setId(Integer.toString(caseX * 15 + caseY % 15));\t\t\t((Case)((Group)test.acceuilgauche.getChildren().get(0)).getChildren().get(caseX*15+caseY%15)).getChildren().get(1).setId(lettre.getText());\t\t\tcaseX = caseX * 33 - (int) base + 50;\t\t\tcaseY = caseY * 33 - 619;\t\t\trectangle.setLayoutX(caseX);\t\t\trectangle.setLayoutY(caseY);\t\t\tlettre.setLayoutX(caseX + texteX);\t\t\tlettre.setLayoutY(caseY + texteY);\t\t}\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Jeton.java", "stars": "4", "class": {"name": "Jeton", "extends": "StackPane", "implements": null, "modifiers": ["public"]}}, {"method_name": "position", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean position(int caseX, int caseY) {\t\tint posCase = caseX * 15 + caseY % 15;\t\tRectangle caselibre = (Rectangle) ((Case) ((Group) ((AnchorPane) rectangle.getParent().getParent())\t\t\t\t.getChildren().get(0)).getChildren().get(posCase)).getChildren().get(0);\t\tif (caselibre.getId().equals(\"false\")) {\t\t\tcaselibre.setId(\"true\");\t\t\trectangle.setId(Integer.toString(posCase));\t\t\treturn false;\t\t}\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Jeton.java", "stars": "4", "class": {"name": "Jeton", "extends": "StackPane", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create a SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/multipleiterates/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/multipleiterates/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/multipleiterates/MultipleIteratesTest.java", "stars": "15", "class": {"name": "MultipleIteratesTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetAUser", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetAUser() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = new User();      user.setId(1);      user.setName(\"Justin\");      user.setFirstAttr(new String[] { \"asd\", \"asd\" });      user.setSecondAttr(new String[] { \"fds\", \"fds\" });      mapper.insertUser(user);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/multipleiterates/MultipleIteratesTest.java", "stars": "15", "class": {"name": "MultipleIteratesTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "tasklet", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Tasklet", "snippet": "\tprotected Tasklet tasklet() {\t\treturn new Tasklet() {\t\t\t@Override\t\t\tpublic RepeatStatus execute(StepContribution contribution, ChunkContext context) {\t\t\t\treturn RepeatStatus.FINISHED;\t\t\t}\t\t};\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-batch/src/main/java/smoketest/batch/SampleBatchApplication.java", "stars": "47572", "class": {"name": "SampleBatchApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "job", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "Job", "snippet": "\tpublic Job job() throws Exception {\t\treturn this.jobs.get(\"job\").start(step1()).build();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-batch/src/main/java/smoketest/batch/SampleBatchApplication.java", "stars": "47572", "class": {"name": "SampleBatchApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "step1", "params": [], "throws": ["Exception"], "modifiers": ["protected"], "return_type": "Step", "snippet": "\tprotected Step step1() throws Exception {\t\treturn this.steps.get(\"step1\").tasklet(tasklet()).build();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-batch/src/main/java/smoketest/batch/SampleBatchApplication.java", "stars": "47572", "class": {"name": "SampleBatchApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\t// System.exit is common for Batch applications since the exit code can be used to\t\t// drive a workflow\t\tSystem.exit(SpringApplication.exit(SpringApplication.run(SampleBatchApplication.class, args)));\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-batch/src/main/java/smoketest/batch/SampleBatchApplication.java", "stars": "47572", "class": {"name": "SampleBatchApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addCapability", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addCapability(String capability) {        capabilities.add(capability);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/CapabilityFilter.java", "stars": "4", "class": {"name": "CapabilityFilter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addCapabilities", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addCapabilities(List<String> capabilities) {        this.capabilities.addAll(capabilities);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/CapabilityFilter.java", "stars": "4", "class": {"name": "CapabilityFilter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addCapabilities", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addCapabilities(String... capabilities) {        Collections.addAll(this.capabilities, capabilities);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/CapabilityFilter.java", "stars": "4", "class": {"name": "CapabilityFilter", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onAccuracyChanged", "params": ["android", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onAccuracyChanged (android.hardware.Sensor p0, int p1)\t{\t\tn_onAccuracyChanged (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/AccelerometerListener.java", "stars": "2", "class": {"name": "AccelerometerListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onAccuracyChanged", "params": ["android", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onAccuracyChanged (android.hardware.Sensor p0, int p1);\tpublic void onSensorChanged (android.hardware.SensorEvent p0)\t{\t\tn_onSensorChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/AccelerometerListener.java", "stars": "2", "class": {"name": "AccelerometerListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onSensorChanged", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onSensorChanged (android.hardware.SensorEvent p0)\t{\t\tn_onSensorChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/AccelerometerListener.java", "stars": "2", "class": {"name": "AccelerometerListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onSensorChanged", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onSensorChanged (android.hardware.SensorEvent p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/AccelerometerListener.java", "stars": "2", "class": {"name": "AccelerometerListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/AccelerometerListener.java", "stars": "2", "class": {"name": "AccelerometerListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a0e0a82d0db9a07d/AccelerometerListener.java", "stars": "2", "class": {"name": "AccelerometerListener", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "getResponseFormattedList", "params": ["String", "ArrayList<Media>"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "ArrayList<Media>", "snippet": "    public ArrayList<Media> getResponseFormattedList(String responseStr, ArrayList<Media> currentList) throws IOException {        ArrayList<Media> formattedData = currentList;        List<Movie> list = mapper.readValue(responseStr, mapper.getTypeFactory().constructCollectionType(List.class, Movie.class));        if (!list.isEmpty()) {            formattedData = new MovieResponse(list).formatListForPopcorn(currentList, this, getSubsProvider());        }        return formattedData;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/MoviesProvider.java", "stars": "4", "class": {"name": "MoviesProvider", "extends": "MediaProvider", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDetail", "params": ["ArrayList<Media>", "Integer", "Callback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getDetail(ArrayList<Media> currentList, Integer index, Callback callback) {        ArrayList<Media> returnList = new ArrayList<>();        returnList.add(currentList.get(index));        callback.onSuccess(null, returnList);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/MoviesProvider.java", "stars": "4", "class": {"name": "MoviesProvider", "extends": "MediaProvider", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLoadingMessage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getLoadingMessage() {        return R.string.loading_movies;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/MoviesProvider.java", "stars": "4", "class": {"name": "MoviesProvider", "extends": "MediaProvider", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNavigation", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<NavInfo>", "snippet": "    public List<NavInfo> getNavigation() {        List<NavInfo> tabs = new ArrayList<>();        tabs.add(new NavInfo(R.id.movie_filter_trending, Filters.Sort.TRENDING, Filters.Order.DESC, ButterApplication.getAppContext().getString(R.string.trending), R.drawable.movie_filter_trending));        tabs.add(new NavInfo(R.id.movie_filter_popular_now, Filters.Sort.POPULARITY, Filters.Order.DESC, ButterApplication.getAppContext().getString(R.string.popular), R.drawable.movie_filter_popular_now));        tabs.add(new NavInfo(R.id.movie_filter_top_rated, Filters.Sort.RATING, Filters.Order.DESC, ButterApplication.getAppContext().getString(R.string.top_rated), R.drawable.movie_filter_top_rated));        tabs.add(new NavInfo(R.id.movie_filter_release_date, Filters.Sort.DATE, Filters.Order.DESC, ButterApplication.getAppContext().getString(R.string.release_date), R.drawable.movie_filter_release_date));        tabs.add(new NavInfo(R.id.movie_filter_year, Filters.Sort.YEAR, Filters.Order.DESC, ButterApplication.getAppContext().getString(R.string.year), R.drawable.movie_filter_year));        tabs.add(new NavInfo(R.id.movie_filter_a_to_z, Filters.Sort.ALPHABET, Filters.Order.ASC, ButterApplication.getAppContext().getString(R.string.a_to_z), R.drawable.movie_filter_a_to_z));        return tabs;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/MoviesProvider.java", "stars": "4", "class": {"name": "MoviesProvider", "extends": "MediaProvider", "implements": null, "modifiers": ["public"]}}, {"method_name": "getGenres", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Genre>", "snippet": "    public List<Genre> getGenres() {        List<Genre> returnList = new ArrayList<>();        returnList.add(new Genre(\"all\", R.string.genre_all));        returnList.add(new Genre(\"action\", R.string.genre_action));        returnList.add(new Genre(\"adventure\", R.string.genre_adventure));        returnList.add(new Genre(\"animation\", R.string.genre_animation));        returnList.add(new Genre(\"comedy\", R.string.genre_comedy));        returnList.add(new Genre(\"crime\", R.string.genre_crime));        returnList.add(new Genre(\"disaster\", R.string.genre_disaster));        returnList.add(new Genre(\"documentary\", R.string.genre_documentary));        returnList.add(new Genre(\"drama\", R.string.genre_drama));        returnList.add(new Genre(\"eastern\", R.string.genre_eastern));        returnList.add(new Genre(\"family\", R.string.genre_family));        returnList.add(new Genre(\"fantasy\", R.string.genre_fantasy));        returnList.add(new Genre(\"fan-film\", R.string.genre_fan_film));        returnList.add(new Genre(\"film-noir\", R.string.genre_film_noir));        returnList.add(new Genre(\"history\", R.string.genre_history));        returnList.add(new Genre(\"holiday\", R.string.genre_holiday));        returnList.add(new Genre(\"horror\", R.string.genre_horror));        returnList.add(new Genre(\"indie\", R.string.genre_indie));        returnList.add(new Genre(\"music\", R.string.genre_music));        returnList.add(new Genre(\"mystery\", R.string.genre_mystery));        returnList.add(new Genre(\"road\", R.string.genre_road));        returnList.add(new Genre(\"romance\", R.string.genre_romance));        returnList.add(new Genre(\"science-fiction\", R.string.genre_sci_fi));        returnList.add(new Genre(\"short\", R.string.genre_short));        returnList.add(new Genre(\"sports\", R.string.genre_sport));        returnList.add(new Genre(\"suspense\", R.string.genre_suspense));        returnList.add(new Genre(\"thriller\", R.string.genre_thriller));        returnList.add(new Genre(\"tv-movie\", R.string.genre_tv_movie));        returnList.add(new Genre(\"war\", R.string.genre_war));        returnList.add(new Genre(\"western\", R.string.genre_western));        return returnList;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/MoviesProvider.java", "stars": "4", "class": {"name": "MoviesProvider", "extends": "MediaProvider", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLastCleanerThreadCheckTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getLastCleanerThreadCheckTime() {    return this.manager.getLastCleanerThreadCheckTime();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/jmx/JmxFlowRunnerManager.java", "stars": "18", "class": {"name": "JmxFlowRunnerManager", "extends": null, "implements": ["JmxFlowRunnerManagerMBean"], "modifiers": ["public"]}}, {"method_name": "isCleanerThreadActive", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isCleanerThreadActive() {    return this.manager.isCleanerThreadActive();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/jmx/JmxFlowRunnerManager.java", "stars": "18", "class": {"name": "JmxFlowRunnerManager", "extends": null, "implements": ["JmxFlowRunnerManagerMBean"], "modifiers": ["public"]}}, {"method_name": "getCleanerThreadState", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getCleanerThreadState() {    return this.manager.getCleanerThreadState().toString();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/jmx/JmxFlowRunnerManager.java", "stars": "18", "class": {"name": "JmxFlowRunnerManager", "extends": null, "implements": ["JmxFlowRunnerManagerMBean"], "modifiers": ["public"]}}, {"method_name": "isExecutorThreadPoolShutdown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isExecutorThreadPoolShutdown() {    return this.manager.isExecutorThreadPoolShutdown();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/jmx/JmxFlowRunnerManager.java", "stars": "18", "class": {"name": "JmxFlowRunnerManager", "extends": null, "implements": ["JmxFlowRunnerManagerMBean"], "modifiers": ["public"]}}, {"method_name": "getNumRunningFlows", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getNumRunningFlows() {    return this.manager.getNumRunningFlows();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/jmx/JmxFlowRunnerManager.java", "stars": "18", "class": {"name": "JmxFlowRunnerManager", "extends": null, "implements": ["JmxFlowRunnerManagerMBean"], "modifiers": ["public"]}}, {"method_name": "getNumQueuedFlows", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getNumQueuedFlows() {    return this.manager.getNumQueuedFlows();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/jmx/JmxFlowRunnerManager.java", "stars": "18", "class": {"name": "JmxFlowRunnerManager", "extends": null, "implements": ["JmxFlowRunnerManagerMBean"], "modifiers": ["public"]}}, {"method_name": "getRunningFlows", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getRunningFlows() {    return this.manager.getRunningFlowIds();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/jmx/JmxFlowRunnerManager.java", "stars": "18", "class": {"name": "JmxFlowRunnerManager", "extends": null, "implements": ["JmxFlowRunnerManagerMBean"], "modifiers": ["public"]}}, {"method_name": "getQueuedFlows", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getQueuedFlows() {    return this.manager.getQueuedFlowIds();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/jmx/JmxFlowRunnerManager.java", "stars": "18", "class": {"name": "JmxFlowRunnerManager", "extends": null, "implements": ["JmxFlowRunnerManagerMBean"], "modifiers": ["public"]}}, {"method_name": "getMaxNumRunningFlows", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getMaxNumRunningFlows() {    return this.manager.getMaxNumRunningFlows();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/jmx/JmxFlowRunnerManager.java", "stars": "18", "class": {"name": "JmxFlowRunnerManager", "extends": null, "implements": ["JmxFlowRunnerManagerMBean"], "modifiers": ["public"]}}, {"method_name": "getMaxQueuedFlows", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getMaxQueuedFlows() {    return this.manager.getTheadPoolQueueSize();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/jmx/JmxFlowRunnerManager.java", "stars": "18", "class": {"name": "JmxFlowRunnerManager", "extends": null, "implements": ["JmxFlowRunnerManagerMBean"], "modifiers": ["public"]}}, {"method_name": "getTotalNumExecutedFlows", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getTotalNumExecutedFlows() {    return this.manager.getTotalNumExecutedFlows();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/jmx/JmxFlowRunnerManager.java", "stars": "18", "class": {"name": "JmxFlowRunnerManager", "extends": null, "implements": ["JmxFlowRunnerManagerMBean"], "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.items.add(() -> new ItemCustom());\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/item/MudBrickItem.java", "stars": "2", "class": {"name": "MudBrickItem", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemEnchantability", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\t\tpublic int getItemEnchantability() {\t\t\treturn 0;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/item/MudBrickItem.java", "stars": "2", "class": {"name": "ItemCustom", "extends": "Item", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getUseDuration", "params": ["ItemStack"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\t\tpublic int getUseDuration(ItemStack itemstack) {\t\t\treturn 0;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/item/MudBrickItem.java", "stars": "2", "class": {"name": "ItemCustom", "extends": "Item", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDestroySpeed", "params": ["ItemStack", "BlockState"], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "\t\tpublic float getDestroySpeed(ItemStack par1ItemStack, BlockState par2Block) {\t\t\treturn 1F;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/item/MudBrickItem.java", "stars": "2", "class": {"name": "ItemCustom", "extends": "Item", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "reset", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void reset() {        this.init();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/Communication.java", "stars": "23", "class": {"name": "Communication", "extends": "BaseObject", "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void init() {        this.counter = new ConcurrentHashMap<>();        this.state = State.RUNNING;        this.throwable = null;        this.message = new ConcurrentHashMap<>();        this.timestamp = System.currentTimeMillis();        this.params = new ConcurrentHashMap<>();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/Communication.java", "stars": "23", "class": {"name": "Communication", "extends": "BaseObject", "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "getCounter", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Number>", "snippet": "    public Map<String, Number> getCounter() {        return this.counter;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/Communication.java", "stars": "23", "class": {"name": "Communication", "extends": "BaseObject", "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "getState", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "State", "snippet": "    public synchronized State getState() {        return this.state;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/Communication.java", "stars": "23", "class": {"name": "Communication", "extends": "BaseObject", "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "setState", "params": ["State", "boolean"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void setState(State state, boolean isForce) {        if (!isForce && this.state.equals(State.FAILED)) {            return;        }        this.state = state;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/Communication.java", "stars": "23", "class": {"name": "Communication", "extends": "BaseObject", "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "setState", "params": ["State"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void setState(State state) {        setState(state, false);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/Communication.java", "stars": "23", "class": {"name": "Communication", "extends": "BaseObject", "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "getThrowable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Throwable", "snippet": "    public Throwable getThrowable() {        return this.throwable;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/Communication.java", "stars": "23", "class": {"name": "Communication", "extends": "BaseObject", "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "getThrowableMessage", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "String", "snippet": "    public synchronized String getThrowableMessage() {        return this.throwable == null ? \"\" : this.throwable.getMessage();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/Communication.java", "stars": "23", "class": {"name": "Communication", "extends": "BaseObject", "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "setThrowable", "params": ["Throwable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setThrowable(Throwable throwable) {        setThrowable(throwable, false);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/Communication.java", "stars": "23", "class": {"name": "Communication", "extends": "BaseObject", "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "setThrowable", "params": ["Throwable", "boolean"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void setThrowable(Throwable throwable, boolean isForce) {        if (isForce) {            this.throwable = throwable;        } else {            this.throwable = this.throwable == null ? throwable : this.throwable;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/Communication.java", "stars": "23", "class": {"name": "Communication", "extends": "BaseObject", "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "getTimestamp", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getTimestamp() {        return this.timestamp;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/Communication.java", "stars": "23", "class": {"name": "Communication", "extends": "BaseObject", "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "setTimestamp", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTimestamp(long timestamp) {        this.timestamp = timestamp;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/Communication.java", "stars": "23", "class": {"name": "Communication", "extends": "BaseObject", "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "getMessage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,List>", "snippet": "    public Map<String, List<String>> getMessage() {        return this.message;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/Communication.java", "stars": "23", "class": {"name": "Communication", "extends": "BaseObject", "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "getMessage", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> getMessage(final String key) {        return message.get(key);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/Communication.java", "stars": "23", "class": {"name": "Communication", "extends": "BaseObject", "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "addMessage", "params": ["String", "String"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void addMessage(final String key, final String value) {        Validate.isTrue(StringUtils.isNotBlank(key), \"\u589e\u52a0message\u7684key\u4e0d\u80fd\u4e3a\u7a7a\");        List<String> valueList = this.message.computeIfAbsent(key, k -> new ArrayList<>());        valueList.add(value);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/Communication.java", "stars": "23", "class": {"name": "Communication", "extends": "BaseObject", "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "addParameter", "params": ["String", "String", "boolean"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void addParameter(final String key, final String value, boolean isUnique){        Validate.isTrue(StringUtils.isNotBlank(key), \"Parameter key cannot be empty(\u53c2\u6570\u7684key\u4e0d\u80fd\u4e3a\u7a7a)\");        if(isUnique){            this.params.put(key, value);        }else {            Object current = this.params.computeIfAbsent(key, k -> value);            if (current instanceof List) {                ((List<String>) current).add(value);            } else if(!current.equals(value)){                List<String> valueList = new ArrayList<>();                valueList.add(value);                this.params.put(key, valueList);            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/Communication.java", "stars": "23", "class": {"name": "Communication", "extends": "BaseObject", "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "getParameter", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object getParameter(final String key){        return this.params.get(key);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/Communication.java", "stars": "23", "class": {"name": "Communication", "extends": "BaseObject", "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "getParameters", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "    public Map<String, Object> getParameters(){        return params;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/Communication.java", "stars": "23", "class": {"name": "Communication", "extends": "BaseObject", "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "getLongCounter", "params": ["String"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "Long", "snippet": "    public synchronized Long getLongCounter(final String key) {        Number value = this.counter.get(key);        return value == null ? 0 : value.longValue();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/Communication.java", "stars": "23", "class": {"name": "Communication", "extends": "BaseObject", "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "setLongCounter", "params": ["String", "long"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void setLongCounter(final String key, final long value) {        Validate.isTrue(StringUtils.isNotBlank(key), \"\u8bbe\u7f6ecounter\u7684key\u4e0d\u80fd\u4e3a\u7a7a\");        this.counter.put(key, value);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/Communication.java", "stars": "23", "class": {"name": "Communication", "extends": "BaseObject", "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "getDoubleCounter", "params": ["String"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "Double", "snippet": "    public synchronized Double getDoubleCounter(final String key) {        Number value = this.counter.get(key);        return value == null ? 0.0d : value.doubleValue();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/Communication.java", "stars": "23", "class": {"name": "Communication", "extends": "BaseObject", "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "setDoubleCounter", "params": ["String", "double"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void setDoubleCounter(final String key, final double value) {        Validate.isTrue(StringUtils.isNotBlank(key), \"\u8bbe\u7f6ecounter\u7684key\u4e0d\u80fd\u4e3a\u7a7a\");        this.counter.put(key, value);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/Communication.java", "stars": "23", "class": {"name": "Communication", "extends": "BaseObject", "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "increaseCounter", "params": ["String", "long"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void increaseCounter(final String key, final long deltaValue) {        Validate.isTrue(StringUtils.isNotBlank(key), \"\u589e\u52a0counter\u7684key\u4e0d\u80fd\u4e3a\u7a7a\");        long value = this.getLongCounter(key);        this.counter.put(key, value + deltaValue);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/Communication.java", "stars": "23", "class": {"name": "Communication", "extends": "BaseObject", "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "clone", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Communication", "snippet": "    public Communication clone() {        Communication communication = new Communication();        /**         * clone counter         */        if (this.counter != null) {            for (Map.Entry<String, Number> entry : this.counter.entrySet()) {                String key = entry.getKey();                Number value = entry.getValue();                if (value instanceof Long) {                    communication.setLongCounter(key, (Long) value);                } else if (value instanceof Double) {                    communication.setDoubleCounter(key, (Double) value);                }            }        }        communication.setState(this.state, true);        communication.setThrowable(this.throwable, true);        communication.setTimestamp(this.timestamp);        /**         * clone message         */        if (this.message != null) {            for (final Map.Entry<String, List<String>> entry : this.message.entrySet()) {                String key = entry.getKey();                List<String> value = new ArrayList<>(entry.getValue());                communication.getMessage().put(key, value);            }        }        return communication;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/Communication.java", "stars": "23", "class": {"name": "Communication", "extends": "BaseObject", "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "mergeFrom", "params": ["Communication"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "Communication", "snippet": "    public synchronized Communication mergeFrom(final Communication otherComm) {        if (otherComm == null) {            return this;        }        /**         * counter\u7684\u5408\u5e76\uff0c\u5c06otherComm\u7684\u503c\u7d2f\u52a0\u5230this\u4e2d\uff0c\u4e0d\u5b58\u5728\u7684\u5219\u521b\u5efa         * \u540c\u4e3along         */        for (Entry<String, Number> entry : otherComm.getCounter().entrySet()) {            String key = entry.getKey();            Number otherValue = entry.getValue();            if (otherValue == null) {                continue;            }            Number value = this.counter.get(key);            if (value == null) {                value = otherValue;            } else {                if (value instanceof Long && otherValue instanceof Long) {                    value = value.longValue() + otherValue.longValue();                } else {                    value = value.doubleValue() + value.doubleValue();                }            }            this.counter.put(key, value);        }        // \u5408\u5e76state        mergeStateFrom(otherComm);        /**         * \u5408\u5e76throwable\uff0c\u5f53this\u7684throwable\u4e3a\u7a7a\u65f6\uff0c         * \u624d\u5c06otherComm\u7684throwable\u5408\u5e76\u8fdb\u6765         */        this.throwable = this.throwable == null ? otherComm.getThrowable() : this.throwable;        /**         * timestamp\u662f\u6574\u4e2a\u4e00\u6b21\u5408\u5e76\u7684\u65f6\u95f4\u6233\uff0c\u5355\u72ec\u4e24\u4e24communication\u4e0d\u4f5c\u5408\u5e76         */        /**         * message\u7684\u5408\u5e76\u91c7\u53d6\u6c42\u5e76\u7684\u65b9\u5f0f\uff0c\u5373\u5168\u90e8\u7d2f\u8ba1\u5728\u4e00\u8d77         */        for (Entry<String, List<String>> entry : otherComm.getMessage().entrySet()) {            String key = entry.getKey();            List<String> valueList = this.message.computeIfAbsent(key, k -> new ArrayList<>());            valueList.addAll(entry.getValue());        }        //Merge parameters        otherComm.getParameters().forEach((key, otherValue) ->{            Object currentValue = this.params.computeIfAbsent(key, k -> new ArrayList<>());            List<String> valueList;            if(!(currentValue instanceof List)){                valueList = new ArrayList<>();                this.params.put(key, valueList);                valueList.add(String.valueOf(currentValue));            }else{                valueList = (List<String>)currentValue;            }            if(otherValue instanceof List){                valueList.addAll((List<String>)otherValue);            }else{                valueList.add(String.valueOf(otherValue));            }        });        return this;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/Communication.java", "stars": "23", "class": {"name": "Communication", "extends": "BaseObject", "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "mergeStateFrom", "params": ["Communication"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "State", "snippet": "    public synchronized State mergeStateFrom(final Communication otherComm) {        State retState = this.getState();        if (otherComm == null) {            return retState;        }        if (this.state == State.FAILED || otherComm.getState() == State.FAILED                || this.state == State.KILLED || otherComm.getState() == State.KILLED) {            retState = State.FAILED;        } else if (this.state.isRunning() || otherComm.state.isRunning()) {            retState = State.RUNNING;        }        this.setState(retState);        return retState;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/Communication.java", "stars": "23", "class": {"name": "Communication", "extends": "BaseObject", "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "isFinished", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "boolean", "snippet": "    public synchronized boolean isFinished() {        return this.state == State.SUCCEEDED || this.state == State.FAILED                || this.state == State.KILLED;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/statistics/communication/Communication.java", "stars": "23", "class": {"name": "Communication", "extends": "BaseObject", "implements": ["Cloneable"], "modifiers": ["public"]}}, {"method_name": "emptyApplicationContext", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "\tvoid emptyApplicationContext() throws Exception {\t\tassertThatIllegalArgumentException().isThrownBy(() -> SpringApplication.main(getArgs()));\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SimpleMainTests.java", "stars": "47572", "class": {"name": "SimpleMainTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "basePackageScan", "params": ["CapturedOutput"], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "\tvoid basePackageScan(CapturedOutput output) throws Exception {\t\tSpringApplication.main(getArgs(ClassUtils.getPackageName(getClass()) + \".sampleconfig\"));\t\tassertThat(output).contains(SPRING_STARTUP);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SimpleMainTests.java", "stars": "47572", "class": {"name": "SimpleMainTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "configClassContext", "params": ["CapturedOutput"], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "\tvoid configClassContext(CapturedOutput output) throws Exception {\t\tSpringApplication.main(getArgs(getClass().getName()));\t\tassertThat(output).contains(SPRING_STARTUP);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SimpleMainTests.java", "stars": "47572", "class": {"name": "SimpleMainTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "xmlContext", "params": ["CapturedOutput"], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "\tvoid xmlContext(CapturedOutput output) throws Exception {\t\tSpringApplication.main(getArgs(\"org/springframework/boot/sample-beans.xml\"));\t\tassertThat(output).contains(SPRING_STARTUP);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SimpleMainTests.java", "stars": "47572", "class": {"name": "SimpleMainTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "mixedContext", "params": ["CapturedOutput"], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "\tvoid mixedContext(CapturedOutput output) throws Exception {\t\tSpringApplication.main(getArgs(getClass().getName(), \"org/springframework/boot/sample-beans.xml\"));\t\tassertThat(output).contains(SPRING_STARTUP);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SimpleMainTests.java", "stars": "47572", "class": {"name": "SimpleMainTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getArgs", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "\tprivate String[] getArgs(String... args) {\t\tList<String> list = new ArrayList<>(Arrays.asList(\"--spring.main.web-application-type=none\",\t\t\t\t\"--spring.main.show-banner=OFF\", \"--spring.main.register-shutdownHook=false\"));\t\tif (args.length > 0) {\t\t\tlist.add(\"--spring.main.sources=\" + StringUtils.arrayToCommaDelimitedString(args));\t\t}\t\treturn StringUtils.toStringArray(list);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SimpleMainTests.java", "stars": "47572", "class": {"name": "SimpleMainTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "discoveryFilter", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "DiscoveryFilter", "snippet": "    public static DiscoveryFilter discoveryFilter() {        return new DiscoveryFilter(ID, \"urn:schemas-upnp-org:device:MediaRenderer:1\");    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "getPriorityLevel", "params": ["Class<CapabilityMethods>"], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getPriorityLevel(Class<? extends CapabilityMethods> clazz) {        if (clazz.equals(MediaPlayer.class)) {            return getMediaPlayerCapabilityLevel();        }        else if (clazz.equals(MediaControl.class)) {            return getMediaControlCapabilityLevel();        }        else if (clazz.equals(VolumeControl.class)) {            return getVolumeControlCapabilityLevel();        }        else if (clazz.equals(PlaylistControl.class)) {            return getPlaylistControlCapabilityLevel();        }        return CapabilityPriorityLevel.NOT_SUPPORTED;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "setServiceDescription", "params": ["ServiceDescription"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setServiceDescription(ServiceDescription serviceDescription) {        super.setServiceDescription(serviceDescription);        updateControlURL();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "updateControlURL", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void updateControlURL() {        List<Service> serviceList = serviceDescription.getServiceList();        if (serviceList != null) {            for (int i = 0; i < serviceList.size(); i++) {                if(!serviceList.get(i).baseURL.endsWith(\"/\")) {                    serviceList.get(i).baseURL += \"/\";                }                if (serviceList.get(i).serviceType.contains(AV_TRANSPORT)) {                    avTransportURL = makeControlURL(serviceList.get(i).baseURL, serviceList.get(i).controlURL);                }                else if ((serviceList.get(i).serviceType.contains(RENDERING_CONTROL)) && !(serviceList.get(i).serviceType.contains(GROUP_RENDERING_CONTROL))) {                    renderingControlURL = makeControlURL(serviceList.get(i).baseURL, serviceList.get(i).controlURL);                }                else if ((serviceList.get(i).serviceType.contains(CONNECTION_MANAGER)) ) {                    connectionControlURL = makeControlURL(serviceList.get(i).baseURL, serviceList.get(i).controlURL);                }            }        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "makeControlURL", "params": ["String", "String"], "throws": null, "modifiers": [], "return_type": "String", "snippet": "    String makeControlURL(String base, String path) {        if (base == null || path == null) {            return null;        }        if (path.startsWith(\"/\")) {            return base + path.substring(1);        }        return base + path;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "getMediaPlayer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MediaPlayer", "snippet": "    public MediaPlayer getMediaPlayer() {        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "getMediaPlayerCapabilityLevel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getMediaPlayerCapabilityLevel() {        return CapabilityPriorityLevel.NORMAL;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "getMediaInfo", "params": ["MediaInfoListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getMediaInfo(final MediaInfoListener listener) {        getPositionInfo(new PositionInfoListener() {            @Override            public void onGetPositionInfoSuccess(final String positionInfoXml) {                Util.runInBackground(new Runnable() {                    @Override                    public void run() {                        String baseUrl = \"http://\" + getServiceDescription().getIpAddress() + \":\" + getServiceDescription().getPort();                        String trackMetaData = parseData(positionInfoXml, \"TrackMetaData\");                        MediaInfo info = DLNAMediaInfoParser.getMediaInfo(trackMetaData, baseUrl);                        Util.postSuccess(listener, info);                    }                });            }            @Override            public void onGetPositionInfoFailed(ServiceCommandError error) {                Util.postError(listener, error);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "subscribeMediaInfo", "params": ["MediaInfoListener"], "throws": null, "modifiers": ["public"], "return_type": "ServiceSubscription<MediaInfoListener>", "snippet": "    public ServiceSubscription<MediaInfoListener> subscribeMediaInfo(MediaInfoListener listener) {        URLServiceSubscription<MediaInfoListener> request = new URLServiceSubscription<MediaInfoListener>(this, \"info\", null, null);        request.addListener(listener);        addSubscription(request);        return request;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "displayMedia", "params": ["String", "String", "String", "String", "String", "String", "LaunchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void displayMedia(String url, String subsUrl, String mimeType, String title, String description, String iconSrc, final LaunchListener listener) {        final String instanceId = \"0\";        String[] mediaElements = mimeType.split(\"/\");        String mediaType = mediaElements[0];        String mediaFormat = mediaElements[1];        if (mediaType == null || mediaType.length() == 0 || mediaFormat == null || mediaFormat.length() == 0) {            Util.postError(listener, new ServiceCommandError(0, \"You must provide a valid mimeType (audio/*,  video/*, etc)\", null));            return;        }        mediaFormat = \"mp3\".equals(mediaFormat) ? \"mpeg\" : mediaFormat;        String mMimeType = String.format(\"%s/%s\", mediaType, mediaFormat);        ResponseListener<Object> responseListener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {                String method = \"Play\";                Map<String, String> parameters = new HashMap<String, String>();                parameters.put(\"Speed\", \"1\");                String payload = getMessageXml(AV_TRANSPORT_URN, method, \"0\", parameters);                ResponseListener<Object> playResponseListener = new ResponseListener<Object> () {                    @Override                    public void onSuccess(Object response) {                        LaunchSession launchSession = new LaunchSession();                        launchSession.setService(DLNAService.this);                        launchSession.setSessionType(LaunchSessionType.Media);                        Util.postSuccess(listener, new MediaLaunchObject(launchSession, DLNAService.this, DLNAService.this));                    }                    @Override                    public void onError(ServiceCommandError error) {                        Util.postError(listener, error);                    }                };                ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(DLNAService.this, method, payload, playResponseListener);                request.send();            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        };        String method = \"SetAVTransportURI\";        String metadata = getMetadata(url, subsUrl, mMimeType, title, description, iconSrc);        if (metadata == null) {            Util.postError(listener, ServiceCommandError.getError(500));            return;        }        Map<String, String> params = new LinkedHashMap<String, String>();        try {            params.put(\"CurrentURI\", encodeURL(url));        } catch (Exception e) {            Util.postError(listener, ServiceCommandError.getError(500));            return;        }        params.put(\"CurrentURIMetaData\", metadata);        String payload = getMessageXml(AV_TRANSPORT_URN, method, instanceId, params);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(DLNAService.this, method, payload, responseListener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "displayImage", "params": ["String", "String", "String", "String", "String", "LaunchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void displayImage(String url, String mimeType, String title, String description, String iconSrc, LaunchListener listener) {        displayMedia(url, null, mimeType, title, description, iconSrc, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "displayImage", "params": ["MediaInfo", "LaunchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void displayImage(MediaInfo mediaInfo, LaunchListener listener) {        String mediaUrl = null;        String mimeType = null;        String title = null;        String desc = null;        String iconSrc = null;        if (mediaInfo != null) {            mediaUrl = mediaInfo.getUrl();            mimeType = mediaInfo.getMimeType();            title = mediaInfo.getTitle();            desc = mediaInfo.getDescription();            if (mediaInfo.getImages() != null && mediaInfo.getImages().size() > 0) {                ImageInfo imageInfo = mediaInfo.getImages().get(0);                iconSrc = imageInfo.getUrl();            }        }        displayImage(mediaUrl, mimeType, title, desc, iconSrc, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "playMedia", "params": ["String", "String", "String", "String", "String", "boolean", "LaunchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void playMedia(String url, String mimeType, String title, String description, String iconSrc, boolean shouldLoop, LaunchListener listener) {        displayMedia(url, null, mimeType, title, description, iconSrc, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "playMedia", "params": ["MediaInfo", "boolean", "LaunchListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void playMedia(MediaInfo mediaInfo, boolean shouldLoop,            LaunchListener listener) {        String mediaUrl = null;        String subsUrl = null;        String mimeType = null;        String title = null;        String desc = null;        String iconSrc = null;        if (mediaInfo != null) {            mediaUrl = mediaInfo.getUrl();            subsUrl = mediaInfo.getSubsUrl();            mimeType = mediaInfo.getMimeType();            title = mediaInfo.getTitle();            desc = mediaInfo.getDescription();            if (mediaInfo.getImages() != null && mediaInfo.getImages().size() > 0) {                ImageInfo imageInfo = mediaInfo.getImages().get(0);                iconSrc = imageInfo.getUrl();            }        }        displayMedia(mediaUrl, subsUrl, mimeType, title, desc, iconSrc, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "closeMedia", "params": ["LaunchSession", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void closeMedia(LaunchSession launchSession, ResponseListener<Object> listener) {        if (launchSession.getService() instanceof DLNAService)            ((DLNAService) launchSession.getService()).stop(listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "getMediaControl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MediaControl", "snippet": "    public MediaControl getMediaControl() {        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "getMediaControlCapabilityLevel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getMediaControlCapabilityLevel() {        return CapabilityPriorityLevel.NORMAL;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "play", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void play(ResponseListener<Object> listener) {        String method = \"Play\";        String instanceId = \"0\";        Map<String, String> parameters = new LinkedHashMap<String, String>();        parameters.put(\"Speed\", \"1\");        String payload = getMessageXml(AV_TRANSPORT_URN, method, instanceId, parameters);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(this, method, payload, listener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "pause", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void pause(ResponseListener<Object> listener) {        String method = \"Pause\";        String instanceId = \"0\";        String payload = getMessageXml(AV_TRANSPORT_URN, method, instanceId, null);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(this, method, payload, listener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "stop", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void stop(ResponseListener<Object> listener) {        String method = \"Stop\";        String instanceId = \"0\";        String payload = getMessageXml(AV_TRANSPORT_URN, method, instanceId, null);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(this, method, payload, listener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "rewind", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void rewind(ResponseListener<Object> listener) {        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "fastForward", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void fastForward(ResponseListener<Object> listener) {        Util.postError(listener, ServiceCommandError.notSupported());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "getPlaylistControl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "PlaylistControl", "snippet": "    public PlaylistControl getPlaylistControl() {        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "getPlaylistControlCapabilityLevel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getPlaylistControlCapabilityLevel() {        return CapabilityPriorityLevel.NORMAL;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "previous", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void previous(ResponseListener<Object> listener) {        String method = \"Previous\";        String instanceId = \"0\";        String payload = getMessageXml(AV_TRANSPORT_URN, method, instanceId, null);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(this, method, payload, listener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "next", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void next(ResponseListener<Object> listener) {        String method = \"Next\";        String instanceId = \"0\";        String payload = getMessageXml(AV_TRANSPORT_URN, method, instanceId, null);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(this, method, payload, listener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "jumpToTrack", "params": ["long", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void jumpToTrack(long index, ResponseListener<Object> listener) {        // DLNA requires start index from 1. 0 is a special index which means the end of media.        ++index;        seek(\"TRACK_NR\", Long.toString(index), listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "setPlayMode", "params": ["PlayMode", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPlayMode(PlayMode playMode, ResponseListener<Object> listener) {        String method = \"SetPlayMode\";        String instanceId = \"0\";        String mode;        switch (playMode) {        case RepeatAll:            mode = \"REPEAT_ALL\";            break;        case RepeatOne:            mode = \"REPEAT_ONE\";            break;        case Shuffle:            mode = \"SHUFFLE\";            break;        default:            mode = \"NORMAL\";        }        Map<String, String> parameters = new LinkedHashMap<String, String>();        parameters.put(\"NewPlayMode\", mode);        String payload = getMessageXml(AV_TRANSPORT_URN, method, instanceId, parameters);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(this, method, payload, listener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "seek", "params": ["long", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void seek(long position, ResponseListener<Object> listener) {        long second = (position / 1000) % 60;        long minute = (position / (1000 * 60)) % 60;        long hour = (position / (1000 * 60 * 60)) % 24;        String time = String.format(Locale.US, \"%02d:%02d:%02d\", hour, minute, second);        seek(\"REL_TIME\", time, listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "getPositionInfo", "params": ["PositionInfoListener"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void getPositionInfo(final PositionInfoListener listener) {        String method = \"GetPositionInfo\";        String instanceId = \"0\";        String payload = getMessageXml(AV_TRANSPORT_URN, method, instanceId, null);        ResponseListener<Object> responseListener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {                if (listener != null) {                    listener.onGetPositionInfoSuccess((String)response);                }            }            @Override            public void onError(ServiceCommandError error) {                if (listener != null) {                    listener.onGetPositionInfoFailed(error);                }            }        };        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(this, method, payload, responseListener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "getDuration", "params": ["DurationListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getDuration(final DurationListener listener) {        getPositionInfo(new PositionInfoListener() {            @Override            public void onGetPositionInfoSuccess(String positionInfoXml) {                String strDuration = parseData(positionInfoXml, \"TrackDuration\");                String trackMetaData = parseData(positionInfoXml, \"TrackMetaData\");                MediaInfo info = DLNAMediaInfoParser.getMediaInfo(trackMetaData);                // Check if duration we get not equals 0 or media is image, otherwise wait 1 second and try again                if ((!strDuration.equals(\"0:00:00\")) || (info.getMimeType().contains(\"image\"))) {                    long milliTimes = convertStrTimeFormatToLong(strDuration);                    Util.postSuccess(listener, milliTimes);                } else new Timer().schedule(new TimerTask() {                    @Override                    public void run() {                        getDuration(listener);                    }                }, 1000);            }            @Override            public void onGetPositionInfoFailed(ServiceCommandError error) {                Util.postError(listener, error);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "getPosition", "params": ["PositionListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getPosition(final PositionListener listener) {        getPositionInfo(new PositionInfoListener() {            @Override            public void onGetPositionInfoSuccess(String positionInfoXml) {                String strDuration = parseData(positionInfoXml, \"RelTime\");                long milliTimes = convertStrTimeFormatToLong(strDuration);                Util.postSuccess(listener, milliTimes);            }            @Override            public void onGetPositionInfoFailed(ServiceCommandError error) {                Util.postError(listener, error);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "seek", "params": ["String", "String", "ResponseListener<Object>"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void seek(String unit, String target, ResponseListener<Object> listener) {        String method = \"Seek\";        String instanceId = \"0\";        Map<String, String> parameters = new LinkedHashMap<String, String>();        parameters.put(\"Unit\", unit);        parameters.put(\"Target\", target);        String payload = getMessageXml(AV_TRANSPORT_URN, method, instanceId, parameters);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(this, method, payload, listener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "getMessageXml", "params": ["String", "String", "String", "Map<String,String>"], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "    protected String getMessageXml(String serviceURN, String method, String instanceId, Map<String, String> params) {        try {            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();            DocumentBuilder db = dbf.newDocumentBuilder();            Document doc = db.newDocument();            doc.setXmlStandalone(true);            doc.setXmlVersion(\"1.0\");            Element root = doc.createElement(\"s:Envelope\");            Element bodyElement = doc.createElement(\"s:Body\");            Element methodElement = doc.createElementNS(serviceURN, \"u:\" + method);            Element instanceElement = doc.createElement(\"InstanceID\");            root.setAttribute(\"s:encodingStyle\", \"http://schemas.xmlsoap.org/soap/encoding/\");            root.setAttribute(\"xmlns:s\", \"http://schemas.xmlsoap.org/soap/envelope/\");            doc.appendChild(root);            root.appendChild(bodyElement);            bodyElement.appendChild(methodElement);            if (instanceId != null) {                instanceElement.setTextContent(instanceId);                methodElement.appendChild(instanceElement);            }            if (params != null) {                for (Map.Entry<String, String> entry : params.entrySet()) {                    String key = entry.getKey();                    String value = entry.getValue();                    Element element = doc.createElement(key);                    element.setTextContent(value);                    methodElement.appendChild(element);                }            }            return xmlToString(doc, true);        } catch (Exception e) {            return null;        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "getMetadata", "params": ["String", "String", "String", "String", "String", "String"], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "    protected String getMetadata(String mediaURL, String subsUrl, String mime, String title, String description, String iconUrl) {        try {            String objectClass = \"\";            if (mime.startsWith(\"image\")) {                objectClass = \"object.item.imageItem\";            } else if (mime.startsWith(\"video\")) {                objectClass = \"object.item.videoItem\";            } else if (mime.startsWith(\"audio\")) {                objectClass = \"object.item.audioItem\";            }            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();            DocumentBuilder db = dbf.newDocumentBuilder();            Document doc = db.newDocument();            Element didlRoot = doc.createElement(\"DIDL-Lite\");            Element itemElement = doc.createElement(\"item\");            Element titleElement = doc.createElement(\"dc:title\");            Element descriptionElement = doc.createElement(\"dc:description\");            Element resElement = doc.createElement(\"res\");            Element albumArtElement = doc.createElement(\"upnp:albumArtURI\");            Element clazzElement = doc.createElement(\"upnp:class\");            didlRoot.appendChild(itemElement);            itemElement.appendChild(titleElement);            itemElement.appendChild(descriptionElement);            itemElement.appendChild(resElement);            itemElement.appendChild(albumArtElement);            itemElement.appendChild(clazzElement);            didlRoot.setAttributeNS(\"http://www.w3.org/2000/xmlns/\", \"xmlns\", \"urn:schemas-upnp-org:metadata-1-0/DIDL-Lite/\");            didlRoot.setAttributeNS(\"http://www.w3.org/2000/xmlns/\", \"xmlns:upnp\", \"urn:schemas-upnp-org:metadata-1-0/upnp/\");            didlRoot.setAttributeNS(\"http://www.w3.org/2000/xmlns/\", \"xmlns:dc\", \"http://purl.org/dc/elements/1.1/\");            didlRoot.setAttributeNS(\"http://www.w3.org/2000/xmlns/\", \"xmlns:sec\", \"http://www.sec.co.kr/\");            titleElement.setTextContent(title);            descriptionElement.setTextContent(description);            resElement.setTextContent(encodeURL(mediaURL));            albumArtElement.setTextContent(encodeURL(iconUrl));            clazzElement.setTextContent(objectClass);            itemElement.setAttribute(\"id\", \"1000\");            itemElement.setAttribute(\"parentID\", \"0\");            itemElement.setAttribute(\"restricted\", \"0\");            resElement.setAttribute(\"protocolInfo\", \"http-get:*:\" + mime + \":DLNA.ORG_OP=01\");            if(subsUrl != null) {                resElement.setAttributeNS(\"http://www.w3.org/2000/xmlns/\", \"xmlns:pv\", \"http://www.pv.com/pvns/\");                resElement.setAttribute(\"pv:subtitleFileUri\", subsUrl);                resElement.setAttribute(\"pv:subtitleFileType\", \"srt\");                Element smiResElement = doc.createElement(\"res\");                smiResElement.setAttribute(\"protocolInfo\", \"http-get::smi/caption:\");                smiResElement.setTextContent(subsUrl);                itemElement.appendChild(smiResElement);                Element srtResElement = doc.createElement(\"res\");                srtResElement.setAttribute(\"protocolInfo\", \"http-get::text/srt:\");                srtResElement.setTextContent(subsUrl);                itemElement.appendChild(srtResElement);                Element captionInfoExElement = doc.createElement(\"sec:CaptionInfoEx\");                captionInfoExElement.setAttribute(\"sec:type\", \"srt\");                captionInfoExElement.setTextContent(subsUrl);                itemElement.appendChild(captionInfoExElement);                Element captionInfoElement = doc.createElement(\"sec:CaptionInfo\");                captionInfoElement.setAttribute(\"sec:type\", \"srt\");                captionInfoElement.setTextContent(subsUrl);                itemElement.appendChild(captionInfoElement);            }            doc.appendChild(didlRoot);            return xmlToString(doc, false);        } catch (Exception e) {            return null;        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "encodeURL", "params": ["String"], "throws": ["MalformedURLException", "URISyntaxException", "UnsupportedEncodingException"], "modifiers": [], "return_type": "String", "snippet": "    String encodeURL(String mediaURL) throws MalformedURLException, URISyntaxException, UnsupportedEncodingException {        if (mediaURL == null || mediaURL.isEmpty()) {            return \"\";        }        String decodedURL = URLDecoder.decode(mediaURL, \"UTF-8\");        if (decodedURL.equals(mediaURL)) {            URL url = new URL(mediaURL);            URI uri = new URI(url.getProtocol(), url.getUserInfo(), url.getHost(), url.getPort(), url.getPath(), url.getQuery(), url.getRef());            return uri.toASCIIString();        }        return mediaURL;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "xmlToString", "params": ["Node", "boolean"], "throws": ["TransformerException"], "modifiers": [], "return_type": "String", "snippet": "    String xmlToString(Node source, boolean xmlDeclaration) throws TransformerException {        DOMSource domSource = new DOMSource(source);        StringWriter writer = new StringWriter();        StreamResult result = new StreamResult(writer);        TransformerFactory tf = TransformerFactory.newInstance();        Transformer transformer = tf.newTransformer();        if (!xmlDeclaration) {            transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"yes\");        }        transformer.transform(domSource, result);        return writer.toString();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "sendCommand", "params": ["ServiceCommand<?>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendCommand(final ServiceCommand<?> mCommand) {        Util.runInBackground(new Runnable() {            @SuppressWarnings(\"unchecked\")            @Override            public void run() {                ServiceCommand<ResponseListener<Object>> command = (ServiceCommand<ResponseListener<Object>>) mCommand;                String method = command.getTarget();                String payload = (String) command.getPayload();                String targetURL = null;                String serviceURN = null;                if (payload == null) {                    Util.postError(command.getResponseListener(), new ServiceCommandError(0, \"Cannot process the command, \\\"payload\\\" is missed\", null));                    return;                }                if (payload.contains(AV_TRANSPORT_URN)) {                    targetURL = avTransportURL;                    serviceURN = AV_TRANSPORT_URN;                } else if (payload.contains(RENDERING_CONTROL_URN)) {                    targetURL = renderingControlURL;                    serviceURN = RENDERING_CONTROL_URN;                } else if (payload.contains(CONNECTION_MANAGER_URN)) {                    targetURL = connectionControlURL;                    serviceURN = CONNECTION_MANAGER_URN;                }                if (serviceURN == null) {                    Util.postError(command.getResponseListener(), new ServiceCommandError(0, \"Cannot process the command, \\\"serviceURN\\\" is missed\", null));                    return;                }                if (targetURL == null) {                    Util.postError(command.getResponseListener(), new ServiceCommandError(0, \"Cannot process the command, \\\"targetURL\\\" is missed\", null));                    return;                }                try {                    HttpConnection connection = createHttpConnection(targetURL);                    connection.setHeader(\"Content-Type\", \"text/xml; charset=utf-8\");                    connection.setHeader(\"SOAPAction\", String.format(\"\\\"%s#%s\\\"\", serviceURN, method));                    connection.setMethod(HttpConnection.Method.POST);                    connection.setPayload(payload);                    connection.execute();                    int code = connection.getResponseCode();                    if (code == 200) {                        Util.postSuccess(command.getResponseListener(), connection.getResponseString());                    } else {                        Util.postError(command.getResponseListener(), ServiceCommandError.getError(code));                    }                } catch (IOException e) {                    Util.postError(command.getResponseListener(), new ServiceCommandError(0, e.getMessage(), null));                }            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "createHttpConnection", "params": ["String"], "throws": ["IOException"], "modifiers": [], "return_type": "HttpConnection", "snippet": "    HttpConnection createHttpConnection(String targetURL) throws IOException {        return HttpConnection.newInstance(URI.create(targetURL));    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "updateCapabilities", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void updateCapabilities() {        List<String> capabilities = new ArrayList<String>();        capabilities.add(Display_Image);        capabilities.add(Play_Video);        capabilities.add(Play_Audio);        capabilities.add(Play_Playlist);        capabilities.add(Close);        capabilities.add(Subtitles_Srt);        capabilities.add(MetaData_Title);        capabilities.add(MetaData_MimeType);        capabilities.add(MediaInfo_Get);        capabilities.add(MediaInfo_Subscribe);        capabilities.add(Play);        capabilities.add(Pause);        capabilities.add(Stop);        capabilities.add(Seek);        capabilities.add(Position);        capabilities.add(Duration);        capabilities.add(PlayState);        capabilities.add(PlayState_Subscribe);        // for supporting legacy apps. it might be removed in future releases          capabilities.add(MediaControl.Next);        capabilities.add(MediaControl.Previous);        // playlist capabilities        capabilities.add(PlaylistControl.Next);        capabilities.add(PlaylistControl.Previous);        capabilities.add(PlaylistControl.JumpToTrack);        capabilities.add(PlaylistControl.SetPlayMode);        capabilities.add(Volume_Set);        capabilities.add(Volume_Get);        capabilities.add(Volume_Up_Down);        capabilities.add(Volume_Subscribe);        capabilities.add(Mute_Get);        capabilities.add(Mute_Set);        capabilities.add(Mute_Subscribe);        setCapabilities(capabilities);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "decodeLaunchSession", "params": ["String", "JSONObject"], "throws": ["JSONException"], "modifiers": ["public"], "return_type": "LaunchSession", "snippet": "    public LaunchSession decodeLaunchSession(String type, JSONObject sessionObj) throws JSONException {        if (type.equals(\"dlna\")) {            LaunchSession launchSession = LaunchSession.launchSessionFromJSONObject(sessionObj);            launchSession.setService(this);            return launchSession;        }        return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "isXmlEncoded", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isXmlEncoded(final String xml) {        if (xml == null || xml.length() < 4) {            return false;        }        return xml.trim().substring(0, 4).equals(\"&lt;\");    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "parseData", "params": ["String", "String"], "throws": null, "modifiers": [], "return_type": "String", "snippet": "    String parseData(String response, String key) {        if (isXmlEncoded(response)) {            response = Html.fromHtml(response).toString();        }        XmlPullParser parser = Xml.newPullParser();        try {            parser.setInput(new StringReader(response));            int event;            boolean isFound = false;            do {                event = parser.next();                if (event == XmlPullParser.START_TAG) {                    String tag = parser.getName();                    if (key.equals(tag)) {                        isFound = true;                    }                } else if (event == XmlPullParser.TEXT && isFound) {                    return parser.getText();                }            } while (event != XmlPullParser.END_DOCUMENT);        } catch (Exception e) {            e.printStackTrace();        }        return \"\";    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "convertStrTimeFormatToLong", "params": ["String"], "throws": null, "modifiers": [], "return_type": "long", "snippet": "    long convertStrTimeFormatToLong(String strTime) {        long time = 0;        SimpleDateFormat df = new SimpleDateFormat(\"HH:mm:ss\");        try {            Date d = df.parse(strTime);            Date d2 = df.parse(\"00:00:00\");            time = d.getTime() - d2.getTime();        } catch (ParseException e) {            Log.w(Util.T, \"Invalid Time Format: \" + strTime);        } catch (NullPointerException e) {            Log.w(Util.T, \"Null time argument\");        }        return time;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "getPlayState", "params": ["PlayStateListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getPlayState(final PlayStateListener listener) {        String method = \"GetTransportInfo\";        String instanceId = \"0\";        String payload = getMessageXml(AV_TRANSPORT_URN, method, instanceId, null);        ResponseListener<Object> responseListener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {                String transportState = parseData((String)response, \"CurrentTransportState\");                PlayStateStatus status = PlayStateStatus.convertTransportStateToPlayStateStatus(transportState);                Util.postSuccess(listener, status);            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        };        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(this, method, payload, responseListener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "subscribePlayState", "params": ["PlayStateListener"], "throws": null, "modifiers": ["public"], "return_type": "ServiceSubscription<PlayStateListener>", "snippet": "    public ServiceSubscription<PlayStateListener> subscribePlayState(PlayStateListener listener) {        URLServiceSubscription<PlayStateListener> request = new URLServiceSubscription<MediaControl.PlayStateListener>(this, PLAY_STATE, null, null);        request.addListener(listener);        addSubscription(request);        return request;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "addSubscription", "params": ["URLServiceSubscription<?>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void addSubscription(URLServiceSubscription<?> subscription) {        if (!httpServer.isRunning()) {            Util.runInBackground(new Runnable() {                @Override                public void run() {                    httpServer.start();                }            });            subscribeServices();        }        httpServer.getSubscriptions().add(subscription);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "unsubscribe", "params": ["URLServiceSubscription<?>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void unsubscribe(URLServiceSubscription<?> subscription) {        httpServer.getSubscriptions().remove(subscription);        if (httpServer.getSubscriptions().isEmpty()) {            unsubscribeServices();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "isConnectable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isConnectable() {        return true;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "isConnected", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isConnected() {        return connected;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "connect", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void connect() {        //  TODO:  Fix this for roku.  Right now it is using the InetAddress reachable function.  Need to use an HTTP Method.//        mServiceReachability = DeviceServiceReachability.getReachability(serviceDescription.getIpAddress(), this);//        mServiceReachability.start();        connected = true;        reportConnected(true);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "getDeviceCapabilities", "params": ["PositionInfoListener"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void getDeviceCapabilities(final PositionInfoListener listener) {        String method = \"GetDeviceCapabilities\";        String instanceId = \"0\";        String payload = getMessageXml(AV_TRANSPORT_URN, method, instanceId, null);        ResponseListener<Object> responseListener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {                if (listener != null) {                    listener.onGetPositionInfoSuccess((String)response);                }            }            @Override            public void onError(ServiceCommandError error) {                if (listener != null) {                    listener.onGetPositionInfoFailed(error);                }            }        };        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(this, method, payload, responseListener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "getProtocolInfo", "params": ["PositionInfoListener"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void getProtocolInfo(final PositionInfoListener listener) {        String method = \"GetProtocolInfo\";        String instanceId = null;        String payload = getMessageXml(CONNECTION_MANAGER_URN, method, instanceId, null);        ResponseListener<Object> responseListener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {                if (listener != null) {                    listener.onGetPositionInfoSuccess((String) response);                }            }            @Override            public void onError(ServiceCommandError error) {                if (listener != null) {                    listener.onGetPositionInfoFailed(error);                }            }        };        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(this, method, payload, responseListener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "disconnect", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void disconnect() {        connected = false;        if (mServiceReachability != null)            mServiceReachability.stop();        Util.runOnUI(new Runnable() {            @Override            public void run() {                if (listener != null) {                    listener.onDisconnect(DLNAService.this, null);                }            }        });        Util.runInBackground(new Runnable() {            @Override            public void run() {                httpServer.stop();            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "onLoseReachability", "params": ["DeviceServiceReachability"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onLoseReachability(DeviceServiceReachability reachability) {        if (connected) {            disconnect();        } else {            mServiceReachability.stop();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "subscribeServices", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void subscribeServices() {        Util.runInBackground(new Runnable() {            @Override            public void run() {                String myIpAddress = null;                try {                    myIpAddress = Util.getIpAddress(context).getHostAddress();                } catch (UnknownHostException e) {                    e.printStackTrace();                }                List<Service> serviceList = serviceDescription.getServiceList();                if (serviceList != null) {                    for (int i = 0; i < serviceList.size(); i++) {                        String eventSubURL = makeControlURL(\"/\", serviceList.get(i).eventSubURL);                        if (eventSubURL == null) {                            continue;                        }                        try {                            HttpConnection connection = HttpConnection.newSubscriptionInstance(                                    new URI(\"http\", \"\", serviceDescription.getIpAddress(), serviceDescription.getPort(), eventSubURL, \"\", \"\"));                            connection.setMethod(HttpConnection.Method.SUBSCRIBE);                            connection.setHeader(\"CALLBACK\", \"<http://\" + myIpAddress + \":\" + httpServer.getPort() + eventSubURL + \">\");                            connection.setHeader(\"NT\", \"upnp:event\");                            connection.setHeader(\"TIMEOUT\", \"Second-\" + TIMEOUT);                            connection.setHeader(\"Connection\", \"close\");                            connection.setHeader(\"Content-length\", \"0\");                            connection.setHeader(\"USER-AGENT\", \"Android UPnp/1.1 ConnectSDK\");                            connection.execute();                            if (connection.getResponseCode() == 200) {                                SIDList.put(serviceList.get(i).serviceType, connection.getResponseHeader(\"SID\"));                            }                        } catch (Exception e) {                            e.printStackTrace();                        }                    }                }            }        });        resubscribeServices();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "resubscribeServices", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void resubscribeServices() {        resubscriptionTimer = new Timer();        resubscriptionTimer.scheduleAtFixedRate(new TimerTask() {            @Override            public void run() {                Util.runInBackground(new Runnable() {                    @Override                    public void run() {                        List<Service> serviceList = serviceDescription.getServiceList();                        if (serviceList != null) {                            for (int i = 0; i < serviceList.size(); i++) {                                String eventSubURL = makeControlURL(\"/\", serviceList.get(i).eventSubURL);                                if (eventSubURL == null) {                                    continue;                                }                                String SID = SIDList.get(serviceList.get(i).serviceType);                                try {                                    HttpConnection connection = HttpConnection.newSubscriptionInstance(                                            new URI(\"http\", \"\", serviceDescription.getIpAddress(), serviceDescription.getPort(), eventSubURL, \"\", \"\"));                                    connection.setMethod(HttpConnection.Method.SUBSCRIBE);                                    connection.setHeader(\"TIMEOUT\", \"Second-\" + TIMEOUT);                                    connection.setHeader(\"SID\", SID);                                    connection.execute();                                } catch (Exception e) {                                    e.printStackTrace();                                }                            }                        }                    }                });            }        }, TIMEOUT/2*1000, TIMEOUT/2*1000);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "unsubscribeServices", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void unsubscribeServices() {        if (resubscriptionTimer != null) {            resubscriptionTimer.cancel();        }        Util.runInBackground(new Runnable() {            @Override            public void run() {                final List<Service> serviceList = serviceDescription.getServiceList();                if (serviceList != null) {                    for (int i = 0; i < serviceList.size(); i++) {                        String eventSubURL = makeControlURL(\"/\", serviceList.get(i).eventSubURL);                        if (eventSubURL == null) {                            continue;                        }                        String sid = SIDList.get(serviceList.get(i).serviceType);                        try {                            HttpConnection connection = HttpConnection.newSubscriptionInstance(                                    new URI(\"http\", \"\", serviceDescription.getIpAddress(), serviceDescription.getPort(), eventSubURL, \"\", \"\"));                            connection.setMethod(HttpConnection.Method.UNSUBSCRIBE);                            connection.setHeader(\"SID\", sid);                            connection.execute();                            if (connection.getResponseCode() == 200) {                                SIDList.remove(serviceList.get(i).serviceType);                            }                        } catch (Exception e) {                            e.printStackTrace();                        }                    }                }            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "getVolumeControl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "VolumeControl", "snippet": "    public VolumeControl getVolumeControl() {        return this;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "getVolumeControlCapabilityLevel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CapabilityPriorityLevel", "snippet": "    public CapabilityPriorityLevel getVolumeControlCapabilityLevel() {        return CapabilityPriorityLevel.NORMAL;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "volumeUp", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void volumeUp(final ResponseListener<Object> listener) {        getVolume(new VolumeListener() {            @Override            public void onSuccess(final Float volume) {                if (volume >= 1.0) {                    Util.postSuccess(listener, null);                }                else {                    float newVolume = (float) (volume + 0.01);                    if (newVolume > 1.0)                        newVolume = (float) 1.0;                    setVolume(newVolume, listener);                    Util.postSuccess(listener, null);                }            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "volumeDown", "params": ["ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void volumeDown(final ResponseListener<Object> listener) {        getVolume(new VolumeListener() {            @Override            public void onSuccess(final Float volume) {                if (volume <= 0.0) {                    Util.postSuccess(listener, null);                }                else {                    float newVolume = (float) (volume - 0.01);                    if (newVolume < 0.0)                        newVolume = (float) 0.0;                    setVolume(newVolume, listener);                    Util.postSuccess(listener, null);                }            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "setVolume", "params": ["float", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setVolume(float volume, ResponseListener<Object> listener) {        String method = \"SetVolume\";        String instanceId = \"0\";        String channel = \"Master\";        String value = String.valueOf((int)(volume*100));        Map<String, String> params = new LinkedHashMap<String, String>();        params.put(\"Channel\", channel);        params.put(\"DesiredVolume\", value);        String payload = getMessageXml(RENDERING_CONTROL_URN, method, instanceId, params);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(this, method, payload, listener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "getVolume", "params": ["VolumeListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getVolume(final VolumeListener listener) {        String method = \"GetVolume\";        String instanceId = \"0\";        String channel = \"Master\";        Map<String, String> params = new LinkedHashMap<String, String>();        params.put(\"Channel\", channel);        String payload = getMessageXml(RENDERING_CONTROL_URN, method, instanceId, params);        ResponseListener<Object> responseListener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {                String currentVolume = parseData((String) response, \"CurrentVolume\");                int iVolume = 0;                try {                    //noinspection ResultOfMethodCallIgnored                    Integer.parseInt(currentVolume);                } catch (RuntimeException ex) {                    ex.printStackTrace();                }                float fVolume = (float) (iVolume / 100.0);                Util.postSuccess(listener, fVolume);            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        };        ServiceCommand<VolumeListener> request = new ServiceCommand<VolumeListener>(this, method, payload, responseListener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "setMute", "params": ["boolean", "ResponseListener<Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMute(boolean isMute, ResponseListener<Object> listener) {        String method = \"SetMute\";        String instanceId = \"0\";        String channel = \"Master\";        int muteStatus = (isMute) ? 1 : 0;        Map<String, String> params = new LinkedHashMap<String, String>();        params.put(\"Channel\", channel);        params.put(\"DesiredMute\", String.valueOf(muteStatus));        String payload = getMessageXml(RENDERING_CONTROL_URN, method, instanceId, params);        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(this, method, payload, listener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "getMute", "params": ["MuteListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getMute(final MuteListener listener) {        String method = \"GetMute\";        String instanceId = \"0\";        String channel = \"Master\";        Map<String, String> params = new LinkedHashMap<String, String>();        params.put(\"Channel\", channel);        String payload = getMessageXml(RENDERING_CONTROL_URN, method, instanceId, params);        ResponseListener<Object> responseListener = new ResponseListener<Object>() {            @Override            public void onSuccess(Object response) {                String currentMute = parseData((String) response, \"CurrentMute\");                boolean isMute = Boolean.parseBoolean(currentMute);                Util.postSuccess(listener, isMute);            }            @Override            public void onError(ServiceCommandError error) {                Util.postError(listener, error);            }        };        ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(this, method, payload, responseListener);        request.send();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "subscribeVolume", "params": ["VolumeListener"], "throws": null, "modifiers": ["public"], "return_type": "ServiceSubscription<VolumeListener>", "snippet": "    public ServiceSubscription<VolumeListener> subscribeVolume(VolumeListener listener) {        URLServiceSubscription<VolumeListener> request = new URLServiceSubscription<VolumeListener>(this, \"volume\", null, null);        request.addListener(listener);        addSubscription(request);        return request;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "subscribeMute", "params": ["MuteListener"], "throws": null, "modifiers": ["public"], "return_type": "ServiceSubscription<MuteListener>", "snippet": "    public ServiceSubscription<MuteListener> subscribeMute(MuteListener listener) {        URLServiceSubscription<MuteListener> request = new URLServiceSubscription<MuteListener>(this, \"mute\", null, null);        request.addListener(listener);        addSubscription(request);        return request;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/DLNAService.java", "stars": "4", "class": {"name": "DLNAService", "extends": "DeviceService", "implements": ["PlaylistControl", "MediaControl", "MediaPlayer", "VolumeControl"], "modifiers": ["public"]}}, {"method_name": "getOldNodeConfigMap", "params": ["Map<String,String>", "Map<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "Map<String,String>", "snippet": "    public Map<String, String> getOldNodeConfigMap(Map<String, String> currentConfig, Map<String, String> newConfig) {        if (CollectionUtils.isEmpty(currentConfig) && CollectionUtils.isEmpty(newConfig)) {            return new HashMap<>(16);        }        newConfig.keySet().forEach(currentConfig::remove);        return currentConfig;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/service/UpdateService.java", "stars": "7", "class": {"name": "UpdateService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createRemoveCmd", "params": ["String", "List<String>", "RoleEnum"], "throws": null, "modifiers": ["public"], "return_type": "RemoveCmd", "snippet": "    public RemoveCmd createRemoveCmd(String ip, List<String> ipPorts, RoleEnum role) {        RemoveCmd removeCmd = new RemoveCmd();        List<String> hosts = new ArrayList<>();        List<String> ports = new ArrayList<>();        removeCmd.setIp(ip);        removeCmd.setRole(role);        for (String ipPort : ipPorts) {            String[] ipPortSplit = ipPort.split(\":\");            if (ipPortSplit.length != 2) {                return null;            }            hosts.add(ipPortSplit[0]);            ports.add(ipPortSplit[1]);        }        removeCmd.setHostNames(hosts);        removeCmd.setPorts(ports);        return removeCmd;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/service/UpdateService.java", "stars": "7", "class": {"name": "UpdateService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateNetworkConfig", "params": ["String", "InitConfigEntity", "Map<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean updateNetworkConfig(String channelName, InitConfigEntity configEntity, Map<String, String> ordererConfigMap) {        FileUtil.makeFilePath(modeService.getInstallPath() + \"cli/scripts\", false);        try {            FileUtils.copyFile(new File(modeService.getInitDir() + \"template/fetch-config.sh\"), new File(modeService.getInstallPath() + \"cli/scripts/fetch-config.sh\"));            FileUtils.copyFile(new File(modeService.getInitDir() + \"template/create-update-pb.sh\"), new File(modeService.getInstallPath() + \"cli/scripts/create-update-pb.sh\"));            FileUtils.copyFile(new File(modeService.getInitDir() + \"template/update-channel-config.sh\"), new File(modeService.getInstallPath() + \"cli/scripts/update-channel-config.sh\"));        } catch (IOException e) {            // log.error(\"\u590d\u5236\u811a\u672c\u6587\u4ef6\u5f02\u5e38\", e);            log.error(\"An exception occurred while copying the script file\", e);            e.printStackTrace();            return false;        }        // \u83b7\u53d6\u901a\u9053\u914d\u7f6e\u4fe1\u606f        String firstOrdererHost = configEntity.getOrdererHostConfig().keySet().iterator().next();        String ip = configEntity.getOrdererHostConfig().get(firstOrdererHost);        String firstOrdererHostAddress = firstOrdererHost + ip.substring(ip.lastIndexOf(\":\"));        String CHANNEL_NAME = channelName;        String ORDERER_CA = String.format(\"/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/%s/orderers/%s/msp/tlscacerts/tlsca.%s-cert.pem\", configEntity.getOrdererDomain(), firstOrdererHost, configEntity.getOrdererDomain());        String CORE_PEER_LOCALMSPID = \"OrdererMSP\";        String CORE_PEER_ADDRESS = firstOrdererHostAddress;        String CORE_PEER_TLS_ROOTCERT_FILE = String.format(\"/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/%s/orderers/%s/tls/ca.crt\", configEntity.getOrdererDomain(), firstOrdererHost);        String CORE_PEER_MSPCONFIGPATH = String.format(\"/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/%s/users/Admin@%s/msp\", configEntity.getOrdererDomain(), configEntity.getOrdererDomain());        String cmd = \"docker exec cli bash scripts/fetch-config.sh \" + CHANNEL_NAME + \" \" + ORDERER_CA + \" \" + CORE_PEER_LOCALMSPID + \" \" + CORE_PEER_ADDRESS + \" \" + CORE_PEER_TLS_ROOTCERT_FILE + \" \" + CORE_PEER_MSPCONFIGPATH;        try {            ProcessUtil.execCmd(cmd, null, modeService.getInstallPath() + \"cli\");        } catch (Exception e) {            // log.error(String.format(\"\u6267\u884c\u811a\u672c\u83b7\u53d6\u901a\u9053 %s \u914d\u7f6e\u5f02\u5e38\", channelName), e);            log.error(String.format(\"An exception occurred while executing the script code to obtain the configuration of channel %s\", channelName), e);            e.printStackTrace();            return false;        }        // \u4fee\u6539\u901a\u9053\u914d\u7f6e: \u589e\u52a0 orderer \u76f8\u5173\u914d\u7f6e        String filePath = String.format(\"/var/run/config_%s.json\", channelName);        if (!new File(filePath).exists()) {            // log.error(String.format(\"\u901a\u9053 %s \u914d\u7f6e\u6587\u4ef6 %s \u4e0d\u5b58\u5728\", channelName, filePath));            log.error(String.format(\"Channel %s configuration file %s does not exist\", channelName, filePath));            return false;        }        JSONObject jsonObject = JSONObject.parseObject(FileUtil.getFileContent(filePath));        JSONArray array = jsonObject.getJSONObject(\"channel_group\").getJSONObject(\"groups\").getJSONObject(\"Orderer\").getJSONObject(\"values\").getJSONObject(\"ConsensusType\").getJSONObject(\"value\").getJSONObject(\"metadata\").getJSONArray(\"consenters\");        JSONArray ordererAddresses = jsonObject.getJSONObject(\"channel_group\").getJSONObject(\"values\").getJSONObject(\"OrdererAddresses\").getJSONObject(\"value\").getJSONArray(\"addresses\");        array.clear();        ordererAddresses.clear();        for (String oHost : ordererConfigMap.keySet()) {            String oIp = ordererConfigMap.get(oHost);            String certFilePath = modeService.getInstallPath() + \"crypto-config/ordererOrganizations/\" + configEntity.getOrdererDomain() + \"/orderers/\" + oHost + \"/tls/server.crt\";            if (!new File(certFilePath).exists()) {                // log.error(String.format(\"orderer %s \u7684\u8bc1\u4e66\u6587\u4ef6 %s \u4e0d\u5b58\u5728\", oHost, certFilePath));                log.error(String.format(\"Certificate file %s of orderer %s does not exist\", certFilePath, oHost));                return false;            }            String content = FileUtil.getFileContent(certFilePath);            String certStr = new String(Base64.getEncoder().encode(content.getBytes()));            JSONObject newOrdererObject = new JSONObject();            newOrdererObject.put(\"client_tls_cert\", certStr);            newOrdererObject.put(\"host\", oHost);            newOrdererObject.put(\"port\", oIp.substring(oIp.lastIndexOf(\":\") + 1));            newOrdererObject.put(\"server_tls_cert\", certStr);            String ordererAddr = oHost + \":\" + oIp.substring(oIp.lastIndexOf(\":\") + 1);            array.add(newOrdererObject);            ordererAddresses.add(ordererAddr);        }        File modifiedFile = new File(String.format(\"/var/run/config_%s_modified.json\", channelName));        FileUtil.writeTxtFile(jsonObject.toJSONString(), modifiedFile, \"UTF-8\");        if (!modifiedFile.exists()) {            // log.error(String.format(\"\u521b\u5efa\u901a\u9053 %s \u914d\u7f6e\u7f16\u8f91\u6587\u4ef6 %s \u5931\u8d25\", channelName, modifiedFile.getAbsolutePath()));            log.error(String.format(\"Failed when creating configuration file %s for channel %s\", modifiedFile.getAbsolutePath(), channelName));            return false;        }        // \u521b\u5efa pb \u6587\u4ef6        cmd = \"docker exec cli bash scripts/create-update-pb.sh \" + CHANNEL_NAME;        try {            ProcessUtil.execCmd(cmd, null, \"/var/run\");        } catch (Exception e) {            // log.error(String.format(\"\u4e3a\u901a\u9053 %s \u6267\u884c\u811a\u672c\u751f\u6210pb\u6587\u4ef6\u5f02\u5e38\", channelName), e);            log.error(String.format(\"An exception occurred while generating a pb file for the channel %s execution script\", channelName), e);            e.printStackTrace();            return false;        }        // \u66f4\u65b0\u901a\u9053        cmd = \"docker exec cli bash scripts/update-channel-config.sh \" + CHANNEL_NAME + \" \" + ORDERER_CA + \" \" + CORE_PEER_LOCALMSPID + \" \" + CORE_PEER_ADDRESS + \" \" + CORE_PEER_TLS_ROOTCERT_FILE + \" \" + CORE_PEER_MSPCONFIGPATH;        try {            ProcessUtil.execCmd(cmd, null, modeService.getInstallPath() + \"cli\");        } catch (Exception e) {            // log.error(String.format(\"\u4e3a\u901a\u9053 %s \u6267\u884c\u811a\u672c\u66f4\u65b0\u7f51\u7edc\u914d\u7f6e\u5f02\u5e38\", channelName), e);            log.error(String.format(\"An exception occurred while executing a script to update the network configuration for channel %s\", channelName), e);            e.printStackTrace();        }        return true;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/service/UpdateService.java", "stars": "7", "class": {"name": "UpdateService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeNode", "params": ["RoleEnum", "String", "List<String>", "List<String>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean removeNode(RoleEnum role, String domain, List<String> hostNames, List<String> ports) {        if (!CollectionUtils.isEmpty(ports)) {            ports.forEach(environmentService::removePortFromFirewall);        }        for (String host : hostNames) {            try {                // log.info(\"\u79fb\u9664\u8282\u70b9\u5bb9\u5668\uff1ash stopNode.sh \" + host.split(domain)[0]);                log.info(\"Remove node container\uff1ash stopNode.sh \" + host.split(domain)[0]);                ProcessUtil.execCmd(\"sh stopNode.sh \" + host.split(domain)[0], null, modeService.getInstallPath());                String roleFileName = role == RoleEnum.ORDER ? \"ordererOrganizations\" : \"peerOrganizations\";                String nodeFileName = role == RoleEnum.ORDER ? \"orderers\" : \"peers\";                String rmCertFile = String.format(\"crypto-config\" + File.separator + \"%s\" + File.separator + \"%s\" + File.separator + \"%s\" + File.separator + \"%s\", roleFileName, domain, nodeFileName, host);                // log.info(\"\u79fb\u9664\u8282\u70b9\u5bb9\u5668\u8bc1\u4e66\uff0c\u8def\u5f84\uff1a\" + modeService.getInstallPath() + rmCertFile);                log.info(\"Remove node container certificate, path\uff1a\" + modeService.getInstallPath() + rmCertFile);                FileUtil.rmFile(new File(modeService.getInstallPath() + rmCertFile));            } catch (Exception e) {                // log.error(String.format(\"\u79fb\u9664\u8282\u70b9 %s \u5f02\u5e38\", host), e);                log.error(String.format(\"An exception occurred while removing node %s\", host), e);                e.printStackTrace();            }        }        return true;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/service/UpdateService.java", "stars": "7", "class": {"name": "UpdateService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readData", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void readData() {        array_json  = readResource(\"array.json\");        object_json = readResource(\"object.json\");        revise_json = readResource(\"revise.json\");    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/test/java/me/virjid/karting/json/KartingjsonTest.java", "stars": "2", "class": {"name": "KartingjsonTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "reviseJson", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void reviseJson() {        JSONObject obj = JSON.parseJSONObject(revise_json);        System.out.println(obj.toString(2));    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/test/java/me/virjid/karting/json/KartingjsonTest.java", "stars": "2", "class": {"name": "KartingjsonTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseJSONObjectString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void parseJSONObjectString() {        JSONObject obj = JSON.parseJSONObject(object_json);        System.out.println(obj.toString(2));    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/test/java/me/virjid/karting/json/KartingjsonTest.java", "stars": "2", "class": {"name": "KartingjsonTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseJSONArrayString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void parseJSONArrayString() {        JSONArray array = JSON.parseJSONArray(array_json);        System.out.println(array.toString(2));    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/test/java/me/virjid/karting/json/KartingjsonTest.java", "stars": "2", "class": {"name": "KartingjsonTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "objectToJSONObject", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void objectToJSONObject() {        TestBlogPostEntity post = new TestBlogPostEntity();        JSONObject obj = JSON.toJSONObject(post);        System.out.println(obj.toString(2));    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/test/java/me/virjid/karting/json/KartingjsonTest.java", "stars": "2", "class": {"name": "KartingjsonTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readResource", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "    private static String readResource(String name) {        URL url = KartingjsonTest.class.getClassLoader().getResource(name);        assert url != null;        File file = new File(url.getPath());        StringBuilder data = new StringBuilder();        try (BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))) {            reader.lines().forEach(data::append);        } catch (IOException e) {            e.printStackTrace();        }        return data.toString();    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/test/java/me/virjid/karting/json/KartingjsonTest.java", "stars": "2", "class": {"name": "KartingjsonTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateViewHolder", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "RecyclerView", "snippet": "    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {        View item =  LayoutInflater.from(context).inflate(R.layout.item_scan_ble_devices, parent, false);        return new ScanBleDevicesHolder(item);    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/app/src/main/java/com/wxwteam/bleapp/adapter/ScanBleDevicesAdapter.java", "stars": "2", "class": {"name": "ScanBleDevicesAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBindViewHolder", "params": ["RecyclerView", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {        if (data == null || data.size() <= position) {            return;        }        BleDevice bleDevice = data.get(position);        if (bleDevice == null) {            return;        }        ((ScanBleDevicesHolder) holder).name.setText(TextUtils.isEmpty(bleDevice.getName()) ? \"null\" : bleDevice.getName());        ((ScanBleDevicesHolder) holder).mac.setText(TextUtils.isEmpty(bleDevice.getMac()) ? \"null\" : bleDevice.getMac());        ((ScanBleDevicesHolder) holder).rssi.setText(bleDevice.getRssi() + \"\");        ((ScanBleDevicesHolder) holder).rssi.setText(bleDevice.getDevice().getType() + \"\");        boolean isConnected = BleManager.getInstance().isConnected(bleDevice);        ((ScanBleDevicesHolder) holder).btn_bind.setVisibility(isConnected ? View.GONE : View.VISIBLE);        ((ScanBleDevicesHolder) holder).btn_unbind.setVisibility(isConnected ? View.VISIBLE : View.GONE);        ((ScanBleDevicesHolder) holder).btn_bind.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (mListener != null) {                    mListener.onConnect(bleDevice);                }            }        });        ((ScanBleDevicesHolder) holder).btn_unbind.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (mListener != null) {                    mListener.onDisConnect(bleDevice);                }            }        });        ((ScanBleDevicesHolder) holder).item.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (mListener != null) {                    mListener.onDetail(bleDevice);                }            }        });    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/app/src/main/java/com/wxwteam/bleapp/adapter/ScanBleDevicesAdapter.java", "stars": "2", "class": {"name": "ScanBleDevicesAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getItemCount() {        return data == null ? 0 : data.size();    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/app/src/main/java/com/wxwteam/bleapp/adapter/ScanBleDevicesAdapter.java", "stars": "2", "class": {"name": "ScanBleDevicesAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "setOnDeviceClickListener", "params": ["OnDeviceClickListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnDeviceClickListener(OnDeviceClickListener listener) {        this.mListener = listener;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/app/src/main/java/com/wxwteam/bleapp/adapter/ScanBleDevicesAdapter.java", "stars": "2", "class": {"name": "ScanBleDevicesAdapter", "extends": "RecyclerView", "implements": null, "modifiers": ["public"]}}, {"method_name": "onStartConnect", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void onStartConnect();    public abstract void onConnectFail(BleDevice bleDevice, BleException exception);    public abstract void onConnectSuccess(BleDevice bleDevice, BluetoothGatt gatt, int status);    public abstract void onDisConnected(boolean isActiveDisConnected, BleDevice device, BluetoothGatt gatt, int status);}", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/callback/BleGattCallback.java", "stars": "2", "class": {"name": "BleGattCallback", "extends": "BluetoothGattCallback", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onConnectFail", "params": ["BleDevice", "BleException"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void onConnectFail(BleDevice bleDevice, BleException exception);    public abstract void onConnectSuccess(BleDevice bleDevice, BluetoothGatt gatt, int status);    public abstract void onDisConnected(boolean isActiveDisConnected, BleDevice device, BluetoothGatt gatt, int status);}", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/callback/BleGattCallback.java", "stars": "2", "class": {"name": "BleGattCallback", "extends": "BluetoothGattCallback", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onConnectSuccess", "params": ["BleDevice", "BluetoothGatt", "int"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void onConnectSuccess(BleDevice bleDevice, BluetoothGatt gatt, int status);    public abstract void onDisConnected(boolean isActiveDisConnected, BleDevice device, BluetoothGatt gatt, int status);}", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/callback/BleGattCallback.java", "stars": "2", "class": {"name": "BleGattCallback", "extends": "BluetoothGattCallback", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onDisConnected", "params": ["boolean", "BleDevice", "BluetoothGatt", "int"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void onDisConnected(boolean isActiveDisConnected, BleDevice device, BluetoothGatt gatt, int status);}", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/callback/BleGattCallback.java", "stars": "2", "class": {"name": "BleGattCallback", "extends": "BluetoothGattCallback", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "init", "params": [], "throws": ["ClassNotFoundException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void init() throws ClassNotFoundException {        int i = 0;        Set<ASMDataTable.ASMData> annotatedPackets = AutomaticRegister.scanRaw(Registry.Packet.class);        for (ASMDataTable.ASMData pair : annotatedPackets) {            Class clazz = Class.forName(pair.getClassName());            ModAnnotation.EnumHolder sideHolder = (ModAnnotation.EnumHolder) pair.getAnnotationInfo().get(\"value\");            Side side = Side.valueOf(sideHolder.getValue());            INSTANCE.registerMessage(clazz, clazz, i++, side);        }    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Network/NetworkHandler.java", "stars": "2", "class": {"name": "NetworkHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sendToPlayer", "params": ["IMessage", "EntityPlayerMP"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void sendToPlayer(IMessage message, EntityPlayerMP player) {        INSTANCE.sendTo(message, player);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Network/NetworkHandler.java", "stars": "2", "class": {"name": "NetworkHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sendToServer", "params": ["IMessage"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void sendToServer(IMessage message) {        INSTANCE.sendToServer(message);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Network/NetworkHandler.java", "stars": "2", "class": {"name": "NetworkHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getShader", "params": ["GLSurfaceView"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getShader(GLSurfaceView mGlSurfaceView) {        String shader = \"#extension GL_OES_EGL_image_external : require\\n\"                + \"precision mediump float;\\n\"                + \"uniform samplerExternalOES sTexture;\\n\"                + \"varying vec2 vTextureCoord;\\n\" + \"void main() {\\n\"                + \"  vec4 color = texture2D(sTexture, vTextureCoord);\\n\"                + \"  vec3 pcolor;\\n\"                + \"  pcolor.r = (color.r >= 0.5) ? 0.75 : 0.25;\\n\"                + \"  pcolor.g = (color.g >= 0.5) ? 0.75 : 0.25;\\n\"                + \"  pcolor.b = (color.b >= 0.5) ? 0.75 : 0.25;\\n\"                + \"  gl_FragColor = vec4(pcolor, color.a);\\n\" + \"}\\n\";        return shader;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/effect/PosterizeEffect.java", "stars": "2", "class": {"name": "PosterizeEffect", "extends": null, "implements": ["ShaderInterface"], "modifiers": ["public"]}}, {"method_name": "dispose", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void dispose() {        this.messageIdByEvent.clear();        this.messageIdByComposer.clear();        this.messageInstancesById.clear();    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/messages/MessageClassManager.java", "stars": "2", "class": {"name": "MessageClassManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "registerMessageConfiguration", "params": ["IMessageConfiguration"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void registerMessageConfiguration(IMessageConfiguration configuration) {        Map<Integer, Class<? extends IMessageEvent>> events = configuration.getEvents();        if((events != null) && (events.size() > 0)) {            for(int header : events.keySet()) {                this.registerMessageEventClass(header, events.get(header));            }        }        Map<Integer, Class<? extends IMessageComposer>> composers = configuration.getComposers();        if((composers != null) && (composers.size() > 0)) {            for(int header : composers.keySet()) {                this.registerMessageComposerClass(header, composers.get(header));            }        }    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/messages/MessageClassManager.java", "stars": "2", "class": {"name": "MessageClassManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "registerMessageEventClass", "params": ["int", "Class<IMessageEvent>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void registerMessageEventClass(int header, Class<? extends IMessageEvent> messageEvent) {        if(messageEvent == null) return;        String name = messageEvent.getName();        if(this.messageIdByEvent.containsKey(name)) {            System.out.println(messageEvent.getSimpleName() + \" is already registered. Setting to header id: \" + header);        }        this.messageIdByEvent.put(name, header);    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/messages/MessageClassManager.java", "stars": "2", "class": {"name": "MessageClassManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "registerMessageComposerClass", "params": ["int", "Class<IMessageComposer>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void registerMessageComposerClass(int header, Class<? extends IMessageComposer> messageComposer) {        if(messageComposer == null) return;        String name = messageComposer.getName();        if(this.messageIdByComposer.containsKey(name)) {            System.out.println(messageComposer.getSimpleName() + \" is already registered. Setting to header id: \" + header);        }        this.messageIdByComposer.put(name, header);    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/messages/MessageClassManager.java", "stars": "2", "class": {"name": "MessageClassManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "registerMessageEvent", "params": ["IMessageEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void registerMessageEvent(IMessageEvent messageEvent) {        if(messageEvent == null) return;        int header = this.getEventId(messageEvent);        if(header == -1) return;        List<IMessageEvent> existing = this.messageInstancesById.get(header);        if((existing == null) || (existing.size() == 0)) {            existing = new ArrayList<>();            this.messageInstancesById.put(header, existing);            try {                messageEvent.setParser(messageEvent.getParserClass().getDeclaredConstructor().newInstance());            } catch(Exception e) {                System.out.println(\"Error registering message event\");            }        } else {            messageEvent.setParser(existing.get(0).getParser());        }        existing.add(messageEvent);    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/messages/MessageClassManager.java", "stars": "2", "class": {"name": "MessageClassManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeMessageEvent", "params": ["IMessageEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeMessageEvent(IMessageEvent messageEvent) {        if(messageEvent == null) return;        int header = this.getEventId(messageEvent);        if(header == -1) return;        List<IMessageEvent> existing = this.messageInstancesById.get(header);        if((existing != null) && (existing.size() > 0)) {            for(IMessageEvent event : existing) {                if(event != messageEvent) continue;                existing.remove(event);                if(existing.size() == 0) this.messageInstancesById.remove(header);                event.dispose();                return;            }        }    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/messages/MessageClassManager.java", "stars": "2", "class": {"name": "MessageClassManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEventId", "params": ["IMessageEvent"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getEventId(IMessageEvent messageEvent) {        if(messageEvent == null) return -1;        String name = messageEvent.getClass().getName();        Integer header = this.messageIdByEvent.get(name);        if(header == null) return -1;        return header;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/messages/MessageClassManager.java", "stars": "2", "class": {"name": "MessageClassManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getComposerId", "params": ["IMessageComposer"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getComposerId(IMessageComposer messageComposer) {        if(messageComposer == null) return -1;        String name = messageComposer.getClass().getName();        Integer header = this.messageIdByComposer.get(name);        if(header == null) return -1;        return header;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/messages/MessageClassManager.java", "stars": "2", "class": {"name": "MessageClassManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEvents", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "List<IMessageEvent>", "snippet": "    public List<IMessageEvent> getEvents(int header) {        return this.messageInstancesById.get(header);    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/messages/MessageClassManager.java", "stars": "2", "class": {"name": "MessageClassManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "enable", "params": ["boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void enable(boolean enable) {        sLogEnable = enable;    }", "url": "https://raw.githubusercontent.com/wkp111/PageEventDemo/master/pageevent/src/main/java/com/wkp/pageevent/log/LogHelper.java", "stars": "1", "class": {"name": "LogHelper", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "i", "params": ["String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void i(String tag, String msg) {        if (sLogEnable) {            Log.i(tag, msg);        }    }", "url": "https://raw.githubusercontent.com/wkp111/PageEventDemo/master/pageevent/src/main/java/com/wkp/pageevent/log/LogHelper.java", "stars": "1", "class": {"name": "LogHelper", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        System.out.println(\"\u9759\u6001\u5185\u90e8\u7c7b\");        Singleton instance1 = Singleton.getInstance();        Singleton instance2 = Singleton.getInstance();        System.out.println(instance1 == instance2);        System.out.println(\"instance1 \u7684 hashCode \u503c\u4e3a\uff1a\" + instance1.hashCode());        System.out.println(\"instance2 \u7684 hashCode \u503c\u4e3a\uff1a\" + instance2.hashCode());    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/singleton/type7/SingletonTest07.java", "stars": "2", "class": {"name": "SingletonTest07", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Singleton", "snippet": "    public static Singleton getInstance(){        return SingletonInstance.INSTANCE;    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/singleton/type7/SingletonTest07.java", "stars": "2", "class": {"name": "Singleton", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "AbstractClientPlayer", "params": ["World", "GameProfile", "CallbackInfo"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void AbstractClientPlayer(World worldIn, GameProfile playerProfile, CallbackInfo callbackInfo) {        for (RenderPlayer renderPlayer : Minecraft.getMinecraft().getRenderManager().getSkinMap().values()) {            LayerCape cape = new LayerCape(renderPlayer);            renderPlayer.addLayer(cape);        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/mixin/MixinAbstractClientPlayer.java", "stars": "12", "class": {"name": "MixinAbstractClientPlayer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "uid", "params": ["HttpSession"], "throws": null, "modifiers": [], "return_type": "String", "snippet": "\tString uid(HttpSession session) {\t\treturn session.getId();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-session/src/main/java/smoketest/session/HelloRestController.java", "stars": "47572", "class": {"name": "HelloRestController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void run() {\t\t// TODO Auto-generated method stub\t\t\t\tIntegerArithmeticTest();\t\tBranchingTest();\t\tArrayAccessTest();\t\t// (27 + 18) * workload + 20 * size \t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/bench/cpu/CPUFixedPoint.java", "stars": "2", "class": {"name": "CPUFixedPoint", "extends": null, "implements": ["IBenchmark"], "modifiers": ["public"]}}, {"method_name": "run", "params": ["Object"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void run(Object... params) throws IOException {\t\t// TODO Auto-generated method stub\t\t\t\tIntegerArithmeticTest();\t\tBranchingTest();\t\tArrayAccessTest();\t\t// (27 + 18) * workload + (20 * size + 2) * workload\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/bench/cpu/CPUFixedPoint.java", "stars": "2", "class": {"name": "CPUFixedPoint", "extends": null, "implements": ["IBenchmark"], "modifiers": ["public"]}}, {"method_name": "initialize", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initialize(Object... params) {\t\t// TODO Auto-generated method stub\t\tworkload = (int) params[0];\t\tnum = new int[5];\t\tnum[0] = 0;\t\tnum[1] = 1;\t\tnum[2] = 2;\t\tnum[3] = 3;\t\tnum[4] = 4;\t\ti=3;\t\tj=1;\t\tk=1;\t\tl=2;\t\t\t\ta = new int[size];\t\tb = new int[size];\t\tc = new int[size];\t\t\t\tif( params.length > 1 )\t\t\tsize = (int) params[1];\t\t\t\trunning = true;\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/bench/cpu/CPUFixedPoint.java", "stars": "2", "class": {"name": "CPUFixedPoint", "extends": null, "implements": ["IBenchmark"], "modifiers": ["public"]}}, {"method_name": "clean", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clean() {\t\t// TODO Auto-generated method stub\t\t\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/bench/cpu/CPUFixedPoint.java", "stars": "2", "class": {"name": "CPUFixedPoint", "extends": null, "implements": ["IBenchmark"], "modifiers": ["public"]}}, {"method_name": "cancel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void cancel() {\t\t// TODO Auto-generated method stub\t\trunning = false;\t\t\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/bench/cpu/CPUFixedPoint.java", "stars": "2", "class": {"name": "CPUFixedPoint", "extends": null, "implements": ["IBenchmark"], "modifiers": ["public"]}}, {"method_name": "warmUp", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void warmUp() throws IOException {\t\t// TODO Auto-generated method stub\t\tfor( int i=0; i<5; i++ )\t\t\trun();\t\t\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/bench/cpu/CPUFixedPoint.java", "stars": "2", "class": {"name": "CPUFixedPoint", "extends": null, "implements": ["IBenchmark"], "modifiers": ["public"]}}, {"method_name": "getResult", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getResult() {\t\t// TODO Auto-generated method stub\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/bench/cpu/CPUFixedPoint.java", "stars": "2", "class": {"name": "CPUFixedPoint", "extends": null, "implements": ["IBenchmark"], "modifiers": ["public"]}}, {"method_name": "IntegerArithmeticTest", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void IntegerArithmeticTest() {\t\ti = 3;\t\tfor(int a = 0; a<workload; a++)\t\t{\t\t\tj = num[1] * (k-j ) * (1-k); //6\t\t\tk = num[3] * k - (1 - j) * k; //6\t\t\tl = (l-k) * (num[1] + j); //5\t\t\tres[i-2] = j + k + 1; //4\t\t\tres[i-2] = j * k * 1; //4\t\t}//25 + 2\t\t\t\t//27 * workload \t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/bench/cpu/CPUFixedPoint.java", "stars": "2", "class": {"name": "CPUFixedPoint", "extends": null, "implements": ["IBenchmark"], "modifiers": ["public"]}}, {"method_name": "BranchingTest", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void BranchingTest() {\t\tfor(int a = 0; a < workload; a++)\t\t{\t\t\tif (j ==1)\t\t\t\tj = num[2]; \t\t\telse j = num[3];\t\t\tif (j > 2)\t\t\t\tj = num[0];\t\t\telse j = num[1];\t\t\tif(j < 1)\t\t\t\tj = num[1];\t\t\telse j = num[0];\t\t}\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/bench/cpu/CPUFixedPoint.java", "stars": "2", "class": {"name": "CPUFixedPoint", "extends": null, "implements": ["IBenchmark"], "modifiers": ["public"]}}, {"method_name": "ArrayAccessTest", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void ArrayAccessTest() {\t\t\t\tfor( k = 0; k<workload; k++ ) \t\t{\t\t\tfor(i=0; i<size; i++)\t\t\t{\t\t\t\ta[i] = i; //2\t\t\t\tb[i] = i; //2\t\t\t\tc[i] = size - i ; //3\t\t\t}//7 + 2\t\t\t// 9*size\t\t\tfor( i=0; i<size; i++)\t\t\t{\t\t\t\tl = c[a[i]]; //3\t\t\t\tc[a[i]] = b[a[i]]; //4\t\t\t\tb[a[i]] = l;  //2\t\t\t}//9 + 2\t\t\t// 11 * size\t\t\t\t\t\t//20*size + 2 \t\t}//(20 * size + 2) * workload\t}", "url": "https://raw.githubusercontent.com/miricel/CO_Project/master/UPTBench/src/bench/cpu/CPUFixedPoint.java", "stars": "2", "class": {"name": "CPUFixedPoint", "extends": null, "implements": ["IBenchmark"], "modifiers": ["public"]}}, {"method_name": "music", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "MusicDetailsResponse", "snippet": "  public MusicDetailsResponse music(String music) {    this.music = music;    return this;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/MusicDetailsResponse.java", "stars": "2", "class": {"name": "MusicDetailsResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMusic", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getMusic() {    return music;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/MusicDetailsResponse.java", "stars": "2", "class": {"name": "MusicDetailsResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMusic", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setMusic(String music) {    this.music = music;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/MusicDetailsResponse.java", "stars": "2", "class": {"name": "MusicDetailsResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "id", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "MusicDetailsResponse", "snippet": "  public MusicDetailsResponse id(Integer id) {    this.id = id;    return this;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/MusicDetailsResponse.java", "stars": "2", "class": {"name": "MusicDetailsResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getId() {    return id;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/MusicDetailsResponse.java", "stars": "2", "class": {"name": "MusicDetailsResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setId(Integer id) {    this.id = id;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/MusicDetailsResponse.java", "stars": "2", "class": {"name": "MusicDetailsResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "name", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "MusicDetailsResponse", "snippet": "  public MusicDetailsResponse name(String name) {    this.name = name;    return this;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/MusicDetailsResponse.java", "stars": "2", "class": {"name": "MusicDetailsResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getName() {    return name;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/MusicDetailsResponse.java", "stars": "2", "class": {"name": "MusicDetailsResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setName(String name) {    this.name = name;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/MusicDetailsResponse.java", "stars": "2", "class": {"name": "MusicDetailsResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "description", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "MusicDetailsResponse", "snippet": "  public MusicDetailsResponse description(String description) {    this.description = description;    return this;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/MusicDetailsResponse.java", "stars": "2", "class": {"name": "MusicDetailsResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDescription", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getDescription() {    return description;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/MusicDetailsResponse.java", "stars": "2", "class": {"name": "MusicDetailsResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDescription", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setDescription(String description) {    this.description = description;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/MusicDetailsResponse.java", "stars": "2", "class": {"name": "MusicDetailsResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "status", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "MusicDetailsResponse", "snippet": "  public MusicDetailsResponse status(String status) {    this.status = status;    return this;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/MusicDetailsResponse.java", "stars": "2", "class": {"name": "MusicDetailsResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getStatus() {    return status;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/MusicDetailsResponse.java", "stars": "2", "class": {"name": "MusicDetailsResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStatus", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setStatus(String status) {    this.status = status;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/MusicDetailsResponse.java", "stars": "2", "class": {"name": "MusicDetailsResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean equals(java.lang.Object o) {    if (this == o) {      return true;    }    if (o == null || getClass() != o.getClass()) {      return false;    }    MusicDetailsResponse musicDetailsResponse = (MusicDetailsResponse) o;    return Objects.equals(this.music, musicDetailsResponse.music) &&        Objects.equals(this.id, musicDetailsResponse.id) &&        Objects.equals(this.name, musicDetailsResponse.name) &&        Objects.equals(this.description, musicDetailsResponse.description) &&        Objects.equals(this.status, musicDetailsResponse.status);  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/MusicDetailsResponse.java", "stars": "2", "class": {"name": "MusicDetailsResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int hashCode() {    return Objects.hash(music, id, name, description, status);  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/MusicDetailsResponse.java", "stars": "2", "class": {"name": "MusicDetailsResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    StringBuilder sb = new StringBuilder();    sb.append(\"class MusicDetailsResponse {\\n\");        sb.append(\"    music: \").append(toIndentedString(music)).append(\"\\n\");    sb.append(\"    id: \").append(toIndentedString(id)).append(\"\\n\");    sb.append(\"    name: \").append(toIndentedString(name)).append(\"\\n\");    sb.append(\"    description: \").append(toIndentedString(description)).append(\"\\n\");    sb.append(\"    status: \").append(toIndentedString(status)).append(\"\\n\");    sb.append(\"}\");    return sb.toString();  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/MusicDetailsResponse.java", "stars": "2", "class": {"name": "MusicDetailsResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toIndentedString", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String toIndentedString(java.lang.Object o) {    if (o == null) {      return \"null\";    }    return o.toString().replace(\"\\n\", \"\\n    \");  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/MusicDetailsResponse.java", "stars": "2", "class": {"name": "MusicDetailsResponse", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPluginName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getPluginName() {    return this.pluginName;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/plugin/ViewerPlugin.java", "stars": "18", "class": {"name": "ViewerPlugin", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPluginPath", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getPluginPath() {    return this.pluginPath;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/plugin/ViewerPlugin.java", "stars": "18", "class": {"name": "ViewerPlugin", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOrder", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getOrder() {    return this.order;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/plugin/ViewerPlugin.java", "stars": "18", "class": {"name": "ViewerPlugin", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isHidden", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isHidden() {    return this.hidden;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/plugin/ViewerPlugin.java", "stars": "18", "class": {"name": "ViewerPlugin", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setHidden", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setHidden(final boolean hidden) {    this.hidden = hidden;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/plugin/ViewerPlugin.java", "stars": "18", "class": {"name": "ViewerPlugin", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseJobTypes", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "List<String>", "snippet": "  protected List<String> parseJobTypes(final String jobTypesStr) {    if (jobTypesStr == null) {      return null;    }    final String[] parts = jobTypesStr.split(\",\");    final List<String> jobTypes = new ArrayList<>();    for (int i = 0; i < parts.length; ++i) {      jobTypes.add(parts[i].trim());    }    return jobTypes;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/plugin/ViewerPlugin.java", "stars": "18", "class": {"name": "ViewerPlugin", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getJobTypes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "  public List<String> getJobTypes() {    return this.jobTypes;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/webapp/plugin/ViewerPlugin.java", "stars": "18", "class": {"name": "ViewerPlugin", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkForInvalidPasswordLength", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "    private static boolean checkForInvalidPasswordLength(String password) {        return StringUtils.isEmpty(password) ||            password.length() < ManagedUserVM.PASSWORD_MIN_LENGTH ||            password.length() > ManagedUserVM.PASSWORD_MAX_LENGTH;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/AccountController.java", "stars": "2", "class": {"name": "AccountController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "activateAccount", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void activateAccount(@RequestParam(value = \"key\") String key) {        Optional<User> user = userService.activateRegistration(key);        if (!user.isPresent()) {            throw new AccountResourceException(GardleErrorKey.NO_USER_FOUND_FOR_ACTIVATION_KEY, Status.NOT_FOUND, \"User not found for activation key\");        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/AccountController.java", "stars": "2", "class": {"name": "AccountController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isAuthenticated", "params": ["HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String isAuthenticated(HttpServletRequest request) {        log.debug(\"REST request to check if the current user is authenticated\");        return request.getRemoteUser();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/AccountController.java", "stars": "2", "class": {"name": "AccountController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAccount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "UserDTO", "snippet": "    public UserDTO getAccount() {        return userService.getUserWithAuthorities()            .map(UserDTO::new)            .orElseThrow(() -> new AccountResourceException(GardleErrorKey.USER_NOT_FOUND, Status.NOT_FOUND, \"User not found\"));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/AccountController.java", "stars": "2", "class": {"name": "AccountController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "saveAccount", "params": ["UserDTO"], "throws": ["ConflictException", "AccountResourceException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void saveAccount(@Valid @RequestBody UserDTO userDTO) throws ConflictException, AccountResourceException {        String userLogin = SecurityUtils.getCurrentUserLogin()            .orElseThrow(() -> new AccountResourceException(GardleErrorKey.CURRENT_LOGIN_NOT_FOUND, Status.NOT_FOUND, \"Username not found\"));        Optional<User> user = userRepository.findOneByLogin(userLogin);        if (!user.isPresent()) {            throw new AccountResourceException(GardleErrorKey.USER_NOT_FOUND, Status.NOT_FOUND, \"User not found\");        }        Optional<User> existingUser = userRepository.findOneByEmailIgnoreCase(userDTO.getEmail());        // Check if there is a different user with the same email        if (existingUser.isPresent() && !existingUser.get().getId().equals(user.get().getId())) {            throw new ConflictException(GardleErrorKey.EMAIL_ALREADY_EXISTS);        }        // Changing login currently appears to lead to issues with caching -> a phantom user remains active in the application        // Hence it is disabled in the frontend        Optional<User> existingUserByLogin = userRepository.findOneByLogin(userDTO.getLogin());        // Check if there is a different user with the same login        if (existingUserByLogin.isPresent() && !existingUserByLogin.get().getId().equals(user.get().getId())) {            throw new ConflictException(GardleErrorKey.LOGIN_ALREADY_EXISTS);        }        userService.updateCurrentUser(userDTO.getFirstName(), userDTO.getLastName(), userDTO.getEmail(),            userDTO.getLangKey(), userDTO.getBirthDate(), userDTO.getTel(), userDTO.getLogin());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/AccountController.java", "stars": "2", "class": {"name": "AccountController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "registerAccount", "params": ["ManagedUserVM"], "throws": ["BadRequestException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void registerAccount(@Valid @RequestBody ManagedUserVM managedUserVM) throws BadRequestException {        if (checkForInvalidPasswordLength(managedUserVM.getPassword())) {            throw new BadRequestException(GardleErrorKey.PASSWORD_INVALID_LENGTH);        }        User user = userService.registerUser(managedUserVM, managedUserVM.getPassword());        mailService.sendActivationEmail(user);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/AccountController.java", "stars": "2", "class": {"name": "AccountController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "requestPasswordReset", "params": ["String"], "throws": ["BadRequestException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void requestPasswordReset(@RequestBody String mail) throws BadRequestException {        mailService.sendPasswordResetMail(            userService.requestPasswordReset(mail)                .orElseThrow(() -> new BadRequestException(GardleErrorKey.EMAIL_NOT_FOUND))        );    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/AccountController.java", "stars": "2", "class": {"name": "AccountController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "changePassword", "params": ["PasswordChangeDTO"], "throws": ["BadRequestException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void changePassword(@RequestBody PasswordChangeDTO passwordChangeDto) throws BadRequestException {        if (checkForInvalidPasswordLength(passwordChangeDto.getNewPassword())) {            throw new BadRequestException(GardleErrorKey.PASSWORD_INVALID_LENGTH);        }        userService.changePassword(passwordChangeDto.getCurrentPassword(), passwordChangeDto.getNewPassword());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/AccountController.java", "stars": "2", "class": {"name": "AccountController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "finishPasswordReset", "params": ["KeyAndPasswordVM"], "throws": ["AccountResourceException", "BadRequestException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void finishPasswordReset(@RequestBody KeyAndPasswordVM keyAndPassword) throws AccountResourceException, BadRequestException {        if (checkForInvalidPasswordLength(keyAndPassword.getNewPassword())) {            throw new BadRequestException(GardleErrorKey.PASSWORD_INVALID_LENGTH);        }        Optional<User> user =            userService.completePasswordReset(keyAndPassword.getNewPassword(), keyAndPassword.getKey());        if (!user.isPresent()) {            throw new AccountResourceException(GardleErrorKey.USER_FOR_RESET_KEY_NOT_FOUND, Status.NOT_FOUND, \"Reset key not found\");        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/AccountController.java", "stars": "2", "class": {"name": "AccountController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getText", "params": [], "throws": null, "modifiers": ["public"], "return_type": "LiveData<String>", "snippet": "    public LiveData<String> getText() {        return mText;    }", "url": "https://raw.githubusercontent.com/dahilu/BeautyOverview/master/app/src/main/java/com/example/beautyoverview/ui/home/HomeViewModel.java", "stars": "1", "class": {"name": "HomeViewModel", "extends": "ViewModel", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLayoutId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getLayoutId() {        return R.layout.danmaku_layout;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/DanmakuVideoPlayer.java", "stars": "2", "class": {"name": "DanmakuVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": ["Context"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void init(Context context) {        super.init(context);        mDanmakuView = (DanmakuView) findViewById(R.id.danmaku_view);        mSendDanmaku = (TextView) findViewById(R.id.send_danmaku);        mToogleDanmaku = (TextView) findViewById(R.id.toogle_danmaku);        //\u521d\u59cb\u5316\u5f39\u5e55\u663e\u793a        initDanmaku();        mSendDanmaku.setOnClickListener(this);        mToogleDanmaku.setOnClickListener(this);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/DanmakuVideoPlayer.java", "stars": "2", "class": {"name": "DanmakuVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPrepared", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPrepared() {        super.onPrepared();        onPrepareDanmaku(this);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/DanmakuVideoPlayer.java", "stars": "2", "class": {"name": "DanmakuVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "onVideoPause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onVideoPause() {        super.onVideoPause();        danmakuOnPause();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/DanmakuVideoPlayer.java", "stars": "2", "class": {"name": "DanmakuVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "onVideoResume", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onVideoResume(boolean isResume) {        super.onVideoResume(isResume);        danmakuOnResume();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/DanmakuVideoPlayer.java", "stars": "2", "class": {"name": "DanmakuVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "clickStartIcon", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void clickStartIcon() {        super.clickStartIcon();        if (mCurrentState == CURRENT_STATE_PLAYING) {            danmakuOnResume();        } else if (mCurrentState == CURRENT_STATE_PAUSE) {            danmakuOnPause();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/DanmakuVideoPlayer.java", "stars": "2", "class": {"name": "DanmakuVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCompletion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCompletion() {        releaseDanmaku(this);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/DanmakuVideoPlayer.java", "stars": "2", "class": {"name": "DanmakuVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "onSeekComplete", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSeekComplete() {        super.onSeekComplete();        int time = mProgressBar.getProgress() * getDuration() / 100;        //\u5982\u679c\u5df2\u7ecf\u521d\u59cb\u5316\u8fc7\u7684\uff0c\u76f4\u63a5seek\u5230\u5bf9\u4e8e\u4f4d\u7f6e        if (mHadPlay && getDanmakuView() != null && getDanmakuView().isPrepared()) {            resolveDanmakuSeek(this, time);        } else if (mHadPlay && getDanmakuView() != null && !getDanmakuView().isPrepared()) {            //\u5982\u679c\u6ca1\u6709\u521d\u59cb\u5316\u8fc7\u7684\uff0c\u8bb0\u5f55\u4f4d\u7f6e\u7b49\u5f85            setDanmakuStartSeekPosition(time);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/DanmakuVideoPlayer.java", "stars": "2", "class": {"name": "DanmakuVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClick(View v) {        super.onClick(v);        switch (v.getId()) {            case R.id.send_danmaku:                addDanmaku(true);                break;            case R.id.toogle_danmaku:                mDanmaKuShow = !mDanmaKuShow;                resolveDanmakuShow();                break;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/DanmakuVideoPlayer.java", "stars": "2", "class": {"name": "DanmakuVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "cloneParams", "params": ["GSYBaseVideoPlayer", "GSYBaseVideoPlayer"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void cloneParams(GSYBaseVideoPlayer from, GSYBaseVideoPlayer to) {        ((DanmakuVideoPlayer) to).mDumakuFile = ((DanmakuVideoPlayer) from).mDumakuFile;        super.cloneParams(from, to);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/DanmakuVideoPlayer.java", "stars": "2", "class": {"name": "DanmakuVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "startWindowFullscreen", "params": ["Context", "boolean", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "GSYBaseVideoPlayer", "snippet": "    public GSYBaseVideoPlayer startWindowFullscreen(Context context, boolean actionBar, boolean statusBar) {        GSYBaseVideoPlayer gsyBaseVideoPlayer = super.startWindowFullscreen(context, actionBar, statusBar);        if (gsyBaseVideoPlayer != null) {            DanmakuVideoPlayer gsyVideoPlayer = (DanmakuVideoPlayer) gsyBaseVideoPlayer;            //\u5bf9\u5f39\u5e55\u8bbe\u7f6e\u504f\u79fb\u8bb0\u5f55            gsyVideoPlayer.setDanmakuStartSeekPosition(getCurrentPositionWhenPlaying());            gsyVideoPlayer.setDanmaKuShow(getDanmaKuShow());            onPrepareDanmaku(gsyVideoPlayer);        }        return gsyBaseVideoPlayer;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/DanmakuVideoPlayer.java", "stars": "2", "class": {"name": "DanmakuVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveNormalVideoShow", "params": ["View", "ViewGroup", "GSYVideoPlayer"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void resolveNormalVideoShow(View oldF, ViewGroup vp, GSYVideoPlayer gsyVideoPlayer) {        super.resolveNormalVideoShow(oldF, vp, gsyVideoPlayer);        if (gsyVideoPlayer != null) {            DanmakuVideoPlayer gsyDanmaVideoPlayer = (DanmakuVideoPlayer) gsyVideoPlayer;            setDanmaKuShow(gsyDanmaVideoPlayer.getDanmaKuShow());            if (gsyDanmaVideoPlayer.getDanmakuView() != null &&                    gsyDanmaVideoPlayer.getDanmakuView().isPrepared()) {                resolveDanmakuSeek(this, gsyDanmaVideoPlayer.getCurrentPositionWhenPlaying());                resolveDanmakuShow();                releaseDanmaku(gsyDanmaVideoPlayer);            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/DanmakuVideoPlayer.java", "stars": "2", "class": {"name": "DanmakuVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "danmakuOnPause", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void danmakuOnPause() {        if (mDanmakuView != null && mDanmakuView.isPrepared()) {            mDanmakuView.pause();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/DanmakuVideoPlayer.java", "stars": "2", "class": {"name": "DanmakuVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "danmakuOnResume", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void danmakuOnResume() {        if (mDanmakuView != null && mDanmakuView.isPrepared() && mDanmakuView.isPaused()) {            mDanmakuView.resume();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/DanmakuVideoPlayer.java", "stars": "2", "class": {"name": "DanmakuVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setDanmaKuStream", "params": ["File"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDanmaKuStream(File is) {        mDumakuFile = is;        if (!getDanmakuView().isPrepared()) {            onPrepareDanmaku((DanmakuVideoPlayer) getCurrentPlayer());        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/DanmakuVideoPlayer.java", "stars": "2", "class": {"name": "DanmakuVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "initDanmaku", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initDanmaku() {        // \u8bbe\u7f6e\u6700\u5927\u663e\u793a\u884c\u6570        HashMap<Integer, Integer> maxLinesPair = new HashMap<Integer, Integer>();        maxLinesPair.put(BaseDanmaku.TYPE_SCROLL_RL, 5); // \u6eda\u52a8\u5f39\u5e55\u6700\u5927\u663e\u793a5\u884c        // \u8bbe\u7f6e\u662f\u5426\u7981\u6b62\u91cd\u53e0        HashMap<Integer, Boolean> overlappingEnablePair = new HashMap<Integer, Boolean>();        overlappingEnablePair.put(BaseDanmaku.TYPE_SCROLL_RL, true);        overlappingEnablePair.put(BaseDanmaku.TYPE_FIX_TOP, true);        DanamakuAdapter danamakuAdapter = new DanamakuAdapter(mDanmakuView);        mDanmakuContext = DanmakuContext.create();        mDanmakuContext.setDanmakuStyle(IDisplayer.DANMAKU_STYLE_STROKEN, 3).setDuplicateMergingEnabled(false).setScrollSpeedFactor(1.2f).setScaleTextSize(1.2f)                .setCacheStuffer(new SpannedCacheStuffer(), danamakuAdapter) // \u56fe\u6587\u6df7\u6392\u4f7f\u7528SpannedCacheStuffer                .setMaximumLines(maxLinesPair)                .preventOverlapping(overlappingEnablePair);        if (mDanmakuView != null) {            if (mDumakuFile != null) {                mParser = createParser(getIsStream(mDumakuFile));            }            //todo \u8fd9\u662f\u4e3a\u4e86demo\u6548\u679c\uff0c\u5b9e\u9645\u4e0a\u9700\u8981\u53bb\u6389\u8fd9\u4e2a\uff0c\u5916\u90e8\u4f20\u8f93\u6587\u4ef6\u8fdb\u6765            mParser = createParser(this.getResources().openRawResource(R.raw.comments));            mDanmakuView.setCallback(new master.flame.danmaku.controller.DrawHandler.Callback() {                @Override                public void updateTimer(DanmakuTimer timer) {                }                @Override                public void drawingFinished() {                }                @Override                public void danmakuShown(BaseDanmaku danmaku) {                }                @Override                public void prepared() {                    if (getDanmakuView() != null) {                        getDanmakuView().start();                        if (getDanmakuStartSeekPosition() != -1) {                            resolveDanmakuSeek(DanmakuVideoPlayer.this, getDanmakuStartSeekPosition());                            setDanmakuStartSeekPosition(-1);                        }                        resolveDanmakuShow();                    }                }            });            mDanmakuView.enableDanmakuDrawingCache(true);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/DanmakuVideoPlayer.java", "stars": "2", "class": {"name": "DanmakuVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getIsStream", "params": ["File"], "throws": null, "modifiers": ["private"], "return_type": "InputStream", "snippet": "    private InputStream getIsStream(File file) {        try {            InputStream instream = new FileInputStream(file);            InputStreamReader inputreader = new InputStreamReader(instream);            BufferedReader buffreader = new BufferedReader(inputreader);            String line;            StringBuilder sb1 = new StringBuilder();            sb1.append(\"<i>\");            //\u5206\u884c\u8bfb\u53d6            while ((line = buffreader.readLine()) != null) {                sb1.append(line);            }            sb1.append(\"</i>\");            Log.e(\"3333333\", sb1.toString());            instream.close();            return new ByteArrayInputStream(sb1.toString().getBytes());        } catch (java.io.FileNotFoundException e) {            Log.d(\"TestFile\", \"The File doesn't not exist.\");        } catch (IOException e) {            Log.d(\"TestFile\", e.getMessage());        }        return null;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/DanmakuVideoPlayer.java", "stars": "2", "class": {"name": "DanmakuVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveDanmakuShow", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveDanmakuShow() {        post(new Runnable() {            @Override            public void run() {                if (mDanmaKuShow) {                    if (!getDanmakuView().isShown())                        getDanmakuView().show();                    mToogleDanmaku.setText(\"\u5f39\u5e55\u5173\");                } else {                    if (getDanmakuView().isShown()) {                        getDanmakuView().hide();                    }                    mToogleDanmaku.setText(\"\u5f39\u5e55\u5f00\");                }            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/DanmakuVideoPlayer.java", "stars": "2", "class": {"name": "DanmakuVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPrepareDanmaku", "params": ["DanmakuVideoPlayer"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void onPrepareDanmaku(DanmakuVideoPlayer gsyVideoPlayer) {        if (gsyVideoPlayer.getDanmakuView() != null && !gsyVideoPlayer.getDanmakuView().isPrepared() && gsyVideoPlayer.getParser() != null) {            gsyVideoPlayer.getDanmakuView().prepare(gsyVideoPlayer.getParser(),                    gsyVideoPlayer.getDanmakuContext());        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/DanmakuVideoPlayer.java", "stars": "2", "class": {"name": "DanmakuVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveDanmakuSeek", "params": ["DanmakuVideoPlayer", "long"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveDanmakuSeek(DanmakuVideoPlayer gsyVideoPlayer, long time) {        if (mHadPlay && gsyVideoPlayer.getDanmakuView() != null && gsyVideoPlayer.getDanmakuView().isPrepared()) {            gsyVideoPlayer.getDanmakuView().seekTo(time);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/DanmakuVideoPlayer.java", "stars": "2", "class": {"name": "DanmakuVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "createParser", "params": ["InputStream"], "throws": null, "modifiers": ["private"], "return_type": "BaseDanmakuParser", "snippet": "    private BaseDanmakuParser createParser(InputStream stream) {        if (stream == null) {            return new BaseDanmakuParser() {                @Override                protected Danmakus parse() {                    return new Danmakus();                }            };        }        ILoader loader = DanmakuLoaderFactory.create(DanmakuLoaderFactory.TAG_BILI);        try {            loader.load(stream);        } catch (IllegalDataException e) {            e.printStackTrace();        }        BaseDanmakuParser parser = new BiliDanmukuParser();        IDataSource<?> dataSource = loader.getDataSource();        parser.load(dataSource);        return parser;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/DanmakuVideoPlayer.java", "stars": "2", "class": {"name": "DanmakuVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "releaseDanmaku", "params": ["DanmakuVideoPlayer"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void releaseDanmaku(DanmakuVideoPlayer danmakuVideoPlayer) {        if (danmakuVideoPlayer != null && danmakuVideoPlayer.getDanmakuView() != null) {            Debuger.printfError(\"release Danmaku!\");            danmakuVideoPlayer.getDanmakuView().release();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/DanmakuVideoPlayer.java", "stars": "2", "class": {"name": "DanmakuVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getParser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BaseDanmakuParser", "snippet": "    public BaseDanmakuParser getParser() {        if (mParser == null) {            if (mDumakuFile != null) {                mParser = createParser(getIsStream(mDumakuFile));            }        }        return mParser;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/DanmakuVideoPlayer.java", "stars": "2", "class": {"name": "DanmakuVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDanmakuContext", "params": [], "throws": null, "modifiers": ["public"], "return_type": "DanmakuContext", "snippet": "    public DanmakuContext getDanmakuContext() {        return mDanmakuContext;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/DanmakuVideoPlayer.java", "stars": "2", "class": {"name": "DanmakuVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDanmakuView", "params": [], "throws": null, "modifiers": ["public"], "return_type": "IDanmakuView", "snippet": "    public IDanmakuView getDanmakuView() {        return mDanmakuView;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/DanmakuVideoPlayer.java", "stars": "2", "class": {"name": "DanmakuVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDanmakuStartSeekPosition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getDanmakuStartSeekPosition() {        return mDanmakuStartSeekPosition;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/DanmakuVideoPlayer.java", "stars": "2", "class": {"name": "DanmakuVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setDanmakuStartSeekPosition", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDanmakuStartSeekPosition(long danmakuStartSeekPosition) {        this.mDanmakuStartSeekPosition = danmakuStartSeekPosition;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/DanmakuVideoPlayer.java", "stars": "2", "class": {"name": "DanmakuVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "setDanmaKuShow", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDanmaKuShow(boolean danmaKuShow) {        mDanmaKuShow = danmaKuShow;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/DanmakuVideoPlayer.java", "stars": "2", "class": {"name": "DanmakuVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDanmaKuShow", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean getDanmaKuShow() {        return mDanmaKuShow;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/DanmakuVideoPlayer.java", "stars": "2", "class": {"name": "DanmakuVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "addDanmaku", "params": ["boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void addDanmaku(boolean islive) {        BaseDanmaku danmaku = mDanmakuContext.mDanmakuFactory.createDanmaku(BaseDanmaku.TYPE_SCROLL_RL);        if (danmaku == null || mDanmakuView == null) {            return;        }        danmaku.text = \"\u8fd9\u662f\u4e00\u6761\u5f39\u5e55 \" + getCurrentPositionWhenPlaying();        danmaku.padding = 5;        danmaku.priority = 8;  // \u53ef\u80fd\u4f1a\u88ab\u5404\u79cd\u8fc7\u6ee4\u5668\u8fc7\u6ee4\u5e76\u9690\u85cf\u663e\u793a\uff0c\u6240\u4ee5\u63d0\u9ad8\u7b49\u7ea7        danmaku.isLive = islive;        danmaku.setTime(mDanmakuView.getCurrentTime() + 500);        danmaku.textSize = 25f * (mParser.getDisplayer().getDensity() - 0.6f);        danmaku.textColor = Color.RED;        danmaku.textShadowColor = Color.WHITE;        danmaku.borderColor = Color.GREEN;        mDanmakuView.addDanmaku(danmaku);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/video/DanmakuVideoPlayer.java", "stars": "2", "class": {"name": "DanmakuVideoPlayer", "extends": "StandardGSYVideoPlayer", "implements": null, "modifiers": ["public"]}}, {"method_name": "getApi", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getApi() {        return \"update/image\";    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/request/UpdateImageApi.java", "stars": "1", "class": {"name": "UpdateImageApi", "extends": null, "implements": ["IRequestApi"], "modifiers": ["public"]}}, {"method_name": "setImage", "params": ["File"], "throws": null, "modifiers": ["public"], "return_type": "UpdateImageApi", "snippet": "    public UpdateImageApi setImage(File image) {        this.image = image;        return this;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/request/UpdateImageApi.java", "stars": "1", "class": {"name": "UpdateImageApi", "extends": null, "implements": ["IRequestApi"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_create_pin);        setTitle(\"Create PIN\");        pin = findViewById(R.id.pin);        confirm = findViewById(R.id.confirm);    }", "url": "https://raw.githubusercontent.com/carlostojal/KeySafe/master/app/src/main/java/com/fca/keysafe/CreatePin.java", "stars": "2", "class": {"name": "CreatePin", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBackPressed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBackPressed() {    }", "url": "https://raw.githubusercontent.com/carlostojal/KeySafe/master/app/src/main/java/com/fca/keysafe/CreatePin.java", "stars": "2", "class": {"name": "CreatePin", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "createPin", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void createPin(View view) {        if(pin.getText().length() == 4) {            if (pin.getText().toString().equals(confirm.getText().toString())) {                if (new Helpers().createUser(this, new User(pin.getText().toString()))) {                    Toast.makeText(this, \"PIN created successfully.\", Toast.LENGTH_SHORT).show();                    this.finish();                } else {                    Toast.makeText(this, \"Error creating PIN.\", Toast.LENGTH_SHORT).show();                }            } else {                Toast.makeText(this, \"The PINs are not equal.\", Toast.LENGTH_SHORT).show();            }        } else {            Toast.makeText(this, \"The PIN must be 4 digits long.\", Toast.LENGTH_SHORT).show();        }    }", "url": "https://raw.githubusercontent.com/carlostojal/KeySafe/master/app/src/main/java/com/fca/keysafe/CreatePin.java", "stars": "2", "class": {"name": "CreatePin", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCodeId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getCodeId() {    return codeId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/log/LogFilterEntity.java", "stars": "18", "class": {"name": "LogFilterEntity", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCodeId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setCodeId(int codeId) {    this.codeId = codeId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/log/LogFilterEntity.java", "stars": "18", "class": {"name": "LogFilterEntity", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLogCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getLogCode() {    return logCode;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/log/LogFilterEntity.java", "stars": "18", "class": {"name": "LogFilterEntity", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLogCode", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setLogCode(String logCode) {    this.logCode = logCode;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/log/LogFilterEntity.java", "stars": "18", "class": {"name": "LogFilterEntity", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCodeType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "LogCodeType", "snippet": "  public LogCodeType getCodeType() {    return codeType;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/log/LogFilterEntity.java", "stars": "18", "class": {"name": "LogFilterEntity", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCodeType", "params": ["LogCodeType"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setCodeType(LogCodeType codeType) {    this.codeType = codeType;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/log/LogFilterEntity.java", "stars": "18", "class": {"name": "LogFilterEntity", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCompareText", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getCompareText() {    return compareText;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/log/LogFilterEntity.java", "stars": "18", "class": {"name": "LogFilterEntity", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCompareText", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setCompareText(String compareText) {    this.compareText = compareText;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/log/LogFilterEntity.java", "stars": "18", "class": {"name": "LogFilterEntity", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOperateType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "OperateType", "snippet": "  public OperateType getOperateType() {    return operateType;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/log/LogFilterEntity.java", "stars": "18", "class": {"name": "LogFilterEntity", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOperateType", "params": ["OperateType"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setOperateType(OperateType operateType) {    this.operateType = operateType;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/log/LogFilterEntity.java", "stars": "18", "class": {"name": "LogFilterEntity", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLogNotice", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getLogNotice() {    return logNotice;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/log/LogFilterEntity.java", "stars": "18", "class": {"name": "LogFilterEntity", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLogNotice", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setLogNotice(String logNotice) {    this.logNotice = logNotice;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/log/LogFilterEntity.java", "stars": "18", "class": {"name": "LogFilterEntity", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSubmitTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "  public Date getSubmitTime() {    return submitTime;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/log/LogFilterEntity.java", "stars": "18", "class": {"name": "LogFilterEntity", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSubmitTime", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setSubmitTime(Date submitTime) {    this.submitTime = submitTime;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/log/LogFilterEntity.java", "stars": "18", "class": {"name": "LogFilterEntity", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUpdateTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "  public Date getUpdateTime() {    return updateTime;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/log/LogFilterEntity.java", "stars": "18", "class": {"name": "LogFilterEntity", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUpdateTime", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setUpdateTime(Date updateTime) {    this.updateTime = updateTime;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/log/LogFilterEntity.java", "stars": "18", "class": {"name": "LogFilterEntity", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createLogFilterEntityFromObject", "params": ["Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "LogFilterEntity", "snippet": "  public static LogFilterEntity createLogFilterEntityFromObject(final Object obj) {    final LogFilterEntity logFilterEntity = new LogFilterEntity();    final HashMap<String, Object> logFilterObj = (HashMap<String, Object>) obj;    logFilterEntity.fillLogFilterFromMapObject(logFilterObj);    return logFilterEntity;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/log/LogFilterEntity.java", "stars": "18", "class": {"name": "LogFilterEntity", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toObject", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "  public Map<String, Object> toObject() {    final HashMap<String, Object> logFilterObj = new HashMap<>();    logFilterObj.put(CODE_ID_PARAM, this.codeId);    logFilterObj.put(LOG_CODE_PARAM, this.logCode);    logFilterObj.put(CODE_TYPE_PARAM, this.codeType);    logFilterObj.put(COMPARE_TEXT_PARAM, this.compareText);    logFilterObj.put(OPERATE_TYPE_PARAM, this.operateType);    logFilterObj.put(LOG_NOTICE_PARAM, this.logNotice);    logFilterObj.put(SUBMIT_TIME_PARAM, DateToString(this.submitTime));    logFilterObj.put(UPDATE_TIME_PARAM, DateToString(this.updateTime));    return logFilterObj;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/log/LogFilterEntity.java", "stars": "18", "class": {"name": "LogFilterEntity", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fillLogFilterFromMapObject", "params": ["Map<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void fillLogFilterFromMapObject(final Map<String, Object> objMap) {    final TypedMapWrapper<String, Object> wrapper =        new TypedMapWrapper<>(objMap);    fillLogFilterFromMapObject(wrapper);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/log/LogFilterEntity.java", "stars": "18", "class": {"name": "LogFilterEntity", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fillLogFilterFromMapObject", "params": ["TypedMapWrapper<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void fillLogFilterFromMapObject(final TypedMapWrapper<String, Object> logfilterObj) {    this.codeId = logfilterObj.getInt(CODE_ID_PARAM);    this.logCode = logfilterObj.getString(LOG_CODE_PARAM);    this.codeType = LogCodeType.fromInteger(logfilterObj.getInt(CODE_TYPE_PARAM));    this.compareText = logfilterObj.getString(COMPARE_TEXT_PARAM);    this.operateType = OperateType.fromInteger(logfilterObj.getInt(OPERATE_TYPE_PARAM));    this.logNotice = logfilterObj.getString(LOG_NOTICE_PARAM);    this.submitTime = stringToDate(logfilterObj.getString(SUBMIT_TIME_PARAM));    this.updateTime = stringToDate(logfilterObj.getString(UPDATE_TIME_PARAM));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/log/LogFilterEntity.java", "stars": "18", "class": {"name": "LogFilterEntity", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "stringToDate", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "Date", "snippet": "  private Date stringToDate(String timeStr){    LocalDateTime localDateTime = LocalDateTime.parse(timeStr, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));    ZoneId zoneId = ZoneId.systemDefault();    ZonedDateTime zdt = localDateTime.atZone(zoneId);    Date date = Date.from(zdt.toInstant());    return date;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/log/LogFilterEntity.java", "stars": "18", "class": {"name": "LogFilterEntity", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "DateToString", "params": ["Date"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String DateToString(Date datetime){    ZoneId zoneId = ZoneId.systemDefault();    LocalDateTime localDateTime = LocalDateTime.ofInstant(datetime.toInstant(), zoneId);    String time = localDateTime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));    return time;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/log/LogFilterEntity.java", "stars": "18", "class": {"name": "LogFilterEntity", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setupStaticMetrics", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setupStaticMetrics() {  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/ExecMetrics.java", "stars": "18", "class": {"name": "ExecMetrics", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addFlowRunnerManagerMetrics", "params": ["FlowRunnerManager"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void addFlowRunnerManagerMetrics(final FlowRunnerManager flowRunnerManager) {    this.metricsManager        .addGauge(\"EXEC-NumRunningFlows\", flowRunnerManager::getNumRunningFlows);    this.metricsManager        .addGauge(\"EXEC-NumQueuedFlows\", flowRunnerManager::getNumQueuedFlows);    this.metricsManager        .addGauge(\"EXEC-ProjectDirCacheHitRatio\", flowRunnerManager::getProjectDirCacheHitRatio);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/ExecMetrics.java", "stars": "18", "class": {"name": "ExecMetrics", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUser", "params": ["String", "String"], "throws": ["UserManagerException"], "modifiers": ["public"], "return_type": "User", "snippet": "  public User getUser(String username, String password) throws UserManagerException {    if (username == null || username.trim().isEmpty()) {      throw new UserManagerException(\"Empty User Name.\");    } else if (password == null || password.trim().isEmpty()) {      throw new UserManagerException(\"Empty Password.\");    }    User user = null;    synchronized (this) {      try {        WtssUser wtssUser = this.systemUserLoader.getWtssUserByUsername(username);        if (null != wtssUser){          user = new User(wtssUser.getUsername());          wtssUser.setPassword(password);        } else {          throw new UserManagerException(\"Unknown User.\");        }        //        if(LdapCheckCenter.checkLogin(props, username, password)){        }else if(null != this.systemUserLoader.getWtssUserByUsernameAndPassword(wtssUser)){        } else {          throw new UserManagerException(\"Error User Name Or Password.\");        }        initUserAuthority(wtssUser, user);      } catch (Exception e) {        logger.error(\"\u767b\u5f55\u5931\u8d25\uff01\u5f02\u5e38\u4fe1\u606f\uff1a\" + e);        throw new UserManagerException(\"Error User Name Or Password.\");      }    }    return user;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/user/SystemUserManager.java", "stars": "18", "class": {"name": "SystemUserManager", "extends": null, "implements": ["UserManager"], "modifiers": ["public"]}}, {"method_name": "getUser", "params": ["String", "String", "String"], "throws": ["UserManagerException"], "modifiers": ["public"], "return_type": "User", "snippet": "  public User getUser(String username, String password, String superUser) throws UserManagerException {    if (StringUtils.isBlank(username)){      logger.error(\"\u8d85\u7ea7\u7528\u6237\u767b\u5f55, username \u662f\u7a7a\u503c\");      throw new UserManagerException(\"superUser proxy login, username is null\");    }    User user = null;    synchronized (this) {      try {        WtssUser wtssUser = this.systemUserLoader.getWtssUserByUsername(username);        if (null != wtssUser){          user = new User(wtssUser.getUsername());          wtssUser.setPassword(password);        } else {          throw new UserManagerException(\"Unknown User.\");        }        initUserAuthority(wtssUser, user);      } catch (Exception e) {        logger.error(\"\u767b\u5f55\u5931\u8d25\uff01\u5f02\u5e38\u4fe1\u606f\uff1a\", e);        throw new UserManagerException(\"Error User Name Or Password.\");      }    }    return user;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/user/SystemUserManager.java", "stars": "18", "class": {"name": "SystemUserManager", "extends": null, "implements": ["UserManager"], "modifiers": ["public"]}}, {"method_name": "getUser", "params": ["String"], "throws": ["UserManagerException"], "modifiers": ["public"], "return_type": "User", "snippet": "  public User getUser(String username) throws UserManagerException {    if (username == null || username.trim().isEmpty()) {      throw new UserManagerException(\"Empty User Name.\");    }    User user = null;    synchronized (this) {      try {        WtssUser wtssUser = this.systemUserLoader.getWtssUserByUsername(username);        if (null != wtssUser){          user = new User(wtssUser.getUsername());          wtssUser.setPassword(\"\");        } else {          throw new UserManagerException(\"Unknown User.\");        }        initUserAuthority(wtssUser, user);      } catch (Exception e) {        throw new UserManagerException(\"Error User Name.\");      }    }    return user;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/user/SystemUserManager.java", "stars": "18", "class": {"name": "SystemUserManager", "extends": null, "implements": ["UserManager"], "modifiers": ["public"]}}, {"method_name": "initUserAuthority", "params": ["WtssUser", "User"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void initUserAuthority(final WtssUser wtssUser, final User user){    final HashMap<String, User> users = new HashMap<>();    final HashMap<String, String> userPassword = new HashMap<>();    final HashMap<String, Role> roles = new HashMap<>();    final HashMap<String, Set<String>> groupRoles =        new HashMap<>();    final HashMap<String, Set<String>> proxyUserMap =        new HashMap<>();    try {      users.put(wtssUser.getUsername(), user);      //\u83b7\u53d6\u7528\u6237\u5bf9\u5e94\u7684\u89d2\u8272      final WtssRole wtssRole = this.systemUserLoader.getWtssRoleById(wtssUser.getRoleId());      //\u83b7\u53d6\u89d2\u8272\u5bf9\u5e94\u7684\u6743\u9650      final List<WtssPermissions> wtssPermissionsList = this.systemUserLoader          .getWtssPermissionsListByIds(wtssRole.getPermissionsIds());      final List<String> permissionsNameList = new ArrayList<>();      for(WtssPermissions wtssPermissions : wtssPermissionsList){        permissionsNameList.add(wtssPermissions.getPermissionsName());      }      //WtssPermissions\u8f6c\u6362\u6210\u81ea\u5e26\u7684\u6743\u9650\u5bf9\u8c61      final Permission perm = new Permission();      for (final String permName : permissionsNameList) {        try {          final Permission.Type type = Permission.Type.valueOf(permName);          perm.addPermission(type);        } catch (final IllegalArgumentException e) {          logger.error(\"\u6dfb\u52a0\u6743\u9650 \" + permName + \"\u9519\u8bef. \u6743\u9650\u4e0d\u5b58\u5728.\", e);        }      }      //\u7ec4\u88c5\u539f\u7cfb\u7edf\u89d2\u8272\u5bf9\u8c61      Role role = new Role(wtssRole.getRoleName(), perm);      user.addRole(role.getName());      roles.put(wtssRole.getRoleName(), role);      String proxyUsers = wtssUser.getProxyUsers();      //\u7a7a\u5b57\u7b26\u4e32\u4e0d\u505a\u5904\u7406      if(org.apache.commons.lang.StringUtils.isNotEmpty(proxyUsers)){        final String[] proxySplit = proxyUsers.split(\"\\\\s*,\\\\s*\");        for (final String proxyUser : proxySplit) {          Set<String> proxySet = new HashSet<>();          //\u628a\u4ee3\u7406\u7528\u6237\u6dfb\u52a0\u5230User\u5bf9\u8c61\u4e2d          user.addProxyUser(proxyUser);          proxySet.add(proxyUser);          proxyUserMap.put(wtssUser.getUsername(), proxySet);        }      }      //\u7528\u6237\u6743\u9650\u4fdd\u5b58\u5728\u7528\u6237\u5bf9\u8c61\u4e2d \u9632\u6b62\u7ebf\u7a0b\u95ee\u9898      user.setRoleMap(roles);    } catch (SystemUserManagerException e) {      logger.error(\"\u7528\u6237\u6743\u9650\u7ec4\u88c5\u5931\u8d25\uff01\", e);    }    // Synchronize the swap. Similarly, the gets are synchronized to this.    synchronized (this) {      this.users = users;      this.userPassword = userPassword;      this.roles = roles;      this.proxyUserMap = proxyUserMap;      this.groupRoles = groupRoles;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/user/SystemUserManager.java", "stars": "18", "class": {"name": "SystemUserManager", "extends": null, "implements": ["UserManager"], "modifiers": ["public"]}}, {"method_name": "validateUser", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean validateUser(String username) {    return this.users.containsKey(username);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/user/SystemUserManager.java", "stars": "18", "class": {"name": "SystemUserManager", "extends": null, "implements": ["UserManager"], "modifiers": ["public"]}}, {"method_name": "validateGroup", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean validateGroup(String group) {    return true;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/user/SystemUserManager.java", "stars": "18", "class": {"name": "SystemUserManager", "extends": null, "implements": ["UserManager"], "modifiers": ["public"]}}, {"method_name": "getRole", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Role", "snippet": "  public Role getRole(String roleName) {    return this.roles.get(roleName);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/user/SystemUserManager.java", "stars": "18", "class": {"name": "SystemUserManager", "extends": null, "implements": ["UserManager"], "modifiers": ["public"]}}, {"method_name": "validateProxyUser", "params": ["String", "User"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean validateProxyUser(String proxyUser, User realUser) {    if (this.proxyUserMap.containsKey(realUser.getUserId())        && this.proxyUserMap.get(realUser.getUserId()).contains(proxyUser)) {      return true;    } else {      return false;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/user/SystemUserManager.java", "stars": "18", "class": {"name": "SystemUserManager", "extends": null, "implements": ["UserManager"], "modifiers": ["public"]}}, {"method_name": "getBounds", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Rect", "snippet": "    public Rect getBounds() {        return mTextBounds;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/IjkTimedText.java", "stars": "2", "class": {"name": "IjkTimedText", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getText", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getText() {        return mTextChars;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/player/IjkTimedText.java", "stars": "2", "class": {"name": "IjkTimedText", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getColor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Color", "snippet": "    public Color getColor() {        return col;    }", "url": "https://raw.githubusercontent.com/AndreaRiboni/Garden/master/src/flower_logic/Trait.java", "stars": "2", "class": {"name": "Trait", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBreedRad", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getBreedRad() {        return breed_radius;    }", "url": "https://raw.githubusercontent.com/AndreaRiboni/Garden/master/src/flower_logic/Trait.java", "stars": "2", "class": {"name": "Trait", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLifespan", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getLifespan() {        return lifespan;    }", "url": "https://raw.githubusercontent.com/AndreaRiboni/Garden/master/src/flower_logic/Trait.java", "stars": "2", "class": {"name": "Trait", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBreedProb", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getBreedProb() {        return breed_prob;    }", "url": "https://raw.githubusercontent.com/AndreaRiboni/Garden/master/src/flower_logic/Trait.java", "stars": "2", "class": {"name": "Trait", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "randomize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void randomize() {        col = Color.getRandom();        lifespan = (int) (Math.random() * 100);        breed_radius = (int) (Math.random() * 100);        breed_prob = (float) (Math.random()) * 0.1f;    }", "url": "https://raw.githubusercontent.com/AndreaRiboni/Garden/master/src/flower_logic/Trait.java", "stars": "2", "class": {"name": "Trait", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getId() {        return id;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDO.java", "stars": "1", "class": {"name": "PromoDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Integer id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDO.java", "stars": "1", "class": {"name": "PromoDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPromoName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPromoName() {        return promoName;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDO.java", "stars": "1", "class": {"name": "PromoDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPromoName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPromoName(String promoName) {        this.promoName = promoName;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDO.java", "stars": "1", "class": {"name": "PromoDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStartDate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date getStartDate() {        return startDate;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDO.java", "stars": "1", "class": {"name": "PromoDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStartDate", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStartDate(Date startDate) {        this.startDate = startDate;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDO.java", "stars": "1", "class": {"name": "PromoDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEndDate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date getEndDate() {        return endDate;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDO.java", "stars": "1", "class": {"name": "PromoDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEndDate", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEndDate(Date endDate) {        this.endDate = endDate;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDO.java", "stars": "1", "class": {"name": "PromoDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getItemId() {        return itemId;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDO.java", "stars": "1", "class": {"name": "PromoDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setItemId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setItemId(Integer itemId) {        this.itemId = itemId;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDO.java", "stars": "1", "class": {"name": "PromoDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPromoItemPrice", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BigDecimal", "snippet": "    public BigDecimal getPromoItemPrice() {        return promoItemPrice;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDO.java", "stars": "1", "class": {"name": "PromoDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPromoItemPrice", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPromoItemPrice(BigDecimal promoItemPrice) {        this.promoItemPrice = promoItemPrice;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/PromoDO.java", "stars": "1", "class": {"name": "PromoDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "endElement", "params": ["String", "String", "String"], "throws": ["SAXException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void endElement(String uri, String localName, String qName) throws SAXException {        if (qName.equalsIgnoreCase(TYPE)) {        }        else if (qName.equalsIgnoreCase(NUMBER)) {            count = Integer.parseInt(value);        }        value = null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/netcast/NetcastAppNumberParser.java", "stars": "4", "class": {"name": "NetcastAppNumberParser", "extends": "DefaultHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "characters", "params": ["char", "int", "int"], "throws": ["SAXException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void characters(char[] ch, int start, int length) throws SAXException {        value = new String(ch, start, length);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/netcast/NetcastAppNumberParser.java", "stars": "4", "class": {"name": "NetcastAppNumberParser", "extends": "DefaultHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getApplicationNumber", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getApplicationNumber() {        return count;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/netcast/NetcastAppNumberParser.java", "stars": "4", "class": {"name": "NetcastAppNumberParser", "extends": "DefaultHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "list", "params": ["HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "Response<Object>", "snippet": "    public Response<Object> list(HttpServletRequest request){        String username = util.getUserName(request);        List<String> execUsers = execUserService.getExecUserByAppUser(username);        Set<String> duplicated = new HashSet<>(execUsers);        if(duplicated.add(username)){            ExecUser execUser = new ExecUser();            execUser.setExecUser(username);            execUserService.addExecUser(execUser);        }        return new Response<>().successResponse(duplicated);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/controller/ExecUserController.java", "stars": "23", "class": {"name": "ExecUserController", "extends": "ExceptionResolverContext", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        SpringApplication.run(PaymentMain8002.class, args);    }", "url": "https://raw.githubusercontent.com/iMine141/springcloud-test/master/cloud-provider-payment8002/src/main/java/com/atguigu/springcloud/PaymentMain8002.java", "stars": "1", "class": {"name": "PaymentMain8002", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "description", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String description() {        return super.description() + \" \u52a0\u4e0a\u8349\u8393\";    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/decorate/example/StrawberryDecorate.java", "stars": "2", "class": {"name": "StrawberryDecorate", "extends": "AbstractDecorate", "implements": null, "modifiers": ["public"]}}, {"method_name": "calculatePrice", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int calculatePrice() {        return super.calculatePrice() + 10;    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/decorate/example/StrawberryDecorate.java", "stars": "2", "class": {"name": "StrawberryDecorate", "extends": "AbstractDecorate", "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/model/AnyData.java", "stars": "2", "class": {"name": "AnyData", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return name;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/model/AnyData.java", "stars": "2", "class": {"name": "AnyData", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "showDialog", "params": ["boolean"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "Dlg", "snippet": "    public abstract Dlg showDialog(boolean editable);    public abstract Dlg showSonDialog();}", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/model/AnyData.java", "stars": "2", "class": {"name": "AnyData", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "showSonDialog", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "Dlg", "snippet": "    public abstract Dlg showSonDialog();}", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/model/AnyData.java", "stars": "2", "class": {"name": "AnyData", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        // \u8bbe\u7f6e\u4e00\u4e2aexit transition        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {            getWindow().requestFeature(Window.FEATURE_CONTENT_TRANSITIONS);            getWindow().setEnterTransition(new Explode());            getWindow().setExitTransition(new Explode());        }        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_recycler_view);        ButterKnife.bind(this);        resolveData();        //\u9650\u5b9a\u8303\u56f4\u4e3a\u5c4f\u5e55\u4e00\u534a\u7684\u4e0a\u4e0b\u504f\u79fb180        int playTop = CommonUtil.getScreenHeight(this) / 2 - CommonUtil.dip2px(this, 180);        int playBottom = CommonUtil.getScreenHeight(this) / 2 + CommonUtil.dip2px(this, 180);        //\u81ea\u5b9a\u64ad\u653e\u5e2e\u52a9\u7c7b        scrollCalculatorHelper = new ScrollCalculatorHelper(R.id.video_item_player, playTop, playBottom);        final RecyclerNormalAdapter recyclerNormalAdapter = new RecyclerNormalAdapter(this, dataList);        linearLayoutManager = new LinearLayoutManager(this);        videoList.setLayoutManager(linearLayoutManager);        videoList.setAdapter(recyclerNormalAdapter);        videoList.addOnScrollListener(new RecyclerView.OnScrollListener() {            int firstVisibleItem, lastVisibleItem;            @Override            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {                super.onScrollStateChanged(recyclerView, newState);                scrollCalculatorHelper.onScrollStateChanged(recyclerView, newState);            }            @Override            public void onScrolled(RecyclerView recyclerView, int dx, int dy) {                super.onScrolled(recyclerView, dx, dy);                firstVisibleItem = linearLayoutManager.findFirstVisibleItemPosition();                lastVisibleItem = linearLayoutManager.findLastVisibleItemPosition();                //\u8fd9\u662f\u6ed1\u52a8\u81ea\u52a8\u64ad\u653e\u7684\u4ee3\u7801                if (!mFull) {                    scrollCalculatorHelper.onScroll(recyclerView, firstVisibleItem, lastVisibleItem, lastVisibleItem - firstVisibleItem);                }            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/AutoPlayRecyclerViewActivity.java", "stars": "2", "class": {"name": "AutoPlayRecyclerViewActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onConfigurationChanged", "params": ["Configuration"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onConfigurationChanged(Configuration newConfig) {        super.onConfigurationChanged(newConfig);        //\u5982\u679c\u65cb\u8f6c\u4e86\u5c31\u5168\u5c4f        if (newConfig.orientation != ActivityInfo.SCREEN_ORIENTATION_USER) {            mFull = false;        } else {            mFull = true;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/AutoPlayRecyclerViewActivity.java", "stars": "2", "class": {"name": "AutoPlayRecyclerViewActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBackPressed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBackPressed() {        if (GSYVideoManager.backFromWindowFull(this)) {            return;        }        super.onBackPressed();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/AutoPlayRecyclerViewActivity.java", "stars": "2", "class": {"name": "AutoPlayRecyclerViewActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onPause() {        super.onPause();        GSYVideoManager.onPause();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/AutoPlayRecyclerViewActivity.java", "stars": "2", "class": {"name": "AutoPlayRecyclerViewActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onResume() {        super.onResume();        GSYVideoManager.onResume();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/AutoPlayRecyclerViewActivity.java", "stars": "2", "class": {"name": "AutoPlayRecyclerViewActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDestroy() {        super.onDestroy();        GSYVideoManager.releaseAllVideos();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/AutoPlayRecyclerViewActivity.java", "stars": "2", "class": {"name": "AutoPlayRecyclerViewActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveData", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveData() {        for (int i = 0; i < 19; i++) {            VideoModel videoModel = new VideoModel();            dataList.add(videoModel);        }        if (recyclerBaseAdapter != null)            recyclerBaseAdapter.notifyDataSetChanged();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/AutoPlayRecyclerViewActivity.java", "stars": "2", "class": {"name": "AutoPlayRecyclerViewActivity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "useStream", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Optional<InputStream>", "snippet": "  public Optional<InputStream> useStream(String path) {    return Optional.ofNullable(path)      .map(p -> {        if (p.startsWith(\"./\")) {          return String.format(\"%s/%s/jcr:content\", script.getDirPath(), StringUtils.removeStart(p, \"./\"));        } else if (!StringUtils.startsWith(p, \"/\")) {          return String.format(\"%s/%s/jcr:content\", script.getRootPath(), p);        } else {          return String.format(\"%s/jcr:content\", p);        }      })      .map(p -> script.getResourceResolver().getResource(p))      .map(r -> r.adaptTo(InputStream.class))      .map(BufferedInputStream::new);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/core/src/main/java/com/cognifide/aem/stubs/core/script/Repository.java", "stars": "8", "class": {"name": "Repository", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readStream", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "InputStream", "snippet": "  public InputStream readStream(String path) {    return useStream(path)      .orElseThrow(() -> new StubsException(String.format(\"Cannot read repository file '%s' as stream!\", path)));  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/core/src/main/java/com/cognifide/aem/stubs/core/script/Repository.java", "stars": "8", "class": {"name": "Repository", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readText", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String readText(String path) {    return useStream(path).map(input -> {      try {        return IOUtils.toString(input, StandardCharsets.UTF_8);      } catch (IOException e) {        throw new StubsException(String.format(\"Cannot read repository file '%s' as text!\", path), e);      }    }).orElseThrow(() -> new StubsException(String.format(\"Cannot read repository file '%s' as text!\", path)));  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/core/src/main/java/com/cognifide/aem/stubs/core/script/Repository.java", "stars": "8", "class": {"name": "Repository", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getJson", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getJson() {    return readText(script.getResourcePath(\"json\"));  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/core/src/main/java/com/cognifide/aem/stubs/core/script/Repository.java", "stars": "8", "class": {"name": "Repository", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getXml", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getXml() {    return readText(script.getResourcePath(\"xml\"));  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/core/src/main/java/com/cognifide/aem/stubs/core/script/Repository.java", "stars": "8", "class": {"name": "Repository", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTxt", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getTxt() {    return readText(script.getResourcePath(\"txt\"));  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/core/src/main/java/com/cognifide/aem/stubs/core/script/Repository.java", "stars": "8", "class": {"name": "Repository", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getPage() {        return page;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/page/Paginator.java", "stars": "23", "class": {"name": "Paginator", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "getPageSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getPageSize() {        return pageSize;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/page/Paginator.java", "stars": "23", "class": {"name": "Paginator", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "getTotalItems", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getTotalItems() {        return totalItems;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/page/Paginator.java", "stars": "23", "class": {"name": "Paginator", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "isFirstPage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isFirstPage() {        return page <= 1;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/page/Paginator.java", "stars": "23", "class": {"name": "Paginator", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "isLastPage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isLastPage() {        return page >= getTotalPages();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/page/Paginator.java", "stars": "23", "class": {"name": "Paginator", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "getPrePage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getPrePage() {        if (isHasPrePage()) {            return page - 1;        } else {            return page;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/page/Paginator.java", "stars": "23", "class": {"name": "Paginator", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "getNextPage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getNextPage() {        if (isHasNextPage()) {            return page + 1;        } else {            return page;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/page/Paginator.java", "stars": "23", "class": {"name": "Paginator", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "isDisabledPage", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isDisabledPage(int page) {        return ((page < 1) || (page > getTotalPages()) || (page == this.page));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/page/Paginator.java", "stars": "23", "class": {"name": "Paginator", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "isHasPrePage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isHasPrePage() {        return (page - 1 >= 1);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/page/Paginator.java", "stars": "23", "class": {"name": "Paginator", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "isHasNextPage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isHasNextPage() {        return (page + 1 <= getTotalPages());    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/page/Paginator.java", "stars": "23", "class": {"name": "Paginator", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "getStartRow", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getStartRow() {        if(getPageSize() <= 0 || totalItems <= 0){            return 0;        }        return page > 0 ? (page - 1) * getPageSize() + 1 : 0;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/page/Paginator.java", "stars": "23", "class": {"name": "Paginator", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "getEndRow", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getEndRow() {        return page > 0 ? Math.min(pageSize * page, getTotalItems()) : 0;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/page/Paginator.java", "stars": "23", "class": {"name": "Paginator", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "getOffset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getOffset() {        return page > 0 ? (page - 1) * getPageSize() : 0;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/page/Paginator.java", "stars": "23", "class": {"name": "Paginator", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "getLimit", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getLimit() {        if (page > 0) {            return Math.min(pageSize * page, getTotalItems()) - (pageSize * (page - 1));        } else {            return 0;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/page/Paginator.java", "stars": "23", "class": {"name": "Paginator", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "getTotalPages", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getTotalPages() {        if (totalItems <= 0) {            return 0;        }        if (pageSize <= 0) {            return 0;        }        int count = totalItems / pageSize;        if (totalItems % pageSize > 0) {            count++;        }        return count;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/page/Paginator.java", "stars": "23", "class": {"name": "Paginator", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "computePageNo", "params": ["int"], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int computePageNo(int page) {        return computePageNumber(page, pageSize, totalItems);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/page/Paginator.java", "stars": "23", "class": {"name": "Paginator", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "getSlider", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer[] getSlider() {        return slider(DEFAULT_SLIDERS_COUNT);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/page/Paginator.java", "stars": "23", "class": {"name": "Paginator", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "slider", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer[] slider(int slidersCount) {        return generateLinkPageNumbers(getPage(), (int) getTotalPages(), slidersCount);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/page/Paginator.java", "stars": "23", "class": {"name": "Paginator", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "computeLastPageNumber", "params": ["int", "int"], "throws": null, "modifiers": ["private", "static"], "return_type": "int", "snippet": "    private static int computeLastPageNumber(int totalItems, int pageSize) {        if(pageSize <= 0){            return 1;        }        int result = (int) (totalItems % pageSize == 0 ?                totalItems / pageSize                : totalItems / pageSize + 1);        if(result <= 1) {            result = 1;        }        return result;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/page/Paginator.java", "stars": "23", "class": {"name": "Paginator", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "computePageNumber", "params": ["int", "int", "int"], "throws": null, "modifiers": ["private", "static"], "return_type": "int", "snippet": "    private static int computePageNumber(int page, int pageSize, int totalItems) {        if (page <= 1) {            return 1;        }        if (Integer.MAX_VALUE == page                || page > computeLastPageNumber(totalItems, pageSize)) { //last page            return computeLastPageNumber(totalItems, pageSize);        }        return page;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/page/Paginator.java", "stars": "23", "class": {"name": "Paginator", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "generateLinkPageNumbers", "params": ["int", "int", "int"], "throws": null, "modifiers": ["private", "static"], "return_type": "Integer", "snippet": "    private static Integer[] generateLinkPageNumbers(int currentPageNumber, int lastPageNumber, int count) {        int avg = count / 2;        int startPageNumber = currentPageNumber - avg;        if (startPageNumber <= 0) {            startPageNumber = 1;        }        int endPageNumber = startPageNumber + count - 1;        if (endPageNumber > lastPageNumber) {            endPageNumber = lastPageNumber;        }        if (endPageNumber - startPageNumber < count) {            startPageNumber = endPageNumber - count;            if (startPageNumber <= 0) {                startPageNumber = 1;            }        }        java.util.List<Integer> result = new java.util.ArrayList<Integer>();        for (int i = startPageNumber; i <= endPageNumber; i++) {            result.add(new Integer(i));        }        return result.toArray(new Integer[result.size()]);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/page/Paginator.java", "stars": "23", "class": {"name": "Paginator", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"page:\" + page + \" pageSize:\" + pageSize + \" totalItems:\" + totalItems;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/common/util/page/Paginator.java", "stars": "23", "class": {"name": "Paginator", "extends": null, "implements": ["java"], "modifiers": ["public"]}}, {"method_name": "notSupported", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "ServiceCommandError", "snippet": "    public static ServiceCommandError notSupported() {        return new NotSupportedServiceCommandError();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/command/ServiceCommandError.java", "stars": "4", "class": {"name": "ServiceCommandError", "extends": "Error", "implements": null, "modifiers": ["public"]}}, {"method_name": "getError", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "ServiceCommandError", "snippet": "    public static ServiceCommandError getError(int code) {        String desc = null;        if (code == 400) {            desc = \"Bad Request\";        }        else if (code == 401) {            desc = \"Unauthorized\";        }        else if (code == 500) {            desc = \"Internal Server Error\";        }        else if (code == 503) {            desc = \"Service Unavailable\";        }        else {            desc = \"Unknown Error\";        }        return new ServiceCommandError(code, desc, null);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/command/ServiceCommandError.java", "stars": "4", "class": {"name": "ServiceCommandError", "extends": "Error", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCode() {        return code;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/command/ServiceCommandError.java", "stars": "4", "class": {"name": "ServiceCommandError", "extends": "Error", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPayload", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object getPayload() {        return payload;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/command/ServiceCommandError.java", "stars": "4", "class": {"name": "ServiceCommandError", "extends": "Error", "implements": null, "modifiers": ["public"]}}, {"method_name": "getComment", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getComment() {    return comment;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/hiveutils/ResultSchema.java", "stars": "18", "class": {"name": "ResultSchema", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getName() {    return name;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/hiveutils/ResultSchema.java", "stars": "18", "class": {"name": "ResultSchema", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getType() {    return type;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/hiveutils/ResultSchema.java", "stars": "18", "class": {"name": "ResultSchema", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLayoutId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getLayoutId() {        return R.layout.activity_guide;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/GuideActivity.java", "stars": "1", "class": {"name": "GuideActivity", "extends": "MyActivity", "implements": ["ViewPager"], "modifiers": ["public", "final"]}}, {"method_name": "initView", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initView() {        mIndicatorView.setViewPager(mViewPager);        setOnClickListener(R.id.iv_guide_complete);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/GuideActivity.java", "stars": "1", "class": {"name": "GuideActivity", "extends": "MyActivity", "implements": ["ViewPager"], "modifiers": ["public", "final"]}}, {"method_name": "initData", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initData() {        mPagerAdapter = new GuidePagerAdapter();        mViewPager.setAdapter(mPagerAdapter);        mViewPager.addOnPageChangeListener(this);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/GuideActivity.java", "stars": "1", "class": {"name": "GuideActivity", "extends": "MyActivity", "implements": ["ViewPager"], "modifiers": ["public", "final"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClick(View v) {        if (v.getId() == R.id.iv_guide_complete) {            startActivity(HomeActivity.class);            finish();        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/GuideActivity.java", "stars": "1", "class": {"name": "GuideActivity", "extends": "MyActivity", "implements": ["ViewPager"], "modifiers": ["public", "final"]}}, {"method_name": "onPageScrolled", "params": ["int", "float", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {        if (mViewPager.getCurrentItem() == mPagerAdapter.getCount() - 1 && positionOffsetPixels > 0) {            mCompleteView.setVisibility(View.INVISIBLE);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/GuideActivity.java", "stars": "1", "class": {"name": "GuideActivity", "extends": "MyActivity", "implements": ["ViewPager"], "modifiers": ["public", "final"]}}, {"method_name": "onPageSelected", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPageSelected(int position) {}", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/GuideActivity.java", "stars": "1", "class": {"name": "GuideActivity", "extends": "MyActivity", "implements": ["ViewPager"], "modifiers": ["public", "final"]}}, {"method_name": "onPageScrollStateChanged", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPageScrollStateChanged(int state) {        if (state == ViewPager.SCROLL_STATE_IDLE) {            mCompleteView.setVisibility(mViewPager.getCurrentItem() == mPagerAdapter.getCount() - 1 ? View.VISIBLE : View.INVISIBLE);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/GuideActivity.java", "stars": "1", "class": {"name": "GuideActivity", "extends": "MyActivity", "implements": ["ViewPager"], "modifiers": ["public", "final"]}}, {"method_name": "isSwipeEnable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isSwipeEnable() {        return false;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/activity/GuideActivity.java", "stars": "1", "class": {"name": "GuideActivity", "extends": "MyActivity", "implements": ["ViewPager"], "modifiers": ["public", "final"]}}, {"method_name": "startServer", "params": [], "throws": null, "modifiers": ["static"], "return_type": "void", "snippet": "    static void startServer() {        if (!started) {            startTestcontainer();            started = true;        }    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/SparrowKafkaResourceIT.java", "stars": "2", "class": {"name": "SparrowKafkaResourceIT", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "startTestcontainer", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void startTestcontainer() {        kafkaContainer = new KafkaContainer(\"5.4.0\");        kafkaContainer.start();    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/SparrowKafkaResourceIT.java", "stars": "2", "class": {"name": "SparrowKafkaResourceIT", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setup", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void setup() {        KafkaProperties kafkaProperties = new KafkaProperties();        Map<String, String> producerProps = getProducerProps();        kafkaProperties.setProducer(new HashMap<>(producerProps));        Map<String, String> consumerProps = getConsumerProps(\"default-group\");        consumerProps.put(\"client.id\", \"default-client\");        kafkaProperties.setConsumer(consumerProps);        SparrowKafkaResource kafkaResource = new SparrowKafkaResource(kafkaProperties);        restMockMvc = MockMvcBuilders.standaloneSetup(kafkaResource).build();    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/SparrowKafkaResourceIT.java", "stars": "2", "class": {"name": "SparrowKafkaResourceIT", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "producesMessages", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "    void producesMessages() throws Exception {        restMockMvc            .perform(post(\"/api/sparrow-kafka/publish/topic-produce?message=value-produce\"))            .andExpect(status().isOk())            .andExpect(content().contentType(MediaType.APPLICATION_JSON));        Map<String, Object> consumerProps = new HashMap<>(getConsumerProps(\"group-produce\"));        KafkaConsumer<String, String> consumer = new KafkaConsumer<>(consumerProps);        consumer.subscribe(Collections.singletonList(\"topic-produce\"));        ConsumerRecords<String, String> records = consumer.poll(Duration.ofSeconds(1));        assertThat(records.count()).isEqualTo(1);        ConsumerRecord<String, String> record = records.iterator().next();        assertThat(record.value()).isEqualTo(\"value-produce\");    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/SparrowKafkaResourceIT.java", "stars": "2", "class": {"name": "SparrowKafkaResourceIT", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "consumesMessages", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "    void consumesMessages() throws Exception {        Map<String, Object> producerProps = new HashMap<>(getProducerProps());        KafkaProducer<String, String> producer = new KafkaProducer<>(producerProps);        producer.send(new ProducerRecord<>(\"topic-consume\", \"value-consume\"));        MvcResult mvcResult = restMockMvc            .perform(get(\"/api/sparrow-kafka/consume?topic=topic-consume\"))            .andExpect(status().isOk())            .andExpect(request().asyncStarted())            .andReturn();        for (int i = 0; i < 100; i++) {            Thread.sleep(100);            String content = mvcResult.getResponse().getContentAsString();            if (content.contains(\"data:value-consume\")) {                return;            }        }        fail(\"Expected content data:value-consume not received\");    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/SparrowKafkaResourceIT.java", "stars": "2", "class": {"name": "SparrowKafkaResourceIT", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getProducerProps", "params": [], "throws": null, "modifiers": ["private"], "return_type": "Map<String,String>", "snippet": "    private Map<String, String> getProducerProps() {        Map<String, String> producerProps = new HashMap<>();        producerProps.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");        producerProps.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");        producerProps.put(\"bootstrap.servers\", kafkaContainer.getBootstrapServers());        return producerProps;    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/SparrowKafkaResourceIT.java", "stars": "2", "class": {"name": "SparrowKafkaResourceIT", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getConsumerProps", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "Map<String,String>", "snippet": "    private Map<String, String> getConsumerProps(String group) {        Map<String, String> consumerProps = new HashMap<>();        consumerProps.put(\"key.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");        consumerProps.put(\"value.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");        consumerProps.put(\"bootstrap.servers\", kafkaContainer.getBootstrapServers());        consumerProps.put(\"auto.offset.reset\", \"earliest\");        consumerProps.put(\"group.id\", group);        return consumerProps;    }", "url": "https://raw.githubusercontent.com/Vondser/mmwms-antd/master/src/test/java/com/meimos/myapp/web/rest/SparrowKafkaResourceIT.java", "stars": "2", "class": {"name": "SparrowKafkaResourceIT", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testHomeIsSecure", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testHomeIsSecure() {\t\tHttpHeaders headers = new HttpHeaders();\t\theaders.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\t\tResponseEntity<String> entity = this.restTemplate.exchange(\"/\", HttpMethod.GET, new HttpEntity<Void>(headers),\t\t\t\tString.class);\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-servlet/src/test/java/smoketest/servlet/SampleServletApplicationTests.java", "stars": "47572", "class": {"name": "SampleServletApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testHome", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid testHome() {\t\tResponseEntity<String> entity = this.restTemplate.withBasicAuth(\"user\", getPassword()).getForEntity(\"/\",\t\t\t\tString.class);\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\t\tassertThat(entity.getBody()).isEqualTo(\"Hello World\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-servlet/src/test/java/smoketest/servlet/SampleServletApplicationTests.java", "stars": "47572", "class": {"name": "SampleServletApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getPassword", "params": [], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "\tprivate String getPassword() {\t\treturn \"password\";\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-servlet/src/test/java/smoketest/servlet/SampleServletApplicationTests.java", "stars": "47572", "class": {"name": "SampleServletApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getTransaction", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Transaction", "snippet": "  public Transaction getTransaction() {    return delegate.getTransaction();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/CachingExecutor.java", "stars": "15", "class": {"name": "CachingExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public"]}}, {"method_name": "close", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void close(boolean forceRollback) {    try {      //issues #499, #524 and #573      if (forceRollback) {        tcm.rollback();      } else {        tcm.commit();      }    } finally {      delegate.close(forceRollback);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/CachingExecutor.java", "stars": "15", "class": {"name": "CachingExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public"]}}, {"method_name": "isClosed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isClosed() {    return delegate.isClosed();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/CachingExecutor.java", "stars": "15", "class": {"name": "CachingExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public"]}}, {"method_name": "update", "params": ["MappedStatement", "Object"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int update(MappedStatement ms, Object parameterObject) throws SQLException {    flushCacheIfRequired(ms);    return delegate.update(ms, parameterObject);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/CachingExecutor.java", "stars": "15", "class": {"name": "CachingExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public"]}}, {"method_name": "query", "params": ["MappedStatement", "Object", "RowBounds", "ResultHandler"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<E>", "snippet": "  public <E> List<E> query(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler) throws SQLException {    BoundSql boundSql = ms.getBoundSql(parameterObject);    CacheKey key = createCacheKey(ms, parameterObject, rowBounds, boundSql);    return query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/CachingExecutor.java", "stars": "15", "class": {"name": "CachingExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public"]}}, {"method_name": "queryCursor", "params": ["MappedStatement", "Object", "RowBounds"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Cursor<E>", "snippet": "  public <E> Cursor<E> queryCursor(MappedStatement ms, Object parameter, RowBounds rowBounds) throws SQLException {    flushCacheIfRequired(ms);    return delegate.queryCursor(ms, parameter, rowBounds);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/CachingExecutor.java", "stars": "15", "class": {"name": "CachingExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public"]}}, {"method_name": "query", "params": ["MappedStatement", "Object", "RowBounds", "ResultHandler", "CacheKey", "BoundSql"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<E>", "snippet": "  public <E> List<E> query(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)      throws SQLException {    Cache cache = ms.getCache();    if (cache != null) {      flushCacheIfRequired(ms);      if (ms.isUseCache() && resultHandler == null) {        ensureNoOutParams(ms, boundSql);        @SuppressWarnings(\"unchecked\")        List<E> list = (List<E>) tcm.getObject(cache, key);        if (list == null) {          list = delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);          tcm.putObject(cache, key, list); // issue #578 and #116        }        return list;      }    }    return delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/CachingExecutor.java", "stars": "15", "class": {"name": "CachingExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public"]}}, {"method_name": "flushStatements", "params": [], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<BatchResult>", "snippet": "  public List<BatchResult> flushStatements() throws SQLException {    return delegate.flushStatements();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/CachingExecutor.java", "stars": "15", "class": {"name": "CachingExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public"]}}, {"method_name": "commit", "params": ["boolean"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void commit(boolean required) throws SQLException {    delegate.commit(required);    tcm.commit();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/CachingExecutor.java", "stars": "15", "class": {"name": "CachingExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public"]}}, {"method_name": "rollback", "params": ["boolean"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void rollback(boolean required) throws SQLException {    try {      delegate.rollback(required);    } finally {      if (required) {        tcm.rollback();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/CachingExecutor.java", "stars": "15", "class": {"name": "CachingExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public"]}}, {"method_name": "ensureNoOutParams", "params": ["MappedStatement", "BoundSql"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void ensureNoOutParams(MappedStatement ms, BoundSql boundSql) {    if (ms.getStatementType() == StatementType.CALLABLE) {      for (ParameterMapping parameterMapping : boundSql.getParameterMappings()) {        if (parameterMapping.getMode() != ParameterMode.IN) {          throw new ExecutorException(\"Caching stored procedures with OUT params is not supported.  Please configure useCache=false in \" + ms.getId() + \" statement.\");        }      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/CachingExecutor.java", "stars": "15", "class": {"name": "CachingExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public"]}}, {"method_name": "createCacheKey", "params": ["MappedStatement", "Object", "RowBounds", "BoundSql"], "throws": null, "modifiers": ["public"], "return_type": "CacheKey", "snippet": "  public CacheKey createCacheKey(MappedStatement ms, Object parameterObject, RowBounds rowBounds, BoundSql boundSql) {    return delegate.createCacheKey(ms, parameterObject, rowBounds, boundSql);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/CachingExecutor.java", "stars": "15", "class": {"name": "CachingExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public"]}}, {"method_name": "isCached", "params": ["MappedStatement", "CacheKey"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isCached(MappedStatement ms, CacheKey key) {    return delegate.isCached(ms, key);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/CachingExecutor.java", "stars": "15", "class": {"name": "CachingExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public"]}}, {"method_name": "deferLoad", "params": ["MappedStatement", "MetaObject", "String", "CacheKey", "Class<?>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void deferLoad(MappedStatement ms, MetaObject resultObject, String property, CacheKey key, Class<?> targetType) {    delegate.deferLoad(ms, resultObject, property, key, targetType);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/CachingExecutor.java", "stars": "15", "class": {"name": "CachingExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public"]}}, {"method_name": "clearLocalCache", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void clearLocalCache() {    delegate.clearLocalCache();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/CachingExecutor.java", "stars": "15", "class": {"name": "CachingExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public"]}}, {"method_name": "flushCacheIfRequired", "params": ["MappedStatement"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void flushCacheIfRequired(MappedStatement ms) {    Cache cache = ms.getCache();    if (cache != null && ms.isFlushCacheRequired()) {      tcm.clear(cache);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/CachingExecutor.java", "stars": "15", "class": {"name": "CachingExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public"]}}, {"method_name": "setExecutorWrapper", "params": ["Executor"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setExecutorWrapper(Executor executor) {    throw new UnsupportedOperationException(\"This method should not be called\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/CachingExecutor.java", "stars": "15", "class": {"name": "CachingExecutor", "extends": null, "implements": ["Executor"], "modifiers": ["public"]}}, {"method_name": "getCadenaConexion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getCadenaConexion() {        return cadenaConexion;    }", "url": "https://raw.githubusercontent.com/EduarAlexis/SOLID/master/src/main/java/Solid/D/Dato.java", "stars": "1", "class": {"name": "Dato", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDato", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDato(String cadenaConexion) {        this.cadenaConexion = cadenaConexion;    }", "url": "https://raw.githubusercontent.com/EduarAlexis/SOLID/master/src/main/java/Solid/D/Dato.java", "stars": "1", "class": {"name": "Dato", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSharedNum", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getSharedNum() {        return this.sharedNum;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/job/AzkabanCommonLinkisSharedJob.java", "stars": "18", "class": {"name": "AzkabanCommonLinkisSharedJob", "extends": "AzkabanCommonLinkisJob", "implements": ["SharedJob"], "modifiers": ["public"]}}, {"method_name": "getSharedKey", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getSharedKey() {        String projectId = getJobProps().get(LinkisJobTypeConf.PROJECT_ID);        String flowId = getJobProps().get(LinkisJobTypeConf.FLOW_NAME);        String flowExecId = getJobProps().get(LinkisJobTypeConf.FLOW_EXEC_ID);        String nodeId = getJobProps().get(LinkisJobTypeConf.JOB_ID);        return projectId + \".\" + flowId + \".\" + flowExecId + \".\" + nodeId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/job/AzkabanCommonLinkisSharedJob.java", "stars": "18", "class": {"name": "AzkabanCommonLinkisSharedJob", "extends": "AzkabanCommonLinkisJob", "implements": ["SharedJob"], "modifiers": ["public"]}}, {"method_name": "setSharedNum", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSharedNum(int sharedNum) {        this.sharedNum = sharedNum;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/job/AzkabanCommonLinkisSharedJob.java", "stars": "18", "class": {"name": "AzkabanCommonLinkisSharedJob", "extends": "AzkabanCommonLinkisJob", "implements": ["SharedJob"], "modifiers": ["public"]}}, {"method_name": "getConnection", "params": [], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Connection", "snippet": "  public Connection getConnection() throws SQLException {    if (connection == null) {      openConnection();    }    return connection;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/transaction/jdbc/JdbcTransaction.java", "stars": "15", "class": {"name": "JdbcTransaction", "extends": null, "implements": ["Transaction"], "modifiers": ["public"]}}, {"method_name": "commit", "params": [], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void commit() throws SQLException {    if (connection != null && !connection.getAutoCommit()) {      if (log.isDebugEnabled()) {        log.debug(\"Committing JDBC Connection [\" + connection + \"]\");      }      connection.commit();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/transaction/jdbc/JdbcTransaction.java", "stars": "15", "class": {"name": "JdbcTransaction", "extends": null, "implements": ["Transaction"], "modifiers": ["public"]}}, {"method_name": "rollback", "params": [], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void rollback() throws SQLException {    if (connection != null && !connection.getAutoCommit()) {      if (log.isDebugEnabled()) {        log.debug(\"Rolling back JDBC Connection [\" + connection + \"]\");      }      connection.rollback();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/transaction/jdbc/JdbcTransaction.java", "stars": "15", "class": {"name": "JdbcTransaction", "extends": null, "implements": ["Transaction"], "modifiers": ["public"]}}, {"method_name": "close", "params": [], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void close() throws SQLException {    if (connection != null) {      resetAutoCommit();      if (log.isDebugEnabled()) {        log.debug(\"Closing JDBC Connection [\" + connection + \"]\");      }      connection.close();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/transaction/jdbc/JdbcTransaction.java", "stars": "15", "class": {"name": "JdbcTransaction", "extends": null, "implements": ["Transaction"], "modifiers": ["public"]}}, {"method_name": "setDesiredAutoCommit", "params": ["boolean"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void setDesiredAutoCommit(boolean desiredAutoCommit) {    try {      if (connection.getAutoCommit() != desiredAutoCommit) {        if (log.isDebugEnabled()) {          log.debug(\"Setting autocommit to \" + desiredAutoCommit + \" on JDBC Connection [\" + connection + \"]\");        }        connection.setAutoCommit(desiredAutoCommit);      }    } catch (SQLException e) {      // Only a very poorly implemented driver would fail here,      // and there's not much we can do about that.      throw new TransactionException(\"Error configuring AutoCommit.  \"          + \"Your driver may not support getAutoCommit() or setAutoCommit(). \"          + \"Requested setting: \" + desiredAutoCommit + \".  Cause: \" + e, e);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/transaction/jdbc/JdbcTransaction.java", "stars": "15", "class": {"name": "JdbcTransaction", "extends": null, "implements": ["Transaction"], "modifiers": ["public"]}}, {"method_name": "resetAutoCommit", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void resetAutoCommit() {    try {      if (!connection.getAutoCommit()) {        // MyBatis does not call commit/rollback on a connection if just selects were performed.        // Some databases start transactions with select statements        // and they mandate a commit/rollback before closing the connection.        // A workaround is setting the autocommit to true before closing the connection.        // Sybase throws an exception here.        if (log.isDebugEnabled()) {          log.debug(\"Resetting autocommit to true on JDBC Connection [\" + connection + \"]\");        }        connection.setAutoCommit(true);      }    } catch (SQLException e) {      if (log.isDebugEnabled()) {        log.debug(\"Error resetting autocommit to true \"            + \"before closing the connection.  Cause: \" + e);      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/transaction/jdbc/JdbcTransaction.java", "stars": "15", "class": {"name": "JdbcTransaction", "extends": null, "implements": ["Transaction"], "modifiers": ["public"]}}, {"method_name": "openConnection", "params": [], "throws": ["SQLException"], "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void openConnection() throws SQLException {    if (log.isDebugEnabled()) {      log.debug(\"Opening JDBC Connection\");    }    connection = dataSource.getConnection();    if (level != null) {      connection.setTransactionIsolation(level.getLevel());    }    setDesiredAutoCommit(autoCommit);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/transaction/jdbc/JdbcTransaction.java", "stars": "15", "class": {"name": "JdbcTransaction", "extends": null, "implements": ["Transaction"], "modifiers": ["public"]}}, {"method_name": "getTimeout", "params": [], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getTimeout() throws SQLException {    return null;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/transaction/jdbc/JdbcTransaction.java", "stars": "15", "class": {"name": "JdbcTransaction", "extends": null, "implements": ["Transaction"], "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void start() {    this.scheduler.scheduleAtFixedRate(() -> {      FlowTriggerExecutionCleaner.this.flowTriggerInstanceLoader          .deleteTriggerExecutionsFinishingOlderThan(System              .currentTimeMillis() - RETENTION_PERIOD.toMillis());    }, 0, CLEAN_INTERVAL.getSeconds(), TimeUnit.SECONDS);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerExecutionCleaner.java", "stars": "18", "class": {"name": "FlowTriggerExecutionCleaner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shutdown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void shutdown() {    this.scheduler.shutdown();    this.scheduler.shutdownNow();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerExecutionCleaner.java", "stars": "18", "class": {"name": "FlowTriggerExecutionCleaner", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readFileAsString", "params": ["String"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "String", "snippet": "    public String readFileAsString(String fileName)throws Exception    {        String data = \"\";        data = new String(Files.readAllBytes(Paths.get(fileName)));        return data;    }", "url": "https://raw.githubusercontent.com/nikhilbghodke/Simplex/master/src/com/github/nikhilbghodke/lexer/Lexer.java", "stars": "2", "class": {"name": "Lexer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "lex", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void lex() throws Exception {        String temp=content;        while(!temp.isEmpty()){            temp=temp.trim();            for(String terminal:precedence){                Pattern regex=rules.get(terminal);                String name=terminal;                Matcher a=regex.matcher(temp);                if(a.find()){                    String match=a.group();                    ArrayList<String> list= new ArrayList<>();                    list.add(name);                    list.add(match);                    tokens.add(list);                    temp=temp.substring(match.length());                    break;                }            }        }        System.out.println(rules);        System.out.println(tokens);    }", "url": "https://raw.githubusercontent.com/nikhilbghodke/Simplex/master/src/com/github/nikhilbghodke/lexer/Lexer.java", "stars": "2", "class": {"name": "Lexer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeHTMLComments", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String removeHTMLComments(@NotNull String s){        return s.replaceAll(\"<!--.*?-->\",\"\");    }", "url": "https://raw.githubusercontent.com/nikhilbghodke/Simplex/master/src/com/github/nikhilbghodke/lexer/Lexer.java", "stars": "2", "class": {"name": "Lexer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadRules", "params": ["String"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void loadRules(String grammarFile) throws Exception {        String temp= readFileAsString(grammarFile);        String[] lines= temp.split(\"\\\\n\");        for(String s:lines){            int index=s.indexOf('=');            String key=s.substring(0,index).trim();            String value=s.substring(index+1).trim();            precedence.add(key);            try {                rules.put(key, Pattern.compile(\"^(\" + value + \")\"));            }            catch (Exception e){                throw new Exception(s+\" regular expression cannot be compiled and hence PatternSyntaxException error is thrown\");            }        }    }", "url": "https://raw.githubusercontent.com/nikhilbghodke/Simplex/master/src/com/github/nikhilbghodke/lexer/Lexer.java", "stars": "2", "class": {"name": "Lexer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "indexOf", "params": ["Pattern", "String"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int indexOf(Pattern pattern, String s) {        Matcher matcher = pattern.matcher(s);        return matcher.find() ? matcher.start() : -1;    }", "url": "https://raw.githubusercontent.com/nikhilbghodke/Simplex/master/src/com/github/nikhilbghodke/lexer/Lexer.java", "stars": "2", "class": {"name": "Lexer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "preHandle", "params": ["HttpServletRequest", "HttpServletResponse", "Object"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {        if(conf.enable() && !request.getRequestURI().equals(conf.authLoginUrl())) {            String token = AppUtil.getCookieValue(request, AuthConstraints.DEFAULT_SSO_COOKIE);            Map<String, String> authMessage = authTokenHelper.getAuthMessage(token);            String username = authMessage.get(\"loginid\");            //If is requested from user            if (StringUtils.isNotBlank(username)) {                String sync = AppUtil.getCookieValue(request, USER_INFO_SYNC_COOKIE);                if (StringUtils.isBlank(sync) || !username.equals(sync)) {                    UserInfo userInfo = new UserInfo();                    userInfo.setUserName(username);                    userInfo.setDeptCode(authMessage.getOrDefault(\"deptCode\", \"\"));                    userInfo.setOrgCode(authMessage.getOrDefault(\"orgCode\", \"\"));                    userInfo.setUpdateTime(Calendar.getInstance().getTime());                    LOG.info(\"Sync user information:[\" + Json.toJson(userInfo, null) +\"]\");                    userInfoService.sync(userInfo);                    Cookie cookie = new Cookie(USER_INFO_SYNC_COOKIE, username);                    cookie.setPath(\"/\");                    cookie.setHttpOnly(true);                    cookie.setSecure(false);                    cookie.setMaxAge(86400);                    response.addCookie(cookie);                }            }        }        return true;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/auth/interceptors/UserInfoSyncInterceptor.java", "stars": "23", "class": {"name": "UserInfoSyncInterceptor", "extends": null, "implements": ["HandlerInterceptor"], "modifiers": ["public"]}}, {"method_name": "asBigDecimal", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BigDecimal", "snippet": "    public BigDecimal asBigDecimal() {        if (null == this.getRawData()) {            return null;        }        try {            return new BigDecimal((String) this.getRawData());        } catch (NumberFormatException e) {            throw DataXException.asDataXException(                    CommonErrorCode.CONVERT_NOT_SUPPORT,                    String.format(\"String[%s] \u65e0\u6cd5\u8f6c\u6362\u4e3aDouble\u7c7b\u578b .\",                            (String) this.getRawData()));        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/DoubleColumn.java", "stars": "23", "class": {"name": "DoubleColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "asDouble", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Double", "snippet": "    public Double asDouble() {        if (null == this.getRawData()) {            return null;        }        String string = (String) this.getRawData();        boolean isDoubleSpecific = string.equals(\"NaN\")                || string.equals(\"-Infinity\") || string.equals(\"+Infinity\");        if (isDoubleSpecific) {            return Double.valueOf(string);        }        BigDecimal result = this.asBigDecimal();        OverFlowUtil.validateDoubleNotOverFlow(result);        return result.doubleValue();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/DoubleColumn.java", "stars": "23", "class": {"name": "DoubleColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "asLong", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long asLong() {        if (null == this.getRawData()) {            return null;        }        BigDecimal result = this.asBigDecimal();        OverFlowUtil.validateLongNotOverFlow(result.toBigInteger());        return result.longValue();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/DoubleColumn.java", "stars": "23", "class": {"name": "DoubleColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "asBigInteger", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BigInteger", "snippet": "    public BigInteger asBigInteger() {        if (null == this.getRawData()) {            return null;        }        return this.asBigDecimal().toBigInteger();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/DoubleColumn.java", "stars": "23", "class": {"name": "DoubleColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "asString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String asString() {        if (null == this.getRawData()) {            return null;        }        return (String) this.getRawData();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/DoubleColumn.java", "stars": "23", "class": {"name": "DoubleColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "asBoolean", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Boolean", "snippet": "    public Boolean asBoolean() {        throw DataXException.asDataXException(                CommonErrorCode.CONVERT_NOT_SUPPORT, \"Double\u7c7b\u578b\u65e0\u6cd5\u8f6c\u4e3aBool .\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/DoubleColumn.java", "stars": "23", "class": {"name": "DoubleColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "asDate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date asDate() {        throw DataXException.asDataXException(                CommonErrorCode.CONVERT_NOT_SUPPORT, \"Double\u7c7b\u578b\u65e0\u6cd5\u8f6c\u4e3aDate\u7c7b\u578b .\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/DoubleColumn.java", "stars": "23", "class": {"name": "DoubleColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "asBytes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte[] asBytes() {        throw DataXException.asDataXException(                CommonErrorCode.CONVERT_NOT_SUPPORT, \"Double\u7c7b\u578b\u65e0\u6cd5\u8f6c\u4e3aBytes\u7c7b\u578b .\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/DoubleColumn.java", "stars": "23", "class": {"name": "DoubleColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "validate", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void validate(final String data) {        if (null == data) {            return;        }        if (data.equalsIgnoreCase(\"NaN\") || data.equalsIgnoreCase(\"-Infinity\")                || data.equalsIgnoreCase(\"Infinity\")) {            return;        }        try {            new BigDecimal(data);        } catch (Exception e) {            throw DataXException.asDataXException(                    CommonErrorCode.CONVERT_NOT_SUPPORT,                    String.format(\"String[%s]\u65e0\u6cd5\u8f6c\u4e3aDouble\u7c7b\u578b .\", data));        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/DoubleColumn.java", "stars": "23", "class": {"name": "DoubleColumn", "extends": "Column", "implements": null, "modifiers": ["public"]}}, {"method_name": "configureMessageBroker", "params": ["MessageBrokerRegistry"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void configureMessageBroker(MessageBrokerRegistry config) {        config.enableSimpleBroker(\"/topic\");    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/config/WebsocketConfiguration.java", "stars": "2", "class": {"name": "WebsocketConfiguration", "extends": null, "implements": ["WebSocketMessageBrokerConfigurer"], "modifiers": ["public"]}}, {"method_name": "registerStompEndpoints", "params": ["StompEndpointRegistry"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void registerStompEndpoints(StompEndpointRegistry registry) {        String[] allowedOrigins = Optional.ofNullable(jHipsterProperties.getCors().getAllowedOrigins()).map(origins -> origins.toArray(new String[0])).orElse(new String[0]);        registry.addEndpoint(\"/websocket/tracker\")            .setHandshakeHandler(defaultHandshakeHandler())            .setAllowedOrigins(allowedOrigins)            .withSockJS()            .setInterceptors(httpSessionHandshakeInterceptor());    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/config/WebsocketConfiguration.java", "stars": "2", "class": {"name": "WebsocketConfiguration", "extends": null, "implements": ["WebSocketMessageBrokerConfigurer"], "modifiers": ["public"]}}, {"method_name": "httpSessionHandshakeInterceptor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "HandshakeInterceptor", "snippet": "    public HandshakeInterceptor httpSessionHandshakeInterceptor() {        return new HandshakeInterceptor() {            @Override            public boolean beforeHandshake(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Map<String, Object> attributes) {                if (request instanceof ServletServerHttpRequest) {                    ServletServerHttpRequest servletRequest = (ServletServerHttpRequest) request;                    attributes.put(IP_ADDRESS, servletRequest.getRemoteAddress());                }                return true;            }            @Override            public void afterHandshake(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Exception exception) {            }        };    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/config/WebsocketConfiguration.java", "stars": "2", "class": {"name": "WebsocketConfiguration", "extends": null, "implements": ["WebSocketMessageBrokerConfigurer"], "modifiers": ["public"]}}, {"method_name": "defaultHandshakeHandler", "params": [], "throws": null, "modifiers": ["private"], "return_type": "DefaultHandshakeHandler", "snippet": "    private DefaultHandshakeHandler defaultHandshakeHandler() {        return new DefaultHandshakeHandler() {            @Override            protected Principal determineUser(ServerHttpRequest request, WebSocketHandler wsHandler, Map<String, Object> attributes) {                Principal principal = request.getPrincipal();                if (principal == null) {                    Collection<SimpleGrantedAuthority> authorities = new ArrayList<>();                    authorities.add(new SimpleGrantedAuthority(AuthoritiesConstants.ANONYMOUS));                    principal = new AnonymousAuthenticationToken(\"WebsocketConfiguration\", \"anonymous\", authorities);                }                return principal;            }        };    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/config/WebsocketConfiguration.java", "stars": "2", "class": {"name": "WebsocketConfiguration", "extends": null, "implements": ["WebSocketMessageBrokerConfigurer"], "modifiers": ["public"]}}, {"method_name": "get", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Bitmap", "snippet": "\tpublic Bitmap get(String id)\t{\t\treturn lruCache.get(id);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/linkedinbest/src/com/example/linkedinbest/MemoryCache.java", "stars": "74", "class": {"name": "MemoryCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "put", "params": ["String", "Bitmap"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void put(String key, Bitmap bitmap)\t{\t\ttry\t\t{\t\t\tsynchronized (lruCache) {\t\t\t     if (lruCache.get(key) == null) {\t\t\t    \t lruCache.put(key, bitmap);\t\t\t     \t\t\t   }}\t\t}\t\tcatch(Throwable th)\t\t{\t\t\tth.printStackTrace();\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/linkedinbest/src/com/example/linkedinbest/MemoryCache.java", "stars": "74", "class": {"name": "MemoryCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clear()\t{\t\tlruCache.evictAll();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/linkedinbest/src/com/example/linkedinbest/MemoryCache.java", "stars": "74", "class": {"name": "MemoryCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getActionType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ActionType", "snippet": "  public ActionType getActionType() {      return ActionType.SPEED;  }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/action/SpeedAction.java", "stars": "15", "class": {"name": "SpeedAction", "extends": null, "implements": ["Action"], "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "PacmanType", "snippet": "  public PacmanType getType() {      return null;  }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/action/SpeedAction.java", "stars": "15", "class": {"name": "SpeedAction", "extends": null, "implements": ["Action"], "modifiers": ["public"]}}, {"method_name": "valueChanged", "params": ["ListSelectionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void valueChanged(ListSelectionEvent e) {            GUI.jt1.append(GUI.vector1.elementAt(GUI.jlt1.getSelectedIndex()).toString());            GUI.vector1.clear();            GUI.jlt1.setListData(GUI.vector1);    }", "url": "https://raw.githubusercontent.com/4156/MindustryModMaker/master/src/Listener/ListLIstener.java", "stars": "2", "class": {"name": "ListLIstener", "extends": null, "implements": ["ListSelectionListener"], "modifiers": ["public"]}}, {"method_name": "handleEvent", "params": ["Event"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void handleEvent(Event event) {        if (event.getType() == EventType.FLOW_FINISHED) {            FlowRunner flowRunner = (FlowRunner) event.getRunner();            ExecutableFlow flow = flowRunner.getExecutableFlow();            int flowType = flow.getFlowType();            Map<String, String> cycleOption = flow.getCycleOption();            String cycleErrorOption = cycleOption.get(\"cycleErrorOption\");            if (flowType == 4 && cycleErrorOption != null) {                ExecutionCycle cycleFlow = getExecutionCycle(flow);                if (cycleFlow != null && cycleFlow.getStatus() == Status.RUNNING) {                    Status status = event.getData().getStatus();                    if (Status.isStatusSucceeded(status)) {                        submitExecutableFlow(flow, cycleFlow);                    } else if (Status.isStatusFailed(status) && cycleErrorOption.equals(\"errorContinue\")) {                        submitExecutableFlow(flow, cycleFlow);                    } else if (Status.isStatusFailed(status) && cycleErrorOption.equals(\"errorStop\")) {                        cycleFlow.setStatus(Status.FAILED);                        cycleFlow.setEndTime(System.currentTimeMillis());                        updateCycleFlow(() -> executionCycleDao.updateCycleFlow(cycleFlow));                        ExecutionControllerUtils.alertOnCycleFlowInterrupt(flow, cycleFlow, alerterHolder);                    }                }            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/com/webank/wedatasphere/schedulis/exec/execapp/CycleFlowRunnerEventListener.java", "stars": "18", "class": {"name": "CycleFlowRunnerEventListener", "extends": null, "implements": ["EventListener"], "modifiers": ["public"]}}, {"method_name": "submitExecutableFlow", "params": ["ExecutableFlow", "ExecutionCycle"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void submitExecutableFlow(ExecutableFlow flow, ExecutionCycle cycleFlow) {        try {            int retryTimes = props.getInt(WTSS_CYCLE_RETRY_TIMES, 5);            Pair<Boolean, Integer> pair = submitExecutableFlow(flow, retryTimes);            boolean submitFlowResult = pair.getFirst();            if (submitFlowResult) {                int executionId = flow.getExecutionId();                int executionIdNew = pair.getSecond();                updateCycleFlow(() -> executionCycleDao.updateCycleFlow(executionId, executionIdNew));            } else {                logger.error(\"submit executable flow error\");                cycleFlow.setStatus(Status.FAILED);                cycleFlow.setEndTime(System.currentTimeMillis());                updateCycleFlow(() -> executionCycleDao.updateCycleFlow(cycleFlow));                ExecutionControllerUtils.alertOnCycleFlowInterrupt(flow, cycleFlow, alerterHolder);            }        } catch (Exception e) {            logger.error(\"submit executable flow error\", e);            cycleFlow.setStatus(Status.FAILED);            cycleFlow.setEndTime(System.currentTimeMillis());            updateCycleFlow(() -> executionCycleDao.updateCycleFlow(cycleFlow));            ExecutionControllerUtils.alertOnCycleFlowInterrupt(flow, cycleFlow, alerterHolder);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/com/webank/wedatasphere/schedulis/exec/execapp/CycleFlowRunnerEventListener.java", "stars": "18", "class": {"name": "CycleFlowRunnerEventListener", "extends": null, "implements": ["EventListener"], "modifiers": ["public"]}}, {"method_name": "getExecutionCycle", "params": ["ExecutableFlow"], "throws": null, "modifiers": ["private"], "return_type": "ExecutionCycle", "snippet": "    private ExecutionCycle getExecutionCycle(ExecutableFlow flow) {        try {            return executionCycleDao.getExecutionCycleFlow(String.valueOf(flow.getProjectId()), flow.getFlowId());        } catch (ExecutorManagerException e) {            return null;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/com/webank/wedatasphere/schedulis/exec/execapp/CycleFlowRunnerEventListener.java", "stars": "18", "class": {"name": "CycleFlowRunnerEventListener", "extends": null, "implements": ["EventListener"], "modifiers": ["public"]}}, {"method_name": "updateCycleFlow", "params": ["CheckedSupplier<Integer,ExecutorManagerException>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void updateCycleFlow(CheckedSupplier<Integer, ExecutorManagerException> supplier) {        try {            supplier.get();        } catch (ExecutorManagerException e) {            logger.error(\"updateCycleFlow error\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/com/webank/wedatasphere/schedulis/exec/execapp/CycleFlowRunnerEventListener.java", "stars": "18", "class": {"name": "CycleFlowRunnerEventListener", "extends": null, "implements": ["EventListener"], "modifiers": ["public"]}}, {"method_name": "submitExecutableFlow", "params": ["ExecutableFlow", "int"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "Pair<Boolean,Integer>", "snippet": "    private Pair<Boolean, Integer> submitExecutableFlow(ExecutableFlow flow, int retryTimes) throws IOException {        Supplier<Pair<Boolean, Integer>> submitExecutableFlow = () -> {            try {                int interval = props.getInt(WTSS_CYCLE_INTERVAL, 5);                sleep(interval * 1000);                logger.info(String.format(\"submit cycle: %s : %d flow start ...\", flow.getFlowId(), flow.getExecutionId()));                Pair<Boolean, Integer> result = submitExecutableFlow(flow);                logger.info(String.format(\"submit cycle: %s : %d flow end\", flow.getFlowId(), flow.getExecutionId()));                return result;            } catch (Exception e) {                logger.error(\"submit cycle flow error\", e);                return new Pair<>(false, null);            }        };        return Stream.generate(submitExecutableFlow)                .limit(retryTimes)                .filter(Pair::getFirst)                .findFirst()                .orElseThrow(() -> new IOException(\"submit cycle flow error\"));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/com/webank/wedatasphere/schedulis/exec/execapp/CycleFlowRunnerEventListener.java", "stars": "18", "class": {"name": "CycleFlowRunnerEventListener", "extends": null, "implements": ["EventListener"], "modifiers": ["public"]}}, {"method_name": "submitExecutableFlow", "params": ["ExecutableFlow"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "Pair<Boolean,Integer>", "snippet": "    private Pair<Boolean, Integer> submitExecutableFlow(ExecutableFlow flow) throws IOException {        OkHttpClient okHttpClient = new OkHttpClient.Builder()                .connectTimeout(10, TimeUnit.SECONDS)                .writeTimeout(20, TimeUnit.SECONDS)                .readTimeout(20, TimeUnit.SECONDS)                .build();        HttpUrl url = flow2HttpUrl(flow);        Request request = new Request.Builder()                .url(url)                .get()                .build();        Call call = okHttpClient.newCall(request);        Response response = call.execute();        if (response.code() != 200) {            logger.info(\"submit cycle flow http response code: \" + response.code());            return new Pair<>(false, null);        } else {            Map<String, Object> submitFlowResult = response2Map(response);            String code = (String) submitFlowResult.get(\"code\");            String message = (String) submitFlowResult.get(\"message\");            logger.info(\"submit cycle flow map identity code: \" + code);            logger.info(\"submit cycle flow map identity message: \" + message);            return \"200\".equals(code)                    ? new Pair<>(true, ((Double) submitFlowResult.get(\"execid\")).intValue())                    : new Pair<>(false, null) ;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/com/webank/wedatasphere/schedulis/exec/execapp/CycleFlowRunnerEventListener.java", "stars": "18", "class": {"name": "CycleFlowRunnerEventListener", "extends": null, "implements": ["EventListener"], "modifiers": ["public"]}}, {"method_name": "flow2HttpUrl", "params": ["ExecutableFlow"], "throws": null, "modifiers": ["private"], "return_type": "HttpUrl", "snippet": "    private HttpUrl flow2HttpUrl(ExecutableFlow flow) {        Map<String, String> params = new HashMap<>();        params.put(\"cycleFlowSubmitUser\", flow.getSubmitUser());        params.put(\"projectId\", String.valueOf(flow.getProjectId()));        params.put(\"project\", flow.getProjectName());        params.put(\"ajax\", \"executeFlowCycleFromExecutor\");        params.put(\"flow\", flow.getFlowId());        ExecutionOptions executionOptions = flow.getExecutionOptions();        String disabledJobs = JSONUtils.toJSON(executionOptions.getDisabledJobs());        params.put(\"disabled\", disabledJobs);        String failureEmailsOverride = String.valueOf(executionOptions.isFailureEmailsOverridden());        params.put(\"failureEmailsOverride\", failureEmailsOverride);        String successEmailsOverride = String.valueOf(executionOptions.isSuccessEmailsOverridden());        params.put(\"successEmailsOverride\", successEmailsOverride);        String failureAction = parseFailureAction(executionOptions.getFailureAction());        params.put(\"failureAction\", failureAction);        String failureEmails = String.join(\",\", executionOptions.getFailureEmails());        params.put(\"failureEmails\", failureEmails);        String successEmails = String.join(\",\", executionOptions.getSuccessEmails());        params.put(\"successEmails\", successEmails);        String notifyFailureFirst = String.valueOf(executionOptions.getNotifyOnFirstFailure());        params.put(\"notifyFailureFirst\", notifyFailureFirst);        String notifyFailureLast = String.valueOf(executionOptions.getNotifyOnLastFailure());        params.put(\"notifyFailureLast\", notifyFailureLast);        Map<String, String> flowParams = parseFlowParams(executionOptions.getFlowParameters());        params.putAll(flowParams);        Map<String, Object> otherOption = flow.getOtherOption();        Map<String, String> jobFailedParams = parseJobFailedParams(otherOption, flow.getFlowId());        params.putAll(jobFailedParams);        Map<String, String> jobSkipParams = parseJobSkipParams(otherOption);        params.putAll(jobSkipParams);//        Map<String, String> flowRetryAlertParams = parseFlowRetryAlertParams(otherOption);//        params.putAll(flowRetryAlertParams);        params.put(\"failureAlertLevel\", (String) otherOption.get(\"failureAlertLevel\"));        params.put(\"successAlertLevel\", (String) otherOption.get(\"successAlertLevel\"));        params.put(\"useTimeoutSetting\", String.valueOf(flow.getSlaOptions().size() > 0));        List<SlaOption> slaOptions = flow.getSlaOptions();        String slaEmails = parseSlaEmails(slaOptions);        params.put(\"slaEmails\", slaEmails);        Map<String, String> settingParams = parseSettingParams(slaOptions);        params.putAll(settingParams);        Map<String, String> concurrentParams = parseConcurrentParams(executionOptions);        params.putAll(concurrentParams);        params.put(\"cycleErrorOption\", flow.getCycleOption().get(\"cycleErrorOption\"));        params.put(\"cycleFlowInterruptAlertLevel\", flow.getCycleOption().get(\"cycleFlowInterruptAlertLevel\"));        params.put(\"cycleFlowInterruptEmails\", flow.getCycleOption().get(\"cycleFlowInterruptEmails\"));        String urlSuffix = params.keySet().stream()                .map(key -> key + \"=\" + params.get(key))                .collect(joining(\"&\"));        String host = props.getString(WTSS_WEB_SERVER_HOST);        int port = props.getInt(WTSS_WEB_SERVER_POST);        String url = \"http://\" + host + \":\" + port + \"/executor?\" + urlSuffix;        logger.info(\"cycle flow url: \" + url);        return HttpUrl.parse(url);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/com/webank/wedatasphere/schedulis/exec/execapp/CycleFlowRunnerEventListener.java", "stars": "18", "class": {"name": "CycleFlowRunnerEventListener", "extends": null, "implements": ["EventListener"], "modifiers": ["public"]}}, {"method_name": "parseFailureAction", "params": ["ExecutionOptions"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String parseFailureAction(ExecutionOptions.FailureAction failureAction) {        String failureActionStr = \"finishCurrent\";        if (failureAction == FINISH_CURRENTLY_RUNNING) {            failureActionStr = \"finishCurrent\";        } else if (failureAction == CANCEL_ALL) {            failureActionStr = \"cancelImmediately\";        } else if (failureAction == FINISH_ALL_POSSIBLE) {            failureActionStr = \"finishPossible\";        } else if (failureAction == FAILED_PAUSE) {            failureActionStr = \"failedPause\";        }        return failureActionStr;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/com/webank/wedatasphere/schedulis/exec/execapp/CycleFlowRunnerEventListener.java", "stars": "18", "class": {"name": "CycleFlowRunnerEventListener", "extends": null, "implements": ["EventListener"], "modifiers": ["public"]}}, {"method_name": "parseFlowParams", "params": ["Map<String,String>"], "throws": null, "modifiers": ["private"], "return_type": "Map<String,String>", "snippet": "    private Map<String, String> parseFlowParams(Map<String, String> flowParams) {        if (MapUtils.isEmpty(flowParams)){            return new HashMap<>();        }        Map<String, String> newFlowParams = new HashMap<>();        flowParams.forEach((k, v) -> {            String key = \"flowOverride[\" + k + \"]\";            newFlowParams.put(key, v);        });        return newFlowParams;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/com/webank/wedatasphere/schedulis/exec/execapp/CycleFlowRunnerEventListener.java", "stars": "18", "class": {"name": "CycleFlowRunnerEventListener", "extends": null, "implements": ["EventListener"], "modifiers": ["public"]}}, {"method_name": "parseJobFailedParams", "params": ["Map<String,Object>", "String"], "throws": null, "modifiers": ["private"], "return_type": "Map<String,String>", "snippet": "    private Map<String, String> parseJobFailedParams(Map<String, Object> otherOption, String flowId) {        Object jobFailedObj = otherOption.get(\"jobFailedRetryOptions\");        if (jobFailedObj == null){            return new HashMap<>();        }        @SuppressWarnings(\"unchecked\")        List<Map<String, Object>> jobFailedList = (List<Map<String, Object>>) jobFailedObj;        Map<String, String> jobFailedParams = new HashMap<>();        for (int i = 0; i < jobFailedList.size(); i++) {            String key = \"jobFailedRetryOptions[\" + i + \"]\";            String value;            Map<String, Object> jobFailedOption = jobFailedList.get(i);            if (jobFailedOption.containsKey(\"job.failed.retry.interval\")) {                String jobName = \"all_jobs \" + flowId;                String interval = (String) jobFailedOption.get(\"job.failed.retry.interval\");                String count = (String) jobFailedOption.get(\"job.failed.retry.count\");                value = jobName + \",\" + interval + \",\" + count;            } else {                String jobName = (String) jobFailedOption.get(\"jobName\");                String interval = (String) jobFailedOption.get(\"interval\");                String count = (String) jobFailedOption.get(\"count\");                value = jobName + \",\" + interval + \",\" + count;            }            jobFailedParams.put(key, value);        }        return jobFailedParams;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/com/webank/wedatasphere/schedulis/exec/execapp/CycleFlowRunnerEventListener.java", "stars": "18", "class": {"name": "CycleFlowRunnerEventListener", "extends": null, "implements": ["EventListener"], "modifiers": ["public"]}}, {"method_name": "parseJobSkipParams", "params": ["Map<String,Object>"], "throws": null, "modifiers": ["private"], "return_type": "Map<String,String>", "snippet": "    private Map<String, String> parseJobSkipParams(Map<String, Object> otherOption) {        Object jobSkipObj = otherOption.get(\"jobSkipFailedOptions\");        if (jobSkipObj == null){            return new HashMap<>();        }        @SuppressWarnings(\"unchecked\")        List<String> jobSkipList = (List<String>) jobSkipObj;        Map<String, String> jobSkipParams = new HashMap<>();        for (int i = 0; i < jobSkipList.size(); i++) {            String key = \"jobSkipFailedOptions[\" + i + \"]\";            String value = jobSkipList.get(i);            jobSkipParams.put(key, value);        }        return jobSkipParams;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/com/webank/wedatasphere/schedulis/exec/execapp/CycleFlowRunnerEventListener.java", "stars": "18", "class": {"name": "CycleFlowRunnerEventListener", "extends": null, "implements": ["EventListener"], "modifiers": ["public"]}}, {"method_name": "parseFlowRetryAlertParams", "params": ["Map<String,Object>"], "throws": null, "modifiers": ["private"], "return_type": "Map<String,String>", "snippet": "    private Map<String, String> parseFlowRetryAlertParams(Map<String, Object> otherOption) {        @SuppressWarnings(\"unchecked\")        Map<String, Object> flowRetryAlertChecked = (Map<String, Object>) otherOption.get(\"flowRetryAlertOption\");        Function<Map<String, Object>, Map<String, String>> getFlowRetryAlertParams = map -> {            Map<String, String> flowRetryAlertParams = new HashMap<>();            map.forEach((k, v) -> flowRetryAlertParams.put(k, v.toString()));            return flowRetryAlertParams;        };        return null == flowRetryAlertChecked                ? new HashMap<>()                : getFlowRetryAlertParams.apply(flowRetryAlertChecked);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/com/webank/wedatasphere/schedulis/exec/execapp/CycleFlowRunnerEventListener.java", "stars": "18", "class": {"name": "CycleFlowRunnerEventListener", "extends": null, "implements": ["EventListener"], "modifiers": ["public"]}}, {"method_name": "parseSlaEmails", "params": ["List<SlaOption>"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String parseSlaEmails(List<SlaOption> slaOptions) {        if (slaOptions.isEmpty()){            return \"\";        }        @SuppressWarnings(\"unchecked\")        List<String> slaEmails = (List<String>) slaOptions.get(0).getInfo().get(SlaOption.INFO_EMAIL_LIST);        return String.join(\",\", slaEmails);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/com/webank/wedatasphere/schedulis/exec/execapp/CycleFlowRunnerEventListener.java", "stars": "18", "class": {"name": "CycleFlowRunnerEventListener", "extends": null, "implements": ["EventListener"], "modifiers": ["public"]}}, {"method_name": "parseSettingParams", "params": ["List<SlaOption>"], "throws": null, "modifiers": ["private"], "return_type": "Map<String,String>", "snippet": "    private Map<String, String> parseSettingParams(List<SlaOption> slaOptions) {        if (slaOptions.isEmpty()) {            return new HashMap<>();        }        SlaOption slaOption = slaOptions.get(0);        String id = (String) slaOption.getInfo().getOrDefault(SlaOption.INFO_JOB_NAME, \"\");        String rule = slaOption.getType().equals(SlaOption.TYPE_FLOW_SUCCEED)? \"SUCCESS\": \"FINISH\";        String duration = (String) slaOption.getInfo().get(SlaOption.INFO_TIME_SET);        String level = slaOption.getLevel();        String emailAction = (String) slaOption.getInfo().get(SlaOption.INFO_EMAIL_ACTION_SET);        String killAction = (String) slaOption.getInfo().get(SlaOption.INFO_KILL_FLOW_ACTION_SET);        String key = \"settings[0]\";        String value =  String.join(\",\", id, rule, duration, level, emailAction, killAction);        Map<String, String> settingParams = new HashMap<>();        settingParams.put(key, value);        return settingParams;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/com/webank/wedatasphere/schedulis/exec/execapp/CycleFlowRunnerEventListener.java", "stars": "18", "class": {"name": "CycleFlowRunnerEventListener", "extends": null, "implements": ["EventListener"], "modifiers": ["public"]}}, {"method_name": "parseConcurrentParams", "params": ["ExecutionOptions"], "throws": null, "modifiers": ["private"], "return_type": "Map<String,String>", "snippet": "    private Map<String, String> parseConcurrentParams(ExecutionOptions executionOptions) {        Map<String, String> concurrentParams = new HashMap<>();        String concurrentOption = executionOptions.getConcurrentOption();        if (\"pipeline\".equals(concurrentOption)){            concurrentParams.put(\"pipelineLevel\", String.valueOf(executionOptions.getPipelineLevel()));        } else if (\"queue\".equals(concurrentOption)) {            concurrentParams.put(\"queueLevel\", String.valueOf(executionOptions.getQueueLevel()));        }        concurrentParams.put(\"concurrentOption\", concurrentOption);        return concurrentParams;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/com/webank/wedatasphere/schedulis/exec/execapp/CycleFlowRunnerEventListener.java", "stars": "18", "class": {"name": "CycleFlowRunnerEventListener", "extends": null, "implements": ["EventListener"], "modifiers": ["public"]}}, {"method_name": "response2Map", "params": ["Response"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "Map<String,Object>", "snippet": "    private Map<String, Object> response2Map(Response response) throws IOException {        ResponseBody body = response.body();        if (body == null) {            return null;        }        String bodyString = body.string();        GsonBuilder gb = new GsonBuilder();        Gson g = gb.create();        return g.fromJson(bodyString, new TypeToken<Map<String, Object>>(){}.getType());    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/com/webank/wedatasphere/schedulis/exec/execapp/CycleFlowRunnerEventListener.java", "stars": "18", "class": {"name": "CycleFlowRunnerEventListener", "extends": null, "implements": ["EventListener"], "modifiers": ["public"]}}, {"method_name": "sleep", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void sleep(int interval) {        try {            Thread.sleep(interval);        } catch (InterruptedException e) {            logger.info(\"cycle flow sleep is interrupted\");        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/com/webank/wedatasphere/schedulis/exec/execapp/CycleFlowRunnerEventListener.java", "stars": "18", "class": {"name": "CycleFlowRunnerEventListener", "extends": null, "implements": ["EventListener"], "modifiers": ["public"]}}, {"method_name": "convertIfNecessary", "params": ["ConfigurableListableBeanFactory", "Field", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "Object", "snippet": "    public static Object convertIfNecessary(ConfigurableListableBeanFactory beanFactory,                                            Field field, Object value) {        TypeConverter converter = beanFactory.getTypeConverter();        return converter.convertIfNecessary(value, field.getType(), field);    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/util/BeanTypeConvertUtil.java", "stars": "4", "class": {"name": "BeanTypeConvertUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "convertIfNecessary", "params": ["ConfigurableListableBeanFactory", "Method", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "Object", "snippet": "    public static Object convertIfNecessary(ConfigurableListableBeanFactory beanFactory,                                            Method method, Object value) {        Class<?>[] paramTypes = method.getParameterTypes();        Object[] arguments = new Object[paramTypes.length];        TypeConverter converter = beanFactory.getTypeConverter();        if (arguments.length == 1) {            return converter.convertIfNecessary(value, paramTypes[0],                    new MethodParameter(method, 0));        }        for (int i = 0; i < arguments.length; i++) {            arguments[i] = converter.convertIfNecessary(value, paramTypes[i],                    new MethodParameter(method, i));        }        return arguments;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/util/BeanTypeConvertUtil.java", "stars": "4", "class": {"name": "BeanTypeConvertUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "solution", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "\tpublic static int solution(int n) {        // write your code in Java SE 8        \t\tint max = 0;        int current = 0;        boolean initialized = false;                while (n != 0) {            if ((n & 1) == 1) {                if ((current > max)) {                    max = current;                }                current = 0;                initialized = true;                            } else {                if (initialized) {                    current++;                }            }            n >>= 1;                    }        return max;            }", "url": "https://raw.githubusercontent.com/njcodernoob/codility-java-solutions/master/BinaryGap.java", "stars": "2", "class": {"name": "BinaryGap", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tint n = 32;\t\tint s = solution(n);\t\tSystem.out.println(s);\t}", "url": "https://raw.githubusercontent.com/njcodernoob/codility-java-solutions/master/BinaryGap.java", "stars": "2", "class": {"name": "BinaryGap", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"BannerBean{\" +                \"Code=\" + Code +                \", Msg='\" + Msg + '\\'' +                \", Data=\" + Data +                '}';    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/BannerBean.java", "stars": "1", "class": {"name": "BannerBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCode() {        return Code;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/BannerBean.java", "stars": "1", "class": {"name": "BannerBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCode", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCode(int Code) {        this.Code = Code;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/BannerBean.java", "stars": "1", "class": {"name": "BannerBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMsg", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getMsg() {        return Msg;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/BannerBean.java", "stars": "1", "class": {"name": "BannerBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMsg", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMsg(String Msg) {        this.Msg = Msg;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/BannerBean.java", "stars": "1", "class": {"name": "BannerBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<DataBean>", "snippet": "    public List<DataBean> getData() {        return Data;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/BannerBean.java", "stars": "1", "class": {"name": "BannerBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setData", "params": ["List<DataBean>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setData(List<DataBean> Data) {        this.Data = Data;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/BannerBean.java", "stars": "1", "class": {"name": "BannerBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTitle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getTitle() {            return title;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/BannerBean.java", "stars": "1", "class": {"name": "DataBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setTitle", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setTitle(String title) {            this.title = title;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/BannerBean.java", "stars": "1", "class": {"name": "DataBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getLink", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getLink() {            return link;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/BannerBean.java", "stars": "1", "class": {"name": "DataBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setLink", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setLink(String link) {            this.link = link;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/BannerBean.java", "stars": "1", "class": {"name": "DataBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getImg_pc", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getImg_pc() {            return img_pc;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/BannerBean.java", "stars": "1", "class": {"name": "DataBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setImg_pc", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setImg_pc(String img_pc) {            this.img_pc = img_pc;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/BannerBean.java", "stars": "1", "class": {"name": "DataBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getImg_app", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getImg_app() {            return img_app;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/BannerBean.java", "stars": "1", "class": {"name": "DataBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setImg_app", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setImg_app(String img_app) {            this.img_app = img_app;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/http/response/BannerBean.java", "stars": "1", "class": {"name": "DataBean", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getId() {    return id;  }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/domain/RolePermission.java", "stars": "2", "class": {"name": "RolePermission", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setId(Integer id) {    this.id = id;  }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/domain/RolePermission.java", "stars": "2", "class": {"name": "RolePermission", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRoleId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getRoleId() {    return roleId;  }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/domain/RolePermission.java", "stars": "2", "class": {"name": "RolePermission", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRoleId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setRoleId(Integer roleId) {    this.roleId = roleId;  }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/domain/RolePermission.java", "stars": "2", "class": {"name": "RolePermission", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPermissionId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getPermissionId() {    return permissionId;  }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/domain/RolePermission.java", "stars": "2", "class": {"name": "RolePermission", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPermissionId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setPermissionId(Integer permissionId) {    this.permissionId = permissionId;  }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/domain/RolePermission.java", "stars": "2", "class": {"name": "RolePermission", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onMenuItemActionCollapse", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onMenuItemActionCollapse (android.view.MenuItem p0)\t{\t\treturn n_onMenuItemActionCollapse (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/view/MenuItemCompat_OnActionExpandListenerImplementor.java", "stars": "2", "class": {"name": "MenuItemCompat_OnActionExpandListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onMenuItemActionCollapse", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onMenuItemActionCollapse (android.view.MenuItem p0);\tpublic boolean onMenuItemActionExpand (android.view.MenuItem p0)\t{\t\treturn n_onMenuItemActionExpand (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/view/MenuItemCompat_OnActionExpandListenerImplementor.java", "stars": "2", "class": {"name": "MenuItemCompat_OnActionExpandListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onMenuItemActionExpand", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onMenuItemActionExpand (android.view.MenuItem p0)\t{\t\treturn n_onMenuItemActionExpand (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/view/MenuItemCompat_OnActionExpandListenerImplementor.java", "stars": "2", "class": {"name": "MenuItemCompat_OnActionExpandListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onMenuItemActionExpand", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onMenuItemActionExpand (android.view.MenuItem p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/view/MenuItemCompat_OnActionExpandListenerImplementor.java", "stars": "2", "class": {"name": "MenuItemCompat_OnActionExpandListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/view/MenuItemCompat_OnActionExpandListenerImplementor.java", "stars": "2", "class": {"name": "MenuItemCompat_OnActionExpandListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v4/view/MenuItemCompat_OnActionExpandListenerImplementor.java", "stars": "2", "class": {"name": "MenuItemCompat_OnActionExpandListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "send", "params": ["SampleMessage"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void send(SampleMessage message) {\t\tthis.kafkaTemplate.send(\"testTopic\", message);\t\tSystem.out.println(\"Sent sample message [\" + message + \"]\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-kafka/src/main/java/smoketest/kafka/Producer.java", "stars": "47572", "class": {"name": "Producer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\t// TODO Auto-generated method stub\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/package_/Import.java", "stars": "2", "class": {"name": "Import", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void onCreate(Bundle savedInstanceState) {\t\tsuper.onCreate(savedInstanceState);\t\tsetContentView(R.layout.main);\t\tlistView = (ListView) findViewById(R.id.list);\t\tlistView.setOnItemClickListener(this);\t\tCursor phones = getContentResolver().query(\t\t\t\tContactsContract.CommonDataKinds.Phone.CONTENT_URI, null, null,\t\t\t\tnull, null);\t\twhile (phones.moveToNext()) {\t\t\tString name = phones\t\t\t\t\t.getString(phones\t\t\t\t\t\t\t.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));\t\t\tString phoneNumber = phones\t\t\t\t\t.getString(phones\t\t\t\t\t\t\t.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));\t\t\tContactBean objContact = new ContactBean();\t\t\tobjContact.setName(name);\t\t\tobjContact.setPhoneNo(phoneNumber);\t\t\tlist.add(objContact);\t\t}\t\tphones.close();\t\tContanctAdapter objAdapter = new ContanctAdapter(\t\t\t\tContactListActivity.this, R.layout.alluser_row, list);\t\tlistView.setAdapter(objAdapter);\t\tif (null != list && list.size() != 0) {\t\t\tCollections.sort(list, new Comparator<ContactBean>() {\t\t\t\t@Override\t\t\t\tpublic int compare(ContactBean lhs, ContactBean rhs) {\t\t\t\t\treturn lhs.getName().compareTo(rhs.getName());\t\t\t\t}\t\t\t});\t\t\tAlertDialog alert = new AlertDialog.Builder(\t\t\t\t\tContactListActivity.this).create();\t\t\talert.setTitle(\"\");\t\t\talert.setMessage(list.size() + \" Contact Found!!!\");\t\t\talert.setButton(\"OK\", new DialogInterface.OnClickListener() {\t\t\t\t@Override\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\t\t\t\t\tdialog.dismiss();\t\t\t\t}\t\t\t});\t\t\talert.show();\t\t} else {\t\t\tshowToast(\"No Contact Found!!!\");\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android%20Contact%20ListView/src/com/samir/ContactListActivity.java", "stars": "74", "class": {"name": "ContactListActivity", "extends": "Activity", "implements": ["OnItemClickListener"], "modifiers": ["public"]}}, {"method_name": "showToast", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void showToast(String msg) {\t\tToast.makeText(this, msg, Toast.LENGTH_SHORT).show();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android%20Contact%20ListView/src/com/samir/ContactListActivity.java", "stars": "74", "class": {"name": "ContactListActivity", "extends": "Activity", "implements": ["OnItemClickListener"], "modifiers": ["public"]}}, {"method_name": "onItemClick", "params": ["AdapterView<?>", "View", "int", "long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onItemClick(AdapterView<?> listview, View v, int position,\t\t\tlong id) {\t\tContactBean bean = (ContactBean) listview.getItemAtPosition(position);\t\tshowCallDialog(bean.getName(), bean.getPhoneNo());\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android%20Contact%20ListView/src/com/samir/ContactListActivity.java", "stars": "74", "class": {"name": "ContactListActivity", "extends": "Activity", "implements": ["OnItemClickListener"], "modifiers": ["public"]}}, {"method_name": "showCallDialog", "params": ["String", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void showCallDialog(String name, final String phoneNo) {\t\tAlertDialog alert = new AlertDialog.Builder(ContactListActivity.this)\t\t\t\t.create();\t\talert.setTitle(\"Call?\");\t\talert.setMessage(\"Are you sure want to call \" + name + \" ?\");\t\talert.setButton(\"No\", new DialogInterface.OnClickListener() {\t\t\t@Override\t\t\tpublic void onClick(DialogInterface dialog, int which) {\t\t\t\tdialog.dismiss();\t\t\t}\t\t});\t\talert.setButton2(\"Yes\", new DialogInterface.OnClickListener() {\t\t\t@Override\t\t\tpublic void onClick(DialogInterface dialog, int which) {\t\t\t\tString phoneNumber = \"tel:\" + phoneNo;\t\t\t\tIntent intent = new Intent(Intent.ACTION_CALL, Uri\t\t\t\t\t\t.parse(phoneNumber));\t\t\t\tstartActivity(intent);\t\t\t}\t\t});\t\talert.show();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android%20Contact%20ListView/src/com/samir/ContactListActivity.java", "stars": "74", "class": {"name": "ContactListActivity", "extends": "Activity", "implements": ["OnItemClickListener"], "modifiers": ["public"]}}, {"method_name": "customer_initial_money", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "\tpublic double customer_initial_money() {\t\tdouble customer_money = 20;\t\treturn customer_money;\t}", "url": "https://raw.githubusercontent.com/suncloudsmoon/Random-Trading/master/Random%20Trading/src/Buying.java", "stars": "2", "class": {"name": "Buy", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "trader_initial_money", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "\tpublic double trader_initial_money() {\t\tdouble trader_money = 5;\t\treturn trader_money;\t}", "url": "https://raw.githubusercontent.com/suncloudsmoon/Random-Trading/master/Random%20Trading/src/Buying.java", "stars": "2", "class": {"name": "Buy", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] arg) {\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/hbcustomlibaray/customlib/src/com/example/customlib/Hbdemo.java", "stars": "74", "class": {"name": "Hbdemo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hbMethod", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void hbMethod() {\t\tSystem.out.println(\"hbMethod\");\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/hbcustomlibaray/customlib/src/com/example/customlib/Hbdemo.java", "stars": "74", "class": {"name": "Hbdemo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLayerType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getLayerType() {    return layerType;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/EntryDomainUrlVO.java", "stars": "2", "class": {"name": "EntryDomainUrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setLayerType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setLayerType(String layerType) {    this.layerType = layerType;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/EntryDomainUrlVO.java", "stars": "2", "class": {"name": "EntryDomainUrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getScheme", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getScheme() {    return scheme;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/EntryDomainUrlVO.java", "stars": "2", "class": {"name": "EntryDomainUrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setScheme", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setScheme(String scheme) {    this.scheme = scheme;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/EntryDomainUrlVO.java", "stars": "2", "class": {"name": "EntryDomainUrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getDomain", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getDomain() {    return domain;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/EntryDomainUrlVO.java", "stars": "2", "class": {"name": "EntryDomainUrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setDomain", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setDomain(String domain) {    this.domain = domain;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/EntryDomainUrlVO.java", "stars": "2", "class": {"name": "EntryDomainUrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getStatus() {    return status;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/EntryDomainUrlVO.java", "stars": "2", "class": {"name": "EntryDomainUrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setStatus", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setStatus(String status) {    this.status = status;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/EntryDomainUrlVO.java", "stars": "2", "class": {"name": "EntryDomainUrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getIsMonitor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getIsMonitor() {    return isMonitor;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/EntryDomainUrlVO.java", "stars": "2", "class": {"name": "EntryDomainUrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setIsMonitor", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setIsMonitor(String isMonitor) {    this.isMonitor = isMonitor;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/EntryDomainUrlVO.java", "stars": "2", "class": {"name": "EntryDomainUrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getIsWideResolve", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getIsWideResolve() {    return isWideResolve;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/EntryDomainUrlVO.java", "stars": "2", "class": {"name": "EntryDomainUrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setIsWideResolve", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setIsWideResolve(String isWideResolve) {    this.isWideResolve = isWideResolve;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/EntryDomainUrlVO.java", "stars": "2", "class": {"name": "EntryDomainUrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean equals(Object o) {    if (this == o) return true;    if (!(o instanceof EntryDomainUrlVO)) return false;    EntryDomainUrlVO that = (EntryDomainUrlVO) o;    return Objects.equals(getLayerType(), that.getLayerType()) &&            Objects.equals(getScheme(), that.getScheme()) &&            Objects.equals(getDomain(), that.getDomain()) &&            Objects.equals(getStatus(), that.getStatus()) &&            Objects.equals(getIsMonitor(), that.getIsMonitor()) &&            Objects.equals(getIsWideResolve(), that.getIsWideResolve());  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/EntryDomainUrlVO.java", "stars": "2", "class": {"name": "EntryDomainUrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int hashCode() {    return Objects.hash(getLayerType(), getScheme(), getDomain(), getStatus(), getIsMonitor(), getIsWideResolve());  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/EntryDomainUrlVO.java", "stars": "2", "class": {"name": "EntryDomainUrlVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getBindings", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "  public Map<String, Object> getBindings() {    return bindings;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/xmltags/DynamicContext.java", "stars": "15", "class": {"name": "DynamicContext", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "bind", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void bind(String name, Object value) {    bindings.put(name, value);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/xmltags/DynamicContext.java", "stars": "15", "class": {"name": "DynamicContext", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "appendSql", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void appendSql(String sql) {    sqlBuilder.add(sql);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/xmltags/DynamicContext.java", "stars": "15", "class": {"name": "DynamicContext", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSql", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getSql() {    return sqlBuilder.toString().trim();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/xmltags/DynamicContext.java", "stars": "15", "class": {"name": "DynamicContext", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUniqueNumber", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getUniqueNumber() {    return uniqueNumber++;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/xmltags/DynamicContext.java", "stars": "15", "class": {"name": "DynamicContext", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object get(Object key) {      String strKey = (String) key;      if (super.containsKey(strKey)) {        return super.get(strKey);      }      if (parameterMetaObject == null) {        return null;      }      if (fallbackParameterObject && !parameterMetaObject.hasGetter(strKey)) {        return parameterMetaObject.getOriginalObject();      } else {        // issue #61 do not modify the context when reading        return parameterMetaObject.getValue(strKey);      }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/xmltags/DynamicContext.java", "stars": "15", "class": {"name": "ContextMap", "extends": "HashMap", "implements": null, "modifiers": ["static"]}}, {"method_name": "getProperty", "params": ["Map", "Object", "Object"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object getProperty(Map context, Object target, Object name) {      Map map = (Map) target;      Object result = map.get(name);      if (map.containsKey(name) || result != null) {        return result;      }      Object parameterObject = map.get(PARAMETER_OBJECT_KEY);      if (parameterObject instanceof Map) {        return ((Map)parameterObject).get(name);      }      return null;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/xmltags/DynamicContext.java", "stars": "15", "class": {"name": "ContextAccessor", "extends": null, "implements": ["PropertyAccessor"], "modifiers": ["static"]}}, {"method_name": "setProperty", "params": ["Map", "Object", "Object", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setProperty(Map context, Object target, Object name, Object value) {      Map<Object, Object> map = (Map<Object, Object>) target;      map.put(name, value);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/xmltags/DynamicContext.java", "stars": "15", "class": {"name": "ContextAccessor", "extends": null, "implements": ["PropertyAccessor"], "modifiers": ["static"]}}, {"method_name": "getSourceAccessor", "params": ["OgnlContext", "Object", "Object"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getSourceAccessor(OgnlContext arg0, Object arg1, Object arg2) {      return null;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/xmltags/DynamicContext.java", "stars": "15", "class": {"name": "ContextAccessor", "extends": null, "implements": ["PropertyAccessor"], "modifiers": ["static"]}}, {"method_name": "getSourceSetter", "params": ["OgnlContext", "Object", "Object"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getSourceSetter(OgnlContext arg0, Object arg1, Object arg2) {      return null;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/xmltags/DynamicContext.java", "stars": "15", "class": {"name": "ContextAccessor", "extends": null, "implements": ["PropertyAccessor"], "modifiers": ["static"]}}, {"method_name": "uploadExecutableNode", "params": ["ExecutableNode", "Props"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void uploadExecutableNode(final ExecutableNode node, final Props inputProps)      throws ExecutorManagerException {    final String INSERT_EXECUTION_NODE = \"INSERT INTO execution_jobs \"        + \"(exec_id, project_id, version, flow_id, job_id, start_time, \"        + \"end_time, status, input_params, attempt) VALUES (?,?,?,?,?,?,?,?,?,?)\";    byte[] inputParam = null;    if (inputProps != null) {      try {        final String jsonString =            JSONUtils.toJSON(PropsUtils.toHierarchicalMap(inputProps));        logger.debug(\"the job's inputParam is : \" + jsonString);        inputParam = GZIPUtils.gzipString(jsonString, \"UTF-8\");      } catch (final Throwable e) {        logger.error(\"to json failed.\", e);      }    }    final ExecutableFlow flow = node.getExecutableFlow();    final String flowId = node.getParentFlow().getFlowPath();    logger.info(\"Uploading flowId \" + flowId);    try {      this.dbOperator.update(INSERT_EXECUTION_NODE, flow.getExecutionId(),          flow.getProjectId(), flow.getVersion(), flowId, node.getId(),          node.getStartTime(), node.getEndTime(), node.getStatus().getNumVal(),          inputParam, node.getAttempt());    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error writing job \" + node.getId(), e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionJobDao.java", "stars": "18", "class": {"name": "ExecutionJobDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateExecutableNode", "params": ["ExecutableNode"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void updateExecutableNode(final ExecutableNode node) throws ExecutorManagerException {    final String UPSERT_EXECUTION_NODE = \"UPDATE execution_jobs \"        + \"SET start_time=?, end_time=?, status=?, output_params=? \"        + \"WHERE exec_id=? AND flow_id=? AND job_id=? AND attempt=?\";    byte[] outputParam = null;    final Props outputProps = node.getOutputProps();    if (outputProps != null) {      try {        final String jsonString =            JSONUtils.toJSON(PropsUtils.toHierarchicalMap(outputProps));        logger.debug(\"the job's outputParam is : \" + jsonString);        outputParam = GZIPUtils.gzipString(jsonString, \"UTF-8\");      } catch (final Throwable e) {        logger.error(\"to json failed.\", e);      }    }    try {      this.dbOperator.update(UPSERT_EXECUTION_NODE, node.getStartTime(), node          .getEndTime(), node.getStatus().getNumVal(), outputParam, node          .getExecutableFlow().getExecutionId(), node.getParentFlow()          .getFlowPath(), node.getId(), node.getAttempt());    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error updating job \" + node.getId(), e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionJobDao.java", "stars": "18", "class": {"name": "ExecutionJobDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchJobInfoAttempts", "params": ["int", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutableJobInfo>", "snippet": "  public List<ExecutableJobInfo> fetchJobInfoAttempts(final int execId, final String jobId)      throws ExecutorManagerException {    try {      final List<ExecutableJobInfo> info = this.dbOperator.query(          FetchExecutableJobHandler.FETCH_EXECUTABLE_NODE_ATTEMPTS,          new FetchExecutableJobHandler(), execId, jobId);      if (info == null || info.isEmpty()) {        return null;      } else {        return info;      }    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error querying job info \" + jobId, e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionJobDao.java", "stars": "18", "class": {"name": "ExecutionJobDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchJobInfo", "params": ["int", "String", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "ExecutableJobInfo", "snippet": "  public ExecutableJobInfo fetchJobInfo(final int execId, final String jobId, final int attempts)      throws ExecutorManagerException {    try {      final List<ExecutableJobInfo> info =          this.dbOperator.query(FetchExecutableJobHandler.FETCH_EXECUTABLE_NODE,              new FetchExecutableJobHandler(), execId, jobId, attempts);      if (info == null || info.isEmpty()) {        return null;      } else {        return info.get(0);      }    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error querying job info \" + jobId, e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionJobDao.java", "stars": "18", "class": {"name": "ExecutionJobDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchExecutionJobInputProps", "params": ["int", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "Props", "snippet": "  public Props fetchExecutionJobInputProps(final int execId, final String jobId)      throws ExecutorManagerException {    try {      final Pair<Props, Props> props = this.dbOperator.query(          FetchExecutableJobPropsHandler.FETCH_INPUT_PARAM_EXECUTABLE_NODE,          new FetchExecutableJobPropsHandler(), execId, jobId);      return props.getFirst();    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error querying job params \" + execId          + \" \" + jobId, e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionJobDao.java", "stars": "18", "class": {"name": "ExecutionJobDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchExecutionJobOutputProps", "params": ["int", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "Props", "snippet": "  public Props fetchExecutionJobOutputProps(final int execId, final String jobId)      throws ExecutorManagerException {    try {      final Pair<Props, Props> props = this.dbOperator.query(          FetchExecutableJobPropsHandler.FETCH_OUTPUT_PARAM_EXECUTABLE_NODE,          new FetchExecutableJobPropsHandler(), execId, jobId);      return props.getFirst();    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error querying job params \" + execId          + \" \" + jobId, e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionJobDao.java", "stars": "18", "class": {"name": "ExecutionJobDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchExecutionJobProps", "params": ["int", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "Pair<Props,Props>", "snippet": "  public Pair<Props, Props> fetchExecutionJobProps(final int execId, final String jobId)      throws ExecutorManagerException {    try {      return this.dbOperator.query(          FetchExecutableJobPropsHandler.FETCH_INPUT_OUTPUT_PARAM_EXECUTABLE_NODE,          new FetchExecutableJobPropsHandler(), execId, jobId);    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error querying job params \" + execId          + \" \" + jobId, e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionJobDao.java", "stars": "18", "class": {"name": "ExecutionJobDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchJobHistory", "params": ["int", "String", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutableJobInfo>", "snippet": "  public List<ExecutableJobInfo> fetchJobHistory(final int projectId,      final String jobId,      final int skip,      final int size) throws ExecutorManagerException {    try {      final List<ExecutableJobInfo> info =          this.dbOperator.query(FetchExecutableJobHandler.FETCH_PROJECT_EXECUTABLE_NODE,              new FetchExecutableJobHandler(), projectId, jobId, skip, size);      if (info == null || info.isEmpty()) {        return null;      } else {        return info;      }    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error querying job info \" + jobId, e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionJobDao.java", "stars": "18", "class": {"name": "ExecutionJobDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchJobAllHistory", "params": ["int", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutableJobInfo>", "snippet": "  public List<ExecutableJobInfo> fetchJobAllHistory(final int projectId, final String jobId)      throws ExecutorManagerException {    try {      final List<ExecutableJobInfo> info =          this.dbOperator.query(FetchExecutableJobHandler.FETCH_PROJECT_EXECUTABLE_NODE_ALL,              new FetchExecutableJobHandler(), projectId, jobId);      if (info == null || info.isEmpty()) {        return null;      } else {        return info;      }    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error querying job info \" + jobId, e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionJobDao.java", "stars": "18", "class": {"name": "ExecutionJobDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchAttachments", "params": ["int", "String", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<Object>", "snippet": "  public List<Object> fetchAttachments(final int execId, final String jobId, final int attempt)      throws ExecutorManagerException {    try {      final String attachments = this.dbOperator.query(          FetchExecutableJobAttachmentsHandler.FETCH_ATTACHMENTS_EXECUTABLE_NODE,          new FetchExecutableJobAttachmentsHandler(), execId, jobId);      if (attachments == null) {        return null;      } else {        return (List<Object>) JSONUtils.parseJSONFromString(attachments);      }    } catch (final IOException e) {      throw new ExecutorManagerException(          \"Error converting job attachments to JSON \" + jobId, e);    } catch (final SQLException e) {      throw new ExecutorManagerException(          \"Error query job attachments \" + jobId, e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionJobDao.java", "stars": "18", "class": {"name": "ExecutionJobDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "uploadAttachmentFile", "params": ["ExecutableNode", "File"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void uploadAttachmentFile(final ExecutableNode node, final File file)      throws ExecutorManagerException {    final String UPDATE_EXECUTION_NODE_ATTACHMENTS =        \"UPDATE execution_jobs \" + \"SET attachments=? \"            + \"WHERE exec_id=? AND flow_id=? AND job_id=? AND attempt=?\";    try {      final String jsonString = FileUtils.readFileToString(file);      final byte[] attachments = GZIPUtils.gzipString(jsonString, \"UTF-8\");      this.dbOperator.update(UPDATE_EXECUTION_NODE_ATTACHMENTS, attachments,          node.getExecutableFlow().getExecutionId(), node.getParentFlow()              .getNestedId(), node.getId(), node.getAttempt());    } catch (final IOException | SQLException e) {      throw new ExecutorManagerException(\"Error uploading attachments.\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionJobDao.java", "stars": "18", "class": {"name": "ExecutionJobDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<ExecutableJobInfo>", "snippet": "    public List<ExecutableJobInfo> handle(final ResultSet rs) throws SQLException {      if (!rs.next()) {        return Collections.<ExecutableJobInfo>emptyList();      }      final List<ExecutableJobInfo> execNodes = new ArrayList<>();      do {        final int execId = rs.getInt(1);        final int projectId = rs.getInt(2);        final int version = rs.getInt(3);        final String flowId = rs.getString(4);        final String jobId = rs.getString(5);        final long startTime = rs.getLong(6);        final long endTime = rs.getLong(7);        final Status status = Status.fromInteger(rs.getInt(8));        final int attempt = rs.getInt(9);        final ExecutableJobInfo info =            new ExecutableJobInfo(execId, projectId, version, flowId, jobId,                startTime, endTime, status, attempt);        execNodes.add(info);      } while (rs.next());      return execNodes;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionJobDao.java", "stars": "18", "class": {"name": "FetchExecutableJobHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["private", "static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Pair<Props,Props>", "snippet": "    public Pair<Props, Props> handle(final ResultSet rs) throws SQLException {      if (!rs.next()) {        return new Pair<>(null, null);      }      if (rs.getMetaData().getColumnCount() > 1) {        final byte[] input = rs.getBytes(1);        final byte[] output = rs.getBytes(2);        Props inputProps = null;        Props outputProps = null;        try {          if (input != null) {            final String jsonInputString = GZIPUtils.unGzipString(input, \"UTF-8\");            inputProps =                PropsUtils.fromHierarchicalMap((Map<String, Object>) JSONUtils                    .parseJSONFromString(jsonInputString));          }          if (output != null) {            final String jsonOutputString = GZIPUtils.unGzipString(output, \"UTF-8\");            outputProps =                PropsUtils.fromHierarchicalMap((Map<String, Object>) JSONUtils                    .parseJSONFromString(jsonOutputString));          }        } catch (final IOException e) {          throw new SQLException(\"Error decoding param data\", e);        }        return new Pair<>(inputProps, outputProps);      } else {        final byte[] params = rs.getBytes(1);        Props props = null;        try {          if (params != null) {            final String jsonProps = GZIPUtils.unGzipString(params, \"UTF-8\");            props =                PropsUtils.fromHierarchicalMap((Map<String, Object>) JSONUtils                    .parseJSONFromString(jsonProps));          }        } catch (final IOException e) {          throw new SQLException(\"Error decoding param data\", e);        }        return new Pair<>(props, null);      }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionJobDao.java", "stars": "18", "class": {"name": "FetchExecutableJobPropsHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["private", "static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "String", "snippet": "    public String handle(final ResultSet rs) throws SQLException {      String attachmentsJson = null;      if (rs.next()) {        try {          final byte[] attachments = rs.getBytes(1);          if (attachments != null) {            attachmentsJson = GZIPUtils.unGzipString(attachments, \"UTF-8\");          }        } catch (final IOException e) {          throw new SQLException(\"Error decoding job attachments\", e);        }      }      return attachmentsJson;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/executor/ExecutionJobDao.java", "stars": "18", "class": {"name": "FetchExecutableJobAttachmentsHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["private", "static"]}}, {"method_name": "initialize", "params": ["URL", "ResourceBundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initialize(URL arg0, ResourceBundle arg1) {\t\tinputID.setOnAction(event -> logintodb(event));\t\tinputPW.setOnAction(event -> logintodb(event));\t\t\t\tinputID.setOnMouseClicked(event -> errorMsg.setText(\"\"));\t\tinputPW.setOnMouseClicked(event -> errorMsg.setText(\"\"));\t\t\t\tsigninbutton.setOnMouseClicked(event -> signinclick(event));\t\tsigninbutton.setOnMouseEntered(event -> underlineON(event));\t\tsigninbutton.setOnMouseExited(event -> underlineOFF(event));\t\t\t\tidpwfoundbutton.setOnMouseClicked(event -> idpwfoundclick(event));\t\tidpwfoundbutton.setOnMouseEntered(event -> underlineON(event));\t\tidpwfoundbutton.setOnMouseExited(event -> underlineOFF(event));\t\t\t\tif (!thisuserID.equals(\"\"))\t\t\tinputID.setText(thisuserID);\t}", "url": "https://raw.githubusercontent.com/lilllung09/OwlWordList/master/src/application/RootController.java", "stars": "2", "class": {"name": "RootController", "extends": null, "implements": ["Initializable"], "modifiers": ["public"]}}, {"method_name": "logintodb", "params": ["ActionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void logintodb(ActionEvent event) {\t\terrorMsg.setText(\"\");\t\tif (!inputID.getText().toString().equals(\"\")) {\t\t\tif (!inputPW.getText().toString().equals(\"\")) {\t\t\t\tConnection conn = null;\t\t\t\tPreparedStatement pstm = null;\t\t\t\tResultSet rs = null;\t\t\t        \t\t\t\ttry {\t\t\t\t\tString quary = \"SELECT * FROM AccountInfo WHERE UserID='\"+ inputID.getText() + \"' AND UserPW='\"+ inputPW.getText() + \"'\";\t\t\t\t\tconn = DBConnection.getConnection();\t\t\t\t\tpstm = conn.prepareStatement(quary);\t\t\t\t\trs = pstm.executeQuery();\t\t\t\t\tString userID = \"\";\t\t\t\t\t\t\t\t\t\twhile(rs.next()){\t\t\t\t\t\tuserID = rs.getString(\"UserID\");\t\t\t            System.out.println(userID);\t\t\t\t\t}\t\t\t\t\tif (inputID.getText().toString().equals(userID)) {\t\t\t\t\t\tthisuserID = userID;\t\t\t\t\t\tfinal Node source = (Node) event.getSource();\t\t\t\t\t\tfinal Stage stage = (Stage) source.getScene().getWindow();\t\t\t\t\t\tstage.close();\t\t\t\t\t\tParent root;\t\t\t\t\t\ttry {\t\t\t\t\t\t\troot = FXMLLoader.load(getClass().getResource(\"MenuSelect.fxml\"));\t\t\t\t\t\t\tScene scene = new Scene(root);\t\t\t\t\t\t\tStage primaryStage = new Stage();\t\t\t\t\t\t\tprimaryStage.setTitle(\"\uba54\ub274\uc120\ud0dd\");\t\t\t\t\t\t\tprimaryStage.setResizable(true);\t\t\t\t\t\t\tprimaryStage.setScene(scene);\t\t\t\t\t\t\tprimaryStage.show();\t\t\t\t\t\t\t\t\t\t\t\t\t} catch (IOException e) {}\t\t\t\t\t}\t\t\t\t\telse {\t\t\t\t\t\terrorMsg.setText(\"ID \ub610\ub294 PW\ub97c \ud655\uc778\ud574\uc8fc\uc138\uc694.\");\t\t\t\t\t}\t\t\t            \t\t\t\t} catch (SQLException sqle) {\t\t\t\t\tSystem.out.println(\"SELECT\ubb38\uc5d0\uc11c \uc608\uc678 \ubc1c\uc0dd\");\t\t\t\t\tsqle.printStackTrace();\t\t\t            \t\t\t\t} finally{\t\t\t\t\t// DB \uc5f0\uacb0\uc744 \uc885\ub8cc\ud55c\ub2e4.\t\t\t\t\ttry{\t\t\t\t\t\tSystem.out.println(\"Database \uc5f0\uacb0\uc744 \uc885\ub8cc\ud569\ub2c8\ub2e4.\");\t\t\t\t\t\tif ( rs != null ){rs.close();}   \t\t\t\t\t\tif ( pstm != null ){pstm.close();}   \t\t\t\t\t\tif ( conn != null ){conn.close(); }\t\t\t\t\t} catch(Exception e){throw new RuntimeException(e.getMessage());}\t\t\t\t}\t\t\t}\t\t\telse {\t\t\t\terrorMsg.setText(\"ID \ub610\ub294 PW\ub97c \ud655\uc778\ud574\uc8fc\uc138\uc694.\");\t\t\t}\t\t}\t\telse {\t\t\terrorMsg.setText(\"ID \ub610\ub294 PW\ub97c \ud655\uc778\ud574\uc8fc\uc138\uc694.\");\t\t}\t\t\t\t\t}", "url": "https://raw.githubusercontent.com/lilllung09/OwlWordList/master/src/application/RootController.java", "stars": "2", "class": {"name": "RootController", "extends": null, "implements": ["Initializable"], "modifiers": ["public"]}}, {"method_name": "signinclick", "params": ["MouseEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void signinclick(MouseEvent event) {\t\tthis.newScene(event, \"Signin\", \"\ud68c\uc6d0\uac00\uc785\");\t\t\t}", "url": "https://raw.githubusercontent.com/lilllung09/OwlWordList/master/src/application/RootController.java", "stars": "2", "class": {"name": "RootController", "extends": null, "implements": ["Initializable"], "modifiers": ["public"]}}, {"method_name": "idpwfoundclick", "params": ["MouseEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void idpwfoundclick(MouseEvent event) {\t\tthis.newScene(event, \"FindIDnPW\", \"ID \ub610\ub294 PW \ucc3e\uae30\");\t}", "url": "https://raw.githubusercontent.com/lilllung09/OwlWordList/master/src/application/RootController.java", "stars": "2", "class": {"name": "RootController", "extends": null, "implements": ["Initializable"], "modifiers": ["public"]}}, {"method_name": "underlineON", "params": ["MouseEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void underlineON(MouseEvent event) {\t\tLabel label = (Label) event.getSource();\t\tlabel.setUnderline(true);\t\t\t}", "url": "https://raw.githubusercontent.com/lilllung09/OwlWordList/master/src/application/RootController.java", "stars": "2", "class": {"name": "RootController", "extends": null, "implements": ["Initializable"], "modifiers": ["public"]}}, {"method_name": "underlineOFF", "params": ["MouseEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void underlineOFF(MouseEvent event) {\t\tLabel label = (Label) event.getSource();\t\tlabel.setUnderline(false);\t}", "url": "https://raw.githubusercontent.com/lilllung09/OwlWordList/master/src/application/RootController.java", "stars": "2", "class": {"name": "RootController", "extends": null, "implements": ["Initializable"], "modifiers": ["public"]}}, {"method_name": "newScene", "params": ["Event", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void newScene(Event event, String fxml, String title) {\t\tfinal Node source = (Node) event.getSource();\t\tfinal Stage stage = (Stage) source.getScene().getWindow();\t\tstage.close();\t\tParent root;\t\ttry {\t\t\troot = FXMLLoader.load(getClass().getResource(fxml + \".fxml\"));\t\t\tScene scene = new Scene(root);\t\t\tStage primaryStage = new Stage();\t\t\tprimaryStage.setTitle(title);\t\t\tprimaryStage.setResizable(true);\t\t\tprimaryStage.setScene(scene);\t\t\tprimaryStage.show();\t\t\t\t\t} catch (IOException e) {}\t\t\t}", "url": "https://raw.githubusercontent.com/lilllung09/OwlWordList/master/src/application/RootController.java", "stars": "2", "class": {"name": "RootController", "extends": null, "implements": ["Initializable"], "modifiers": ["public"]}}, {"method_name": "getDefault", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "KeventBus", "snippet": "    public static KeventBus getDefault() {        if (defaultInstance == null) {            synchronized (KeventBus.class) {                if (defaultInstance == null) {                    defaultInstance = new KeventBus();                }            }        }        return defaultInstance;    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/KeventBus.java", "stars": "7", "class": {"name": "KeventBus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "builder", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "EventBusBuilder", "snippet": "    public static EventBusBuilder builder() {        return new EventBusBuilder();    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/KeventBus.java", "stars": "7", "class": {"name": "KeventBus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clearCaches", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void clearCaches() {        SubscriberMethodFinder.clearCaches();        eventTypesCache.clear();    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/KeventBus.java", "stars": "7", "class": {"name": "KeventBus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "register", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void register(Object subscriber) {        Class<?> subscriberClass = subscriber.getClass();        List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);        synchronized (this) {            for (SubscriberMethod subscriberMethod : subscriberMethods) {                subscribe(subscriber, subscriberMethod);            }        }    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/KeventBus.java", "stars": "7", "class": {"name": "KeventBus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "subscribe", "params": ["Object", "SubscriberMethod"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {        Class<?> eventType = subscriberMethod.eventType;        Subscription newSubscription = new Subscription(subscriber, subscriberMethod);        CopyOnWriteArrayList<Subscription> subscriptions = subscriptionsByEventType.get(eventType);        if (subscriptions == null) {            subscriptions = new CopyOnWriteArrayList<>();            subscriptionsByEventType.put(subscriberMethod.event, subscriptions);        } else {            if (subscriptions.contains(newSubscription)) {                throw new EventBusException(\"Subscriber \" + subscriber.getClass() + \" already registered to event \"                        + eventType);            }        }        int size = subscriptions.size();        for (int i = 0; i <= size; i++) {            if (i == size || subscriberMethod.priority > subscriptions.get(i).subscriberMethod.priority) {                subscriptions.add(i, newSubscription);                break;            }        }        List<Class<?>> subscribedEvents = typesBySubscriber.get(subscriber);        if (subscribedEvents == null) {            subscribedEvents = new ArrayList<>();            typesBySubscriber.put(subscriber, subscribedEvents);        }        subscribedEvents.add(eventType);        if (subscriberMethod.sticky) {            if (eventInheritance) {                // Existing sticky events of all subclasses of eventType have to be considered.                // Note: Iterating over all events may be inefficient with lots of sticky events,                // thus data structure should be changed to allow a more efficient lookup                // (e.g. an additional map storing sub classes of super classes: Class -> List<Class>).                Set<Map.Entry<Class<?>, Object>> entries = stickyEvents.entrySet();                for (Map.Entry<Class<?>, Object> entry : entries) {                    Class<?> candidateEventType = entry.getKey();                    if (eventType.isAssignableFrom(candidateEventType)) {                        Object stickyEvent = entry.getValue();                        checkPostStickyEventToSubscription(newSubscription, stickyEvent);                    }                }            } else {                Object stickyEvent = stickyEvents.get(eventType);                checkPostStickyEventToSubscription(newSubscription, stickyEvent);            }        }    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/KeventBus.java", "stars": "7", "class": {"name": "KeventBus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkPostStickyEventToSubscription", "params": ["Subscription", "Object"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void checkPostStickyEventToSubscription(Subscription newSubscription, Object stickyEvent) {        if (stickyEvent != null) {            // If the subscriber is trying to abort the event, it will fail (event is not tracked in posting state)            // --> Strange corner case, which we don't take care of here.            postToSubscription(newSubscription, stickyEvent, isMainThread());        }    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/KeventBus.java", "stars": "7", "class": {"name": "KeventBus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isMainThread", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isMainThread() {        return mainThreadSupport != null ? mainThreadSupport.isMainThread() : true;    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/KeventBus.java", "stars": "7", "class": {"name": "KeventBus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isRegistered", "params": ["Object"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "boolean", "snippet": "    public synchronized boolean isRegistered(Object subscriber) {        return typesBySubscriber.containsKey(subscriber);    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/KeventBus.java", "stars": "7", "class": {"name": "KeventBus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "unsubscribeByEventType", "params": ["Object", "Class<?>", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void unsubscribeByEventType(Object subscriber, Class<?> eventType,int type) {        List<Subscription> subscriptions = subscriptionsByEventType.get(eventType);        if (subscriptions != null) {            int size = subscriptions.size();            for (int i = 0; i < size; i++) {                Subscription subscription = subscriptions.get(i);                if (subscription.subscriber == subscriber) {                    subscription.active = false;                    if (type==1){                        subscriptions.remove(i);                        i--;                        size--;                    }                }            }        }    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/KeventBus.java", "stars": "7", "class": {"name": "KeventBus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "unregister", "params": ["Object"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void unregister(Object subscriber) {        List<Class<?>> subscribedTypes = typesBySubscriber.get(subscriber);        if (subscribedTypes != null) {            for (Class<?> eventType : subscribedTypes) {                unsubscribeByEventType(subscriber, eventType,1);            }            typesBySubscriber.remove(subscriber);        } else {            logger.log(Level.WARNING, \"Subscriber to unregister was not registered before: \" + subscriber.getClass());        }    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/KeventBus.java", "stars": "7", "class": {"name": "KeventBus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "freezeSubscribeEvent", "params": ["String"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void freezeSubscribeEvent(String event){        CopyOnWriteArrayList<Subscription> subscriptions;        synchronized (this) {            subscriptions = subscriptionsByEventType.get(event);        }        if (subscriptions != null && !subscriptions.isEmpty()) {            for (Subscription subscription : subscriptions) {                 if (subscription.subscriberMethod.event.equals(event)){                     subscription.active = false;                 }            }        }    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/KeventBus.java", "stars": "7", "class": {"name": "KeventBus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "activeEvent", "params": ["String"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void activeEvent(String event){        CopyOnWriteArrayList<Subscription> subscriptions;        synchronized (this) {            subscriptions = subscriptionsByEventType.get(event);        }        if (subscriptions != null && !subscriptions.isEmpty()) {            for (Subscription subscription : subscriptions) {                if (subscription.subscriberMethod.event.equals(event)){                    subscription.active = true;                }            }        }    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/KeventBus.java", "stars": "7", "class": {"name": "KeventBus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "activeSubscribeByEventType", "params": ["Object", "Class<?>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void activeSubscribeByEventType(Object subscriber, Class<?> eventType) {        List<Subscription> subscriptions = subscriptionsByEventType.get(eventType);        if (subscriptions != null) {            int size = subscriptions.size();            for (int i = 0; i < size; i++) {                Subscription subscription = subscriptions.get(i);                if (subscription.subscriber == subscriber) {                    subscription.active = true;                }            }        }    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/KeventBus.java", "stars": "7", "class": {"name": "KeventBus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "post", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void post(String event){        post(new EventMessage(null,event));    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/KeventBus.java", "stars": "7", "class": {"name": "KeventBus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "post", "params": ["EventMessage"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void post(EventMessage eventMsg) {        PostingThreadState postingState = currentPostingThreadState.get();        List<EventMessage> eventQueue = postingState.eventQueue;        eventQueue.add(eventMsg);        if (!postingState.isPosting) {            postingState.isMainThread = isMainThread();            postingState.isPosting = true;            if (postingState.canceled) {                throw new EventBusException(\"Internal error. Abort state was not reset\");            }            try {                while (!eventQueue.isEmpty()) {                    postSingleEvent(eventQueue.remove(0), postingState);                }            } finally {                postingState.isPosting = false;                postingState.isMainThread = false;            }        }    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/KeventBus.java", "stars": "7", "class": {"name": "KeventBus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "cancelEventDelivery", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void cancelEventDelivery(Object event) {        PostingThreadState postingState = currentPostingThreadState.get();        if (!postingState.isPosting) {            throw new EventBusException(                    \"This method may only be called from inside event handling methods on the posting thread\");        } else if (event == null) {            throw new EventBusException(\"Event may not be null\");        } else if (postingState.event != event) {            throw new EventBusException(\"Only the currently handled event may be aborted\");        } else if (postingState.subscription.subscriberMethod.threadMode != ThreadMode.POSTING) {            throw new EventBusException(\" event handlers may only abort the incoming event\");        }        postingState.canceled = true;    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/KeventBus.java", "stars": "7", "class": {"name": "KeventBus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "postSticky", "params": ["EventMessage"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void postSticky(EventMessage event) {        synchronized (stickyEvents) {            stickyEvents.put(event.getClass(), event);        }        // Should be posted after it is putted, in case the subscriber wants to remove immediately        post(event);    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/KeventBus.java", "stars": "7", "class": {"name": "KeventBus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStickyEvent", "params": ["Class<T>"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public <T> T getStickyEvent(Class<T> eventType) {        synchronized (stickyEvents) {            return eventType.cast(stickyEvents.get(eventType));        }    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/KeventBus.java", "stars": "7", "class": {"name": "KeventBus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeStickyEvent", "params": ["Class<T>"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public <T> T removeStickyEvent(Class<T> eventType) {        synchronized (stickyEvents) {            return eventType.cast(stickyEvents.remove(eventType));        }    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/KeventBus.java", "stars": "7", "class": {"name": "KeventBus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeStickyEvent", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean removeStickyEvent(Object event) {        synchronized (stickyEvents) {            Class<?> eventType = event.getClass();            Object existingEvent = stickyEvents.get(eventType);            if (event.equals(existingEvent)) {                stickyEvents.remove(eventType);                return true;            } else {                return false;            }        }    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/KeventBus.java", "stars": "7", "class": {"name": "KeventBus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeAllStickyEvents", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeAllStickyEvents() {        synchronized (stickyEvents) {            stickyEvents.clear();        }    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/KeventBus.java", "stars": "7", "class": {"name": "KeventBus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hasSubscriberForEvent", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean hasSubscriberForEvent(String event) {        List<Class<?>> eventTypes = lookupAllEventTypes(event);        if (eventTypes != null) {            int countTypes = eventTypes.size();            for (int h = 0; h < countTypes; h++) {                Class<?> clazz = eventTypes.get(h);                CopyOnWriteArrayList<Subscription> subscriptions;                synchronized (this) {                    subscriptions = subscriptionsByEventType.get(clazz);                }                if (subscriptions != null && !subscriptions.isEmpty()) {                    return true;                }            }        }        return false;    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/KeventBus.java", "stars": "7", "class": {"name": "KeventBus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "postSingleEvent", "params": ["EventMessage", "PostingThreadState"], "throws": ["Error"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void postSingleEvent(EventMessage eventMsg, PostingThreadState postingState) throws Error {        String event = eventMsg.getEvent();        Class<?> eventClass = event.getClass();        boolean subscriptionFound = false;        subscriptionFound |= postSingleEventForEventType(event, eventMsg, postingState, eventClass);//        if (eventInheritance) {//            List<Class<?>> eventTypes = lookupAllEventTypes(eventClass);//            int countTypes = eventTypes.size();//            for (int h = 0; h < countTypes; h++) {//                Class<?> clazz = eventTypes.get(h);//                subscriptionFound |= postSingleEventForEventType(from, event, postingState, clazz);//            }//        } else {//            subscriptionFound = postSingleEventForEventType(from, event, postingState, eventClass);//        }        if (!subscriptionFound) {            if (logNoSubscriberMessages) {                logger.log(Level.FINE, \"No subscribers registered for event \" + eventClass);            }            if (sendNoSubscriberEvent && eventClass != NoSubscriberEvent.class &&                    eventClass != SubscriberExceptionEvent.class) {//                post(new NoSubscriberEvent(this, eventMsg));                EventMessage errorMessage = new EventMessage(null,ExceptionKey.NOSUBSCRIBER);                errorMessage.setEventExeption(new EventMessage.PostEventExeption(-2,\"No subscribers registered for event \" + eventClass));            }        }    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/KeventBus.java", "stars": "7", "class": {"name": "KeventBus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "postSingleEventTest", "params": ["String", "EventMessage", "PostingThreadState"], "throws": ["Error"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void postSingleEventTest(String event ,EventMessage eventMsg, PostingThreadState postingState) throws Error {        Class<?> eventClass = eventMsg.getClass();        boolean subscriptionFound = false;        if (eventInheritance) {            List<Class<?>> eventTypes = lookupAllEventTypes(event);            int countTypes = eventTypes.size();            for (int h = 0; h < countTypes; h++) {                Class<?> clazz = eventTypes.get(h);                subscriptionFound |= postSingleEventForEventType(event,eventMsg, postingState, clazz);            }        } else {            subscriptionFound = postSingleEventForEventType(event,eventMsg, postingState, eventClass);        }        if (!subscriptionFound) {            if (logNoSubscriberMessages) {                logger.log(Level.FINE, \"No subscribers registered for event \" + eventClass);            }            if (sendNoSubscriberEvent && eventClass != NoSubscriberEvent.class &&                    eventClass != SubscriberExceptionEvent.class) {//                post(new NoSubscriberEvent(this, event));                EventMessage errorMessage = new EventMessage(null,ExceptionKey.NOSUBSCRIBER);                errorMessage.setEventExeption(new EventMessage.PostEventExeption(-2,\"No subscribers registered for event \" + eventClass));            }        }    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/KeventBus.java", "stars": "7", "class": {"name": "KeventBus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "postSingleEventForEventType", "params": ["String", "EventMessage", "PostingThreadState", "Class<?>"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean postSingleEventForEventType(String event, EventMessage eventMsg, PostingThreadState postingState, Class<?> eventClass) {        CopyOnWriteArrayList<Subscription> subscriptions;        synchronized (this) {            subscriptions = subscriptionsByEventType.get(event);        }        if (subscriptions != null && !subscriptions.isEmpty()) {            for (Subscription subscription : subscriptions) {                postingState.event = eventMsg;                postingState.subscription = subscription;                boolean aborted = false;                if (event.equals( subscription.subscriberMethod.event) && eventMsg.getClass().equals(subscription.subscriberMethod.eventType)){                    try {                        postToSubscription(subscription, eventMsg, postingState.isMainThread);                        aborted = postingState.canceled;                    } finally {                        postingState.event = null;                        postingState.subscription = null;                        postingState.canceled = false;                    }                    if (aborted) {                        break;                    }                }            }            return true;        }        return false;    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/KeventBus.java", "stars": "7", "class": {"name": "KeventBus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "postToSubscription", "params": ["Subscription", "Object", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void postToSubscription(Subscription subscription, Object event, boolean isMainThread) {        switch (subscription.subscriberMethod.threadMode) {            case POSTING:                invokeSubscriber(subscription, (EventMessage) event);                break;            case MAIN:                if (isMainThread) {                    invokeSubscriber(subscription, (EventMessage) event);                } else {                    mainThreadPoster.enqueue(subscription, event);                }                break;            case MAIN_ORDERED:                if (mainThreadPoster != null) {                    mainThreadPoster.enqueue(subscription, event);                } else {                    // temporary: technically not correct as poster not decoupled from subscriber                    invokeSubscriber(subscription, (EventMessage) event);                }                break;            case BACKGROUND:                if (isMainThread) {                    backgroundPoster.enqueue(subscription, event);                } else {                    invokeSubscriber(subscription, (EventMessage) event);                }                break;            case ASYNC:                asyncPoster.enqueue(subscription, event);                break;            default:                throw new IllegalStateException(\"Unknown thread mode: \" + subscription.subscriberMethod.threadMode);        }    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/KeventBus.java", "stars": "7", "class": {"name": "KeventBus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "lookupAllEventTypes", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "List<Class>", "snippet": "    private static List<Class<?>> lookupAllEventTypes(String event) {        synchronized (eventTypesCache) {            List<Class<?>> eventTypes = eventTypesCache.get(event);            if (eventTypes == null) {//                eventTypes = new ArrayList<>();//                Class<?> clazz = eventClass;//                while (clazz != null) {//                    eventTypes.add(clazz);//                    addInterfaces(eventTypes, clazz.getInterfaces());//                    clazz = clazz.getSuperclass();//                }                eventTypesCache.put(event, eventTypes);            }            return eventTypes;        }    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/KeventBus.java", "stars": "7", "class": {"name": "KeventBus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addInterfaces", "params": ["List<Class>", "Class<?>"], "throws": null, "modifiers": ["static"], "return_type": "void", "snippet": "    static void addInterfaces(List<Class<?>> eventTypes, Class<?>[] interfaces) {        for (Class<?> interfaceClass : interfaces) {            if (!eventTypes.contains(interfaceClass)) {                eventTypes.add(interfaceClass);                addInterfaces(eventTypes, interfaceClass.getInterfaces());            }        }    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/KeventBus.java", "stars": "7", "class": {"name": "KeventBus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "invokeSubscriber", "params": ["PendingPost"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void invokeSubscriber(PendingPost pendingPost) {        Object event = pendingPost.event;        Subscription subscription = pendingPost.subscription;        PendingPost.releasePendingPost(pendingPost);        if (subscription.active) {            invokeSubscriber(subscription, (EventMessage) event);        }    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/KeventBus.java", "stars": "7", "class": {"name": "KeventBus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "invokeSubscriber", "params": ["Subscription", "EventMessage"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void invokeSubscriber(Subscription subscription, EventMessage event) {        try {            if (!subscription.active){                return;            }            Object retrunData = subscription.subscriberMethod.method.invoke(subscription.subscriber, event);            if ( subscription.subscriberMethod.enback && event.getCallBack() != null){                event.getCallBack().onCall(retrunData,event.getArg());            }        } catch (InvocationTargetException e) {            handleSubscriberException(subscription, event, e.getCause());        } catch (IllegalAccessException e) {            throw new IllegalStateException(\"Unexpected exception\", e);        }    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/KeventBus.java", "stars": "7", "class": {"name": "KeventBus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handleSubscriberException", "params": ["Subscription", "Object", "Throwable"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void handleSubscriberException(Subscription subscription, Object event, Throwable cause) {        if (event instanceof SubscriberExceptionEvent) {            if (logSubscriberExceptions) {                // Don't send another SubscriberExceptionEvent to avoid infinite event recursion, just log                logger.log(Level.SEVERE, \"SubscriberExceptionEvent subscriber \" + subscription.subscriber.getClass()                        + \" threw an exception\", cause);                SubscriberExceptionEvent exEvent = (SubscriberExceptionEvent) event;                logger.log(Level.SEVERE, \"Initial event \" + exEvent.causingEvent + \" caused exception in \"                        + exEvent.causingSubscriber, exEvent.throwable);            }        } else {            if (throwSubscriberException) {                throw new EventBusException(\"Invoking subscriber failed\", cause);            }            if (logSubscriberExceptions) {                logger.log(Level.SEVERE, \"Could not dispatch event: \" + event.getClass() + \" to subscribing class \"                        + subscription.subscriber.getClass(), cause);            }            if (sendSubscriberExceptionEvent) {                SubscriberExceptionEvent exEvent = new SubscriberExceptionEvent(this, cause, event,                        subscription.subscriber);//                post(exEvent);                //todo \u5904\u7406\u5f02\u5e38            }        }    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/KeventBus.java", "stars": "7", "class": {"name": "KeventBus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecutorService", "params": [], "throws": null, "modifiers": [], "return_type": "ExecutorService", "snippet": "    ExecutorService getExecutorService() {        return executorService;    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/KeventBus.java", "stars": "7", "class": {"name": "KeventBus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLogger", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Logger", "snippet": "    public Logger getLogger() {        return logger;    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/KeventBus.java", "stars": "7", "class": {"name": "KeventBus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"KeventBus[indexCount=\" + indexCount + \", eventInheritance=\" + eventInheritance + \"]\";    }", "url": "https://raw.githubusercontent.com/chenjk-520/keventbus/master/keventbus/src/main/java/com/util/keventbus/KeventBus.java", "stars": "7", "class": {"name": "KeventBus", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateDepartmentGroup", "params": ["DepartmentGroup"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int updateDepartmentGroup(DepartmentGroup departmentGroup) throws ExecutorManagerException {        try {            final SQLTransaction<Integer> update = transOperator -> {                final Connection conn = transOperator.getConnection();                Integer ret = 0;                try {                    ret = transOperator.update(UPDATE_DEPARTMENT_GROUP,departmentGroup.getId(), departmentGroup.getName(), departmentGroup.getDescription(), System.currentTimeMillis(), departmentGroup.getOldId());                    if(ret == 1){                        transOperator.update(DELETE_DEPARTMENT_GROUP_EXECUTORS, departmentGroup.getOldId());                        for(int executorId: departmentGroup.getExecutorIds()){                            transOperator.update(INSERT_DEPARTMENT_GROUP_EXECUTORS, departmentGroup.getId(), executorId);                        }                    }                    transOperator.getConnection().commit();                }catch (SQLException sql){                    if(conn != null){                        conn.rollback();                    }                    throw sql;                }                return ret;            };            return this.dbOperator.transaction(update);        } catch (final Exception e) {            throw new ExecutorManagerException(\"update Department Group failed.\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/DepartmentGroupDao.java", "stars": "18", "class": {"name": "DepartmentGroupDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "groupIdIsExist", "params": ["DepartmentGroup"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int groupIdIsExist(DepartmentGroup departmentGroup) throws ExecutorManagerException {        try {            return this.dbOperator.query(DepartmentGroupDao.GROUP_ID_IS_EXIST, new CountGroupIdHandle(), departmentGroup.getId());        } catch (final Exception e) {            throw new ExecutorManagerException(\"can not found group id in cfg_webank_organization, failed.\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/DepartmentGroupDao.java", "stars": "18", "class": {"name": "DepartmentGroupDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteDepartmentGroup", "params": ["DepartmentGroup"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "    public int deleteDepartmentGroup(DepartmentGroup departmentGroup) throws ExecutorManagerException {        try {            final SQLTransaction<Integer> delete = transOperator -> {                final Connection conn = transOperator.getConnection();                Integer ret = 0;                try {                    ret = transOperator.update(DELETE_DEPARTMENT_GROUP, departmentGroup.getId());                    if(ret == 1){                        transOperator.update(DELETE_DEPARTMENT_GROUP_EXECUTORS, departmentGroup.getId());                    }                    transOperator.getConnection().commit();                }catch (SQLException sql){                    if(conn != null){                        conn.rollback();                    }                    throw sql;                }                return ret;            };            return this.dbOperator.transaction(delete);        } catch (final Exception e) {            throw new ExecutorManagerException(\"add Department Group failed.\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/DepartmentGroupDao.java", "stars": "18", "class": {"name": "DepartmentGroupDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addDepartmentGroup", "params": ["DepartmentGroup"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void addDepartmentGroup(DepartmentGroup departmentGroup) throws ExecutorManagerException {        try {            final SQLTransaction<Integer> insert = transOperator -> {                final Connection conn = transOperator.getConnection();                try {                    transOperator.update(DepartmentGroupDao.INSERT_DEPARTMENT_GROUP, departmentGroup.getId(),                            departmentGroup.getName(), departmentGroup.getDescription(), System.currentTimeMillis(), System.currentTimeMillis());                    for(int executorId: departmentGroup.getExecutorIds()){                        transOperator.update(INSERT_DEPARTMENT_GROUP_EXECUTORS, departmentGroup.getId(), executorId);                    }                    transOperator.getConnection().commit();                }catch (SQLException sql){                    if(conn != null){                        conn.rollback();                    }                    throw sql;                }                return 1;            };            this.dbOperator.transaction(insert);        } catch (final Exception e) {            throw new ExecutorManagerException(\"add Department Group failed.\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/DepartmentGroupDao.java", "stars": "18", "class": {"name": "DepartmentGroupDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkGroupNameIsExist", "params": ["DepartmentGroup"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean checkGroupNameIsExist(DepartmentGroup departmentGroup) throws ExecutorManagerException {        boolean flag = false;        try {            flag = this.dbOperator.query(DepartmentGroupDao.QUERY_GROUPNAME, new CheckExistHandler(), departmentGroup.getName());        } catch (final Exception e) {            throw new ExecutorManagerException(\"checkGroupNameIsExist failed: \", e);        }        return flag;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/DepartmentGroupDao.java", "stars": "18", "class": {"name": "DepartmentGroupDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkExecutorIsUsed", "params": ["int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean checkExecutorIsUsed(int executorId) throws ExecutorManagerException {        boolean flag = false;        try {            flag = this.dbOperator.query(DepartmentGroupDao.QUERY_EXECUTOR, new CheckExistHandler(), executorId);        } catch (final Exception e) {            throw new ExecutorManagerException(\"checkExecutorIsUsed failed: \", e);        }        return flag;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/DepartmentGroupDao.java", "stars": "18", "class": {"name": "DepartmentGroupDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchAllDepartmentGroup", "params": [], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<DepartmentGroup>", "snippet": "    public List<DepartmentGroup> fetchAllDepartmentGroup() throws ExecutorManagerException {        try {            return this.dbOperator.query(DepartmentGroupDao.FETCH_ALL_DEPARTMENT_GROUP, new FetchDepartmentGroupHandler());        } catch (final Exception e) {            throw new ExecutorManagerException(\"fetch ALL Department Group failed\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/DepartmentGroupDao.java", "stars": "18", "class": {"name": "DepartmentGroupDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchDepartmentGroupById", "params": ["Integer"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "DepartmentGroup", "snippet": "    public DepartmentGroup fetchDepartmentGroupById(Integer id) throws ExecutorManagerException {        DepartmentGroup departmentGroup = null;        try {            List<DepartmentGroup> departmentGroups = this.dbOperator.query(DepartmentGroupDao.FETCH_DEPARTMENT_GROUP_BY_ID, new FetchDepartmentGroupHandler(), id);            if(departmentGroups.size() != 0){                departmentGroup = departmentGroups.get(0);            }        } catch (final Exception e) {            throw new ExecutorManagerException(\"fetch ALL Department Group failed\", e);        }        return departmentGroup;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/DepartmentGroupDao.java", "stars": "18", "class": {"name": "DepartmentGroupDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchExecutorsIdSBySubmitUser", "params": ["String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<Integer>", "snippet": "    public List<Integer> fetchExecutorsIdSBySubmitUser(String submitUser) throws ExecutorManagerException {        try {            return this.dbOperator.query(DepartmentGroupDao.FETCH_EXECUTORS_IDS_BY_SUBMIT_USER, new FetchExecutorIdsHandler(), submitUser);        } catch (final Exception e) {            throw new ExecutorManagerException(\"fetch ExecutorsIdS BySubmitUser failed\", e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/DepartmentGroupDao.java", "stars": "18", "class": {"name": "DepartmentGroupDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Integer", "snippet": "        public Integer handle(final ResultSet rs) throws SQLException {            int count = 0;            if (!rs.next()) {                return count;            }            do {                count = rs.getInt(1);            } while (rs.next());            return count;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/DepartmentGroupDao.java", "stars": "18", "class": {"name": "CountGroupIdHandle", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["public", "static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Boolean", "snippet": "        public Boolean handle(final ResultSet rs) throws SQLException {            if (!rs.next()) {                return false;            }            return true;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/DepartmentGroupDao.java", "stars": "18", "class": {"name": "CheckExistHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["public", "static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<DepartmentGroup>", "snippet": "        public List<DepartmentGroup> handle(final ResultSet rs) throws SQLException {            if (!rs.next()) {                return Collections.emptyList();            }            Map<Integer, DepartmentGroup> departmentGroupMap = new HashMap<>();            do {                final int id = rs.getInt(1);                final int executorId = rs.getInt(6);                final String executorHost = rs.getString(7);                if(departmentGroupMap.get(id) != null){                    departmentGroupMap.get(id).getExecutorIds().add(executorId);                    Executor executor = new Executor(id, executorHost, 12321,true);                    departmentGroupMap.get(id).getExecutors().add(executor);                } else {                    DepartmentGroup dp = new DepartmentGroup();                    final String name = rs.getString(2);                    final String description = rs.getString(3);                    final Long createTime = rs.getLong(4);                    final Long updateTime = rs.getLong(5);                    dp.setId(id);                    dp.setName(name);                    dp.setDescription(description);                    dp.setCreateTime(createTime);                    dp.setUpdateTime(updateTime);                    dp.getExecutorIds().add(executorId);                    Executor executor = new Executor(id, executorHost, 12321,true);                    dp.getExecutors().add(executor);                    departmentGroupMap.put(id, dp);                }            } while (rs.next());            final List<DepartmentGroup> departmentGroups = new ArrayList<>(departmentGroupMap.values());            return departmentGroups;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/DepartmentGroupDao.java", "stars": "18", "class": {"name": "FetchDepartmentGroupHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["public", "static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<Integer>", "snippet": "        public List<Integer> handle(final ResultSet rs) throws SQLException {            if (!rs.next()) {                return Collections.emptyList();            }            final List<Integer> executorIds = new ArrayList<>();            do {                final int executorId = rs.getInt(1);                executorIds.add(executorId);            } while (rs.next());            return executorIds;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/DepartmentGroupDao.java", "stars": "18", "class": {"name": "FetchExecutorIdsHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["public", "static"]}}, {"method_name": "fillData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void fillData(){        if (Main.size>0){            area.append(Main.showResult());        }    }", "url": "https://raw.githubusercontent.com/Bekzatiitu/Final_Bekzat_Bekarys_ishs1901/master/Final%20Bekzat%20Bekarys%20ishs1901/src/kenn/shi/Results.java", "stars": "1", "class": {"name": "Results", "extends": "Container", "implements": null, "modifiers": ["public"]}}, {"method_name": "refresh", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void refresh(){        area.setText(\" \");    }", "url": "https://raw.githubusercontent.com/Bekzatiitu/Final_Bekzat_Bekarys_ishs1901/master/Final%20Bekzat%20Bekarys%20ishs1901/src/kenn/shi/Results.java", "stars": "1", "class": {"name": "Results", "extends": "Container", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        WoodDirectory woodDirectory = new WoodDirectory();        System.out.println(woodDirectory.get(3) + \"\\n\");        Wood wood = new Wood(4, \"Dub\", 1f);        if (woodDirectory.add(wood)) {            System.out.println(woodDirectory);        } else System.err.println(wood + \" \u0432\u0436\u0435 \u0456\u0441\u043d\u0443\u0454\");    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab2/src/test/java/com/demkom58/lab2/TestWood.java", "stars": "2", "class": {"name": "TestWood", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isLongOverflow", "params": ["BigInteger"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isLongOverflow(final BigInteger integer) {        return (integer.compareTo(OverFlowUtil.MAX_LONG) > 0 || integer                .compareTo(OverFlowUtil.MIN_LONG) < 0);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/OverFlowUtil.java", "stars": "23", "class": {"name": "OverFlowUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "validateLongNotOverFlow", "params": ["BigInteger"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void validateLongNotOverFlow(final BigInteger integer) {        boolean isOverFlow = OverFlowUtil.isLongOverflow(integer);        if (isOverFlow) {            throw DataXException.asDataXException(                    CommonErrorCode.CONVERT_OVER_FLOW,                    String.format(\"[%s] \u8f6c\u4e3aLong\u7c7b\u578b\u51fa\u73b0\u6ea2\u51fa .\", integer.toString()));        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/OverFlowUtil.java", "stars": "23", "class": {"name": "OverFlowUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isDoubleOverFlow", "params": ["BigDecimal"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isDoubleOverFlow(final BigDecimal decimal) {        if (decimal.signum() == 0) {            return false;        }        BigDecimal newDecimal = decimal;        boolean isPositive = decimal.signum() == 1;        if (!isPositive) {            newDecimal = decimal.negate();        }        return (newDecimal.compareTo(MIN_DOUBLE_POSITIVE) < 0 || newDecimal                .compareTo(MAX_DOUBLE_POSITIVE) > 0);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/OverFlowUtil.java", "stars": "23", "class": {"name": "OverFlowUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "validateDoubleNotOverFlow", "params": ["BigDecimal"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void validateDoubleNotOverFlow(final BigDecimal decimal) {        boolean isOverFlow = OverFlowUtil.isDoubleOverFlow(decimal);        if (isOverFlow) {            throw DataXException.asDataXException(                    CommonErrorCode.CONVERT_OVER_FLOW,                    String.format(\"[%s]\u8f6c\u4e3aDouble\u7c7b\u578b\u51fa\u73b0\u6ea2\u51fa .\",                            decimal.toPlainString()));        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/common/element/OverFlowUtil.java", "stars": "23", "class": {"name": "OverFlowUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "onInitializeAccessibilityNodeInfo", "params": ["android", "android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onInitializeAccessibilityNodeInfo (android.view.View p0, android.view.accessibility.AccessibilityNodeInfo p1)\t{\t\tn_onInitializeAccessibilityNodeInfo (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EntryAccessibilityDelegate.java", "stars": "2", "class": {"name": "EntryAccessibilityDelegate", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onInitializeAccessibilityNodeInfo", "params": ["android", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onInitializeAccessibilityNodeInfo (android.view.View p0, android.view.accessibility.AccessibilityNodeInfo p1);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EntryAccessibilityDelegate.java", "stars": "2", "class": {"name": "EntryAccessibilityDelegate", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EntryAccessibilityDelegate.java", "stars": "2", "class": {"name": "EntryAccessibilityDelegate", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EntryAccessibilityDelegate.java", "stars": "2", "class": {"name": "EntryAccessibilityDelegate", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "checkType", "params": [], "throws": ["TypeException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void checkType() throws TypeException {\t\tthis.getSon().checkType();\t\tgetSon().getType().assertType(this, TypeCode.BOOLEAN);\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprNOT.java", "stars": "3", "class": {"name": "ExprNOT", "extends": "ExprUnary", "implements": null, "modifiers": ["public"]}}, {"method_name": "generateCode", "params": [], "throws": ["CodeException"], "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String generateCode() throws CodeException {\t\tString result;\t\tresult = \"(! \" + getSon().generateCode() + \")\";\t\treturn result;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprNOT.java", "stars": "3", "class": {"name": "ExprNOT", "extends": "ExprUnary", "implements": null, "modifiers": ["public"]}}, {"method_name": "constEval", "params": ["Environment<ExprVALUE>"], "throws": ["EnvironmentException", "TypeException"], "modifiers": ["public"], "return_type": "Object", "snippet": "\tpublic Object constEval(Environment<ExprVALUE> environment) throws EnvironmentException, TypeException {\t\tObject o = getSon().constEval(environment);\t\tif ((o instanceof Boolean)) \t\t\treturn new Boolean(!(Boolean)o);\t\telse\t\t\tthrow new TypeException(\"Impossible de calculer la constante, erreur de type\", line, column);\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprNOT.java", "stars": "3", "class": {"name": "ExprNOT", "extends": "ExprUnary", "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\treturn \"!\" + this.getSon();\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprNOT.java", "stars": "3", "class": {"name": "ExprNOT", "extends": "ExprUnary", "implements": null, "modifiers": ["public"]}}, {"method_name": "isValid", "params": ["GardenFieldFilterCriteria"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String isValid(@Nullable final GardenFieldFilterCriteria gardenFieldFilterCriteria) {        String errorMsg = \"\";        //valid if null        if (gardenFieldFilterCriteria == null) {            return errorMsg;        }        if (gardenFieldFilterCriteria.getLocationFilterCriteria() != null &&            !gardenFieldFilterCriteria.getLocationFilterCriteria().checkNonNull() &&            !gardenFieldFilterCriteria.getLocationFilterCriteria().checkAllNull()) {            errorMsg += \"invalid location (latitude, longitude, radius) filter;\";        }        if (gardenFieldFilterCriteria.getLocationFilterCriteria() != null            && gardenFieldFilterCriteria.getLocationFilterCriteria().checkNonNull()            && gardenFieldFilterCriteria.getLocationFilterCriteria().getRadiusInKM() < 0) {            errorMsg += \"invalid radius filter;\";        }        if (gardenFieldFilterCriteria.getMinPricePerM2() != null && gardenFieldFilterCriteria.getMinPricePerM2() < 0) {            errorMsg += \"invalid price filter criteria;\";        }        if (gardenFieldFilterCriteria.getMaxPricePerM2() != null && gardenFieldFilterCriteria.getMaxPricePerM2() < 0) {            errorMsg += \"invalid price filter criteria;\";        }        if (gardenFieldFilterCriteria.getSizeInM2LowerBound() != null && gardenFieldFilterCriteria.getSizeInM2UpperBound() != null) {            if (gardenFieldFilterCriteria.getSizeInM2LowerBound() < 0 || gardenFieldFilterCriteria.getSizeInM2UpperBound() < 0 ||                gardenFieldFilterCriteria.getSizeInM2LowerBound() > gardenFieldFilterCriteria.getSizeInM2UpperBound()) {                errorMsg += \"invalid size filter criteria;\";            }        }        if (gardenFieldFilterCriteria.getLeasingTimeFrom() != null && gardenFieldFilterCriteria.getLeasingTimeTo() != null) {            if (gardenFieldFilterCriteria.getLeasingTimeFrom().isAfter(gardenFieldFilterCriteria.getLeasingTimeTo())) {                errorMsg += \"invalid leasing time filter criteria;\";            }        }        return errorMsg;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/validator/GardenFieldFilterCriteriaValidator.java", "stars": "2", "class": {"name": "GardenFieldFilterCriteriaValidator", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    try (Reader reader = Resources        .getResourceAsReader(\"org/apache/ibatis/submitted/timezone_edge_case/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),        \"org/apache/ibatis/submitted/timezone_edge_case/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/timezone_edge_case/TimezoneEdgeCaseTest.java", "stars": "15", "class": {"name": "TimezoneEdgeCaseTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "saveTimeZone", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void saveTimeZone() {    timeZone = TimeZone.getDefault();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/timezone_edge_case/TimezoneEdgeCaseTest.java", "stars": "15", "class": {"name": "TimezoneEdgeCaseTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "restoreTimeZone", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void restoreTimeZone() {    TimeZone.setDefault(timeZone);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/timezone_edge_case/TimezoneEdgeCaseTest.java", "stars": "15", "class": {"name": "TimezoneEdgeCaseTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldSelectNonExistentLocalTimestampAsIs", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSelectNonExistentLocalTimestampAsIs() {    TimeZone.setDefault(TimeZone.getTimeZone(\"America/Los_Angeles\"));    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Record record = mapper.selectById(1);      assertEquals(LocalDateTime.of(LocalDate.of(2019, 3, 10), LocalTime.of(2, 30)), record.getTs());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/timezone_edge_case/TimezoneEdgeCaseTest.java", "stars": "15", "class": {"name": "TimezoneEdgeCaseTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldInsertNonExistentLocalTimestampAsIs", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldInsertNonExistentLocalTimestampAsIs() throws Exception {    TimeZone.setDefault(TimeZone.getTimeZone(\"America/Los_Angeles\"));    LocalDateTime localDateTime = LocalDateTime.of(LocalDate.of(2019, 3, 10), LocalTime.of(2, 30));    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Record record = new Record();      record.setId(2);      record.setTs(localDateTime);      mapper.insert(record);      sqlSession.commit();    }    try (SqlSession sqlSession = sqlSessionFactory.openSession();        Connection con = sqlSession.getConnection();        Statement stmt = con.createStatement();        ResultSet rs = stmt.executeQuery(\"select count(*) from records where id = 2 and ts = '2019-03-10 02:30:00'\")) {      rs.next();      assertEquals(1, rs.getInt(1));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/timezone_edge_case/TimezoneEdgeCaseTest.java", "stars": "15", "class": {"name": "TimezoneEdgeCaseTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldSelectNonExistentLocalDateAsIs", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSelectNonExistentLocalDateAsIs() {    TimeZone.setDefault(TimeZone.getTimeZone(\"Pacific/Apia\"));    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Record record = mapper.selectById(1);      assertEquals(LocalDate.of(2011, 12, 30), record.getD());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/timezone_edge_case/TimezoneEdgeCaseTest.java", "stars": "15", "class": {"name": "TimezoneEdgeCaseTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldInsertNonExistentLocalDateAsIs", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldInsertNonExistentLocalDateAsIs() throws Exception {    TimeZone.setDefault(TimeZone.getTimeZone(\"Pacific/Apia\"));    LocalDate localDate = LocalDate.of(2011, 12, 30);    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Record record = new Record();      record.setId(3);      record.setD(localDate);      mapper.insert(record);      sqlSession.commit();    }    try (SqlSession sqlSession = sqlSessionFactory.openSession();        Connection con = sqlSession.getConnection();        Statement stmt = con.createStatement();        ResultSet rs = stmt.executeQuery(\"select count(*) from records where id = 3 and d = '2011-12-30'\")) {      rs.next();      assertEquals(1, rs.getInt(1));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/timezone_edge_case/TimezoneEdgeCaseTest.java", "stars": "15", "class": {"name": "TimezoneEdgeCaseTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "configure", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void configure() {  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/ExecJettyServerModule.java", "stars": "18", "class": {"name": "ExecJettyServerModule", "extends": "AbstractModule", "implements": null, "modifiers": ["public"]}}, {"method_name": "createJettyServer", "params": ["Props"], "throws": null, "modifiers": ["private"], "return_type": "Server", "snippet": "  private Server createJettyServer(final Props props) {    final int maxThreads = props.getInt(\"executor.maxThreads\", DEFAULT_THREAD_NUMBER);    final QueuedThreadPool httpThreadPool = new QueuedThreadPool(maxThreads);    /*     * Default to a port number 0 (zero)     * The Jetty server automatically finds an unused port when the port number is set to zero     * TODO: This is using a highly outdated version of jetty [year 2010]. needs to be updated.     */    final int port = props.getInt(ConfigurationKeys.EXECUTOR_PORT, 0);    final Server server = new Server(httpThreadPool);    final boolean isStatsOn = props.getBoolean(\"executor.connector.stats\", true);    logger.info(\"Setting up connector with stats on: \" + isStatsOn);    for (final Connector connector : server.getConnectors()) {//      connector.setStatsOn(isStatsOn);//      logger.info(String.format(//          \"Jetty connector name: %s, default header buffer size: %d\",//          connector.getName(), connector.getHeaderBufferSize()));//      connector.setHeaderBufferSize(props.getInt(\"jetty.headerBufferSize\",//          DEFAULT_HEADER_BUFFER_SIZE));////      logger.info(String.format(//          \"Jetty connector name: %s, (if) new header buffer size: %d\",//          connector.getName(), connector.getHeaderBufferSize()));    }    ServerConnector httpConnector = createHttpConnector(server, props);    server.addConnector(httpConnector);    return server;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/ExecJettyServerModule.java", "stars": "18", "class": {"name": "ExecJettyServerModule", "extends": "AbstractModule", "implements": null, "modifiers": ["public"]}}, {"method_name": "createRootContext", "params": ["Server"], "throws": null, "modifiers": ["private"], "return_type": "ServletContextHandler", "snippet": "  private ServletContextHandler createRootContext(@Named(EXEC_JETTY_SERVER) final Server server) {    final ServletContextHandler root = new ServletContextHandler(server, \"/\", ServletContextHandler.SESSIONS);    root.setMaxFormContentSize(MAX_FORM_CONTENT_SIZE);    root.addServlet(new ServletHolder(new ExecutorServlet()), \"/executor\");    root.addServlet(new ServletHolder(new JMXHttpServlet()), \"/jmx\");    root.addServlet(new ServletHolder(new StatsServlet()), \"/stats\");    root.addServlet(new ServletHolder(new ServerStatisticsServlet()), \"/serverStatistics\");    return root;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/ExecJettyServerModule.java", "stars": "18", "class": {"name": "ExecJettyServerModule", "extends": "AbstractModule", "implements": null, "modifiers": ["public"]}}, {"method_name": "createHttpConnector", "params": ["Server", "Props"], "throws": null, "modifiers": ["private"], "return_type": "ServerConnector", "snippet": "  private ServerConnector createHttpConnector(Server server, Props props) {    HttpConfiguration httpConfig = new HttpConfiguration();    final int headerBufferSize = props.getInt(\"jetty.headerBufferSize\", DEFAULT_HEADER_BUFFER_SIZE);    httpConfig.setRequestHeaderSize(headerBufferSize);    int port = props.getInt(ConfigurationKeys.EXECUTOR_PORT, 0);    String bindAddress = props.getString(\"executor.bindAddress\", \"0.0.0.0\");    ServerConnector connector = createServerConnector(server, props, port,        new HttpConnectionFactory(httpConfig));    connector.setHost(bindAddress);    return connector;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/ExecJettyServerModule.java", "stars": "18", "class": {"name": "ExecJettyServerModule", "extends": "AbstractModule", "implements": null, "modifiers": ["public"]}}, {"method_name": "createServerConnector", "params": ["Server", "Props", "int", "ConnectionFactory"], "throws": null, "modifiers": ["private"], "return_type": "ServerConnector", "snippet": "  private ServerConnector createServerConnector(Server server,      Props props,      int port,      ConnectionFactory... connectionFactories) {    //int acceptors = jettySettings.getAcceptors().or(2);    int acceptors = 2;    ServerConnector connector = new ServerConnector(server, null,        null, null, acceptors, 2, connectionFactories);    connector.setPort(port);    connector.setStopTimeout(0);    connector.getSelectorManager().setStopTimeout(0);    int acceptQueueSize = props.getInt(\"executor.acceptQueueSize\", 100);    connector.setAcceptQueueSize(acceptQueueSize);    return connector;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/ExecJettyServerModule.java", "stars": "18", "class": {"name": "ExecJettyServerModule", "extends": "AbstractModule", "implements": null, "modifiers": ["public"]}}, {"method_name": "output", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void output() {        input.input();        System.out.println(\"\u5c06220v\u7684\u7535\u6d41\u8f6c\u5316\u4e3a20v\uff0c3.25A\u7684\u7535\u6d41\");        System.out.println(\"\u8f93\u51fa20v\uff0c3.25A\u7684\u7535\u6d41\");    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/adapter/objectadapter/Adapter.java", "stars": "2", "class": {"name": "Adapter", "extends": null, "implements": ["Output"], "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void run() {    System.out.println(Thread.currentThread().getName()        + \" MyRunnable starting...\");    for (; i < 10_000; i++) {      System.out.println(Thread.currentThread().getName()          + \" i is \" + i);    }    System.out.println(Thread.currentThread().getName()        + \" MyRunnable ending...\");  }", "url": "https://raw.githubusercontent.com/SimonHGR/safari-threads/master/src/main/java/runnables/Example1.java", "stars": "3", "class": {"name": "MyJob", "extends": null, "implements": ["Runnable"], "modifiers": []}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void main(String[] args) {    Runnable r = new MyJob();    Thread t = new Thread(r);//    t.run(); // WRONG!!!!    t.start(); // RIGHT!!!!    Thread t2 = new Thread(r);    t2.start();    System.out.println(Thread.currentThread().getName()        + \" main method ending...\");  }", "url": "https://raw.githubusercontent.com/SimonHGR/safari-threads/master/src/main/java/runnables/Example1.java", "stars": "3", "class": {"name": "Example1", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "K", "snippet": "  public abstract K getId();}", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/misc/generics/GenericAbstract.java", "stars": "15", "class": {"name": "GenericAbstract", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getTokenFromRequest", "params": ["HttpServletRequest"], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "    protected String getTokenFromRequest(HttpServletRequest request) {        return getTokenFromRequest(request, ADMIN_TOKEN_HEADER_NAME);    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/security/filter/AdminAuthenticationFilter.java", "stars": "1", "class": {"name": "AdminAuthenticationFilter", "extends": "AbstractAuthenticationFilter", "implements": null, "modifiers": ["public"]}}, {"method_name": "doAuthenticate", "params": ["HttpServletRequest", "HttpServletResponse", "FilterChain"], "throws": ["ServletException", "IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void doAuthenticate(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {        // token        String token = getTokenFromRequest(request);        if (StringUtils.isBlank(token)) {            getAuthenticationFailureHandler().onFailure(request, response, new AuthenticationException(\"You have not logged in. Please login first.\"));            return;        }        // \u4ece\u7f13\u5b58\u4e2d\u67e5 token \u662f\u5426\u5b58\u5728 \u5f97\u5230 user id        Optional<Long> optionalUserId = inMemoryCacheStore.getAny(SecurityUtil.buildTokenAccessKey(token), Long.class);        if (!optionalUserId.isPresent()) {            getAuthenticationFailureHandler().onFailure(request, response, new AuthenticationException(\"Token has expired or does not exist\"));            return;        }        // \u6839\u636e user id \u67e5 user        User user = userService.getById(optionalUserId.get());        // \u8bbe\u7f6e context\u4e0a\u4e0b\u6587        SecurityContextHolder.setContext(new SecurityContextImpl(new AuthenticationImpl(new UserDetail(user))));        // \u6267\u884c\u8fc7\u6ee4\u5668\u94fe        filterChain.doFilter(request, response);    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/security/filter/AdminAuthenticationFilter.java", "stars": "1", "class": {"name": "AdminAuthenticationFilter", "extends": "AbstractAuthenticationFilter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getSimplePairingDialog", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "AlertDialog", "snippet": "    public AlertDialog getSimplePairingDialog(int titleResId, int messageResId) {        return new AlertDialog.Builder(activity)        .setTitle(titleResId)        .setMessage(messageResId)        .setPositiveButton(android.R.string.cancel, null)        .create();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/PairingDialog.java", "stars": "4", "class": {"name": "PairingDialog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPairingDialog", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "AlertDialog", "snippet": "    public AlertDialog getPairingDialog(int resId) {        return getPairingDialog(activity.getString(resId));    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/PairingDialog.java", "stars": "4", "class": {"name": "PairingDialog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPairingDialog", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "AlertDialog", "snippet": "    public AlertDialog getPairingDialog(String message) {        TextView title = (TextView) activity.getLayoutInflater().inflate(android.R.layout.simple_list_item_1, null);        title.setText(message);        final EditText input = new EditText(activity);        input.setInputType(InputType.TYPE_CLASS_NUMBER);        return new AlertDialog.Builder(activity)        .setCustomTitle(title)        .setView(input)        .setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {            public void onClick(DialogInterface dialog, int whichButton) {                String value = input.getText().toString().trim();                for (DeviceService service : device.getServices())                    service.sendPairingKey(value);            }        })        .setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {            public void onClick(DialogInterface dialog, int whichButton) {                dialog.cancel();                // pickerDialog.dismiss();            }        })        .create();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/device/PairingDialog.java", "stars": "4", "class": {"name": "PairingDialog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initVideo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initVideo() {        super.initVideo();        //\u5916\u90e8\u8f85\u52a9\u7684\u65cb\u8f6c\uff0c\u5e2e\u52a9\u5168\u5c4f        mADOrientationUtils = new OrientationUtils(this, getGSYADVideoPlayer());        //\u521d\u59cb\u5316\u4e0d\u6253\u5f00\u5916\u90e8\u7684\u65cb\u8f6c        mADOrientationUtils.setEnable(false);        if (getGSYADVideoPlayer().getFullscreenButton() != null) {            getGSYADVideoPlayer().getFullscreenButton().setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    //\u76f4\u63a5\u6a2a\u5c4f                    showADFull();                    clickForFullScreen();                }            });        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseADActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseADActivityDetail", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "initVideoBuilderMode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initVideoBuilderMode() {        super.initVideoBuilderMode();        getGSYADVideoOptionBuilder()                .setVideoAllCallBack(new GSYSampleCallBack() {                    @Override                    public void onStartPrepared(String url, Object... objects) {                        super.onStartPrepared(url, objects);                        //\u5f00\u59cb\u64ad\u653e\u4e86\u624d\u80fd\u65cb\u8f6c\u548c\u5168\u5c4f                        mADOrientationUtils.setEnable(getDetailOrientationRotateAuto());                    }                    @Override                    public void onAutoComplete(String url, Object... objects) {                        //\u5e7f\u544a\u7ed3\u675f\uff0c\u91ca\u653e                        getGSYADVideoPlayer().getCurrentPlayer().release();                        getGSYADVideoPlayer().onVideoReset();                        getGSYADVideoPlayer().setVisibility(View.GONE);                        //\u5f00\u59cb\u64ad\u653e\u539f\u89c6\u9891\uff0c\u6839\u636e\u662f\u5426\u5904\u4e8e\u5168\u5c4f\u72b6\u6001\u5224\u65ad                        getGSYVideoPlayer().getCurrentPlayer().startAfterPrepared();                        if (getGSYADVideoPlayer().getCurrentPlayer().isIfCurrentIsFullscreen()) {                            getGSYADVideoPlayer().removeFullWindowViewOnly();                            if (!getGSYVideoPlayer().getCurrentPlayer().isIfCurrentIsFullscreen()) {                                showFull();                                getGSYVideoPlayer().setSaveBeforeFullSystemUiVisibility(getGSYADVideoPlayer().getSaveBeforeFullSystemUiVisibility());                            }                        }                    }                    @Override                    public void onQuitFullscreen(String url, Object... objects) {                        //\u9000\u51fa\u5168\u5c4f\u903b\u8f91                        if (mADOrientationUtils != null) {                            mADOrientationUtils.backToProtVideo();                        }                        if (getGSYVideoPlayer().getCurrentPlayer().isIfCurrentIsFullscreen()) {                            getGSYVideoPlayer().onBackFullscreen();                        }                    }                })                .build(getGSYADVideoPlayer());    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseADActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseADActivityDetail", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "showFull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void showFull() {        if (orientationUtils.getIsLand() != 1) {            //\u76f4\u63a5\u6a2a\u5c4f            orientationUtils.resolveByClick();        }        getGSYVideoPlayer().startWindowFullscreen(this, hideActionBarWhenFull(), hideStatusBarWhenFull());    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseADActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseADActivityDetail", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onBackPressed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBackPressed() {        if (mADOrientationUtils != null) {            mADOrientationUtils.backToProtVideo();        }        if (GSYVideoADManager.backFromWindowFull(this)) {            return;        }        super.onBackPressed();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseADActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseADActivityDetail", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onPause() {        super.onPause();        GSYVideoADManager.onPause();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseADActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseADActivityDetail", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onResume() {        super.onResume();        GSYVideoADManager.onResume();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseADActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseADActivityDetail", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDestroy() {        super.onDestroy();        GSYVideoADManager.releaseAllVideos();        if (mADOrientationUtils != null)            mADOrientationUtils.releaseListener();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseADActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseADActivityDetail", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onConfigurationChanged", "params": ["Configuration"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onConfigurationChanged(Configuration newConfig) {        //\u5982\u679c\u65cb\u8f6c\u4e86\u5c31\u5168\u5c4f        boolean backUpIsPlay = isPlay;        if (!isPause && getGSYADVideoPlayer().getVisibility() == View.VISIBLE) {            if (isADStarted()) {                isPlay = false;                getGSYADVideoPlayer().getCurrentPlayer().onConfigurationChanged(this, newConfig, mADOrientationUtils, hideActionBarWhenFull(), hideStatusBarWhenFull());            }        }        super.onConfigurationChanged(newConfig);        isPlay = backUpIsPlay;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseADActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseADActivityDetail", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onStartPrepared", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onStartPrepared(String url, Object... objects) {        super.onStartPrepared(url, objects);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseADActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseADActivityDetail", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onPrepared", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPrepared(String url, Object... objects) {        super.onPrepared(url, objects);        if (isNeedAdOnStart()) {            startAdPlay();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseADActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseADActivityDetail", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onEnterFullscreen", "params": ["String", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onEnterFullscreen(String url, Object... objects) {        super.onEnterFullscreen(url, objects);        //\u9690\u85cf\u8c03\u5168\u5c4f\u5bf9\u8c61\u7684\u8fd4\u56de\u6309\u952e        GSYVideoPlayer gsyVideoPlayer = (GSYVideoPlayer) objects[1];        gsyVideoPlayer.getBackButton().setVisibility(View.GONE);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseADActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseADActivityDetail", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "clickForFullScreen", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clickForFullScreen() {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseADActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseADActivityDetail", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isADStarted", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean isADStarted() {        return getGSYADVideoPlayer().getCurrentPlayer().getCurrentState() >= 0 &&                getGSYADVideoPlayer().getCurrentPlayer().getCurrentState() != GSYVideoView.CURRENT_STATE_NORMAL                && getGSYADVideoPlayer().getCurrentPlayer().getCurrentState() != GSYVideoView.CURRENT_STATE_AUTO_COMPLETE;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseADActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseADActivityDetail", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "startAdPlay", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void startAdPlay() {        getGSYADVideoPlayer().setVisibility(View.VISIBLE);        getGSYADVideoPlayer().startPlayLogic();        if (getGSYVideoPlayer().getCurrentPlayer().isIfCurrentIsFullscreen()) {            showADFull();            getGSYADVideoPlayer().setSaveBeforeFullSystemUiVisibility(getGSYVideoPlayer().getSaveBeforeFullSystemUiVisibility());        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseADActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseADActivityDetail", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "showADFull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void showADFull() {        if (mADOrientationUtils.getIsLand() != 1) {            mADOrientationUtils.resolveByClick();        }        getGSYADVideoPlayer().startWindowFullscreen(GSYBaseADActivityDetail.this, hideActionBarWhenFull(), hideStatusBarWhenFull());    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseADActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseADActivityDetail", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getGSYADVideoPlayer", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "R", "snippet": "    public abstract R getGSYADVideoPlayer();    /**     * \u914d\u7f6eAD\u64ad\u653e\u5668     */    public abstract GSYVideoOptionBuilder getGSYADVideoOptionBuilder();    /**     * \u662f\u5426\u64ad\u653e\u5f00\u59cb\u5e7f\u544a     * \u5982\u679c\u8fd4\u56de false \uff0csetStartAfterPrepared \u9700\u8981\u8bbe\u7f6e\u4e3a ture     */    public abstract boolean isNeedAdOnStart();}", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseADActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseADActivityDetail", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getGSYADVideoOptionBuilder", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "GSYVideoOptionBuilder", "snippet": "    public abstract GSYVideoOptionBuilder getGSYADVideoOptionBuilder();    /**     * \u662f\u5426\u64ad\u653e\u5f00\u59cb\u5e7f\u544a     * \u5982\u679c\u8fd4\u56de false \uff0csetStartAfterPrepared \u9700\u8981\u8bbe\u7f6e\u4e3a ture     */    public abstract boolean isNeedAdOnStart();}", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseADActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseADActivityDetail", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isNeedAdOnStart", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "boolean", "snippet": "    public abstract boolean isNeedAdOnStart();}", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/GSYBaseADActivityDetail.java", "stars": "2", "class": {"name": "GSYBaseADActivityDetail", "extends": "GSYBaseActivityDetail", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "findAllByEnNameIn", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void findAllByEnNameIn() {        List<SupportAddress> list = supportAddressRepository.findAllByEnNameIn(Arrays.asList(\"bj\", \"dcq\"));        Assert.isTrue(list.size() == 2, \"\u67e5\u8be2\u7684\u533a\u57df\u7ed3\u679c\u4e0d\u7b26\u548c\");    }", "url": "https://raw.githubusercontent.com/harry-xqb/rent-house/master/src/test/java/com/harry/renthouse/repository/SupportAddressRepositoryTest.java", "stars": "3", "class": {"name": "SupportAddressRepositoryTest", "extends": "RentHouseApplicationTests", "implements": null, "modifiers": []}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/column/ElasticColumn.java", "stars": "23", "class": {"name": "ElasticColumn", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/column/ElasticColumn.java", "stars": "23", "class": {"name": "ElasticColumn", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getType() {        return type;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/column/ElasticColumn.java", "stars": "23", "class": {"name": "ElasticColumn", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setType(String type) {        this.type = type;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/column/ElasticColumn.java", "stars": "23", "class": {"name": "ElasticColumn", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTimezone", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTimezone() {        return timezone;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/column/ElasticColumn.java", "stars": "23", "class": {"name": "ElasticColumn", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTimezone", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTimezone(String timezone) {        this.timezone = timezone;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/column/ElasticColumn.java", "stars": "23", "class": {"name": "ElasticColumn", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFormat", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getFormat() {        return format;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/column/ElasticColumn.java", "stars": "23", "class": {"name": "ElasticColumn", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setFormat", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFormat(String format) {        this.format = format;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/column/ElasticColumn.java", "stars": "23", "class": {"name": "ElasticColumn", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toData", "params": ["Record", "List<ElasticColumn>", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Map<String,Object>", "snippet": "    public static Map<String, Object> toData(Record record, List<ElasticColumn> colConfs, String columnNameSeparator){        Map<String, Object> outputData = new HashMap<>(record.getColumnNumber());        for(int i = 0; i < record.getColumnNumber(); i++){            Column column = record.getColumn(i);            ElasticColumn config = colConfs.get(i);            String columnName = config.getName();            Map<String, Object> innerOutput = outputData;            String[] levelColumns = columnName.split(columnNameSeparator);            if(levelColumns.length > 1) {                columnName = levelColumns[levelColumns.length - 1];                for (int j = 0; j < levelColumns.length - 1 ; j++) {                    Map<String, Object> data = new HashMap<>();                    innerOutput.put(levelColumns[j], data);                    innerOutput = data;                }            }            ElasticFieldDataType type = ElasticFieldDataType.valueOf(config.getType().toUpperCase());            switch(type){                case IP:                case IP_RANGE:                case KEYWORD:                case TEXT:                    innerOutput.put(columnName,  column.asString());                    break;                case GEO_POINT:                case GEO_SHAPE:                case NESTED:                case OBJECT:                    innerOutput.put(columnName, parseObject(column.asString()));                    break;                case LONG_RANGE:                case LONG:                    innerOutput.put(columnName, column.asLong());                    break;                case INTEGER:                case INTEGER_RANGE:                case SHORT:                    innerOutput.put(columnName, column.asBigInteger());                    break;                case FLOAT:                case FLOAT_RANGE:                case HALF_FLOAT:                case SCALED_FLOAT:                case DOUBLE_RANGE:                case DOUBLE:                    innerOutput.put(columnName, column.asDouble());                    break;                case BINARY:                case BYTE:                    innerOutput.put(columnName, column.asBytes());                    break;                case BOOLEAN:                    innerOutput.put(columnName, column.asBoolean());                    break;                case DATE_RANGE:                case DATE:                    innerOutput.put(columnName, parseDate(config, column));                    break;                default:                    throw DataXException.asDataXException(ElasticWriterErrorCode.MAPPING_TYPE_UNSUPPORTED,                            \"unsupported type:[\" +config.getType() + \"]\");            }        }        return outputData;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/column/ElasticColumn.java", "stars": "23", "class": {"name": "ElasticColumn", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseObject", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "Object", "snippet": "    private static Object parseObject(String rawData){        if(rawData.startsWith(ARRAY_PREFIX) &&                rawData.endsWith(ARRAY_SUFFIX)){            return JSON.parseObject(rawData, new TypeReference<List<Object>>(){});        }        return JSON.parseObject(rawData, Map.class);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/column/ElasticColumn.java", "stars": "23", "class": {"name": "ElasticColumn", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseDate", "params": ["ElasticColumn", "Column"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "    private static String parseDate(ElasticColumn config, Column column){        DateTimeZone dateTimeZone = DateTimeZone.getDefault();        if(StringUtils.isNotBlank(config.getTimezone())){            dateTimeZone = DateTimeZone.forID(config.getTimezone());        }        String output;        if(column.getType() == Column.Type.DATE){            output = new DateTime(column.asLong(), dateTimeZone).toString();        }else if(StringUtils.isNotBlank(config.getFormat())){            DateTimeFormatter formatter = DateTimeFormat.forPattern(config.getFormat());            output = formatter.withZone(dateTimeZone)                    .parseDateTime(column.asString()).toString();        }else{            output = column.asString();        }        return output;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/column/ElasticColumn.java", "stars": "23", "class": {"name": "ElasticColumn", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSelf", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "T", "snippet": "  public abstract T getSelf();  public T UPDATE(String table) {    sql().statementType = SQLStatement.StatementType.UPDATE;    sql().tables.add(table);    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "UPDATE", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T UPDATE(String table) {    sql().statementType = SQLStatement.StatementType.UPDATE;    sql().tables.add(table);    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "SET", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T SET(String sets) {    sql().sets.add(sets);    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "SET", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T SET(String... sets) {    sql().sets.addAll(Arrays.asList(sets));    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "INSERT_INTO", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T INSERT_INTO(String tableName) {    sql().statementType = SQLStatement.StatementType.INSERT;    sql().tables.add(tableName);    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "VALUES", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T VALUES(String columns, String values) {    INTO_COLUMNS(columns);    INTO_VALUES(values);    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "INTO_COLUMNS", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T INTO_COLUMNS(String... columns) {    sql().columns.addAll(Arrays.asList(columns));    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "INTO_VALUES", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T INTO_VALUES(String... values) {    List<String> list = sql().valuesList.get(sql().valuesList.size() - 1);    Collections.addAll(list, values);    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "SELECT", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T SELECT(String columns) {    sql().statementType = SQLStatement.StatementType.SELECT;    sql().select.add(columns);    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "SELECT", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T SELECT(String... columns) {    sql().statementType = SQLStatement.StatementType.SELECT;    sql().select.addAll(Arrays.asList(columns));    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "SELECT_DISTINCT", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T SELECT_DISTINCT(String columns) {    sql().distinct = true;    SELECT(columns);    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "SELECT_DISTINCT", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T SELECT_DISTINCT(String... columns) {    sql().distinct = true;    SELECT(columns);    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "DELETE_FROM", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T DELETE_FROM(String table) {    sql().statementType = SQLStatement.StatementType.DELETE;    sql().tables.add(table);    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "FROM", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T FROM(String table) {    sql().tables.add(table);    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "FROM", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T FROM(String... tables) {    sql().tables.addAll(Arrays.asList(tables));    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "JOIN", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T JOIN(String join) {    sql().join.add(join);    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "JOIN", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T JOIN(String... joins) {    sql().join.addAll(Arrays.asList(joins));    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "INNER_JOIN", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T INNER_JOIN(String join) {    sql().innerJoin.add(join);    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "INNER_JOIN", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T INNER_JOIN(String... joins) {    sql().innerJoin.addAll(Arrays.asList(joins));    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "LEFT_OUTER_JOIN", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T LEFT_OUTER_JOIN(String join) {    sql().leftOuterJoin.add(join);    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "LEFT_OUTER_JOIN", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T LEFT_OUTER_JOIN(String... joins) {    sql().leftOuterJoin.addAll(Arrays.asList(joins));    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "RIGHT_OUTER_JOIN", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T RIGHT_OUTER_JOIN(String join) {    sql().rightOuterJoin.add(join);    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "RIGHT_OUTER_JOIN", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T RIGHT_OUTER_JOIN(String... joins) {    sql().rightOuterJoin.addAll(Arrays.asList(joins));    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "OUTER_JOIN", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T OUTER_JOIN(String join) {    sql().outerJoin.add(join);    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "OUTER_JOIN", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T OUTER_JOIN(String... joins) {    sql().outerJoin.addAll(Arrays.asList(joins));    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "WHERE", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T WHERE(String conditions) {    sql().where.add(conditions);    sql().lastList = sql().where;    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "WHERE", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T WHERE(String... conditions) {    sql().where.addAll(Arrays.asList(conditions));    sql().lastList = sql().where;    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "OR", "params": [], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T OR() {    sql().lastList.add(OR);    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "AND", "params": [], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T AND() {    sql().lastList.add(AND);    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "GROUP_BY", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T GROUP_BY(String columns) {    sql().groupBy.add(columns);    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "GROUP_BY", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T GROUP_BY(String... columns) {    sql().groupBy.addAll(Arrays.asList(columns));    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "HAVING", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T HAVING(String conditions) {    sql().having.add(conditions);    sql().lastList = sql().having;    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "HAVING", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T HAVING(String... conditions) {    sql().having.addAll(Arrays.asList(conditions));    sql().lastList = sql().having;    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "ORDER_BY", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T ORDER_BY(String columns) {    sql().orderBy.add(columns);    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "ORDER_BY", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T ORDER_BY(String... columns) {    sql().orderBy.addAll(Arrays.asList(columns));    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "LIMIT", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T LIMIT(String variable) {    sql().limit = variable;    sql().limitingRowsStrategy = SQLStatement.LimitingRowsStrategy.OFFSET_LIMIT;    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "LIMIT", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T LIMIT(int value) {    return LIMIT(String.valueOf(value));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "OFFSET", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T OFFSET(String variable) {    sql().offset = variable;    sql().limitingRowsStrategy = SQLStatement.LimitingRowsStrategy.OFFSET_LIMIT;    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "OFFSET", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T OFFSET(long value) {    return OFFSET(String.valueOf(value));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "FETCH_FIRST_ROWS_ONLY", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T FETCH_FIRST_ROWS_ONLY(String variable) {    sql().limit = variable;    sql().limitingRowsStrategy = SQLStatement.LimitingRowsStrategy.ISO;    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "FETCH_FIRST_ROWS_ONLY", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T FETCH_FIRST_ROWS_ONLY(int value) {    return FETCH_FIRST_ROWS_ONLY(String.valueOf(value));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "OFFSET_ROWS", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T OFFSET_ROWS(String variable) {    sql().offset = variable;    sql().limitingRowsStrategy = SQLStatement.LimitingRowsStrategy.ISO;    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "OFFSET_ROWS", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T OFFSET_ROWS(long value) {    return OFFSET_ROWS(String.valueOf(value));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "ADD_ROW", "params": [], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public T ADD_ROW() {    sql().valuesList.add(new ArrayList<>());    return getSelf();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "sql", "params": [], "throws": null, "modifiers": ["private"], "return_type": "SQLStatement", "snippet": "  private SQLStatement sql() {    return sql;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "usingAppender", "params": ["A"], "throws": null, "modifiers": ["public"], "return_type": "A", "snippet": "  public <A extends Appendable> A usingAppender(A a) {    sql().sql(a);    return a;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    StringBuilder sb = new StringBuilder();    sql().sql(sb);    return sb.toString();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "AbstractSQL", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "append", "params": ["CharSequence"], "throws": null, "modifiers": ["public"], "return_type": "SafeAppendable", "snippet": "    public SafeAppendable append(CharSequence s) {      try {        if (empty && s.length() > 0) {          empty = false;        }        a.append(s);      } catch (IOException e) {        throw new RuntimeException(e);      }      return this;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "SafeAppendable", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "isEmpty", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isEmpty() {      return empty;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "SafeAppendable", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "sqlClause", "params": ["SafeAppendable", "String", "List<String>", "String", "String", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void sqlClause(SafeAppendable builder, String keyword, List<String> parts, String open, String close,                           String conjunction) {      if (!parts.isEmpty()) {        if (!builder.isEmpty()) {          builder.append(\"\\n\");        }        builder.append(keyword);        builder.append(\" \");        builder.append(open);        String last = \"________\";        for (int i = 0, n = parts.size(); i < n; i++) {          String part = parts.get(i);          if (i > 0 && !part.equals(AND) && !part.equals(OR) && !last.equals(AND) && !last.equals(OR)) {            builder.append(conjunction);          }          builder.append(part);          last = part;        }        builder.append(close);      }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "SQLStatement", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "selectSQL", "params": ["SafeAppendable"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String selectSQL(SafeAppendable builder) {      if (distinct) {        sqlClause(builder, \"SELECT DISTINCT\", select, \"\", \"\", \", \");      } else {        sqlClause(builder, \"SELECT\", select, \"\", \"\", \", \");      }      sqlClause(builder, \"FROM\", tables, \"\", \"\", \", \");      joins(builder);      sqlClause(builder, \"WHERE\", where, \"(\", \")\", \" AND \");      sqlClause(builder, \"GROUP BY\", groupBy, \"\", \"\", \", \");      sqlClause(builder, \"HAVING\", having, \"(\", \")\", \" AND \");      sqlClause(builder, \"ORDER BY\", orderBy, \"\", \"\", \", \");      limitingRowsStrategy.appendClause(builder, offset, limit);      return builder.toString();    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "SQLStatement", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "joins", "params": ["SafeAppendable"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void joins(SafeAppendable builder) {      sqlClause(builder, \"JOIN\", join, \"\", \"\", \"\\nJOIN \");      sqlClause(builder, \"INNER JOIN\", innerJoin, \"\", \"\", \"\\nINNER JOIN \");      sqlClause(builder, \"OUTER JOIN\", outerJoin, \"\", \"\", \"\\nOUTER JOIN \");      sqlClause(builder, \"LEFT OUTER JOIN\", leftOuterJoin, \"\", \"\", \"\\nLEFT OUTER JOIN \");      sqlClause(builder, \"RIGHT OUTER JOIN\", rightOuterJoin, \"\", \"\", \"\\nRIGHT OUTER JOIN \");    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "SQLStatement", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "insertSQL", "params": ["SafeAppendable"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String insertSQL(SafeAppendable builder) {      sqlClause(builder, \"INSERT INTO\", tables, \"\", \"\", \"\");      sqlClause(builder, \"\", columns, \"(\", \")\", \", \");      for (int i = 0; i < valuesList.size(); i++) {        sqlClause(builder, i > 0 ? \",\" : \"VALUES\", valuesList.get(i), \"(\", \")\", \", \");      }      return builder.toString();    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "SQLStatement", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "deleteSQL", "params": ["SafeAppendable"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String deleteSQL(SafeAppendable builder) {      sqlClause(builder, \"DELETE FROM\", tables, \"\", \"\", \"\");      sqlClause(builder, \"WHERE\", where, \"(\", \")\", \" AND \");      limitingRowsStrategy.appendClause(builder, null, limit);      return builder.toString();    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "SQLStatement", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "updateSQL", "params": ["SafeAppendable"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String updateSQL(SafeAppendable builder) {      sqlClause(builder, \"UPDATE\", tables, \"\", \"\", \"\");      joins(builder);      sqlClause(builder, \"SET\", sets, \"\", \"\", \", \");      sqlClause(builder, \"WHERE\", where, \"(\", \")\", \" AND \");      limitingRowsStrategy.appendClause(builder, null, limit);      return builder.toString();    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "SQLStatement", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "sql", "params": ["Appendable"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String sql(Appendable a) {      SafeAppendable builder = new SafeAppendable(a);      if (statementType == null) {        return null;      }      String answer;      switch (statementType) {        case DELETE:          answer = deleteSQL(builder);          break;        case INSERT:          answer = insertSQL(builder);          break;        case SELECT:          answer = selectSQL(builder);          break;        case UPDATE:          answer = updateSQL(builder);          break;        default:          answer = null;      }      return answer;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java", "stars": "15", "class": {"name": "SQLStatement", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "getInstance", "params": ["FragmentManager", "ImageCacheParams"], "throws": null, "modifiers": ["public", "static"], "return_type": "ImageCache", "snippet": "    public static ImageCache getInstance(            FragmentManager fragmentManager, ImageCacheParams cacheParams) {        // Search for, or create an instance of the non-UI RetainFragment        final RetainFragment mRetainFragment = findOrCreateRetainFragment(fragmentManager);        // See if we already have an ImageCache stored in RetainFragment        ImageCache imageCache = (ImageCache) mRetainFragment.getObject();        // No existing ImageCache, create one and store it in RetainFragment        if (imageCache == null) {            imageCache = new ImageCache(cacheParams);            mRetainFragment.setObject(imageCache);        }        return imageCache;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageCache.java", "stars": "74", "class": {"name": "ImageCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": ["ImageCacheParams"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void init(ImageCacheParams cacheParams) {        mCacheParams = cacheParams;        //BEGIN_INCLUDE(init_memory_cache)        // Set up memory cache        if (mCacheParams.memoryCacheEnabled) {            if (BuildConfig.DEBUG) {                Log.d(TAG, \"Memory cache created (size = \" + mCacheParams.memCacheSize + \")\");            }            // If we're running on Honeycomb or newer, create a set of reusable bitmaps that can be            // populated into the inBitmap field of BitmapFactory.Options. Note that the set is            // of SoftReferences which will actually not be very effective due to the garbage            // collector being aggressive clearing Soft/WeakReferences. A better approach            // would be to use a strongly references bitmaps, however this would require some            // balancing of memory usage between this set and the bitmap LruCache. It would also            // require knowledge of the expected size of the bitmaps. From Honeycomb to JellyBean            // the size would need to be precise, from KitKat onward the size would just need to            // be the upper bound (due to changes in how inBitmap can re-use bitmaps).            if (Utils.hasHoneycomb()) {                mReusableBitmaps =                        Collections.synchronizedSet(new HashSet<SoftReference<Bitmap>>());            }            mMemoryCache = new LruCache<String, BitmapDrawable>(mCacheParams.memCacheSize) {                /**                 * Notify the removed entry that is no longer being cached                 */                @Override                protected void entryRemoved(boolean evicted, String key,                        BitmapDrawable oldValue, BitmapDrawable newValue) {                    if (RecyclingBitmapDrawable.class.isInstance(oldValue)) {                        // The removed entry is a recycling drawable, so notify it                        // that it has been removed from the memory cache                        ((RecyclingBitmapDrawable) oldValue).setIsCached(false);                    } else {                        // The removed entry is a standard BitmapDrawable                        if (Utils.hasHoneycomb()) {                            // We're running on Honeycomb or later, so add the bitmap                            // to a SoftReference set for possible use with inBitmap later                            mReusableBitmaps.add(new SoftReference<Bitmap>(oldValue.getBitmap()));                        }                    }                }                /**                 * Measure item size in kilobytes rather than units which is more practical                 * for a bitmap cache                 */                @Override                protected int sizeOf(String key, BitmapDrawable value) {                    final int bitmapSize = getBitmapSize(value) / 1024;                    return bitmapSize == 0 ? 1 : bitmapSize;                }            };        }        //END_INCLUDE(init_memory_cache)        // By default the disk cache is not initialized here as it should be initialized        // on a separate thread due to disk access.        if (cacheParams.initDiskCacheOnCreate) {            // Set up disk cache            initDiskCache();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageCache.java", "stars": "74", "class": {"name": "ImageCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initDiskCache", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initDiskCache() {        // Set up disk cache        synchronized (mDiskCacheLock) {            if (mDiskLruCache == null || mDiskLruCache.isClosed()) {                File diskCacheDir = mCacheParams.diskCacheDir;                if (mCacheParams.diskCacheEnabled && diskCacheDir != null) {                    if (!diskCacheDir.exists()) {                        diskCacheDir.mkdirs();                    }                    if (getUsableSpace(diskCacheDir) > mCacheParams.diskCacheSize) {                        try {                            mDiskLruCache = DiskLruCache.open(                                    diskCacheDir, 1, 1, mCacheParams.diskCacheSize);                            if (BuildConfig.DEBUG) {                                Log.d(TAG, \"Disk cache initialized\");                            }                        } catch (final IOException e) {                            mCacheParams.diskCacheDir = null;                            Log.e(TAG, \"initDiskCache - \" + e);                        }                    }                }            }            mDiskCacheStarting = false;            mDiskCacheLock.notifyAll();        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageCache.java", "stars": "74", "class": {"name": "ImageCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addBitmapToCache", "params": ["String", "BitmapDrawable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addBitmapToCache(String data, BitmapDrawable value) {        //BEGIN_INCLUDE(add_bitmap_to_cache)        if (data == null || value == null) {            return;        }        // Add to memory cache        if (mMemoryCache != null) {            if (RecyclingBitmapDrawable.class.isInstance(value)) {                // The removed entry is a recycling drawable, so notify it                // that it has been added into the memory cache                ((RecyclingBitmapDrawable) value).setIsCached(true);            }            mMemoryCache.put(data, value);        }        synchronized (mDiskCacheLock) {            // Add to disk cache            if (mDiskLruCache != null) {                final String key = hashKeyForDisk(data);                OutputStream out = null;                try {                    DiskLruCache.Snapshot snapshot = mDiskLruCache.get(key);                    if (snapshot == null) {                        final DiskLruCache.Editor editor = mDiskLruCache.edit(key);                        if (editor != null) {                            out = editor.newOutputStream(DISK_CACHE_INDEX);                            value.getBitmap().compress(                                    mCacheParams.compressFormat, mCacheParams.compressQuality, out);                            editor.commit();                            out.close();                        }                    } else {                        snapshot.getInputStream(DISK_CACHE_INDEX).close();                    }                } catch (final IOException e) {                    Log.e(TAG, \"addBitmapToCache - \" + e);                } catch (Exception e) {                    Log.e(TAG, \"addBitmapToCache - \" + e);                } finally {                    try {                        if (out != null) {                            out.close();                        }                    } catch (IOException e) {}                }            }        }        //END_INCLUDE(add_bitmap_to_cache)    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageCache.java", "stars": "74", "class": {"name": "ImageCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBitmapFromMemCache", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "BitmapDrawable", "snippet": "    public BitmapDrawable getBitmapFromMemCache(String data) {        //BEGIN_INCLUDE(get_bitmap_from_mem_cache)        BitmapDrawable memValue = null;        if (mMemoryCache != null) {            memValue = mMemoryCache.get(data);        }        if (BuildConfig.DEBUG && memValue != null) {            Log.d(TAG, \"Memory cache hit\");        }        return memValue;        //END_INCLUDE(get_bitmap_from_mem_cache)    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageCache.java", "stars": "74", "class": {"name": "ImageCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBitmapFromDiskCache", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Bitmap", "snippet": "    public Bitmap getBitmapFromDiskCache(String data) {        //BEGIN_INCLUDE(get_bitmap_from_disk_cache)        final String key = hashKeyForDisk(data);        Bitmap bitmap = null;        synchronized (mDiskCacheLock) {            while (mDiskCacheStarting) {                try {                    mDiskCacheLock.wait();                } catch (InterruptedException e) {}            }            if (mDiskLruCache != null) {                InputStream inputStream = null;                try {                    final DiskLruCache.Snapshot snapshot = mDiskLruCache.get(key);                    if (snapshot != null) {                        if (BuildConfig.DEBUG) {                            Log.d(TAG, \"Disk cache hit\");                        }                        inputStream = snapshot.getInputStream(DISK_CACHE_INDEX);                        if (inputStream != null) {                            FileDescriptor fd = ((FileInputStream) inputStream).getFD();                            // Decode bitmap, but we don't want to sample so give                            // MAX_VALUE as the target dimensions                            bitmap = ImageResizer.decodeSampledBitmapFromDescriptor(                                    fd, Integer.MAX_VALUE, Integer.MAX_VALUE, this);                        }                    }                } catch (final IOException e) {                    Log.e(TAG, \"getBitmapFromDiskCache - \" + e);                } finally {                    try {                        if (inputStream != null) {                            inputStream.close();                        }                    } catch (IOException e) {}                }            }            return bitmap;        }        //END_INCLUDE(get_bitmap_from_disk_cache)    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageCache.java", "stars": "74", "class": {"name": "ImageCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBitmapFromReusableSet", "params": ["BitmapFactory"], "throws": null, "modifiers": ["protected"], "return_type": "Bitmap", "snippet": "    protected Bitmap getBitmapFromReusableSet(BitmapFactory.Options options) {        //BEGIN_INCLUDE(get_bitmap_from_reusable_set)        Bitmap bitmap = null;        if (mReusableBitmaps != null && !mReusableBitmaps.isEmpty()) {            synchronized (mReusableBitmaps) {                final Iterator<SoftReference<Bitmap>> iterator = mReusableBitmaps.iterator();                Bitmap item;                while (iterator.hasNext()) {                    item = iterator.next().get();                    if (null != item && item.isMutable()) {                        // Check to see it the item can be used for inBitmap                        if (canUseForInBitmap(item, options)) {                            bitmap = item;                            // Remove from reusable set so it can't be used again                            iterator.remove();                            break;                        }                    } else {                        // Remove from the set if the reference has been cleared.                        iterator.remove();                    }                }            }        }        return bitmap;        //END_INCLUDE(get_bitmap_from_reusable_set)    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageCache.java", "stars": "74", "class": {"name": "ImageCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clearCache", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clearCache() {        if (mMemoryCache != null) {            mMemoryCache.evictAll();            if (BuildConfig.DEBUG) {                Log.d(TAG, \"Memory cache cleared\");            }        }        synchronized (mDiskCacheLock) {            mDiskCacheStarting = true;            if (mDiskLruCache != null && !mDiskLruCache.isClosed()) {                try {                    mDiskLruCache.delete();                    if (BuildConfig.DEBUG) {                        Log.d(TAG, \"Disk cache cleared\");                    }                } catch (IOException e) {                    Log.e(TAG, \"clearCache - \" + e);                }                mDiskLruCache = null;                initDiskCache();            }        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageCache.java", "stars": "74", "class": {"name": "ImageCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "flush", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void flush() {        synchronized (mDiskCacheLock) {            if (mDiskLruCache != null) {                try {                    mDiskLruCache.flush();                    if (BuildConfig.DEBUG) {                        Log.d(TAG, \"Disk cache flushed\");                    }                } catch (IOException e) {                    Log.e(TAG, \"flush - \" + e);                }            }        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageCache.java", "stars": "74", "class": {"name": "ImageCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "close", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void close() {        synchronized (mDiskCacheLock) {            if (mDiskLruCache != null) {                try {                    if (!mDiskLruCache.isClosed()) {                        mDiskLruCache.close();                        mDiskLruCache = null;                        if (BuildConfig.DEBUG) {                            Log.d(TAG, \"Disk cache closed\");                        }                    }                } catch (IOException e) {                    Log.e(TAG, \"close - \" + e);                }            }        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageCache.java", "stars": "74", "class": {"name": "ImageCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "canUseForInBitmap", "params": ["Bitmap", "BitmapFactory"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "    private static boolean canUseForInBitmap(            Bitmap candidate, BitmapFactory.Options targetOptions) {        //BEGIN_INCLUDE(can_use_for_inbitmap)        if (!Utils.hasKitKat()) {            // On earlier versions, the dimensions must match exactly and the inSampleSize must be 1            return candidate.getWidth() == targetOptions.outWidth                    && candidate.getHeight() == targetOptions.outHeight                    && targetOptions.inSampleSize == 1;        }        // From Android 4.4 (KitKat) onward we can re-use if the byte size of the new bitmap        // is smaller than the reusable bitmap candidate allocation byte count.        int width = targetOptions.outWidth / targetOptions.inSampleSize;        int height = targetOptions.outHeight / targetOptions.inSampleSize;        int byteCount = width * height * getBytesPerPixel(candidate.getConfig());        return byteCount <= candidate.getByteCount();        //END_INCLUDE(can_use_for_inbitmap)    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageCache.java", "stars": "74", "class": {"name": "ImageCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBytesPerPixel", "params": ["Config"], "throws": null, "modifiers": ["private", "static"], "return_type": "int", "snippet": "    private static int getBytesPerPixel(Config config) {        if (config == Config.ARGB_8888) {            return 4;        } else if (config == Config.RGB_565) {            return 2;        } else if (config == Config.ARGB_4444) {            return 2;        } else if (config == Config.ALPHA_8) {            return 1;        }        return 1;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageCache.java", "stars": "74", "class": {"name": "ImageCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDiskCacheDir", "params": ["Context", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "File", "snippet": "    public static File getDiskCacheDir(Context context, String uniqueName) {        // Check if media is mounted or storage is built-in, if so, try and use external cache dir        // otherwise use internal cache dir        final String cachePath =                Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState()) ||                        !isExternalStorageRemovable() ? getExternalCacheDir(context).getPath() :                                context.getCacheDir().getPath();        return new File(cachePath + File.separator + uniqueName);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageCache.java", "stars": "74", "class": {"name": "ImageCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashKeyForDisk", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String hashKeyForDisk(String key) {        String cacheKey;        try {            final MessageDigest mDigest = MessageDigest.getInstance(\"MD5\");            mDigest.update(key.getBytes());            cacheKey = bytesToHexString(mDigest.digest());        } catch (NoSuchAlgorithmException e) {            cacheKey = String.valueOf(key.hashCode());        }        return cacheKey;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageCache.java", "stars": "74", "class": {"name": "ImageCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "bytesToHexString", "params": ["byte"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "    private static String bytesToHexString(byte[] bytes) {        // http://stackoverflow.com/questions/332079        StringBuilder sb = new StringBuilder();        for (int i = 0; i < bytes.length; i++) {            String hex = Integer.toHexString(0xFF & bytes[i]);            if (hex.length() == 1) {                sb.append('0');            }            sb.append(hex);        }        return sb.toString();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageCache.java", "stars": "74", "class": {"name": "ImageCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBitmapSize", "params": ["BitmapDrawable"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getBitmapSize(BitmapDrawable value) {        Bitmap bitmap = value.getBitmap();        // From KitKat onward use getAllocationByteCount() as allocated bytes can potentially be        // larger than bitmap byte count.        if (Utils.hasKitKat()) {            return bitmap.getByteCount();        }        if (Utils.hasHoneycombMR1()) {            return bitmap.getByteCount();        }        // Pre HC-MR1        return bitmap.getRowBytes() * bitmap.getHeight();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageCache.java", "stars": "74", "class": {"name": "ImageCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isExternalStorageRemovable", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isExternalStorageRemovable() {        if (Utils.hasGingerbread()) {            return Environment.isExternalStorageRemovable();        }        return true;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageCache.java", "stars": "74", "class": {"name": "ImageCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getExternalCacheDir", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "File", "snippet": "    public static File getExternalCacheDir(Context context) {        if (Utils.hasFroyo()) {            return context.getExternalCacheDir();        }        // Before Froyo we need to construct the external cache dir ourselves        final String cacheDir = \"/Android/data/\" + context.getPackageName() + \"/cache/\";        return new File(Environment.getExternalStorageDirectory().getPath() + cacheDir);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageCache.java", "stars": "74", "class": {"name": "ImageCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUsableSpace", "params": ["File"], "throws": null, "modifiers": ["public", "static"], "return_type": "long", "snippet": "    public static long getUsableSpace(File path) {        if (Utils.hasGingerbread()) {            return path.getUsableSpace();        }        final StatFs stats = new StatFs(path.getPath());        return (long) stats.getBlockSize() * (long) stats.getAvailableBlocks();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageCache.java", "stars": "74", "class": {"name": "ImageCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findOrCreateRetainFragment", "params": ["FragmentManager"], "throws": null, "modifiers": ["private", "static"], "return_type": "RetainFragment", "snippet": "    private static RetainFragment findOrCreateRetainFragment(FragmentManager fm) {        //BEGIN_INCLUDE(find_create_retain_fragment)        // Check to see if we have retained the worker fragment.        RetainFragment mRetainFragment = (RetainFragment) fm.findFragmentByTag(TAG);        // If not retained (or first time running), we need to create and add it.        if (mRetainFragment == null) {            mRetainFragment = new RetainFragment();            fm.beginTransaction().add(mRetainFragment, TAG).commitAllowingStateLoss();        }        return mRetainFragment;        //END_INCLUDE(find_create_retain_fragment)    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageCache.java", "stars": "74", "class": {"name": "ImageCache", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMemCacheSizePercent", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setMemCacheSizePercent(float percent) {            if (percent < 0.01f || percent > 0.8f) {                throw new IllegalArgumentException(\"setMemCacheSizePercent - percent must be \"                        + \"between 0.01 and 0.8 (inclusive)\");            }            memCacheSize = Math.round(percent * Runtime.getRuntime().maxMemory() / 1024);        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageCache.java", "stars": "74", "class": {"name": "ImageCacheParams", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onCreate(Bundle savedInstanceState) {            super.onCreate(savedInstanceState);            // Make sure this Fragment is retained over a configuration change            setRetainInstance(true);        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageCache.java", "stars": "74", "class": {"name": "RetainFragment", "extends": "Fragment", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setObject", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setObject(Object object) {            mObject = object;        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageCache.java", "stars": "74", "class": {"name": "RetainFragment", "extends": "Fragment", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getObject", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getObject() {            return mObject;        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/ImageGridActivity/src/com/example/android/displayingbitmaps/util/ImageCache.java", "stars": "74", "class": {"name": "RetainFragment", "extends": "Fragment", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getJobId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getJobId() {        return jobId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/executor/domain/ExecuteReq.java", "stars": "23", "class": {"name": "ExecuteReq", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setJobId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setJobId(Long jobId) {        this.jobId = jobId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/executor/domain/ExecuteReq.java", "stars": "23", "class": {"name": "ExecuteReq", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTaskId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getTaskId() {        return taskId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/executor/domain/ExecuteReq.java", "stars": "23", "class": {"name": "ExecuteReq", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTaskId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTaskId(Long taskId) {        this.taskId = taskId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/executor/domain/ExecuteReq.java", "stars": "23", "class": {"name": "ExecuteReq", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getJobConfig", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getJobConfig() {        return jobConfig;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/executor/domain/ExecuteReq.java", "stars": "23", "class": {"name": "ExecuteReq", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setJobConfig", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setJobConfig(String jobConfig) {        this.jobConfig = jobConfig;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/executor/domain/ExecuteReq.java", "stars": "23", "class": {"name": "ExecuteReq", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStartTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getStartTime() {        return startTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/executor/domain/ExecuteReq.java", "stars": "23", "class": {"name": "ExecuteReq", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStartTime", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStartTime(long startTime) {        this.startTime = startTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/executor/domain/ExecuteReq.java", "stars": "23", "class": {"name": "ExecuteReq", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getExecUser() {        return execUser;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/executor/domain/ExecuteReq.java", "stars": "23", "class": {"name": "ExecuteReq", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setExecUser", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setExecUser(String execUser) {        this.execUser = execUser;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/executor/domain/ExecuteReq.java", "stars": "23", "class": {"name": "ExecuteReq", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTimeout", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getTimeout() {        return timeout;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/executor/domain/ExecuteReq.java", "stars": "23", "class": {"name": "ExecuteReq", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTimeout", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTimeout(long timeout) {        this.timeout = timeout;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/executor/domain/ExecuteReq.java", "stars": "23", "class": {"name": "ExecuteReq", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTaskParams", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "    public Map<String, Object> getTaskParams() {        return taskParams;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/executor/domain/ExecuteReq.java", "stars": "23", "class": {"name": "ExecuteReq", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTaskParams", "params": ["Map<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTaskParams(Map<String, Object> taskParams) {        this.taskParams = taskParams;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/executor/domain/ExecuteReq.java", "stars": "23", "class": {"name": "ExecuteReq", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProcSrcCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getProcSrcCode() {        return engineParams.get(DefaultParams.Engine.PARAM_PROC_SRC_CODE) == null?                null : String.valueOf(engineParams.get(DefaultParams.Engine.PARAM_PROC_SRC_CODE));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/executor/domain/ExecuteReq.java", "stars": "23", "class": {"name": "ExecuteReq", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEngine", "params": [], "throws": null, "modifiers": ["public"], "return_type": "JobEngine", "snippet": "    public JobEngine getEngine() {        return engine;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/executor/domain/ExecuteReq.java", "stars": "23", "class": {"name": "ExecuteReq", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEngine", "params": ["JobEngine"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEngine(JobEngine engine) {        this.engine = engine;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/executor/domain/ExecuteReq.java", "stars": "23", "class": {"name": "ExecuteReq", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEngineParams", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,Object>", "snippet": "    public Map<String, Object> getEngineParams() {        return engineParams;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/executor/domain/ExecuteReq.java", "stars": "23", "class": {"name": "ExecuteReq", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setEngineParams", "params": ["Map<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEngineParams(Map<String, Object> engineParams) {        this.engineParams = engineParams;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/executor/domain/ExecuteReq.java", "stars": "23", "class": {"name": "ExecuteReq", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"ExecuteReq{\" +                \"jobId=\" + jobId +                \", taskId=\" + taskId +                \", jobConfig='\" + jobConfig + '\\'' +                \", startTime=\" + startTime +                '}';    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/executor/domain/ExecuteReq.java", "stars": "23", "class": {"name": "ExecuteReq", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "upload", "params": ["MultipartFile"], "throws": null, "modifiers": ["public"], "return_type": "FileInfo", "snippet": "    public FileInfo upload(@RequestParam MultipartFile file) {        if (file.isEmpty()) {            throw new FileUploadException(\"Upload file is empty.\");        }        return fileUploadService.uploadFile(file);    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/controller/admin/api/FileController.java", "stars": "1", "class": {"name": "FileController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkMixedSqlNode", "params": ["MixedSqlNode"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void checkMixedSqlNode(MixedSqlNode sn){      MixedSqlNode rn = (MixedSqlNode) sn;      for (SqlNode node: rn.getContents())      {        if (node instanceof ForEachSqlNode)        {          ForEachSqlNode fn = (ForEachSqlNode) node;          SqlNode child_n=fn.getContents();          if (child_n instanceof MixedSqlNode){            checkMixedSqlNode((MixedSqlNode)child_n);        }        }else if (node instanceof IfSqlNode){          IfSqlNode in= (IfSqlNode)node;          SqlNode child_n=in.getContents();          if (child_n instanceof MixedSqlNode) {            checkMixedSqlNode((MixedSqlNode) child_n);          }        }else if (node instanceof TrimSqlNode){          TrimSqlNode in= (TrimSqlNode)node;          SqlNode child_n=in.getContents();          if (child_n instanceof MixedSqlNode) {            checkMixedSqlNode((MixedSqlNode) child_n);          }        }else if (node instanceof TextSqlNode){          TextSqlNode tn= (TextSqlNode)node;          if(tn.getText().indexOf(\"${\")>-1 && tn.getText().toLowerCase().indexOf(\" from \")==-1 || tn.getText().indexOf(\"(${\")>-1 || tn.getText().indexOf(\"(${\")>-1 )          {            tn.setText(tn.getText().replace(\"${\",\"#{\"));          }        }      }  }  public void parseStatementNode() {    String id = context.getStringAttribute(\"id\");    String databaseId = context.getStringAttribute(\"databaseId\");    if (!databaseIdMatchesCurrent(id, databaseId, this.requiredDatabaseId)) {      return;    }    String nodeName = context.getNode().getNodeName();    SqlCommandType sqlCommandType = SqlCommandType.valueOf(nodeName.toUpperCase(Locale.ENGLISH));    boolean isSelect = sqlCommandType == SqlCommandType.SELECT;    boolean flushCache = context.getBooleanAttribute(\"flushCache\", !isSelect);    boolean useCache = context.getBooleanAttribute(\"useCache\", isSelect);    boolean resultOrdered = context.getBooleanAttribute(\"resultOrdered\", false);    // Include Fragments before parsing    XMLIncludeTransformer includeParser = new XMLIncludeTransformer(configuration, builderAssistant);    includeParser.applyIncludes(context.getNode());    String parameterType = context.getStringAttribute(\"parameterType\");    //Class<?> parameterTypeClass = resolveClass(parameterType); //modify by xuliang 20200403    Class<?> parameterTypeClass =Object.class;      String lang = context.getStringAttribute(\"lang\");    LanguageDriver langDriver = getLanguageDriver(lang);    // Parse selectKey after includes and remove them.    processSelectKeyNodes(id, parameterTypeClass, langDriver); //modify by xuliang 20200403    // Parse the SQL (pre: <selectKey> and <include> were parsed and removed)    KeyGenerator keyGenerator;    String keyStatementId = id + SelectKeyGenerator.SELECT_KEY_SUFFIX;    keyStatementId = builderAssistant.applyCurrentNamespace(keyStatementId, true);    if (configuration.hasKeyGenerator(keyStatementId)) {      keyGenerator = configuration.getKeyGenerator(keyStatementId);    } else {      keyGenerator = context.getBooleanAttribute(\"useGeneratedKeys\",          configuration.isUseGeneratedKeys() && SqlCommandType.INSERT.equals(sqlCommandType))          ? Jdbc3KeyGenerator.INSTANCE : NoKeyGenerator.INSTANCE;    }    SqlSource sqlSource = langDriver.createSqlSource(configuration, context, parameterTypeClass);    //add by xuliang 20200407    if (sqlSource instanceof DynamicSqlSource ) {      SqlNode sn= ((DynamicSqlSource) sqlSource).getRootSqlNode();      if (sn instanceof MixedSqlNode)      {        checkMixedSqlNode((MixedSqlNode)sn);      }      else if ( sn instanceof TextSqlNode)      {        TextSqlNode tn= (TextSqlNode)sn;        if(tn.getText().indexOf(\"${\")>-1 && tn.getText().toLowerCase().indexOf(\" from \")==-1 || tn.getText().indexOf(\"(${\")>-1 || tn.getText().indexOf(\"(${\")>-1 )        {          tn.setText(tn.getText().replace(\"${\",\"#{\"));        }      }    }    StatementType statementType = StatementType.valueOf(context.getStringAttribute(\"statementType\", StatementType.PREPARED.toString()));    Integer fetchSize = context.getIntAttribute(\"fetchSize\");    Integer timeout = context.getIntAttribute(\"timeout\");    String parameterMap = context.getStringAttribute(\"parameterMap\");    String resultType = context.getStringAttribute(\"resultType\");    //Class<?> resultTypeClass = resolveClass(resultType);//modify by xuliang 20200403    Class<?> resultTypeClass =Object.class;    String resultMap = context.getStringAttribute(\"resultMap\");    String resultSetType = context.getStringAttribute(\"resultSetType\");    ResultSetType resultSetTypeEnum = resolveResultSetType(resultSetType);    if (resultSetTypeEnum == null) {      resultSetTypeEnum = configuration.getDefaultResultSetType();    }    String keyProperty = context.getStringAttribute(\"keyProperty\");    String keyColumn = context.getStringAttribute(\"keyColumn\");    String resultSets = context.getStringAttribute(\"resultSets\");    builderAssistant.addMappedStatement(id, sqlSource, statementType, sqlCommandType,        fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass,        resultSetTypeEnum, flushCache, useCache, resultOrdered,        keyGenerator, keyProperty, keyColumn, databaseId, langDriver, resultSets);    //add by xuliang 20200403    System.out.println(\"@@@\"+id+\":\"+sqlSource.getSql());  }  private void processSelectKeyNodes(String id, Class<?> parameterTypeClass, LanguageDriver langDriver) {    List<XNode> selectKeyNodes = context.evalNodes(\"selectKey\");    if (configuration.getDatabaseId() != null) {      parseSelectKeyNodes(id, selectKeyNodes, parameterTypeClass, langDriver, configuration.getDatabaseId());    }    parseSelectKeyNodes(id, selectKeyNodes, parameterTypeClass, langDriver, null);    removeSelectKeyNodes(selectKeyNodes);  }  private void parseSelectKeyNodes(String parentId, List<XNode> list, Class<?> parameterTypeClass, LanguageDriver langDriver, String skRequiredDatabaseId) {    for (XNode nodeToHandle : list) {      String id = parentId + SelectKeyGenerator.SELECT_KEY_SUFFIX;      String databaseId = nodeToHandle.getStringAttribute(\"databaseId\");      if (databaseIdMatchesCurrent(id, databaseId, skRequiredDatabaseId)) {        parseSelectKeyNode(id, nodeToHandle, parameterTypeClass, langDriver, databaseId);      }    }  }  private void parseSelectKeyNode(String id, XNode nodeToHandle, Class<?> parameterTypeClass, LanguageDriver langDriver, String databaseId) {    String resultType = nodeToHandle.getStringAttribute(\"resultType\");    Class<?> resultTypeClass = resolveClass(resultType);    StatementType statementType = StatementType.valueOf(nodeToHandle.getStringAttribute(\"statementType\", StatementType.PREPARED.toString()));    String keyProperty = nodeToHandle.getStringAttribute(\"keyProperty\");    String keyColumn = nodeToHandle.getStringAttribute(\"keyColumn\");    boolean executeBefore = \"BEFORE\".equals(nodeToHandle.getStringAttribute(\"order\", \"AFTER\"));    //defaults    boolean useCache = false;    boolean resultOrdered = false;    KeyGenerator keyGenerator = NoKeyGenerator.INSTANCE;    Integer fetchSize = null;    Integer timeout = null;    boolean flushCache = false;    String parameterMap = null;    String resultMap = null;    ResultSetType resultSetTypeEnum = null;    SqlSource sqlSource = langDriver.createSqlSource(configuration, nodeToHandle, parameterTypeClass);    SqlCommandType sqlCommandType = SqlCommandType.SELECT;    builderAssistant.addMappedStatement(id, sqlSource, statementType, sqlCommandType,        fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass,        resultSetTypeEnum, flushCache, useCache, resultOrdered,        keyGenerator, keyProperty, keyColumn, databaseId, langDriver, null);    id = builderAssistant.applyCurrentNamespace(id, false);    MappedStatement keyStatement = configuration.getMappedStatement(id, false);    configuration.addKeyGenerator(id, new SelectKeyGenerator(keyStatement, executeBefore));  }  private void removeSelectKeyNodes(List<XNode> selectKeyNodes) {    for (XNode nodeToHandle : selectKeyNodes) {      nodeToHandle.getParent().getNode().removeChild(nodeToHandle.getNode());    }  }  private boolean databaseIdMatchesCurrent(String id, String databaseId, String requiredDatabaseId) {    if (requiredDatabaseId != null) {      return requiredDatabaseId.equals(databaseId);    }    if (databaseId != null) {      return false;    }    id = builderAssistant.applyCurrentNamespace(id, false);    if (!this.configuration.hasStatement(id, false)) {      return true;    }    // skip this statement if there is a previous one with a not null databaseId    MappedStatement previous = this.configuration.getMappedStatement(id, false); // issue #2    return previous.getDatabaseId() == null;  }  private LanguageDriver getLanguageDriver(String lang) {    Class<? extends LanguageDriver> langClass = null;    if (lang != null) {      langClass = resolveClass(lang);    }    return configuration.getLanguageDriver(langClass);  }}", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/xml/XMLStatementBuilder.java", "stars": "15", "class": {"name": "XMLStatementBuilder", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "parseStatementNode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void parseStatementNode() {    String id = context.getStringAttribute(\"id\");    String databaseId = context.getStringAttribute(\"databaseId\");    if (!databaseIdMatchesCurrent(id, databaseId, this.requiredDatabaseId)) {      return;    }    String nodeName = context.getNode().getNodeName();    SqlCommandType sqlCommandType = SqlCommandType.valueOf(nodeName.toUpperCase(Locale.ENGLISH));    boolean isSelect = sqlCommandType == SqlCommandType.SELECT;    boolean flushCache = context.getBooleanAttribute(\"flushCache\", !isSelect);    boolean useCache = context.getBooleanAttribute(\"useCache\", isSelect);    boolean resultOrdered = context.getBooleanAttribute(\"resultOrdered\", false);    // Include Fragments before parsing    XMLIncludeTransformer includeParser = new XMLIncludeTransformer(configuration, builderAssistant);    includeParser.applyIncludes(context.getNode());    String parameterType = context.getStringAttribute(\"parameterType\");    //Class<?> parameterTypeClass = resolveClass(parameterType); //modify by xuliang 20200403    Class<?> parameterTypeClass =Object.class;      String lang = context.getStringAttribute(\"lang\");    LanguageDriver langDriver = getLanguageDriver(lang);    // Parse selectKey after includes and remove them.    processSelectKeyNodes(id, parameterTypeClass, langDriver); //modify by xuliang 20200403    // Parse the SQL (pre: <selectKey> and <include> were parsed and removed)    KeyGenerator keyGenerator;    String keyStatementId = id + SelectKeyGenerator.SELECT_KEY_SUFFIX;    keyStatementId = builderAssistant.applyCurrentNamespace(keyStatementId, true);    if (configuration.hasKeyGenerator(keyStatementId)) {      keyGenerator = configuration.getKeyGenerator(keyStatementId);    } else {      keyGenerator = context.getBooleanAttribute(\"useGeneratedKeys\",          configuration.isUseGeneratedKeys() && SqlCommandType.INSERT.equals(sqlCommandType))          ? Jdbc3KeyGenerator.INSTANCE : NoKeyGenerator.INSTANCE;    }    SqlSource sqlSource = langDriver.createSqlSource(configuration, context, parameterTypeClass);    //add by xuliang 20200407    if (sqlSource instanceof DynamicSqlSource ) {      SqlNode sn= ((DynamicSqlSource) sqlSource).getRootSqlNode();      if (sn instanceof MixedSqlNode)      {        checkMixedSqlNode((MixedSqlNode)sn);      }      else if ( sn instanceof TextSqlNode)      {        TextSqlNode tn= (TextSqlNode)sn;        if(tn.getText().indexOf(\"${\")>-1 && tn.getText().toLowerCase().indexOf(\" from \")==-1 || tn.getText().indexOf(\"(${\")>-1 || tn.getText().indexOf(\"(${\")>-1 )        {          tn.setText(tn.getText().replace(\"${\",\"#{\"));        }      }    }    StatementType statementType = StatementType.valueOf(context.getStringAttribute(\"statementType\", StatementType.PREPARED.toString()));    Integer fetchSize = context.getIntAttribute(\"fetchSize\");    Integer timeout = context.getIntAttribute(\"timeout\");    String parameterMap = context.getStringAttribute(\"parameterMap\");    String resultType = context.getStringAttribute(\"resultType\");    //Class<?> resultTypeClass = resolveClass(resultType);//modify by xuliang 20200403    Class<?> resultTypeClass =Object.class;    String resultMap = context.getStringAttribute(\"resultMap\");    String resultSetType = context.getStringAttribute(\"resultSetType\");    ResultSetType resultSetTypeEnum = resolveResultSetType(resultSetType);    if (resultSetTypeEnum == null) {      resultSetTypeEnum = configuration.getDefaultResultSetType();    }    String keyProperty = context.getStringAttribute(\"keyProperty\");    String keyColumn = context.getStringAttribute(\"keyColumn\");    String resultSets = context.getStringAttribute(\"resultSets\");    builderAssistant.addMappedStatement(id, sqlSource, statementType, sqlCommandType,        fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass,        resultSetTypeEnum, flushCache, useCache, resultOrdered,        keyGenerator, keyProperty, keyColumn, databaseId, langDriver, resultSets);    //add by xuliang 20200403    System.out.println(\"@@@\"+id+\":\"+sqlSource.getSql());  }  private void processSelectKeyNodes(String id, Class<?> parameterTypeClass, LanguageDriver langDriver) {    List<XNode> selectKeyNodes = context.evalNodes(\"selectKey\");    if (configuration.getDatabaseId() != null) {      parseSelectKeyNodes(id, selectKeyNodes, parameterTypeClass, langDriver, configuration.getDatabaseId());    }    parseSelectKeyNodes(id, selectKeyNodes, parameterTypeClass, langDriver, null);    removeSelectKeyNodes(selectKeyNodes);  }  private void parseSelectKeyNodes(String parentId, List<XNode> list, Class<?> parameterTypeClass, LanguageDriver langDriver, String skRequiredDatabaseId) {    for (XNode nodeToHandle : list) {      String id = parentId + SelectKeyGenerator.SELECT_KEY_SUFFIX;      String databaseId = nodeToHandle.getStringAttribute(\"databaseId\");      if (databaseIdMatchesCurrent(id, databaseId, skRequiredDatabaseId)) {        parseSelectKeyNode(id, nodeToHandle, parameterTypeClass, langDriver, databaseId);      }    }  }  private void parseSelectKeyNode(String id, XNode nodeToHandle, Class<?> parameterTypeClass, LanguageDriver langDriver, String databaseId) {    String resultType = nodeToHandle.getStringAttribute(\"resultType\");    Class<?> resultTypeClass = resolveClass(resultType);    StatementType statementType = StatementType.valueOf(nodeToHandle.getStringAttribute(\"statementType\", StatementType.PREPARED.toString()));    String keyProperty = nodeToHandle.getStringAttribute(\"keyProperty\");    String keyColumn = nodeToHandle.getStringAttribute(\"keyColumn\");    boolean executeBefore = \"BEFORE\".equals(nodeToHandle.getStringAttribute(\"order\", \"AFTER\"));    //defaults    boolean useCache = false;    boolean resultOrdered = false;    KeyGenerator keyGenerator = NoKeyGenerator.INSTANCE;    Integer fetchSize = null;    Integer timeout = null;    boolean flushCache = false;    String parameterMap = null;    String resultMap = null;    ResultSetType resultSetTypeEnum = null;    SqlSource sqlSource = langDriver.createSqlSource(configuration, nodeToHandle, parameterTypeClass);    SqlCommandType sqlCommandType = SqlCommandType.SELECT;    builderAssistant.addMappedStatement(id, sqlSource, statementType, sqlCommandType,        fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass,        resultSetTypeEnum, flushCache, useCache, resultOrdered,        keyGenerator, keyProperty, keyColumn, databaseId, langDriver, null);    id = builderAssistant.applyCurrentNamespace(id, false);    MappedStatement keyStatement = configuration.getMappedStatement(id, false);    configuration.addKeyGenerator(id, new SelectKeyGenerator(keyStatement, executeBefore));  }  private void removeSelectKeyNodes(List<XNode> selectKeyNodes) {    for (XNode nodeToHandle : selectKeyNodes) {      nodeToHandle.getParent().getNode().removeChild(nodeToHandle.getNode());    }  }  private boolean databaseIdMatchesCurrent(String id, String databaseId, String requiredDatabaseId) {    if (requiredDatabaseId != null) {      return requiredDatabaseId.equals(databaseId);    }    if (databaseId != null) {      return false;    }    id = builderAssistant.applyCurrentNamespace(id, false);    if (!this.configuration.hasStatement(id, false)) {      return true;    }    // skip this statement if there is a previous one with a not null databaseId    MappedStatement previous = this.configuration.getMappedStatement(id, false); // issue #2    return previous.getDatabaseId() == null;  }  private LanguageDriver getLanguageDriver(String lang) {    Class<? extends LanguageDriver> langClass = null;    if (lang != null) {      langClass = resolveClass(lang);    }    return configuration.getLanguageDriver(langClass);  }}", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/xml/XMLStatementBuilder.java", "stars": "15", "class": {"name": "XMLStatementBuilder", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "processSelectKeyNodes", "params": ["String", "Class<?>", "LanguageDriver"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void processSelectKeyNodes(String id, Class<?> parameterTypeClass, LanguageDriver langDriver) {    List<XNode> selectKeyNodes = context.evalNodes(\"selectKey\");    if (configuration.getDatabaseId() != null) {      parseSelectKeyNodes(id, selectKeyNodes, parameterTypeClass, langDriver, configuration.getDatabaseId());    }    parseSelectKeyNodes(id, selectKeyNodes, parameterTypeClass, langDriver, null);    removeSelectKeyNodes(selectKeyNodes);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/xml/XMLStatementBuilder.java", "stars": "15", "class": {"name": "XMLStatementBuilder", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "parseSelectKeyNodes", "params": ["String", "List<XNode>", "Class<?>", "LanguageDriver", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void parseSelectKeyNodes(String parentId, List<XNode> list, Class<?> parameterTypeClass, LanguageDriver langDriver, String skRequiredDatabaseId) {    for (XNode nodeToHandle : list) {      String id = parentId + SelectKeyGenerator.SELECT_KEY_SUFFIX;      String databaseId = nodeToHandle.getStringAttribute(\"databaseId\");      if (databaseIdMatchesCurrent(id, databaseId, skRequiredDatabaseId)) {        parseSelectKeyNode(id, nodeToHandle, parameterTypeClass, langDriver, databaseId);      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/xml/XMLStatementBuilder.java", "stars": "15", "class": {"name": "XMLStatementBuilder", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "parseSelectKeyNode", "params": ["String", "XNode", "Class<?>", "LanguageDriver", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void parseSelectKeyNode(String id, XNode nodeToHandle, Class<?> parameterTypeClass, LanguageDriver langDriver, String databaseId) {    String resultType = nodeToHandle.getStringAttribute(\"resultType\");    Class<?> resultTypeClass = resolveClass(resultType);    StatementType statementType = StatementType.valueOf(nodeToHandle.getStringAttribute(\"statementType\", StatementType.PREPARED.toString()));    String keyProperty = nodeToHandle.getStringAttribute(\"keyProperty\");    String keyColumn = nodeToHandle.getStringAttribute(\"keyColumn\");    boolean executeBefore = \"BEFORE\".equals(nodeToHandle.getStringAttribute(\"order\", \"AFTER\"));    //defaults    boolean useCache = false;    boolean resultOrdered = false;    KeyGenerator keyGenerator = NoKeyGenerator.INSTANCE;    Integer fetchSize = null;    Integer timeout = null;    boolean flushCache = false;    String parameterMap = null;    String resultMap = null;    ResultSetType resultSetTypeEnum = null;    SqlSource sqlSource = langDriver.createSqlSource(configuration, nodeToHandle, parameterTypeClass);    SqlCommandType sqlCommandType = SqlCommandType.SELECT;    builderAssistant.addMappedStatement(id, sqlSource, statementType, sqlCommandType,        fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass,        resultSetTypeEnum, flushCache, useCache, resultOrdered,        keyGenerator, keyProperty, keyColumn, databaseId, langDriver, null);    id = builderAssistant.applyCurrentNamespace(id, false);    MappedStatement keyStatement = configuration.getMappedStatement(id, false);    configuration.addKeyGenerator(id, new SelectKeyGenerator(keyStatement, executeBefore));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/xml/XMLStatementBuilder.java", "stars": "15", "class": {"name": "XMLStatementBuilder", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "removeSelectKeyNodes", "params": ["List<XNode>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void removeSelectKeyNodes(List<XNode> selectKeyNodes) {    for (XNode nodeToHandle : selectKeyNodes) {      nodeToHandle.getParent().getNode().removeChild(nodeToHandle.getNode());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/xml/XMLStatementBuilder.java", "stars": "15", "class": {"name": "XMLStatementBuilder", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "databaseIdMatchesCurrent", "params": ["String", "String", "String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean databaseIdMatchesCurrent(String id, String databaseId, String requiredDatabaseId) {    if (requiredDatabaseId != null) {      return requiredDatabaseId.equals(databaseId);    }    if (databaseId != null) {      return false;    }    id = builderAssistant.applyCurrentNamespace(id, false);    if (!this.configuration.hasStatement(id, false)) {      return true;    }    // skip this statement if there is a previous one with a not null databaseId    MappedStatement previous = this.configuration.getMappedStatement(id, false); // issue #2    return previous.getDatabaseId() == null;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/xml/XMLStatementBuilder.java", "stars": "15", "class": {"name": "XMLStatementBuilder", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "getLanguageDriver", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "LanguageDriver", "snippet": "  private LanguageDriver getLanguageDriver(String lang) {    Class<? extends LanguageDriver> langClass = null;    if (lang != null) {      langClass = resolveClass(lang);    }    return configuration.getLanguageDriver(langClass);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/xml/XMLStatementBuilder.java", "stars": "15", "class": {"name": "XMLStatementBuilder", "extends": "BaseBuilder", "implements": null, "modifiers": ["public"]}}, {"method_name": "onViewAttachedToWindow", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onViewAttachedToWindow (android.view.View p0)\t{\t\tn_onViewAttachedToWindow (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/VisualElementTracker_AttachTracker.java", "stars": "2", "class": {"name": "VisualElementTracker_AttachTracker", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onViewAttachedToWindow", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onViewAttachedToWindow (android.view.View p0);\tpublic void onViewDetachedFromWindow (android.view.View p0)\t{\t\tn_onViewDetachedFromWindow (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/VisualElementTracker_AttachTracker.java", "stars": "2", "class": {"name": "VisualElementTracker_AttachTracker", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onViewDetachedFromWindow", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onViewDetachedFromWindow (android.view.View p0)\t{\t\tn_onViewDetachedFromWindow (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/VisualElementTracker_AttachTracker.java", "stars": "2", "class": {"name": "VisualElementTracker_AttachTracker", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onViewDetachedFromWindow", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onViewDetachedFromWindow (android.view.View p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/VisualElementTracker_AttachTracker.java", "stars": "2", "class": {"name": "VisualElementTracker_AttachTracker", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/VisualElementTracker_AttachTracker.java", "stars": "2", "class": {"name": "VisualElementTracker_AttachTracker", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/VisualElementTracker_AttachTracker.java", "stars": "2", "class": {"name": "VisualElementTracker_AttachTracker", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "isLinux", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean isLinux(){\t\treturn OS.indexOf(\"linux\")>=0;\t}", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/util/OSinfo.java", "stars": "7", "class": {"name": "OSinfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isMacOS", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean isMacOS(){\t\treturn OS.indexOf(\"mac\")>=0&&OS.indexOf(\"os\")>0&&OS.indexOf(\"x\")<0;\t}", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/util/OSinfo.java", "stars": "7", "class": {"name": "OSinfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isMacOSX", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean isMacOSX(){\t\treturn OS.indexOf(\"mac\")>=0&&OS.indexOf(\"os\")>0&&OS.indexOf(\"x\")>0;\t}", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/util/OSinfo.java", "stars": "7", "class": {"name": "OSinfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isWindows", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean isWindows(){\t\treturn OS.indexOf(\"windows\")>=0;\t}", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/util/OSinfo.java", "stars": "7", "class": {"name": "OSinfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isOS2", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean isOS2(){\t\treturn OS.indexOf(\"os/2\")>=0;\t}", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/util/OSinfo.java", "stars": "7", "class": {"name": "OSinfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isSolaris", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean isSolaris(){\t\treturn OS.indexOf(\"solaris\")>=0;\t}", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/util/OSinfo.java", "stars": "7", "class": {"name": "OSinfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isSunOS", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean isSunOS(){\t\treturn OS.indexOf(\"sunos\")>=0;\t}", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/util/OSinfo.java", "stars": "7", "class": {"name": "OSinfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isMPEiX", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean isMPEiX(){\t\treturn OS.indexOf(\"mpe/ix\")>=0;\t}", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/util/OSinfo.java", "stars": "7", "class": {"name": "OSinfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isHPUX", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean isHPUX(){\t\treturn OS.indexOf(\"hp-ux\")>=0;\t}", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/util/OSinfo.java", "stars": "7", "class": {"name": "OSinfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isAix", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean isAix(){\t\treturn OS.indexOf(\"aix\")>=0;\t}", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/util/OSinfo.java", "stars": "7", "class": {"name": "OSinfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isOS390", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean isOS390(){\t\treturn OS.indexOf(\"os/390\")>=0;\t}", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/util/OSinfo.java", "stars": "7", "class": {"name": "OSinfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isFreeBSD", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean isFreeBSD(){\t\treturn OS.indexOf(\"freebsd\")>=0;\t}", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/util/OSinfo.java", "stars": "7", "class": {"name": "OSinfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isIrix", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean isIrix(){\t\treturn OS.indexOf(\"irix\")>=0;\t}", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/util/OSinfo.java", "stars": "7", "class": {"name": "OSinfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isDigitalUnix", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean isDigitalUnix(){\t\treturn OS.indexOf(\"digital\")>=0&&OS.indexOf(\"unix\")>0;\t}", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/util/OSinfo.java", "stars": "7", "class": {"name": "OSinfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isNetWare", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean isNetWare(){\t\treturn OS.indexOf(\"netware\")>=0;\t}", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/util/OSinfo.java", "stars": "7", "class": {"name": "OSinfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isOSF1", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean isOSF1(){\t\treturn OS.indexOf(\"osf1\")>=0;\t}", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/util/OSinfo.java", "stars": "7", "class": {"name": "OSinfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isOpenVMS", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean isOpenVMS(){\t\treturn OS.indexOf(\"openvms\")>=0;\t}", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/util/OSinfo.java", "stars": "7", "class": {"name": "OSinfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOSname", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "EPlatform", "snippet": "\tpublic static EPlatform getOSname(){\t\tif(isAix()){\t\t\t_instance.platform = EPlatform.AIX;\t\t}else if (isDigitalUnix()) {\t\t\t_instance.platform = EPlatform.Digital_Unix;\t\t}else if (isFreeBSD()) {\t\t\t_instance.platform = EPlatform.FreeBSD;\t\t}else if (isHPUX()) {\t\t\t_instance.platform = EPlatform.HP_UX;\t\t}else if (isIrix()) {\t\t\t_instance.platform = EPlatform.Irix;\t\t}else if (isLinux()) {\t\t\t_instance.platform = EPlatform.Linux;\t\t}else if (isMacOS()) {\t\t\t_instance.platform = EPlatform.Mac_OS;\t\t}else if (isMacOSX()) {\t\t\t_instance.platform = EPlatform.Mac_OS_X;\t\t}else if (isMPEiX()) {\t\t\t_instance.platform = EPlatform.MPEiX;\t\t}else if (isNetWare()) {\t\t\t_instance.platform = EPlatform.NetWare_411;\t\t}else if (isOpenVMS()) {\t\t\t_instance.platform = EPlatform.OpenVMS;\t\t}else if (isOS2()) {\t\t\t_instance.platform = EPlatform.OS2;\t\t}else if (isOS390()) {\t\t\t_instance.platform = EPlatform.OS390;\t\t}else if (isOSF1()) {\t\t\t_instance.platform = EPlatform.OSF1;\t\t}else if (isSolaris()) {\t\t\t_instance.platform = EPlatform.Solaris;\t\t}else if (isSunOS()) {\t\t\t_instance.platform = EPlatform.SunOS;\t\t}else if (isWindows()) {\t\t\t_instance.platform = EPlatform.Windows;\t\t}else{\t\t\t_instance.platform = EPlatform.Others;\t\t}\t\treturn _instance.platform;\t}", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/util/OSinfo.java", "stars": "7", "class": {"name": "OSinfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tSystem.out.println(OSinfo.getOSname());\t\tSystem.out.println(\"isWindows:\"+OSinfo.isWindows());\t\tSystem.out.println(\"isLinux\"+OSinfo.isLinux());\t\tSystem.out.println(\"isMacOS:\"+OSinfo.isMacOS());\t\tSystem.out.println(\"isMacOSX:\"+OSinfo.isMacOSX());\t}", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/util/OSinfo.java", "stars": "7", "class": {"name": "OSinfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFilesMatchingPath", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "File", "snippet": "  private File[] getFilesMatchingPath(final String path) {    if (path.endsWith(\"*\")) {      final File dir = new File(path.substring(0, path.lastIndexOf(\"/\") + 1));      final FileFilter fileFilter = new WildcardFileFilter(path.substring(path.lastIndexOf(\"/\")          + 1));      final File[] files = dir.listFiles(fileFilter);      return files;    } else {      return new File[]{new File(path)};    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/plugin/FlowTriggerDependencyPluginManager.java", "stars": "18", "class": {"name": "FlowTriggerDependencyPluginManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readConfig", "params": ["File"], "throws": ["FlowTriggerDependencyPluginException"], "modifiers": ["private"], "return_type": "Map<String,String>", "snippet": "  private Map<String, String> readConfig(final File file) throws      FlowTriggerDependencyPluginException {    final Properties props = new Properties();    InputStream input = null;    try {      input = new BufferedInputStream(new FileInputStream(file));      props.load(input);    } catch (final Exception e) {      logger.debug(\"unable to read the file \" + file, e);      throw new FlowTriggerDependencyPluginException(e);    } finally {      try {        if (input != null) {          input.close();        }      } catch (final IOException e) {        logger.error(\"unable to close input stream when reading config from file \" + file            .getAbsolutePath(), e);      }    }    return Maps.fromProperties(props);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/plugin/FlowTriggerDependencyPluginManager.java", "stars": "18", "class": {"name": "FlowTriggerDependencyPluginManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "validatePluginConfig", "params": ["DependencyPluginConfig"], "throws": ["FlowTriggerDependencyPluginException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void validatePluginConfig(final DependencyPluginConfig pluginConfig)      throws FlowTriggerDependencyPluginException {    for (final String requiredField : ImmutableSet        .of(DEPENDENCY_CLASS, CLASS_PATH)) {      if (StringUtils.isEmpty(pluginConfig.get(requiredField))) {        throw new FlowTriggerDependencyPluginException(\"missing \" + requiredField + \" in \"            + \"dependency plugin properties\");      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/plugin/FlowTriggerDependencyPluginManager.java", "stars": "18", "class": {"name": "FlowTriggerDependencyPluginManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "mergePluginConfig", "params": ["Map<String,String>", "Map<String,String>"], "throws": ["FlowTriggerDependencyPluginException"], "modifiers": ["private"], "return_type": "DependencyPluginConfig", "snippet": "  private DependencyPluginConfig mergePluginConfig(final Map<String, String> publicProps,      final Map<String, String> privateProps) throws FlowTriggerDependencyPluginException {    final Map<String, String> combined = new HashMap<>();    combined.putAll(publicProps);    combined.putAll(privateProps);    if (combined.size() != publicProps.size() + privateProps.size()) {      throw new FlowTriggerDependencyPluginException(\"duplicate property found in both public and\"          + \" private properties\");    }    return new DependencyPluginConfigImpl(combined);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/plugin/FlowTriggerDependencyPluginManager.java", "stars": "18", "class": {"name": "FlowTriggerDependencyPluginManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createDependencyCheck", "params": ["DependencyPluginConfig"], "throws": ["FlowTriggerDependencyPluginException"], "modifiers": ["private"], "return_type": "DependencyCheck", "snippet": "  private DependencyCheck createDependencyCheck(final DependencyPluginConfig pluginConfig)      throws FlowTriggerDependencyPluginException {    final String classPath = pluginConfig.get(CLASS_PATH);    final String[] cpList = classPath.split(\",\");    final List<URL> resources = new ArrayList<>();    try {      for (final String cp : cpList) {        final File[] files = getFilesMatchingPath(cp);        if (files != null) {          for (final File file : files) {            final URL cpItem = file.toURI().toURL();            if (!resources.contains(cpItem)) {              logger.info(\"adding to classpath \" + cpItem);              resources.add(cpItem);            }          }        }      }    } catch (final Exception ex) {      throw new FlowTriggerDependencyPluginException(ex);    }    final ClassLoader dependencyClassloader = new ParentLastURLClassLoader(        resources.toArray(new URL[resources.size()]), this.getClass().getClassLoader());    Thread.currentThread().setContextClassLoader(dependencyClassloader);    Class<? extends DependencyCheck> clazz = null;    try {      clazz = (Class<? extends DependencyCheck>) dependencyClassloader.loadClass(pluginConfig.get          (DEPENDENCY_CLASS));      return (DependencyCheck) Utils.callConstructor(clazz);    } catch (final Exception ex) {      throw new FlowTriggerDependencyPluginException(ex);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/plugin/FlowTriggerDependencyPluginManager.java", "stars": "18", "class": {"name": "FlowTriggerDependencyPluginManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadDependencyPlugin", "params": ["File"], "throws": ["FlowTriggerDependencyPluginException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void loadDependencyPlugin(final File pluginDir)      throws FlowTriggerDependencyPluginException {    if (pluginDir.isDirectory() && pluginDir.canRead()) {      try {        final DependencyPluginConfig pluginConfig = createPluginConfig(pluginDir);        final DependencyCheck depCheck = createDependencyCheck(pluginConfig);        final String pluginName = getPluginName(pluginDir);        depCheck.init(pluginConfig);        this.dependencyTypeMap.put(pluginName, depCheck);      } catch (final Exception ex) {        logger.error(\"failed to initializing plugin in \" + pluginDir, ex);        throw new FlowTriggerDependencyPluginException(ex);      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/plugin/FlowTriggerDependencyPluginManager.java", "stars": "18", "class": {"name": "FlowTriggerDependencyPluginManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadAllPlugins", "params": [], "throws": ["FlowTriggerDependencyPluginException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void loadAllPlugins() throws FlowTriggerDependencyPluginException {    final File pluginDir = new File(this.pluginDir);    for (final File dir : pluginDir.listFiles()) {      loadDependencyPlugin(dir);    }    //reset thread context loader so that other azkaban class will be loaded with the old    // classloader    Thread.currentThread().setContextClassLoader(this.prevClassLoader);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/plugin/FlowTriggerDependencyPluginManager.java", "stars": "18", "class": {"name": "FlowTriggerDependencyPluginManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPluginName", "params": ["File"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String getPluginName(final File dependencyPluginDir) {    //the name of the dependency plugin dir is treated as the name of the plugin    return dependencyPluginDir.getName();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/plugin/FlowTriggerDependencyPluginManager.java", "stars": "18", "class": {"name": "FlowTriggerDependencyPluginManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readPublicConfig", "params": ["File"], "throws": ["FlowTriggerDependencyPluginException"], "modifiers": ["private"], "return_type": "Map<String,String>", "snippet": "  private Map<String, String> readPublicConfig(final File publicConfigFile)      throws FlowTriggerDependencyPluginException {    return readConfig(publicConfigFile);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/plugin/FlowTriggerDependencyPluginManager.java", "stars": "18", "class": {"name": "FlowTriggerDependencyPluginManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readPrivateConfig", "params": ["File"], "throws": null, "modifiers": ["private"], "return_type": "Map<String,String>", "snippet": "  private Map<String, String> readPrivateConfig(final File privateConfigFile) {    try {      return readConfig(privateConfigFile);    } catch (final Exception ex) {      return new HashMap<>();    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/plugin/FlowTriggerDependencyPluginManager.java", "stars": "18", "class": {"name": "FlowTriggerDependencyPluginManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createPluginConfig", "params": ["File"], "throws": ["FlowTriggerDependencyPluginException"], "modifiers": ["private"], "return_type": "DependencyPluginConfig", "snippet": "  private DependencyPluginConfig createPluginConfig(final File dir) throws      FlowTriggerDependencyPluginException {    final File publicConfigFile = new File(dir.getAbsolutePath() + \"/\" + CONFIG_FILE);    final File privateConfigFile = new File(dir.getAbsolutePath() + \"/\" + PRIVATE_CONFIG_FILE);    try {      final DependencyPluginConfig pluginConfig = mergePluginConfig(          readPublicConfig(publicConfigFile),          readPrivateConfig(privateConfigFile));      validatePluginConfig(pluginConfig);      return pluginConfig;    } catch (final FlowTriggerDependencyPluginException exception) {      throw new FlowTriggerDependencyPluginException(\"exception when initializing plugin \"          + \"config in \" + dir.getAbsolutePath() + \": \" + exception.getMessage());    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/plugin/FlowTriggerDependencyPluginManager.java", "stars": "18", "class": {"name": "FlowTriggerDependencyPluginManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDependencyCheck", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "DependencyCheck", "snippet": "  public DependencyCheck getDependencyCheck(final String type) {    return this.dependencyTypeMap.get(type);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/plugin/FlowTriggerDependencyPluginManager.java", "stars": "18", "class": {"name": "FlowTriggerDependencyPluginManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shutdown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void shutdown() {    for (final DependencyCheck depCheck : this.dependencyTypeMap.values()) {      try {        depCheck.shutdown();      } catch (final Exception ex) {        logger.error(\"failed to shutdown dependency check \" + depCheck, ex);      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-web-server/src/main/java/azkaban/flowtrigger/plugin/FlowTriggerDependencyPluginManager.java", "stars": "18", "class": {"name": "FlowTriggerDependencyPluginManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHueRange", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Range", "snippet": "    public Range getHueRange() {        return hueRange;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Auxiliary/Magic/EVE/Storage/ARadCenterStorage.java", "stars": "2", "class": {"name": "ARadCenterStorage", "extends": null, "implements": ["IARadCenter", "ICapabilityProvider", "INBTSerializable"], "modifiers": ["public"]}}, {"method_name": "getBrightnessRange", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Range", "snippet": "    public Range getBrightnessRange() {        return brightnessRange;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Auxiliary/Magic/EVE/Storage/ARadCenterStorage.java", "stars": "2", "class": {"name": "ARadCenterStorage", "extends": null, "implements": ["IARadCenter", "ICapabilityProvider", "INBTSerializable"], "modifiers": ["public"]}}, {"method_name": "hasCapability", "params": ["Capability<?>", "EnumFacing"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean hasCapability(@Nonnull Capability<?> capability, @Nullable EnumFacing facing) {        return capability == CapabilityEVE.EVE_CHUNK;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Auxiliary/Magic/EVE/Storage/ARadCenterStorage.java", "stars": "2", "class": {"name": "ARadCenterStorage", "extends": null, "implements": ["IARadCenter", "ICapabilityProvider", "INBTSerializable"], "modifiers": ["public"]}}, {"method_name": "getCapability", "params": ["Capability<T>", "EnumFacing"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public <T> T getCapability(@Nonnull Capability<T> capability, @Nullable EnumFacing facing) {        return capability == CapabilityEVE.EVE_CHUNK ? (T) this : null;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Auxiliary/Magic/EVE/Storage/ARadCenterStorage.java", "stars": "2", "class": {"name": "ARadCenterStorage", "extends": null, "implements": ["IARadCenter", "ICapabilityProvider", "INBTSerializable"], "modifiers": ["public"]}}, {"method_name": "serializeNBT", "params": [], "throws": null, "modifiers": ["public"], "return_type": "NBTTagCompound", "snippet": "    public NBTTagCompound serializeNBT() {        NBTTagCompound tag = new NBTTagCompound();        tag.setTag(\"hue\", NBTHelper.fromRange(hueRange));        tag.setTag(\"brightness\", NBTHelper.fromRange(brightnessRange));        return tag;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Auxiliary/Magic/EVE/Storage/ARadCenterStorage.java", "stars": "2", "class": {"name": "ARadCenterStorage", "extends": null, "implements": ["IARadCenter", "ICapabilityProvider", "INBTSerializable"], "modifiers": ["public"]}}, {"method_name": "deserializeNBT", "params": ["NBTTagCompound"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void deserializeNBT(NBTTagCompound nbt) {        if (nbt.hasKey(\"hue\"))            hueRange = NBTHelper.getRange((NBTTagCompound) nbt.getTag(\"hue\"));        else            hueRange = MathHelper.randRange();        if (nbt.hasKey(\"brightness\"))            brightnessRange = NBTHelper.getRange((NBTTagCompound) nbt.getTag(\"brightness\"));        else            hueRange = MathHelper.randRange(0.2f, 0.8f);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Auxiliary/Magic/EVE/Storage/ARadCenterStorage.java", "stars": "2", "class": {"name": "ARadCenterStorage", "extends": null, "implements": ["IARadCenter", "ICapabilityProvider", "INBTSerializable"], "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init(){        security.registerUserExternalDataAuthGetter(DataSourceModel.class, userName ->{            UserInfo userInfo = userInfoService.selectByUsername(userName);            if(userInfo.getUserType() >= UserRole.MANGER.getValue()){                //No limit                return null;            }            return Arrays.asList(\"\", null, userName);        });        security.registerExternalDataAuthGetter(DataSourceModel.class, dataSourceModel -> {            if(null == dataSourceModel){                return Collections.emptyList();            }            return Collections.singletonList(dataSourceModel.getCreateOwner());        });        security.registerExternalDataAuthScopeGetter(DataSourceModel.class, dataSourceModel -> Arrays.asList(DataAuthScope.READ, DataAuthScope.EXECUTE));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/DataSourceModelController.java", "stars": "23", "class": {"name": "DataSourceModelController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "getBaseService", "params": [], "throws": null, "modifiers": ["public"], "return_type": "IBaseService<DataSourceModel>", "snippet": "    public IBaseService<DataSourceModel> getBaseService() {        return dataSourceModelService;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/DataSourceModelController.java", "stars": "23", "class": {"name": "DataSourceModelController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "delete", "params": ["Long", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "Response<DataSourceModel>", "snippet": "    public Response<DataSourceModel> delete(@PathVariable Long id, HttpServletRequest request) {        if(!hasDataAuth(DataSourceModel.class, DataAuthScope.DELETE, request, getBaseService().get(id))){            return new Response<DataSourceModel>().errorResponse(CodeConstant.AUTH_ERROR, null, \"\u6ca1\u6709\u64cd\u4f5c\u6743\u9650(Unauthorized)\");        }        DataSourceQuery query = new DataSourceQuery();        query.setModelId(id.intValue());        List<DataSource> dataSources = dataSourceDao.selectAllList(query);        if(dataSources != null && dataSources.size() > 0){            return new Response<DataSourceModel>().errorResponse(CodeConstant.PARAMETER_ERROR, null, super.informationSwitch(\"exchange.data_source_model.in.used\"));        }        boolean result = getBaseService().delete(String.valueOf(id));        return result ? new Response<DataSourceModel>().successResponse(null) :                new Response<DataSourceModel>().errorResponse(1, null, \"\u5220\u9664\u5931\u8d25(Delete failed)\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/DataSourceModelController.java", "stars": "23", "class": {"name": "DataSourceModelController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "add", "params": ["DataSourceModel", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "Response<DataSourceModel>", "snippet": "    public Response<DataSourceModel> add(@Valid  @RequestBody DataSourceModel model, HttpServletRequest request){        DataSourceConnCheck connCheck = AbstractDataSourceConnCheck.getConnCheck(model.getSourceType(),null);        if (null == connCheck) {            return null;        }        security.bindUserInfo(model, request);        if(!StringUtils.isNotBlank(model.getCreateUser()) && isDuplicate(model.getModelName(), request)){            return new Response<DataSourceModel>().errorResponse(CodeConstant.PARAMETER_ERROR, null, super.informationSwitch(\"exchange.data_source_model.with.same.name\"));        }        //Set create owner        UserInfo userInfo = userInfoService.selectByUsername(model.getCreateUser());        if(null != userInfo && userInfo.getUserType() >= UserRole.MANGER.getValue()){            //Global visible            model.setCreateOwner(\"\");        }else{            model.setCreateOwner(model.getCreateUser());        }        try {            connCheck.validate(model);        } catch (Exception e) {            LOG.error(\"Validate connection parameters failed, message: [\" + e.getMessage() + \"]\");            throw new ConnParamsInValidException(super.informationSwitch(\"exchange.data_source_model.connect.format.error\"));        }        model.setModelName(StringEscapeUtils.escapeHtml3(model.getModelName()));        boolean ok = getBaseService().add(model);        return ok ? new Response<DataSourceModel>().successResponse(null) :                new Response<DataSourceModel>().errorResponse(CodeConstant.MODELASSEMBLIY_ADD_ERROR, null, super.informationSwitch(\"udes.modelassembly.add.template.failed\"));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/DataSourceModelController.java", "stars": "23", "class": {"name": "DataSourceModelController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "update", "params": ["DataSourceModel", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "Response<DataSourceModel>", "snippet": "    public Response<DataSourceModel> update(@Valid @RequestBody DataSourceModel model, HttpServletRequest request){        if(model.getId()  <= 0){            return new Response<DataSourceModel>().errorResponse(CodeConstant.PARAMETER_ERROR, null, super.informationSwitch(\"exchange.data_source_model.tempid.not.empty\"));        }        DataSourceModel osMA = dataSourceModelService.get(model.getId());        if(!hasDataAuth(DataSourceModel.class, DataAuthScope.WRITE, request, osMA)){            return new Response<DataSourceModel>().errorResponse(CodeConstant.AUTH_ERROR, null, \"\u6ca1\u6709\u64cd\u4f5c\u6743\u9650(Unauthorized)\");        }        DataSourceConnCheck connCheck = AbstractDataSourceConnCheck.getConnCheck(model.getSourceType(), null);        if( null == connCheck){            return null;        }        security.bindUserInfo(model, request);        try {            connCheck.validate(model);        } catch (Exception e) {            LOG.error(\"Validate connection parameters failed, message: \" + e.getMessage());            throw new ConnParamsInValidException(super.informationSwitch(\"exchange.data_source_model.connect.format.error\"));        }        if(!osMA.getModelName().equals(model.getModelName())                && StringUtils.isNotBlank(model.getCreateUser())                && isDuplicate(model.getModelName(), model.getCreateUser())){            return new Response<DataSourceModel>().errorResponse(CodeConstant.PARAMETER_ERROR, null, super.informationSwitch(\"exchange.data_source_model.with.same.name\"));        }        model.setModelName(StringEscapeUtils.escapeHtml3(model.getModelName()));        boolean ok = getBaseService().update(model);        return ok ? new Response<DataSourceModel>().successResponse(null) :                new Response<DataSourceModel>().errorResponse(CodeConstant.MODELASSEMBLIY_ADD_ERROR, null, super.informationSwitch(\"udes.modelassembly.add.template.failed\"));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/DataSourceModelController.java", "stars": "23", "class": {"name": "DataSourceModelController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "listByType", "params": ["String", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "Response<Object>", "snippet": "    public Response<Object> listByType(@PathVariable(\"modelType\")String modelType,                                       HttpServletRequest request){        String userName = security.getUserName(request);        DataSourceModelQuery query = new DataSourceModelQuery();        query.setSourceType(modelType);        if(StringUtils.isNotBlank(userName)) {            security.bindUserInfoAndDataAuth(query, request,                    security.userExternalDataAuthGetter(DataSourceModel.class).get(userName));        }        List<DataSourceModel> list = dataSourceModelService.selectAllList(query);        List<ModelTemplateStructure> structureList = list.stream().map(modelAssembly -> {            ModelTemplateStructure structure = new ModelTemplateStructure();            structure.setModelId(modelAssembly.getId());            structure.setModelName(modelAssembly.getModelName());            Map<String, Object> params = modelAssembly.resolveParams();            structure.setAuthType(                    String.valueOf(params.getOrDefault(Constants.PARAM_AUTH_TYPE, \"\")));            return structure;        }).collect(Collectors.toList());        return new Response<>().successResponse(structureList);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/DataSourceModelController.java", "stars": "23", "class": {"name": "DataSourceModelController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "pageList", "params": ["DataSourceModelQuery", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "Response<Object>", "snippet": "    public Response<Object> pageList(DataSourceModelQuery pageQuery, HttpServletRequest request) {        PageList<DataSourceModel> list = null;        int pageSize  = pageQuery.getPageSize();        if (pageSize == 0){            pageQuery.setPageSize(10);        }        String username = security.getUserName(request);        if(StringUtils.isNotBlank(username)) {            security.bindUserInfoAndDataAuth(pageQuery, request,                    security.userExternalDataAuthGetter(getActualType()).get(username));        }        list = getBaseService().findPage(pageQuery);        list.getData().forEach(element -> {            //Bind authority scopes            security.bindAuthScope(element, security.externalDataAuthScopeGetter(getActualType()).get(element));            if(StringUtils.isNotBlank(element.getCreateOwner()) && !element.getCreateOwner().equals(username)){                //Remove sensitive data                Map<String, Object> params = element.resolveParams();                Map<String, Object> newParams = new HashMap<>();                newParams.put(Constants.PARAM_AUTH_TYPE, params.getOrDefault(Constants.PARAM_AUTH_TYPE, AuthType.NONE));                element.setParameter(Json.toJson(newParams, null));            }        });        return new Response<>().successResponse(list);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/DataSourceModelController.java", "stars": "23", "class": {"name": "DataSourceModelController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "selectAll", "params": ["DataSourceModelQuery", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "Response<List>", "snippet": "    public Response<List<DataSourceModel>> selectAll(DataSourceModelQuery pageQuery, HttpServletRequest request) {        String username = security.getUserName(request);        if(StringUtils.isNotBlank(username)) {            security.bindUserInfoAndDataAuth(pageQuery, request,                    security.userExternalDataAuthGetter(getActualType()).get(username));        }        List<DataSourceModel> data = getBaseService().selectAllList(pageQuery);        data.forEach(element -> {            //Bind authority scopes            security.bindAuthScope(data, security.externalDataAuthScopeGetter(getActualType()).get(element));            if(StringUtils.isNotBlank(element.getCreateOwner()) && !element.getCreateOwner().equals(username)){                //Remove sensitive data                Map<String, Object> params = element.resolveParams();                Map<String, Object> newParams = new HashMap<>();                newParams.put(Constants.PARAM_AUTH_TYPE, params.getOrDefault(Constants.PARAM_AUTH_TYPE, AuthType.NONE));                element.setParameter(Json.toJson(newParams, null));            }        });        return new Response<List<DataSourceModel>>().successResponse(data);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/DataSourceModelController.java", "stars": "23", "class": {"name": "DataSourceModelController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "isDuplicate", "params": ["String", "HttpServletRequest"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isDuplicate(String tsName, HttpServletRequest request){        DataSourceModelQuery query = new DataSourceModelQuery();        query.setModelExactName(tsName);        String userName = security.getUserName(request);        if(StringUtils.isNotBlank(userName)){            security.bindUserInfoAndDataAuth(query, request,                    security.userExternalDataAuthGetter(DataSourceModel.class).get(userName));        }        return !dataSourceModelService.selectAllList(query).isEmpty();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/DataSourceModelController.java", "stars": "23", "class": {"name": "DataSourceModelController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "isDuplicate", "params": ["String", "String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isDuplicate(String tsName, String createUser){        DataSourceModelQuery query = new DataSourceModelQuery();        query.setModelExactName(tsName);        query.setCreateUser(createUser);        return !dataSourceModelService.selectAllList(query).isEmpty();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/DataSourceModelController.java", "stars": "23", "class": {"name": "DataSourceModelController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleResult", "params": ["ResultContext<?>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void handleResult(ResultContext<?> context) {    list.add(context.getResultObject());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/result/DefaultResultHandler.java", "stars": "15", "class": {"name": "DefaultResultHandler", "extends": null, "implements": ["ResultHandler"], "modifiers": ["public"]}}, {"method_name": "getResultList", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Object>", "snippet": "  public List<Object> getResultList() {    return list;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/executor/result/DefaultResultHandler.java", "stars": "15", "class": {"name": "DefaultResultHandler", "extends": null, "implements": ["ResultHandler"], "modifiers": ["public"]}}, {"method_name": "suma", "params": ["Double", "Double"], "throws": null, "modifiers": ["public"], "return_type": "Double", "snippet": "    public Double suma(Double numeroUno, Double numeroDos){    this.numeroUno=numeroUno;        this.numeroUno=numeroDos;     System.out.print(numeroUno+\"+\"+numeroDos+\"=\");    return  numeroUno+numeroDos;    }", "url": "https://raw.githubusercontent.com/asuescun/Matematicas-Locas/master/operacionesBasicas.java", "stars": "2", "class": {"name": "operacionesBasicas", "extends": "numeros", "implements": null, "modifiers": ["public"]}}, {"method_name": "resta", "params": ["Double", "Double"], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "    public double resta(Double numeroUno, Double numeroDos){      System.out.print(numeroUno+\"-\"+numeroDos+\"=\");    return  numeroUno-numeroDos;    }", "url": "https://raw.githubusercontent.com/asuescun/Matematicas-Locas/master/operacionesBasicas.java", "stars": "2", "class": {"name": "operacionesBasicas", "extends": "numeros", "implements": null, "modifiers": ["public"]}}, {"method_name": "multiplicacion", "params": ["Double", "Double"], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "    public double multiplicacion(Double numeroUno, Double numeroDos){        System.out.print(numeroUno+\"*\"+numeroDos+\"=\");        return  numeroUno*numeroDos;     }", "url": "https://raw.githubusercontent.com/asuescun/Matematicas-Locas/master/operacionesBasicas.java", "stars": "2", "class": {"name": "operacionesBasicas", "extends": "numeros", "implements": null, "modifiers": ["public"]}}, {"method_name": "division", "params": ["Double", "Double"], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "    public double division(Double numeroUno, Double numeroDos){        if(numeroDos==0){            System.out.println(\"no se puede dividir entre cero\");        }else{     System.out.print(numeroUno+\"/\"+numeroDos+\"=\");     return  numeroUno/numeroDos;}        return 0;    }", "url": "https://raw.githubusercontent.com/asuescun/Matematicas-Locas/master/operacionesBasicas.java", "stars": "2", "class": {"name": "operacionesBasicas", "extends": "numeros", "implements": null, "modifiers": ["public"]}}, {"method_name": "startActivity", "params": ["Activity"], "throws": null, "modifiers": ["public", "static"], "return_type": "Intent", "snippet": "\tpublic static Intent startActivity(Activity activity) {\t\tIntent intent = new Intent(activity, TVWelcomeActivity.class);\t\tactivity.startActivity(intent);\t\treturn intent;\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVWelcomeActivity.java", "stars": "4", "class": {"name": "TVWelcomeActivity", "extends": "TVBaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void onCreate(Bundle savedInstanceState) {\t\tTVButterApplication.getAppContext()\t\t\t\t.getComponent()\t\t\t\t.inject(this);\t\tsuper.onCreate(savedInstanceState, R.layout.activity_welcome);\t}", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/activities/TVWelcomeActivity.java", "stars": "4", "class": {"name": "TVWelcomeActivity", "extends": "TVBaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getRgbData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte[] getRgbData() {        return rgbData;    }", "url": "https://raw.githubusercontent.com/ck003/face_recognition/master/src/main/java/me/kyriechen/face_recognition/dto/ImageInfo.java", "stars": "2", "class": {"name": "ImageInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRgbData", "params": ["byte"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRgbData(byte[] rgbData) {        this.rgbData = rgbData;    }", "url": "https://raw.githubusercontent.com/ck003/face_recognition/master/src/main/java/me/kyriechen/face_recognition/dto/ImageInfo.java", "stars": "2", "class": {"name": "ImageInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getWidth", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getWidth() {        return width;    }", "url": "https://raw.githubusercontent.com/ck003/face_recognition/master/src/main/java/me/kyriechen/face_recognition/dto/ImageInfo.java", "stars": "2", "class": {"name": "ImageInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setWidth", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setWidth(int width) {        this.width = width;    }", "url": "https://raw.githubusercontent.com/ck003/face_recognition/master/src/main/java/me/kyriechen/face_recognition/dto/ImageInfo.java", "stars": "2", "class": {"name": "ImageInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHeight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getHeight() {        return height;    }", "url": "https://raw.githubusercontent.com/ck003/face_recognition/master/src/main/java/me/kyriechen/face_recognition/dto/ImageInfo.java", "stars": "2", "class": {"name": "ImageInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setHeight", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setHeight(int height) {        this.height = height;    }", "url": "https://raw.githubusercontent.com/ck003/face_recognition/master/src/main/java/me/kyriechen/face_recognition/dto/ImageInfo.java", "stars": "2", "class": {"name": "ImageInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onMessage", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onMessage(String content) {\t\tSystem.out.println(\"----> \" + content);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-jta-jndi/src/main/java/smoketest/jndi/Messages.java", "stars": "47572", "class": {"name": "Messages", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getString", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getString(String key) {        return this.stringHashMap.get(key);    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/object/RoomObjectModel.java", "stars": "2", "class": {"name": "RoomObjectModel", "extends": null, "implements": ["IRoomObjectModel"], "modifiers": ["public"]}}, {"method_name": "setString", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setString(String key, String value) {        this.stringHashMap.put(key, value);    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/object/RoomObjectModel.java", "stars": "2", "class": {"name": "RoomObjectModel", "extends": null, "implements": ["IRoomObjectModel"], "modifiers": ["public"]}}, {"method_name": "getNumber", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getNumber(String key) {        return this.numberHashMap.get(key);    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/object/RoomObjectModel.java", "stars": "2", "class": {"name": "RoomObjectModel", "extends": null, "implements": ["IRoomObjectModel"], "modifiers": ["public"]}}, {"method_name": "setNumber", "params": ["String", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setNumber(String key, int value) {        this.numberHashMap.put(key, value);    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/room/src/main/java/com/nitro/room/object/RoomObjectModel.java", "stars": "2", "class": {"name": "RoomObjectModel", "extends": null, "implements": ["IRoomObjectModel"], "modifiers": ["public"]}}, {"method_name": "checkType", "params": [], "throws": ["TypeException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void checkType() throws TypeException {\t\tthis.getLeft().checkType();\t\tthis.getRight().checkType();\t\tgetLeft().getType().assertType(this, TypeCode.INTEGER);\t\tgetLeft().getType().assertType(this, getRight().getType());\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprMOD.java", "stars": "3", "class": {"name": "ExprMOD", "extends": "ExprBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "generateCode", "params": [], "throws": ["CodeException"], "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String generateCode() throws CodeException {\t\tString result;\t\tresult = \"(\" + getLeft().generateCode()\t\t\t\t+ \" % \" + getRight().generateCode() + \")\";\t\treturn result;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprMOD.java", "stars": "3", "class": {"name": "ExprMOD", "extends": "ExprBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "constEval", "params": ["Environment<ExprVALUE>"], "throws": ["EnvironmentException", "TypeException"], "modifiers": ["public"], "return_type": "Object", "snippet": "\tpublic Object constEval(Environment<ExprVALUE> environment) throws EnvironmentException, TypeException {\t\tObject o1 = getLeft().constEval(environment);\t\tObject o2 = getRight().constEval(environment);\t\tif ((o1 instanceof Integer) && (o2 instanceof Integer)) \t\t\treturn new Integer((Integer)o1 % (Integer)o2);\t\telse\t\t\tthrow new TypeException(\"Impossible de calculer la constante, erreur de type\", line, column);\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprMOD.java", "stars": "3", "class": {"name": "ExprMOD", "extends": "ExprBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\treturn \"(\" + this.getLeft() + \" % \" + this.getRight() + \")\";\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprMOD.java", "stars": "3", "class": {"name": "ExprMOD", "extends": "ExprBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "validateWhitelisted", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void validateWhitelisted(String id) {    if (whitelistSet.contains(id)) {      return;    }    throw new UnsupportedOperationException(id + \" is not authorized\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/javautils/Whitelist.java", "stars": "18", "class": {"name": "Whitelist", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "validateWhitelisted", "params": ["Props"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void validateWhitelisted(Props props) {    String id = null;    if (props.containsKey(PROXY_USER_KEY)) {      id = props.get(PROXY_USER_KEY);      Preconditions.checkArgument(!StringUtils.isEmpty(id), PROXY_USER_KEY + \" is required.\");    } else if (props.containsKey(CommonJobProperties.SUBMIT_USER)) {      id = props.get(CommonJobProperties.SUBMIT_USER);      Preconditions.checkArgument(!StringUtils.isEmpty(id), CommonJobProperties.SUBMIT_USER + \" is required.\");    } else {      throw new IllegalArgumentException(\"Property neither has \" + PROXY_USER_KEY + \" nor \" + CommonJobProperties.SUBMIT_USER);    }    validateWhitelisted(id);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/javautils/Whitelist.java", "stars": "18", "class": {"name": "Whitelist", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "retrieveWhitelist", "params": ["FileSystem", "Path"], "throws": null, "modifiers": [], "return_type": "Set<String>", "snippet": "  Set<String> retrieveWhitelist(FileSystem fs, Path path) {    try {      Preconditions.checkArgument(fs.exists(path), \"File does not exist at \" + path);      Preconditions.checkArgument(fs.isFile(path), \"Whitelist path is not a file. \" + path);      Set<String> result = Sets.newHashSet();      try (BufferedReader br = new BufferedReader(new InputStreamReader(fs.open(path)))) {        String s = null;        while (!StringUtils.isEmpty((s = br.readLine()))) {          result.add(s);        }      }      return result;    } catch (IOException e) {      throw new RuntimeException(e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/javautils/Whitelist.java", "stars": "18", "class": {"name": "Whitelist", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    return \"Whitelist [whitelistSet=\" + whitelistSet + \"]\";  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/javautils/Whitelist.java", "stars": "18", "class": {"name": "Whitelist", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getState", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getState() {        return state;    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/memento/GameRoleMemento.java", "stars": "2", "class": {"name": "GameRoleMemento", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onCreate(Bundle savedInstanceState) {\t\tsuper.onCreate(savedInstanceState);\t\tsetContentView(R.layout.career);\t\tcareerMap = (Career) getIntent().getSerializableExtra(\"career\");\t\tprovider_name = getIntent().getStringExtra(\"provider\");\t\t// Set title\t\tcareerLayout = (LinearLayout) this.findViewById(R.id.careerLayout);\t\tbtnCareer = (TextView) this.findViewById(R.id.btnCareer);\t\tbtnRecommendation = (TextView) this.findViewById(R.id.btnRecommendation);\t\tbtnEducation = (TextView) this.findViewById(R.id.btnEducation);\t\tbtnCareer.setOnClickListener(this);\t\tbtnRecommendation.setOnClickListener(this);\t\tbtnEducation.setOnClickListener(this);\t\theadline = (TextView) findViewById(R.id.headline);\t\tposList = new ListView(this);\t\trecommendList = new ListView(this);\t\teduList = new ListView(this);\t\tif (careerMap.getHeadline() != null)\t\t\theadline.setText(careerMap.getHeadline());\t\tif (careerMap.getPositions().length > 0) {\t\t\tPosition[] pos = careerMap.getPositions();\t\t\tposList.setAdapter(new PositionAdapter(CareerActivity.this, 0, pos));\t\t}\t\tif (careerMap.getRecommendations().length > 0) {\t\t\tRecommendation[] recommendation = careerMap.getRecommendations();\t\t\trecommendList.setAdapter(new RecommendAdapter(CareerActivity.this, 0, recommendation));\t\t}\t\tif (careerMap.getEducations().length > 0) {\t\t\tEducation[] edu = careerMap.getEducations();\t\t\teduList.setAdapter(new EducationAdapter(CareerActivity.this, 0, edu));\t\t}\t\tcareerLayout.addView(posList);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CareerActivity.java", "stars": "74", "class": {"name": "CareerActivity", "extends": "Activity", "implements": ["OnClickListener"], "modifiers": ["public"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onClick(View v) {\t\tif (v == btnCareer) {\t\t\tcareerLayout.removeAllViews();\t\t\tcareerLayout.addView(posList);\t\t} else if (v == btnRecommendation) {\t\t\tcareerLayout.removeAllViews();\t\t\tcareerLayout.addView(recommendList);\t\t} else if (v == btnEducation) {\t\t\tcareerLayout.removeAllViews();\t\t\tcareerLayout.addView(eduList);\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CareerActivity.java", "stars": "74", "class": {"name": "CareerActivity", "extends": "Activity", "implements": ["OnClickListener"], "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\t\tpublic int getCount() {\t\t\treturn posArray.length;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CareerActivity.java", "stars": "74", "class": {"name": "PositionAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": []}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "\t\tpublic Object getItem(int position) {\t\t\treturn position;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CareerActivity.java", "stars": "74", "class": {"name": "PositionAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": []}}, {"method_name": "getItemId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "\t\tpublic long getItemId(int position) {\t\t\treturn position;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CareerActivity.java", "stars": "74", "class": {"name": "PositionAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": []}}, {"method_name": "getView", "params": ["int", "View", "ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "\t\tpublic View getView(final int position, View convertView, ViewGroup parent) {\t\t\tViewHolder holder;\t\t\tfinal Position pos = posArray[position];\t\t\tif (convertView == null) {\t\t\t\tconvertView = mInflater.inflate(R.layout.position, null);\t\t\t\tholder = new ViewHolder();\t\t\t\tholder.companyName = (TextView) convertView.findViewById(R.id.companyName);\t\t\t\tholder.industry = (TextView) convertView.findViewById(R.id.industry);\t\t\t\tholder.title = (TextView) convertView.findViewById(R.id.title);\t\t\t\tconvertView.setTag(holder);\t\t\t} else {\t\t\t\t// Get the ViewHolder back to get fast access to the TextView\t\t\t\t// and the ImageView.\t\t\t\tholder = (ViewHolder) convertView.getTag();\t\t\t}\t\t\tholder.companyName.setText(pos.getCompanyName());\t\t\tholder.industry.setText(pos.getIndustry());\t\t\tholder.title.setText(pos.getTitle());\t\t\treturn convertView;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CareerActivity.java", "stars": "74", "class": {"name": "PositionAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": []}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\t\tpublic int getCount() {\t\t\treturn recArray.length;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CareerActivity.java", "stars": "74", "class": {"name": "RecommendAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": []}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "\t\tpublic Object getItem(int position) {\t\t\treturn position;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CareerActivity.java", "stars": "74", "class": {"name": "RecommendAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": []}}, {"method_name": "getItemId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "\t\tpublic long getItemId(int position) {\t\t\treturn position;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CareerActivity.java", "stars": "74", "class": {"name": "RecommendAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": []}}, {"method_name": "getView", "params": ["int", "View", "ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "\t\tpublic View getView(final int position, View convertView, ViewGroup parent) {\t\t\tViewHolder holder;\t\t\tfinal Recommendation recm = recArray[position];\t\t\tif (convertView == null) {\t\t\t\tconvertView = mInflater.inflate(R.layout.recommend, null);\t\t\t\tholder = new ViewHolder();\t\t\t\tholder.recommender = (TextView) convertView.findViewById(R.id.recommender);\t\t\t\tholder.recommenderType = (TextView) convertView.findViewById(R.id.recommenderType);\t\t\t\tholder.recommenderText = (TextView) convertView.findViewById(R.id.recommenderText);\t\t\t\tconvertView.setTag(holder);\t\t\t} else {\t\t\t\t// Get the ViewHolder back to get fast access to the TextView\t\t\t\t// and the ImageView.\t\t\t\tholder = (ViewHolder) convertView.getTag();\t\t\t}\t\t\tholder.recommender.setText(recm.getRecommenderFirstName() + \"\" + recm.getRecommenderLastName());\t\t\tholder.recommenderType.setText(recm.getRecommendationType());\t\t\tholder.recommenderText.setText(recm.getRecommendationText());\t\t\treturn convertView;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CareerActivity.java", "stars": "74", "class": {"name": "RecommendAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": []}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\t\tpublic int getCount() {\t\t\treturn eduArray.length;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CareerActivity.java", "stars": "74", "class": {"name": "EducationAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": []}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "\t\tpublic Object getItem(int position) {\t\t\treturn position;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CareerActivity.java", "stars": "74", "class": {"name": "EducationAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": []}}, {"method_name": "getItemId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "\t\tpublic long getItemId(int position) {\t\t\treturn position;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CareerActivity.java", "stars": "74", "class": {"name": "EducationAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": []}}, {"method_name": "getView", "params": ["int", "View", "ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "\t\tpublic View getView(final int position, View convertView, ViewGroup parent) {\t\t\tViewHolder holder;\t\t\tfinal Education edu = eduArray[position];\t\t\tif (convertView == null) {\t\t\t\tconvertView = mInflater.inflate(R.layout.education, null);\t\t\t\tholder = new ViewHolder();\t\t\t\tholder.eduDegree = (TextView) convertView.findViewById(R.id.eduDegree);\t\t\t\tholder.eduStudy = (TextView) convertView.findViewById(R.id.eduStudy);\t\t\t\tholder.eduSchool = (TextView) convertView.findViewById(R.id.eduSchool);\t\t\t\tconvertView.setTag(holder);\t\t\t} else {\t\t\t\t// Get the ViewHolder back to get fast access to the TextView\t\t\t\t// and the ImageView.\t\t\t\tholder = (ViewHolder) convertView.getTag();\t\t\t}\t\t\tholder.eduDegree.setText(edu.getDegree());\t\t\tholder.eduStudy.setText(edu.getFieldOfStudy());\t\t\tholder.eduSchool.setText(edu.getSchoolName());\t\t\treturn convertView;\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/CareerActivity.java", "stars": "74", "class": {"name": "EducationAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": []}}, {"method_name": "execute", "params": ["MsgSender", "CQCodeUtil"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void execute(MsgSender msgSender, CQCodeUtil cqCodeUtil) {        Map<String, List<String>> map = DB.Instance.clearTree(DB.Instance.searchAllGroupOnProgress());        Set<String> GroupQQs = map.keySet();        StringBuilder stringBuilder = new StringBuilder();        List<String> badMan;        for (String GroupQQ : GroupQQs) {            stringBuilder.delete(0, stringBuilder.length());            badMan = map.get(GroupQQ);            stringBuilder.append(\"\u81ea\u52a8\u91cd\u7f6e\u4f1a\u6218\u6b21\u6570\u62c9\uff1a\");            for (String QQ : badMan) {                stringBuilder.append(\"[CQ:at,qq=\").append(QQ).append(\"] \");            }            msgSender.SENDER.sendGroupMsg(GroupQQ, stringBuilder.toString());        }    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/CoolQ/timeJob/clearVoidKnife.java", "stars": "2", "class": {"name": "clearVoidKnife", "extends": null, "implements": ["TimeJob"], "modifiers": ["public"]}}, {"method_name": "tokenize", "params": ["CharReader"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "TokenList", "snippet": "    public TokenList tokenize(CharReader reader) throws IOException {        this.reader = reader;        TokenList tokens = new TokenList();        tokenize(tokens);        return tokens;    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/Tokenizer.java", "stars": "2", "class": {"name": "Tokenizer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "tokenize", "params": ["TokenList"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void tokenize(@NotNull TokenList tokens) throws IOException {        Token token;        do {            token = readToken();            tokens.add(token);        } while (token.type() != TokenType.END_DOCUMENT);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/Tokenizer.java", "stars": "2", "class": {"name": "Tokenizer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readToken", "params": [], "throws": ["IOException"], "modifiers": ["private"], "return_type": "Token", "snippet": "    private Token readToken() throws IOException {        reader.skipWhite();        if (!reader.hasNext()) {            return Token.END_DOCUMENT_TOKEN;        }        char c = reader.next();        if (c == '{') return Token.BEGIN_OBJECT_TOKEN;        if (c == '}') return Token.END_OBJECT_TOKEN;        if (c == '[') return Token.BEGIN_ARRAY_TOKEN;        if (c == ']') return Token.END_ARRAY_TOKEN;        if (c == ':') return Token.SEP_COLON_TOKEN;        if (c == ',') return Token.SEP_COMMA_TOKEN;        // \u5904\u7406null\u548cundefined        if (c == 'n' || c == 'u') return readNull();        // \u5904\u7406true\u548cfalse        if (c == 't' || c == 'f') return readBoolean();        // \u5904\u7406\u5b57\u7b26\u4e32        if (c == '\"') return readString();        // \u5904\u7406\u6570\u5b57        if (c == '-' || c == '.' || Character.isDigit(c))            return readNumber();        throw new JSONParseException(\"Illegal character => \" + c);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/Tokenizer.java", "stars": "2", "class": {"name": "Tokenizer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readNull", "params": [], "throws": ["IOException"], "modifiers": ["private"], "return_type": "Token", "snippet": "    private Token readNull() throws IOException {        char c = reader.peek();        if (c == 'n' && !reader.matchNextAndSkip(\"ull\")) {            throw new JSONParseException(\"Invalid json string\");        }        if (c == 'u' && !reader.matchNextAndSkip(\"ndefined\")) {            throw new JSONParseException(\"Invalid json string\");        }        return Token.NULL_TOKEN;    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/Tokenizer.java", "stars": "2", "class": {"name": "Tokenizer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readBoolean", "params": [], "throws": ["IOException"], "modifiers": ["private"], "return_type": "Token", "snippet": "    private Token readBoolean() throws IOException {        if (reader.peek() == 't') {            if (!(reader.next() == 'r' && reader.next() == 'u' && reader.next() == 'e')) {                throw new JSONParseException(\"Invalid json string\");            }            return Token.BOOL_TRUE_TOKEN;        } else {            if (!(reader.next() == 'a' && reader.next() == 'l'                    && reader.next() == 's' && reader.next() == 'e')) {                throw new JSONParseException(\"Invalid json string\");            }            return Token.BOOL_FALSE_TOKEN;        }    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/Tokenizer.java", "stars": "2", "class": {"name": "Tokenizer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readString", "params": [], "throws": ["IOException"], "modifiers": ["private"], "return_type": "Token", "snippet": "    private Token readString() throws IOException {        StringBuilder sb = new StringBuilder();        while (true) {            char ch = reader.next();            // \u5904\u7406\u8f6c\u4e49\u5b57\u7b26            if (ch == '\\\\') {                if (!isEscape()) {                    throw new JSONParseException(\"Invalid escape character\");                }                sb.append('\\\\');                ch = reader.peek();                sb.append(ch);                if (ch == 'u') {                    for (int i = 0; i < 4; i++) {                        ch = reader.next();                        if (isHex(ch)) {                            sb.append(ch);                        } else {                            throw new JSONParseException(\"Invalid character\");                        }                    }                }            }            // \u5b57\u7b26\u4e32\u89e3\u6790\u7ed3\u675f            else if (ch == '\"') {                return new Token(TokenType.STRING, sb.toString());            }            // \u5b57\u7b26\u4e32\u4e2d\u9014\u4e0d\u5141\u8bb8\u56de\u8f66\uff0c\u56de\u8f66\u5fc5\u987b\u4f7f\u7528\u8f6c\u4e49\u5b57\u7b26            else if (ch == '\\r' || ch == '\\n') {                throw new JSONParseException(\"Invalid character\");            }            // \u6dfb\u52a0\u5b57\u7b26            else {                sb.append(ch);            }        }    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/Tokenizer.java", "stars": "2", "class": {"name": "Tokenizer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readNumber", "params": [], "throws": ["IOException"], "modifiers": ["private"], "return_type": "Token", "snippet": "    private Token readNumber() throws IOException {        // \u5f00\u5934\u5b57\u7b26        char ch = reader.peek();        StringBuilder sb = new StringBuilder();        if (ch == '-') {    // \u5904\u7406\u8d1f\u6570            sb.append(ch);            ch = reader.next();            if (ch == '0' || ch == '.') {    // \u5904\u7406 -0.xxxx \u6216 -.xxxx                sb.append(ch);                sb.append(readFracAndExp());            } else if (Character.isDigit(ch)) {                do {                    sb.append(ch);                    ch = reader.next();                } while (Character.isDigit(ch));                if (ch != CharReader.EOF) {                    reader.back();                    sb.append(readFracAndExp());                }            } else {                throw new JSONParseException(\"Invalid minus number\");            }        } else if (ch == '0' || ch == '.') {    // \u5904\u7406\u5c0f\u6570            sb.append('0');            if (ch == '.') reader.back();            sb.append(readFracAndExp());        } else {            do {                sb.append(ch);                ch = reader.next();            } while (Character.isDigit(ch));            if (ch != CharReader.EOF) {                reader.back();                sb.append(readFracAndExp());            }        }        return new Token(TokenType.NUMBER, sb.toString());    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/Tokenizer.java", "stars": "2", "class": {"name": "Tokenizer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isEscape", "params": [], "throws": ["IOException"], "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isEscape() throws IOException {        char ch = reader.next();        return (ch == '\"' || ch == '\\\\' || ch == 'u' || ch == 'r'                || ch == 'n' || ch == 'b' || ch == 't' || ch == 'f');    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/Tokenizer.java", "stars": "2", "class": {"name": "Tokenizer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isHex", "params": ["char"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isHex(char ch) {        return ((ch >= '0' && ch <= '9') || ('a' <= ch && ch <= 'f')                || ('A' <= ch && ch <= 'F'));    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/Tokenizer.java", "stars": "2", "class": {"name": "Tokenizer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readFracAndExp", "params": [], "throws": ["IOException"], "modifiers": ["private"], "return_type": "String", "snippet": "    private String readFracAndExp() throws IOException {        StringBuilder sb = new StringBuilder();        char ch = reader.next();        if (ch ==  '.') {            sb.append(ch);            ch = reader.next();            if (!Character.isDigit(ch)) {                throw new JSONParseException(\"Invalid frac\");            }            do {                sb.append(ch);                ch = reader.next();            } while (Character.isDigit(ch));            if (isExp(ch)) {    // \u5904\u7406\u79d1\u5b66\u8ba1\u6570\u6cd5                sb.append(ch);                sb.append(readExp());            } else {                if (ch != CharReader.EOF) {                    reader.back();                }            }        } else if (isExp(ch)) {            sb.append(ch);            sb.append(readExp());        } else {            reader.back();        }        return sb.toString();    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/Tokenizer.java", "stars": "2", "class": {"name": "Tokenizer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readExp", "params": [], "throws": ["IOException"], "modifiers": ["private"], "return_type": "String", "snippet": "    private String readExp() throws IOException {        StringBuilder sb = new StringBuilder();        char ch = reader.next();        if (ch == '+' || ch =='-') {            sb.append(ch);            ch = reader.next();            if (Character.isDigit(ch)) {                do {                    sb.append(ch);                    ch = reader.next();                } while (Character.isDigit(ch));                if (ch != CharReader.EOF) {                    reader.back();                }            } else {                throw new JSONParseException(\"e or E\");            }        } else {            throw new JSONParseException(\"e or E\");        }        return sb.toString();    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/Tokenizer.java", "stars": "2", "class": {"name": "Tokenizer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isExp", "params": ["char"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isExp(char ch) {        return ch == 'e' || ch == 'E';    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/Tokenizer.java", "stars": "2", "class": {"name": "Tokenizer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws IOException {        String str = \"{\\\"a\\\": \\\"\\\\uAFFF\\\", \\\"b\\\": null}\";        InputStream inputStream = new ByteArrayInputStream(str.getBytes());        BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));        Tokenizer tokenizer = new Tokenizer();        TokenList tokens = tokenizer.tokenize(new CharReader(reader));        System.out.println(tokens);    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/Tokenizer.java", "stars": "2", "class": {"name": "Tokenizer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "bind", "params": ["MagicIndicator", "ViewPager"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void bind(final MagicIndicator magicIndicator, ViewPager viewPager) {        viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {            @Override            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {                magicIndicator.onPageScrolled(position, positionOffset, positionOffsetPixels);            }            @Override            public void onPageSelected(int position) {                magicIndicator.onPageSelected(position);            }            @Override            public void onPageScrollStateChanged(int state) {                magicIndicator.onPageScrollStateChanged(state);            }        });    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/ViewPagerHelper.java", "stars": "1", "class": {"name": "ViewPagerHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buildEtcdConfigProperties", "params": ["ConfigurableEnvironment"], "throws": null, "modifiers": ["public", "static"], "return_type": "EtcdConfigProperties", "snippet": "    public static EtcdConfigProperties buildEtcdConfigProperties(ConfigurableEnvironment environment) {        EtcdConfigProperties etcdConfigProperties = new EtcdConfigProperties();        Binder binder = Binder.get(environment);        ResolvableType type = ResolvableType.forClass(EtcdConfigProperties.class);        Bindable<?> target = Bindable.of(type).withExistingValue(etcdConfigProperties);        binder.bind(EtcdConfigConstants.CONFIG_PROPERTIES_PREFIX, target);        LOG.info(\"etcdConfigProperties={}\", etcdConfigProperties);        return etcdConfigProperties;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/util/EtcdConfigPropertiesUtil.java", "stars": "4", "class": {"name": "EtcdConfigPropertiesUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "implementation", "params": ["Class<Cache>"], "throws": null, "modifiers": ["public"], "return_type": "CacheBuilder", "snippet": "  public CacheBuilder implementation(Class<? extends Cache> implementation) {    this.implementation = implementation;    return this;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/CacheBuilder.java", "stars": "15", "class": {"name": "CacheBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addDecorator", "params": ["Class<Cache>"], "throws": null, "modifiers": ["public"], "return_type": "CacheBuilder", "snippet": "  public CacheBuilder addDecorator(Class<? extends Cache> decorator) {    if (decorator != null) {      this.decorators.add(decorator);    }    return this;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/CacheBuilder.java", "stars": "15", "class": {"name": "CacheBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "size", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "CacheBuilder", "snippet": "  public CacheBuilder size(Integer size) {    this.size = size;    return this;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/CacheBuilder.java", "stars": "15", "class": {"name": "CacheBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clearInterval", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "CacheBuilder", "snippet": "  public CacheBuilder clearInterval(Long clearInterval) {    this.clearInterval = clearInterval;    return this;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/CacheBuilder.java", "stars": "15", "class": {"name": "CacheBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readWrite", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "CacheBuilder", "snippet": "  public CacheBuilder readWrite(boolean readWrite) {    this.readWrite = readWrite;    return this;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/CacheBuilder.java", "stars": "15", "class": {"name": "CacheBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "blocking", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "CacheBuilder", "snippet": "  public CacheBuilder blocking(boolean blocking) {    this.blocking = blocking;    return this;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/CacheBuilder.java", "stars": "15", "class": {"name": "CacheBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "properties", "params": ["Properties"], "throws": null, "modifiers": ["public"], "return_type": "CacheBuilder", "snippet": "  public CacheBuilder properties(Properties properties) {    this.properties = properties;    return this;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/CacheBuilder.java", "stars": "15", "class": {"name": "CacheBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "build", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Cache", "snippet": "  public Cache build() {    setDefaultImplementations();    Cache cache = newBaseCacheInstance(implementation, id);    setCacheProperties(cache);    // issue #352, do not apply decorators to custom caches    if (PerpetualCache.class.equals(cache.getClass())) {      for (Class<? extends Cache> decorator : decorators) {        cache = newCacheDecoratorInstance(decorator, cache);        setCacheProperties(cache);      }      cache = setStandardDecorators(cache);    } else if (!LoggingCache.class.isAssignableFrom(cache.getClass())) {      cache = new LoggingCache(cache);    }    return cache;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/CacheBuilder.java", "stars": "15", "class": {"name": "CacheBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDefaultImplementations", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void setDefaultImplementations() {    if (implementation == null) {      implementation = PerpetualCache.class;      if (decorators.isEmpty()) {        decorators.add(LruCache.class);      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/CacheBuilder.java", "stars": "15", "class": {"name": "CacheBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStandardDecorators", "params": ["Cache"], "throws": null, "modifiers": ["private"], "return_type": "Cache", "snippet": "  private Cache setStandardDecorators(Cache cache) {    try {      MetaObject metaCache = SystemMetaObject.forObject(cache);      if (size != null && metaCache.hasSetter(\"size\")) {        metaCache.setValue(\"size\", size);      }      if (clearInterval != null) {        cache = new ScheduledCache(cache);        ((ScheduledCache) cache).setClearInterval(clearInterval);      }      if (readWrite) {        cache = new SerializedCache(cache);      }      cache = new LoggingCache(cache);      cache = new SynchronizedCache(cache);      if (blocking) {        cache = new BlockingCache(cache);      }      return cache;    } catch (Exception e) {      throw new CacheException(\"Error building standard cache decorators.  Cause: \" + e, e);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/CacheBuilder.java", "stars": "15", "class": {"name": "CacheBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCacheProperties", "params": ["Cache"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void setCacheProperties(Cache cache) {    if (properties != null) {      MetaObject metaCache = SystemMetaObject.forObject(cache);      for (Map.Entry<Object, Object> entry : properties.entrySet()) {        String name = (String) entry.getKey();        String value = (String) entry.getValue();        if (metaCache.hasSetter(name)) {          Class<?> type = metaCache.getSetterType(name);          if (String.class == type) {            metaCache.setValue(name, value);          } else if (int.class == type              || Integer.class == type) {            metaCache.setValue(name, Integer.valueOf(value));          } else if (long.class == type              || Long.class == type) {            metaCache.setValue(name, Long.valueOf(value));          } else if (short.class == type              || Short.class == type) {            metaCache.setValue(name, Short.valueOf(value));          } else if (byte.class == type              || Byte.class == type) {            metaCache.setValue(name, Byte.valueOf(value));          } else if (float.class == type              || Float.class == type) {            metaCache.setValue(name, Float.valueOf(value));          } else if (boolean.class == type              || Boolean.class == type) {            metaCache.setValue(name, Boolean.valueOf(value));          } else if (double.class == type              || Double.class == type) {            metaCache.setValue(name, Double.valueOf(value));          } else {            throw new CacheException(\"Unsupported property type for cache: '\" + name + \"' of type \" + type);          }        }      }    }    if (InitializingObject.class.isAssignableFrom(cache.getClass())) {      try {        ((InitializingObject) cache).initialize();      } catch (Exception e) {        throw new CacheException(\"Failed cache initialization for '\"          + cache.getId() + \"' on '\" + cache.getClass().getName() + \"'\", e);      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/CacheBuilder.java", "stars": "15", "class": {"name": "CacheBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "newBaseCacheInstance", "params": ["Class<Cache>", "String"], "throws": null, "modifiers": ["private"], "return_type": "Cache", "snippet": "  private Cache newBaseCacheInstance(Class<? extends Cache> cacheClass, String id) {    Constructor<? extends Cache> cacheConstructor = getBaseCacheConstructor(cacheClass);    try {      return cacheConstructor.newInstance(id);    } catch (Exception e) {      throw new CacheException(\"Could not instantiate cache implementation (\" + cacheClass + \"). Cause: \" + e, e);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/CacheBuilder.java", "stars": "15", "class": {"name": "CacheBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBaseCacheConstructor", "params": ["Class<Cache>"], "throws": null, "modifiers": ["private"], "return_type": "Constructor<Cache>", "snippet": "  private Constructor<? extends Cache> getBaseCacheConstructor(Class<? extends Cache> cacheClass) {    try {      return cacheClass.getConstructor(String.class);    } catch (Exception e) {      throw new CacheException(\"Invalid base cache implementation (\" + cacheClass + \").  \"        + \"Base cache implementations must have a constructor that takes a String id as a parameter.  Cause: \" + e, e);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/CacheBuilder.java", "stars": "15", "class": {"name": "CacheBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "newCacheDecoratorInstance", "params": ["Class<Cache>", "Cache"], "throws": null, "modifiers": ["private"], "return_type": "Cache", "snippet": "  private Cache newCacheDecoratorInstance(Class<? extends Cache> cacheClass, Cache base) {    Constructor<? extends Cache> cacheConstructor = getCacheDecoratorConstructor(cacheClass);    try {      return cacheConstructor.newInstance(base);    } catch (Exception e) {      throw new CacheException(\"Could not instantiate cache decorator (\" + cacheClass + \"). Cause: \" + e, e);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/CacheBuilder.java", "stars": "15", "class": {"name": "CacheBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCacheDecoratorConstructor", "params": ["Class<Cache>"], "throws": null, "modifiers": ["private"], "return_type": "Constructor<Cache>", "snippet": "  private Constructor<? extends Cache> getCacheDecoratorConstructor(Class<? extends Cache> cacheClass) {    try {      return cacheClass.getConstructor(Cache.class);    } catch (Exception e) {      throw new CacheException(\"Invalid cache decorator (\" + cacheClass + \").  \"        + \"Cache decorators must have a constructor that takes a Cache instance as a parameter.  Cause: \" + e, e);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/CacheBuilder.java", "stars": "15", "class": {"name": "CacheBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRoomId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getRoomId() {        return roomId;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/HeartBeatRequest.java", "stars": "1", "class": {"name": "HeartBeatRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRoomId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRoomId(String roomId) {        this.roomId = roomId;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/HeartBeatRequest.java", "stars": "1", "class": {"name": "HeartBeatRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getChatId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getChatId() {        return chatId;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/HeartBeatRequest.java", "stars": "1", "class": {"name": "HeartBeatRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setChatId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setChatId(String chatId) {        this.chatId = chatId;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/HeartBeatRequest.java", "stars": "1", "class": {"name": "HeartBeatRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPlatform", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Platform", "snippet": "    public Platform getPlatform() {        return platform;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/HeartBeatRequest.java", "stars": "1", "class": {"name": "HeartBeatRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPlatform", "params": ["Platform"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPlatform(Platform platform) {        this.platform = platform;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/HeartBeatRequest.java", "stars": "1", "class": {"name": "HeartBeatRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLoginFeeType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getLoginFeeType() {        return loginFeeType;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/HeartBeatRequest.java", "stars": "1", "class": {"name": "HeartBeatRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setLoginFeeType", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLoginFeeType(int loginFeeType) {        this.loginFeeType = loginFeeType;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/HeartBeatRequest.java", "stars": "1", "class": {"name": "HeartBeatRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"HeartBeatRequest{\" +                \"roomId='\" + roomId + '\\'' +                \", chatId='\" + chatId + '\\'' +                \", loginFeeType=\" + loginFeeType +                \", platform=\" + platform +                '}';    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/model/HeartBeatRequest.java", "stars": "1", "class": {"name": "HeartBeatRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProblemInsns", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<AbstractInsnNode,AnalyzerException>", "snippet": "\tpublic Map<AbstractInsnNode, AnalyzerException> getProblemInsns() {\t\treturn badTypeInsns;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimInterpreter.java", "stars": "12", "class": {"name": "SimInterpreter", "extends": "Interpreter", "implements": null, "modifiers": ["public"]}}, {"method_name": "setAnalyzer", "params": ["SimAnalyzer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setAnalyzer(SimAnalyzer analyzer) {\t\tthis.analyzer = analyzer;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimInterpreter.java", "stars": "12", "class": {"name": "SimInterpreter", "extends": "Interpreter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getExceptionFactory", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ResolvableExceptionFactory", "snippet": "\tpublic ResolvableExceptionFactory getExceptionFactory() {\t\treturn exceptionFactory;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimInterpreter.java", "stars": "12", "class": {"name": "SimInterpreter", "extends": "Interpreter", "implements": null, "modifiers": ["public"]}}, {"method_name": "setExceptionFactory", "params": ["ResolvableExceptionFactory"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setExceptionFactory(ResolvableExceptionFactory exceptionFactory) {\t\tthis.exceptionFactory = exceptionFactory;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimInterpreter.java", "stars": "12", "class": {"name": "SimInterpreter", "extends": "Interpreter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getStaticInvokeFactory", "params": [], "throws": null, "modifiers": ["public"], "return_type": "StaticInvokeFactory", "snippet": "\tpublic StaticInvokeFactory getStaticInvokeFactory() {\t\treturn staticInvokeFactory;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimInterpreter.java", "stars": "12", "class": {"name": "SimInterpreter", "extends": "Interpreter", "implements": null, "modifiers": ["public"]}}, {"method_name": "setStaticInvokeFactory", "params": ["StaticInvokeFactory"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setStaticInvokeFactory(StaticInvokeFactory staticInvokeFactory) {\t\tthis.staticInvokeFactory = staticInvokeFactory;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimInterpreter.java", "stars": "12", "class": {"name": "SimInterpreter", "extends": "Interpreter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getStaticGetFactory", "params": [], "throws": null, "modifiers": ["public"], "return_type": "StaticGetFactory", "snippet": "\tpublic StaticGetFactory getStaticGetFactory() {\t\treturn staticGetFactory;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimInterpreter.java", "stars": "12", "class": {"name": "SimInterpreter", "extends": "Interpreter", "implements": null, "modifiers": ["public"]}}, {"method_name": "setStaticGetFactory", "params": ["StaticGetFactory"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setStaticGetFactory(StaticGetFactory staticGetFactory) {\t\tthis.staticGetFactory = staticGetFactory;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimInterpreter.java", "stars": "12", "class": {"name": "SimInterpreter", "extends": "Interpreter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getTypeChecker", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TypeChecker", "snippet": "\tpublic TypeChecker getTypeChecker() {\t\treturn typeChecker;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimInterpreter.java", "stars": "12", "class": {"name": "SimInterpreter", "extends": "Interpreter", "implements": null, "modifiers": ["public"]}}, {"method_name": "setTypeChecker", "params": ["TypeChecker"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setTypeChecker(TypeChecker typeChecker) {\t\tthis.typeChecker = typeChecker;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimInterpreter.java", "stars": "12", "class": {"name": "SimInterpreter", "extends": "Interpreter", "implements": null, "modifiers": ["public"]}}, {"method_name": "hasReportedProblems", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean hasReportedProblems() {\t\treturn !badTypeInsns.isEmpty();\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimInterpreter.java", "stars": "12", "class": {"name": "SimInterpreter", "extends": "Interpreter", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleOpqaues", "params": ["AbstractInsnNode", "AbstractValue"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void handleOpqaues(AbstractInsnNode insn, AbstractValue value) {\t\tif (value.isPrimitive() && value.isValueResolved()) {\t\t\tint p1 = ((PrimitiveValue) value).getIntValue();\t\t\tboolean gotoDestination = false;\t\t\tswitch(insn.getOpcode()) {\t\t\t\tcase IFEQ:\t\t\t\t\tgotoDestination = p1 == 0;\t\t\t\t\tbreak;\t\t\t\tcase IFNE:\t\t\t\t\tgotoDestination = p1 != 0;\t\t\t\t\tbreak;\t\t\t\tcase IFLT:\t\t\t\t\tgotoDestination = p1 < 0;\t\t\t\t\tbreak;\t\t\t\tcase IFGE:\t\t\t\t\tgotoDestination = p1 >= 0;\t\t\t\t\tbreak;\t\t\t\tcase IFGT:\t\t\t\t\tgotoDestination = p1 > 0;\t\t\t\t\tbreak;\t\t\t\tcase IFLE:\t\t\t\t\tgotoDestination = p1 <= 0;\t\t\t\t\tbreak;\t\t\t\tdefault:\t\t\t\t\tbreak;\t\t\t}\t\t\tanalyzer.setOpaqueJump(insn, gotoDestination);\t\t}\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimInterpreter.java", "stars": "12", "class": {"name": "SimInterpreter", "extends": "Interpreter", "implements": null, "modifiers": ["public"]}}, {"method_name": "handleOpqaues", "params": ["AbstractInsnNode", "AbstractValue", "AbstractValue"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void handleOpqaues(AbstractInsnNode insn, AbstractValue value1, AbstractValue value2) {\t\tif (value1.isPrimitive() && value1.isValueResolved() && value2.isPrimitive() && value2.isValueResolved()) {\t\t\tint p1 = ((PrimitiveValue) value1).getIntValue();\t\t\tint p2 = ((PrimitiveValue) value2).getIntValue();\t\t\tboolean gotoDestination = false;\t\t\tswitch(insn.getOpcode()) {\t\t\t\tcase IF_ICMPEQ:\t\t\t\t\tgotoDestination = p1 == p2;\t\t\t\t\tbreak;\t\t\t\tcase IF_ICMPNE:\t\t\t\t\tgotoDestination = p1 != p2;\t\t\t\t\tbreak;\t\t\t\tcase IF_ICMPLT:\t\t\t\t\tgotoDestination = p1 < p2;\t\t\t\t\tbreak;\t\t\t\tcase IF_ICMPGE:\t\t\t\t\tgotoDestination = p1 >= p2;\t\t\t\t\tbreak;\t\t\t\tcase IF_ICMPGT:\t\t\t\t\tgotoDestination = p1 > p2;\t\t\t\t\tbreak;\t\t\t\tcase IF_ICMPLE:\t\t\t\t\tgotoDestination = p1 <= p2;\t\t\t\t\tbreak;\t\t\t\tdefault:\t\t\t\t\tbreak;\t\t\t}\t\t\tanalyzer.setOpaqueJump(insn, gotoDestination);\t\t}\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimInterpreter.java", "stars": "12", "class": {"name": "SimInterpreter", "extends": "Interpreter", "implements": null, "modifiers": ["public"]}}, {"method_name": "markBad", "params": ["AbstractInsnNode", "AnalyzerException"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void markBad(AbstractInsnNode insn, AnalyzerException e) {\t\tbadTypeInsns.put(insn, e);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimInterpreter.java", "stars": "12", "class": {"name": "SimInterpreter", "extends": "Interpreter", "implements": null, "modifiers": ["public"]}}, {"method_name": "newValueOrVirtualized", "params": ["AbstractInsnNode", "Type"], "throws": null, "modifiers": ["private"], "return_type": "AbstractValue", "snippet": "\tprivate AbstractValue newValueOrVirtualized(AbstractInsnNode insn, Type type) {\t\tif (SimulatedVirtualValue.supported(type))\t\t\treturn SimulatedVirtualValue.initialize(Collections.singletonList(insn), typeChecker, type);\t\treturn newValue(insn, type);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimInterpreter.java", "stars": "12", "class": {"name": "SimInterpreter", "extends": "Interpreter", "implements": null, "modifiers": ["public"]}}, {"method_name": "newValue", "params": ["AbstractInsnNode", "Type"], "throws": null, "modifiers": ["private"], "return_type": "AbstractValue", "snippet": "\tprivate AbstractValue newValue(AbstractInsnNode insn, Type type) {\t\tif (type == null)\t\t\treturn UninitializedValue.UNINITIALIZED_VALUE;\t\telse if (type == Type.VOID_TYPE)\t\t\treturn null;\t\telse if (type.getSort() <= Type.DOUBLE)\t\t\treturn new PrimitiveValue(insn, type);\t\treturn VirtualValue.ofVirtual(insn, typeChecker, type);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimInterpreter.java", "stars": "12", "class": {"name": "SimInterpreter", "extends": "Interpreter", "implements": null, "modifiers": ["public"]}}, {"method_name": "newValue", "params": ["List<AbstractInsnNode>", "Type"], "throws": null, "modifiers": ["private"], "return_type": "AbstractValue", "snippet": "\tprivate AbstractValue newValue(List<AbstractInsnNode> insns, Type type) {\t\tif (type == null)\t\t\treturn UninitializedValue.UNINITIALIZED_VALUE;\t\telse if (type == Type.VOID_TYPE)\t\t\treturn null;\t\telse if (type.getSort() <= Type.DOUBLE)\t\t\treturn new PrimitiveValue(insns, type, null);\t\treturn VirtualValue.ofVirtual(insns, typeChecker, type);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimInterpreter.java", "stars": "12", "class": {"name": "SimInterpreter", "extends": "Interpreter", "implements": null, "modifiers": ["public"]}}, {"method_name": "newValue", "params": ["Type"], "throws": null, "modifiers": ["public"], "return_type": "AbstractValue", "snippet": "\tpublic AbstractValue newValue(Type type) {\t\tthrow new UnsupportedOperationException(\"Interpreter called default implementation of 'newValue'\\n\" +\t\t\t\t\"Should use more expressive call instead.\");\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimInterpreter.java", "stars": "12", "class": {"name": "SimInterpreter", "extends": "Interpreter", "implements": null, "modifiers": ["public"]}}, {"method_name": "newReturnTypeValue", "params": ["Type"], "throws": null, "modifiers": ["public"], "return_type": "AbstractValue", "snippet": "\tpublic AbstractValue newReturnTypeValue(Type type) {\t\treturn newValue((List<AbstractInsnNode>) null, type);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimInterpreter.java", "stars": "12", "class": {"name": "SimInterpreter", "extends": "Interpreter", "implements": null, "modifiers": ["public"]}}, {"method_name": "newEmptyValue", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "AbstractValue", "snippet": "\tpublic AbstractValue newEmptyValue(int local) {\t\treturn UninitializedValue.UNINITIALIZED_VALUE;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimInterpreter.java", "stars": "12", "class": {"name": "SimInterpreter", "extends": "Interpreter", "implements": null, "modifiers": ["public"]}}, {"method_name": "newParameterValue", "params": ["boolean", "int", "Type"], "throws": null, "modifiers": ["public"], "return_type": "AbstractValue", "snippet": "\tpublic AbstractValue newParameterValue(boolean isInstanceMethod, int local, Type type) {\t\treturn newValue((List<AbstractInsnNode>) null, type);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimInterpreter.java", "stars": "12", "class": {"name": "SimInterpreter", "extends": "Interpreter", "implements": null, "modifiers": ["public"]}}, {"method_name": "newExceptionValue", "params": ["TryCatchBlockNode", "Frame<AbstractValue>", "Type"], "throws": null, "modifiers": ["public"], "return_type": "AbstractValue", "snippet": "\tpublic AbstractValue newExceptionValue(TryCatchBlockNode tryCatch,\t\t\t\t\t\t\t\t\t\t   Frame<AbstractValue> handlerFrame, Type exceptionType) {\t\treturn newValue(tryCatch.handler, exceptionType);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimInterpreter.java", "stars": "12", "class": {"name": "SimInterpreter", "extends": "Interpreter", "implements": null, "modifiers": ["public"]}}, {"method_name": "newOperation", "params": ["AbstractInsnNode"], "throws": ["AnalyzerException"], "modifiers": ["public"], "return_type": "AbstractValue", "snippet": "\tpublic AbstractValue newOperation(AbstractInsnNode insn) throws AnalyzerException {\t\tswitch (insn.getOpcode()) {\t\t\tcase ACONST_NULL:\t\t\t\treturn NullConstantValue.newNull(insn);\t\t\tcase ICONST_M1:\t\t\t\treturn PrimitiveValue.ofInt(insn, -1);\t\t\tcase ICONST_0:\t\t\t\treturn PrimitiveValue.ofInt(insn, 0);\t\t\tcase ICONST_1:\t\t\t\treturn PrimitiveValue.ofInt(insn, 1);\t\t\tcase ICONST_2:\t\t\t\treturn PrimitiveValue.ofInt(insn, 2);\t\t\tcase ICONST_3:\t\t\t\treturn PrimitiveValue.ofInt(insn, 3);\t\t\tcase ICONST_4:\t\t\t\treturn PrimitiveValue.ofInt(insn, 4);\t\t\tcase ICONST_5:\t\t\t\treturn PrimitiveValue.ofInt(insn, 5);\t\t\tcase LCONST_0:\t\t\t\treturn PrimitiveValue.ofLong(insn, 0L);\t\t\tcase LCONST_1:\t\t\t\treturn PrimitiveValue.ofLong(insn, 1L);\t\t\tcase FCONST_0:\t\t\t\treturn PrimitiveValue.ofFloat(insn, 0.0F);\t\t\tcase FCONST_1:\t\t\t\treturn PrimitiveValue.ofFloat(insn, 1.0F);\t\t\tcase FCONST_2:\t\t\t\treturn PrimitiveValue.ofFloat(insn, 2.0F);\t\t\tcase DCONST_0:\t\t\t\treturn PrimitiveValue.ofDouble(insn, 0.0);\t\t\tcase DCONST_1:\t\t\t\treturn PrimitiveValue.ofDouble(insn, 1.0);\t\t\tcase BIPUSH:\t\t\tcase SIPUSH:\t\t\t\treturn PrimitiveValue.ofInt(insn, ((IntInsnNode) insn).operand);\t\t\tcase LDC:\t\t\t\tObject value = ((LdcInsnNode) insn).cst;\t\t\t\tif (value instanceof Integer) {\t\t\t\t\treturn PrimitiveValue.ofInt(insn, (int) value);\t\t\t\t} else if (value instanceof Float) {\t\t\t\t\treturn PrimitiveValue.ofFloat(insn, (float) value);\t\t\t\t} else if (value instanceof Long) {\t\t\t\t\treturn PrimitiveValue.ofLong(insn, (long) value);\t\t\t\t} else if (value instanceof Double) {\t\t\t\t\treturn PrimitiveValue.ofDouble(insn, (double) value);\t\t\t\t} else if (value instanceof String) {\t\t\t\t\treturn SimulatedVirtualValue.ofString(insn, typeChecker, (String) value);\t\t\t\t} else if (value instanceof Type) {\t\t\t\t\tType type =  (Type) value;\t\t\t\t\tint sort = type.getSort();\t\t\t\t\tif (sort == Type.OBJECT || sort == Type.ARRAY) {\t\t\t\t\t\treturn VirtualValue.ofClass(insn, typeChecker, type);\t\t\t\t\t} else if (sort == Type.METHOD) {\t\t\t\t\t\treturn newValue(insn, Type.getObjectType(\"java/lang/invoke/MethodType\"));\t\t\t\t\t} else {\t\t\t\t\t\tthrow new AnalyzerException(insn, \"Illegal LDC value \" + value);\t\t\t\t\t}\t\t\t\t} else if (value instanceof Handle) {\t\t\t\t\treturn newValue(insn, Type.getObjectType(\"java/lang/invoke/MethodHandle\"));\t\t\t\t} else if (value instanceof ConstantDynamic) {\t\t\t\t\treturn newValue(insn, Type.getType(((ConstantDynamic) value).getDescriptor()));\t\t\t\t} else {\t\t\t\t\tthrow new AnalyzerException(insn, \"Illegal LDC value \" + value);\t\t\t\t}\t\t\tcase JSR:\t\t\t\treturn ReturnAddressValue.newRet(insn);\t\t\tcase GETSTATIC:\t\t\t\tFieldInsnNode fin = (FieldInsnNode) insn;\t\t\t\tType type = Type.getType(fin.desc);\t\t\t\tif (staticGetFactory != null) {\t\t\t\t\treturn staticGetFactory.getStatic(fin);\t\t\t\t}\t\t\t\treturn newValue(insn, type);\t\t\tcase NEW:\t\t\t\treturn newValueOrVirtualized(insn, Type.getObjectType(((TypeInsnNode) insn).desc));\t\t\tdefault:\t\t\t\tthrow new IllegalStateException();\t\t}\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimInterpreter.java", "stars": "12", "class": {"name": "SimInterpreter", "extends": "Interpreter", "implements": null, "modifiers": ["public"]}}, {"method_name": "copyOperation", "params": ["AbstractInsnNode", "AbstractValue"], "throws": ["AnalyzerException"], "modifiers": ["public"], "return_type": "AbstractValue", "snippet": "\tpublic AbstractValue copyOperation(AbstractInsnNode insn, AbstractValue value) throws AnalyzerException {\t\t// Fetch type from instruction\t\tType insnType = null;\t\tboolean load = false;\t\tswitch(insn.getOpcode()) {\t\t\tcase ILOAD:\t\t\t\tload = true;\t\t\tcase ISTORE:\t\t\t\tinsnType = Type.INT_TYPE;\t\t\t\tbreak;\t\t\tcase LLOAD:\t\t\t\tload = true;\t\t\tcase LSTORE:\t\t\t\tinsnType = Type.LONG_TYPE;\t\t\t\tbreak;\t\t\tcase FLOAD:\t\t\t\tload = true;\t\t\tcase FSTORE:\t\t\t\tinsnType = Type.FLOAT_TYPE;\t\t\t\tbreak;\t\t\tcase DLOAD:\t\t\t\tload = true;\t\t\tcase DSTORE:\t\t\t\tinsnType = Type.DOUBLE_TYPE;\t\t\t\tbreak;\t\t\tcase ALOAD:\t\t\t\tload = true;\t\t\t\tif (value != UninitializedValue.UNINITIALIZED_VALUE && !value.isReference())\t\t\t\t\tthrow new AnalyzerException(insn, \"Expected a reference type.\");\t\t\t\tinsnType = value.getType();\t\t\t\tbreak;\t\t\tcase ASTORE:\t\t\t\tif (!value.isReference() && value instanceof ReturnAddressValue)\t\t\t\t\tthrow new AnalyzerException(insn, \"Expected a reference or return-address type.\");\t\t\t\tinsnType = value.getType();\t\t\t\tbreak;\t\t\tdefault:\t\t\t\tbreak;\t\t}\t\t// Very simple type verification, don't try to mix primitives and non-primitives\t\tType argType = value.getType();\t\tif(insnType != null && argType != null) {\t\t\tif(insnType.getSort() == Type.OBJECT && isPrimitive(argType))\t\t\t\tthrow new AnalyzerException(insn, \"Cannot mix primitive value with type-variable instruction\");\t\t\telse if(argType.getSort() == Type.OBJECT && isPrimitive(insnType))\t\t\t\tthrow new AnalyzerException(insn, \"Cannot mix type value with primitive-variable instruction\");\t\t}\t\t// If we're operating on a load-instruction we want the return value to\t\t// relate to the type of the instruction.\t\tif(load && insnType != value.getType())\t\t\treturn newValue(combine(value.getInsns(), insn), insnType);\t\treturn value.copy(insn);\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimInterpreter.java", "stars": "12", "class": {"name": "SimInterpreter", "extends": "Interpreter", "implements": null, "modifiers": ["public"]}}, {"method_name": "unaryOperation", "params": ["AbstractInsnNode", "AbstractValue"], "throws": ["AnalyzerException"], "modifiers": ["public"], "return_type": "AbstractValue", "snippet": "\tpublic AbstractValue unaryOperation(AbstractInsnNode insn, AbstractValue value) throws AnalyzerException {\t\tswitch(insn.getOpcode()) {\t\t\tcase INEG:\t\t\t\tif (isValueUnknown(value))\t\t\t\t\treturn newValue(combine(value.getInsns(), insn), Type.INT_TYPE);\t\t\t\treturn PrimitiveValue.ofInt(combine(value.getInsns(), insn), -toInt(value));\t\t\tcase IINC:\t\t\t\treturn PrimitiveValue.ofInt(combine(value.getInsns(), insn), ((IincInsnNode) insn).incr);\t\t\tcase L2I:\t\t\tcase F2I:\t\t\tcase D2I:\t\t\tcase I2B:\t\t\tcase I2C:\t\t\tcase I2S:\t\t\t\tif (isValueUnknown(value))\t\t\t\t\treturn newValue(combine(value.getInsns(), insn), Type.INT_TYPE);\t\t\t\treturn PrimitiveValue.ofInt(combine(value.getInsns(), insn), toInt(value));\t\t\tcase FNEG:\t\t\t\tif (isValueUnknown(value))\t\t\t\t\treturn newValue(combine(value.getInsns(), insn), Type.FLOAT_TYPE);\t\t\t\treturn PrimitiveValue.ofFloat(combine(value.getInsns(), insn), -toFloat(value));\t\t\tcase I2F:\t\t\tcase L2F:\t\t\tcase D2F:\t\t\t\tif (isValueUnknown(value))\t\t\t\t\treturn newValue(combine(value.getInsns(), insn), Type.FLOAT_TYPE);\t\t\t\treturn PrimitiveValue.ofFloat(combine(value.getInsns(), insn), toFloat(value));\t\t\tcase LNEG:\t\t\t\tif (isValueUnknown(value))\t\t\t\t\treturn newValue(combine(value.getInsns(), insn), Type.LONG_TYPE);\t\t\t\treturn PrimitiveValue.ofLong(combine(value.getInsns(), insn), -toLong(value));\t\t\tcase I2L:\t\t\tcase F2L:\t\t\tcase D2L:\t\t\t\tif (isValueUnknown(value))\t\t\t\t\treturn newValue(combine(value.getInsns(), insn), Type.LONG_TYPE);\t\t\t\treturn PrimitiveValue.ofLong(combine(value.getInsns(), insn), toLong(value));\t\t\tcase DNEG:\t\t\t\tif (isValueUnknown(value))\t\t\t\t\treturn newValue(combine(value.getInsns(), insn), Type.DOUBLE_TYPE);\t\t\t\treturn PrimitiveValue.ofDouble(combine(value.getInsns(), insn), -toDouble(value));\t\t\tcase I2D:\t\t\tcase L2D:\t\t\tcase F2D:\t\t\t\tif (isValueUnknown(value))\t\t\t\t\treturn newValue(combine(value.getInsns(), insn), Type.DOUBLE_TYPE);\t\t\t\treturn PrimitiveValue.ofDouble(combine(value.getInsns(), insn), toDouble(value));\t\t\tcase IFEQ:\t\t\tcase IFNE:\t\t\tcase IFLT:\t\t\tcase IFGE:\t\t\tcase IFGT:\t\t\tcase IFLE:\t\t\t\thandleOpqaues(insn, value);\t\t\tcase TABLESWITCH:\t\t\tcase LOOKUPSWITCH:\t\t\t\tif (!(isSubTypeOf(typeChecker, value.getType(), Type.INT_TYPE)\t\t\t\t\t\t|| isSubTypeOf(typeChecker, value.getType(), Type.BOOLEAN_TYPE)))\t\t\t\t\tthrow new AnalyzerException(insn, \"Expected int type.\");\t\t\t\treturn null;\t\t\tcase IRETURN:\t\t\t\tif (!(isSubTypeOf(typeChecker, value.getType(), Type.INT_TYPE)\t\t\t\t\t\t|| isSubTypeOf(typeChecker, value.getType(), Type.BOOLEAN_TYPE)))\t\t\t\t\tthrow new AnalyzerException(insn, \"Expected int return type.\");\t\t\t\treturn null;\t\t\tcase LRETURN:\t\t\t\tif (!isSubTypeOf(typeChecker, value.getType(), Type.LONG_TYPE))\t\t\t\t\tthrow new AnalyzerException(insn, \"Expected long return type.\");\t\t\t\treturn null;\t\t\tcase FRETURN:\t\t\t\tif (!isSubTypeOf(typeChecker, value.getType(), Type.FLOAT_TYPE))\t\t\t\t\tthrow new AnalyzerException(insn, \"Expected float return type.\");\t\t\t\treturn null;\t\t\tcase DRETURN:\t\t\t\tif (!isSubTypeOf(typeChecker, value.getType(), Type.DOUBLE_TYPE))\t\t\t\t\tthrow new AnalyzerException(insn, \"Expected double return type.\");\t\t\t\treturn null;\t\t\tcase ARETURN:\t\t\t\tif (!value.isReference())\t\t\t\t\tthrow new AnalyzerException(insn, \"Expected reference return type\");\t\t\t\treturn null;\t\t\tcase PUTSTATIC: {\t\t\t\t// Value == item on stack\t\t\t\tFieldInsnNode fin = (FieldInsnNode) insn;\t\t\t\tType fieldType = Type.getType(fin.desc);\t\t\t\tif (!isSubTypeOf(typeChecker, value.getType(), fieldType))\t\t\t\t\tmarkBad(insn, exceptionFactory.unexpectedType(fieldType, value.getType(), insn, value, TypeMismatchKind.PUTSTATIC));\t\t\t\treturn null;\t\t\t}\t\t\tcase GETFIELD: {\t\t\t\t// Value == field owner instance\t\t\t\t// - Check instance context is of the owner class\t\t\t\tFieldInsnNode fin = (FieldInsnNode) insn;\t\t\t\tType ownerType = Type.getObjectType(fin.owner);\t\t\t\tif (!isSubTypeOf(typeChecker, value.getType(), ownerType))\t\t\t\t\tmarkBad(insn, exceptionFactory.unexpectedType(Type.getObjectType(fin.owner),\t\t\t\t\t\t\tvalue.getType(), insn, value, TypeMismatchKind.GETFIELD));\t\t\t\tType type = Type.getType(fin.desc);\t\t\t\treturn newValue(combine(value.getInsns(), insn), type);\t\t\t}\t\t\tcase NEWARRAY:\t\t\t\tswitch(((IntInsnNode) insn).operand) {\t\t\t\t\tcase T_BOOLEAN:\t\t\t\t\t\treturn newValue(combine(value.getInsns(), insn), Type.getType(\"[Z\"));\t\t\t\t\tcase T_CHAR:\t\t\t\t\t\treturn newValue(combine(value.getInsns(), insn), Type.getType(\"[C\"));\t\t\t\t\tcase T_BYTE:\t\t\t\t\t\treturn newValue(combine(value.getInsns(), insn), Type.getType(\"[B\"));\t\t\t\t\tcase T_SHORT:\t\t\t\t\t\treturn newValue(combine(value.getInsns(), insn), Type.getType(\"[S\"));\t\t\t\t\tcase T_INT:\t\t\t\t\t\treturn newValue(combine(value.getInsns(), insn), Type.getType(\"[I\"));\t\t\t\t\tcase T_FLOAT:\t\t\t\t\t\treturn newValue(combine(value.getInsns(), insn), Type.getType(\"[F\"));\t\t\t\t\tcase T_DOUBLE:\t\t\t\t\t\treturn newValue(combine(value.getInsns(), insn), Type.getType(\"[D\"));\t\t\t\t\tcase T_LONG:\t\t\t\t\t\treturn newValue(combine(value.getInsns(), insn), Type.getType(\"[J\"));\t\t\t\t\tdefault:\t\t\t\t\t\tbreak;\t\t\t\t}\t\t\t\tthrow new AnalyzerException(insn, \"Invalid array type specified in instruction\");\t\t\tcase ANEWARRAY:\t\t\t\treturn newValue(combine(value.getInsns(), insn), Type.getType(\"[\" + Type.getObjectType(((TypeInsnNode) insn).desc)));\t\t\tcase ARRAYLENGTH:\t\t\t\tif (value.getValue() instanceof Unresolved && !((Unresolved) value.getValue()).isArray())\t\t\t\t\tmarkBad(insn, new AnalyzerException(insn, \"Expected an array type.\"));\t\t\t\treturn newValue(combine(value.getInsns(), insn), Type.INT_TYPE);\t\t\tcase ATHROW:\t\t\t\tif (!value.isReference())\t\t\t\t\tthrow new AnalyzerException(insn, \"Expected reference type on stack for ATHROW.\");\t\t\t\treturn null;\t\t\tcase CHECKCAST:\t\t\t\tif (!value.isReference())\t\t\t\t\tthrow new AnalyzerException(insn, \"Expected reference type on stack for CHECKCAST.\");\t\t\t\treturn newValue(combine(value.getInsns(), insn), Type.getObjectType(((TypeInsnNode) insn).desc));\t\t\tcase INSTANCEOF:\t\t\t\treturn newValue(combine(value.getInsns(), insn), Type.INT_TYPE);\t\t\tcase MONITORENTER:\t\t\tcase MONITOREXIT:\t\t\tcase IFNULL:\t\t\tcase IFNONNULL:\t\t\t\tif (!value.isReference())\t\t\t\t\tthrow new AnalyzerException(insn, \"Expected a reference type.\");\t\t\t\treturn null;\t\t\tdefault:\t\t\t\tthrow new IllegalStateException();\t\t}\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimInterpreter.java", "stars": "12", "class": {"name": "SimInterpreter", "extends": "Interpreter", "implements": null, "modifiers": ["public"]}}, {"method_name": "binaryOperation", "params": ["AbstractInsnNode", "AbstractValue", "AbstractValue"], "throws": null, "modifiers": ["public"], "return_type": "AbstractValue", "snippet": "\tpublic AbstractValue binaryOperation(AbstractInsnNode insn, AbstractValue value1, AbstractValue value2)  {\t\t// Modified from BasicVerifier\t\tType expected1;\t\tType expected2;\t\tboolean wasAALOAD = false;\t\tswitch (insn.getOpcode()) {\t\t\tcase IALOAD:\t\t\t\texpected1 = Type.getType(\"[I\");\t\t\t\texpected2 = Type.INT_TYPE;\t\t\t\tbreak;\t\t\tcase BALOAD:\t\t\t\tif (isSubTypeOf(typeChecker, value1.getType(), Type.getType(\"[Z\"))) {\t\t\t\t\texpected1 = Type.getType(\"[Z\");\t\t\t\t} else {\t\t\t\t\texpected1 = Type.getType(\"[B\");\t\t\t\t}\t\t\t\texpected2 = Type.INT_TYPE;\t\t\t\tbreak;\t\t\tcase CALOAD:\t\t\t\texpected1 = Type.getType(\"[C\");\t\t\t\texpected2 = Type.INT_TYPE;\t\t\t\tbreak;\t\t\tcase SALOAD:\t\t\t\texpected1 = Type.getType(\"[S\");\t\t\t\texpected2 = Type.INT_TYPE;\t\t\t\tbreak;\t\t\tcase LALOAD:\t\t\t\texpected1 = Type.getType(\"[J\");\t\t\t\texpected2 = Type.INT_TYPE;\t\t\t\tbreak;\t\t\tcase FALOAD:\t\t\t\texpected1 = Type.getType(\"[F\");\t\t\t\texpected2 = Type.INT_TYPE;\t\t\t\tbreak;\t\t\tcase DALOAD:\t\t\t\texpected1 = Type.getType(\"[D\");\t\t\t\texpected2 = Type.INT_TYPE;\t\t\t\tbreak;\t\t\tcase AALOAD:\t\t\t\texpected1 = Type.getType(\"[Ljava/lang/Object;\");\t\t\t\texpected2 = Type.INT_TYPE;\t\t\t\twasAALOAD = true;\t\t\t\tbreak;\t\t\tcase IF_ICMPEQ:\t\t\tcase IF_ICMPNE:\t\t\tcase IF_ICMPLT:\t\t\tcase IF_ICMPGE:\t\t\tcase IF_ICMPGT:\t\t\tcase IF_ICMPLE:\t\t\t\thandleOpqaues(insn, value1, value2);\t\t\tcase IADD:\t\t\tcase ISUB:\t\t\tcase IMUL:\t\t\tcase IDIV:\t\t\tcase IREM:\t\t\tcase ISHL:\t\t\tcase ISHR:\t\t\tcase IUSHR:\t\t\tcase IAND:\t\t\tcase IOR:\t\t\tcase IXOR:\t\t\t\texpected1 = Type.INT_TYPE;\t\t\t\texpected2 = Type.INT_TYPE;\t\t\t\tbreak;\t\t\tcase FADD:\t\t\tcase FSUB:\t\t\tcase FMUL:\t\t\tcase FDIV:\t\t\tcase FREM:\t\t\tcase FCMPL:\t\t\tcase FCMPG:\t\t\t\texpected1 = Type.FLOAT_TYPE;\t\t\t\texpected2 = Type.FLOAT_TYPE;\t\t\t\tbreak;\t\t\tcase LADD:\t\t\tcase LSUB:\t\t\tcase LMUL:\t\t\tcase LDIV:\t\t\tcase LREM:\t\t\tcase LAND:\t\t\tcase LOR:\t\t\tcase LXOR:\t\t\tcase LCMP:\t\t\t\texpected1 = Type.LONG_TYPE;\t\t\t\texpected2 = Type.LONG_TYPE;\t\t\t\tbreak;\t\t\tcase LSHL:\t\t\tcase LSHR:\t\t\tcase LUSHR:\t\t\t\texpected1 = Type.LONG_TYPE;\t\t\t\texpected2 = Type.INT_TYPE;\t\t\t\tbreak;\t\t\tcase DADD:\t\t\tcase DSUB:\t\t\tcase DMUL:\t\t\tcase DDIV:\t\t\tcase DREM:\t\t\tcase DCMPL:\t\t\tcase DCMPG:\t\t\t\texpected1 = Type.DOUBLE_TYPE;\t\t\t\texpected2 = Type.DOUBLE_TYPE;\t\t\t\tbreak;\t\t\tcase IF_ACMPEQ:\t\t\tcase IF_ACMPNE:\t\t\t\texpected1 = OBJECT_TYPE;\t\t\t\texpected2 = OBJECT_TYPE;\t\t\t\tbreak;\t\t\tcase PUTFIELD:\t\t\t\tFieldInsnNode fieldInsn = (FieldInsnNode) insn;\t\t\t\texpected1 = Type.getObjectType(fieldInsn.owner);\t\t\t\texpected2 = Type.getType(fieldInsn.desc);\t\t\t\tbreak;\t\t\tdefault:\t\t\t\tthrow new IllegalStateException();\t\t}\t\tif (wasAALOAD && value1 != UninitializedValue.UNINITIALIZED_VALUE &&\t\t\t\tvalue1.isArray() && value1.getType().getDimensions() > 1) {\t\t\t// If we are using AALOAD to load an object reference from an array, we check to see if the\t\t\t// reference loaded is the another array (consider int[][], fetching int[]) ...\t\t\t// In the bytecode, we don't have any immediate way to validate against an expected type.\t\t\t// So we shall do nothing :)\t\t} else if (value1 != UninitializedValue.UNINITIALIZED_VALUE && value2 != UninitializedValue.UNINITIALIZED_VALUE) {\t\t\tif (!isSubTypeOfOrNull(typeChecker, value1, expected1))\t\t\t\tmarkBad(insn, new AnalyzerException(insn, \"First argument not of expected type\", expected1, value1));\t\t\telse if (!isSubTypeOfOrNull(typeChecker, value2, expected2))\t\t\t\tmarkBad(insn, new AnalyzerException(insn, \"Second argument not of expected type\", expected2, value2));\t\t} else {\t\t\tmarkBad(insn, new AnalyzerException(insn, \"Cannot act on uninitialized values\", expected2, value2));\t\t}\t\t// Update values for non-primitives\t\tswitch(insn.getOpcode()) {\t\t\tcase FALOAD:\t\t\t\treturn newValue(combine(value1.getInsns(), value2.getInsns(), insn), Type.FLOAT_TYPE);\t\t\tcase LALOAD:\t\t\t\treturn newValue(combine(value1.getInsns(), value2.getInsns(), insn), Type.LONG_TYPE);\t\t\tcase DALOAD:\t\t\t\treturn newValue(combine(value1.getInsns(), value2.getInsns(), insn), Type.DOUBLE_TYPE);\t\t\tcase AALOAD:\t\t\t\tif (value1.getType() == null)\t\t\t\t\treturn newValue(combine(value1.getInsns(), value2.getInsns(), insn), OBJECT_TYPE);\t\t\t\telse\t\t\t\t\treturn newValue(combine(value1.getInsns(), value2.getInsns(), insn),\t\t\t\t\t\t\tType.getType(value1.getType().getDescriptor().substring(1)));\t\t\tcase IALOAD:\t\t\tcase BALOAD:\t\t\tcase CALOAD:\t\t\tcase SALOAD:\t\t\t\treturn newValue(combine(value1.getInsns(), value2.getInsns(), insn), Type.INT_TYPE);\t\t\tcase IF_ICMPEQ:\t\t\tcase IF_ICMPNE:\t\t\tcase IF_ICMPLT:\t\t\tcase IF_ICMPGE:\t\t\tcase IF_ICMPGT:\t\t\tcase IF_ICMPLE:\t\t\tcase IF_ACMPEQ:\t\t\tcase IF_ACMPNE:\t\t\tcase PUTFIELD:\t\t\t\treturn null;\t\t\tdefault:\t\t\t\tbreak;\t\t}\t\t// Update values for primitive operations\t\tPrimitiveValue p1 = (PrimitiveValue) value1;\t\tPrimitiveValue p2 = (PrimitiveValue) value2;\t\tswitch(insn.getOpcode()) {\t\t\tcase IADD:\t\t\tcase FADD:\t\t\tcase LADD:\t\t\tcase DADD:\t\t\t\treturn p1.add(insn, p2);\t\t\tcase ISUB:\t\t\tcase FSUB:\t\t\tcase LSUB:\t\t\tcase DSUB:\t\t\t\treturn p1.sub(insn, p2);\t\t\tcase IMUL:\t\t\tcase FMUL:\t\t\tcase LMUL:\t\t\tcase DMUL:\t\t\t\treturn p1.mul(insn, p2);\t\t\tcase IDIV:\t\t\tcase FDIV:\t\t\tcase LDIV:\t\t\tcase DDIV:\t\t\t\treturn p1.div(insn, p2);\t\t\tcase IREM:\t\t\tcase FREM:\t\t\tcase LREM:\t\t\tcase DREM:\t\t\t\treturn p1.rem(insn, p2);\t\t\tcase ISHL:\t\t\tcase LSHL:\t\t\t\treturn p1.shl(insn, p2);\t\t\tcase ISHR:\t\t\tcase LSHR:\t\t\t\treturn p1.shr(insn, p2);\t\t\tcase IUSHR:\t\t\tcase LUSHR:\t\t\t\treturn p1.ushr(insn, p2);\t\t\tcase IAND:\t\t\tcase LAND:\t\t\t\treturn p1.and(insn, p2);\t\t\tcase IOR:\t\t\tcase LOR:\t\t\t\treturn p1.or(insn, p2);\t\t\tcase IXOR:\t\t\tcase LXOR:\t\t\t\treturn p1.xor(insn, p2);\t\t\tcase LCMP:\t\t\tcase FCMPL:\t\t\tcase FCMPG:\t\t\tcase DCMPL:\t\t\tcase DCMPG:\t\t\t\tif (p1.getValue() == null || p2.getValue() == null ||\t\t\t\t\t\tisValueUnknown(p1) || isValueUnknown(p2))\t\t\t\t\treturn newValue(combine(value1.getInsns(), value2.getInsns(), insn), Type.INT_TYPE);\t\t\t\tdouble v1 = ((Number) value1.getValue()).doubleValue();\t\t\t\tdouble v2 = ((Number) value1.getValue()).doubleValue();\t\t\t\tif(v1 > v2)\t\t\t\t\treturn PrimitiveValue.ofInt(combine(value1.getInsns(), value2.getInsns(), insn), 1);\t\t\t\telse if(v1 < v2)\t\t\t\t\treturn PrimitiveValue.ofInt(combine(value1.getInsns(), value2.getInsns(), insn), -1);\t\t\t\telse\t\t\t\t\treturn PrimitiveValue.ofInt(combine(value1.getInsns(), value2.getInsns(), insn), 0);\t\t\tdefault:\t\t\t\tbreak;\t\t}\t\tthrow new IllegalStateException();\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimInterpreter.java", "stars": "12", "class": {"name": "SimInterpreter", "extends": "Interpreter", "implements": null, "modifiers": ["public"]}}, {"method_name": "ternaryOperation", "params": ["AbstractInsnNode", "AbstractValue", "AbstractValue", "AbstractValue"], "throws": null, "modifiers": ["public"], "return_type": "AbstractValue", "snippet": "\tpublic AbstractValue ternaryOperation(AbstractInsnNode insn, AbstractValue value1, AbstractValue value2,\t\t\t\t\t\t\t\t\t\t  AbstractValue value3) {\t\tType expected1;\t\tType expected3;\t\tswitch(insn.getOpcode()) {\t\t\tcase IASTORE:\t\t\t\texpected1 = Type.getType(\"[I\");\t\t\t\texpected3 = Type.INT_TYPE;\t\t\t\tbreak;\t\t\tcase BASTORE:\t\t\t\tif(isSubTypeOf(typeChecker, value1.getType(), Type.getType(\"[Z\"))) {\t\t\t\t\texpected1 = Type.getType(\"[Z\");\t\t\t\t} else {\t\t\t\t\texpected1 = Type.getType(\"[B\");\t\t\t\t}\t\t\t\texpected3 = Type.INT_TYPE;\t\t\t\tbreak;\t\t\tcase CASTORE:\t\t\t\texpected1 = Type.getType(\"[C\");\t\t\t\texpected3 = Type.INT_TYPE;\t\t\t\tbreak;\t\t\tcase SASTORE:\t\t\t\texpected1 = Type.getType(\"[S\");\t\t\t\texpected3 = Type.INT_TYPE;\t\t\t\tbreak;\t\t\tcase LASTORE:\t\t\t\texpected1 = Type.getType(\"[J\");\t\t\t\texpected3 = Type.LONG_TYPE;\t\t\t\tbreak;\t\t\tcase FASTORE:\t\t\t\texpected1 = Type.getType(\"[F\");\t\t\t\texpected3 = Type.FLOAT_TYPE;\t\t\t\tbreak;\t\t\tcase DASTORE:\t\t\t\texpected1 = Type.getType(\"[D\");\t\t\t\texpected3 = Type.DOUBLE_TYPE;\t\t\t\tbreak;\t\t\tcase AASTORE:\t\t\t\texpected1 = value1.getType();\t\t\t\texpected3 = OBJECT_TYPE;\t\t\t\tbreak;\t\t\tdefault:\t\t\t\tthrow new AssertionError();\t\t}\t\tif(!isSubTypeOf(typeChecker, value1.getType(), expected1))\t\t\tmarkBad(insn, new AnalyzerException(insn, \"First argument not of expected type\", expected1, value1));\t\telse if(!Type.INT_TYPE.equals(value2.getType()))\t\t\tmarkBad(insn, new AnalyzerException(insn, \"Second argument not an integer\", BasicValue.INT_VALUE, value2));\t\telse if(!isSubTypeOf(typeChecker, value3.getType(), expected3))\t\t\tmarkBad(insn, new AnalyzerException(insn, \"Second argument not of expected type\", expected3, value3));\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimInterpreter.java", "stars": "12", "class": {"name": "SimInterpreter", "extends": "Interpreter", "implements": null, "modifiers": ["public"]}}, {"method_name": "naryOperation", "params": ["AbstractInsnNode", "List<AbstractValue>"], "throws": ["AnalyzerException"], "modifiers": ["public"], "return_type": "AbstractValue", "snippet": "\tpublic AbstractValue naryOperation(AbstractInsnNode insn, List<? extends AbstractValue> values) throws AnalyzerException {\t\tint opcode = insn.getOpcode();\t\tif (opcode == MULTIANEWARRAY) {\t\t\t// Multi-dimensional array args must all be numeric\t\t\tfor (AbstractValue value : values)\t\t\t\tif (!Type.INT_TYPE.equals(value.getType()))\t\t\t\t\tthrow new AnalyzerException(insn, \"MULTIANEWARRAY argument was not numeric!\",\t\t\t\t\t\t\tnewValue(insn, Type.INT_TYPE), value);\t\t\treturn newValue(combine(values.stream()\t\t\t\t\t\t.flatMap(value -> value.getInsns().stream())\t\t\t\t\t\t.collect(Collectors.toList()), insn),\t\t\t\t\tType.getType(((MultiANewArrayInsnNode) insn).desc));\t\t}\t\t// Handle method invokes\t\tString methodDescriptor = (opcode == INVOKEDYNAMIC) ?\t\t\t\t((InvokeDynamicInsnNode) insn).desc :\t\t\t\t((MethodInsnNode) insn).desc;\t\tType[] args = Type.getArgumentTypes(methodDescriptor);\t\t// From BasicVerifier\t\tint i = 0;\t\tint j = 0;\t\tif(opcode != INVOKESTATIC && opcode != INVOKEDYNAMIC) {\t\t\tMethodInsnNode min = ((MethodInsnNode) insn);\t\t\tType owner = Type.getObjectType(min.owner);\t\t\tAbstractValue actual = values.get(i++);\t\t\tif(!isSubTypeOf(typeChecker, actual.getType(), owner) &&\t\t\t\t\t!(isMethodAddSuppressed(min) && actual instanceof NullConstantValue))\t\t\t\tmarkBad(insn, exceptionFactory.unexpectedMethodHostType(owner, actual.getType(),\t\t\t\t\t\t(MethodInsnNode) insn, actual, values, TypeMismatchKind.INVOKE_HOST_TYPE));\t\t}\t\twhile(i < values.size()) {\t\t\tType expected = args[j++];\t\t\tAbstractValue actual = values.get(i++);\t\t\tif(!isSubTypeOfOrNull(typeChecker, actual, expected)) {\t\t\t\tmarkBad(insn, exceptionFactory.unexpectedMethodArgType(expected, actual.getType(),\t\t\t\t\t\tinsn, actual, values, i, TypeMismatchKind.INVOKE_ARG_TYPE));\t\t\t}\t\t}\t\t// Get value\t\tif (opcode == INVOKEDYNAMIC) {\t\t\tType retType = Type.getReturnType(((InvokeDynamicInsnNode) insn).desc);\t\t\treturn newValue(insn, retType);\t\t} else if (opcode == INVOKESTATIC) {\t\t\t// Attempt to create simulated value\t\t\tMethodInsnNode min = (MethodInsnNode) insn;\t\t\ttry {\t\t\t\tAbstractValue value = SimulatedVirtualValue.ofStaticInvoke(staticInvokeFactory, min, values, typeChecker);\t\t\t\tif (value != null)\t\t\t\t\treturn value;\t\t\t} catch(SimFailedException ex) {\t\t\t\t// Do nothing for simulation failing, this is expected in MOST cases.\t\t\t}\t\t\t// Fallback to virtual value\t\t\tType retType = Type.getReturnType(((MethodInsnNode) insn).desc);\t\t\treturn newValue(combine(values.stream()\t\t\t\t\t\t.flatMap(value -> value.getInsns().stream())\t\t\t\t\t\t.collect(Collectors.toList()), insn), retType);\t\t}\t\t// INVOKEVIRTUAL, INVOKESPECIAL, INVOKEINTERFACE\t\tMethodInsnNode min = (MethodInsnNode) insn;\t\tAbstractValue ownerValue = values.get(0);\t\tif(ownerValue == UninitializedValue.UNINITIALIZED_VALUE)\t\t\tthrow new AnalyzerException(insn, \"Cannot call method on uninitialized reference\");\t\telse if (ownerValue instanceof NullConstantValue && !isMethodAddSuppressed(min)) {\t\t\tmarkBad(insn, exceptionFactory.unexpectedNullReference(\t\t\t\t\tmin, ownerValue, values, TypeMismatchKind.INVOKE_HOST_NULL));\t\t\treturn newValue(insn, Type.getMethodType(min.desc).getReturnType());\t\t} else if (ownerValue instanceof NullConstantValue && isMethodAddSuppressed(min)) {\t\t\t// Don't you just LOVE edge cases?\t\t\treturn null;\t\t} else {\t\t\t// Get return value\t\t\tif (ownerValue instanceof SimulatedVirtualValue) {\t\t\t\tSimulatedVirtualValue simObject = (SimulatedVirtualValue) ownerValue;\t\t\t\tList<? extends AbstractValue> arguments = values.subList(1, values.size());\t\t\t\ttry {\t\t\t\t\treturn simObject.ofVirtualInvoke(min, arguments);\t\t\t\t} catch(SimFailedException ex) {\t\t\t\t\t// Do nothing for simulation failing, this is expected in MOST cases.\t\t\t\t}\t\t\t}\t\t\tif (ownerValue instanceof VirtualValue) {\t\t\t\tVirtualValue virtualOwner = (VirtualValue) ownerValue;\t\t\t\treturn virtualOwner.ofMethodRef(insn, typeChecker, Type.getMethodType(((MethodInsnNode) insn).desc));\t\t\t}\t\t\tthrow new AnalyzerException(insn, \"Virtual method context could not be resolved\");\t\t}\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimInterpreter.java", "stars": "12", "class": {"name": "SimInterpreter", "extends": "Interpreter", "implements": null, "modifiers": ["public"]}}, {"method_name": "returnOperation", "params": ["AbstractInsnNode", "AbstractValue", "AbstractValue"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void returnOperation(AbstractInsnNode insn, AbstractValue value, AbstractValue expected) {\t\tif(!isSubTypeOfOrNull(typeChecker, value, expected))\t\t\tmarkBad(insn, exceptionFactory.unexpectedType(expected.getType(), value.getType(), insn, value, TypeMismatchKind.RETURN));\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimInterpreter.java", "stars": "12", "class": {"name": "SimInterpreter", "extends": "Interpreter", "implements": null, "modifiers": ["public"]}}, {"method_name": "merge", "params": ["AbstractValue", "AbstractValue"], "throws": null, "modifiers": ["public"], "return_type": "AbstractValue", "snippet": "\tpublic AbstractValue merge(AbstractValue value1, AbstractValue value2) {\t\t// Handle uninitialized\t\t//  - and NO... Do not make another case checking against value1\t\t//  - Trust me, just dont.\t\tif (value2 == UninitializedValue.UNINITIALIZED_VALUE)\t\t\treturn value1;\t\t// Handle equality\t\tif (value1.equals(value2))\t\t\treturn value1;\t\t// Handle null\t\t//  - NULL can be ANY type, so... it wins the \"common super type\" here\t\tList<AbstractInsnNode> merged =\t\t\t\tdistinct(combine(value1.getInsns(), value2.getInsns()));\t\tif (value2 instanceof NullConstantValue)\t\t\treturn value1.isNull() ? AbstractValue.ofDefault(null, typeChecker, value1.getType()) : newValue(merged, value1.getType());\t\telse if (value1 instanceof NullConstantValue)\t\t\treturn value2.isNull() ? AbstractValue.ofDefault(null, typeChecker, value2.getType()) : newValue(merged, value2.getType());\t\t// Check standard merge\t\tif (value1.canMerge(value2))\t\t\treturn newValue(merged, value1.getType());\t\telse if (value2.canMerge(value1))\t\t\treturn newValue(merged, value2.getType());\t\treturn UninitializedValue.UNINITIALIZED_VALUE;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimInterpreter.java", "stars": "12", "class": {"name": "SimInterpreter", "extends": "Interpreter", "implements": null, "modifiers": ["public"]}}, {"method_name": "isValueUnknown", "params": ["AbstractValue"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "\tprivate boolean isValueUnknown(AbstractValue value) {\t\treturn value.getValue() == null || value.getValue() instanceof Unresolved;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimInterpreter.java", "stars": "12", "class": {"name": "SimInterpreter", "extends": "Interpreter", "implements": null, "modifiers": ["public"]}}, {"method_name": "toFloat", "params": ["AbstractValue"], "throws": null, "modifiers": ["private"], "return_type": "float", "snippet": "\tprivate float toFloat(AbstractValue value) {\t\treturn ((Number) value.getValue()).floatValue();\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimInterpreter.java", "stars": "12", "class": {"name": "SimInterpreter", "extends": "Interpreter", "implements": null, "modifiers": ["public"]}}, {"method_name": "toDouble", "params": ["AbstractValue"], "throws": null, "modifiers": ["private"], "return_type": "double", "snippet": "\tprivate double toDouble(AbstractValue value) {\t\treturn ((Number) value.getValue()).doubleValue();\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimInterpreter.java", "stars": "12", "class": {"name": "SimInterpreter", "extends": "Interpreter", "implements": null, "modifiers": ["public"]}}, {"method_name": "toInt", "params": ["AbstractValue"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "\tprivate int toInt(AbstractValue value) {\t\treturn ((Number) value.getValue()).intValue();\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimInterpreter.java", "stars": "12", "class": {"name": "SimInterpreter", "extends": "Interpreter", "implements": null, "modifiers": ["public"]}}, {"method_name": "toLong", "params": ["AbstractValue"], "throws": null, "modifiers": ["private"], "return_type": "long", "snippet": "\tprivate long toLong(AbstractValue value) {\t\treturn ((Number) value.getValue()).longValue();\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimInterpreter.java", "stars": "12", "class": {"name": "SimInterpreter", "extends": "Interpreter", "implements": null, "modifiers": ["public"]}}, {"method_name": "isMethodAddSuppressed", "params": ["MethodInsnNode"], "throws": null, "modifiers": ["private", "static"], "return_type": "boolean", "snippet": "\tprivate static boolean isMethodAddSuppressed(MethodInsnNode insn) {\t\t// Seriously, wtf is this?\t\t// Compile the code below:\t\t//\t\t//// try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {}\t\t//// finally {  is.close();  }\t\t//\t\t// This will literally generate a call that behaves like \"null.addSuppressed(Throwable)\"\t\t// - It generates a method call on a variable that is ALWAYS null\t\t//\t\t// And that is why we have this check...\t\treturn insn.owner.equals(\"java/lang/Throwable\") &&\t\t\t\tinsn.name.equals(\"addSuppressed\") &&\t\t\t\tinsn.desc.equals(\"(Ljava/lang/Throwable;)V\");\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/SimInterpreter.java", "stars": "12", "class": {"name": "SimInterpreter", "extends": "Interpreter", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        demo03();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/12.%E3%80%90Object%E7%B1%BB%E3%80%81%E5%B8%B8%E7%94%A8API%E3%80%91-%E7%AC%94%E8%AE%B0/code/01_API/src/com/itheima/demo02/Date/Demo02Date.java", "stars": "2", "class": {"name": "Demo02Date", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "demo03", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void demo03() {        Date date = new Date();        long time = date.getTime();        System.out.println(time);//3742777636267    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/12.%E3%80%90Object%E7%B1%BB%E3%80%81%E5%B8%B8%E7%94%A8API%E3%80%91-%E7%AC%94%E8%AE%B0/code/01_API/src/com/itheima/demo02/Date/Demo02Date.java", "stars": "2", "class": {"name": "Demo02Date", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "demo02", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void demo02() {        Date date = new Date(0L);        System.out.println(date);// Thu Jan 01 08:00:00 CST 1970        date = new Date(3742767540068L);        System.out.println(date);// Sun Aug 08 09:39:00 CST 2088    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/12.%E3%80%90Object%E7%B1%BB%E3%80%81%E5%B8%B8%E7%94%A8API%E3%80%91-%E7%AC%94%E8%AE%B0/code/01_API/src/com/itheima/demo02/Date/Demo02Date.java", "stars": "2", "class": {"name": "Demo02Date", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "demo01", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void demo01() {        Date date = new Date();        System.out.println(date);//Sun Aug 08 12:23:03 CST 2088    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/12.%E3%80%90Object%E7%B1%BB%E3%80%81%E5%B8%B8%E7%94%A8API%E3%80%91-%E7%AC%94%E8%AE%B0/code/01_API/src/com/itheima/demo02/Date/Demo02Date.java", "stars": "2", "class": {"name": "Demo02Date", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onPacket", "params": ["PacketEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPacket(PacketEvent e) {        if (animation) {            if (e.getPacket() instanceof CPacketAnimation) {                e.setCancelled(true);            }        }        if (keepalive) {            if (e.getPacket() instanceof CPacketKeepAlive) {                e.setCancelled(true);            }        }        if (chatmessage) {            if (e.getPacket() instanceof CPacketChatMessage) {                e.setCancelled(true);            }        }        if (clickwindow) {            if (e.getPacket() instanceof CPacketClickWindow) {                e.setCancelled(true);            }        }        if (clientsettings) {            if (e.getPacket() instanceof CPacketClientSettings) {                e.setCancelled(true);            }        }        if (clientstatus) {            if (e.getPacket() instanceof CPacketClientStatus) {                e.setCancelled(true);            }        }        if (closewindow) {            if (e.getPacket() instanceof CPacketCloseWindow) {                e.setCancelled(true);            }        }        if (confirmteleport) {            if (e.getPacket() instanceof CPacketConfirmTeleport) {                e.setCancelled(true);            }        }        if (confirmtransaction) {            if (e.getPacket() instanceof CPacketConfirmTransaction) {                e.setCancelled(true);            }        }        if (creativeinventoryaction) {            if (e.getPacket() instanceof CPacketCreativeInventoryAction) {                e.setCancelled(true);            }        }        if (custompayload) {            if (e.getPacket() instanceof CPacketCustomPayload) {                e.setCancelled(true);            }        }        if (enchantitem) {            if (e.getPacket() instanceof CPacketEnchantItem) {                e.setCancelled(true);            }        }        if (entityaction) {            if (e.getPacket() instanceof CPacketEntityAction) {                e.setCancelled(true);            }        }        if (helditemchange) {            if (e.getPacket() instanceof CPacketHeldItemChange) {                e.setCancelled(true);            }        }        if (input) {            if (e.getPacket() instanceof CPacketInput) {                e.setCancelled(true);            }        }    if (placerecipe) {        if (e.getPacket() instanceof CPacketPlaceRecipe) {            e.setCancelled(true);        }    }    if (player) {        if (e.getPacket() instanceof CPacketPlayer) {            e.setCancelled(true);        }    }    if (playerabilities) {        if (e.getPacket() instanceof CPacketPlayerAbilities) {            e.setCancelled(true);        }    }    if (playerdigging) {            if (e.getPacket() instanceof CPacketPlayerDigging) {                e.setCancelled(true);            }        }    if (tryuseitem) {            if (e.getPacket() instanceof CPacketPlayerTryUseItem) {                e.setCancelled(true);            }        }        if (tryuseitemonblock) {            if (e.getPacket() instanceof CPacketPlayerTryUseItemOnBlock) {                e.setCancelled(true);            }        }    if (recipeinfo) {            if (e.getPacket() instanceof CPacketRecipeInfo) {                e.setCancelled(true);            }        }        if (resourcepackstatus) {            if (e.getPacket() instanceof CPacketResourcePackStatus) {                e.setCancelled(true);            }        }        if (seendadvancements) {            if (e.getPacket() instanceof CPacketSeenAdvancements) {                e.setCancelled(true);            }        }        if (spectate) {            if (e.getPacket() instanceof CPacketSpectate) {                e.setCancelled(true);            }        }        if (steerboat) {            if (e.getPacket() instanceof CPacketSteerBoat) {                e.setCancelled(true);            }        }        if (tabcomplete) {            if (e.getPacket() instanceof CPacketTabComplete) {                e.setCancelled(true);            }        }        if (updatesign) {            if (e.getPacket() instanceof CPacketUpdateSign) {                e.setCancelled(true);            }        }        if (vehiclemove) {            if (e.getPacket() instanceof CPacketVehicleMove) {                e.setCancelled(true);            }        }        if (encryptionresponse) {            if (e.getPacket() instanceof CPacketEncryptionResponse) {                e.setCancelled(true);            }        }        if (ping) {            if (e.getPacket() instanceof CPacketPing) {                e.setCancelled(true);            }        }        if (serverquery) {            if (e.getPacket() instanceof CPacketServerQuery) {                e.setCancelled(true);            }        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/misc/PacketCancel.java", "stars": "12", "class": {"name": "PacketCancel", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "setGravity", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setGravity(int gravity) {            switch (gravity) {                // \u5982\u679c\u8fd9\u4e2a\u662f\u5728\u4e2d\u95f4\u663e\u793a\u7684                case Gravity.CENTER:                case Gravity.CENTER_VERTICAL:                    // \u91cd\u65b0\u8bbe\u7f6e\u52a8\u753b                    setAnimStyle(AnimAction.SCALE);                    break;                default:                    break;            }            return super.setGravity(gravity);        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/popup/MenuPopup.java", "stars": "1", "class": {"name": "Builder", "extends": "BasePopupWindow", "implements": ["BaseAdapter"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setList", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setList(int... ids) {            List<String> data = new ArrayList<>(ids.length);            for (int id : ids) {                data.add(getString(id));            }            return setList(data);        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/popup/MenuPopup.java", "stars": "1", "class": {"name": "Builder", "extends": "BasePopupWindow", "implements": ["BaseAdapter"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setList", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setList(String... data) {            return setList(Arrays.asList(data));        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/popup/MenuPopup.java", "stars": "1", "class": {"name": "Builder", "extends": "BasePopupWindow", "implements": ["BaseAdapter"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setList", "params": ["List"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setList(List data) {            mAdapter.setData(data);            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/popup/MenuPopup.java", "stars": "1", "class": {"name": "Builder", "extends": "BasePopupWindow", "implements": ["BaseAdapter"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setAutoDismiss", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setAutoDismiss(boolean dismiss) {            mAutoDismiss = dismiss;            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/popup/MenuPopup.java", "stars": "1", "class": {"name": "Builder", "extends": "BasePopupWindow", "implements": ["BaseAdapter"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setListener", "params": ["OnListener"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setListener(OnListener listener) {            mListener = listener;            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/popup/MenuPopup.java", "stars": "1", "class": {"name": "Builder", "extends": "BasePopupWindow", "implements": ["BaseAdapter"], "modifiers": ["public", "final", "static"]}}, {"method_name": "onItemClick", "params": ["RecyclerView", "View", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onItemClick(RecyclerView recyclerView, View itemView, int position) {            if (mAutoDismiss) {                dismiss();            }            if (mListener != null) {                mListener.onSelected(getPopupWindow(), position, mAdapter.getItem(position));            }        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/popup/MenuPopup.java", "stars": "1", "class": {"name": "Builder", "extends": "BasePopupWindow", "implements": ["BaseAdapter"], "modifiers": ["public", "final", "static"]}}, {"method_name": "onCreateViewHolder", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "ViewHolder", "snippet": "        public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {            return new ViewHolder();        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/popup/MenuPopup.java", "stars": "1", "class": {"name": "MenuAdapter", "extends": "MyAdapter", "implements": null, "modifiers": ["private", "static", "final"]}}, {"method_name": "onBindView", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "            public void onBindView(int position) {                mTextView.setText(getItem(position).toString());            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/popup/MenuPopup.java", "stars": "1", "class": {"name": "ViewHolder", "extends": "MyAdapter", "implements": null, "modifiers": ["final"]}}, {"method_name": "getDepartmentId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getDepartmentId() {        return departmentId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/DepartmentMaintainer.java", "stars": "18", "class": {"name": "DepartmentMaintainer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDepartmentId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDepartmentId(Integer departmentId) {        this.departmentId = departmentId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/DepartmentMaintainer.java", "stars": "18", "class": {"name": "DepartmentMaintainer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDepartmentName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDepartmentName() {        return departmentName;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/DepartmentMaintainer.java", "stars": "18", "class": {"name": "DepartmentMaintainer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDepartmentName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDepartmentName(String departmentName) {        this.departmentName = departmentName;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/DepartmentMaintainer.java", "stars": "18", "class": {"name": "DepartmentMaintainer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOpsUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOpsUser() {        return opsUser;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/DepartmentMaintainer.java", "stars": "18", "class": {"name": "DepartmentMaintainer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOpsUser", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOpsUser(String opsUser) {        this.opsUser = opsUser;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/DepartmentMaintainer.java", "stars": "18", "class": {"name": "DepartmentMaintainer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOpsUsers", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> getOpsUsers() {        return opsUsers;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/DepartmentMaintainer.java", "stars": "18", "class": {"name": "DepartmentMaintainer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOpsUsers", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOpsUsers(List<String> opsUsers) {        this.opsUsers = opsUsers;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/DepartmentMaintainer.java", "stars": "18", "class": {"name": "DepartmentMaintainer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"DepartmentMaintainer{\" +                \"departmentId=\" + departmentId +                \", departmentName='\" + departmentName + '\\'' +                \", opsUser='\" + opsUser + '\\'' +                '}';    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/DepartmentMaintainer.java", "stars": "18", "class": {"name": "DepartmentMaintainer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkType", "params": [], "throws": ["TypeException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void checkType() throws TypeException {\t\tthis.getSon().checkType();\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprADDRESS.java", "stars": "3", "class": {"name": "ExprADDRESS", "extends": "ExprUnary", "implements": null, "modifiers": ["public"]}}, {"method_name": "constEval", "params": ["Environment<ExprVALUE>"], "throws": ["EnvironmentException", "TypeException"], "modifiers": ["public"], "return_type": "Object", "snippet": "\tpublic Object constEval(Environment<ExprVALUE> environment) throws EnvironmentException, TypeException {\t\tthrow new TypeException(\"erreur syst\u00e8me\", line, column);\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprADDRESS.java", "stars": "3", "class": {"name": "ExprADDRESS", "extends": "ExprUnary", "implements": null, "modifiers": ["public"]}}, {"method_name": "getAdressCode", "params": [], "throws": ["CodeException"], "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getAdressCode() throws CodeException {\t\treturn \"(void *)&\" + getSon().generateCode();\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprADDRESS.java", "stars": "3", "class": {"name": "ExprADDRESS", "extends": "ExprUnary", "implements": null, "modifiers": ["public"]}}, {"method_name": "generateCode", "params": [], "throws": ["CodeException"], "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String generateCode() throws CodeException {\t\tString result;\t\tresult = getSon().generateCode();\t\treturn result;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprADDRESS.java", "stars": "3", "class": {"name": "ExprADDRESS", "extends": "ExprUnary", "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\treturn \"@\" + this.getSon();\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprADDRESS.java", "stars": "3", "class": {"name": "ExprADDRESS", "extends": "ExprUnary", "implements": null, "modifiers": ["public"]}}, {"method_name": "addSupport", "params": ["Map<String,Method>", "Set<String>", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void addSupport(Map<String, Method> temp, Set<String> set, String name) {        set.add(name);        addMethod(temp, name);    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/ArrayLikeLambdaOneArgumentExecutor.java", "stars": "13", "class": {"name": "ArrayLikeLambdaOneArgumentExecutor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addMethod", "params": ["Map<String,Method>", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void addMethod(Map<String, Method> initialMap, String name) {        try {            initialMap.put(name, ArrayLikeLambdaOneArgumentExecutor.class.getMethod(name, Object.class, Object[].class));        } catch (NoSuchMethodException e) {            e.printStackTrace();            throw new RuntimeException(e);        }    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/ArrayLikeLambdaOneArgumentExecutor.java", "stars": "13", "class": {"name": "ArrayLikeLambdaOneArgumentExecutor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "eachParse", "params": ["Object", "Object", "SPConsumer"], "throws": null, "modifiers": ["private", "static"], "return_type": "Object", "snippet": "    private static Object eachParse(Object arrayLike, Object argument, SPConsumer spConsumer) {        List<Object> results = null;        List<Object> args = (List<Object>) argument;        results = new ArrayList<>(args.size());        for (int j = 0; j < args.size(); j++) {            SourceAndParsed<Object, Object> result = (SourceAndParsed<Object, Object>) ((Supplier) args.get(j)).get();            spConsumer.accept(results, result);        }        if (arrayLike instanceof Collection) {            return results;        } else if (arrayLike.getClass().isArray()) {            return results.toArray();        } else if (arrayLike instanceof Iterator) {            return results;        } else if (arrayLike instanceof Enumeration) {            return results;        }        throw new RuntimeException(\"\u672a\u5b9e\u73b0\");    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/ArrayLikeLambdaOneArgumentExecutor.java", "stars": "13", "class": {"name": "ArrayLikeLambdaOneArgumentExecutor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "map", "params": ["Object", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "Object", "snippet": "    public static Object map(Object arrayLike, Object... arguments) {        return eachParse(arrayLike, arguments[0], (list, sp) -> list.add(sp.getParsed()));    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/ArrayLikeLambdaOneArgumentExecutor.java", "stars": "13", "class": {"name": "ArrayLikeLambdaOneArgumentExecutor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "filter", "params": ["Object", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "Object", "snippet": "    public static Object filter(Object arrayLike, Object... arguments) {        return eachParse(arrayLike, arguments[0], (list, sp) -> {            if (sp.getParsed() instanceof Boolean) {                if ((Boolean)sp.getParsed()) {                    list.add(sp.getSource());                }            } else {                throw new RuntimeException(\"lambda\u51fd\u6570filter\u7684\u7ed3\u679c\u975e\u5e03\u5c14\u7c7b\u578b\");            }        });    }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/ArrayLikeLambdaOneArgumentExecutor.java", "stars": "13", "class": {"name": "ArrayLikeLambdaOneArgumentExecutor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getParsed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "P", "snippet": "        public P getParsed() {            return parsed;        }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/ArrayLikeLambdaOneArgumentExecutor.java", "stars": "13", "class": {"name": "SourceAndParsed", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setParsed", "params": ["P"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setParsed(P parsed) {            this.parsed = parsed;        }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/ArrayLikeLambdaOneArgumentExecutor.java", "stars": "13", "class": {"name": "SourceAndParsed", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSource", "params": [], "throws": null, "modifiers": ["public"], "return_type": "S", "snippet": "        public S getSource() {            return source;        }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/ArrayLikeLambdaOneArgumentExecutor.java", "stars": "13", "class": {"name": "SourceAndParsed", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setSource", "params": ["S"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setSource(S source) {            this.source = source;        }", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/parsing/ArrayLikeLambdaOneArgumentExecutor.java", "stars": "13", "class": {"name": "SourceAndParsed", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "register", "params": ["ExecutorNode"], "throws": null, "modifiers": ["public"], "return_type": "Response<String>", "snippet": "    public Response<String> register(@Valid @RequestBody ExecutorNode node){        boolean status  = false;        ExecutorNode nodeInDb = executorNodeService.getByAddress(node.getAddress());        if(nodeInDb == null){            //The execution node does not exist            if(executorNodeService.add(node)){                logger.info(\"Add executor node success {}\", node.getAddress());                status = true;            }else{                logger.info(\"Add executor node failed\");            }        }else{            if(executorNodeService.update(node)){                status = true;            }        }        return status? new Response<String>().successResponse(null) : new Response<String>().errorResponse(501,null,\"register error\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/controller/ExecNodeController.java", "stars": "23", "class": {"name": "ExecNodeController", "extends": "ExceptionResolverContext", "implements": null, "modifiers": ["public"]}}, {"method_name": "heartbeat", "params": ["ExecutorNode"], "throws": null, "modifiers": ["public"], "return_type": "Response<String>", "snippet": "    public Response<String> heartbeat(@Valid @RequestBody ExecutorNode node){        boolean status  = false;        ExecutorNode nodeInDb = executorNodeService.getByAddress(node.getAddress());        if(nodeInDb != null){            if(executorNodeService.updateHeartbeat(node) > 0){                status = true;            }            logger.info(\"Node information: \" + Json.toJson(node, null));            List<TaskState> taskStates = node.getTaskStates();            //Update task state in database            if(!taskStates.isEmpty()) {                jobTaskService.updateTaskState(node.getAddress(), taskStates);            }        }else {            executorNodeService.add(node);            logger.info(\"Address [{}] not exists. so add one\",node.getAddress());            status = true;        }        return status? new Response<String>().successResponse(null) : new Response<String>().errorResponse(501,null,\"register error\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/controller/ExecNodeController.java", "stars": "23", "class": {"name": "ExecNodeController", "extends": "ExceptionResolverContext", "implements": null, "modifiers": ["public"]}}, {"method_name": "list", "params": ["HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "Response<Object>", "snippet": "    public Response<Object> list(HttpServletRequest request){        String userName = util.getUserName(request);        Set<ExecutorNode> nodes = new HashSet<>(execNodeInfoService.getExecNodesByAppUser(userName));        //Get default nodes        List<ExecutorNode> defaultNodes = execNodeInfoService.getDefaultNodeListByTab(null);        nodes.addAll(defaultNodes);        return new Response<>().successResponse(nodes);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/controller/ExecNodeController.java", "stars": "23", "class": {"name": "ExecNodeController", "extends": "ExceptionResolverContext", "implements": null, "modifiers": ["public"]}}, {"method_name": "listByTab", "params": ["HttpServletRequest", "String"], "throws": null, "modifiers": ["public"], "return_type": "Response<Object>", "snippet": "    public Response<Object> listByTab(HttpServletRequest request, @PathVariable(\"tab\")String tab){        String userName = util.getUserName(request);        Set<ExecutorNode> nodes = new HashSet<>(execNodeInfoService.getExecNodesByAppUserAndTab(userName, tab));        //Get default nodes        List<ExecutorNode> defaultNodes = execNodeInfoService.getDefaultNodeListByTab(tab);        nodes.addAll(defaultNodes);        return new Response<>().successResponse(nodes);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/controller/ExecNodeController.java", "stars": "23", "class": {"name": "ExecNodeController", "extends": "ExceptionResolverContext", "implements": null, "modifiers": ["public"]}}, {"method_name": "newInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "TVMediaGridFragment", "snippet": "    public static TVMediaGridFragment newInstance() {        return new TVMediaGridFragment();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVMediaGridFragment.java", "stars": "4", "class": {"name": "TVMediaGridFragment", "extends": "VerticalGridFragment", "implements": ["OnItemViewClickedListener", "OnItemViewSelectedListener"], "modifiers": ["public"]}}, {"method_name": "onAttach", "params": ["Context"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onAttach(Context context) {        super.onAttach(context);        mCallback = (Callback) context;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVMediaGridFragment.java", "stars": "4", "class": {"name": "TVMediaGridFragment", "extends": "VerticalGridFragment", "implements": ["OnItemViewClickedListener", "OnItemViewSelectedListener"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        TVButterApplication.getAppContext()                .getComponent()                .inject(this);        super.onCreate(savedInstanceState);        setupFragment();   }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVMediaGridFragment.java", "stars": "4", "class": {"name": "TVMediaGridFragment", "extends": "VerticalGridFragment", "implements": ["OnItemViewClickedListener", "OnItemViewSelectedListener"], "modifiers": ["public"]}}, {"method_name": "onActivityCreated", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onActivityCreated(Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);        Activity activity = getActivity();        setTitle(StringUtils.capWords((String) activity.getTitle()));        if (activity instanceof Callback && mCallback == null) {            mCallback = (Callback) getActivity();        }        loadItems();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVMediaGridFragment.java", "stars": "4", "class": {"name": "TVMediaGridFragment", "extends": "VerticalGridFragment", "implements": ["OnItemViewClickedListener", "OnItemViewSelectedListener"], "modifiers": ["public"]}}, {"method_name": "setupFragment", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setupFragment() {        //setup background updater        mBackgroundUpdater = new BackgroundUpdater();        mBackgroundUpdater.initialise(getActivity(), R.color.black);        VerticalGridPresenter gridPresenter = new VerticalGridPresenter();        gridPresenter.setNumberOfColumns(NUM_COLUMNS);        setGridPresenter(gridPresenter);        mAdapter = new ArrayObjectAdapter(new MediaCardPresenter(getActivity()));        setAdapter(mAdapter);        setOnItemViewClickedListener(this);        setOnItemViewSelectedListener(this);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVMediaGridFragment.java", "stars": "4", "class": {"name": "TVMediaGridFragment", "extends": "VerticalGridFragment", "implements": ["OnItemViewClickedListener", "OnItemViewSelectedListener"], "modifiers": ["public"]}}, {"method_name": "getFilters", "params": [], "throws": null, "modifiers": ["private"], "return_type": "MediaProvider", "snippet": "    private MediaProvider.Filters getFilters() {        MediaProvider.Filters filters = new MediaProvider.Filters(mCallback.getFilters());        filters.setPage(mCurrentPage);        return filters;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVMediaGridFragment.java", "stars": "4", "class": {"name": "TVMediaGridFragment", "extends": "VerticalGridFragment", "implements": ["OnItemViewClickedListener", "OnItemViewSelectedListener"], "modifiers": ["public"]}}, {"method_name": "loadItems", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void loadItems() {        providerManager.getCurrentMediaProvider().getList(null, getFilters(), new MediaProvider.Callback() {            @DebugLog            @Override            public void onSuccess(MediaProvider.Filters filters, ArrayList<Media> items) {                mCurrentPage = filters.getPage();                final List<MediaCardPresenter.MediaCardItem> list = MediaCardPresenter.convertMediaToOverview(items);                mItems.addAll(list);                final int previousSize = mAdapter.size();                ThreadUtils.runOnUiThread(new Runnable() {                    @Override                    public void run() {                        mAdapter.addAll(previousSize, list);                        mAdapter.notifyArrayItemRangeChanged(previousSize, list.size());                    }                });            }            @DebugLog            @Override            public void onFailure(Exception e) {                e.printStackTrace();                ThreadUtils.runOnUiThread(new Runnable() {                    @Override                    public void run() {                        Toast.makeText(getActivity(), \"error getting show list\", Toast.LENGTH_SHORT).show();                    }                });            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVMediaGridFragment.java", "stars": "4", "class": {"name": "TVMediaGridFragment", "extends": "VerticalGridFragment", "implements": ["OnItemViewClickedListener", "OnItemViewSelectedListener"], "modifiers": ["public"]}}, {"method_name": "loadMore", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void loadMore() {        mCurrentPage++;        loadItems();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVMediaGridFragment.java", "stars": "4", "class": {"name": "TVMediaGridFragment", "extends": "VerticalGridFragment", "implements": ["OnItemViewClickedListener", "OnItemViewSelectedListener"], "modifiers": ["public"]}}, {"method_name": "onItemClicked", "params": ["Presenter", "Object", "RowPresenter", "Row"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onItemClicked(Presenter.ViewHolder itemViewHolder, Object item, RowPresenter.ViewHolder rowViewHolder, Row row) {        if (item instanceof MediaCardPresenter.MediaCardItem) {            onMediaItemClicked((ImageCardView) itemViewHolder.view, (MediaCardPresenter.MediaCardItem) item);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVMediaGridFragment.java", "stars": "4", "class": {"name": "TVMediaGridFragment", "extends": "VerticalGridFragment", "implements": ["OnItemViewClickedListener", "OnItemViewSelectedListener"], "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDestroy() {        super.onDestroy();        if (null != mBackgroundUpdater) mBackgroundUpdater.destroy();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVMediaGridFragment.java", "stars": "4", "class": {"name": "TVMediaGridFragment", "extends": "VerticalGridFragment", "implements": ["OnItemViewClickedListener", "OnItemViewSelectedListener"], "modifiers": ["public"]}}, {"method_name": "onMediaItemClicked", "params": ["ImageCardView", "MediaCardPresenter"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void onMediaItemClicked(ImageCardView view, MediaCardPresenter.MediaCardItem media) {        if (media.isLoading()) return;        Bundle options = ActivityOptionsCompat.makeSceneTransitionAnimation(                getActivity(),                view.getMainImageView(),                TVMediaDetailActivity.SHARED_ELEMENT_NAME).toBundle();        if (media.getMedia() instanceof Movie)            TVMediaDetailActivity.startActivity(getActivity(), options, media.getMedia());        else if (media.getMedia() instanceof Show)            TVMediaDetailActivity.startActivity(getActivity(), options, media.getMedia());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVMediaGridFragment.java", "stars": "4", "class": {"name": "TVMediaGridFragment", "extends": "VerticalGridFragment", "implements": ["OnItemViewClickedListener", "OnItemViewSelectedListener"], "modifiers": ["public"]}}, {"method_name": "onItemSelected", "params": ["Presenter", "Object", "RowPresenter", "Row"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onItemSelected(Presenter.ViewHolder itemViewHolder, Object item, RowPresenter.ViewHolder rowViewHolder, Row row) {        if (item instanceof MediaCardPresenter.MediaCardItem) {            MediaCardPresenter.MediaCardItem overviewItem = (MediaCardPresenter.MediaCardItem) item;            if (overviewItem.isLoading()) return;            mBackgroundUpdater.updateBackgroundAsync(((MediaCardPresenter.MediaCardItem) item).getMedia().headerImage);        }        //really hacky way of making and 'endless' adapter        //trigger items to update        int itemPosition = mItems.indexOf(item);        //when we are within 3 rows of the end, load more items        if (itemPosition>getAdapter().size()-(NUM_COLUMNS*3)){            Timber.d(\"Loading more items: page \"+mCurrentPage);            loadMore();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVMediaGridFragment.java", "stars": "4", "class": {"name": "TVMediaGridFragment", "extends": "VerticalGridFragment", "implements": ["OnItemViewClickedListener", "OnItemViewSelectedListener"], "modifiers": ["public"]}}, {"method_name": "getTokenFromRequest", "params": ["HttpServletRequest"], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "String", "snippet": "    protected abstract String getTokenFromRequest(@NonNull HttpServletRequest request);    protected abstract void doAuthenticate(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException;    @Override    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {        if (shouldNotFilter(request)) {            filterChain.doFilter(request, response);            return;        }        try {            doAuthenticate(request, response, filterChain);        } finally {            // ???            SecurityContextHolder.clearContext();        }    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/security/filter/AbstractAuthenticationFilter.java", "stars": "1", "class": {"name": "AbstractAuthenticationFilter", "extends": "OncePerRequestFilter", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "doAuthenticate", "params": ["HttpServletRequest", "HttpServletResponse", "FilterChain"], "throws": ["ServletException", "IOException"], "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void doAuthenticate(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException;    @Override    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {        if (shouldNotFilter(request)) {            filterChain.doFilter(request, response);            return;        }        try {            doAuthenticate(request, response, filterChain);        } finally {            // ???            SecurityContextHolder.clearContext();        }    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/security/filter/AbstractAuthenticationFilter.java", "stars": "1", "class": {"name": "AbstractAuthenticationFilter", "extends": "OncePerRequestFilter", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "doFilterInternal", "params": ["HttpServletRequest", "HttpServletResponse", "FilterChain"], "throws": ["ServletException", "IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {        if (shouldNotFilter(request)) {            filterChain.doFilter(request, response);            return;        }        try {            doAuthenticate(request, response, filterChain);        } finally {            // ???            SecurityContextHolder.clearContext();        }    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/security/filter/AbstractAuthenticationFilter.java", "stars": "1", "class": {"name": "AbstractAuthenticationFilter", "extends": "OncePerRequestFilter", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "shouldNotFilter", "params": ["HttpServletRequest"], "throws": ["ServletException"], "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean shouldNotFilter(HttpServletRequest request) throws ServletException {        Assert.notNull(request, \"Request must not be null\");        return excludeUrlPatterns.stream().anyMatch(url -> antPathMatcher.match(url, request.getServletPath()));    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/security/filter/AbstractAuthenticationFilter.java", "stars": "1", "class": {"name": "AbstractAuthenticationFilter", "extends": "OncePerRequestFilter", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "addExcludeUrlPatterns", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addExcludeUrlPatterns(@NonNull String... excludeUrlPatterns) {        Assert.notNull(excludeUrlPatterns, \"Exclude url patterns must not be null\");        Collections.addAll(this.excludeUrlPatterns, excludeUrlPatterns);    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/security/filter/AbstractAuthenticationFilter.java", "stars": "1", "class": {"name": "AbstractAuthenticationFilter", "extends": "OncePerRequestFilter", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getTokenFromRequest", "params": ["HttpServletRequest", "String"], "throws": null, "modifiers": [], "return_type": "String", "snippet": "    String getTokenFromRequest(HttpServletRequest request, String headerName) {        String accessKey = request.getHeader(headerName);        log.info(\"Got access key from header: [{}: {}]\", headerName, accessKey);        return accessKey;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/security/filter/AbstractAuthenticationFilter.java", "stars": "1", "class": {"name": "AbstractAuthenticationFilter", "extends": "OncePerRequestFilter", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getExcludeUrlPatterns", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Set<String>", "snippet": "    public Set<String> getExcludeUrlPatterns() {        return excludeUrlPatterns;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/security/filter/AbstractAuthenticationFilter.java", "stars": "1", "class": {"name": "AbstractAuthenticationFilter", "extends": "OncePerRequestFilter", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setExcludeUrlPatterns", "params": ["Set<String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setExcludeUrlPatterns(Set<String> excludeUrlPatterns) {        this.excludeUrlPatterns = excludeUrlPatterns;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/security/filter/AbstractAuthenticationFilter.java", "stars": "1", "class": {"name": "AbstractAuthenticationFilter", "extends": "OncePerRequestFilter", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getAuthenticationFailureHandler", "params": [], "throws": null, "modifiers": ["public"], "return_type": "AuthenticationFailureHandler", "snippet": "    public AuthenticationFailureHandler getAuthenticationFailureHandler() {        if (this.authenticationFailureHandler == null) {            authenticationFailureHandler = new DefaultAuthenticationFailureHandler();        }        return authenticationFailureHandler;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/security/filter/AbstractAuthenticationFilter.java", "stars": "1", "class": {"name": "AbstractAuthenticationFilter", "extends": "OncePerRequestFilter", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setAuthenticationFailureHandler", "params": ["AuthenticationFailureHandler"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAuthenticationFailureHandler(AuthenticationFailureHandler authenticationFailureHandler) {        this.authenticationFailureHandler = authenticationFailureHandler;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/security/filter/AbstractAuthenticationFilter.java", "stars": "1", "class": {"name": "AbstractAuthenticationFilter", "extends": "OncePerRequestFilter", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "press", "params": ["ComponentStatus"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void press(ComponentStatus status) {        keyboard.keyPressed(status.getKeyCode());    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/ButtonKeyboardKeyProcessor.java", "stars": "4", "class": {"name": "ButtonKeyboardKeyProcessor", "extends": "ButtonKeyProcessor", "implements": null, "modifiers": ["public"]}}, {"method_name": "release", "params": ["ComponentStatus"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void release(ComponentStatus status) {        keyboard.keyReleased(status.getKeyCode());    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/device/gamepad/ButtonKeyboardKeyProcessor.java", "stars": "4", "class": {"name": "ButtonKeyboardKeyProcessor", "extends": "ButtonKeyProcessor", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tSystem.out.println(\"hello world!\");\t}", "url": "https://raw.githubusercontent.com/IzzyPrime/JavaWorkspace/master/JavaPractice/part1/src/com/helloworld/javapractice/HelloWorld.java", "stars": "2", "class": {"name": "HelloWorld", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initComponents", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initComponents()    {        btnJogosGenero = new javax.swing.JButton();        jButton2 = new javax.swing.JButton();        jButton3 = new javax.swing.JButton();        jButton4 = new javax.swing.JButton();        jButton5 = new javax.swing.JButton();        jButton6 = new javax.swing.JButton();        jButton7 = new javax.swing.JButton();        jButton8 = new javax.swing.JButton();        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);        setBackground(new java.awt.Color(61, 63, 65));        btnJogosGenero.setBackground(new java.awt.Color(90, 30, 30));        btnJogosGenero.setForeground(new java.awt.Color(255, 255, 255));        btnJogosGenero.setText(\" Contador Jogos por G\u00eanero\");        btnJogosGenero.addActionListener(new java.awt.event.ActionListener()        {            public void actionPerformed(java.awt.event.ActionEvent evt)            {                btnJogosGeneroActionPerformed(evt);            }        });        jButton2.setText(\"Contador Reviews por Plataforma\");        jButton2.addActionListener(new java.awt.event.ActionListener()        {            public void actionPerformed(java.awt.event.ActionEvent evt)            {                jButton2ActionPerformed(evt);            }        });        jButton3.setText(\"Porcentagem Great Reviews\");        jButton3.addActionListener(new java.awt.event.ActionListener()        {            public void actionPerformed(java.awt.event.ActionEvent evt)            {                jButton3ActionPerformed(evt);            }        });        jButton4.setText(\"Media Aritmetica Plataforma\");        jButton4.addActionListener(new java.awt.event.ActionListener()        {            public void actionPerformed(java.awt.event.ActionEvent evt)            {                jButton4ActionPerformed(evt);            }        });        jButton5.setText(\"Desvio Padr\u00e3o Plataforma\");        jButton5.addActionListener(new java.awt.event.ActionListener()        {            public void actionPerformed(java.awt.event.ActionEvent evt)            {                jButton5ActionPerformed(evt);            }        });        jButton6.setText(\"Melhor Jogo / Nota  por Plataforma\");        jButton6.addActionListener(new java.awt.event.ActionListener()        {            public void actionPerformed(java.awt.event.ActionEvent evt)            {                jButton6ActionPerformed(evt);            }        });        jButton7.setText(\"Pior Jogo / Nota  por Plataforma\");        jButton7.addActionListener(new java.awt.event.ActionListener()        {            public void actionPerformed(java.awt.event.ActionEvent evt)            {                jButton7ActionPerformed(evt);            }        });        jButton8.setText(\"Plataforma Melhores Jogos Racing\");        jButton8.addActionListener(new java.awt.event.ActionListener()        {            public void actionPerformed(java.awt.event.ActionEvent evt)            {                jButton8ActionPerformed(evt);            }        });        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());        getContentPane().setLayout(layout);        layout.setHorizontalGroup(            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)            .addGroup(layout.createSequentialGroup()                .addContainerGap()                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)                    .addGroup(layout.createSequentialGroup()                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)                        .addGap(33, 33, 33)                        .addComponent(btnJogosGenero, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))                    .addGroup(layout.createSequentialGroup()                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))                        .addGap(18, 18, 18)                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)                            .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)                            .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))                    .addGroup(layout.createSequentialGroup()                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)                        .addGap(18, 18, 18)                        .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)))                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))        );        layout.setVerticalGroup(            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)            .addGroup(layout.createSequentialGroup()                .addContainerGap()                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)                    .addComponent(jButton6)                    .addComponent(jButton2))                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)                    .addComponent(jButton7)                    .addComponent(jButton3))                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)                    .addComponent(jButton4)                    .addComponent(jButton8))                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)                    .addComponent(jButton5)                    .addComponent(btnJogosGenero))                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))        );        pack();    }", "url": "https://raw.githubusercontent.com/gustavost645/tarefa_reviews/master/src/main/java/br/univates/tela/TelaPrincipal.java", "stars": "2", "class": {"name": "TelaPrincipal", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "btnJogosGeneroActionPerformed", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void btnJogosGeneroActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnJogosGeneroActionPerformed    {//GEN-HEADEREND:event_btnJogosGeneroActionPerformed       System.out.println(\"  \");       System.out.println(\"  \");               JogoGenero oi = new JogoGenero();       oi.gerarListaJogoGenero();           }", "url": "https://raw.githubusercontent.com/gustavost645/tarefa_reviews/master/src/main/java/br/univates/tela/TelaPrincipal.java", "stars": "2", "class": {"name": "TelaPrincipal", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "jButton2ActionPerformed", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton2ActionPerformed    {//GEN-HEADEREND:event_jButton2ActionPerformed       System.out.println(\"  \");       System.out.println(\"  \");               ReviewPlataforma oi = new ReviewPlataforma();       oi.gerarListaPlataformaContaJogos();            }", "url": "https://raw.githubusercontent.com/gustavost645/tarefa_reviews/master/src/main/java/br/univates/tela/TelaPrincipal.java", "stars": "2", "class": {"name": "TelaPrincipal", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "jButton3ActionPerformed", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton3ActionPerformed    {//GEN-HEADEREND:event_jButton3ActionPerformed       System.out.println(\"  \");       System.out.println(\"  \");              GreatReviews gr = new GreatReviews();       gr.gerarPorcentagemGreatReviewsPlataforma();    }", "url": "https://raw.githubusercontent.com/gustavost645/tarefa_reviews/master/src/main/java/br/univates/tela/TelaPrincipal.java", "stars": "2", "class": {"name": "TelaPrincipal", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "jButton4ActionPerformed", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton4ActionPerformed    {//GEN-HEADEREND:event_jButton4ActionPerformed       System.out.println(\"  \");       System.out.println(\"  \");              MediaPlataforma ma = new MediaPlataforma();       ma.gerarMediaAritmeticaPlataforma();    }", "url": "https://raw.githubusercontent.com/gustavost645/tarefa_reviews/master/src/main/java/br/univates/tela/TelaPrincipal.java", "stars": "2", "class": {"name": "TelaPrincipal", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "jButton5ActionPerformed", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton5ActionPerformed    {//GEN-HEADEREND:event_jButton5ActionPerformed       System.out.println(\"  \");       System.out.println(\"  \");              DesvioPadrao dp = new DesvioPadrao();       dp.gerarDesvioPadraoPlataforma();    }", "url": "https://raw.githubusercontent.com/gustavost645/tarefa_reviews/master/src/main/java/br/univates/tela/TelaPrincipal.java", "stars": "2", "class": {"name": "TelaPrincipal", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "jButton6ActionPerformed", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton6ActionPerformed    {//GEN-HEADEREND:event_jButton6ActionPerformed       System.out.println(\"  \");       System.out.println(\"  \");              MelhorNotaPlataforma mn = new MelhorNotaPlataforma();       mn.gerarMelhorNotaPlataforma();    }", "url": "https://raw.githubusercontent.com/gustavost645/tarefa_reviews/master/src/main/java/br/univates/tela/TelaPrincipal.java", "stars": "2", "class": {"name": "TelaPrincipal", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "jButton7ActionPerformed", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton7ActionPerformed    {//GEN-HEADEREND:event_jButton7ActionPerformed       System.out.println(\"  \");       System.out.println(\"  \");              PiorNotaPlataforma pn = new PiorNotaPlataforma();       pn.gerarPiorNotaPlataforma();    }", "url": "https://raw.githubusercontent.com/gustavost645/tarefa_reviews/master/src/main/java/br/univates/tela/TelaPrincipal.java", "stars": "2", "class": {"name": "TelaPrincipal", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "jButton8ActionPerformed", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton8ActionPerformed    {//GEN-HEADEREND:event_jButton8ActionPerformed       System.out.println(\"  \");       System.out.println(\"  \");              MelhorJogoRacing mj = new MelhorJogoRacing();       mj.gerarPlataformaMelhorJogoRacing();    }", "url": "https://raw.githubusercontent.com/gustavost645/tarefa_reviews/master/src/main/java/br/univates/tela/TelaPrincipal.java", "stars": "2", "class": {"name": "TelaPrincipal", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.DECORATIONS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/MudBrickWallBlock.java", "stars": "2", "class": {"name": "MudBrickWallBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "clientLoad", "params": ["FMLClientSetupEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clientLoad(FMLClientSetupEvent event) {\t\tRenderTypeLookup.setRenderLayer(block, RenderType.getCutout());\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/MudBrickWallBlock.java", "stars": "2", "class": {"name": "MudBrickWallBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "func_220113_a", "params": ["BlockState", "boolean", "Direction"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "\t\tprivate boolean func_220113_a(BlockState state, boolean checkattach, Direction face) {\t\t\tboolean flag = state.getBlock() instanceof WallBlock\t\t\t\t\t|| state.getBlock() instanceof FenceGateBlock && FenceGateBlock.isParallel(state, face);\t\t\treturn !cannotAttach(state.getBlock()) && checkattach || flag;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/MudBrickWallBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "WallBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getStateForPlacement", "params": ["BlockItemUseContext"], "throws": null, "modifiers": ["public"], "return_type": "BlockState", "snippet": "\t\tpublic BlockState getStateForPlacement(BlockItemUseContext context) {\t\t\tIWorldReader iworldreader = context.getWorld();\t\t\tBlockPos blockpos = context.getPos();\t\t\tIFluidState ifluidstate = context.getWorld().getFluidState(context.getPos());\t\t\tBlockPos blockpos1 = blockpos.north();\t\t\tBlockPos blockpos2 = blockpos.east();\t\t\tBlockPos blockpos3 = blockpos.south();\t\t\tBlockPos blockpos4 = blockpos.west();\t\t\tBlockState blockstate = iworldreader.getBlockState(blockpos1);\t\t\tBlockState blockstate1 = iworldreader.getBlockState(blockpos2);\t\t\tBlockState blockstate2 = iworldreader.getBlockState(blockpos3);\t\t\tBlockState blockstate3 = iworldreader.getBlockState(blockpos4);\t\t\tboolean flag = this.func_220113_a(blockstate, blockstate.isSolidSide(iworldreader, blockpos1, Direction.SOUTH), Direction.SOUTH);\t\t\tboolean flag1 = this.func_220113_a(blockstate1, blockstate1.isSolidSide(iworldreader, blockpos2, Direction.WEST), Direction.WEST);\t\t\tboolean flag2 = this.func_220113_a(blockstate2, blockstate2.isSolidSide(iworldreader, blockpos3, Direction.NORTH), Direction.NORTH);\t\t\tboolean flag3 = this.func_220113_a(blockstate3, blockstate3.isSolidSide(iworldreader, blockpos4, Direction.EAST), Direction.EAST);\t\t\tboolean flag4 = (!flag || flag1 || !flag2 || flag3) && (flag || !flag1 || flag2 || !flag3);\t\t\treturn this.getDefaultState().with(UP, Boolean.valueOf(flag4 || !iworldreader.isAirBlock(blockpos.up())))\t\t\t\t\t.with(NORTH, Boolean.valueOf(flag)).with(EAST, Boolean.valueOf(flag1)).with(SOUTH, Boolean.valueOf(flag2))\t\t\t\t\t.with(WEST, Boolean.valueOf(flag3)).with(WATERLOGGED, Boolean.valueOf(ifluidstate.getFluid() == Fluids.WATER));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/MudBrickWallBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "WallBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "updatePostPlacement", "params": ["BlockState", "Direction", "BlockState", "IWorld", "BlockPos", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "BlockState", "snippet": "\t\tpublic BlockState updatePostPlacement(BlockState stateIn, Direction facing, BlockState facingState, IWorld worldIn, BlockPos currentPos,\t\t\t\tBlockPos facingPos) {\t\t\tif (stateIn.get(WATERLOGGED)) {\t\t\t\tworldIn.getPendingFluidTicks().scheduleTick(currentPos, Fluids.WATER, Fluids.WATER.getTickRate(worldIn));\t\t\t}\t\t\tif (facing == Direction.DOWN) {\t\t\t\treturn super.updatePostPlacement(stateIn, facing, facingState, worldIn, currentPos, facingPos);\t\t\t} else {\t\t\t\tDirection direction = facing.getOpposite();\t\t\t\tboolean flag = facing == Direction.NORTH\t\t\t\t\t\t? this.func_220113_a(facingState, facingState.isSolidSide(worldIn, facingPos, direction), direction)\t\t\t\t\t\t: stateIn.get(NORTH);\t\t\t\tboolean flag1 = facing == Direction.EAST\t\t\t\t\t\t? this.func_220113_a(facingState, facingState.isSolidSide(worldIn, facingPos, direction), direction)\t\t\t\t\t\t: stateIn.get(EAST);\t\t\t\tboolean flag2 = facing == Direction.SOUTH\t\t\t\t\t\t? this.func_220113_a(facingState, facingState.isSolidSide(worldIn, facingPos, direction), direction)\t\t\t\t\t\t: stateIn.get(SOUTH);\t\t\t\tboolean flag3 = facing == Direction.WEST\t\t\t\t\t\t? this.func_220113_a(facingState, facingState.isSolidSide(worldIn, facingPos, direction), direction)\t\t\t\t\t\t: stateIn.get(WEST);\t\t\t\tboolean flag4 = (!flag || flag1 || !flag2 || flag3) && (flag || !flag1 || flag2 || !flag3);\t\t\t\treturn stateIn.with(UP, Boolean.valueOf(flag4 || !worldIn.isAirBlock(currentPos.up()))).with(NORTH, Boolean.valueOf(flag))\t\t\t\t\t\t.with(EAST, Boolean.valueOf(flag1)).with(SOUTH, Boolean.valueOf(flag2)).with(WEST, Boolean.valueOf(flag3));\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/MudBrickWallBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "WallBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isNormalCube", "params": ["BlockState", "IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean isNormalCube(BlockState state, IBlockReader worldIn, BlockPos pos) {\t\t\treturn false;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/MudBrickWallBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "WallBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "propagatesSkylightDown", "params": ["BlockState", "IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean propagatesSkylightDown(BlockState state, IBlockReader reader, BlockPos pos) {\t\t\treturn true;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/MudBrickWallBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "WallBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 0));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/MudBrickWallBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "WallBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isRunning", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isRunning() {        return isRunning;    }", "url": "https://raw.githubusercontent.com/raahul1705/Compute/master/app/src/main/java/com/rxn/compute/LoadManager.java", "stars": "2", "class": {"name": "LoadManager", "extends": "Thread", "implements": null, "modifiers": ["public"]}}, {"method_name": "setRunning", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRunning(boolean run) {        isRunning = run;    }", "url": "https://raw.githubusercontent.com/raahul1705/Compute/master/app/src/main/java/com/rxn/compute/LoadManager.java", "stars": "2", "class": {"name": "LoadManager", "extends": "Thread", "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run() {        long startTime;        long waitTime;        long timeMillis;        long totalTime = 0;        long frameCount = 0;        long targetTime = 1000/FPS;        while (isRunning) {            startTime = System.nanoTime();            if (hasAvailableResources()) {                // Send work to server                if (socket == null)                    connectToServer(addresses.get(0));                sendWork();            }            else {                addresses = networkManager.findDevices();                setText(\"Work from local\");                try {                    this.sleep(1000);                } catch (InterruptedException e) {                    continue;                }            }            timeMillis = (System.nanoTime() - startTime) / 1000000;            waitTime = targetTime - timeMillis;            if (waitTime < 0) {                waitTime = 0;            }            try {                this.sleep(waitTime);            } catch(Exception e) {                e.printStackTrace();            }            totalTime += System.nanoTime() - startTime;            frameCount++;            if (frameCount == FPS) {                avgFPS = 100 / ((totalTime / frameCount) / 1000000);                frameCount = 0;                totalTime = 0;            }        }    }", "url": "https://raw.githubusercontent.com/raahul1705/Compute/master/app/src/main/java/com/rxn/compute/LoadManager.java", "stars": "2", "class": {"name": "LoadManager", "extends": "Thread", "implements": null, "modifiers": ["public"]}}, {"method_name": "connectToServer", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void connectToServer(String address) {        socket = context.createSocket(SocketType.REQ);        assert(socket != null);        String host = \"tcp://\" + address + \":9001\";        socket.connect(host);        currentServer = address;    }", "url": "https://raw.githubusercontent.com/raahul1705/Compute/master/app/src/main/java/com/rxn/compute/LoadManager.java", "stars": "2", "class": {"name": "LoadManager", "extends": "Thread", "implements": null, "modifiers": ["public"]}}, {"method_name": "sendWork", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void sendWork() {        int retriesLeft = REQUEST_RETRIES;        ZMQ.Poller poller = context.createPoller(1);        poller.register(socket, ZMQ.Poller.POLLIN);        String request = \"Work\";        socket.send(request.getBytes(ZMQ.CHARSET), 0);        int expect_reply = 1;        while (expect_reply > 0) {            int rc = poller.poll(REQUEST_TIMEOUT);            if (rc == -1)                break;            if (poller.pollin(0)) {                String reply = socket.recvStr();                if (reply == null)                    break;                if (reply.equals(\"Work remote\")) {                    retriesLeft = REQUEST_RETRIES;                    expect_reply = 0;                    String responseText = reply + \" from \" + currentServer;                    setText(responseText);                }                else {                    Log.e(Constants.LOAD_MANAGER_TAG, \"Malformed message from server\");                }            }            else if (--retriesLeft == 0) {                Log.e(Constants.LOAD_MANAGER_TAG, \"Server is offline\");                addresses.clear();                poller.unregister(socket);                context.destroySocket(socket);                socket = null;                currentServer = \"\";                break;            }            else {                poller.unregister(socket);                context.destroySocket(socket);                socket = context.createSocket(SocketType.REQ);                String host = \"tcp://\" + currentServer + \":9001\";                socket.connect(host);                poller.register(socket, ZMQ.Poller.POLLIN);                socket.send(request);            }        }    }", "url": "https://raw.githubusercontent.com/raahul1705/Compute/master/app/src/main/java/com/rxn/compute/LoadManager.java", "stars": "2", "class": {"name": "LoadManager", "extends": "Thread", "implements": null, "modifiers": ["public"]}}, {"method_name": "setText", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setText(String text) {        activity.setResponseText(text);    }", "url": "https://raw.githubusercontent.com/raahul1705/Compute/master/app/src/main/java/com/rxn/compute/LoadManager.java", "stars": "2", "class": {"name": "LoadManager", "extends": "Thread", "implements": null, "modifiers": ["public"]}}, {"method_name": "hasAvailableResources", "params": [], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean hasAvailableResources() {        return (addresses.size() > 0);    }", "url": "https://raw.githubusercontent.com/raahul1705/Compute/master/app/src/main/java/com/rxn/compute/LoadManager.java", "stars": "2", "class": {"name": "LoadManager", "extends": "Thread", "implements": null, "modifiers": ["public"]}}, {"method_name": "getResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getResult(CallableStatement cs, int columnIndex)      throws SQLException {    return cs.getString(columnIndex);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/dynsql2/LastNameTypeHandler.java", "stars": "15", "class": {"name": "LastNameTypeHandler", "extends": null, "implements": ["TypeHandler"], "modifiers": ["public"]}}, {"method_name": "getResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getResult(ResultSet rs, String columnName)      throws SQLException {    return rs.getString(columnName);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/dynsql2/LastNameTypeHandler.java", "stars": "15", "class": {"name": "LastNameTypeHandler", "extends": null, "implements": ["TypeHandler"], "modifiers": ["public"]}}, {"method_name": "getResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getResult(ResultSet rs, int columnIndex)      throws SQLException {    return rs.getString(columnIndex);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/dynsql2/LastNameTypeHandler.java", "stars": "15", "class": {"name": "LastNameTypeHandler", "extends": null, "implements": ["TypeHandler"], "modifiers": ["public"]}}, {"method_name": "setParameter", "params": ["PreparedStatement", "int", "Object", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setParameter(PreparedStatement ps, int i, Object parameter,                           JdbcType jdbcType) throws SQLException {    if (parameter == null) {      ps.setNull(i, Types.VARCHAR);    } else {      Name name = (Name) parameter;      ps.setString(i, name.getLastName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/dynsql2/LastNameTypeHandler.java", "stars": "15", "class": {"name": "LastNameTypeHandler", "extends": null, "implements": ["TypeHandler"], "modifiers": ["public"]}}, {"method_name": "setup", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setup() throws Exception {    createBlogDataSource();    final String resource = \"org/apache/ibatis/builder/MapperConfig.xml\";    final Reader reader = Resources.getResourceAsReader(resource);    manager = SqlSessionManager.newInstance(reader);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionManagerTest.java", "stars": "15", "class": {"name": "SqlSessionManagerTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldThrowExceptionIfMappedStatementDoesNotExistAndSqlSessionIsOpen", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldThrowExceptionIfMappedStatementDoesNotExistAndSqlSessionIsOpen() {    try {      manager.startManagedSession();      manager.selectList(\"ThisStatementDoesNotExist\");      fail(\"Expected exception to be thrown due to statement that does not exist.\");    } catch (PersistenceException e) {      assertTrue(e.getMessage().contains(\"does not contain value for ThisStatementDoesNotExist\"));    } finally {      manager.close();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionManagerTest.java", "stars": "15", "class": {"name": "SqlSessionManagerTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldCommitInsertedAuthor", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldCommitInsertedAuthor() {    try {      manager.startManagedSession();      AuthorMapper mapper = manager.getMapper(AuthorMapper.class);      Author expected = new Author(500, \"cbegin\", \"******\", \"cbegin@somewhere.com\", \"Something...\", null);      mapper.insertAuthor(expected);      manager.commit();      Author actual = mapper.selectAuthor(500);      assertNotNull(actual);    } finally {      manager.close();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionManagerTest.java", "stars": "15", "class": {"name": "SqlSessionManagerTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldRollbackInsertedAuthor", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldRollbackInsertedAuthor() {    try {      manager.startManagedSession();      AuthorMapper mapper = manager.getMapper(AuthorMapper.class);      Author expected = new Author(501, \"lmeadors\", \"******\", \"lmeadors@somewhere.com\", \"Something...\", null);      mapper.insertAuthor(expected);      manager.rollback();      Author actual = mapper.selectAuthor(501);      assertNull(actual);    } finally {      manager.close();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionManagerTest.java", "stars": "15", "class": {"name": "SqlSessionManagerTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "shouldImplicitlyRollbackInsertedAuthor", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldImplicitlyRollbackInsertedAuthor() {    manager.startManagedSession();    AuthorMapper mapper = manager.getMapper(AuthorMapper.class);    Author expected = new Author(502, \"emacarron\", \"******\", \"emacarron@somewhere.com\", \"Something...\", null);    mapper.insertAuthor(expected);    manager.close();    Author actual = mapper.selectAuthor(502);    assertNull(actual);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/SqlSessionManagerTest.java", "stars": "15", "class": {"name": "SqlSessionManagerTest", "extends": "BaseDataTest", "implements": null, "modifiers": []}}, {"method_name": "executeProcedure", "params": ["java"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void executeProcedure(java.util.HashMap<String, Object> dependencies) {\t\tif (dependencies.get(\"x\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency x for procedure SunflowerPlayer!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"y\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency y for procedure SunflowerPlayer!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"z\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency z for procedure SunflowerPlayer!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"world\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency world for procedure SunflowerPlayer!\");\t\t\treturn;\t\t}\t\tint x = (int) dependencies.get(\"x\");\t\tint y = (int) dependencies.get(\"y\");\t\tint z = (int) dependencies.get(\"z\");\t\tWorld world = (World) dependencies.get(\"world\");\t\tif (!world.isRemote) {\t\t\tItemEntity entityToSpawn = new ItemEntity(world, x, y, z, new ItemStack(HelianthusBlock.block, (int) (1)));\t\t\tentityToSpawn.setPickupDelay(10);\t\t\tworld.addEntity(entityToSpawn);\t\t}\t\tif (!world.isRemote) {\t\t\tItemEntity entityToSpawn = new ItemEntity(world, x, y, z, new ItemStack(Items.FLOWER_POT, (int) (1)));\t\t\tentityToSpawn.setPickupDelay(10);\t\t\tworld.addEntity(entityToSpawn);\t\t}\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/procedures/SunflowerPlayerProcedure.java", "stars": "2", "class": {"name": "SunflowerPlayerProcedure", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "\tpublic Long getId() {\t\treturn id;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Categoria.java", "stars": "1", "class": {"name": "Categoria", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setId(Long id) {\t\tthis.id = id;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Categoria.java", "stars": "1", "class": {"name": "Categoria", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDescricao", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getDescricao() {\t\treturn descricao;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Categoria.java", "stars": "1", "class": {"name": "Categoria", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDescricao", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setDescricao(String descricao) {\t\tthis.descricao = descricao;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Categoria.java", "stars": "1", "class": {"name": "Categoria", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int hashCode() {\t\tfinal int prime = 31;\t\tint result = 1;\t\tresult = prime * result + ((id == null) ? 0 : id.hashCode());\t\treturn result;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Categoria.java", "stars": "1", "class": {"name": "Categoria", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean equals(Object obj) {\t\tif (this == obj)\t\t\treturn true;\t\tif (obj == null)\t\t\treturn false;\t\tif (getClass() != obj.getClass())\t\t\treturn false;\t\tCategoria other = (Categoria) obj;\t\tif (id == null) {\t\t\tif (other.id != null)\t\t\t\treturn false;\t\t} else if (!id.equals(other.id))\t\t\treturn false;\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/emanoel2712/MeusPedidos/master/src/main/java/br/senac/sc/meuspedidos/model/Categoria.java", "stars": "1", "class": {"name": "Categoria", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onLayout (boolean p0, int p1, int p2, int p3, int p4)\t{\t\tn_onLayout (p0, p1, p2, p3, p4);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/NavigationPageRenderer_Container.java", "stars": "2", "class": {"name": "NavigationPageRenderer_Container", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onLayout (boolean p0, int p1, int p2, int p3, int p4);\tpublic void onMeasure (int p0, int p1)\t{\t\tn_onMeasure (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/NavigationPageRenderer_Container.java", "stars": "2", "class": {"name": "NavigationPageRenderer_Container", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onMeasure", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onMeasure (int p0, int p1)\t{\t\tn_onMeasure (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/NavigationPageRenderer_Container.java", "stars": "2", "class": {"name": "NavigationPageRenderer_Container", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onMeasure", "params": ["int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onMeasure (int p0, int p1);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/NavigationPageRenderer_Container.java", "stars": "2", "class": {"name": "NavigationPageRenderer_Container", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/NavigationPageRenderer_Container.java", "stars": "2", "class": {"name": "NavigationPageRenderer_Container", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/NavigationPageRenderer_Container.java", "stars": "2", "class": {"name": "NavigationPageRenderer_Container", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "checkType", "params": [], "throws": ["TypeException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void checkType() throws TypeException {\t\tthis.getLeft().checkType();\t\tthis.getRight().checkType();\t\tTypeCode[] typeCodes = {TypeCode.INTEGER, TypeCode.FLOAT};\t\tgetLeft().getType().assertType(this, typeCodes);\t\tgetLeft().getType().assertType(this, getRight().getType());\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprPLUS.java", "stars": "3", "class": {"name": "ExprPLUS", "extends": "ExprBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "generateCode", "params": [], "throws": ["CodeException"], "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String generateCode() throws CodeException {\t\tString result;\t\tresult = \"(\" + getLeft().generateCode()\t\t\t\t+ \" + \" + getRight().generateCode() + \")\";\t\treturn result;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprPLUS.java", "stars": "3", "class": {"name": "ExprPLUS", "extends": "ExprBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "constEval", "params": ["Environment<ExprVALUE>"], "throws": ["EnvironmentException", "TypeException"], "modifiers": ["public"], "return_type": "Object", "snippet": "\tpublic Object constEval(Environment<ExprVALUE> environment) throws EnvironmentException, TypeException {\t\tObject o1 = getLeft().constEval(environment);\t\tObject o2 = getRight().constEval(environment);\t\tif ((o1 instanceof Integer) && (o2 instanceof Integer)) \t\t\treturn new Integer((Integer)o1 + (Integer)o2);\t\telse if ((o1 instanceof Float) && (o2 instanceof Float)) \t\t\treturn new Float((Float)o1 + (Float)o2);\t\telse if ((o1 instanceof String) && (o2 instanceof String)) \t\t\treturn new String((String)o1 + (String)o2);\t\telse\t\t\tthrow new TypeException(\"Impossible de calculer la constante, erreur de type\", line, column);\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprPLUS.java", "stars": "3", "class": {"name": "ExprPLUS", "extends": "ExprBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\treturn \"(\" + this.getLeft() + \" + \" + this.getRight() + \")\";\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/ExprPLUS.java", "stars": "3", "class": {"name": "ExprPLUS", "extends": "ExprBinary", "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getId() {        return id;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDO.java", "stars": "1", "class": {"name": "UserDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Integer id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDO.java", "stars": "1", "class": {"name": "UserDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDO.java", "stars": "1", "class": {"name": "UserDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDO.java", "stars": "1", "class": {"name": "UserDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGender", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Byte", "snippet": "    public Byte getGender() {        return gender;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDO.java", "stars": "1", "class": {"name": "UserDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setGender", "params": ["Byte"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGender(Byte gender) {        this.gender = gender;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDO.java", "stars": "1", "class": {"name": "UserDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAge", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getAge() {        return age;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDO.java", "stars": "1", "class": {"name": "UserDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAge", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAge(Integer age) {        this.age = age;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDO.java", "stars": "1", "class": {"name": "UserDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTelphone", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTelphone() {        return telphone;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDO.java", "stars": "1", "class": {"name": "UserDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTelphone", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTelphone(String telphone) {        this.telphone = telphone;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDO.java", "stars": "1", "class": {"name": "UserDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRegisitMode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getRegisitMode() {        return regisitMode;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDO.java", "stars": "1", "class": {"name": "UserDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRegisitMode", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRegisitMode(String regisitMode) {        this.regisitMode = regisitMode;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDO.java", "stars": "1", "class": {"name": "UserDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getThirdPartyId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getThirdPartyId() {        return thirdPartyId;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDO.java", "stars": "1", "class": {"name": "UserDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setThirdPartyId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setThirdPartyId(Integer thirdPartyId) {        this.thirdPartyId = thirdPartyId;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/UserDO.java", "stars": "1", "class": {"name": "UserDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "convert", "params": ["TankBo"], "throws": null, "modifiers": ["public", "static"], "return_type": "ItemDto", "snippet": "    public static ItemDto convert(TankBo tankBo) {        ItemDto tankDto = new ItemDto();        tankDto.setId(tankBo.getTankId());        tankDto.setX(tankBo.getX());        tankDto.setY(tankBo.getY());        tankDto.setTypeId(tankBo.getType().getTypeId());        tankDto.setOrientation(tankBo.getOrientationType().getValue());        tankDto.setAction(tankBo.getActionType().getValue());        tankDto.setSpeed(tankBo.getType().getSpeed());        return tankDto;    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/model/dto/ItemDto.java", "stars": "2", "class": {"name": "ItemDto", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "convert", "params": ["AmmoBo"], "throws": null, "modifiers": ["public", "static"], "return_type": "ItemDto", "snippet": "    public static ItemDto convert(AmmoBo ammoBo) {        ItemDto ammoDto = new ItemDto();        ammoDto.setId(ammoBo.getId());        ammoDto.setX(ammoBo.getX());        ammoDto.setY(ammoBo.getY());        ammoDto.setOrientation(ammoBo.getOrientationType().getValue());        ammoDto.setSpeed(ammoBo.getSpeed());        return ammoDto;    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/websocket/src/main/java/com/integration/socket/model/dto/ItemDto.java", "stars": "2", "class": {"name": "ItemDto", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "doRenderLayer", "params": ["AbstractClientPlayer", "float", "float", "float", "float", "float", "float", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void doRenderLayer(AbstractClientPlayer player, float limbSwing, float limbSwingAmount, float partialTicks, float ageInTicks, float netHeadYaw, float headPitch, float scale) {        ResourceLocation rl = Capes.getCapeResource(player);        ItemStack itemstack = player.getItemStackFromSlot(EntityEquipmentSlot.CHEST);        if (!player.hasPlayerInfo() || player.isInvisible() || !player.isWearing(EnumPlayerModelParts.CAPE) || itemstack.getItem() == Items.ELYTRA || rl == null) return;        float f9 = 0.14f;        float f10 = 0.0f;        if (player.isSneaking()) {            f9 = 0.1f;            f10 = 0.09f;        }        GlStateManager.color(1.0f, 1.0f, 1.0f, 1.0f);        this.playerRenderer.bindTexture(rl);        GlStateManager.pushMatrix();        GlStateManager.translate(0.0f, f10, f9);        double d0 = player.prevChasingPosX + (player.chasingPosX - player.prevChasingPosX) * new Float(partialTicks).doubleValue() - (player.prevPosX + (player.posX - player.prevPosX) * new Float(partialTicks).doubleValue());        double d1 = player.prevChasingPosY + (player.chasingPosY - player.prevChasingPosY) * new Float(partialTicks).doubleValue() - (player.prevPosY + (player.posY - player.prevPosY) * new Float(partialTicks).doubleValue());        double d2 = player.prevChasingPosZ + (player.chasingPosZ - player.prevChasingPosZ) * new Float(partialTicks).doubleValue() - (player.prevPosZ + (player.posZ - player.prevPosZ) * new Float(partialTicks).doubleValue());        float f = player.prevRenderYawOffset + (player.renderYawOffset - player.prevRenderYawOffset) * partialTicks;        double d3 = new Float(MathHelper.sin(f * 0.01745329f)).doubleValue();        double d4 = new Float(-MathHelper.cos(f * 0.01745329f)).doubleValue();        float f1 = new Double(d1).floatValue() * 10.0f;        f1 = MathHelper.clamp(f1, 3.0f, 32.0f);        float f2 = new Double(d0 * d3 + d2 * d4).floatValue() * 100.0f;        float f3 = new Double(d0 * d4 - d2 * d3).floatValue() * 100.0f;        if (f2 < 0.0f) {            f2 = 0.0f;        }        float f4 = player.prevCameraYaw + (player.cameraYaw - player.prevCameraYaw) * partialTicks;        f1 += MathHelper.sin((player.prevDistanceWalkedModified + (player.distanceWalkedModified - player.prevDistanceWalkedModified) * partialTicks) * 6.0f) * 32.0f * f4;        if (player.isSneaking()) {            f1 += 20.0f;        }        GlStateManager.rotate(5.0f + f2 / 2.0f + f1, 1.0f, 0.0f, 0.0f);        GlStateManager.rotate(f3 / 2.0f, 0.0f, 0.0f, 1.0f);        GlStateManager.rotate(-f3 / 2.0f, 0.0f, 1.0f, 0.0f);        GlStateManager.rotate(180.0f, 0.0f, 1.0f, 0.0f);        this.playerRenderer.getMainModel().renderCape(0.0625f);        GlStateManager.popMatrix();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/capes/LayerCape.java", "stars": "12", "class": {"name": "LayerCape", "extends": null, "implements": ["LayerRenderer"], "modifiers": ["public"]}}, {"method_name": "shouldCombineTextures", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean shouldCombineTextures() {        return false;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/capes/LayerCape.java", "stars": "12", "class": {"name": "LayerCape", "extends": null, "implements": ["LayerRenderer"], "modifiers": ["public"]}}, {"method_name": "testLoadedCustomLogbackConfig", "params": ["CapturedOutput"], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "\tvoid testLoadedCustomLogbackConfig(CapturedOutput output) throws Exception {\t\tSampleLogbackApplication.main(new String[0]);\t\tassertThat(output).contains(\"Sample Debug Message\").doesNotContain(\"Sample Trace Message\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-logback/src/test/java/smoketest/logback/SampleLogbackApplicationTests.java", "stars": "47572", "class": {"name": "SampleLogbackApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testProfile", "params": ["CapturedOutput"], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "\tvoid testProfile(CapturedOutput output) throws Exception {\t\tSampleLogbackApplication.main(new String[] { \"--spring.profiles.active=staging\" });\t\tassertThat(output).contains(\"Sample Debug Message\").contains(\"Sample Trace Message\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-logback/src/test/java/smoketest/logback/SampleLogbackApplicationTests.java", "stars": "47572", "class": {"name": "SampleLogbackApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getBaseService", "params": [], "throws": null, "modifiers": ["public"], "return_type": "IBaseService<ExecutorNode>", "snippet": "    public IBaseService<ExecutorNode> getBaseService() {        return executorNodeService;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/controller/ExecNodeAdminController.java", "stars": "23", "class": {"name": "ExecNodeAdminController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init(){        security.registerUserExternalDataAuthGetter(ExecutorNode.class, userName ->{            UserInfo userInfo = userInfoService.selectByUsername(userName);            if(userInfo.getUserType() >= UserRole.ADMIN.getValue()){                //No limit                return null;            }            return new ArrayList<>();        });    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/controller/ExecNodeAdminController.java", "stars": "23", "class": {"name": "ExecNodeAdminController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "bind", "params": ["Integer", "ExecNodeUserBind"], "throws": null, "modifiers": ["public"], "return_type": "Response<Object>", "snippet": "    public Response<Object> bind(@PathVariable(\"nodeId\")Integer nodeId,                                 @Valid @RequestBody ExecNodeUserBind bind){        bind.setNodeId(nodeId);        int success = execNodeInfoService.bindExecNodeAndUsers(bind);        if(success < bind.getExecUserList().size() && bind.getOpType() == ExecNodeUserBind.BindOpType.BIND_RELATE){            return new Response<>().errorResponse(CodeConstant.WARNING_MSG, null,                    this.informationSwitch(\"exchange.exec_node.user.bind-condition.fail\"),                    success, bind.getExecUserList().size() - success);        }        return new Response<>().successResponse(\"success\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/controller/ExecNodeAdminController.java", "stars": "23", "class": {"name": "ExecNodeAdminController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "bindPager", "params": ["Integer", "ExecNodeUserQuery"], "throws": null, "modifiers": ["public"], "return_type": "Response<Object>", "snippet": "    public Response<Object> bindPager(@PathVariable(\"nodeId\")Integer nodeId,                                      ExecNodeUserQuery query){        query.setNodeId(nodeId);        int pageSize = query.getPageSize();        if(0 == pageSize){            query.setPageSize(10);        }        return new Response<>().successResponse(execNodeInfoService.findExecNodeUserPage(query));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/controller/ExecNodeAdminController.java", "stars": "23", "class": {"name": "ExecNodeAdminController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "unBind", "params": ["Integer", "String"], "throws": null, "modifiers": ["public"], "return_type": "Response<Object>", "snippet": "    public Response<Object> unBind(@PathVariable(\"nodeId\")Integer nodeId, @PathVariable(\"username\")String username){        ExecNodeUser execNodeUser = execNodeInfoService.getExecNodeUser(nodeId, username);        if(null != execNodeUser){            execNodeInfoService.unBindExecNodeAndUser(execNodeUser);        }        return new Response<>().successResponse(\"success\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/controller/ExecNodeAdminController.java", "stars": "23", "class": {"name": "ExecNodeAdminController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "relate", "params": ["Integer", "String"], "throws": null, "modifiers": ["public"], "return_type": "Response<Object>", "snippet": "    public Response<Object> relate(@PathVariable(\"nodeId\")Integer nodeId, @PathVariable(\"username\")String username){        ExecNodeUser execNodeUser = execNodeInfoService.getExecNodeUser(nodeId, username);        if(null != execNodeUser && execNodeUser.getRelationState() != 1) {            execNodeInfoService.relateExecNodeAndUser(null, execNodeUser);        }        return new Response<>().successResponse(\"success\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/controller/ExecNodeAdminController.java", "stars": "23", "class": {"name": "ExecNodeAdminController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "notRelate", "params": ["Integer", "String"], "throws": null, "modifiers": ["public"], "return_type": "Response<Object>", "snippet": "    public Response<Object> notRelate(@PathVariable(\"nodeId\")Integer nodeId, @PathVariable(\"username\")String username){        ExecNodeUser execNodeUser = execNodeInfoService.getExecNodeUser(nodeId,  username);        if(null != execNodeUser && execNodeUser.getRelationState() == 1){            execNodeInfoService.notRelateExecNodeAndUser(execNodeUser);        }        return new Response<>().successResponse(\"success\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/controller/ExecNodeAdminController.java", "stars": "23", "class": {"name": "ExecNodeAdminController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "attachTab", "params": ["Integer", "ExecNodeTabRelation"], "throws": null, "modifiers": ["public"], "return_type": "Response<Object>", "snippet": "    public Response<Object> attachTab(@PathVariable(\"nodeId\")Integer nodeId,                                      @Valid @RequestBody ExecNodeTabRelation relation){        relation.setNodeId(nodeId);        execNodeInfoService.attachTab(relation);        return new Response<>().successResponse(\"success\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/controller/ExecNodeAdminController.java", "stars": "23", "class": {"name": "ExecNodeAdminController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "makeDefault", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Response<Object>", "snippet": "    public Response<Object> makeDefault(@PathVariable(\"nodeId\")Integer nodeId){        return execNodeInfoService.changeDefault(nodeId, true) ?                new Response<>().successResponse(\"success\") : new Response<>().errorResponse(-1, null, \"fail\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/controller/ExecNodeAdminController.java", "stars": "23", "class": {"name": "ExecNodeAdminController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "cancelDefault", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Response<Object>", "snippet": "    public Response<Object> cancelDefault(@PathVariable(\"nodeId\")Integer nodeId){        return execNodeInfoService.changeDefault(nodeId, false) ?                new Response<>().successResponse(\"success\") : new Response<>().errorResponse(-1, null, \"fail\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/controller/ExecNodeAdminController.java", "stars": "23", "class": {"name": "ExecNodeAdminController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "delete", "params": ["Long", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "Response<ExecutorNode>", "snippet": "    public Response<ExecutorNode> delete(@PathVariable Long id, HttpServletRequest request) {        //Delete node information and relations        execNodeInfoService.deleteNode(id);        return new Response<ExecutorNode>().successResponse(null);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/controller/ExecNodeAdminController.java", "stars": "23", "class": {"name": "ExecNodeAdminController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init() {        StripeController stripeController = new StripeController(stripeWebhookService);        this.restStripeMockMvc = MockMvcBuilders.standaloneSetup(stripeController)            .setCustomArgumentResolvers(pageableArgumentResolver)            .setControllerAdvice(exceptionTranslator)            .setConversionService(createFormattingConversionService())            .setMessageConverters(jacksonMessageConverter)            .setValidator(validator).build();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/StripeControllerIT.java", "stars": "2", "class": {"name": "StripeControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createLeasing", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void createLeasing() throws Exception {        String payload = \"test\";        String signHeader = \"test\";        doNothing().when(stripeWebhookService).handleLeasingWebhook(payload, signHeader);        restStripeMockMvc.perform(post(\"/stripe/leasings\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .header(\"Stripe-Signature\", signHeader)            .content(TestUtil.convertObjectToJsonBytes(payload)))            .andExpect(status().isOk());        verify(stripeWebhookService).handleLeasingWebhook(payload, signHeader);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/StripeControllerIT.java", "stars": "2", "class": {"name": "StripeControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createOverlappingLeasingWithSameUserAndStatusOpen", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void createOverlappingLeasingWithSameUserAndStatusOpen() throws Exception {        String payload = \"test\";        String signHeader = \"test\";        doThrow(StripeServiceException.class).when(stripeWebhookService).handleLeasingWebhook(payload, signHeader);        restStripeMockMvc.perform(post(\"/stripe/leasings\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .header(\"Stripe-Signature\", signHeader)            .content(TestUtil.convertObjectToJsonBytes(payload)))            .andExpect(status().isInternalServerError());        verify(stripeWebhookService).handleLeasingWebhook(payload, signHeader);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/StripeControllerIT.java", "stars": "2", "class": {"name": "StripeControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createOverlappingLeasingWithOtherUserAndReservedStatus", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void createOverlappingLeasingWithOtherUserAndReservedStatus() throws Exception {        String payload = \"test\";        String signHeader = \"test\";        doNothing().when(stripeWebhookService).handleAccountUpdateWebhook(payload, signHeader);        restStripeMockMvc.perform(post(\"/stripe/accounts\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .header(\"Stripe-Signature\", signHeader)            .content(TestUtil.convertObjectToJsonBytes(payload)))            .andExpect(status().isOk());        verify(stripeWebhookService).handleAccountUpdateWebhook(payload, signHeader);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/StripeControllerIT.java", "stars": "2", "class": {"name": "StripeControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createSecondNonOverlappingLeasing", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void createSecondNonOverlappingLeasing() throws Exception {        String payload = \"test\";        String signHeader = \"test\";        doThrow(StripeServiceException.class).when(stripeWebhookService).handleAccountUpdateWebhook(payload, signHeader);        restStripeMockMvc.perform(post(\"/stripe/accounts\")            .contentType(TestUtil.APPLICATION_JSON_UTF8)            .header(\"Stripe-Signature\", signHeader)            .content(TestUtil.convertObjectToJsonBytes(payload)))            .andExpect(status().isInternalServerError());        verify(stripeWebhookService).handleAccountUpdateWebhook(payload, signHeader);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/web/rest/StripeControllerIT.java", "stars": "2", "class": {"name": "StripeControllerIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "showPauseCover", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void showPauseCover() {        if (mCurrentState == CURRENT_STATE_PAUSE && mFullPauseBitmap != null                && !mFullPauseBitmap.isRecycled() && mShowPauseCover                && mSurface != null && mSurface.isValid()) {            if (getGSYVideoManager().isSurfaceSupportLockCanvas()) {                try {                    RectF rectF = new RectF(0, 0, mTextureView.getWidth(), mTextureView.getHeight());                    Canvas canvas = mSurface.lockCanvas(new Rect(0, 0, mTextureView.getWidth(), mTextureView.getHeight()));                    if (canvas != null) {                        canvas.drawBitmap(mFullPauseBitmap, null, rectF, null);                        mSurface.unlockCanvasAndPost(canvas);                    }                } catch (Exception e) {                    e.printStackTrace();                }            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "releasePauseCover", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void releasePauseCover() {        try {            if (mCurrentState != CURRENT_STATE_PAUSE && mFullPauseBitmap != null                    && !mFullPauseBitmap.isRecycled() && mShowPauseCover) {                mFullPauseBitmap.recycle();                mFullPauseBitmap = null;            }        } catch (Exception e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "getCurrentVideoWidth", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCurrentVideoWidth() {        if (getGSYVideoManager() != null) {            return getGSYVideoManager().getVideoWidth();        }        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "getCurrentVideoHeight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCurrentVideoHeight() {        if (getGSYVideoManager() != null) {            return getGSYVideoManager().getVideoHeight();        }        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "getVideoSarNum", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getVideoSarNum() {        if (getGSYVideoManager() != null) {            return getGSYVideoManager().getVideoSarNum();        }        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "getVideoSarDen", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getVideoSarDen() {        if (getGSYVideoManager() != null) {            return getGSYVideoManager().getVideoSarDen();        }        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "updatePauseCover", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void updatePauseCover() {        if ((mFullPauseBitmap == null || mFullPauseBitmap.isRecycled()) && mShowPauseCover) {            try {                initCover();            } catch (Exception e) {                e.printStackTrace();                mFullPauseBitmap = null;            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "getActivityContext", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Context", "snippet": "    protected Context getActivityContext() {        return CommonUtil.getActivityContext(getContext());    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "init", "params": ["Context"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void init(Context context) {        if (getActivityContext() != null) {            this.mContext = getActivityContext();        } else {            this.mContext = context;        }        initInflate(mContext);        mTextureViewContainer = (ViewGroup) findViewById(R.id.surface_container);        if (isInEditMode())            return;        mScreenWidth = mContext.getResources().getDisplayMetrics().widthPixels;        mScreenHeight = mContext.getResources().getDisplayMetrics().heightPixels;        mAudioManager = (AudioManager) mContext.getApplicationContext().getSystemService(Context.AUDIO_SERVICE);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "initInflate", "params": ["Context"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initInflate(Context context) {        try {            View.inflate(context, getLayoutId(), this);        } catch (InflateException e) {            if (e.toString().contains(\"GSYImageCover\")) {                Debuger.printfError(\"********************\\n\" +                        \"*****   \u6ce8\u610f   *****\" +                        \"********************\\n\" +                        \"*\u8be5\u7248\u672c\u9700\u8981\u6e05\u9664\u5e03\u5c40\u6587\u4ef6\u4e2d\u7684GSYImageCover\\n\" +                        \"****  Attention  ***\\n\" +                        \"*Please remove GSYImageCover from Layout in this Version\\n\" +                        \"********************\\n\");                e.printStackTrace();                throw new InflateException(\"\u8be5\u7248\u672c\u9700\u8981\u6e05\u9664\u5e03\u5c40\u6587\u4ef6\u4e2d\u7684GSYImageCover\uff0cplease remove GSYImageCover from your layout\");            } else {                e.printStackTrace();            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "startButtonLogic", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void startButtonLogic() {        if (mVideoAllCallBack != null && mCurrentState == CURRENT_STATE_NORMAL) {            Debuger.printfLog(\"onClickStartIcon\");            mVideoAllCallBack.onClickStartIcon(mOriginUrl, mTitle, this);        } else if (mVideoAllCallBack != null) {            Debuger.printfLog(\"onClickStartError\");            mVideoAllCallBack.onClickStartError(mOriginUrl, mTitle, this);        }        prepareVideo();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "prepareVideo", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void prepareVideo() {        startPrepare();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "startPrepare", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void startPrepare() {        if (getGSYVideoManager().listener() != null) {            getGSYVideoManager().listener().onCompletion();        }        if (mVideoAllCallBack != null) {            Debuger.printfLog(\"onStartPrepared\");            mVideoAllCallBack.onStartPrepared(mOriginUrl, mTitle, this);        }        getGSYVideoManager().setListener(this);        getGSYVideoManager().setPlayTag(mPlayTag);        getGSYVideoManager().setPlayPosition(mPlayPosition);        mAudioManager.requestAudioFocus(onAudioFocusChangeListener, AudioManager.STREAM_MUSIC, AudioManager.AUDIOFOCUS_GAIN_TRANSIENT);        try {            if (mContext instanceof Activity) {                ((Activity) mContext).getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);            }        } catch (Exception e) {            e.printStackTrace();        }        mBackUpPlayingBufferState = -1;        getGSYVideoManager().prepare(mUrl, (mMapHeadData == null) ? new HashMap<String, String>() : mMapHeadData, mLooping, mSpeed, mCache, mCachePath, mOverrideExtension);        setStateAndUi(CURRENT_STATE_PREPAREING);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "onGankAudio", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onGankAudio() {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "onLossAudio", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onLossAudio() {        new Handler(Looper.getMainLooper()).post(new Runnable() {            public void run() {                if (GSYVideoView.this.mReleaseWhenLossAudio) {                    GSYVideoView.this.releaseVideos();                } else {                    GSYVideoView.this.onVideoPause();                }            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "onLossTransientAudio", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onLossTransientAudio() {        try {            this.onVideoPause();        } catch (Exception var2) {            var2.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "onLossTransientCanDuck", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onLossTransientCanDuck() {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "setUp", "params": ["String", "boolean", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean setUp(String url, boolean cacheWithPlay, String title) {        return setUp(url, cacheWithPlay, ((File) null), title);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "setUp", "params": ["String", "boolean", "File", "Map<String,String>", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean setUp(String url, boolean cacheWithPlay, File cachePath, Map<String, String> mapHeadData, String title) {        if (setUp(url, cacheWithPlay, cachePath, title)) {            if (this.mMapHeadData != null) {                this.mMapHeadData.clear();            } else {                this.mMapHeadData = new HashMap<>();            }            if (mapHeadData != null) {                this.mMapHeadData.putAll(mapHeadData);            }            return true;        }        return false;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "setUp", "params": ["String", "boolean", "File", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean setUp(String url, boolean cacheWithPlay, File cachePath, String title) {        return setUp(url, cacheWithPlay, cachePath, title, true);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "setUp", "params": ["String", "boolean", "File", "String", "boolean"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean setUp(String url, boolean cacheWithPlay, File cachePath, String title, boolean changeState) {        mCache = cacheWithPlay;        mCachePath = cachePath;        mOriginUrl = url;        if (isCurrentMediaListener() &&                (System.currentTimeMillis() - mSaveChangeViewTIme) < CHANGE_DELAY_TIME)            return false;        mCurrentState = CURRENT_STATE_NORMAL;        this.mUrl = url;        this.mTitle = title;        if (changeState)            setStateAndUi(CURRENT_STATE_NORMAL);        return true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "onVideoReset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onVideoReset() {        setStateAndUi(CURRENT_STATE_NORMAL);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "onVideoPause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onVideoPause() {        if (mCurrentState == CURRENT_STATE_PREPAREING) {            mPauseBeforePrepared = true;        }        try {            if (getGSYVideoManager() != null &&                    getGSYVideoManager().isPlaying()) {                setStateAndUi(CURRENT_STATE_PAUSE);                mCurrentPosition = getGSYVideoManager().getCurrentPosition();                if (getGSYVideoManager() != null)                    getGSYVideoManager().pause();            }        } catch (Exception e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "onVideoResume", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onVideoResume() {        onVideoResume(true);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "onVideoResume", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onVideoResume(boolean seek) {        mPauseBeforePrepared = false;        if (mCurrentState == CURRENT_STATE_PAUSE) {            try {                if (mCurrentPosition >= 0 && getGSYVideoManager() != null) {                    if (seek) {                        getGSYVideoManager().seekTo(mCurrentPosition);                    }                    getGSYVideoManager().start();                    setStateAndUi(CURRENT_STATE_PLAYING);                    if (mAudioManager != null && !mReleaseWhenLossAudio) {                        mAudioManager.requestAudioFocus(onAudioFocusChangeListener, AudioManager.STREAM_MUSIC, AudioManager.AUDIOFOCUS_GAIN_TRANSIENT);                    }                    mCurrentPosition = 0;                }            } catch (Exception e) {                e.printStackTrace();            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "netWorkErrorLogic", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void netWorkErrorLogic() {        final long currentPosition = getCurrentPositionWhenPlaying();        Debuger.printfError(\"******* Net State Changed. renew player to connect *******\" + currentPosition);        getGSYVideoManager().releaseMediaPlayer();        postDelayed(new Runnable() {            @Override            public void run() {                setSeekOnStart(currentPosition);                startPlayLogic();            }        }, 500);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "deleteCacheFileWhenError", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void deleteCacheFileWhenError() {        clearCurrentCache();        Debuger.printfError(\"Link Or mCache Error, Please Try Again \" + mOriginUrl);        if (mCache) {            Debuger.printfError(\"mCache Link \" + mUrl);        }        mUrl = mOriginUrl;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "onPrepared", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPrepared() {        if (mCurrentState != CURRENT_STATE_PREPAREING) return;        mHadPrepared = true;        if (mVideoAllCallBack != null && isCurrentMediaListener()) {            Debuger.printfLog(\"onPrepared\");            mVideoAllCallBack.onPrepared(mOriginUrl, mTitle, this);        }        if (!mStartAfterPrepared) {            setStateAndUi(CURRENT_STATE_PAUSE);            onVideoPause();//todo \u52a0\u4e0a\u8fd9\u4e2a            return;        }        startAfterPrepared();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "onAutoCompletion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onAutoCompletion() {        setStateAndUi(CURRENT_STATE_AUTO_COMPLETE);        mSaveChangeViewTIme = 0;        mCurrentPosition = 0;        if (mTextureViewContainer.getChildCount() > 0) {            mTextureViewContainer.removeAllViews();        }        if (!mIfCurrentIsFullscreen)            getGSYVideoManager().setLastListener(null);        mAudioManager.abandonAudioFocus(onAudioFocusChangeListener);        if (mContext instanceof Activity) {            try {                ((Activity) mContext).getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);            } catch (Exception e) {                e.printStackTrace();            }        }        releaseNetWorkState();        if (mVideoAllCallBack != null && isCurrentMediaListener()) {            Debuger.printfLog(\"onAutoComplete\");            mVideoAllCallBack.onAutoComplete(mOriginUrl, mTitle, this);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "onCompletion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCompletion() {        //make me normal first        setStateAndUi(CURRENT_STATE_NORMAL);        mSaveChangeViewTIme = 0;        mCurrentPosition = 0;        if (mTextureViewContainer.getChildCount() > 0) {            mTextureViewContainer.removeAllViews();        }        if (!mIfCurrentIsFullscreen) {            getGSYVideoManager().setListener(null);            getGSYVideoManager().setLastListener(null);        }        getGSYVideoManager().setCurrentVideoHeight(0);        getGSYVideoManager().setCurrentVideoWidth(0);        mAudioManager.abandonAudioFocus(onAudioFocusChangeListener);        if (mContext instanceof Activity) {            try {                ((Activity) mContext).getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);            } catch (Exception e) {                e.printStackTrace();            }        }        releaseNetWorkState();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "onSeekComplete", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSeekComplete() {        Debuger.printfLog(\"onSeekComplete\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "onError", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onError(int what, int extra) {        if (mNetChanged) {            mNetChanged = false;            netWorkErrorLogic();            if (mVideoAllCallBack != null) {                mVideoAllCallBack.onPlayError(mOriginUrl, mTitle, this);            }            return;        }        if (what != 38 && what != -38) {            setStateAndUi(CURRENT_STATE_ERROR);            deleteCacheFileWhenError();            if (mVideoAllCallBack != null) {                mVideoAllCallBack.onPlayError(mOriginUrl, mTitle, this);            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "onInfo", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onInfo(int what, int extra) {        if (what == MediaPlayer.MEDIA_INFO_BUFFERING_START) {            mBackUpPlayingBufferState = mCurrentState;            //\u907f\u514d\u5728onPrepared\u4e4b\u524d\u5c31\u8fdb\u5165\u4e86buffering\uff0c\u5bfc\u81f4\u4e00\u53ealoading            if (mHadPlay && mCurrentState != CURRENT_STATE_PREPAREING && mCurrentState > 0)                setStateAndUi(CURRENT_STATE_PLAYING_BUFFERING_START);        } else if (what == MediaPlayer.MEDIA_INFO_BUFFERING_END) {            if (mBackUpPlayingBufferState != -1) {                if (mBackUpPlayingBufferState == CURRENT_STATE_PLAYING_BUFFERING_START) {                    mBackUpPlayingBufferState = CURRENT_STATE_PLAYING;                }                if (mHadPlay && mCurrentState != CURRENT_STATE_PREPAREING && mCurrentState > 0)                    setStateAndUi(mBackUpPlayingBufferState);                mBackUpPlayingBufferState = -1;            }        } else if (what == getGSYVideoManager().getRotateInfoFlag()) {            mRotate = extra;            Debuger.printfLog(\"Video Rotate Info \" + extra);            if (mTextureView != null)                mTextureView.setRotation(mRotate);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "onVideoSizeChanged", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onVideoSizeChanged() {        int mVideoWidth = getGSYVideoManager().getCurrentVideoWidth();        int mVideoHeight = getGSYVideoManager().getCurrentVideoHeight();        if (mVideoWidth != 0 && mVideoHeight != 0 && mTextureView != null) {            mTextureView.requestLayout();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "setDisplay", "params": ["Surface"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void setDisplay(Surface surface) {        getGSYVideoManager().setDisplay(surface);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "releaseSurface", "params": ["Surface"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void releaseSurface(Surface surface) {        getGSYVideoManager().releaseSurface(surface);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "clearCurrentCache", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clearCurrentCache() {        if (getGSYVideoManager().isCacheFile() && mCache) {            //\u662f\u5426\u4e3a\u7f13\u5b58\u6587\u4ef6            Debuger.printfError(\"Play Error \" + mUrl);            mUrl = mOriginUrl;            getGSYVideoManager().clearCache(mContext, mCachePath, mOriginUrl);        } else if (mUrl.contains(\"127.0.0.1\")) {            getGSYVideoManager().clearCache(getContext(), mCachePath, mOriginUrl);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "getCurrentPositionWhenPlaying", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCurrentPositionWhenPlaying() {        int position = 0;        if (mCurrentState == CURRENT_STATE_PLAYING || mCurrentState == CURRENT_STATE_PAUSE) {            try {                position = (int) getGSYVideoManager().getCurrentPosition();            } catch (Exception e) {                e.printStackTrace();                return position;            }        }        if (position == 0 && mCurrentPosition > 0) {            return (int) mCurrentPosition;        }        return position;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "getDuration", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getDuration() {        int duration = 0;        try {            duration = (int) getGSYVideoManager().getDuration();        } catch (Exception e) {            e.printStackTrace();            return duration;        }        return duration;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "release", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void release() {        mSaveChangeViewTIme = 0;        if (isCurrentMediaListener() &&                (System.currentTimeMillis() - mSaveChangeViewTIme) > CHANGE_DELAY_TIME) {            releaseVideos();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "startAfterPrepared", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void startAfterPrepared() {        if (!mHadPrepared) {            prepareVideo();        }        try {            if (getGSYVideoManager() != null) {                getGSYVideoManager().start();            }            setStateAndUi(CURRENT_STATE_PLAYING);            if (getGSYVideoManager() != null && mSeekOnStart > 0) {                getGSYVideoManager().seekTo(mSeekOnStart);                mSeekOnStart = 0;            }        } catch (Exception e) {            e.printStackTrace();        }        addTextureView();        createNetWorkState();        listenerNetWorkState();        mHadPlay = true;        if (mTextureView != null) {            mTextureView.onResume();        }        if (mPauseBeforePrepared) {            onVideoPause();            mPauseBeforePrepared = false;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "isCurrentMediaListener", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean isCurrentMediaListener() {        return getGSYVideoManager().listener() != null                && getGSYVideoManager().listener() == this;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "createNetWorkState", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void createNetWorkState() {        if (mNetInfoModule == null) {            mNetInfoModule = new NetInfoModule(mContext.getApplicationContext(), new NetInfoModule.NetChangeListener() {                @Override                public void changed(String state) {                    if (!mNetSate.equals(state)) {                        Debuger.printfError(\"******* change network state ******* \" + state);                        mNetChanged = true;                    }                    mNetSate = state;                }            });            mNetSate = mNetInfoModule.getCurrentConnectionType();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "listenerNetWorkState", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void listenerNetWorkState() {        if (mNetInfoModule != null) {            mNetInfoModule.onHostResume();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "unListenerNetWorkState", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void unListenerNetWorkState() {        if (mNetInfoModule != null) {            mNetInfoModule.onHostPause();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "releaseNetWorkState", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void releaseNetWorkState() {        if (mNetInfoModule != null) {            mNetInfoModule.onHostPause();            mNetInfoModule = null;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "backFromFull", "params": ["Context"], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "boolean", "snippet": "    protected abstract boolean backFromFull(Context context);    /**     * \u91ca\u653e\u64ad\u653e\u5668     */    protected abstract void releaseVideos();    /**     * \u8bbe\u7f6e\u64ad\u653e\u663e\u793a\u72b6\u6001     *     * @param state     */    protected abstract void setStateAndUi(int state);    /**     * \u83b7\u53d6\u7ba1\u7406\u5668\u6865\u63a5\u7684\u5b9e\u73b0     */    public abstract GSYVideoViewBridge getGSYVideoManager();    /**     * \u5f53\u524dUI     */    public abstract int getLayoutId();    /**     * \u5f00\u59cb\u64ad\u653e     */    public abstract void startPlayLogic();    /************************* \u516c\u5f00\u63a5\u53e3 *************************/    /**     * \u83b7\u53d6\u5f53\u524d\u64ad\u653e\u72b6\u6001     */    public int getCurrentState() {        return mCurrentState;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "releaseVideos", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void releaseVideos();    /**     * \u8bbe\u7f6e\u64ad\u653e\u663e\u793a\u72b6\u6001     *     * @param state     */    protected abstract void setStateAndUi(int state);    /**     * \u83b7\u53d6\u7ba1\u7406\u5668\u6865\u63a5\u7684\u5b9e\u73b0     */    public abstract GSYVideoViewBridge getGSYVideoManager();    /**     * \u5f53\u524dUI     */    public abstract int getLayoutId();    /**     * \u5f00\u59cb\u64ad\u653e     */    public abstract void startPlayLogic();    /************************* \u516c\u5f00\u63a5\u53e3 *************************/    /**     * \u83b7\u53d6\u5f53\u524d\u64ad\u653e\u72b6\u6001     */    public int getCurrentState() {        return mCurrentState;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "setStateAndUi", "params": ["int"], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void setStateAndUi(int state);    /**     * \u83b7\u53d6\u7ba1\u7406\u5668\u6865\u63a5\u7684\u5b9e\u73b0     */    public abstract GSYVideoViewBridge getGSYVideoManager();    /**     * \u5f53\u524dUI     */    public abstract int getLayoutId();    /**     * \u5f00\u59cb\u64ad\u653e     */    public abstract void startPlayLogic();    /************************* \u516c\u5f00\u63a5\u53e3 *************************/    /**     * \u83b7\u53d6\u5f53\u524d\u64ad\u653e\u72b6\u6001     */    public int getCurrentState() {        return mCurrentState;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "getGSYVideoManager", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "GSYVideoViewBridge", "snippet": "    public abstract GSYVideoViewBridge getGSYVideoManager();    /**     * \u5f53\u524dUI     */    public abstract int getLayoutId();    /**     * \u5f00\u59cb\u64ad\u653e     */    public abstract void startPlayLogic();    /************************* \u516c\u5f00\u63a5\u53e3 *************************/    /**     * \u83b7\u53d6\u5f53\u524d\u64ad\u653e\u72b6\u6001     */    public int getCurrentState() {        return mCurrentState;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "getLayoutId", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "int", "snippet": "    public abstract int getLayoutId();    /**     * \u5f00\u59cb\u64ad\u653e     */    public abstract void startPlayLogic();    /************************* \u516c\u5f00\u63a5\u53e3 *************************/    /**     * \u83b7\u53d6\u5f53\u524d\u64ad\u653e\u72b6\u6001     */    public int getCurrentState() {        return mCurrentState;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "startPlayLogic", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void startPlayLogic();    /************************* \u516c\u5f00\u63a5\u53e3 *************************/    /**     * \u83b7\u53d6\u5f53\u524d\u64ad\u653e\u72b6\u6001     */    public int getCurrentState() {        return mCurrentState;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "getCurrentState", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCurrentState() {        return mCurrentState;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "isInPlayingState", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isInPlayingState() {        return (mCurrentState >= 0 && mCurrentState != CURRENT_STATE_NORMAL                && mCurrentState != CURRENT_STATE_AUTO_COMPLETE && mCurrentState != CURRENT_STATE_ERROR);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "getPlayTag", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPlayTag() {        return mPlayTag;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "setPlayTag", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPlayTag(String playTag) {        this.mPlayTag = playTag;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "getPlayPosition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getPlayPosition() {        return mPlayPosition;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "setPlayPosition", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPlayPosition(int playPosition) {        this.mPlayPosition = playPosition;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "getNetSpeed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getNetSpeed() {        return getGSYVideoManager().getNetSpeed();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "getNetSpeedText", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getNetSpeedText() {        long speed = getNetSpeed();        return getTextSpeed(speed);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "getSeekOnStart", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getSeekOnStart() {        return mSeekOnStart;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "setSeekOnStart", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSeekOnStart(long seekOnStart) {        this.mSeekOnStart = seekOnStart;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "getBuffterPoint", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getBuffterPoint() {        return mBufferPoint;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "isIfCurrentIsFullscreen", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isIfCurrentIsFullscreen() {        return mIfCurrentIsFullscreen;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "setIfCurrentIsFullscreen", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIfCurrentIsFullscreen(boolean ifCurrentIsFullscreen) {        this.mIfCurrentIsFullscreen = ifCurrentIsFullscreen;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "isLooping", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isLooping() {        return mLooping;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "setLooping", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLooping(boolean looping) {        this.mLooping = looping;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "setVideoAllCallBack", "params": ["VideoAllCallBack"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setVideoAllCallBack(VideoAllCallBack mVideoAllCallBack) {        this.mVideoAllCallBack = mVideoAllCallBack;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "getSpeed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getSpeed() {        return mSpeed;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "setSpeed", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSpeed(float speed) {        setSpeed(speed, false);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "setSpeed", "params": ["float", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSpeed(float speed, boolean soundTouch) {        this.mSpeed = speed;        this.mSoundTouch = soundTouch;        if (getGSYVideoManager() != null) {            getGSYVideoManager().setSpeed(speed, soundTouch);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "setSpeedPlaying", "params": ["float", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSpeedPlaying(float speed, boolean soundTouch) {        setSpeed(speed, soundTouch);        getGSYVideoManager().setSpeedPlaying(speed, soundTouch);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "isShowPauseCover", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isShowPauseCover() {        return mShowPauseCover;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "setShowPauseCover", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setShowPauseCover(boolean showPauseCover) {        this.mShowPauseCover = showPauseCover;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "seekTo", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void seekTo(long position) {        try {            if (getGSYVideoManager() != null && position > 0) {                getGSYVideoManager().seekTo(position);            }        } catch (Exception e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "isStartAfterPrepared", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isStartAfterPrepared() {        return mStartAfterPrepared;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "setStartAfterPrepared", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStartAfterPrepared(boolean startAfterPrepared) {        this.mStartAfterPrepared = startAfterPrepared;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "isReleaseWhenLossAudio", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isReleaseWhenLossAudio() {        return mReleaseWhenLossAudio;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "setReleaseWhenLossAudio", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setReleaseWhenLossAudio(boolean releaseWhenLossAudio) {        this.mReleaseWhenLossAudio = releaseWhenLossAudio;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "getMapHeadData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,String>", "snippet": "    public Map<String, String> getMapHeadData() {        return mMapHeadData;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "setMapHeadData", "params": ["Map<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMapHeadData(Map<String, String> headData) {        if (headData != null) {            this.mMapHeadData = headData;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "getOverrideExtension", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOverrideExtension() {        return mOverrideExtension;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "setOverrideExtension", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOverrideExtension(String overrideExtension) {        this.mOverrideExtension = overrideExtension;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoView.java", "stars": "2", "class": {"name": "GSYVideoView", "extends": "GSYTextureRenderView", "implements": ["GSYMediaPlayerListener"], "modifiers": ["public", "abstract"]}}, {"method_name": "getProjectId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getProjectId() {    return projectId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/project/entity/ProjectPermission.java", "stars": "18", "class": {"name": "ProjectPermission", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setProjectId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setProjectId(int projectId) {    this.projectId = projectId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/project/entity/ProjectPermission.java", "stars": "18", "class": {"name": "ProjectPermission", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUsername", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getUsername() {    return username;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/project/entity/ProjectPermission.java", "stars": "18", "class": {"name": "ProjectPermission", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUsername", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setUsername(String username) {    this.username = username;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/project/entity/ProjectPermission.java", "stars": "18", "class": {"name": "ProjectPermission", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPermission", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Permission", "snippet": "  public Permission getPermission() {    return permission;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/project/entity/ProjectPermission.java", "stars": "18", "class": {"name": "ProjectPermission", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPermission", "params": ["Permission"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setPermission(Permission permission) {    this.permission = permission;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/project/entity/ProjectPermission.java", "stars": "18", "class": {"name": "ProjectPermission", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getIsGroup", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean getIsGroup() {    return isGroup;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/project/entity/ProjectPermission.java", "stars": "18", "class": {"name": "ProjectPermission", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setIsGroup", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setIsGroup(boolean group) {    isGroup = group;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/project/entity/ProjectPermission.java", "stars": "18", "class": {"name": "ProjectPermission", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProjectGroup", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getProjectGroup() {    return projectGroup;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/project/entity/ProjectPermission.java", "stars": "18", "class": {"name": "ProjectPermission", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setProjectGroup", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setProjectGroup(String projectGroup) {    this.projectGroup = projectGroup;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/project/entity/ProjectPermission.java", "stars": "18", "class": {"name": "ProjectPermission", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDO.java", "stars": "1", "class": {"name": "SequenceDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDO.java", "stars": "1", "class": {"name": "SequenceDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurrentValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getCurrentValue() {        return currentValue;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDO.java", "stars": "1", "class": {"name": "SequenceDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCurrentValue", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCurrentValue(Integer currentValue) {        this.currentValue = currentValue;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDO.java", "stars": "1", "class": {"name": "SequenceDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStep", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getStep() {        return step;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDO.java", "stars": "1", "class": {"name": "SequenceDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStep", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStep(Integer step) {        this.step = step;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/SequenceDO.java", "stars": "1", "class": {"name": "SequenceDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/SwitchVideoTypeDialog.java", "stars": "2", "class": {"name": "SwitchVideoTypeDialog", "extends": "Dialog", "implements": null, "modifiers": ["public"]}}, {"method_name": "initList", "params": ["List<SwitchVideoModel>", "OnListItemClickListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initList(List<SwitchVideoModel> data, OnListItemClickListener onItemClickListener) {        this.onItemClickListener = onItemClickListener;        this.data = data;        LayoutInflater inflater = LayoutInflater.from(mContext);        View view = inflater.inflate(R.layout.switch_video_dialog, null);        listView = (ListView) view.findViewById(R.id.switch_dialog_list);        setContentView(view);        adapter = new ArrayAdapter<>(mContext, R.layout.switch_video_dialog_item, data);        listView.setAdapter(adapter);        listView.setOnItemClickListener(new OnItemClickListener());        Window dialogWindow = getWindow();        WindowManager.LayoutParams lp = dialogWindow.getAttributes();        DisplayMetrics d = mContext.getResources().getDisplayMetrics(); // \u83b7\u53d6\u5c4f\u5e55\u5bbd\u3001\u9ad8\u7528        lp.width = (int) (d.widthPixels * 0.8); // \u9ad8\u5ea6\u8bbe\u7f6e\u4e3a\u5c4f\u5e55\u76840.6        dialogWindow.setAttributes(lp);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/SwitchVideoTypeDialog.java", "stars": "2", "class": {"name": "SwitchVideoTypeDialog", "extends": "Dialog", "implements": null, "modifiers": ["public"]}}, {"method_name": "onItemClick", "params": ["AdapterView<?>", "View", "int", "long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onItemClick(AdapterView<?> adapterView, View view, int position, long id) {            dismiss();            onItemClickListener.onItemClick(position);        }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/view/SwitchVideoTypeDialog.java", "stars": "2", "class": {"name": "OnItemClickListener", "extends": null, "implements": ["AdapterView"], "modifiers": ["private"]}}, {"method_name": "getExecutor", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "ExecutorService", "snippet": "    private static ExecutorService getExecutor(String name) {        String executorName = new StringBuilder(\"EXECUTOR_\").append(name).toString();        ExecutorService executorOne = executorMap.get(executorName);        if (executorOne == null) {            synchronized (executorName) {                executorOne = executorMap.get(executorName);                if (executorOne == null) {                    executorOne = newThreadPool();                    executorMap.put(executorName, executorOne);                }            }        }        return executorOne;    }", "url": "https://raw.githubusercontent.com/zhufg/tool/master/src/main/java/com/github/zhufg/util/ThreadPoolUtil.java", "stars": "6", "class": {"name": "ThreadPoolUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "execute", "params": ["String", "Runnable"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void execute(String name, Runnable command) {        ExecutorService executorService = getExecutor(name);        executorService.execute(command);    }", "url": "https://raw.githubusercontent.com/zhufg/tool/master/src/main/java/com/github/zhufg/util/ThreadPoolUtil.java", "stars": "6", "class": {"name": "ThreadPoolUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "submit", "params": ["String", "Callable<T>"], "throws": null, "modifiers": ["public", "static"], "return_type": "Future<T>", "snippet": "    public static <T> Future<T> submit(String name, Callable<T> command) {        ExecutorService executorService = getExecutor(name);        return executorService.submit(command);    }", "url": "https://raw.githubusercontent.com/zhufg/tool/master/src/main/java/com/github/zhufg/util/ThreadPoolUtil.java", "stars": "6", "class": {"name": "ThreadPoolUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "executeByCommon", "params": ["Runnable"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void executeByCommon(Runnable command) {        execute(null, command);    }", "url": "https://raw.githubusercontent.com/zhufg/tool/master/src/main/java/com/github/zhufg/util/ThreadPoolUtil.java", "stars": "6", "class": {"name": "ThreadPoolUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "execute", "params": ["String", "Runnable", "int"], "throws": ["TimeoutException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void execute(String name, Runnable command, int timeoutSec)throws TimeoutException  {        ExecutorService executorService = getExecutor(name);        Future<?> future = executorService.submit(command);        try {            future.get(timeoutSec, TimeUnit.SECONDS);        } catch (InterruptedException e) {            logger.error(name + \"InterruptedException error\", e);            throw new RuntimeException(e);        } catch (ExecutionException e) {            logger.error(name + \" ExecutionException error\", e);            throw new RuntimeException(e);        }    }", "url": "https://raw.githubusercontent.com/zhufg/tool/master/src/main/java/com/github/zhufg/util/ThreadPoolUtil.java", "stars": "6", "class": {"name": "ThreadPoolUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "partitionList", "params": ["List<T>", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<List>", "snippet": "    public static <T> List<List<T>> partitionList(List<T> list, int parSize) {        if (parSize <= 0) {            throw new RuntimeException(\"error partition by parSize error\");        }        List<List<T>> lists = new ArrayList<>(parSize);        if (list == null || list.size() == 0) {            return lists;        }        if (parSize == 1) {            lists.add(list);            return lists;        }        int listSize = list.size();        int pageSize = listSize / parSize;        if (pageSize <= 0) {            pageSize = 1;        }        int addOnes = listSize >= parSize ? listSize % parSize : 0;        for (int beginIndex = 0; beginIndex <= listSize - 1;) {            int endIndex = beginIndex + pageSize;            if (addOnes-- > 0) {                endIndex++;            }            if (endIndex > listSize) {                endIndex = listSize;            }            List<T> parList = list.subList(beginIndex, endIndex);            lists.add(parList);            beginIndex = endIndex;        }        return lists;    }", "url": "https://raw.githubusercontent.com/zhufg/tool/master/src/main/java/com/github/zhufg/util/ThreadPoolUtil.java", "stars": "6", "class": {"name": "ThreadPoolUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "perSize", "params": ["List<T>", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<List>", "snippet": "    public static <T> List<List<T>> perSize(List<T> list, int perSize) {        if (perSize <= 0) {            throw new RuntimeException(\"error partition by perSize error\");        }        List<List<T>> lists = new ArrayList<List<T>>(perSize);        if (list == null || list.size() == 0) {            return lists;        }        int size = list.size();        for(int fromIndex = 0 ; fromIndex< list.size(); fromIndex+=perSize){            int endIndex = fromIndex+perSize > size?size:fromIndex+perSize;            lists.add(list.subList(fromIndex, endIndex));        }        return lists;    }", "url": "https://raw.githubusercontent.com/zhufg/tool/master/src/main/java/com/github/zhufg/util/ThreadPoolUtil.java", "stars": "6", "class": {"name": "ThreadPoolUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "partitionListByProcess", "params": ["List<T>"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<List>", "snippet": "    public static <T> List<List<T>> partitionListByProcess(List<T> list) {        return partitionList(list, getReasonableProcess());    }", "url": "https://raw.githubusercontent.com/zhufg/tool/master/src/main/java/com/github/zhufg/util/ThreadPoolUtil.java", "stars": "6", "class": {"name": "ThreadPoolUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getReasonableProcess", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getReasonableProcess() {        return availableProcessors;    }", "url": "https://raw.githubusercontent.com/zhufg/tool/master/src/main/java/com/github/zhufg/util/ThreadPoolUtil.java", "stars": "6", "class": {"name": "ThreadPoolUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "newThreadPool", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "ExecutorService", "snippet": "    private static ExecutorService newThreadPool(){        return Executors.newWorkStealingPool(getReasonableProcess());    }", "url": "https://raw.githubusercontent.com/zhufg/tool/master/src/main/java/com/github/zhufg/util/ThreadPoolUtil.java", "stars": "6", "class": {"name": "ThreadPoolUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getResultHelper", "params": ["String", "int", "PoolExceptionPolicy"], "throws": null, "modifiers": ["public", "static"], "return_type": "CountDownLatchHerlper", "snippet": "    public static CountDownLatchHerlper getResultHelper(String taskName, int timeoutSec, PoolExceptionPolicy poolExceptionPolicy){        return new CountDownLatchHerlper(taskName, timeoutSec, poolExceptionPolicy);    }", "url": "https://raw.githubusercontent.com/zhufg/tool/master/src/main/java/com/github/zhufg/util/ThreadPoolUtil.java", "stars": "6", "class": {"name": "ThreadPoolUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getVoidHelper", "params": ["String", "int", "PoolExceptionPolicy"], "throws": null, "modifiers": ["public", "static"], "return_type": "ResultVoidHerlper", "snippet": "    public static ResultVoidHerlper getVoidHelper(String taskName, int timeoutSec,PoolExceptionPolicy poolExceptionPolicy){        return new ResultVoidHerlper(taskName, timeoutSec, poolExceptionPolicy);    }", "url": "https://raw.githubusercontent.com/zhufg/tool/master/src/main/java/com/github/zhufg/util/ThreadPoolUtil.java", "stars": "6", "class": {"name": "ThreadPoolUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addTask", "params": ["Callable<T>"], "throws": null, "modifiers": ["public"], "return_type": "CountDownLatchHerlper", "snippet": "        public CountDownLatchHerlper addTask(Callable<T> call){            if(taskNums.addAndGet(1) ==1){                beginTime = System.currentTimeMillis();                lastMillis = beginTime+timeoutSec*1000;            }            if(this.taskStatus == 2){                throw new RuntimeException(\"\u4efb\u52a1\u5df2\u6267\u884c\u5b8c\u6bd5\uff0c\u65e0\u6cd5\u6dfb\u52a0\u4efb\u52a1\");            }            this.taskStatus = 1;            futures.add(submit(taskName, call));            return this;        }", "url": "https://raw.githubusercontent.com/zhufg/tool/master/src/main/java/com/github/zhufg/util/ThreadPoolUtil.java", "stars": "6", "class": {"name": "CountDownLatchHerlper", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getTaskResults", "params": [], "throws": ["TimeoutException"], "modifiers": ["public"], "return_type": "List<T>", "snippet": "        public List<T> getTaskResults() throws TimeoutException{            for(Future<T> t :futures ){                try {                    if(lastMillis < System.currentTimeMillis()){                        throw new TimeoutException(\"\u6267\u884c\u4efb\u52a1\u8d85\u65f6\uff01\");                    }                    if(t.isDone()){                        results.add(t.get());                    }else{                        results.add(t.get(lastMillis-System.currentTimeMillis(), TimeUnit.MILLISECONDS));                    }                }  catch (TimeoutException e) {                    this.taskStatus = 3;                    if(PoolExceptionPolicy.SHUTDOWN.equals(poolExceptionPolicy)){                        throw e;                    }                    logger.error(\"\u6267\u884c\u5f02\u5e38\uff0c\u6839\u636e\u6267\u884c\u7b56\u7565\uff0c\u76f4\u63a5\u8fd4\u56de\u73b0\u6709\u7ed3\u679c\", e);                    results = getTaskRes();                    this.exs.add(e);                    throw e;                }catch (Exception e) {                    this.taskStatus = 3;                    if(PoolExceptionPolicy.SHUTDOWN.equals(poolExceptionPolicy)){                        this.endTime = System.currentTimeMillis();                        throw new RuntimeException(e);                    }                    if(PoolExceptionPolicy.RETURNRULSTNOW.equals(poolExceptionPolicy)){                        logger.error(\"\u6267\u884c\u5f02\u5e38\uff0c\u6839\u636e\u6267\u884c\u7b56\u7565\uff0c\u76f4\u63a5\u8fd4\u56de\u73b0\u6709\u7ed3\u679c\", e);                        results = getTaskRes();                        this.exs.add(e);                        this.endTime = System.currentTimeMillis();                        return results;                    }                    if(PoolExceptionPolicy.IGNORE.equals(poolExceptionPolicy)){                        logger.error(\"\u6267\u884c\u5f02\u5e38\uff0c\u6839\u636e\u6267\u884c\u7b56\u7565\uff0c\u7ee7\u7eed\u6267\u884c\", e);                        this.exs.add(e);                        continue;                    }                }            }            if(this.taskStatus  == 1){                this.taskStatus =2;            }            this.endTime = System.currentTimeMillis();            logger.debug(\"\u6267\u884c\u4efb\u52a1\u7ed3\u675f\u6267\u884c\u4efb\u52a1\u5b8c\u6210\u65f6\u95f4\u4e3a\"+(this.endTime-this.beginTime)+\"&\u603b\u6267\u884c\u4efb\u52a1\u6570\uff1a\"+taskNums);            return results;        }", "url": "https://raw.githubusercontent.com/zhufg/tool/master/src/main/java/com/github/zhufg/util/ThreadPoolUtil.java", "stars": "6", "class": {"name": "CountDownLatchHerlper", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getTaskRes", "params": [], "throws": null, "modifiers": ["private"], "return_type": "List<T>", "snippet": "        private List<T> getTaskRes(){            List<T> results = new ArrayList<>();            for(Future<T> t :futures ){                if(t.isDone()){                    try {                        results.add(t.get());                    } catch (InterruptedException e) {                        // just ignore                    } catch (ExecutionException e) {                        // just ignore                    }                }else {                    t.cancel(true);                }            }            return results;        }", "url": "https://raw.githubusercontent.com/zhufg/tool/master/src/main/java/com/github/zhufg/util/ThreadPoolUtil.java", "stars": "6", "class": {"name": "CountDownLatchHerlper", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getResultWithDealer", "params": ["Function<List,V>"], "throws": ["TimeoutException"], "modifiers": ["public"], "return_type": "V", "snippet": "        public <V> V getResultWithDealer(Function<List<T>,V> fc)throws TimeoutException{            return fc.apply(getTaskResults());        }", "url": "https://raw.githubusercontent.com/zhufg/tool/master/src/main/java/com/github/zhufg/util/ThreadPoolUtil.java", "stars": "6", "class": {"name": "CountDownLatchHerlper", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getTaskExecuteTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "        public long getTaskExecuteTime(){            if(this.taskStatus != 2 && this.taskStatus != 3){                throw new RuntimeException(\"\u6267\u884c\u5f02\u5e38\uff0c\u4efb\u52a1\u672a\u5b8c\u6210\u65e0\u6cd5\u83b7\u53d6\u6267\u884c\u65f6\u95f4\");            }            return this.endTime-this.beginTime;        }", "url": "https://raw.githubusercontent.com/zhufg/tool/master/src/main/java/com/github/zhufg/util/ThreadPoolUtil.java", "stars": "6", "class": {"name": "CountDownLatchHerlper", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getTaskStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getTaskStatus() {            return taskStatus;        }", "url": "https://raw.githubusercontent.com/zhufg/tool/master/src/main/java/com/github/zhufg/util/ThreadPoolUtil.java", "stars": "6", "class": {"name": "CountDownLatchHerlper", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getResults", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<T>", "snippet": "        public List<T> getResults() {            return results;        }", "url": "https://raw.githubusercontent.com/zhufg/tool/master/src/main/java/com/github/zhufg/util/ThreadPoolUtil.java", "stars": "6", "class": {"name": "CountDownLatchHerlper", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getExs", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Exception>", "snippet": "        public List<Exception> getExs() {            return exs;        }", "url": "https://raw.githubusercontent.com/zhufg/tool/master/src/main/java/com/github/zhufg/util/ThreadPoolUtil.java", "stars": "6", "class": {"name": "CountDownLatchHerlper", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "addTask", "params": ["Runnable"], "throws": null, "modifiers": ["public"], "return_type": "ResultVoidHerlper", "snippet": "        public ResultVoidHerlper addTask(Runnable run){            if(taskNums.addAndGet(1) ==1){                beginTime = System.currentTimeMillis();                lastMillis = beginTime+timeoutSec*1000;            }            if(this.taskStatus >=2){                throw new RuntimeException(\"\u4efb\u52a1\u5df2\u6267\u884c\u5b8c\u6bd5\uff0c\u65e0\u6cd5\u6dfb\u52a0\u4efb\u52a1\");            }            this.taskStatus = 1;            Future<T> t = submit(taskName, new Callable<T>(){                @Override                public T call() throws Exception {                    run.run();                    return (T)Integer.valueOf(1);                }            });            futures.add(t);            return this;        }", "url": "https://raw.githubusercontent.com/zhufg/tool/master/src/main/java/com/github/zhufg/util/ThreadPoolUtil.java", "stars": "6", "class": {"name": "ResultVoidHerlper", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "doneTask", "params": [], "throws": ["TimeoutException"], "modifiers": ["public"], "return_type": "void", "snippet": "        public void doneTask() throws TimeoutException {            if(this.taskStatus >=2){                throw new RuntimeException(\"\u4efb\u52a1\u5df2\u6267\u884c\u5b8c\u6bd5\uff0c\u65e0\u9700\u518d\u6b21\u6267\u884c\");            }            for (Future<T> t : futures) {                try {                    if (lastMillis < System.currentTimeMillis()) {                        throw new TimeoutException(\"\u6267\u884c\u4efb\u52a1\u8d85\u65f6\uff01\");                    }                    if(t.isDone()){                        continue;                    }                    t.get(lastMillis-System.currentTimeMillis(), TimeUnit.MILLISECONDS);                } catch (TimeoutException e) {                    this.taskStatus =3;                    this.endTime = System.currentTimeMillis();                    this.exs.add(e);                    doneInProgress();                    throw e;                } catch (Exception e) {                    this.taskStatus =3;                    if (PoolExceptionPolicy.SHUTDOWN.equals(poolExceptionPolicy)) {                        this.endTime = System.currentTimeMillis();                        doneInProgress();                        throw new RuntimeException(e);                    }                    if (PoolExceptionPolicy.RETURNRULSTNOW.equals(poolExceptionPolicy)) {                        logger.error(\"\u6267\u884c\u5f02\u5e38\uff0c\u6839\u636e\u6267\u884c\u7b56\u7565\uff0c\u76f4\u63a5\u8fd4\u56de\u73b0\u6709\u7ed3\u679c\", e);                        this.exs.add(e);                        this.endTime = System.currentTimeMillis();                        doneInProgress();                        return;                    }                    if(PoolExceptionPolicy.IGNORE.equals(poolExceptionPolicy)){                        logger.error(\"\u6267\u884c\u5f02\u5e38\uff0c\u6839\u636e\u6267\u884c\u7b56\u7565\uff0c\u7ee7\u7eed\u6267\u884c\", e);                        this.exs.add(e);                        continue;                    }                }                if(this.taskStatus  == 1){                    this.taskStatus =2;                }                this.endTime = System.currentTimeMillis();                logger.info(\"\u6267\u884c\u4efb\u52a1\u7ed3\u675f\u6267\u884c\u4efb\u52a1\u5b8c\u6210\u65f6\u95f4\u4e3a\" + (this.endTime - this.beginTime) + \"&\u603b\u6267\u884c\u4efb\u52a1\u6570\uff1a\" + taskNums);            }        }", "url": "https://raw.githubusercontent.com/zhufg/tool/master/src/main/java/com/github/zhufg/util/ThreadPoolUtil.java", "stars": "6", "class": {"name": "ResultVoidHerlper", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "doneInProgress", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void doneInProgress() {            for(Future<T> t :futures ){                if(t.isDone()){                    continue;                }else {                    t.cancel(true);                }            }        }", "url": "https://raw.githubusercontent.com/zhufg/tool/master/src/main/java/com/github/zhufg/util/ThreadPoolUtil.java", "stars": "6", "class": {"name": "ResultVoidHerlper", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getTaskExecuteTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "        public long getTaskExecuteTime(){            if(this.taskStatus != 2 && this.taskStatus != 3){                throw new RuntimeException(\"\u6267\u884c\u5f02\u5e38\uff0c\u4efb\u52a1\u672a\u5b8c\u6210\u65e0\u6cd5\u83b7\u53d6\u6267\u884c\u65f6\u95f4\");            }            return this.endTime-this.beginTime;        }", "url": "https://raw.githubusercontent.com/zhufg/tool/master/src/main/java/com/github/zhufg/util/ThreadPoolUtil.java", "stars": "6", "class": {"name": "ResultVoidHerlper", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getTaskStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getTaskStatus() {            return taskStatus;        }", "url": "https://raw.githubusercontent.com/zhufg/tool/master/src/main/java/com/github/zhufg/util/ThreadPoolUtil.java", "stars": "6", "class": {"name": "ResultVoidHerlper", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getExs", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Exception>", "snippet": "        public List<Exception> getExs() {            return exs;        }", "url": "https://raw.githubusercontent.com/zhufg/tool/master/src/main/java/com/github/zhufg/util/ThreadPoolUtil.java", "stars": "6", "class": {"name": "ResultVoidHerlper", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "checkConditionOnJobStatus", "params": ["ExecutableNode"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String checkConditionOnJobStatus(final ExecutableNode node) {    final ConditionOnJobStatus conditionOnJobStatus = node.getConditionOnJobStatus();    switch (conditionOnJobStatus) {      case ALL_SUCCESS:      case ALL_FAILED:      case ALL_DONE:        return checkAllStatus(node, conditionOnJobStatus);      case ONE_FAILED:      case ONE_SUCCESS:        return checkOneStatus(node, conditionOnJobStatus);      default:        return checkAllStatus(node, ALL_SUCCESS);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/ConditionalWorkflowUtils.java", "stars": "18", "class": {"name": "ConditionalWorkflowUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkAllStatus", "params": ["ExecutableNode", "ConditionOnJobStatus"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String checkAllStatus(final ExecutableNode node, final ConditionOnJobStatus      condition) {    String result = SATISFIED;    for (final String dependency : node.getInNodes()) {      final ExecutableNode dependencyNode = node.getParentFlow().getExecutableNode(dependency);      final Status depStatus = dependencyNode.getStatus();      if (!Status.isStatusFinished(depStatus)) {        return PENDING;      } else if ((condition.equals(ALL_SUCCESS) && Status.isStatusFailed(depStatus)) ||          (condition.equals(ALL_FAILED) && Status.isStatusSucceeded(depStatus))) {        result = FAILED;      }    }    return result;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/ConditionalWorkflowUtils.java", "stars": "18", "class": {"name": "ConditionalWorkflowUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkOneStatus", "params": ["ExecutableNode", "ConditionOnJobStatus"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String checkOneStatus(final ExecutableNode node, final ConditionOnJobStatus      condition) {    String result = FAILED;    for (final String dependency : node.getInNodes()) {      final ExecutableNode dependencyNode = node.getParentFlow().getExecutableNode(dependency);      final Status depStatus = dependencyNode.getStatus();      if (!Status.isStatusFinished(depStatus)) {        return PENDING;      } else if ((condition.equals(ONE_SUCCESS) && Status.isStatusSucceeded(depStatus)) ||          (condition.equals(ONE_FAILED) && Status.isStatusFailed(depStatus))) {        result = SATISFIED;      }    }    return result;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/ConditionalWorkflowUtils.java", "stars": "18", "class": {"name": "ConditionalWorkflowUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "errorParameterHandler", "params": ["ConstraintViolationException"], "throws": null, "modifiers": ["public"], "return_type": "Response", "snippet": "    public Response errorParameterHandler(ConstraintViolationException e) {        StringBuilder message = new StringBuilder();        for (ConstraintViolation c : e.getConstraintViolations()) {            message.append(c.getMessage());        }        return new Response<>().errorResponse(CodeConstant.PARAMETER_ERROR, null, message.toString());    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/controller/ExecutorController.java", "stars": "23", "class": {"name": "ExecutorController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "errorHandler", "params": ["TaskResAllocException"], "throws": null, "modifiers": ["public"], "return_type": "Response", "snippet": "    public Response errorHandler(TaskResAllocException e){        return new Response<>().errorResponse(CodeConstant.TASK_ALLOCATE_FAILD, null, e.getMessage());    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/controller/ExecutorController.java", "stars": "23", "class": {"name": "ExecutorController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "errorHandler", "params": ["Exception"], "throws": null, "modifiers": ["public"], "return_type": "Response", "snippet": "    public Response errorHandler(Exception e) {        LOG.error(\"SYSTEM EXCEPTION, message:\", e);        return new Response<>().errorResponse(CodeConstant.SYS_ERROR, null, \"\u7cfb\u7edf\u5904\u7406\u5f02\u5e38\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/controller/ExecutorController.java", "stars": "23", "class": {"name": "ExecutorController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": ["ExecuteReq"], "throws": null, "modifiers": ["public"], "return_type": "Response<ExecuteResp>", "snippet": "    public Response<ExecuteResp> run(@Valid @RequestBody ExecuteReq req) {        LOG.trace(\"Run job {}\", req);        ExecuteResp resp = new ExecuteResp();        String host = MachineInfo.getIpAddress(configuration.getNetworkInterface());        resp.setExecutorAddress(host + \":\" + port);        boolean status = false;        String execUser = req.getExecUser();        try {            if(StringUtils.isBlank(execUser)){                execUser = System.getProperty(\"user.name\", \"\");            }            status  = executorService.run(req, execUser);        }catch(TaskResAllocException e){            return new Response<ExecuteResp>().errorResponse(CodeConstant.TASK_ALLOCATE_FAILD, null, e.getMessage());        }catch (Exception e){            LOG.error(\"Execute task \"+req.getTaskId()+\" error\",e);            resp.setMessage(e.getMessage());        }        if(status){            resp.setStatus(ExecuteStatus.RUNNING);        }else{            resp.setStatus(ExecuteStatus.FAILD);        }        resp.setExecUser(execUser);        return new Response<ExecuteResp>().successResponse(resp);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/controller/ExecutorController.java", "stars": "23", "class": {"name": "ExecutorController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "log", "params": ["long", "long", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "Response<LogResult>", "snippet": "    public Response<LogResult> log(@Valid @NotBlank(message = \"jobId\u4e0d\u80fd\u4e3a\u7a7a\") @PathVariable long jobId,                                   @Valid @NotBlank(message = \"taskId\u4e0d\u80fd\u4e3a\u7a7a\") @PathVariable long taskId,                                   @PathVariable int startLine, @PathVariable(\"windSize\") int windSize) {        if(windSize == 0){            windSize = DEFAULT_WINDOW_SIZE;        }        LogResult log = executorService.log(jobId,taskId,startLine, windSize);        return new Response<LogResult>().successResponse(log);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/controller/ExecutorController.java", "stars": "23", "class": {"name": "ExecutorController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "kill", "params": ["long", "long"], "throws": null, "modifiers": ["public"], "return_type": "Response<String>", "snippet": "    public Response<String> kill(@Valid @NotBlank(message = \"jobId\u4e0d\u80fd\u4e3a\u7a7a\") @PathVariable long jobId, @Valid @NotBlank(message = \"taskId\u4e0d\u80fd\u4e3a\u7a7a\") @PathVariable long taskId) {        try {            executorService.kill(jobId, taskId);        }catch(Exception e){            return new Response<String>().errorResponse(CodeConstant.SYS_ERROR, null, \"\u505c\u6b62\u4efb\u52a1\u5931\u8d25\");        }        return new Response<String>().successResponse(\"success\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/controller/ExecutorController.java", "stars": "23", "class": {"name": "ExecutorController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "alive", "params": ["long", "long"], "throws": null, "modifiers": ["public"], "return_type": "Response<Boolean>", "snippet": "    public Response<Boolean> alive(@Valid @NotBlank(message = \"jobId\u4e0d\u80fd\u4e3a\u7a7a\") @PathVariable long jobId, @Valid @NotBlank(message = \"taskId\u4e0d\u80fd\u4e3a\u7a7a\") @PathVariable long taskId){        return new Response<Boolean>().successResponse(                executorService.isAlive(jobId, taskId)        );    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/controller/ExecutorController.java", "stars": "23", "class": {"name": "ExecutorController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "runtimeLimitSpeed", "params": ["long", "long", "long"], "throws": null, "modifiers": ["public"], "return_type": "Response<Object>", "snippet": "    public Response<Object> runtimeLimitSpeed(@PathVariable(\"jobId\")long jobId,                                              @PathVariable(\"taskId\")long taskId,                                              @PathVariable(\"byteSpeedLimit\")long byteSpeedLimit){        JobContainer jobContainer = executorService.getJobContainer(taskId);        if(null != jobContainer){            jobContainer.getRuntime().limit(byteSpeedLimit);        }        return new Response<>().successResponse(\"success\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/controller/ExecutorController.java", "stars": "23", "class": {"name": "ExecutorController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isDebugEnabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isDebugEnabled() {    return log.isDebugEnabled();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/slf4j/Slf4jLoggerImpl.java", "stars": "15", "class": {"name": "Slf4jLoggerImpl", "extends": null, "implements": ["Log"], "modifiers": []}}, {"method_name": "isTraceEnabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isTraceEnabled() {    return log.isTraceEnabled();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/slf4j/Slf4jLoggerImpl.java", "stars": "15", "class": {"name": "Slf4jLoggerImpl", "extends": null, "implements": ["Log"], "modifiers": []}}, {"method_name": "error", "params": ["String", "Throwable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void error(String s, Throwable e) {    log.error(s, e);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/slf4j/Slf4jLoggerImpl.java", "stars": "15", "class": {"name": "Slf4jLoggerImpl", "extends": null, "implements": ["Log"], "modifiers": []}}, {"method_name": "error", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void error(String s) {    log.error(s);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/slf4j/Slf4jLoggerImpl.java", "stars": "15", "class": {"name": "Slf4jLoggerImpl", "extends": null, "implements": ["Log"], "modifiers": []}}, {"method_name": "debug", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void debug(String s) {    log.debug(s);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/slf4j/Slf4jLoggerImpl.java", "stars": "15", "class": {"name": "Slf4jLoggerImpl", "extends": null, "implements": ["Log"], "modifiers": []}}, {"method_name": "trace", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void trace(String s) {    log.trace(s);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/slf4j/Slf4jLoggerImpl.java", "stars": "15", "class": {"name": "Slf4jLoggerImpl", "extends": null, "implements": ["Log"], "modifiers": []}}, {"method_name": "warn", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void warn(String s) {    log.warn(s);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/slf4j/Slf4jLoggerImpl.java", "stars": "15", "class": {"name": "Slf4jLoggerImpl", "extends": null, "implements": ["Log"], "modifiers": []}}, {"method_name": "showAccount", "params": [], "throws": null, "modifiers": [], "return_type": "Account", "snippet": "    Account showAccount() {        System.out.println(\"\u6253\u5f00\u4e2d\u56fd\u519c\u4e1a\u94f6\u884c\u8d26\u53f7\");        //\u8c03\u7528\u5b9e\u73b0\u5316\u89d2\u8272\u4e2d\u7684\u4e1a\u52a1\u65b9\u6cd5\uff0c\u8fd9\u6837\u5f53\u5177\u4f53\u5b9e\u73b0\u5316\u89d2\u8272\u4e1a\u52a1\u6539\u53d8\u65f6\uff0c\u6269\u5c55\u62bd\u8c61\u5316\u89d2\u8272\u4e0d\u7528\u505a\u4efb\u4f55\u6539\u53d8\uff0c\u8fd9\u6837\u4e5f\u7b26\u5408\u8fea\u7c73\u7279\u6cd5\u5219        account.openAccount();        return account;    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/bridge/ABCBank.java", "stars": "2", "class": {"name": "ABCBank", "extends": "Bank", "implements": null, "modifiers": ["public"]}}, {"method_name": "setup", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setup() {        testCommand = new RemoveCmd(TITLE_ARGUMENT + \" \" + TITLE_VALUE_ARGUMENT);        testLibrary = new LibraryData();        List<BookEntry> bookData = new ArrayList<>();        bookData.add(new BookEntry(\"TitleA\", new String[] { \"AuthorA\" }, 3.2f, \"ISBNA\", 500));        bookData.add(new BookEntry(TITLE_VALUE_ARGUMENT, new String[] { AUTHOR_VALUE_ARGUMENT }, 4.3f, \"ISBNB\", 400));        bookData.add(new BookEntry(\"TitleC\", new String[] { \"AuthorC\" }, 1.3f, \"ISBNC\", 300));        FieldTestUtils.setPrivateField(testLibrary, testLibrary.getClass(), \"books\", bookData);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/RemoveCmdBasicTest.java", "stars": "6", "class": {"name": "RemoveCmdBasicTest", "extends": "RemoveCmdTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "testParseArgumentsIllegalArgument", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testParseArgumentsIllegalArgument() {        String blankArg = \"\";        CommandTestUtils.checkArgumentInput(testCommand, false, blankArg);        CommandTestUtils.checkArgumentInput(testCommand, false, TITLE_ARGUMENT + \" \" + blankArg);        CommandTestUtils.checkArgumentInput(testCommand, false, AUTHOR_ARGUMENT + \" \" + blankArg);        CommandTestUtils.checkArgumentInput(testCommand, false, \"nonsense\");    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/RemoveCmdBasicTest.java", "stars": "6", "class": {"name": "RemoveCmdBasicTest", "extends": "RemoveCmdTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "testParseArgumentsLegalArgument", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testParseArgumentsLegalArgument() {        String[] valueArgs = new String[] { TITLE_VALUE_ARGUMENT, AUTHOR_VALUE_ARGUMENT, GENERIC_VALUE_ARGUMENT };        String[] typeArgs = new String[] { TITLE_ARGUMENT, AUTHOR_ARGUMENT };        for (String typeArg : typeArgs) {            for (String valueArg : valueArgs) {                CommandTestUtils.checkArgumentInput(testCommand, true, typeArg + \" \" + valueArg);            }        }    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/RemoveCmdBasicTest.java", "stars": "6", "class": {"name": "RemoveCmdBasicTest", "extends": "RemoveCmdTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "testExecuteRemoveTitle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testExecuteRemoveTitle() {        checkRemoveTitleExecute(testCommand, testLibrary, TITLE_VALUE_ARGUMENT);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/RemoveCmdBasicTest.java", "stars": "6", "class": {"name": "RemoveCmdBasicTest", "extends": "RemoveCmdTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "testExecuteRemoveTitleConsoleOut", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testExecuteRemoveTitleConsoleOut() {        String expectedConsoleOutput = String.format(TITLE_REMOVE_MESSAGE, TITLE_VALUE_ARGUMENT);        CommandTestUtils.checkExecuteConsoleOutput(testCommand, testLibrary, expectedConsoleOutput);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/RemoveCmdBasicTest.java", "stars": "6", "class": {"name": "RemoveCmdBasicTest", "extends": "RemoveCmdTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "testExecuteRemoveAuthor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testExecuteRemoveAuthor() {        testCommand = new RemoveCmd(AUTHOR_ARGUMENT + \" \" + AUTHOR_VALUE_ARGUMENT);        checkRemoveAuthorExecute(testCommand, testLibrary, AUTHOR_VALUE_ARGUMENT);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/RemoveCmdBasicTest.java", "stars": "6", "class": {"name": "RemoveCmdBasicTest", "extends": "RemoveCmdTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "testExecuteRemoveAuthorConsoleOut", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testExecuteRemoveAuthorConsoleOut() {        testCommand = new RemoveCmd(AUTHOR_ARGUMENT + \" \" + AUTHOR_VALUE_ARGUMENT);        int removedAuthors = 1;        String expectedConsoleOutput = String.format(AUTHOR_REMOVE_MESSAGE, removedAuthors, AUTHOR_VALUE_ARGUMENT);        CommandTestUtils.checkExecuteConsoleOutput(testCommand, testLibrary, expectedConsoleOutput);    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/RemoveCmdBasicTest.java", "stars": "6", "class": {"name": "RemoveCmdBasicTest", "extends": "RemoveCmdTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "testExecuteNotFound", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testExecuteNotFound() {        checkEntryNotFound();    }", "url": "https://raw.githubusercontent.com/LJacksonPan/Y1-OOP-CW3/master/tests/RemoveCmdBasicTest.java", "stars": "6", "class": {"name": "RemoveCmdBasicTest", "extends": "RemoveCmdTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "put", "params": ["String", "Bitmap"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean put(String key, Bitmap value) {\t\tif (super.put(key, value)) {\t\t\tlruCache.put(key, value);\t\t\treturn true;\t\t} else {\t\t\treturn false;\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/impl/LRULimitedMemoryCache.java", "stars": "74", "class": {"name": "LRULimitedMemoryCache", "extends": "LimitedMemoryCache", "implements": null, "modifiers": ["public"]}}, {"method_name": "get", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Bitmap", "snippet": "\tpublic Bitmap get(String key) {\t\tlruCache.get(key); // call \"get\" for LRU logic\t\treturn super.get(key);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/impl/LRULimitedMemoryCache.java", "stars": "74", "class": {"name": "LRULimitedMemoryCache", "extends": "LimitedMemoryCache", "implements": null, "modifiers": ["public"]}}, {"method_name": "remove", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void remove(String key) {\t\tlruCache.remove(key);\t\tsuper.remove(key);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/impl/LRULimitedMemoryCache.java", "stars": "74", "class": {"name": "LRULimitedMemoryCache", "extends": "LimitedMemoryCache", "implements": null, "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clear() {\t\tlruCache.clear();\t\tsuper.clear();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/impl/LRULimitedMemoryCache.java", "stars": "74", "class": {"name": "LRULimitedMemoryCache", "extends": "LimitedMemoryCache", "implements": null, "modifiers": ["public"]}}, {"method_name": "getSize", "params": ["Bitmap"], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "\tprotected int getSize(Bitmap value) {\t\treturn value.getRowBytes() * value.getHeight();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/impl/LRULimitedMemoryCache.java", "stars": "74", "class": {"name": "LRULimitedMemoryCache", "extends": "LimitedMemoryCache", "implements": null, "modifiers": ["public"]}}, {"method_name": "removeNext", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Bitmap", "snippet": "\tprotected Bitmap removeNext() {\t\tBitmap mostLongUsedValue = null;\t\tsynchronized (lruCache) {\t\t\tIterator<Entry<String, Bitmap>> it = lruCache.entrySet().iterator();\t\t\tif (it.hasNext()) {\t\t\t\tEntry<String, Bitmap> entry = it.next();\t\t\t\tmostLongUsedValue = entry.getValue();\t\t\t\tit.remove();\t\t\t}\t\t}\t\treturn mostLongUsedValue;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/impl/LRULimitedMemoryCache.java", "stars": "74", "class": {"name": "LRULimitedMemoryCache", "extends": "LimitedMemoryCache", "implements": null, "modifiers": ["public"]}}, {"method_name": "createReference", "params": ["Bitmap"], "throws": null, "modifiers": ["protected"], "return_type": "Reference<Bitmap>", "snippet": "\tprotected Reference<Bitmap> createReference(Bitmap value) {\t\treturn new WeakReference<Bitmap>(value);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/impl/LRULimitedMemoryCache.java", "stars": "74", "class": {"name": "LRULimitedMemoryCache", "extends": "LimitedMemoryCache", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String args[]) throws Exception {        try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/parent_childs/mybatis-config.xml\")) {            sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);        }     /* BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),                \"org/apache/ibatis/submitted/complex_column/CreateDB.sql\");      try (SqlSession sqlSession = sqlSessionFactory.openSession()) {        PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class);        Person person = personMapper.getWithoutComplex(2L);        System.out.println(person.getFirstName());        System.out.println(person.getLastName());        Person parent = person.getParent();        System.out.println(parent.getFirstName());        System.out.println(parent.getLastName());      }*/    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/parent_childs/TestWljs.java", "stars": "15", "class": {"name": "TestWljs", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "User<String>", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNonNullParameter(PreparedStatement ps, int i, User<String> parameter, JdbcType jdbcType) throws SQLException {  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/generictypes/UserTypeHandler.java", "stars": "15", "class": {"name": "UserTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "User<String>", "snippet": "  public User<String> getNullableResult(ResultSet rs, String columnName) throws SQLException {    return new User<>();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/generictypes/UserTypeHandler.java", "stars": "15", "class": {"name": "UserTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "User<String>", "snippet": "  public User<String> getNullableResult(ResultSet rs, int columnIndex) throws SQLException {    return new User<>();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/generictypes/UserTypeHandler.java", "stars": "15", "class": {"name": "UserTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "User<String>", "snippet": "  public User<String> getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {    return new User<>();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/generictypes/UserTypeHandler.java", "stars": "15", "class": {"name": "UserTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "newInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "ContractFragment", "snippet": "    public static ContractFragment newInstance() {        return new ContractFragment();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/contract/ContractFragment.java", "stars": "1", "class": {"name": "ContractFragment", "extends": "MyFragment", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getLayoutId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getLayoutId() {        return R.layout.fragment_contract;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/contract/ContractFragment.java", "stars": "1", "class": {"name": "ContractFragment", "extends": "MyFragment", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "initView", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initView() {        mContractKindPopWindow=new ContractKindPopWindow(MyApplication.getApplication());    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/contract/ContractFragment.java", "stars": "1", "class": {"name": "ContractFragment", "extends": "MyFragment", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "initData", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initData() {        mTextKind.setText(\"BTC/USDT\u6c38\u7eed\");        setClick();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/contract/ContractFragment.java", "stars": "1", "class": {"name": "ContractFragment", "extends": "MyFragment", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setClick", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setClick() {        RxView.clicks(mLLKind).throttleFirst(1, TimeUnit.SECONDS).subscribe(new Observer<Object>() {            @Override            public void onSubscribe(Disposable d) {            }            @Override            public void onNext(Object o) {                mContractKindPopWindow.showContractKindPopWindow(mLLKind,0,0);            }            @Override            public void onError(Throwable e) {}            @Override            public void onComplete() {}        });    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/contract/ContractFragment.java", "stars": "1", "class": {"name": "ContractFragment", "extends": "MyFragment", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getBaseService", "params": [], "throws": null, "modifiers": ["public"], "return_type": "IBaseService<UserInfo>", "snippet": "    public IBaseService<UserInfo> getBaseService() {        return userInfoService;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/user/controller/UserInfoController.java", "stars": "23", "class": {"name": "UserInfoController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init(){        security.registerUserExternalDataAuthGetter(UserInfo.class, userName ->{            UserInfo userInfo = userInfoService.selectByUsername(userName);            if(userInfo.getUserType() == UserRole.ADMIN.getValue()){                //No limit                return null;            };            return new ArrayList<>();        });    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/user/controller/UserInfoController.java", "stars": "23", "class": {"name": "UserInfoController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "add", "params": ["UserInfo", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "Response<UserInfo>", "snippet": "    public Response<UserInfo> add(@Valid @RequestBody UserInfo userInfo, HttpServletRequest request) {        UserInfo userExisted = userInfoService.selectByUsername(userInfo.getUserName());        if(null != userExisted){            return new Response<UserInfo>().errorResponse(CodeConstant.PARAMETER_ERROR, null, \"\u8be5\u7528\u6237\u5df2\u7ecf\u5b58\u5728\");        }        return super.add(userInfo, request);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/user/controller/UserInfoController.java", "stars": "23", "class": {"name": "UserInfoController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "delete", "params": ["Long", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "Response<UserInfo>", "snippet": "    public Response<UserInfo> delete(@PathVariable Long id, HttpServletRequest request) {        String userName = security.getUserName(request);        UserInfo userInfo = userInfoService.get(id);        if(null != userInfo && userInfo.getUserName().equals(userName)){            return new Response<UserInfo>().errorResponse(CodeConstant.PARAMETER_ERROR, null,                    super.informationSwitch(\"exchange.user.info.self.not\"));        }        if(userInfoService.hasBoundExecUser(userInfo.getUserName())){            return new Response<UserInfo>().errorResponse(CodeConstant.PARAMETER_ERROR, null,                    super.informationSwitch(\"exchange.user.info.bind.execUser\"));        }        if(userInfoService.hasBoundExecNode(userInfo.getUserName())){            return new Response<UserInfo>().errorResponse(CodeConstant.PARAMETER_ERROR, null,                    super.informationSwitch(\"exchange.user.info.bind.node\"));        }        return super.delete(id, request);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/user/controller/UserInfoController.java", "stars": "23", "class": {"name": "UserInfoController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "delBatch", "params": ["HttpServletRequest", "Map<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "Response<UserInfo>", "snippet": "    public Response<UserInfo> delBatch(HttpServletRequest request, @RequestBody Map<String, String> map) {        return new Response<UserInfo>()                .errorResponse(CodeConstant.SYS_ERROR, null,                        super.informationSwitch(\"exchange.api.unsupport\"));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/user/controller/UserInfoController.java", "stars": "23", "class": {"name": "UserInfoController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "update", "params": ["UserInfo", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "Response<UserInfo>", "snippet": "    public Response<UserInfo> update(@Valid @RequestBody UserInfo updatedUserInfo, HttpServletRequest request) {        String userName = security.getUserName(request);        if(null != updatedUserInfo.getId() && updatedUserInfo.getId() > 0) {            UserInfo storedUser = userInfoService.get(updatedUserInfo.getId());            if (storedUser.getUserName().equals(userName)) {                return new Response<UserInfo>().errorResponse(CodeConstant.PARAMETER_ERROR, null,                        super.informationSwitch(\"exchange.user.info.self.not\"));            }        }        UserInfo userInfo = userInfoService.get(updatedUserInfo.getId());        if(null == userInfo){            return new Response<UserInfo>().errorResponse(CodeConstant.SYS_ERROR, null,                    super.informationSwitch(\"exchange.user.info.exists.not\"));        }        if(!userInfo.getUserName().equals(updatedUserInfo.getUserName())){            //Means that the username has been changed, so we should re-encrypt the password, set password to null            userInfoService.resetPassword(userInfo.getId(), \"\");        }        return super.update(updatedUserInfo, request);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/user/controller/UserInfoController.java", "stars": "23", "class": {"name": "UserInfoController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "resetPassword", "params": ["Integer", "UserInfo"], "throws": null, "modifiers": ["public"], "return_type": "Response<Object>", "snippet": "    public Response<Object> resetPassword(@PathVariable(\"appUserId\")Integer userId, @RequestBody UserInfo  userInfo){        boolean result = true;        if(StringUtils.isNotBlank(userInfo.getPassword())) {            result = userInfoService.resetPassword(userId, userInfo.getPassword());        }        return result ? new Response<>().successResponse(\"ok\") :                new Response<>().errorResponse(CodeConstant.PARAMETER_ERROR, null,                        super.informationSwitch(\"exchange.user_info.reset.password.error\"));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/user/controller/UserInfoController.java", "stars": "23", "class": {"name": "UserInfoController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "bindExecUserPager", "params": ["Integer", "PageQuery"], "throws": null, "modifiers": ["public"], "return_type": "Response<Object>", "snippet": "    public Response<Object> bindExecUserPager(@PathVariable(\"appUserId\")Integer appUserId, PageQuery query){        int pageSize = query.getPageSize();        if(0 == pageSize){            query.setPageSize(10);        }        return new Response<>().successResponse(userInfoService.findExecUserPage(appUserId, query));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/user/controller/UserInfoController.java", "stars": "23", "class": {"name": "UserInfoController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "bindExecUser", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Response<Object>", "snippet": "    public Response<Object> bindExecUser(@PathVariable(\"appUserId\")Integer appUserId,                                         @PathVariable(\"execUserId\")Integer execUserId){        UserInfo userInfo = userInfoService.get(appUserId);        if(null == userInfo){            return new Response<>().errorResponse(CodeConstant.SYS_ERROR, null ,                    this.informationSwitch(\"exchange.user.info.exists.not\"));        }        ExecUser execUser = execUserService.selectExecUser(execUserId);        if(null == execUser){            return new Response<>().errorResponse(CodeConstant.SYS_ERROR, null,                    this.informationSwitch(\"exchange.exec_user.exists.not\"));        }        userInfoService.bindExecUser(userInfo.getUserName(), execUser.getExecUser());        return new Response<>().successResponse(\"success\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/user/controller/UserInfoController.java", "stars": "23", "class": {"name": "UserInfoController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "unBindExecUser", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Response<Object>", "snippet": "    public Response<Object> unBindExecUser(@PathVariable(\"appUserId\")Integer appUserId,                                           @PathVariable(\"execUserId\")Integer execUserId){        UserInfo userInfo = userInfoService.get(appUserId);        if(null == userInfo){            return new Response<>().errorResponse(CodeConstant.SYS_ERROR, null ,                    this.informationSwitch(\"exchange.user.info.exists.not\"));        }        ExecUser execUser = execUserService.selectExecUser(execUserId);        if(null == execUser){            return new Response<>().errorResponse(CodeConstant.SYS_ERROR, null,                    this.informationSwitch(\"exchange.exec_user.exists.not\"));        }        userInfoService.unbindExecNode(userInfo.getUserName(), execUser.getExecUser());        return new Response<>().successResponse(\"success\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/user/controller/UserInfoController.java", "stars": "23", "class": {"name": "UserInfoController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "bindExecNodePager", "params": ["Integer", "PageQuery"], "throws": null, "modifiers": ["public"], "return_type": "Response<Object>", "snippet": "    public Response<Object> bindExecNodePager(@PathVariable(\"appUserId\")Integer appUserId, PageQuery query){        int pageSize = query.getPageSize();        if(0 == pageSize){            query.setPageSize(10);        }        return new Response<>().successResponse(userInfoService.findExecNodePage(appUserId, query));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/user/controller/UserInfoController.java", "stars": "23", "class": {"name": "UserInfoController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "bindExecNode", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Response<Object>", "snippet": "    public Response<Object> bindExecNode(@PathVariable(\"appUserId\")Integer appUserId,                                         @PathVariable(\"nodeId\")Integer nodeId){        UserInfo userInfo = userInfoService.get(appUserId);        if(null == userInfo){            return new Response<>().errorResponse(CodeConstant.SYS_ERROR, null ,                    this.informationSwitch(\"exchange.user.info.exists.not\"));        }        ExecutorNode node = execNodeInfoService.selectExecNode(nodeId);        if(null == node){            return new Response<>().errorResponse(CodeConstant.SYS_ERROR, null,                    this.informationSwitch(\"exchange.exec_node.exist.not\"));        }        userInfoService.bindExecNode(userInfo.getUserName(), node.getId());        return new Response<>().successResponse(\"success\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/user/controller/UserInfoController.java", "stars": "23", "class": {"name": "UserInfoController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "unBindExecNode", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Response<Object>", "snippet": "    public Response<Object> unBindExecNode(@PathVariable(\"appUserId\")Integer appUserId,                                           @PathVariable(\"nodeId\")Integer nodeId){        UserInfo userInfo = userInfoService.get(appUserId);        if(null == userInfo){            return new Response<>().errorResponse(CodeConstant.SYS_ERROR, null ,                    this.informationSwitch(\"exchange.user.info.exists.not\"));        }        ExecutorNode node = execNodeInfoService.selectExecNode(nodeId);        if(null == node){            return new Response<>().errorResponse(CodeConstant.SYS_ERROR, null,                    this.informationSwitch(\"exchange.exec_node.exist.not\"));        }        userInfoService.unbindExecNode(userInfo.getUserName(), node.getId());        return new Response<>().successResponse(\"success\");    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/user/controller/UserInfoController.java", "stars": "23", "class": {"name": "UserInfoController", "extends": "AbstractGenericController", "implements": null, "modifiers": ["public"]}}, {"method_name": "checkRecordLimit", "params": ["Communication"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void checkRecordLimit(Communication communication) {        if (recordLimit == null) {            return;        }        long errorNumber = CommunicationTool.getTotalErrorRecords(communication);        if (recordLimit < errorNumber) {            LOG.debug(                    String.format(\"Error-limit set to %d, error count check.\",                            recordLimit));            throw DataXException.asDataXException(                    FrameworkErrorCode.PLUGIN_DIRTY_DATA_LIMIT_EXCEED,                    String.format(\"\u810f\u6570\u636e\u6761\u6570\u68c0\u67e5\u4e0d\u901a\u8fc7\uff0c\u9650\u5236\u662f[%d]\u6761\uff0c\u4f46\u5b9e\u9645\u4e0a\u6355\u83b7\u4e86[%d]\u6761.\",                            recordLimit, errorNumber));        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/util/ErrorRecordChecker.java", "stars": "23", "class": {"name": "ErrorRecordChecker", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "checkPercentageLimit", "params": ["Communication"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void checkPercentageLimit(Communication communication) {        if (percentageLimit == null) {            return;        }        LOG.debug(String.format(                \"Error-limit set to %f, error percent check.\", percentageLimit));        long total = CommunicationTool.getTotalReadRecords(communication);        long error = CommunicationTool.getTotalErrorRecords(communication);        if (total > 0 && ((double) error / (double) total) > percentageLimit) {            throw DataXException.asDataXException(                    FrameworkErrorCode.PLUGIN_DIRTY_DATA_LIMIT_EXCEED,                    String.format(\"\u810f\u6570\u636e\u767e\u5206\u6bd4\u68c0\u67e5\u4e0d\u901a\u8fc7\uff0c\u9650\u5236\u662f[%f]\uff0c\u4f46\u5b9e\u9645\u4e0a\u6355\u83b7\u5230[%f].\",                            percentageLimit, ((double) error / (double) total)));        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/util/ErrorRecordChecker.java", "stars": "23", "class": {"name": "ErrorRecordChecker", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getBoundSql", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "BoundSql", "snippet": "  public BoundSql getBoundSql(Object parameterObject) {    Map<String, Object> bindings = createBindings(parameterObject, configuration);    VelocityContext context = new VelocityContext(bindings);    StringWriter sw = new StringWriter();    script.merge(context, sw);    VelocitySqlSourceBuilder sqlSourceParser = new VelocitySqlSourceBuilder(configuration);    Class<?> parameterType = parameterObject == null ? Object.class : parameterObject.getClass();    SqlSource sqlSource = sqlSourceParser.parse(sw.toString(), parameterType);    BoundSql boundSql = sqlSource.getBoundSql(parameterObject);    for (Map.Entry<String, Object> entry : bindings.entrySet()) {      boundSql.setAdditionalParameter(entry.getKey(), entry.getValue());    }    return boundSql;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/language/VelocitySqlSource.java", "stars": "15", "class": {"name": "VelocitySqlSource", "extends": null, "implements": ["SqlSource"], "modifiers": ["public"]}}, {"method_name": "createBindings", "params": ["Object", "Configuration"], "throws": null, "modifiers": ["public", "static"], "return_type": "Map<String,Object>", "snippet": "  public static Map<String, Object> createBindings(Object parameterObject, Configuration configuration) {    Map<String, Object> bindings = new HashMap<>();    bindings.put(PARAMETER_OBJECT_KEY, parameterObject);    bindings.put(DATABASE_ID_KEY, configuration.getDatabaseId());    bindings.put(\"it\", new IteratorParameter(bindings));    return bindings;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/language/VelocitySqlSource.java", "stars": "15", "class": {"name": "VelocitySqlSource", "extends": null, "implements": ["SqlSource"], "modifiers": ["public"]}}, {"method_name": "getSql", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getSql(){    return \"\";  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/language/VelocitySqlSource.java", "stars": "15", "class": {"name": "VelocitySqlSource", "extends": null, "implements": ["SqlSource"], "modifiers": ["public"]}}, {"method_name": "next", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String next(Object prop) {      StringBuilder sb = new StringBuilder();      String name = sb.append(PREFIX).append(\"_ITEM\").append(\"_\").append(count++).toString();      bindings.put(name, prop);      return name;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/language/VelocitySqlSource.java", "stars": "15", "class": {"name": "IteratorParameter", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "first", "params": ["Runnable"], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void first(Runnable printFirst) throws InterruptedException {        printFirst.run();        firstDone = true;    }", "url": "https://raw.githubusercontent.com/nishantc1527/LeetCode/master/src/PrintInOrder.java", "stars": "1", "class": {"name": "PrintInOrder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "second", "params": ["Runnable"], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void second(Runnable printSecond) throws InterruptedException {        while(!firstDone);        printSecond.run();        secondDone = true;    }", "url": "https://raw.githubusercontent.com/nishantc1527/LeetCode/master/src/PrintInOrder.java", "stars": "1", "class": {"name": "PrintInOrder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "third", "params": ["Runnable"], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void third(Runnable printThird) throws InterruptedException {        while(!secondDone);        printThird.run();    }", "url": "https://raw.githubusercontent.com/nishantc1527/LeetCode/master/src/PrintInOrder.java", "stars": "1", "class": {"name": "PrintInOrder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRecordReceiver", "params": ["RecordReceiver"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRecordReceiver(RecordReceiver receiver) {        this.recordReceiver = receiver;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/runner/WriterRunner.java", "stars": "23", "class": {"name": "WriterRunner", "extends": "AbstractRunner", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "setChannelInput", "params": ["ChannelInput"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setChannelInput(ChannelInput channelInput){        this.channelInput = channelInput;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/runner/WriterRunner.java", "stars": "23", "class": {"name": "WriterRunner", "extends": "AbstractRunner", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "setProcessor", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setProcessor(String processor){        this.processor = processor;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/runner/WriterRunner.java", "stars": "23", "class": {"name": "WriterRunner", "extends": "AbstractRunner", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run() {        Writer.Task taskWriter = (Writer.Task) this.getPlugin();        //\u7edf\u8ba1waitReadTime\uff0c\u5e76\u4e14\u5728finally end        PerfRecord channelWaitRead = new PerfRecord(getTaskGroupId(), getTaskId(), PerfRecord.PHASE.WAIT_READ_TIME);        try {            channelWaitRead.start();            LOG.debug(\"task writer starts to do init ...\");            PerfRecord initPerfRecord = new PerfRecord(getTaskGroupId(), getTaskId(), PerfRecord.PHASE.WRITE_TASK_INIT);            initPerfRecord.start();            taskWriter.init();            initPerfRecord.end();            LOG.debug(\"task writer starts to do prepare ...\");            PerfRecord preparePerfRecord = new PerfRecord(getTaskGroupId(), getTaskId(), PerfRecord.PHASE.WRITE_TASK_PREPARE);            preparePerfRecord.start();            taskWriter.prepare();            preparePerfRecord.end();            LOG.debug(\"task writer starts to write ...\");            PerfRecord dataPerfRecord = new PerfRecord(getTaskGroupId(), getTaskId(), PerfRecord.PHASE.WRITE_TASK_DATA);            dataPerfRecord.start();            if(null != recordReceiver){                if(StringUtils.isNotBlank(processor)){                    ClassLoader currentClassLoader = Thread.currentThread().getContextClassLoader();                    Processor<?> processIns = ClassUtil.instantiate(processor, Processor.class,                            currentClassLoader);                    startToWrite(taskWriter, recordReceiver, processIns, currentClassLoader);                }else {                    taskWriter.startWrite(recordReceiver);                }                dataPerfRecord.addCount(CommunicationTool.getTotalReadRecords(super.getRunnerCommunication()));            }else if(null != channelInput){                taskWriter.startWrite(channelInput);            }            dataPerfRecord.addSize(CommunicationTool.getTotalReadBytes(super.getRunnerCommunication()));            dataPerfRecord.end();            LOG.debug(\"task writer starts to do post ...\");            PerfRecord postPerfRecord = new PerfRecord(getTaskGroupId(), getTaskId(), PerfRecord.PHASE.WRITE_TASK_POST);            postPerfRecord.start();            taskWriter.post();            postPerfRecord.end();            super.markSuccess();        } catch(Throwable e) {            if(shutdown){                //have been shutdown by task group container                return;            }            Throwable cause = e;            while(null != cause){                if(cause instanceof InterruptedException || cause instanceof InterruptedIOException){                    this.getRunnerCommunication().setState(State.KILLED);                    return;                }                cause = cause.getCause();            }            LOG.error(\"Writer Runner Received Exceptions:\", e);            super.markFail(e);        } finally {            LOG.debug(\"task writer starts to do destroy ...\");            PerfRecord desPerfRecord = new PerfRecord(getTaskGroupId(), getTaskId(), PerfRecord.PHASE.WRITE_TASK_DESTROY);            desPerfRecord.start();            super.destroy();            desPerfRecord.end();            channelWaitRead.end(super.getRunnerCommunication().getLongCounter(CommunicationTool.WAIT_READER_TIME));        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/runner/WriterRunner.java", "stars": "23", "class": {"name": "WriterRunner", "extends": "AbstractRunner", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "supportFailOver", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean supportFailOver() {        Writer.Task taskWriter = (Writer.Task) this.getPlugin();        return taskWriter.supportFailOver();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/runner/WriterRunner.java", "stars": "23", "class": {"name": "WriterRunner", "extends": "AbstractRunner", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "shutdown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void shutdown() {        shutdown = true;        if(null != recordReceiver){            recordReceiver.shutdown();        }        if(null != channelInput){            channelInput.shutdown();        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/runner/WriterRunner.java", "stars": "23", "class": {"name": "WriterRunner", "extends": "AbstractRunner", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "startToWrite", "params": ["Writer", "RecordReceiver", "Processor<?>", "ClassLoader"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void startToWrite(Writer.Task taskWriter, RecordReceiver recordReceiver, Processor<?> processor                                , ClassLoader runtimeClassLoader){        Class<?> clazz = Object.class;        Type[] types = processor.getClass().getGenericInterfaces();        for(Type type : types){            if(type instanceof ParameterizedType){                ParameterizedType parameterizedType = (ParameterizedType)type;                if(parameterizedType.getRawType().getTypeName().equals(                        Processor.class.getTypeName()                )){                    clazz = (Class)parameterizedType.getActualTypeArguments()[0];                    break;                }            }        }        ThreadLocalSecurityManager rootSecurityManager = null;        if(System.getSecurityManager() instanceof ThreadLocalSecurityManager){            rootSecurityManager = (ThreadLocalSecurityManager)System.getSecurityManager();        }else{            rootSecurityManager = new ThreadLocalSecurityManager();            System.setSecurityManager(rootSecurityManager);        }        ThreadLocalSecurityManager finalRootSecurityManager = rootSecurityManager;        ProcessorSecurityManager processorSecurityManager = new ProcessorSecurityManager(System.getProperty(\"user.dir\"));        if(clazz.equals(Record.class)){            taskWriter.startWrite(new RecordReceiver() {                @Override                public Record getFromReader() {                    return doInSecurity(finalRootSecurityManager, processorSecurityManager, ()->                    {                        try {                            Record record ;                            if(!Thread.currentThread().getContextClassLoader().equals(runtimeClassLoader)){                                Thread.currentThread().setContextClassLoader(runtimeClassLoader);                            }                            while(null != (record = recordReceiver.getFromReader())){                                Record result = (Record) processor.process(transformColumns(record.getColumns()));                                if (null != result){                                    return result;                                }                            }                            return null;                        } catch (Exception e) {                            throw DataXException.asDataXException(FrameworkErrorCode.PROCESSOR_RUN_ERROR, e);                        }                    });                }                @Override                public void shutdown() {                    recordReceiver.shutdown();                }            });        }else{            taskWriter.startWrite(new BasicDataReceiver<Object>() {                @Override                public Object getFromReader() {                    return doInSecurity(finalRootSecurityManager, processorSecurityManager, ()->                    {                        try {                            Record record;                            while(null != (record = recordReceiver.getFromReader())){                                Object result = processor.process(transformColumns(record.getColumns()));                                if (null != result){                                    return result;                                }                            }                            return null;                        } catch (Exception e) {                            throw DataXException.asDataXException(FrameworkErrorCode.PROCESSOR_RUN_ERROR, e);                        }                    });                }                @Override                public void shutdown() {                    recordReceiver.shutdown();                }            }, clazz);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/runner/WriterRunner.java", "stars": "23", "class": {"name": "WriterRunner", "extends": "AbstractRunner", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "doInSecurity", "params": ["ThreadLocalSecurityManager", "ProcessorSecurityManager", "Supplier<T>"], "throws": null, "modifiers": ["private"], "return_type": "T", "snippet": "    private <T>T doInSecurity(ThreadLocalSecurityManager rootSecurityManager,                              ProcessorSecurityManager processorSecurityManager, Supplier<T> supplier){        rootSecurityManager.setThreadSecurityManager(this, processorSecurityManager);        try {            return supplier.get();        }finally {            rootSecurityManager.removeThreadSecurityManager(this);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/runner/WriterRunner.java", "stars": "23", "class": {"name": "WriterRunner", "extends": "AbstractRunner", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "transformColumns", "params": ["List<Column>"], "throws": null, "modifiers": ["private"], "return_type": "List<Object>", "snippet": "    private List<Object> transformColumns(List<Column> columns){        List<Object> columnData = new ArrayList<>();        columns.forEach(column -> {            if(column instanceof StringColumn){                columnData.add(column.asString());            }else if(column instanceof BytesColumn){                columnData.add(column.asBytes());            }else if(column instanceof BoolColumn){                columnData.add(column.asBoolean());            }else if(column instanceof DateColumn){                columnData.add(column.asDate());            }else if(column instanceof DoubleColumn){                columnData.add(column.asDouble());            }else if(column instanceof LongColumn){                columnData.add(column.asLong());            }else{                columnData.add(column.asString());            }        });        return columnData;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/runner/WriterRunner.java", "stars": "23", "class": {"name": "WriterRunner", "extends": "AbstractRunner", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        TVButterApplication.getAppContext()                .getComponent()                .inject(this);        mStreamInfo = ((TVVideoPlayerFragment.Callback) getActivity()).getInfo();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "TVVideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        return inflater.inflate(R.layout.fragment_videoplayer, container, false);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "TVVideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onViewCreated", "params": ["View", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {        super.onViewCreated(view, savedInstanceState);        ButterKnife.bind(this, view);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "TVVideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onActivityCreated", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onActivityCreated(@Nullable Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);        setRetainInstance(true);        mVideoSurface.setVisibility(View.VISIBLE);        mSubtitleText.setVisibility(View.INVISIBLE);        mSubtitleText.setText(\"\");        mSubtitleText.setTextColor(PrefUtils.get(getActivity(), Prefs.SUBTITLE_COLOR, Color.WHITE));        mSubtitleText.setStrokeColor(PrefUtils.get(getActivity(), Prefs.SUBTITLE_STROKE_COLOR, Color.BLACK));        mSubtitleText.setStrokeWidth(TypedValue.COMPLEX_UNIT_DIP, PrefUtils.get(getActivity(), Prefs.SUBTITLE_STROKE_WIDTH, 2));    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "TVVideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onResume() {        super.onResume();        if (!EventBus.getDefault().isRegistered(this)) {            EventBus.getDefault().register(this);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "TVVideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPause() {        super.onPause();        if (!isMediaSessionActive()) {            EventBus.getDefault().unregister(this);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "TVVideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDestroy() {        super.onDestroy();        if (!isMediaSessionActive() && mMediaSession != null) {            mMediaSession.release();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "TVVideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "getVideoSurface", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "SurfaceView", "snippet": "    protected SurfaceView getVideoSurface() {        return mVideoSurface;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "TVVideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onErrorEncountered", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onErrorEncountered() {        /* Encountered Error, exit player with a message */        AlertDialog dialog = new AlertDialog.Builder(getActivity())                .setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int id) {                        getActivity().finish();                    }                })                .setTitle(R.string.encountered_error_title)                .setMessage(R.string.encountered_error)                .create();        dialog.show();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "TVVideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "showPlayerInfo", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void showPlayerInfo(String text) { }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "TVVideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "showOverlay", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void showOverlay() { }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "TVVideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "loadMedia", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void loadMedia() {        super.loadMedia();        activateMediaSession();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "TVVideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "updatePlayPauseState", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void updatePlayPauseState() {        EventBus.getDefault().post(new ToggleSubtitleEvent(mIsSubtitleEnabled));        EventBus.getDefault().post(new UpdatePlaybackStateEvent(isPlaying()));        if (mMediaSession != null) {            PlaybackState.Builder builder = new PlaybackState.Builder();            builder.setActions(isPlaying()                ? PlaybackState.ACTION_PLAY_PAUSE | PlaybackState.ACTION_PAUSE                : PlaybackState.ACTION_PLAY_PAUSE | PlaybackState.ACTION_PLAY);            builder.setState(                isPlaying() ? PlaybackState.STATE_PLAYING : PlaybackState.STATE_PAUSED,                getCurrentTime(),                1.0f);            mMediaSession.setPlaybackState(builder.build());        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "TVVideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onHardwareAccelerationError", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onHardwareAccelerationError() {        showErrorDialog(                getString(R.string.hardware_acceleration_error_title),                getString(R.string.hardware_acceleration_error_message));    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "TVVideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "showTimedCaptionText", "params": ["Caption"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void showTimedCaptionText(final Caption text) {        if (mDisplayHandler == null)            mDisplayHandler = new Handler(Looper.getMainLooper());        mDisplayHandler.post(new Runnable() {            @Override            public void run() {                if (text == null) {                    if (mSubtitleText.getText().length() > 0) {                        mSubtitleText.setText(\"\");                        mSubtitleText.setVisibility(View.INVISIBLE);                    }                    return;                }                SpannableStringBuilder styledString = (SpannableStringBuilder) Html.fromHtml(text.content);                ForegroundColorSpan[] toRemoveSpans = styledString.getSpans(0, styledString.length(), ForegroundColorSpan.class);                for (ForegroundColorSpan remove : toRemoveSpans) {                    styledString.removeSpan(remove);                }                if (!mSubtitleText.getText().toString().equals(styledString.toString())) {                    mSubtitleText.setText(styledString);                    mSubtitleText.setVisibility(View.VISIBLE);                }            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "TVVideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "setProgressVisible", "params": ["boolean"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void setProgressVisible(boolean visible) {        if(mProgressIndicator.getVisibility() == View.VISIBLE && visible)            return;        if(mProgressIndicator.getVisibility() == View.GONE && !visible)            return;        mProgressIndicator.setVisibility(visible ? View.VISIBLE : View.GONE);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "TVVideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onProgressChanged", "params": ["long", "long"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onProgressChanged(long currentTime, long duration) {        EventBus.getDefault().post(new PlaybackProgressChangedEvent(currentTime, duration));        if (mMediaSession != null && duration > 0) {            PlaybackState.Builder builder = new PlaybackState.Builder();            builder.setActions(isPlaying()                ? PlaybackState.ACTION_PLAY_PAUSE | PlaybackState.ACTION_PAUSE                : PlaybackState.ACTION_PLAY_PAUSE | PlaybackState.ACTION_PLAY);            builder.setState(                isPlaying()                    ? PlaybackState.STATE_PLAYING                    : PlaybackState.STATE_PAUSED,                getCurrentTime(),                1.0f);            mMediaSession.setPlaybackState(builder.build());            if (!mMediaSessionMetadataApplied) {                setupMediaMetadata();            }        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "TVVideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPlaybackEndReached", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPlaybackEndReached() {        EventBus.getDefault().post(new UpdatePlaybackStateEvent(false));        mMediaSession.setActive(false);        mMediaSession.release();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "TVVideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onStreamReady", "params": ["Torrent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onStreamReady(Torrent torrent) { }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "TVVideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onStreamProgress", "params": ["Torrent", "StreamStatus"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onStreamProgress(Torrent torrent, StreamStatus streamStatus) {        super.onStreamProgress(torrent, streamStatus);        EventBus.getDefault().post(new StreamProgressChangedEvent(getStreamerProgress()));    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "TVVideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onStreamError", "params": ["Torrent", "Exception"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onStreamError(Torrent torrent, Exception e) {        showErrorDialog(getString(R.string.torrent_failed), e.getMessage());    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "TVVideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "showErrorDialog", "params": ["String", "String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void showErrorDialog(String title, String message) {        AlertDialog dialog = new AlertDialog.Builder(getActivity())                .setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int id) {                        disableHardwareAcceleration();                        loadMedia();                    }                })                .setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int id) {                        getActivity().finish();                    }                })                .setTitle(title)                .setMessage(message)                .create();        if (!getActivity().isFinishing())            dialog.show();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "TVVideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "updateSubtitleSize", "params": ["int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void updateSubtitleSize(int size) {        mSubtitleText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, size);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "TVVideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onSubtitleEnabledStateChanged", "params": ["boolean"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onSubtitleEnabledStateChanged(boolean enabled) {        super.onSubtitleEnabledStateChanged(enabled);        mIsSubtitleEnabled = enabled;        mSubtitleText.setVisibility(enabled ? View.VISIBLE : View.INVISIBLE);        EventBus.getDefault().post(new ToggleSubtitleEvent(mIsSubtitleEnabled));    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "TVVideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "startBeamPlayerActivity", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void startBeamPlayerActivity() { }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "TVVideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onEventMainThread", "params": ["StartPlaybackEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onEventMainThread(StartPlaybackEvent event) {        togglePlayPause();        if (mMediaSession != null) {            PlaybackState.Builder builder = new PlaybackState.Builder();            builder.setActions(PlaybackState.ACTION_PAUSE | PlaybackState.ACTION_PLAY_PAUSE);            builder.setState(PlaybackState.STATE_PLAYING, getCurrentTime(), 1.0f);            mMediaSession.setPlaybackState(builder.build());        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "TVVideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onEventMainThread", "params": ["PausePlaybackEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onEventMainThread(PausePlaybackEvent event) {        togglePlayPause();        if (mMediaSession != null) {            PlaybackState.Builder builder = new PlaybackState.Builder();            builder.setActions(PlaybackState.ACTION_PLAY | PlaybackState.ACTION_PLAY_PAUSE);            builder.setState(PlaybackState.STATE_PAUSED, getCurrentTime(), 1.0f);            mMediaSession.setPlaybackState(builder.build());        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "TVVideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onEventMainThread", "params": ["SeekBackwardEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onEventMainThread(SeekBackwardEvent event) {        if (!isSeeking()) {            setSeeking(true);            seek(event.getSeek());            setSeeking(false);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "TVVideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onEventMainThread", "params": ["SeekForwardEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onEventMainThread(SeekForwardEvent event) {        if (!isSeeking()) {            setSeeking(true);            seek(event.getSeek());            setSeeking(false);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "TVVideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onEventMainThread", "params": ["ScaleVideoEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onEventMainThread(ScaleVideoEvent event) {        scaleClick();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "TVVideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onEventMainThread", "params": ["ConfigureSubtitleEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onEventMainThread(ConfigureSubtitleEvent event) {        subsClick();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "TVVideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "activateMediaSession", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void activateMediaSession() {        if (null != mMediaSession) return;        Activity activity = getActivity();        mMediaSession = new MediaSession(activity, \"ButterMediaSession\");        mMediaSession.setCallback(new ButterMediaSessionCallback(activity));        mMediaSession.setFlags(MediaSession.FLAG_HANDLES_MEDIA_BUTTONS | MediaSession.FLAG_HANDLES_TRANSPORT_CONTROLS);        mMediaSession.setActive(true);        activity.setMediaController(new MediaController(activity, mMediaSession.getSessionToken()));    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "TVVideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "setupMediaMetadata", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setupMediaMetadata() {        mMediaSessionMetadataApplied = false;        if(mStreamInfo.getMedia() == null)            return;        final MediaMetadata.Builder metadataBuilder = new MediaMetadata.Builder();        metadataBuilder.putString(MediaMetadata.METADATA_KEY_MEDIA_ID, mStreamInfo.getMedia().videoId);        metadataBuilder.putLong(MediaMetadata.METADATA_KEY_DURATION, getDuration());        if (mStreamInfo.isShow()) {            metadataBuilder.putString(MediaMetadata.METADATA_KEY_DISPLAY_TITLE, mStreamInfo.getShowTitle());            metadataBuilder.putString(MediaMetadata.METADATA_KEY_DISPLAY_SUBTITLE, mStreamInfo.getShowEpisodeTitle());            metadataBuilder.putString(MediaMetadata.METADATA_KEY_TITLE, mStreamInfo.getShowTitle());        } else {            metadataBuilder.putString(MediaMetadata.METADATA_KEY_DISPLAY_TITLE, mStreamInfo.getTitle());            metadataBuilder.putString(MediaMetadata.METADATA_KEY_TITLE, mStreamInfo.getTitle());        }        String imageUrl = mStreamInfo.getMedia().image;        if (imageUrl != null && !imageUrl.equals(\"\")) {            metadataBuilder.putString(MediaMetadata.METADATA_KEY_DISPLAY_ICON_URI, imageUrl);            metadataBuilder.putString(MediaMetadata.METADATA_KEY_ART_URI, imageUrl);            Picasso.get().load(imageUrl).into(new Target() {                @Override                public void onBitmapLoaded(Bitmap bitmap, Picasso.LoadedFrom from) {                    metadataBuilder.putBitmap(MediaMetadata.METADATA_KEY_ART, bitmap);                    mMediaSession.setMetadata(metadataBuilder.build());                    mMediaSessionMetadataApplied = true;                }                @Override                public void onBitmapFailed(Exception exc, Drawable errorDrawable) {                    mMediaSession.setMetadata(metadataBuilder.build());                    mMediaSessionMetadataApplied = true;                }                @Override                public void onPrepareLoad(Drawable placeHolderDrawable) { }            });        }        else {            mMediaSession.setMetadata(metadataBuilder.build());            mMediaSessionMetadataApplied = true;        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "TVVideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "isMediaSessionActive", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isMediaSessionActive() {        return mMediaSession != null && mMediaSession.isActive();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "TVVideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "deactivateMediaSession", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void deactivateMediaSession() {        if (mMediaSession != null && mMediaSession.isActive()) mMediaSession.setActive(false);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "TVVideoPlayerFragment", "extends": "BaseVideoPlayerFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPlay", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onPlay() {            EventBus.getDefault().post(new StartPlaybackEvent());        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "ButterMediaSessionCallback", "extends": "MediaSession", "implements": null, "modifiers": ["private"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onPause() {            EventBus.getDefault().post(new PausePlaybackEvent());        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "ButterMediaSessionCallback", "extends": "MediaSession", "implements": null, "modifiers": ["private"]}}, {"method_name": "onFastForward", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onFastForward() {            EventBus.getDefault().post(new SeekForwardEvent());        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "ButterMediaSessionCallback", "extends": "MediaSession", "implements": null, "modifiers": ["private"]}}, {"method_name": "onRewind", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onRewind() {            EventBus.getDefault().post(new SeekForwardEvent());        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "ButterMediaSessionCallback", "extends": "MediaSession", "implements": null, "modifiers": ["private"]}}, {"method_name": "onPlayFromMediaId", "params": ["String", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onPlayFromMediaId(@NonNull String mediaId, @NonNull Bundle extras) {            super.onPlayFromMediaId(mediaId, extras);            if (contextReference.get() == null) return;            Context context = contextReference.get();            Media media = extras.getParcelable(TVMediaDetailActivity.EXTRA_ITEM);            if (media == null) return;            Intent detailIntent = TVMediaDetailActivity.buildIntent(                    context,                    media);            detailIntent.setAction(media.videoId);            context.startActivity(detailIntent);        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "ButterMediaSessionCallback", "extends": "MediaSession", "implements": null, "modifiers": ["private"]}}, {"method_name": "onMediaButtonEvent", "params": ["Intent"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean onMediaButtonEvent(@NonNull Intent intent) {            if (!intent.getAction().equals(Intent.ACTION_MEDIA_BUTTON)) return false;            KeyEvent keyEvent = intent.getParcelableExtra(Intent.EXTRA_KEY_EVENT);            if (keyEvent.getAction() == KeyEvent.ACTION_DOWN) return false;            if (keyEvent.getKeyCode() == KeyEvent.KEYCODE_MEDIA_PAUSE) {                EventBus.getDefault().post(new PausePlaybackEvent());                return true;            }            if (keyEvent.getKeyCode() == KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE) {                if (isPlaying()) {                    EventBus.getDefault().post(new PausePlaybackEvent());                } else {                    EventBus.getDefault().post(new StartPlaybackEvent());                }                return true;            }            return false;        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/fragments/TVVideoPlayerFragment.java", "stars": "4", "class": {"name": "ButterMediaSessionCallback", "extends": "MediaSession", "implements": null, "modifiers": ["private"]}}, {"method_name": "tampilkan_data", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void tampilkan_data(){                DefaultTableModel model = new DefaultTableModel();        model.addColumn(\"No.\");        model.addColumn(\"Kode Montir\");        model.addColumn(\"Nama Montir\");        model.addColumn(\"No HP\");        model.addColumn(\"Alamat\");        model.addColumn(\"Jenis Kelamin\");                try{            int no = 1;            String sql = \"SELECT * FROM tb_montir\";            java.sql.Connection conn = (Connection)koneksi.getkoneksi();            java.sql.Statement stm = conn.createStatement();            java.sql.ResultSet res = stm.executeQuery(sql);                        while(res.next()){                model.addRow(new Object[]{no++,res.getString(1),res.getString(2),res.getString(3),res.getString(4),res.getString(5)});            }            tabelMontir.setModel(model);        }catch (SQLException e){            System.out.println(\"Error : \" + e.getMessage());        }            }", "url": "https://raw.githubusercontent.com/heridho118140173/TUBES-PBO-MASTER/master/TUBES-PBO-master/Bengkel1/src/tb_montir.java", "stars": "2", "class": {"name": "tb_montir", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "initComponents", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initComponents() {        jScrollPane1 = new javax.swing.JScrollPane();        tabelMontir = new javax.swing.JTable();        jLabel1 = new javax.swing.JLabel();        jButton1 = new javax.swing.JButton();        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);        tabelMontir.setModel(new javax.swing.table.DefaultTableModel(            new Object [][] {                {null, null, null, null},                {null, null, null, null},                {null, null, null, null},                {null, null, null, null}            },            new String [] {                \"Title 1\", \"Title 2\", \"Title 3\", \"Title 4\"            }        ));        jScrollPane1.setViewportView(tabelMontir);        jLabel1.setFont(new java.awt.Font(\"Tahoma\", 0, 36)); // NOI18N        jLabel1.setText(\"MONTIR\");        jButton1.setText(\"Keluar\");        jButton1.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                jButton1ActionPerformed(evt);            }        });        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());        getContentPane().setLayout(layout);        layout.setHorizontalGroup(            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)            .addGroup(layout.createSequentialGroup()                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)                    .addGroup(layout.createSequentialGroup()                        .addGap(30, 30, 30)                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))                    .addGroup(layout.createSequentialGroup()                        .addGap(187, 187, 187)                        .addComponent(jButton1))                    .addGroup(layout.createSequentialGroup()                        .addGap(153, 153, 153)                        .addComponent(jLabel1)))                .addContainerGap(40, Short.MAX_VALUE))        );        layout.setVerticalGroup(            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)            .addGroup(layout.createSequentialGroup()                .addGap(22, 22, 22)                .addComponent(jLabel1)                .addGap(50, 50, 50)                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)                .addGap(18, 18, 18)                .addComponent(jButton1)                .addContainerGap(45, Short.MAX_VALUE))        );        pack();    }", "url": "https://raw.githubusercontent.com/heridho118140173/TUBES-PBO-MASTER/master/TUBES-PBO-master/Bengkel1/src/tb_montir.java", "stars": "2", "class": {"name": "tb_montir", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "jButton1ActionPerformed", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed        // TODO add your handling code here:        System.exit(0);    }", "url": "https://raw.githubusercontent.com/heridho118140173/TUBES-PBO-MASTER/master/TUBES-PBO-master/Bengkel1/src/tb_montir.java", "stars": "2", "class": {"name": "tb_montir", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String args[]) {        /* Set the Nimbus look and feel */        //<editor-fold defaultstate=\"collapsed\" desc=\" Look and feel setting code (optional) \">        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html          */        try {            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {                if (\"Nimbus\".equals(info.getName())) {                    javax.swing.UIManager.setLookAndFeel(info.getClassName());                    break;                }            }        } catch (ClassNotFoundException ex) {            java.util.logging.Logger.getLogger(tb_montir.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);        } catch (InstantiationException ex) {            java.util.logging.Logger.getLogger(tb_montir.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);        } catch (IllegalAccessException ex) {            java.util.logging.Logger.getLogger(tb_montir.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);        } catch (javax.swing.UnsupportedLookAndFeelException ex) {            java.util.logging.Logger.getLogger(tb_montir.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);        }        //</editor-fold>        /* Create and display the form */        java.awt.EventQueue.invokeLater(new Runnable() {            public void run() {                new tb_montir().setVisible(true);            }        });    }", "url": "https://raw.githubusercontent.com/heridho118140173/TUBES-PBO-MASTER/master/TUBES-PBO-master/Bengkel1/src/tb_montir.java", "stars": "2", "class": {"name": "tb_montir", "extends": "javax", "implements": null, "modifiers": ["public"]}}, {"method_name": "testEmptyNamespace", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testEmptyNamespace() throws Exception {    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/empty_namespace/ibatisConfig.xml\")) {        Assertions.assertThrows(PersistenceException.class, () -> new SqlSessionFactoryBuilder().build(reader));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/empty_namespace/EmptyNamespaceTest.java", "stars": "15", "class": {"name": "EmptyNamespaceTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getId() {        return this.id;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/room/object/visualization/furniture/FurnitureVisualizationData.java", "stars": "2", "class": {"name": "FurnitureVisualizationData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPublicName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPublicName() {        return this.publicName;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/room/object/visualization/furniture/FurnitureVisualizationData.java", "stars": "2", "class": {"name": "FurnitureVisualizationData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProductName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getProductName() {        return this.productName;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/room/object/visualization/furniture/FurnitureVisualizationData.java", "stars": "2", "class": {"name": "FurnitureVisualizationData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSpriteId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getSpriteId() {        return this.spriteId;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/application/src/main/java/com/nitro/application/room/object/visualization/furniture/FurnitureVisualizationData.java", "stars": "2", "class": {"name": "FurnitureVisualizationData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUsers", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "ArrayList<Cliente>", "snippet": "    public static ArrayList<Cliente> getUsers()    {        if(uc == null)        {            uc = new ArrayList<>();            Cliente usuario_cliente = new Cliente();            usuario_cliente.setNome(\"Administrador do Sistema\");            usuario_cliente.setCpf(\"411.889.967-14\");            usuario_cliente.setEndereco(\"Rua Antonio Peixoto\");            usuario_cliente.setRg(123456789);            usuario_cliente.setEmail(\"admon@empresa.com\");            usuario_cliente.setTelefone(123456789);                                    uc.add(usuario_cliente);                    }                return uc;    }", "url": "https://raw.githubusercontent.com/samuelPed/trabalho-pupo/master/src/java/br/gov/sp/fatec/cadastro/Bd.java", "stars": "2", "class": {"name": "Bd", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUser", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "ArrayList<Fornecedor>", "snippet": "    public static ArrayList<Fornecedor> getUser()    {        if(uf == null)        {            uf = new ArrayList<>();            Fornecedor usuario_fornecedor = new Fornecedor();            usuario_fornecedor.setNome(\"Administrador do Sistema\");            usuario_fornecedor.setRazaoSocial(\"411.889.967-14\");            usuario_fornecedor.setEndereco(\"Rua Antonio Peixoto\");            usuario_fornecedor.setCnpj(123456789);            usuario_fornecedor.setEmail(\"admon@empresa.com\");            usuario_fornecedor.setTelefone(123456789);                                    uf.add(usuario_fornecedor);                    }                return uf;    }", "url": "https://raw.githubusercontent.com/samuelPed/trabalho-pupo/master/src/java/br/gov/sp/fatec/cadastro/Bd.java", "stars": "2", "class": {"name": "Bd", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "execute", "params": ["String", "Map<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "\tpublic Object execute(String expression, Map<String, Object> variables) {\t\tExpressionTemplateContext context = new ExpressionTemplateContext(variables);\t\treturn ExpressionTemplate.create(expression).render(context);\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/ExpressionEngine.java", "stars": "13", "class": {"name": "ExpressionEngine", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "executeWrap", "params": ["String", "Map<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "\tpublic Object executeWrap(String expression, Map<String, Object> variables) {\t\treturn execute(\"${\" + expression + \"}\", variables);\t}", "url": "https://raw.githubusercontent.com/javamxd/ssssssss/master/src/main/java/org/ssssssss/expression/ExpressionEngine.java", "stars": "13", "class": {"name": "ExpressionEngine", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "newInstance", "params": ["Listener"], "throws": null, "modifiers": ["public", "static"], "return_type": "MediaGenreSelectionFragment", "snippet": "    public static MediaGenreSelectionFragment newInstance(Listener listener) {        MediaGenreSelectionFragment frag = new MediaGenreSelectionFragment();        frag.setListener(listener);        return frag;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/MediaGenreSelectionFragment.java", "stars": "4", "class": {"name": "MediaGenreSelectionFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "setListener", "params": ["Listener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setListener(Listener listener) {        mListener = listener;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/MediaGenreSelectionFragment.java", "stars": "4", "class": {"name": "MediaGenreSelectionFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        MobileButterApplication.getAppContext()                .getComponent()                .inject(this);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/MediaGenreSelectionFragment.java", "stars": "4", "class": {"name": "MediaGenreSelectionFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        mContext = getActivity();        View v = inflater.inflate(R.layout.fragment_media, container, false);        ButterKnife.bind(this, v);        mRecyclerView.setLayoutManager(new LinearLayoutManager(mContext));        mSwipeRefreshLayout.setRefreshing(false);        mSwipeRefreshLayout.setEnabled(false);        return v;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/MediaGenreSelectionFragment.java", "stars": "4", "class": {"name": "MediaGenreSelectionFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onViewCreated", "params": ["View", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {        super.onViewCreated(view, savedInstanceState);        List<Genre> genreList = providerManager.getCurrentMediaProvider().getGenres();        mRecyclerView.setHasFixedSize(true);        mRecyclerView.addItemDecoration(new DividerItemDecoration(mContext, DividerItemDecoration.VERTICAL_LIST, R.drawable.list_divider_nospacing));        //adapter should only ever be created once on fragment initialise.        GenreAdapter mAdapter = new GenreAdapter(mContext, genreList, mSelectedPos);        mAdapter.setOnItemSelectionListener(mOnItemSelectionListener);        mRecyclerView.setAdapter(mAdapter);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/MediaGenreSelectionFragment.java", "stars": "4", "class": {"name": "MediaGenreSelectionFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getId() {    return id;  }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/domain/Permission.java", "stars": "2", "class": {"name": "Permission", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setId(Integer id) {    this.id = id;  }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/domain/Permission.java", "stars": "2", "class": {"name": "Permission", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getName() {    return name;  }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/domain/Permission.java", "stars": "2", "class": {"name": "Permission", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setName(String name) {    this.name = name;  }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/domain/Permission.java", "stars": "2", "class": {"name": "Permission", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getUrl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getUrl() {    return url;  }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/domain/Permission.java", "stars": "2", "class": {"name": "Permission", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setUrl", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setUrl(String url) {    this.url = url;  }", "url": "https://raw.githubusercontent.com/MandalasWang/rbac_shiro/master/src/main/java/ink/boyuan/rbac_shiro/domain/Permission.java", "stars": "2", "class": {"name": "Permission", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "prepareDrawing", "params": ["BaseDanmaku", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void prepareDrawing(final BaseDanmaku danmaku, boolean fromWorkerThread) {        if (danmaku.text instanceof Spanned) { // \u6839\u636e\u4f60\u7684\u6761\u4ef6\u68c0\u67e5\u662f\u5426\u9700\u8981\u9700\u8981\u66f4\u65b0\u5f39\u5e55            // FIXME \u8fd9\u91cc\u53ea\u662f\u7b80\u5355\u542f\u4e2a\u7ebf\u7a0b\u6765\u52a0\u8f7d\u8fdc\u7a0burl\u56fe\u7247\uff0c\u8bf7\u4f7f\u7528\u4f60\u81ea\u5df1\u7684\u5f02\u6b65\u7ebf\u7a0b\u6c60\uff0c\u6700\u597d\u52a0\u4e0a\u4f60\u7684\u7f13\u5b58\u6c60            new Thread() {                @Override                public void run() {                    String url = \"http://www.bilibili.com/favicon.ico\";                    InputStream inputStream = null;                    Drawable drawable = mDrawable;                    if (drawable == null) {                        try {                            URLConnection urlConnection = new URL(url).openConnection();                            inputStream = urlConnection.getInputStream();                            drawable = BitmapDrawable.createFromStream(inputStream, \"bitmap\");                            mDrawable = drawable;                        } catch (MalformedURLException e) {                            e.printStackTrace();                        } catch (IOException e) {                            e.printStackTrace();                        } finally {                            IOUtils.closeQuietly(inputStream);                        }                    }                    if (drawable != null) {                        drawable.setBounds(0, 0, 100, 100);                        SpannableStringBuilder spannable = createSpannable(drawable);                        danmaku.text = spannable;                        if (mDanmakuView != null) {                            mDanmakuView.invalidateDanmaku(danmaku, false);                        }                        return;                    }                }            }.start();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/adapter/DanamakuAdapter.java", "stars": "2", "class": {"name": "DanamakuAdapter", "extends": "BaseCacheStuffer", "implements": null, "modifiers": ["public"]}}, {"method_name": "releaseResource", "params": ["BaseDanmaku"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void releaseResource(BaseDanmaku danmaku) {        // TODO \u91cd\u8981:\u6e05\u7406\u542b\u6709ImageSpan\u7684text\u4e2d\u7684\u4e00\u4e9b\u5360\u7528\u5185\u5b58\u7684\u8d44\u6e90 \u4f8b\u5982drawable    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/adapter/DanamakuAdapter.java", "stars": "2", "class": {"name": "DanamakuAdapter", "extends": "BaseCacheStuffer", "implements": null, "modifiers": ["public"]}}, {"method_name": "createSpannable", "params": ["Drawable"], "throws": null, "modifiers": ["private"], "return_type": "SpannableStringBuilder", "snippet": "    private SpannableStringBuilder createSpannable(Drawable drawable) {        String text = \"bitmap\";        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(text);        ImageSpan span = new ImageSpan(drawable);//ImageSpan.ALIGN_BOTTOM);        spannableStringBuilder.setSpan(span, 0, text.length(), Spannable.SPAN_INCLUSIVE_EXCLUSIVE);        spannableStringBuilder.append(\"\u56fe\u6587\u6df7\u6392\");        spannableStringBuilder.setSpan(new BackgroundColorSpan(Color.parseColor(\"#8A2233B1\")), 0, spannableStringBuilder.length(), Spannable.SPAN_INCLUSIVE_INCLUSIVE);        return spannableStringBuilder;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/adapter/DanamakuAdapter.java", "stars": "2", "class": {"name": "DanamakuAdapter", "extends": "BaseCacheStuffer", "implements": null, "modifiers": ["public"]}}, {"method_name": "onAttachedToWindow", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onAttachedToWindow ()\t{\t\tn_onAttachedToWindow ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/TabbedRenderer.java", "stars": "2", "class": {"name": "TabbedRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onAttachedToWindow", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onAttachedToWindow ();\tpublic void onDetachedFromWindow ()\t{\t\tn_onDetachedFromWindow ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/TabbedRenderer.java", "stars": "2", "class": {"name": "TabbedRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onDetachedFromWindow", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDetachedFromWindow ()\t{\t\tn_onDetachedFromWindow ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/TabbedRenderer.java", "stars": "2", "class": {"name": "TabbedRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onDetachedFromWindow", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDetachedFromWindow ();\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/TabbedRenderer.java", "stars": "2", "class": {"name": "TabbedRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/TabbedRenderer.java", "stars": "2", "class": {"name": "TabbedRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/TabbedRenderer.java", "stars": "2", "class": {"name": "TabbedRenderer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        leerViajes();        mostrarViajes();    }", "url": "https://raw.githubusercontent.com/santiago9739/Ingenieria-del-software-2/master/src/main/java/co/unicauca/tallerpolimorfismo/cliente/ClienteMain.java", "stars": "1", "class": {"name": "ClienteMain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "leerViajes", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void leerViajes() {        try {            Viaje viaje1 = new ViajeFamiliar(\"Popay\u00e1n\", \"Bogot\u00e1\", 1250000,                            new SimpleDateFormat(\"dd/MM/yyyy\").parse(\"01/05/2019\"),                            new SimpleDateFormat(\"dd/MM/yyyy\").parse(\"05/05/2019\"), 5);            viajes.add(viaje1);            Viaje viaje2 = new ViajeIncentivo(\"Popay\u00e1n\", \"Medellin\", 2100000,                            new SimpleDateFormat(\"dd/MM/yyyy\").parse(\"03/06/2019\"),                            new SimpleDateFormat(\"dd/MM/yyyy\").parse(\"09/06/2019\"), \"Emtel\");            viajes.add(viaje2);            Viaje viaje3 = new ViajeIndividual(\"Popay\u00e1n\", \"San Andres\", 4250000,                           new SimpleDateFormat(\"dd/MM/yyyy\").parse(\"01/07/2019\"),                            new SimpleDateFormat(\"dd/MM/yyyy\").parse(\"12/07/2019\"));            viajes.add(viaje3);            Viaje viaje4 = new ViajeTodoIncluido(\"Popay\u00e1n\", \"Cartagena\", 7350000,                           new SimpleDateFormat(\"dd/MM/yyyy\").parse(\"01/07/2019\"),                            new SimpleDateFormat(\"dd/MM/yyyy\").parse(\"12/07/2019\"));            viajes.add(viaje4);        } catch (ParseException ex) {            Logger.getLogger(ClienteMain.class.getName()).log(Level.SEVERE, null,ex);        }    }", "url": "https://raw.githubusercontent.com/santiago9739/Ingenieria-del-software-2/master/src/main/java/co/unicauca/tallerpolimorfismo/cliente/ClienteMain.java", "stars": "1", "class": {"name": "ClienteMain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "mostrarViajes", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void mostrarViajes() {        // En este caso vemos que todos los viajes ejecutan el m\u00e9todo \"descripcion()\" de forma diferente         // ya que al ser este m\u00e9todo abstracto en la clase padre, les forzamos a las clases hijas a que         // implementen ese m\u00e9todo.        for (Viaje viaje : viajes) {            System.out.println(\"Origen: \" + viaje.getOrigen());            System.out.println(\"Destino: \" + viaje.getDestino());            System.out.println(\"Fecha salida: \" + viaje.getFechaSalida());            System.out.println(\"Fecha llegada: \" + viaje.getFechaLlegada());            System.out.println(\"Costo: \" + viaje.getCosto());            System.out.println(\"Descripci\u00f3n: \" + viaje.descripcion());            System.out.println(\"Cualquier m\u00e9todo: \" + viaje.cualquierMetodo());            System.out.println(\"Cualquier m\u00e9todo2: \" + viaje.cualquierMetodo2());            System.out.println(\"\");        }    }", "url": "https://raw.githubusercontent.com/santiago9739/Ingenieria-del-software-2/master/src/main/java/co/unicauca/tallerpolimorfismo/cliente/ClienteMain.java", "stars": "1", "class": {"name": "ClienteMain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run() {        log.info(\"\u6267\u884c\u7ebf\u7a0b\u6c60\");        Queue<RequestMessageByte> requestQueue = messageQueue.getRequestQueue();        if (Objects.nonNull(requestQueue) && (requestQueue.size() > Const.Number.ZERO)) {            threadPoolExecutor.execute(new MessageWorkerByte(messageQueue));        }        Queue<RequestMessageData> requestQueueData = messageQueue.getRequestQueueData();        if (Objects.nonNull(requestQueueData) && (requestQueueData.size() > Const.Number.ZERO)) {            threadPoolExecutor.execute(new MessageWorkerData(messageQueue));        }    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/socket/logic/HandlerDispatcher.java", "stars": "1", "class": {"name": "HandlerDispatcher", "extends": "DefaultThreadFactory", "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "initInternal", "params": [], "throws": ["LifecycleException"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initInternal() throws LifecycleException {        queue = new PriorityBlockingQueue<Runnable>(1000);        threadPoolExecutor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.HOURS, queue,                new NamedThreadFactory(\"EXECUTOR\", false));    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/schedule/PriorityExecutor.java", "stars": "3", "class": {"name": "PriorityExecutor", "extends": "AbstractLifecycle", "implements": ["Executor"], "modifiers": ["public"]}}, {"method_name": "startInternal", "params": [], "throws": ["LifecycleException"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void startInternal() throws LifecycleException {    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/schedule/PriorityExecutor.java", "stars": "3", "class": {"name": "PriorityExecutor", "extends": "AbstractLifecycle", "implements": ["Executor"], "modifiers": ["public"]}}, {"method_name": "stopInternal", "params": [], "throws": ["LifecycleException"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void stopInternal() throws LifecycleException {        threadPoolExecutor.shutdown();    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/schedule/PriorityExecutor.java", "stars": "3", "class": {"name": "PriorityExecutor", "extends": "AbstractLifecycle", "implements": ["Executor"], "modifiers": ["public"]}}, {"method_name": "execute", "params": ["Task"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void execute(Task t) {        threadPoolExecutor.execute(t);    }", "url": "https://raw.githubusercontent.com/jroutine/jroutine/master/src/main/java/org/coral/jroutine/schedule/PriorityExecutor.java", "stars": "3", "class": {"name": "PriorityExecutor", "extends": "AbstractLifecycle", "implements": ["Executor"], "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["ScaledResolution"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDraw(ScaledResolution scaledResolution) {        super.onDraw(scaledResolution);        if (Mercury.INSTANCE.getModuleManager().find(KillAura.class).isEnabled() && KillAura.target != null && KillAura.target instanceof EntityPlayer) {            EntityLivingBase entity = KillAura.target;            NetworkPlayerInfo networkPlayerInfo = mc.getConnection().getPlayerInfo(entity.getUniqueID());            final String ping = \"Ping: \" + (Objects.isNull(networkPlayerInfo) ? \"0ms\" : networkPlayerInfo.getResponseTime() + \"ms\");            final String playerName = \"Name: \" + StringUtils.stripControlCodes(entity.getName());            RenderUtil.drawBorderedRect2(x, y, width, height, 0.5f, new Color(0, 0, 0, 255).getRGB(), new Color(0, 0, 0, 90).getRGB());            RenderUtil.drawRect2(x, y, 45, 45, new Color(0, 0, 0).getRGB());            font.drawStringWithShadow(playerName, x + 46.5, y + 4, -1);            font.drawStringWithShadow(\"Distance: \" + MathUtil.round(mc.player.getDistance(entity), 2), x + 46.5, y + 12, -1);            font.drawStringWithShadow(ping, x + 46.5, y + 28, new Color(0x5D5B5C).getRGB());            font.drawStringWithShadow(\"Health: \" + MathUtil.round(entity.getHealth() / 2, 2), x + 46.5, y + 20, getHealthColor(entity));            drawFace(x + 0.5, y + 0.5, 8, 8, 8, 8, 44, 44, 64, 64, (AbstractClientPlayer) entity);            RenderUtil.drawBorderedRect2(x + 46, y + height - 10, 92, 8, 0.5f, new Color(0).getRGB(), new Color(35, 35, 35).getRGB());            float inc = 91 / entity.getMaxHealth();            float end = inc * (entity.getHealth() > entity.getMaxHealth() ? entity.getMaxHealth() : entity.getHealth());            RenderUtil.drawRect2(x + 46.5f, y + height - 9.5f, end, 7, getHealthColor(entity));        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/hudcomponents/TargetHUD.java", "stars": "12", "class": {"name": "TargetHUD", "extends": "HudComponent", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawFace", "params": ["double", "double", "float", "float", "int", "int", "int", "int", "float", "float", "AbstractClientPlayer"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void drawFace(double x, double y, float u, float v, int uWidth, int vHeight, int width, int height, float tileWidth, float tileHeight, AbstractClientPlayer target) {        try {            ResourceLocation skin = target.getLocationSkin();            Minecraft.getMinecraft().getTextureManager().bindTexture(skin);            GL11.glEnable(GL11.GL_BLEND);            GL11.glColor4f(1, 1, 1, 1);            RenderUtil.drawScaledCustomSizeModalRect(x, y, u, v, uWidth, vHeight, width, height, tileWidth, tileHeight);            GL11.glDisable(GL11.GL_BLEND);        } catch (Exception e) {        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/hudcomponents/TargetHUD.java", "stars": "12", "class": {"name": "TargetHUD", "extends": "HudComponent", "implements": null, "modifiers": ["public"]}}, {"method_name": "getHealthColor", "params": ["EntityLivingBase"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int getHealthColor(EntityLivingBase player) {        float f = player.getHealth();        float f1 = player.getMaxHealth();        float f2 = Math.max(0.0F, Math.min(f, f1) / f1);        return Color.HSBtoRGB(f2 / 3.0F, 1.0F, 0.75F) | 0xFF000000;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/hudcomponents/TargetHUD.java", "stars": "12", "class": {"name": "TargetHUD", "extends": "HudComponent", "implements": null, "modifiers": ["public"]}}, {"method_name": "setValue", "params": ["Byte"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setValue(Byte s) {        this.value = s;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/ByteTag.java", "stars": "2", "class": {"name": "ByteTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Byte", "snippet": "    public Byte getValue() {        return value;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/ByteTag.java", "stars": "2", "class": {"name": "ByteTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/ByteTag.java", "stars": "2", "class": {"name": "ByteTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/ByteTag.java", "stars": "2", "class": {"name": "ByteTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "writeData", "params": ["DataOutputStream"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void writeData(DataOutputStream dos) throws IOException {        // Indicates the string        dos.write(getID());        //Create a new DataOutputStream        ByteArrayOutputStream os = new ByteArrayOutputStream();        CountingOutputStream cos = new CountingOutputStream(os);        DataOutputStream tempDos = new DataOutputStream(cos);        tempDos.writeShort(name.getBytes(StandardCharsets.UTF_8).length);        tempDos.write(name.getBytes(StandardCharsets.UTF_8));        tempDos.write(value);        dos.writeInt(cos.getCount());        dos.write(os.toByteArray());        tempDos.close();    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/ByteTag.java", "stars": "2", "class": {"name": "ByteTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "createFromData", "params": ["byte"], "throws": null, "modifiers": ["public"], "return_type": "Tag<Byte>", "snippet": "    public Tag<Byte> createFromData(byte[] value) {        ByteBuffer wrappedFloat = ByteBuffer.wrap(value);        this.value = wrappedFloat.get();        wrappedFloat.clear();        return this;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/ByteTag.java", "stars": "2", "class": {"name": "ByteTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "getID", "params": [], "throws": null, "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte getID() {        return 8;    }", "url": "https://raw.githubusercontent.com/ryandw11/ODS/master/src/main/java/me/ryandw11/ods/tags/ByteTag.java", "stars": "2", "class": {"name": "ByteTag", "extends": null, "implements": ["Tag"], "modifiers": ["public"]}}, {"method_name": "invokeMethod", "params": ["short", "Request", "DataPacket"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void invokeMethod(short cmd, Request request, DataPacket dataPacket) {        super.invokeMethod(cmd, request, dataPacket);    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/service/impl/RoomServiceImpl.java", "stars": "1", "class": {"name": "RoomServiceImpl", "extends": "abstractService", "implements": ["RoomService"], "modifiers": ["public"]}}, {"method_name": "route", "params": ["TriggerParam", "List<String>"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "ReturnT<String>", "snippet": "    public abstract ReturnT<String> route(TriggerParam triggerParam, List<String> addressList);}", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/route/ExecutorRouter.java", "stars": "1", "class": {"name": "ExecutorRouter", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "configure", "params": ["AuthenticationManagerBuilder"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void configure(AuthenticationManagerBuilder authenticationManagerBuilder) throws Exception {        authenticationManagerBuilder                .userDetailsService(userDetailsService)                .passwordEncoder(passwordEncoder);    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/security/SecurityConfigure.java", "stars": "6", "class": {"name": "SecurityConfigure", "extends": "WebSecurityConfigurerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "configure", "params": ["HttpSecurity"], "throws": ["Exception"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void configure(HttpSecurity httpSecurity) throws Exception {        httpSecurity                .cors()                .and()                .headers().frameOptions().disable()                .and()                .httpBasic().disable()                .formLogin().disable()                .csrf().disable()                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)                .and()                .headers().cacheControl();        ExpressionUrlAuthorizationConfigurer<HttpSecurity>.ExpressionInterceptUrlRegistry registry = httpSecurity                .authorizeRequests();        // \u5f00\u653e\u63a5\u53e3        securityProperties.getPermitAllUrls().forEach(url -> registry.antMatchers(url).permitAll());        // \u5176\u4f59\u63a5\u53e3\u90fd\u9700\u9274\u6743        registry.anyRequest().authenticated();        // JWT\u9a8c\u8bc1        httpSecurity.addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/security/SecurityConfigure.java", "stars": "6", "class": {"name": "SecurityConfigure", "extends": "WebSecurityConfigurerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "authenticationManagerBean", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "AuthenticationManager", "snippet": "    public AuthenticationManager authenticationManagerBean() throws Exception {        return super.authenticationManagerBean();    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/security/SecurityConfigure.java", "stars": "6", "class": {"name": "SecurityConfigure", "extends": "WebSecurityConfigurerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getCount ()\t{\t\treturn n_getCount ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFragmentPagerAdapter.java", "stars": "2", "class": {"name": "ShellFragmentPagerAdapter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_getCount", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "int", "snippet": "\tprivate native int n_getCount ();\tpublic android.support.v4.app.Fragment getItem (int p0)\t{\t\treturn n_getItem (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFragmentPagerAdapter.java", "stars": "2", "class": {"name": "ShellFragmentPagerAdapter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "android", "snippet": "\tpublic android.support.v4.app.Fragment getItem (int p0)\t{\t\treturn n_getItem (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFragmentPagerAdapter.java", "stars": "2", "class": {"name": "ShellFragmentPagerAdapter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_getItem", "params": ["int"], "throws": null, "modifiers": ["native", "private"], "return_type": "android", "snippet": "\tprivate native android.support.v4.app.Fragment n_getItem (int p0);\tpublic long getItemId (int p0)\t{\t\treturn n_getItemId (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFragmentPagerAdapter.java", "stars": "2", "class": {"name": "ShellFragmentPagerAdapter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "getItemId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "\tpublic long getItemId (int p0)\t{\t\treturn n_getItemId (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFragmentPagerAdapter.java", "stars": "2", "class": {"name": "ShellFragmentPagerAdapter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_getItemId", "params": ["int"], "throws": null, "modifiers": ["native", "private"], "return_type": "long", "snippet": "\tprivate native long n_getItemId (int p0);\tpublic int getItemPosition (java.lang.Object p0)\t{\t\treturn n_getItemPosition (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFragmentPagerAdapter.java", "stars": "2", "class": {"name": "ShellFragmentPagerAdapter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "getItemPosition", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int getItemPosition (java.lang.Object p0)\t{\t\treturn n_getItemPosition (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFragmentPagerAdapter.java", "stars": "2", "class": {"name": "ShellFragmentPagerAdapter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_getItemPosition", "params": ["java"], "throws": null, "modifiers": ["native", "private"], "return_type": "int", "snippet": "\tprivate native int n_getItemPosition (java.lang.Object p0);\tpublic java.lang.CharSequence getPageTitle (int p0)\t{\t\treturn n_getPageTitle (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFragmentPagerAdapter.java", "stars": "2", "class": {"name": "ShellFragmentPagerAdapter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "getPageTitle", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "java", "snippet": "\tpublic java.lang.CharSequence getPageTitle (int p0)\t{\t\treturn n_getPageTitle (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFragmentPagerAdapter.java", "stars": "2", "class": {"name": "ShellFragmentPagerAdapter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_getPageTitle", "params": ["int"], "throws": null, "modifiers": ["native", "private"], "return_type": "java", "snippet": "\tprivate native java.lang.CharSequence n_getPageTitle (int p0);\tpublic void restoreState (android.os.Parcelable p0, java.lang.ClassLoader p1)\t{\t\tn_restoreState (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFragmentPagerAdapter.java", "stars": "2", "class": {"name": "ShellFragmentPagerAdapter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "restoreState", "params": ["android", "java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void restoreState (android.os.Parcelable p0, java.lang.ClassLoader p1)\t{\t\tn_restoreState (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFragmentPagerAdapter.java", "stars": "2", "class": {"name": "ShellFragmentPagerAdapter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_restoreState", "params": ["android", "java"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_restoreState (android.os.Parcelable p0, java.lang.ClassLoader p1);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFragmentPagerAdapter.java", "stars": "2", "class": {"name": "ShellFragmentPagerAdapter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFragmentPagerAdapter.java", "stars": "2", "class": {"name": "ShellFragmentPagerAdapter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFragmentPagerAdapter.java", "stars": "2", "class": {"name": "ShellFragmentPagerAdapter", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "testConfiguration", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void testConfiguration() {        UnpooledDataSourceFactory dataSourceFactory = new UnpooledDataSourceFactory();        Properties dataSourceProperties = new Properties();        dataSourceProperties.put(\"driver\", \"org.hsqldb.jdbcDriver\");        dataSourceProperties.put(\"url\", \"jdbc:hsqldb:mem:xml_references\");        dataSourceProperties.put(\"username\", \"sa\");        dataSourceFactory.setProperties(dataSourceProperties);        Environment environment = new Environment(\"test\", new JdbcTransactionFactory(), dataSourceFactory.getDataSource());        Configuration configuration = new Configuration();        configuration.setEnvironment(environment);        configuration.getTypeAliasRegistry().registerAlias(Person.class);        configuration.addMapper(PersonMapper.class);        configuration.addMapper(PersonMapper2.class);        new DefaultSqlSessionFactory(configuration);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_references/EnumWithOgnlTest.java", "stars": "15", "class": {"name": "EnumWithOgnlTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testMixedConfiguration", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "    void testMixedConfiguration() throws Exception {      try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/xml_references/ibatisConfig.xml\")) {          SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);          sqlSessionFactory.getConfiguration().addMapper(PersonMapper2.class);      }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_references/EnumWithOgnlTest.java", "stars": "15", "class": {"name": "EnumWithOgnlTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setUp", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setUp() {        server = MockBukkit.mock();        plugin = MockBukkit.loadWith(LimitsPlugin.class, new File(\"src/test/resources/plugin.yml\"));    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/test/java/net/silthus/slimits/limits/BlockPlacementLimitConfigTests.java", "stars": "3", "class": {"name": "BlockPlacementLimitConfigTests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "tearDown", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void tearDown() {        MockBukkit.unmock();    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/test/java/net/silthus/slimits/limits/BlockPlacementLimitConfigTests.java", "stars": "3", "class": {"name": "BlockPlacementLimitConfigTests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "beforeEach", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void beforeEach() {        Path configPath = new File(\"src/test/resources\", \"test-limit1.yaml\").toPath();        config = new BlockPlacementLimitConfig(configPath);        config.load();    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/test/java/net/silthus/slimits/limits/BlockPlacementLimitConfigTests.java", "stars": "3", "class": {"name": "BlockPlacementLimitConfigTests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldLoadLimitMode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void shouldLoadLimitMode() {        assertThat(config.getMode()).isEqualTo(LimitMode.ADD);    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/test/java/net/silthus/slimits/limits/BlockPlacementLimitConfigTests.java", "stars": "3", "class": {"name": "BlockPlacementLimitConfigTests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldLoadBlockMapLimits", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void shouldLoadBlockMapLimits() {        Map<Material, Integer> blocks = config.getBlocks();        assertThat(blocks)                .isNotNull()                .isNotEmpty()                .hasSize(2)                .containsEntry(Material.BEDROCK, 5)                .containsEntry(Material.DIRT, 2);    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/test/java/net/silthus/slimits/limits/BlockPlacementLimitConfigTests.java", "stars": "3", "class": {"name": "BlockPlacementLimitConfigTests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldGetEmptyLimitIfNotConfigured", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void shouldGetEmptyLimitIfNotConfigured() {        assertThat(config.getBlocks().get(Material.AIR)).isNull();    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/test/java/net/silthus/slimits/limits/BlockPlacementLimitConfigTests.java", "stars": "3", "class": {"name": "BlockPlacementLimitConfigTests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldSetConfigDefaults", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void shouldSetConfigDefaults() {        Path path = new File(\"src/test/resources\", \"test-limit2.yaml\").toPath();        BlockPlacementLimitConfig config = new BlockPlacementLimitConfig(path);        config.load();        assertThat(config.getMode()).isEqualTo(LimitMode.ADD);        assertThat(config.getBlocks()).isNotNull().hasSize(2);    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/test/java/net/silthus/slimits/limits/BlockPlacementLimitConfigTests.java", "stars": "3", "class": {"name": "BlockPlacementLimitConfigTests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "endElement", "params": ["String", "String", "String"], "throws": ["SAXException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void endElement(String uri, String localName, String qName) throws SAXException {        try {            if (qName.equalsIgnoreCase(MUTE)) {                volumeStatus.put(MUTE, Boolean.parseBoolean(value));            }            else if (qName.equalsIgnoreCase(MIN_LEVEL)) {                volumeStatus.put(MIN_LEVEL, Integer.parseInt(value));            }            else if (qName.equalsIgnoreCase(MAX_LEVEL)) {                volumeStatus.put(MAX_LEVEL, Integer.parseInt(value));            }            else if (qName.equalsIgnoreCase(LEVEL)) {                volumeStatus.put(LEVEL, Integer.parseInt(value));            }            value = null;        } catch (JSONException e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/netcast/NetcastVolumeParser.java", "stars": "4", "class": {"name": "NetcastVolumeParser", "extends": "DefaultHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "characters", "params": ["char", "int", "int"], "throws": ["SAXException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void characters(char[] ch, int start, int length) throws SAXException {        value = new String(ch, start, length);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/netcast/NetcastVolumeParser.java", "stars": "4", "class": {"name": "NetcastVolumeParser", "extends": "DefaultHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getVolumeStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "JSONObject", "snippet": "    public JSONObject getVolumeStatus() {        return volumeStatus;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/netcast/NetcastVolumeParser.java", "stars": "4", "class": {"name": "NetcastVolumeParser", "extends": "DefaultHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getA", "params": [], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public T getA() {        return a;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Auxiliary/Instantiable/Math/Vec4.java", "stars": "2", "class": {"name": "Vec4", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getB", "params": [], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public T getB() {        return b;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Auxiliary/Instantiable/Math/Vec4.java", "stars": "2", "class": {"name": "Vec4", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getG", "params": [], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public T getG() {        return g;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Auxiliary/Instantiable/Math/Vec4.java", "stars": "2", "class": {"name": "Vec4", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getR", "params": [], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public T getR() {        return r;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Auxiliary/Instantiable/Math/Vec4.java", "stars": "2", "class": {"name": "Vec4", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getX", "params": [], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public T getX() {        return r;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Auxiliary/Instantiable/Math/Vec4.java", "stars": "2", "class": {"name": "Vec4", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getY", "params": [], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public T getY() {        return g;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Auxiliary/Instantiable/Math/Vec4.java", "stars": "2", "class": {"name": "Vec4", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getZ", "params": [], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public T getZ() {        return b;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Auxiliary/Instantiable/Math/Vec4.java", "stars": "2", "class": {"name": "Vec4", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getW", "params": [], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public T getW() {        return a;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Auxiliary/Instantiable/Math/Vec4.java", "stars": "2", "class": {"name": "Vec4", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getCode() {    return code;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/DomainCheckResultVO.java", "stars": "2", "class": {"name": "DomainCheckResultVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setCode", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setCode(String code) {    this.code = code;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/DomainCheckResultVO.java", "stars": "2", "class": {"name": "DomainCheckResultVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getMsg", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getMsg() {    return msg;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/DomainCheckResultVO.java", "stars": "2", "class": {"name": "DomainCheckResultVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setMsg", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setMsg(String msg) {    this.msg = msg;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/DomainCheckResultVO.java", "stars": "2", "class": {"name": "DomainCheckResultVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getUrl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getUrl() {    return url;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/DomainCheckResultVO.java", "stars": "2", "class": {"name": "DomainCheckResultVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setUrl", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setUrl(String url) {    this.url = url;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/DomainCheckResultVO.java", "stars": "2", "class": {"name": "DomainCheckResultVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getCheckType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getCheckType() {    return checkType;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/DomainCheckResultVO.java", "stars": "2", "class": {"name": "DomainCheckResultVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setCheckType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setCheckType(String checkType) {    this.checkType = checkType;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/DomainCheckResultVO.java", "stars": "2", "class": {"name": "DomainCheckResultVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getMessage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getMessage() {    return message;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/DomainCheckResultVO.java", "stars": "2", "class": {"name": "DomainCheckResultVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setMessage", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setMessage(String message) {    this.message = message;  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/DomainCheckResultVO.java", "stars": "2", "class": {"name": "DomainCheckResultVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean equals(Object o) {    if (this == o) return true;    if (!(o instanceof DomainCheckResultVO)) return false;    DomainCheckResultVO that = (DomainCheckResultVO) o;    return Objects.equals(getCode(), that.getCode()) &&            Objects.equals(getMsg(), that.getMsg()) &&            Objects.equals(getUrl(), that.getUrl()) &&            Objects.equals(getCheckType(), that.getCheckType()) &&            Objects.equals(getMessage(), that.getMessage());  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/DomainCheckResultVO.java", "stars": "2", "class": {"name": "DomainCheckResultVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int hashCode() {    return Objects.hash(getCode(), getMsg(), getUrl(), getCheckType(), getMessage());  }", "url": "https://raw.githubusercontent.com/wechaturl/wechat_url_api_java_sdk/master/src/main/java/www/wechaturl/us/fangfeng/sdk/vo/DomainCheckResultVO.java", "stars": "2", "class": {"name": "DomainCheckResultVO", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getAppUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getAppUser() {        return appUser;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/auth/domain/UserExecNode.java", "stars": "23", "class": {"name": "UserExecNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAppUser", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAppUser(String appUser) {        this.appUser = appUser;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/auth/domain/UserExecNode.java", "stars": "23", "class": {"name": "UserExecNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecNodeId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getExecNodeId() {        return execNodeId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/auth/domain/UserExecNode.java", "stars": "23", "class": {"name": "UserExecNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setExecNodeId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setExecNodeId(Integer execNodeId) {        this.execNodeId = execNodeId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/auth/domain/UserExecNode.java", "stars": "23", "class": {"name": "UserExecNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCreateTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date getCreateTime() {        return createTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/auth/domain/UserExecNode.java", "stars": "23", "class": {"name": "UserExecNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCreateTime", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCreateTime(Date createTime) {        this.createTime = createTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/auth/domain/UserExecNode.java", "stars": "23", "class": {"name": "UserExecNode", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCases", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getCases ()    {        return cases;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllWorldCasePojo.java", "stars": "2", "class": {"name": "AllWorldCasePojo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCases", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCases (String cases)    {        this.cases = cases;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllWorldCasePojo.java", "stars": "2", "class": {"name": "AllWorldCasePojo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCritical", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getCritical ()    {        return critical;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllWorldCasePojo.java", "stars": "2", "class": {"name": "AllWorldCasePojo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCritical", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCritical (String critical)    {        this.critical = critical;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllWorldCasePojo.java", "stars": "2", "class": {"name": "AllWorldCasePojo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getActive", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getActive ()    {        return active;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllWorldCasePojo.java", "stars": "2", "class": {"name": "AllWorldCasePojo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setActive", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setActive (String active)    {        this.active = active;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllWorldCasePojo.java", "stars": "2", "class": {"name": "AllWorldCasePojo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTestsPerOneMillion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTestsPerOneMillion ()    {        return testsPerOneMillion;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllWorldCasePojo.java", "stars": "2", "class": {"name": "AllWorldCasePojo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTestsPerOneMillion", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTestsPerOneMillion (String testsPerOneMillion)    {        this.testsPerOneMillion = testsPerOneMillion;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllWorldCasePojo.java", "stars": "2", "class": {"name": "AllWorldCasePojo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAffectedCountries", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getAffectedCountries ()    {        return affectedCountries;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllWorldCasePojo.java", "stars": "2", "class": {"name": "AllWorldCasePojo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setAffectedCountries", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAffectedCountries (String affectedCountries)    {        this.affectedCountries = affectedCountries;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllWorldCasePojo.java", "stars": "2", "class": {"name": "AllWorldCasePojo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRecovered", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getRecovered ()    {        return recovered;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllWorldCasePojo.java", "stars": "2", "class": {"name": "AllWorldCasePojo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRecovered", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRecovered (String recovered)    {        this.recovered = recovered;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllWorldCasePojo.java", "stars": "2", "class": {"name": "AllWorldCasePojo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTests", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTests ()    {        return tests;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllWorldCasePojo.java", "stars": "2", "class": {"name": "AllWorldCasePojo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTests", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTests (String tests)    {        this.tests = tests;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllWorldCasePojo.java", "stars": "2", "class": {"name": "AllWorldCasePojo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDeathsPerOneMillion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDeathsPerOneMillion ()    {        return deathsPerOneMillion;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllWorldCasePojo.java", "stars": "2", "class": {"name": "AllWorldCasePojo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDeathsPerOneMillion", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDeathsPerOneMillion (String deathsPerOneMillion)    {        this.deathsPerOneMillion = deathsPerOneMillion;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllWorldCasePojo.java", "stars": "2", "class": {"name": "AllWorldCasePojo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCasesPerOneMillion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getCasesPerOneMillion ()    {        return casesPerOneMillion;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllWorldCasePojo.java", "stars": "2", "class": {"name": "AllWorldCasePojo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCasesPerOneMillion", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCasesPerOneMillion (String casesPerOneMillion)    {        this.casesPerOneMillion = casesPerOneMillion;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllWorldCasePojo.java", "stars": "2", "class": {"name": "AllWorldCasePojo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUpdated", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getUpdated ()    {        return updated;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllWorldCasePojo.java", "stars": "2", "class": {"name": "AllWorldCasePojo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUpdated", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUpdated (long updated)    {        this.updated = updated;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllWorldCasePojo.java", "stars": "2", "class": {"name": "AllWorldCasePojo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDeaths", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDeaths ()    {        return deaths;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllWorldCasePojo.java", "stars": "2", "class": {"name": "AllWorldCasePojo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDeaths", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDeaths (String deaths)    {        this.deaths = deaths;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllWorldCasePojo.java", "stars": "2", "class": {"name": "AllWorldCasePojo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTodayCases", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTodayCases ()    {        return todayCases;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllWorldCasePojo.java", "stars": "2", "class": {"name": "AllWorldCasePojo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTodayCases", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTodayCases (String todayCases)    {        this.todayCases = todayCases;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllWorldCasePojo.java", "stars": "2", "class": {"name": "AllWorldCasePojo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTodayDeaths", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTodayDeaths ()    {        return todayDeaths;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllWorldCasePojo.java", "stars": "2", "class": {"name": "AllWorldCasePojo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTodayDeaths", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTodayDeaths (String todayDeaths)    {        this.todayDeaths = todayDeaths;    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllWorldCasePojo.java", "stars": "2", "class": {"name": "AllWorldCasePojo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString()    {        return \"ClassPojo [cases = \"+cases+\", critical = \"+critical+\", active = \"+active+\", testsPerOneMillion = \"+testsPerOneMillion+\", affectedCountries = \"+affectedCountries+\", recovered = \"+recovered+\", tests = \"+tests+\", deathsPerOneMillion = \"+deathsPerOneMillion+\", casesPerOneMillion = \"+casesPerOneMillion+\", updated = \"+updated+\", deaths = \"+deaths+\", todayCases = \"+todayCases+\", todayDeaths = \"+todayDeaths+\"]\";    }", "url": "https://raw.githubusercontent.com/RzTutul/Covid-19/master/app/src/main/java/com/example/covid19/pojo/AllWorldCasePojo.java", "stars": "2", "class": {"name": "AllWorldCasePojo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadPropsInDir", "params": ["File", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Props", "snippet": "  public static Props loadPropsInDir(final File dir, final String... suffixes) {    return loadPropsInDir(null, dir, suffixes);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/PropsUtils.java", "stars": "18", "class": {"name": "PropsUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadPropsInDir", "params": ["Props", "File", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Props", "snippet": "  public static Props loadPropsInDir(final Props parent, final File dir, final String... suffixes) {    try {      final Props props = new Props(parent);      final File[] files = dir.listFiles();      Arrays.sort(files);      if (files != null) {        for (final File f : files) {          if (f.isFile() && endsWith(f, suffixes)) {            props.putAll(new Props(null, f.getAbsolutePath()));          }        }      }      return props;    } catch (final IOException e) {      throw new RuntimeException(\"Error loading properties.\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/PropsUtils.java", "stars": "18", "class": {"name": "PropsUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadProps", "params": ["Props", "File"], "throws": null, "modifiers": ["public", "static"], "return_type": "Props", "snippet": "  public static Props loadProps(final Props parent, final File... propFiles) {    try {      Props props = new Props(parent);      for (final File f : propFiles) {        if (f.isFile()) {          props = new Props(props, f);        }      }      return props;    } catch (final IOException e) {      throw new RuntimeException(\"Error loading properties.\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/PropsUtils.java", "stars": "18", "class": {"name": "PropsUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadPropsInDirs", "params": ["List<File>", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Props", "snippet": "  public static Props loadPropsInDirs(final List<File> dirs, final String... suffixes) {    final Props props = new Props();    for (final File dir : dirs) {      props.putLocal(loadPropsInDir(dir, suffixes));    }    return props;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/PropsUtils.java", "stars": "18", "class": {"name": "PropsUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadPropsBySuffix", "params": ["File", "Props", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void loadPropsBySuffix(final File jobPath, final Props props,      final String... suffixes) {    try {      if (jobPath.isDirectory()) {        final File[] files = jobPath.listFiles();        if (files != null) {          for (final File file : files) {            loadPropsBySuffix(file, props, suffixes);          }        }      } else if (endsWith(jobPath, suffixes)) {        props.putAll(new Props(null, jobPath.getAbsolutePath()));      }    } catch (final IOException e) {      throw new RuntimeException(\"Error loading schedule properties.\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/PropsUtils.java", "stars": "18", "class": {"name": "PropsUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "endsWith", "params": ["File", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "  public static boolean endsWith(final File file, final String... suffixes) {    for (final String suffix : suffixes) {      if (file.getName().endsWith(suffix)) {        return true;      }    }    return false;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/PropsUtils.java", "stars": "18", "class": {"name": "PropsUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isVariableReplacementPattern", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "  public static boolean isVariableReplacementPattern(final String str) {    final Matcher matcher = VARIABLE_REPLACEMENT_PATTERN.matcher(str);    return matcher.matches();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/PropsUtils.java", "stars": "18", "class": {"name": "PropsUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveProps", "params": ["Props"], "throws": null, "modifiers": ["public", "static"], "return_type": "Props", "snippet": "  public static Props resolveProps(final Props props) {    if (props == null) {      return null;    }    final Props resolvedProps = new Props();    final LinkedHashSet<String> visitedVariables = new LinkedHashSet<>();    for (final String key : props.getKeySet()) {      String value = props.get(key);      if (value == null) {        logger.warn(\"Null value in props for key '\" + key + \"'. Replacing with empty string.\");        value = \"\";      }      visitedVariables.add(key);      final String replacedValue =          resolveVariableReplacement(value, props, visitedVariables);      visitedVariables.clear();      resolvedProps.put(key, replacedValue);    }    for (final String key : resolvedProps.getKeySet()) {      final String value = resolvedProps.get(key);      final String expressedValue = resolveVariableExpression(value);      resolvedProps.put(key, expressedValue);    }    return resolvedProps;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/PropsUtils.java", "stars": "18", "class": {"name": "PropsUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveVariableReplacement", "params": ["String", "Props", "LinkedHashSet<String>"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String resolveVariableReplacement(final String value, final Props props,      final LinkedHashSet<String> visitedVariables) {    final StringBuffer buffer = new StringBuffer();    int startIndex = 0;    final Matcher matcher = VARIABLE_REPLACEMENT_PATTERN.matcher(value);    while (matcher.find(startIndex)) {      if (startIndex < matcher.start()) {        // Copy everything up front to the buffer        buffer.append(value.substring(startIndex, matcher.start()));      }      final String subVariable = matcher.group(1);      // Detected a cycle      if (visitedVariables.contains(subVariable)) {        throw new IllegalArgumentException(String.format(            \"Circular variable substitution found: [%s] -> [%s]\",            StringUtils.join(visitedVariables, \"->\"), subVariable));      } else {        // Add substitute variable and recurse.        final String replacement = props.get(subVariable);        visitedVariables.add(subVariable);        if (replacement == null) {          throw new UndefinedPropertyException(String.format(              \"Could not find variable substitution for variable(s) [%s]\",              StringUtils.join(visitedVariables, \"->\")));        }        buffer.append(resolveVariableReplacement(replacement, props,            visitedVariables));        visitedVariables.remove(subVariable);      }      startIndex = matcher.end();    }    if (startIndex < value.length()) {      buffer.append(value.substring(startIndex));    }    return buffer.toString();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/PropsUtils.java", "stars": "18", "class": {"name": "PropsUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveVariableExpression", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String resolveVariableExpression(final String value) {    final JexlEngine jexl = new JexlEngine();    return resolveVariableExpression(value, value.length(), jexl);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/PropsUtils.java", "stars": "18", "class": {"name": "PropsUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveVariableExpression", "params": ["String", "int", "JexlEngine"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String resolveVariableExpression(final String value, final int last,      final JexlEngine jexl) {    final int lastIndex = value.lastIndexOf(\"$(\", last);    if (lastIndex == -1) {      return value;    }    // Want to check that everything is well formed, and that    // we properly capture $( ...(...)...).    int bracketCount = 0;    int nextClosed = lastIndex + 2;    for (; nextClosed < value.length(); ++nextClosed) {      if (value.charAt(nextClosed) == '(') {        bracketCount++;      } else if (value.charAt(nextClosed) == ')') {        bracketCount--;        if (bracketCount == -1) {          break;        }      }    }    if (nextClosed == value.length()) {      throw new IllegalArgumentException(\"Expression \" + value          + \" not well formed.\");    }    final String innerExpression = value.substring(lastIndex + 2, nextClosed);    Object result = null;    try {      final Expression e = jexl.createExpression(innerExpression);      result = e.evaluate(new MapContext());    } catch (final JexlException e) {      throw new IllegalArgumentException(\"Expression \" + value          + \" not well formed. \" + e.getMessage(), e);    }    if (result == null) {      // for backward compatibility it is best to return value      return value;    }    final String newValue =        value.substring(0, lastIndex) + result.toString()            + value.substring(nextClosed + 1);    return resolveVariableExpression(newValue, lastIndex, jexl);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/PropsUtils.java", "stars": "18", "class": {"name": "PropsUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toJSONString", "params": ["Props", "boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String toJSONString(final Props props, final boolean localOnly) {    final Map<String, String> map = toStringMap(props, localOnly);    return JSONUtils.toJSON(map);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/PropsUtils.java", "stars": "18", "class": {"name": "PropsUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toStringMap", "params": ["Props", "boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "Map<String,String>", "snippet": "  public static Map<String, String> toStringMap(final Props props, final boolean localOnly) {    final HashMap<String, String> map = new HashMap<>();    final Set<String> keyset = localOnly ? props.localKeySet() : props.getKeySet();    for (final String key : keyset) {      final String value = props.get(key);      map.put(key, value);    }    return map;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/PropsUtils.java", "stars": "18", "class": {"name": "PropsUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fromJSONString", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "Props", "snippet": "  public static Props fromJSONString(final String json) throws IOException {    final Map<String, String> obj = (Map<String, String>) JSONUtils.parseJSONFromString(json);    final Props props = new Props(null, obj);    return props;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/PropsUtils.java", "stars": "18", "class": {"name": "PropsUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fromHierarchicalMap", "params": ["Map<String,Object>"], "throws": null, "modifiers": ["public", "static"], "return_type": "Props", "snippet": "  public static Props fromHierarchicalMap(final Map<String, Object> propsMap) {    if (propsMap == null) {      return null;    }    final String source = (String) propsMap.get(\"source\");    final Map<String, String> propsParams =        (Map<String, String>) propsMap.get(\"props\");    final Map<String, Object> parent = (Map<String, Object>) propsMap.get(\"parent\");    final Props parentProps = fromHierarchicalMap(parent);    final Props props = new Props(parentProps, propsParams);    props.setSource(source);    return props;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/PropsUtils.java", "stars": "18", "class": {"name": "PropsUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toHierarchicalMap", "params": ["Props"], "throws": null, "modifiers": ["public", "static"], "return_type": "Map<String,Object>", "snippet": "  public static Map<String, Object> toHierarchicalMap(final Props props) {    final Map<String, Object> propsMap = new HashMap<>();    propsMap.put(\"source\", props.getSource());    propsMap.put(\"props\", toStringMap(props, true));    if (props.getParent() != null) {      propsMap.put(\"parent\", toHierarchicalMap(props.getParent()));    }    return propsMap;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/PropsUtils.java", "stars": "18", "class": {"name": "PropsUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toHierarchicalMapByLoop", "params": ["Props"], "throws": null, "modifiers": ["public", "static"], "return_type": "Map<String,Object>", "snippet": "  public static Map<String, Object> toHierarchicalMapByLoop(Props props) {    Stack<Props> stack = new Stack<>();    Map<String, Object> propsMap = new HashMap<>();    stack.push(props);    LinkedList<Map<String, Object>> list = new LinkedList<>();    while (!stack.isEmpty()){      props = stack.pop();      Map<String, Object> tmpMap = new HashMap<>();      tmpMap.put(\"source\", props.getSource());      tmpMap.put(\"props\", toStringMap(props, true));      list.push(tmpMap);      if(props.getParent() != null){        stack.push(props.getParent());      }    }    while (!list.isEmpty()){      //\u53d6\u51fa\u6700\u540e\u4e00\u4e2a      Map<String, Object> tmpMap = list.pop();      if(propsMap.size() == 0) {        propsMap.putAll(tmpMap);      } else {        tmpMap.put(\"parent\", propsMap);        propsMap = tmpMap;      }    }    return propsMap;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/PropsUtils.java", "stars": "18", "class": {"name": "PropsUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPropertyDiff", "params": ["Props", "Props"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "  public static String getPropertyDiff(Props oldProps, Props newProps) {    final StringBuilder builder = new StringBuilder(\"\");    // oldProps can not be null during the below comparison process.    if (oldProps == null) {      oldProps = new Props();    }    if (newProps == null) {      newProps = new Props();    }    final MapDifference<String, String> md =        Maps.difference(toStringMap(oldProps, false), toStringMap(newProps, false));    final Map<String, String> newlyCreatedProperty = md.entriesOnlyOnRight();    if (newlyCreatedProperty != null && newlyCreatedProperty.size() > 0) {      builder.append(\"Newly created Properties: \");      newlyCreatedProperty.forEach((k, v) -> {        builder.append(\"[ \" + k + \", \" + v + \"], \");      });      builder.append(\"\\n\");    }    final Map<String, String> deletedProperty = md.entriesOnlyOnLeft();    if (deletedProperty != null && deletedProperty.size() > 0) {      builder.append(\"Deleted Properties: \");      deletedProperty.forEach((k, v) -> {        builder.append(\"[ \" + k + \", \" + v + \"], \");      });      builder.append(\"\\n\");    }    final Map<String, MapDifference.ValueDifference<String>> diffProperties = md.entriesDiffering();    if (diffProperties != null && diffProperties.size() > 0) {      builder.append(\"Modified Properties: \");      diffProperties.forEach((k, v) -> {        builder.append(\"[ \" + k + \", \" + v.leftValue() + \"-->\" + v.rightValue() + \"], \");      });    }    return builder.toString();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/utils/PropsUtils.java", "stars": "18", "class": {"name": "PropsUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initFragment", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initFragment() {        ButterKnife.bind(this, getView());        if (getTitleBar() != null) {            getTitleBar().setOnTitleBarListener(this);        }        initImmersion();        super.initFragment();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyFragment.java", "stars": "1", "class": {"name": "MyFragment", "extends": "BaseFragment", "implements": ["ToastAction", "TitleBarAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "initImmersion", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initImmersion() {        // \u521d\u59cb\u5316\u6c89\u6d78\u5f0f\u72b6\u6001\u680f        if (isStatusBarEnabled()) {            statusBarConfig().init();            // \u8bbe\u7f6e\u6807\u9898\u680f\u6c89\u6d78            if (mTitleBar != null) {                ImmersionBar.setTitleBar(this, mTitleBar);            }        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyFragment.java", "stars": "1", "class": {"name": "MyFragment", "extends": "BaseFragment", "implements": ["ToastAction", "TitleBarAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "isStatusBarEnabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isStatusBarEnabled() {        return false;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyFragment.java", "stars": "1", "class": {"name": "MyFragment", "extends": "BaseFragment", "implements": ["ToastAction", "TitleBarAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "getStatusBarConfig", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "ImmersionBar", "snippet": "    protected ImmersionBar getStatusBarConfig() {        return mImmersionBar;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyFragment.java", "stars": "1", "class": {"name": "MyFragment", "extends": "BaseFragment", "implements": ["ToastAction", "TitleBarAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "statusBarConfig", "params": [], "throws": null, "modifiers": ["private"], "return_type": "ImmersionBar", "snippet": "    private ImmersionBar statusBarConfig() {        //\u5728BaseActivity\u91cc\u521d\u59cb\u5316        mImmersionBar = ImmersionBar.with(this)                // \u9ed8\u8ba4\u72b6\u6001\u680f\u5b57\u4f53\u989c\u8272\u4e3a\u9ed1\u8272                .statusBarDarkFont(statusBarDarkFont())                // \u89e3\u51b3\u8f6f\u952e\u76d8\u4e0e\u5e95\u90e8\u8f93\u5165\u6846\u51b2\u7a81\u95ee\u9898\uff0c\u9ed8\u8ba4\u4e3afalse\uff0c\u8fd8\u6709\u4e00\u4e2a\u91cd\u8f7d\u65b9\u6cd5\uff0c\u53ef\u4ee5\u6307\u5b9a\u8f6f\u952e\u76d8mode                .keyboardEnable(true);        return mImmersionBar;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyFragment.java", "stars": "1", "class": {"name": "MyFragment", "extends": "BaseFragment", "implements": ["ToastAction", "TitleBarAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "statusBarDarkFont", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean statusBarDarkFont() {        // \u8fd4\u56de\u771f\u8868\u793a\u9ed1\u8272\u5b57\u4f53        return true;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyFragment.java", "stars": "1", "class": {"name": "MyFragment", "extends": "BaseFragment", "implements": ["ToastAction", "TitleBarAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "getTitleBar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TitleBar", "snippet": "    public TitleBar getTitleBar() {        if (mTitleBar == null) {            mTitleBar = findTitleBar((ViewGroup) getView());        }        return mTitleBar;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyFragment.java", "stars": "1", "class": {"name": "MyFragment", "extends": "BaseFragment", "implements": ["ToastAction", "TitleBarAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "isShowDialog", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isShowDialog() {        return getAttachActivity().isShowDialog();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyFragment.java", "stars": "1", "class": {"name": "MyFragment", "extends": "BaseFragment", "implements": ["ToastAction", "TitleBarAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "showDialog", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void showDialog() {        getAttachActivity().showDialog();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyFragment.java", "stars": "1", "class": {"name": "MyFragment", "extends": "BaseFragment", "implements": ["ToastAction", "TitleBarAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "hideDialog", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void hideDialog() {        getAttachActivity().hideDialog();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyFragment.java", "stars": "1", "class": {"name": "MyFragment", "extends": "BaseFragment", "implements": ["ToastAction", "TitleBarAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onResume() {        super.onResume();        // \u91cd\u65b0\u521d\u59cb\u5316\u72b6\u6001\u680f        statusBarConfig().init();        UmengClient.onResume(this);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyFragment.java", "stars": "1", "class": {"name": "MyFragment", "extends": "BaseFragment", "implements": ["ToastAction", "TitleBarAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "onPause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPause() {        UmengClient.onPause(this);        super.onPause();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyFragment.java", "stars": "1", "class": {"name": "MyFragment", "extends": "BaseFragment", "implements": ["ToastAction", "TitleBarAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "onDetach", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDetach() {        EasyHttp.cancel(this);        super.onDetach();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyFragment.java", "stars": "1", "class": {"name": "MyFragment", "extends": "BaseFragment", "implements": ["ToastAction", "TitleBarAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "getBrandList", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CommonResult<List>", "snippet": "    public CommonResult<List<PmsBrand>> getBrandList() {        return CommonResult.success(brandService.listAllBrand());    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/controller/PmsBrandController.java", "stars": "2", "class": {"name": "PmsBrandController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createBrand", "params": ["PmsBrand"], "throws": null, "modifiers": ["public"], "return_type": "CommonResult", "snippet": "    public CommonResult createBrand(@RequestBody PmsBrand pmsBrand) {        CommonResult commonResult;        int count = brandService.createBrand(pmsBrand);        if (count == 1) {            commonResult = CommonResult.success(pmsBrand);            LOGGER.debug(\"createBrand success:{}\", pmsBrand);        } else {            commonResult = CommonResult.failed(\"\u64cd\u4f5c\u5931\u8d25\");            LOGGER.debug(\"createBrand failed:{}\", pmsBrand);        }        return commonResult;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/controller/PmsBrandController.java", "stars": "2", "class": {"name": "PmsBrandController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateBrand", "params": ["Long", "PmsBrand", "BindingResult"], "throws": null, "modifiers": ["public"], "return_type": "CommonResult", "snippet": "    public CommonResult updateBrand(@PathVariable(\"id\") Long id, @RequestBody PmsBrand pmsBrandDto, BindingResult result) {        CommonResult commonResult;        int count = brandService.updateBrand(id, pmsBrandDto);        if (count == 1) {            commonResult = CommonResult.success(pmsBrandDto);            LOGGER.debug(\"updateBrand success:{}\", pmsBrandDto);        } else {            commonResult = CommonResult.failed(\"\u64cd\u4f5c\u5931\u8d25\");            LOGGER.debug(\"updateBrand failed:{}\", pmsBrandDto);        }        return commonResult;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/controller/PmsBrandController.java", "stars": "2", "class": {"name": "PmsBrandController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteBrand", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "CommonResult", "snippet": "    public CommonResult deleteBrand(@PathVariable(\"id\") Long id) {        int count = brandService.deleteBrand(id);        if (count == 1) {            LOGGER.debug(\"deleteBrand success :id={}\", id);            return CommonResult.success(null);        } else {            LOGGER.debug(\"deleteBrand failed :id={}\", id);            return CommonResult.failed(\"\u64cd\u4f5c\u5931\u8d25\");        }    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/controller/PmsBrandController.java", "stars": "2", "class": {"name": "PmsBrandController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "listBrand", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "CommonResult<CommonPage>", "snippet": "    public CommonResult<CommonPage<PmsBrand>> listBrand(@RequestParam(value = \"pageNum\", defaultValue = \"1\")                                                        @ApiParam(\"\u9875\u7801\") Integer pageNum,                                                        @RequestParam(value = \"pageSize\", defaultValue = \"3\")                                                        @ApiParam(\"\u6bcf\u9875\u6570\u91cf\") Integer pageSize) {        List<PmsBrand> brandList = brandService.listBrand(pageNum, pageSize);        return CommonResult.success(CommonPage.restPage(brandList));    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/controller/PmsBrandController.java", "stars": "2", "class": {"name": "PmsBrandController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "brand", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "CommonResult<PmsBrand>", "snippet": "    public CommonResult<PmsBrand> brand(@PathVariable(\"id\") Long id) {        return CommonResult.success(brandService.getBrand(id));    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/controller/PmsBrandController.java", "stars": "2", "class": {"name": "PmsBrandController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "builder", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "NettyServerGroupBuilder", "snippet": "  public static NettyServerGroupBuilder builder() {    return new NettyServerGroupBuilder();  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyServerGroup.java", "stars": "3", "class": {"name": "NettyServerGroup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBossGroup", "params": [], "throws": null, "modifiers": [], "return_type": "EventLoopGroup", "snippet": "  EventLoopGroup getBossGroup() {    return bossGroup;  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyServerGroup.java", "stars": "3", "class": {"name": "NettyServerGroup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getWorkGroup", "params": [], "throws": null, "modifiers": [], "return_type": "EventLoopGroup", "snippet": "  EventLoopGroup getWorkGroup() {    return workGroup;  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyServerGroup.java", "stars": "3", "class": {"name": "NettyServerGroup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getChannelClass", "params": [], "throws": null, "modifiers": [], "return_type": "Class<ServerChannel>", "snippet": "  Class<? extends ServerChannel> getChannelClass() {    return channelClass;  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyServerGroup.java", "stars": "3", "class": {"name": "NettyServerGroup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "bossGroup", "params": ["EventLoopGroup"], "throws": null, "modifiers": ["public"], "return_type": "NettyServerGroup", "snippet": "    public NettyServerGroup.NettyServerGroupBuilder bossGroup(EventLoopGroup bossGroup) {      this.bossGroup = bossGroup;      return this;    }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyServerGroup.java", "stars": "3", "class": {"name": "NettyServerGroupBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "workGroup", "params": ["EventLoopGroup"], "throws": null, "modifiers": ["public"], "return_type": "NettyServerGroup", "snippet": "    public NettyServerGroup.NettyServerGroupBuilder workGroup(EventLoopGroup workGroup) {      this.workGroup = workGroup;      return this;    }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyServerGroup.java", "stars": "3", "class": {"name": "NettyServerGroupBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "channelClass", "params": ["Class<ServerChannel>"], "throws": null, "modifiers": ["public"], "return_type": "NettyServerGroup", "snippet": "    public NettyServerGroup.NettyServerGroupBuilder channelClass(Class<? extends ServerChannel> channelClass) {      this.channelClass = channelClass;      return this;    }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyServerGroup.java", "stars": "3", "class": {"name": "NettyServerGroupBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "build", "params": [], "throws": null, "modifiers": ["public"], "return_type": "NettyServerGroup", "snippet": "    public NettyServerGroup build() {      return new NettyServerGroup(this.bossGroup, this.workGroup, this.channelClass);    }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyServerGroup.java", "stars": "3", "class": {"name": "NettyServerGroupBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "APIConnector", "snippet": "    public static APIConnector getInstance() {        if (connector == null) {            connector = new APIConnector();        }        return connector;    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/API/APIConnector.java", "stars": "1", "class": {"name": "APIConnector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setContext", "params": ["Context"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setContext(Context context) {        this.context = context;        requestQueue = Volley.newRequestQueue(context);    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/API/APIConnector.java", "stars": "1", "class": {"name": "APIConnector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "login", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void login() {        if (CredentialsManager.getInstance().hasCredentials()) {            String url = CredentialsManager.getInstance().getCredentials().hostname + \"/api/login\";            CustomRequest request = new CustomRequest(Request.Method.GET, url, null, new Response.Listener<JSONObject>() {                @Override                public void onResponse(JSONObject response) {                    try {                        String token = response.getString(\"token\");                        if (!token.isEmpty()) {                            CredentialsManager.getInstance().setToken(token);                        }                    } catch (JSONException e) {                        e.printStackTrace();                    }                }            }, new Response.ErrorListener() {                @Override                public void onErrorResponse(VolleyError error) {                    error.printStackTrace();                }            });            requestQueue.add(request);        }    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/API/APIConnector.java", "stars": "1", "class": {"name": "APIConnector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getServiceStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "HashMap<Service,Boolean>", "snippet": "    public HashMap<Service, Boolean> getServiceStatus() {        final HashMap<Service, Boolean> output = new HashMap<>();        if (CredentialsManager.getInstance().hasCredentials()) {            String url = CredentialsManager.getInstance().getCredentials().hostname + \"/api/status\";            CustomRequest request = new CustomRequest(Request.Method.GET, url, null, new Response.Listener<JSONObject>() {                @Override                public void onResponse(JSONObject response) {                    try {                        JSONObject mongo = response.getJSONObject(\"mongo\");                        JSONObject docker = response.getJSONObject(\"docker\");                        output.put(Service.MONGO, mongo.getBoolean(\"is_up\"));                        output.put(Service.DOCKER, docker.getBoolean(\"is_up\"));                    } catch (JSONException e) {                        e.printStackTrace();                    }                }            }, new Response.ErrorListener() {                @Override                public void onErrorResponse(VolleyError error) {                    error.printStackTrace();                }            });            requestQueue.add(request);        }        return output;    }", "url": "https://raw.githubusercontent.com/harvestcore/ipmdroid/master/app/src/main/java/com/agm/ipmanager/API/APIConnector.java", "stars": "1", "class": {"name": "APIConnector", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "\tprotected void onCreate(Bundle savedInstanceState) {\t\tsuper.onCreate(savedInstanceState);\t\tsetContentView(R.layout.main);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/HBfragment/src/com/example/hbfragment/RssfeedActivity.java", "stars": "74", "class": {"name": "RssfeedActivity", "extends": "Activity", "implements": ["MyListFragment"], "modifiers": ["public"]}}, {"method_name": "onCreateOptionsMenu", "params": ["Menu"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onCreateOptionsMenu(Menu menu) {\t\t// Inflate the menu; this adds items to the action bar if it is present.\t\tgetMenuInflater().inflate(R.menu.rssfeed, menu);\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/HBfragment/src/com/example/hbfragment/RssfeedActivity.java", "stars": "74", "class": {"name": "RssfeedActivity", "extends": "Activity", "implements": ["MyListFragment"], "modifiers": ["public"]}}, {"method_name": "onRssItemSelected", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t  public void onRssItemSelected(String link) {\t    DetailFragment fragment = (DetailFragment) getFragmentManager()\t            .findFragmentById(R.id.detailFragment);\t        if (fragment != null && fragment.isInLayout()) {\t          fragment.setText(link);\t        } \t  }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/HBfragment/src/com/example/hbfragment/RssfeedActivity.java", "stars": "74", "class": {"name": "RssfeedActivity", "extends": "Activity", "implements": ["MyListFragment"], "modifiers": ["public"]}}, {"method_name": "loadDocument", "params": ["ContentHandler", "Uri"], "throws": ["IOException"], "modifiers": ["private", "static"], "return_type": "DocumentInfo", "snippet": "    private static DocumentInfo loadDocument(ContentHandler handler, Uri uri) throws IOException {        String spec = uri.toString();        URL url = new URL(spec);        URLConnection connection = url.openConnection();        Object content = handler.getContent(connection);        if (content instanceof DocumentInfo) {            return (DocumentInfo) content;        } else {            String message = \"ContentHandler must return FeedLoader.documentInfo(...)\";            throw new RuntimeException(message);        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/feeds/FeedLoader.java", "stars": "74", "class": {"name": "FeedLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadFeed", "params": ["ContentHandler", "Uri"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void loadFeed(ContentHandler handler, Uri documentUri) throws IOException {        loadDocument(handler, documentUri);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/feeds/FeedLoader.java", "stars": "74", "class": {"name": "FeedLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadIndexedFeed", "params": ["ContentHandler", "Uri", "String", "int", "int", "int", "Bundle"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void loadIndexedFeed(ContentHandler handler, Uri baseDocumentUri,            String indexParameter, int firstIndex, int pageSize, int itemCount, Bundle extras)            throws IOException {        int totalCount = 0;        int index = firstIndex;        boolean hasMore;        do {            // Get the rows for the current page            Uri.Builder documentUri = baseDocumentUri.buildUpon();            documentUri.appendQueryParameter(indexParameter, Integer.toString(index));            DocumentInfo document = loadDocument(handler, documentUri.build());            int documentItemCount = document.itemCount();            if (documentItemCount < 0) {                throw new RuntimeException(\"Invalid document info: item count is unset or invalid\");            }            // If the page is full, there are probably more pages            hasMore = documentItemCount >= pageSize;            extras.putBoolean(FeedExtras.EXTRA_MORE, hasMore);            // Update the current index            index += documentItemCount;            totalCount += documentItemCount;        } while (totalCount < itemCount && hasMore);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/feeds/FeedLoader.java", "stars": "74", "class": {"name": "FeedLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadPagedFeed", "params": ["ContentHandler", "Uri", "String", "int", "int", "int", "Bundle"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void loadPagedFeed(ContentHandler handler, Uri baseDocumentUri,            String pageParameter, int firstPage, int pageSize, int itemCount, Bundle extras)            throws IOException {        int totalCount = 0;        int page = firstPage;        boolean morePages;        do {            // Get the rows for the current page            Uri.Builder documentUri = baseDocumentUri.buildUpon();            documentUri.appendQueryParameter(pageParameter, Integer.toString(page));            DocumentInfo document = loadDocument(handler, documentUri.build());            int documentItemCount = document.itemCount();            if (documentItemCount < 0) {                throw new RuntimeException(\"Invalid document info: item count is unset or invalid\");            }            // If the page is full, there are probably more pages            morePages = documentItemCount >= pageSize;            extras.putBoolean(FeedExtras.EXTRA_MORE, morePages);            // Set the next page number            page += 1;            totalCount += documentItemCount;        } while (totalCount < itemCount && morePages);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/feeds/FeedLoader.java", "stars": "74", "class": {"name": "FeedLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "loadContinuedFeed", "params": ["ContentHandler", "Uri", "String", "int", "Bundle"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void loadContinuedFeed(ContentHandler handler, Uri baseDocumentUri,            String continuationParameter, int itemCount, Bundle extras) throws IOException {        int totalCount = 0;        String continuation = null;        do {            Uri.Builder documentUri = baseDocumentUri.buildUpon();            if (continuation != null) {                documentUri.appendQueryParameter(continuationParameter, continuation);            }            DocumentInfo document = loadDocument(handler, documentUri.build());            continuation = document.continuationToken();            extras.putBoolean(FeedExtras.EXTRA_MORE, continuation != null);            int documentItemCount = document.itemCount();            if (documentItemCount < 0) {                throw new RuntimeException(\"Invalid document info: item count is unset or invalid\");            }            totalCount += documentItemCount;        } while (totalCount < itemCount && continuation != null);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/feeds/FeedLoader.java", "stars": "74", "class": {"name": "FeedLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "documentInfo", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Object", "snippet": "    public static Object documentInfo() {        return new DocumentInfo();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/feeds/FeedLoader.java", "stars": "74", "class": {"name": "FeedLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "documentInfo", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "Object", "snippet": "    public static Object documentInfo(int itemCount) {        return new DocumentInfo(itemCount);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/feeds/FeedLoader.java", "stars": "74", "class": {"name": "FeedLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "documentInfo", "params": ["int", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Object", "snippet": "    public static Object documentInfo(int itemCount, String continuationToken) {        return new DocumentInfo(itemCount, continuationToken);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/feeds/FeedLoader.java", "stars": "74", "class": {"name": "FeedLoader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "itemCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int itemCount() {            return mItemCount;        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/feeds/FeedLoader.java", "stars": "74", "class": {"name": "DocumentInfo", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "continuationToken", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String continuationToken() {            return mContinuationToken;        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/feeds/FeedLoader.java", "stars": "74", "class": {"name": "DocumentInfo", "extends": null, "implements": null, "modifiers": ["private", "static"]}}, {"method_name": "run", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void run(String... args) {\t\tSystem.out.println(this.helloWorldService.getHelloMessage());\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-aop/src/main/java/smoketest/aop/SampleAopApplication.java", "stars": "47572", "class": {"name": "SampleAopApplication", "extends": null, "implements": ["CommandLineRunner"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tSpringApplication.run(SampleAopApplication.class, args);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-aop/src/main/java/smoketest/aop/SampleAopApplication.java", "stars": "47572", "class": {"name": "SampleAopApplication", "extends": null, "implements": ["CommandLineRunner"], "modifiers": ["public"]}}, {"method_name": "music", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "MusicUploadRequest", "snippet": "  public MusicUploadRequest music(String music) {    this.music = music;    return this;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/MusicUploadRequest.java", "stars": "2", "class": {"name": "MusicUploadRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMusic", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getMusic() {    return music;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/MusicUploadRequest.java", "stars": "2", "class": {"name": "MusicUploadRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMusic", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setMusic(String music) {    this.music = music;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/MusicUploadRequest.java", "stars": "2", "class": {"name": "MusicUploadRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "name", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "MusicUploadRequest", "snippet": "  public MusicUploadRequest name(String name) {    this.name = name;    return this;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/MusicUploadRequest.java", "stars": "2", "class": {"name": "MusicUploadRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getName() {    return name;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/MusicUploadRequest.java", "stars": "2", "class": {"name": "MusicUploadRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setName(String name) {    this.name = name;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/MusicUploadRequest.java", "stars": "2", "class": {"name": "MusicUploadRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "description", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "MusicUploadRequest", "snippet": "  public MusicUploadRequest description(String description) {    this.description = description;    return this;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/MusicUploadRequest.java", "stars": "2", "class": {"name": "MusicUploadRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDescription", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getDescription() {    return description;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/MusicUploadRequest.java", "stars": "2", "class": {"name": "MusicUploadRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDescription", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setDescription(String description) {    this.description = description;  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/MusicUploadRequest.java", "stars": "2", "class": {"name": "MusicUploadRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean equals(java.lang.Object o) {    if (this == o) {      return true;    }    if (o == null || getClass() != o.getClass()) {      return false;    }    MusicUploadRequest musicUploadRequest = (MusicUploadRequest) o;    return Objects.equals(this.music, musicUploadRequest.music) &&        Objects.equals(this.name, musicUploadRequest.name) &&        Objects.equals(this.description, musicUploadRequest.description);  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/MusicUploadRequest.java", "stars": "2", "class": {"name": "MusicUploadRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int hashCode() {    return Objects.hash(music, name, description);  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/MusicUploadRequest.java", "stars": "2", "class": {"name": "MusicUploadRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    StringBuilder sb = new StringBuilder();    sb.append(\"class MusicUploadRequest {\\n\");        sb.append(\"    music: \").append(toIndentedString(music)).append(\"\\n\");    sb.append(\"    name: \").append(toIndentedString(name)).append(\"\\n\");    sb.append(\"    description: \").append(toIndentedString(description)).append(\"\\n\");    sb.append(\"}\");    return sb.toString();  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/MusicUploadRequest.java", "stars": "2", "class": {"name": "MusicUploadRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toIndentedString", "params": ["java"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "  private String toIndentedString(java.lang.Object o) {    if (o == null) {      return \"null\";    }    return o.toString().replace(\"\\n\", \"\\n    \");  }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/com/upgrad/musichoster/api/model/MusicUploadRequest.java", "stars": "2", "class": {"name": "MusicUploadRequest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //\u4f7f\u7528\u963f\u91cc\u5df4\u5df4\u63a8\u8350\u7684\u521b\u5efa\u7ebf\u7a0b\u6c60\u7684\u65b9\u5f0f        //\u901a\u8fc7ThreadPoolExecutor\u6784\u9020\u51fd\u6570\u81ea\u5b9a\u4e49\u53c2\u6570\u521b\u5efa        ThreadPoolExecutor executor = new ThreadPoolExecutor(                CORE_POOL_SIZE,                MAX_POOL_SIZE,                KEEP_ALIVE_TIME,                TimeUnit.SECONDS,                new ArrayBlockingQueue<>(QUEUE_CAPACITY),                new ThreadPoolExecutor.CallerRunsPolicy());        List<Future<String>> futureList = new ArrayList<>();        Callable<String> callable = new MyCallable();        for (int i = 0; i < 10; i++) {            //\u63d0\u4ea4\u4efb\u52a1\u5230\u7ebf\u7a0b\u6c60            Future<String> future = executor.submit(callable);            //\u5c06\u8fd4\u56de\u503c future \u6dfb\u52a0\u5230 list\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 future \u83b7\u5f97 \u6267\u884c Callable \u5f97\u5230\u7684\u8fd4\u56de\u503c            futureList.add(future);        }        for (Future<String> fut : futureList) {            try {                System.out.println(new Date() + \"::\" + fut.get());            } catch (InterruptedException | ExecutionException e) {                e.printStackTrace();            }        }        //\u5173\u95ed\u7ebf\u7a0b\u6c60        executor.shutdown();    }", "url": "https://raw.githubusercontent.com/Snailclimb/JavaGuide/master/code/java/ThreadPoolExecutorDemo/src/callable/CallableDemo.java", "stars": "78246", "class": {"name": "CallableDemo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onOpen", "params": ["ServerHandshake"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onOpen(ServerHandshake handshakedata) {\t\t// TODO \u81ea\u52a8\u751f\u6210\u7684\u65b9\u6cd5\u5b58\u6839\t\tSystem.out.println(\"open\");\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/conf/Websocket.java", "stars": "3", "class": {"name": "Websocket", "extends": "WebSocketClient", "implements": null, "modifiers": ["public"]}}, {"method_name": "onMessage", "params": ["ByteBuffer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onMessage(ByteBuffer message) {\t\t// TODO \u81ea\u52a8\u751f\u6210\u7684\u65b9\u6cd5\u5b58\u6839\t\tPrintUtils.ByteBufferToString(message);\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/conf/Websocket.java", "stars": "3", "class": {"name": "Websocket", "extends": "WebSocketClient", "implements": null, "modifiers": ["public"]}}, {"method_name": "onClose", "params": ["int", "String", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onClose(int code, String reason, boolean remote) {\t\t// TODO \u81ea\u52a8\u751f\u6210\u7684\u65b9\u6cd5\u5b58\u6839\t\t System.out.println(\"closed\");\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/conf/Websocket.java", "stars": "3", "class": {"name": "Websocket", "extends": "WebSocketClient", "implements": null, "modifiers": ["public"]}}, {"method_name": "onError", "params": ["Exception"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onError(Exception ex) {\t\t// TODO \u81ea\u52a8\u751f\u6210\u7684\u65b9\u6cd5\u5b58\u6839\t\tex.printStackTrace();\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/conf/Websocket.java", "stars": "3", "class": {"name": "Websocket", "extends": "WebSocketClient", "implements": null, "modifiers": ["public"]}}, {"method_name": "onMessage", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onMessage(String message) {\t\t// TODO \u81ea\u52a8\u751f\u6210\u7684\u65b9\u6cd5\u5b58\u6839\t\t\t}", "url": "https://raw.githubusercontent.com/BanqiJane/Bilibili_Danmuji/master/Bilibilidanmuji/src/main/java/xyz/acproject/danmuji/conf/Websocket.java", "stars": "3", "class": {"name": "Websocket", "extends": "WebSocketClient", "implements": null, "modifiers": ["public"]}}, {"method_name": "doFilter", "params": ["ServletRequest", "ServletResponse", "FilterChain"], "throws": ["IOException", "ServletException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void doFilter(ServletRequest request, ServletResponse response,            FilterChain chain) throws IOException, ServletException {        HttpServletResponse res = (HttpServletResponse) response;        res.addHeader(\"Access-Control-Allow-Origin\", \"*\");        res.addHeader(\"Access-Control-Allow-Methods\", \"GET, POST, DELETE, PUT\");        res.addHeader(\"Access-Control-Allow-Headers\", \"Content-Type\");        chain.doFilter(request, response);    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/io/swagger/api/ApiOriginFilter.java", "stars": "2", "class": {"name": "ApiOriginFilter", "extends": null, "implements": ["javax"], "modifiers": ["public"]}}, {"method_name": "destroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void destroy() {    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/io/swagger/api/ApiOriginFilter.java", "stars": "2", "class": {"name": "ApiOriginFilter", "extends": null, "implements": ["javax"], "modifiers": ["public"]}}, {"method_name": "init", "params": ["FilterConfig"], "throws": ["ServletException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void init(FilterConfig filterConfig) throws ServletException {    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/target/generated-sources/io/swagger/api/ApiOriginFilter.java", "stars": "2", "class": {"name": "ApiOriginFilter", "extends": null, "implements": ["javax"], "modifiers": ["public"]}}, {"method_name": "isMoving", "params": ["EntityLivingBase"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isMoving(EntityLivingBase entity) {        return entity.moveForward != 0 || entity.moveStrafing != 0;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/MotionUtil.java", "stars": "12", "class": {"name": "MotionUtil", "extends": null, "implements": ["Util"], "modifiers": ["public"]}}, {"method_name": "setSpeed", "params": ["EntityLivingBase", "double"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void setSpeed(final EntityLivingBase entity, final double speed) {        double dir[] = forward(speed);        entity.motionX = dir[0];        entity.motionZ = dir[1];    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/MotionUtil.java", "stars": "12", "class": {"name": "MotionUtil", "extends": null, "implements": ["Util"], "modifiers": ["public"]}}, {"method_name": "getBaseMoveSpeed", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "double", "snippet": "    public static double getBaseMoveSpeed() {        double baseSpeed = 0.2873;        if (mc.player != null && mc.player.isPotionActive(Potion.getPotionById(1))) {            final int amplifier = mc.player.getActivePotionEffect(Potion.getPotionById(1)).getAmplifier();            baseSpeed *= 1.0 + 0.2 * (amplifier + 1);        }        return baseSpeed;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/MotionUtil.java", "stars": "12", "class": {"name": "MotionUtil", "extends": null, "implements": ["Util"], "modifiers": ["public"]}}, {"method_name": "getSpeed", "params": ["EntityLivingBase"], "throws": null, "modifiers": ["public", "static"], "return_type": "double", "snippet": "    public static double getSpeed(final EntityLivingBase entity) {        return Math.sqrt((entity.motionX * entity.motionX) + (entity.motionZ * entity.motionZ));    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/MotionUtil.java", "stars": "12", "class": {"name": "MotionUtil", "extends": null, "implements": ["Util"], "modifiers": ["public"]}}, {"method_name": "forward", "params": ["double"], "throws": null, "modifiers": ["public", "static"], "return_type": "double", "snippet": "    public static double[] forward(final double speed) {        float forward = mc.player.movementInput.moveForward;        float side = mc.player.movementInput.moveStrafe;        float yaw = mc.player.prevRotationYaw + (mc.player.rotationYaw - mc.player.prevRotationYaw) * mc.getRenderPartialTicks();        if (forward != 0.0f) {            if (side > 0.0f) {                yaw += ((forward > 0.0f) ? -45 : 45);            } else if (side < 0.0f) {                yaw += ((forward > 0.0f) ? 45 : -45);            }            side = 0.0f;            if (forward > 0.0f) {                forward = 1.0f;            } else if (forward < 0.0f) {                forward = -1.0f;            }        }        final double sin = Math.sin(Math.toRadians(yaw + 90.0f));        final double cos = Math.cos(Math.toRadians(yaw + 90.0f));        final double posX = forward * speed * cos + side * speed * sin;        final double posZ = forward * speed * sin - side * speed * cos;        return new double[]{posX, posZ};    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/util/MotionUtil.java", "stars": "12", "class": {"name": "MotionUtil", "extends": null, "implements": ["Util"], "modifiers": ["public"]}}, {"method_name": "isDownloadAvailable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isDownloadAvailable() {        if (PackageUtils.isInstalled(mContext, VPNManager.PACKAGE_VPNHT) || PrefUtils.get(mContext, VPN_AVAILABLE, false)) {            return true;        }        if(sCheckingRequest == null) {            sCheckingRequest = new Request.Builder().head().url(\"https://play.google.com/store/apps/details?id=ht.vpn.android\").build();            mHttpClient.newCall(sCheckingRequest).enqueue(new Callback() {                @Override                public void onFailure(Call call, IOException e) {                    sCheckingRequest = null;                    PrefUtils.save(mContext, VPN_AVAILABLE, false);                }                @Override                public void onResponse(Call call, Response response) throws IOException {                    sCheckingRequest = null;                    if (response.isSuccessful()) {                        PrefUtils.save(mContext, VPN_AVAILABLE, true);                    } else {                        PrefUtils.save(mContext, VPN_AVAILABLE, false);                    }                }            });        }        return false;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/vpn/VPNHTChecker.java", "stars": "4", "class": {"name": "VPNHTChecker", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items\t\t\t\t.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.BUILDING_BLOCKS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/BirchParquetStairsBlock.java", "stars": "2", "class": {"name": "BirchParquetStairsBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/BirchParquetStairsBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "StairsBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "levelOrder", "params": ["TreeNode"], "throws": null, "modifiers": ["public"], "return_type": "List<List>", "snippet": "    public List<List<Integer>> levelOrder(TreeNode root) {        List<List<Integer>> ans = new LinkedList<>();        if(root == null) {            return ans;        }        ans.add(new LinkedList<>());        Queue<TreeNode> queue = new LinkedList<>();        Queue<Integer> depths = new LinkedList<>();        queue.offer(root);        depths.offer(0);        int depth = 0;        while(!queue.isEmpty()) {            TreeNode tree = queue.poll();            int newDepth = depths.poll();            if(newDepth != depth) {                depth ++;                ans.add(new LinkedList<>());            }            ans.get(ans.size() - 1).add(tree.val);            if(tree.left != null) {                queue.offer(tree.left);                depths.offer(depth + 1);            }            if(tree.right != null) {                queue.offer(tree.right);                depths.offer(depth + 1);            }        }        return ans;    }", "url": "https://raw.githubusercontent.com/nishantc1527/LeetCode/master/src/BinaryTreeLevelOrderTraversal.java", "stars": "1", "class": {"name": "BinaryTreeLevelOrderTraversal", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "cast", "params": ["Class<?>", "Type", "Object"], "throws": null, "modifiers": ["protected"], "return_type": "Object", "snippet": "    protected Object cast(Class<?> target, Type[] neededGenerics, Object value) {        return value;    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/typeconversions/SameTypeConversion.java", "stars": "3", "class": {"name": "SameTypeConversion", "extends": "TypeConversion", "implements": null, "modifiers": ["public"]}}, {"method_name": "isApplicable", "params": ["Class<?>", "Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isApplicable(Class<?> target, Object value) {        return target.isInstance(value);    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/typeconversions/SameTypeConversion.java", "stars": "3", "class": {"name": "SameTypeConversion", "extends": "TypeConversion", "implements": null, "modifiers": ["public"]}}, {"method_name": "getParametersRequired", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getParametersRequired() {        return 0;    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/typeconversions/SameTypeConversion.java", "stars": "3", "class": {"name": "SameTypeConversion", "extends": "TypeConversion", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        canvas.drawBitmap(bitmap, 0, 0, paint);    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson2/Practice07ColorMatrixColorFilterView.java", "stars": "2", "class": {"name": "Practice07ColorMatrixColorFilterView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "onNavigationEvent", "params": ["int", "android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onNavigationEvent (int p0, android.os.Bundle p1)\t{\t\tn_onNavigationEvent (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/android/support/customtabs/CustomTabsClient_CustomTabsCallbackImpl.java", "stars": "2", "class": {"name": "CustomTabsClient_CustomTabsCallbackImpl", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onNavigationEvent", "params": ["int", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onNavigationEvent (int p0, android.os.Bundle p1);\tpublic void extraCallback (java.lang.String p0, android.os.Bundle p1)\t{\t\tn_extraCallback (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/android/support/customtabs/CustomTabsClient_CustomTabsCallbackImpl.java", "stars": "2", "class": {"name": "CustomTabsClient_CustomTabsCallbackImpl", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "extraCallback", "params": ["java", "android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void extraCallback (java.lang.String p0, android.os.Bundle p1)\t{\t\tn_extraCallback (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/android/support/customtabs/CustomTabsClient_CustomTabsCallbackImpl.java", "stars": "2", "class": {"name": "CustomTabsClient_CustomTabsCallbackImpl", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_extraCallback", "params": ["java", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_extraCallback (java.lang.String p0, android.os.Bundle p1);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/android/support/customtabs/CustomTabsClient_CustomTabsCallbackImpl.java", "stars": "2", "class": {"name": "CustomTabsClient_CustomTabsCallbackImpl", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/android/support/customtabs/CustomTabsClient_CustomTabsCallbackImpl.java", "stars": "2", "class": {"name": "CustomTabsClient_CustomTabsCallbackImpl", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/android/support/customtabs/CustomTabsClient_CustomTabsCallbackImpl.java", "stars": "2", "class": {"name": "CustomTabsClient_CustomTabsCallbackImpl", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "quartzJobIsTriggered", "params": ["CapturedOutput"], "throws": ["InterruptedException"], "modifiers": [], "return_type": "void", "snippet": "\tvoid quartzJobIsTriggered(CapturedOutput output) throws InterruptedException {\t\ttry (ConfigurableApplicationContext context = SpringApplication.run(SampleQuartzApplication.class)) {\t\t\tAwaitility.waitAtMost(Duration.ofSeconds(5)).until(output::toString, containsString(\"Hello World!\"));\t\t}\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-quartz/src/test/java/smoketest/quartz/SampleQuartzApplicationTests.java", "stars": "47572", "class": {"name": "SampleQuartzApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testTransactionRollback", "params": ["CapturedOutput"], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "\tvoid testTransactionRollback(CapturedOutput output) throws Exception {\t\tSampleAtomikosApplication.main(new String[] {});\t\tassertThat(output).satisfies(numberOfOccurrences(\"---->\", 1));\t\tassertThat(output).satisfies(numberOfOccurrences(\"----> josh\", 1));\t\tassertThat(output).satisfies(numberOfOccurrences(\"Count is 1\", 2));\t\tassertThat(output).satisfies(numberOfOccurrences(\"Simulated error\", 1));\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-jta-atomikos/src/test/java/smoketest/atomikos/SampleAtomikosApplicationTests.java", "stars": "47572", "class": {"name": "SampleAtomikosApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "numberOfOccurrences", "params": ["String", "int"], "throws": null, "modifiers": ["private"], "return_type": "Consumer<T>", "snippet": "\tprivate <T extends CharSequence> Consumer<T> numberOfOccurrences(String substring, int expectedCount) {\t\treturn (charSequence) -> {\t\t\tint count = StringUtils.countOccurrencesOf(charSequence.toString(), substring);\t\t\tassertThat(count).isEqualTo(expectedCount);\t\t};\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-jta-atomikos/src/test/java/smoketest/atomikos/SampleAtomikosApplicationTests.java", "stars": "47572", "class": {"name": "SampleAtomikosApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setCompanyName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setCompanyName(String CompanyName)\t{\t\tthis.CompanyName = CompanyName;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/CustomSpinner/src/com/androidexample/customspinner/SpinnerModel.java", "stars": "74", "class": {"name": "SpinnerModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setImage", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setImage(String Image)\t{\t\tthis.Image = Image;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/CustomSpinner/src/com/androidexample/customspinner/SpinnerModel.java", "stars": "74", "class": {"name": "SpinnerModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUrl", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setUrl(String Url)\t{\t\tthis.Url = Url;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/CustomSpinner/src/com/androidexample/customspinner/SpinnerModel.java", "stars": "74", "class": {"name": "SpinnerModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCompanyName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getCompanyName()\t{\t\treturn this.CompanyName;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/CustomSpinner/src/com/androidexample/customspinner/SpinnerModel.java", "stars": "74", "class": {"name": "SpinnerModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getImage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getImage()\t{\t\treturn this.Image;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/CustomSpinner/src/com/androidexample/customspinner/SpinnerModel.java", "stars": "74", "class": {"name": "SpinnerModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUrl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getUrl()\t{\t\treturn this.Url;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/CustomSpinner/src/com/androidexample/customspinner/SpinnerModel.java", "stars": "74", "class": {"name": "SpinnerModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create an SqlSessionFactory    try (Reader reader = Resources        .getResourceAsReader(\"org/apache/ibatis/submitted/empty_row/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/empty_row/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/empty_row/ReturnInstanceForEmptyRowTest.java", "stars": "15", "class": {"name": "ReturnInstanceForEmptyRowTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "resetCallSettersOnNulls", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void resetCallSettersOnNulls() {    sqlSessionFactory.getConfiguration().setCallSettersOnNulls(false);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/empty_row/ReturnInstanceForEmptyRowTest.java", "stars": "15", "class": {"name": "ReturnInstanceForEmptyRowTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldSimpleTypeBeNull", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSimpleTypeBeNull() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      String result = mapper.getString();      assertNull(result);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/empty_row/ReturnInstanceForEmptyRowTest.java", "stars": "15", "class": {"name": "ReturnInstanceForEmptyRowTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldObjectTypeNotBeNull", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldObjectTypeNotBeNull() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Parent parent = mapper.getBean(1);      assertNotNull(parent);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/empty_row/ReturnInstanceForEmptyRowTest.java", "stars": "15", "class": {"name": "ReturnInstanceForEmptyRowTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldMapBeEmpty", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldMapBeEmpty() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Map<String, String> map = mapper.getMap(1);      assertNotNull(map);      assertTrue(map.isEmpty());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/empty_row/ReturnInstanceForEmptyRowTest.java", "stars": "15", "class": {"name": "ReturnInstanceForEmptyRowTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldMapHaveColumnNamesIfCallSettersOnNullsEnabled", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldMapHaveColumnNamesIfCallSettersOnNullsEnabled() {    sqlSessionFactory.getConfiguration().setCallSettersOnNulls(true);    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Map<String, String> map = mapper.getMap(1);      assertEquals(2, map.size());      assertTrue(map.containsKey(\"COL1\"));      assertTrue(map.containsKey(\"COL2\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/empty_row/ReturnInstanceForEmptyRowTest.java", "stars": "15", "class": {"name": "ReturnInstanceForEmptyRowTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldAssociationNotBeNull", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldAssociationNotBeNull() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Parent parent = mapper.getAssociation(1);      assertNotNull(parent.getChild());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/empty_row/ReturnInstanceForEmptyRowTest.java", "stars": "15", "class": {"name": "ReturnInstanceForEmptyRowTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldAssociationBeNullIfNotNullColumnSpecified", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldAssociationBeNullIfNotNullColumnSpecified() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Parent parent = mapper.getAssociationWithNotNullColumn(1);      assertNotNull(parent);      assertNull(parent.getChild());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/empty_row/ReturnInstanceForEmptyRowTest.java", "stars": "15", "class": {"name": "ReturnInstanceForEmptyRowTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldNestedAssociationNotBeNull", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldNestedAssociationNotBeNull() {    // #420    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Parent parent = mapper.getNestedAssociation();      assertNotNull(parent.getChild().getGrandchild());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/empty_row/ReturnInstanceForEmptyRowTest.java", "stars": "15", "class": {"name": "ReturnInstanceForEmptyRowTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testCollection", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testCollection() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Parent parent = mapper.getCollection(1);      assertEquals(1, parent.getChildren().size());      assertNotNull(parent.getChildren().get(0));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/empty_row/ReturnInstanceForEmptyRowTest.java", "stars": "15", "class": {"name": "ReturnInstanceForEmptyRowTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldSquashMultipleEmptyResults", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSquashMultipleEmptyResults() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      Parent parent = mapper.getTwoCollections(2);      assertEquals(1, parent.getPets().size());      assertNotNull(parent.getPets().get(0));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/empty_row/ReturnInstanceForEmptyRowTest.java", "stars": "15", "class": {"name": "ReturnInstanceForEmptyRowTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "encrypt", "params": ["Map<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "ResponseEntity<String>", "snippet": "    public ResponseEntity<String> encrypt(@RequestBody Map<String, String> map){        String srcPwd = map.get(ENCRYPT_PWD_KEY);        if(StringUtils.isBlank(srcPwd)){            return ResponseEntity.status(403).body(\"\");        }        String encryptPwd = \"\";        try {            String keyContent = FileCopyUtils.copyToString(new BufferedReader                    (new InputStreamReader(new FileInputStream(secretKeyPath))));            if(StringUtils.isNotBlank(keyContent)){                encryptPwd =  AESUtils.encrypt(srcPwd, Base64.getDecoder().decode(                        keyContent));            }else{                return ResponseEntity.status(500).body(\"\");            }        }catch(Exception e){            LOG.error(e.getMessage());            return ResponseEntity.status(500).body(\"\");        }        return ResponseEntity.ok(encryptPwd);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/gateway/src/main/java/com/webank/wedatasphere/exchangis/gateway/auth/pwd/AuthPwdController.java", "stars": "23", "class": {"name": "AuthPwdController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onBind", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "android", "snippet": "\tpublic android.os.IBinder onBind (android.content.Intent p0)\t{\t\treturn n_onBind (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a98abb514ffad9f1/KeepAliveService.java", "stars": "2", "class": {"name": "KeepAliveService", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onBind", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "android", "snippet": "\tprivate native android.os.IBinder n_onBind (android.content.Intent p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a98abb514ffad9f1/KeepAliveService.java", "stars": "2", "class": {"name": "KeepAliveService", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a98abb514ffad9f1/KeepAliveService.java", "stars": "2", "class": {"name": "KeepAliveService", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/crc64a98abb514ffad9f1/KeepAliveService.java", "stars": "2", "class": {"name": "KeepAliveService", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "isAvailable", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "  public static boolean isAvailable() {    return isInstantiated() && isManagerEnabled;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/metric/MetricReportManager.java", "stars": "18", "class": {"name": "MetricReportManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isInstantiated", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "  public static boolean isInstantiated() {    return instance != null;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/metric/MetricReportManager.java", "stars": "18", "class": {"name": "MetricReportManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "MetricReportManager", "snippet": "  public static MetricReportManager getInstance() {    if (instance == null) {      synchronized (MetricReportManager.class) {        if (instance == null) {          logger.info(\"Instantiating MetricReportManager\");          instance = new MetricReportManager();        }      }    }    return instance;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/metric/MetricReportManager.java", "stars": "18", "class": {"name": "MetricReportManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "reportMetric", "params": ["IMetric<?>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void reportMetric(final IMetric<?> metric) {    if (metric != null && isAvailable()) {      try {        final IMetric<?> metricSnapshot;        // take snapshot        synchronized (metric) {          metricSnapshot = metric.getSnapshot();        }        logger.debug(String            .format(\"Submitting %s metric for metric emission pool\", metricSnapshot.getName()));        // report to all emitters        for (final IMetricEmitter metricEmitter : this.metricEmitters) {          this.executorService.submit(() -> {            try {              metricEmitter.reportMetric(metricSnapshot);            } catch (final Exception ex) {              logger.error(                  String.format(\"Failed to report %s metric due to \", metricSnapshot.getName()),                  ex);            }          });        }      } catch (final CloneNotSupportedException ex) {        logger.error(            String.format(\"Failed to take snapshot for %s metric\", metric.getClass().getName()),            ex);      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/metric/MetricReportManager.java", "stars": "18", "class": {"name": "MetricReportManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addMetricEmitter", "params": ["IMetricEmitter"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void addMetricEmitter(final IMetricEmitter emitter) {    this.metricEmitters.add(emitter);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/metric/MetricReportManager.java", "stars": "18", "class": {"name": "MetricReportManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeMetricEmitter", "params": ["IMetricEmitter"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void removeMetricEmitter(final IMetricEmitter emitter) {    this.metricEmitters.remove(emitter);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/metric/MetricReportManager.java", "stars": "18", "class": {"name": "MetricReportManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMetricEmitters", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<IMetricEmitter>", "snippet": "  public List<IMetricEmitter> getMetricEmitters() {    return this.metricEmitters;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/metric/MetricReportManager.java", "stars": "18", "class": {"name": "MetricReportManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addMetric", "params": ["IMetric<?>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void addMetric(final IMetric<?> metric) {    // metric null or already present    if (metric == null) {      throw new IllegalArgumentException(\"Cannot add a null metric\");    }    if (getMetricFromName(metric.getName()) == null) {      logger.debug(String.format(\"Adding %s metric in Metric Manager\", metric.getName()));      this.metrics.add(metric);      metric.updateMetricManager(this);    } else {      logger.error(\"Failed to add metric\");    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/metric/MetricReportManager.java", "stars": "18", "class": {"name": "MetricReportManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMetricFromName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "IMetric<?>", "snippet": "  public IMetric<?> getMetricFromName(final String name) {    IMetric<?> metric = null;    if (name != null) {      for (final IMetric<?> currentMetric : this.metrics) {        if (currentMetric.getName().equals(name)) {          metric = currentMetric;          break;        }      }    }    return metric;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/metric/MetricReportManager.java", "stars": "18", "class": {"name": "MetricReportManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllMetrics", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<IMetric>", "snippet": "  public List<IMetric<?>> getAllMetrics() {    return this.metrics;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/metric/MetricReportManager.java", "stars": "18", "class": {"name": "MetricReportManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "enableManager", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void enableManager() {    logger.info(\"Enabling Metric Manager\");    isManagerEnabled = true;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/metric/MetricReportManager.java", "stars": "18", "class": {"name": "MetricReportManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "disableManager", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void disableManager() {    logger.info(\"Disabling Metric Manager\");    if (isManagerEnabled) {      isManagerEnabled = false;      for (final IMetricEmitter emitter : this.metricEmitters) {        try {          emitter.purgeAllData();        } catch (final MetricException ex) {          logger.error(\"Failed to purge data \", ex);        }      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/metric/MetricReportManager.java", "stars": "18", "class": {"name": "MetricReportManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "finalize", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void finalize() {    this.executorService.shutdown();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/metric/MetricReportManager.java", "stars": "18", "class": {"name": "MetricReportManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        // Teil 1        // Eingabe:        double einzelGehalt = 2000;        // Ausgabe: gezahlte Steuern        // Teil 2        // Eingabe:        double[] gehaeltern = {2000, 1234, 1238, 7261, 1238};        // Ausgabe: Summe aller gezahlten Steuern    }", "url": "https://raw.githubusercontent.com/unterstein/dhbw-java-2020/master/src/SteuernBeispiel.java", "stars": "3", "class": {"name": "SteuernBeispiel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "update", "params": ["XxlJobGroup"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int update(XxlJobGroup xxlJobGroup){        Query query = new Query(where(\"id\").is(xxlJobGroup.getId()));        Update update = new Update();        update.set(\"appName\", xxlJobGroup.getAppName());        update.set(\"title\", xxlJobGroup.getTitle());        update.set(\"order\", xxlJobGroup.getOrder());        update.set(\"addressType\", xxlJobGroup.getAddressType());        update.set(\"addressList\", xxlJobGroup.getAddressList());        UpdateResult updateResult = super.update(query, update);        return (int) updateResult.getModifiedCount();    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/dao/XxlJobGroupService.java", "stars": "1", "class": {"name": "XxlJobGroupService", "extends": "BaseMongoServiceImpl", "implements": null, "modifiers": ["public"]}}, {"method_name": "remove", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int remove(int id){        Query query = new Query(where(\"id\").is(id));        DeleteResult deleteResult = super.remove(query);        return (int)deleteResult.getDeletedCount();    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/dao/XxlJobGroupService.java", "stars": "1", "class": {"name": "XxlJobGroupService", "extends": "BaseMongoServiceImpl", "implements": null, "modifiers": ["public"]}}, {"method_name": "findByAddressType", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "List<XxlJobGroup>", "snippet": "    public List<XxlJobGroup> findByAddressType(int addressType){        Query query = new Query(where(\"addressType\").is(addressType));        query.with(new Sort(Sort.Direction.ASC, \"order\"));        return super.find(query);    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/dao/XxlJobGroupService.java", "stars": "1", "class": {"name": "XxlJobGroupService", "extends": "BaseMongoServiceImpl", "implements": null, "modifiers": ["public"]}}, {"method_name": "load", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "XxlJobGroup", "snippet": "    public XxlJobGroup load(int id){        Query query = new Query(where(\"id\").is(id));        return super.findOne(query);    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/dao/XxlJobGroupService.java", "stars": "1", "class": {"name": "XxlJobGroupService", "extends": "BaseMongoServiceImpl", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void setUp() throws Exception {    try (Reader reader = Resources.getResourceAsReader(getConfigPath())) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/column_prefix/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/column_prefix/ColumnPrefixTest.java", "stars": "15", "class": {"name": "ColumnPrefixTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testSelectPetAndRoom", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testSelectPetAndRoom() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      List<Pet> pets = getPetAndRoom(sqlSession);      assertEquals(3, pets.size());      assertEquals(\"Ume\", pets.get(0).getRoom().getRoomName());      assertNull(pets.get(1).getRoom());      assertEquals(\"Sakura\", pets.get(2).getRoom().getRoomName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/column_prefix/ColumnPrefixTest.java", "stars": "15", "class": {"name": "ColumnPrefixTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testComplexPerson", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testComplexPerson() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      List<Person> list = getPersons(sqlSession);      Person person1 = list.get(0);      assertEquals(Integer.valueOf(1), person1.getId());      assertEquals(Address.class, person1.getBillingAddress().getClass());      assertEquals(Integer.valueOf(10), person1.getBillingAddress().getId());      assertEquals(\"IL\", person1.getBillingAddress().getState());      assertEquals(\"Chicago\", person1.getBillingAddress().getCity());      assertEquals(\"Cardinal\", person1.getBillingAddress().getStateBird());      assertEquals(\"IL\", person1.getBillingAddress().getZip().getState());      assertEquals(\"Chicago\", person1.getBillingAddress().getZip().getCity());      assertEquals(81, person1.getBillingAddress().getZip().getZipCode());      assertEquals(\"0123\", person1.getBillingAddress().getPhone1().getPhone());      assertEquals(\"4567\", person1.getBillingAddress().getPhone2().getPhone());      assertEquals(AddressWithCaution.class, person1.getShippingAddress().getClass());      assertEquals(\"Has a big dog.\", ((AddressWithCaution) person1.getShippingAddress()).getCaution());      assertEquals(Integer.valueOf(11), person1.getShippingAddress().getId());      assertEquals(\"CA\", person1.getShippingAddress().getState());      assertEquals(\"San Francisco\", person1.getShippingAddress().getCity());      assertEquals(\"California Valley Quail\", person1.getShippingAddress().getStateBird());      assertEquals(\"CA\", person1.getShippingAddress().getZip().getState());      assertEquals(82, person1.getShippingAddress().getZip().getZipCode());      assertEquals(\"8888\", person1.getShippingAddress().getPhone1().getPhone());      assertNull(person1.getShippingAddress().getPhone2());      assertEquals(\"Tsubaki\", person1.getRoom().getRoomName());      assertEquals(2, person1.getPets().size());      assertEquals(\"Kotetsu\", person1.getPets().get(0).getName());      assertEquals(\"Ume\", person1.getPets().get(0).getRoom().getRoomName());      assertNull(person1.getPets().get(1).getRoom());      assertEquals(\"Chien\", person1.getPets().get(1).getName());      Person person2 = list.get(1);      assertEquals(Integer.valueOf(2), person2.getId());      assertEquals(AddressWithCaution.class, person2.getBillingAddress().getClass());      assertEquals(Integer.valueOf(12), person2.getBillingAddress().getId());      assertEquals(\"No door bell.\", ((AddressWithCaution) person2.getBillingAddress()).getCaution());      assertEquals(\"Los Angeles\", person2.getBillingAddress().getCity());      assertEquals(\"California Valley Quail\", person2.getBillingAddress().getStateBird());      assertEquals(\"Los Angeles\", person2.getBillingAddress().getZip().getCity());      assertEquals(83, person2.getBillingAddress().getZip().getZipCode());      assertNull(person2.getBillingAddress().getPhone1());      assertNull(person2.getBillingAddress().getPhone2());      assertNull(person2.getShippingAddress());      assertEquals(0, person2.getPets().size());      Person person3 = list.get(2);      assertEquals(Integer.valueOf(3), person3.getId());      assertNull(person3.getBillingAddress());      assertEquals(Address.class, person3.getShippingAddress().getClass());      assertEquals(Integer.valueOf(13), person3.getShippingAddress().getId());      assertEquals(\"Dallas\", person3.getShippingAddress().getCity());      assertEquals(\"Mockingbird\", person3.getShippingAddress().getStateBird());      assertEquals(\"Dallas\", person3.getShippingAddress().getZip().getCity());      assertEquals(\"9999\", person3.getShippingAddress().getPhone1().getPhone());      assertEquals(\"4567\", person3.getShippingAddress().getPhone2().getPhone());      assertEquals(1, person3.getPets().size());      assertEquals(\"Dodo\", person3.getPets().get(0).getName());      assertEquals(\"Sakura\", person3.getPets().get(0).getRoom().getRoomName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/column_prefix/ColumnPrefixTest.java", "stars": "15", "class": {"name": "ColumnPrefixTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getPetAndRoom", "params": ["SqlSession"], "throws": null, "modifiers": ["protected"], "return_type": "List<Pet>", "snippet": "  protected List<Pet> getPetAndRoom(SqlSession sqlSession) {    List<Pet> pets = sqlSession.selectList(\"org.apache.ibatis.submitted.column_prefix.Mapper.selectPets\");    return pets;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/column_prefix/ColumnPrefixTest.java", "stars": "15", "class": {"name": "ColumnPrefixTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getPersons", "params": ["SqlSession"], "throws": null, "modifiers": ["protected"], "return_type": "List<Person>", "snippet": "  protected List<Person> getPersons(SqlSession sqlSession) {    List<Person> list = sqlSession.selectList(\"org.apache.ibatis.submitted.column_prefix.Mapper.selectPersons\");    return list;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/column_prefix/ColumnPrefixTest.java", "stars": "15", "class": {"name": "ColumnPrefixTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getConfigPath", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "  protected String getConfigPath() {    return \"org/apache/ibatis/submitted/column_prefix/Config.xml\";  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/column_prefix/ColumnPrefixTest.java", "stars": "15", "class": {"name": "ColumnPrefixTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "createCondition", "params": ["SlaOption", "int", "String", "String"], "throws": null, "modifiers": ["private"], "return_type": "Condition", "snippet": "  private Condition createCondition(final SlaOption sla, final int execId, final String checkerName,      final String checkerMethod) {    final SlaChecker slaFailChecker = new SlaChecker(checkerName, sla, execId);    final Map<String, ConditionChecker> slaCheckers = new HashMap<>();    slaCheckers.put(slaFailChecker.getId(), slaFailChecker);    return new Condition(slaCheckers, slaFailChecker.getId() + \".\" + checkerMethod);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/TriggerManager.java", "stars": "18", "class": {"name": "TriggerManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createActions", "params": ["SlaOption", "int"], "throws": null, "modifiers": ["private"], "return_type": "List<TriggerAction>", "snippet": "  private List<TriggerAction> createActions(final SlaOption sla, final int execId) {    final List<TriggerAction> actions = new ArrayList<>();    final List<String> slaActions = sla.getActions();    for (final String act : slaActions) {      TriggerAction action = null;      switch (act) {        case SlaOption.ACTION_ALERT:          action = new SlaAlertAction(SlaOption.ACTION_ALERT, sla, execId);          break;        case SlaOption.ACTION_CANCEL_FLOW:          action = new KillExecutionAction(SlaOption.ACTION_CANCEL_FLOW, execId);          break;        case SlaOption.ACTION_KILL_JOB:          final String jobId = (String) sla.getInfo().get(SlaOption.INFO_JOB_NAME);          action = new KillJobAction(SlaOption.ACTION_KILL_JOB, execId, jobId);          break;        default:          logger.info(\"Unknown action type \" + act);          break;      }      if (action != null) {        actions.add(action);      }    }    return actions;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/TriggerManager.java", "stars": "18", "class": {"name": "TriggerManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addTrigger", "params": ["int", "List<SlaOption>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void addTrigger(final int execId, final List<SlaOption> slaOptions) {    for (final SlaOption sla : slaOptions) {      final Condition triggerCond = createCondition(sla, execId, \"slaFailChecker\", \"isSlaFailed()\");      // if whole flow finish before violating sla, just expire the checker \u5982\u679cflow\u5728\u8fdd\u53cd SLA \u4e4b\u524d\u5b8c\u6210 \u5219\u7ec8\u6b62\u8fd9\u4e2a checkerl      final Condition expireCond = createCondition(sla, execId, \"slaPassChecker\", \"isSlaPassed()\");      final List<TriggerAction> actions = createActions(sla, execId);      final Trigger trigger = new Trigger(execId, triggerCond, expireCond, actions,executorLoader);      final ReadablePeriod duration = Utils          .parsePeriodString((String) sla.getInfo().get(SlaOption.INFO_DURATION));      final long durationInMillis = duration.toPeriod().toStandardDuration().getMillis();      logger.info(\"Adding sla trigger \" + sla.toString() + \" to execution \" + execId          + \", scheduled to trigger in \" + durationInMillis / 1000 + \" seconds\");      this.scheduledService.schedule(trigger, durationInMillis, TimeUnit.MILLISECONDS);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/TriggerManager.java", "stars": "18", "class": {"name": "TriggerManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addTrigger", "params": ["int", "List<SlaOption>", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void addTrigger(final int execId, final List<SlaOption> slaOptions, final String slaJobName) {    for (final SlaOption sla : slaOptions) {      if(!sla.getInfo().get(\"JobName\").equals(slaJobName)){        continue;      }      final Condition triggerCond = createCondition(sla, execId, \"slaFailChecker\", \"isSlaFailed()\");      // if whole flow finish before violating sla, just expire the checker \u5982\u679cflow\u5728\u8fdd\u53cd SLA \u4e4b\u524d\u5b8c\u6210 \u5219\u7ec8\u6b62\u8fd9\u4e2a checkerl      final Condition expireCond = createCondition(sla, execId, \"slaPassChecker\", \"isSlaPassed()\");      final List<TriggerAction> actions = createActions(sla, execId);      final Trigger trigger = new Trigger(execId, triggerCond, expireCond, actions,executorLoader);      final ReadablePeriod duration = Utils              .parsePeriodString((String) sla.getInfo().get(SlaOption.INFO_DURATION));      final long durationInMillis = duration.toPeriod().toStandardDuration().getMillis();      logger.info(\"Adding sla trigger \" + sla.toString() + \" to execution \" + execId              + \", scheduled to trigger in \" + durationInMillis / 1000 + \" seconds\");      this.scheduledService.schedule(trigger, durationInMillis, TimeUnit.MILLISECONDS);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/TriggerManager.java", "stars": "18", "class": {"name": "TriggerManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shutdown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void shutdown() {    this.scheduledService.shutdownNow();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/TriggerManager.java", "stars": "18", "class": {"name": "TriggerManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "secure", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String secure() {\t\treturn \"Hello Security\";\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-secure/src/main/java/smoketest/secure/SampleService.java", "stars": "47572", "class": {"name": "SampleService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "authorized", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String authorized() {\t\treturn \"Hello World\";\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-secure/src/main/java/smoketest/secure/SampleService.java", "stars": "47572", "class": {"name": "SampleService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "denied", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String denied() {\t\treturn \"Goodbye World\";\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-secure/src/main/java/smoketest/secure/SampleService.java", "stars": "47572", "class": {"name": "SampleService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "reverse", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int reverse(int y) {        boolean isNegative = false;        long x = y;        if (x < 0) {            isNegative = true;            x = -x;        }        long reverse = 0;        while (x > 0) {            reverse *= 10;            reverse += x % 10;            x /= 10;        }        if (reverse >= Integer.MAX_VALUE) {            return 0;        }        else {            return (int) (isNegative ? -reverse : reverse);        }    }", "url": "https://raw.githubusercontent.com/nishantc1527/LeetCode/master/src/ReverseInteger.java", "stars": "1", "class": {"name": "ReverseInteger", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCustomView", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "B", "snippet": "        public B setCustomView(@LayoutRes int id) {            return setCustomView(LayoutInflater.from(getContext()).inflate(id, mContainerLayout, false));        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/UIDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setCustomView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "B", "snippet": "        public B setCustomView(View view) {            mContainerLayout.addView(view, 1);            return (B) this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/UIDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setTitle", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "B", "snippet": "        public B setTitle(@StringRes int id) {            return setTitle(getString(id));        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/UIDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setTitle", "params": ["CharSequence"], "throws": null, "modifiers": ["public"], "return_type": "B", "snippet": "        public B setTitle(CharSequence text) {            mTitleView.setText(text);            return (B) this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/UIDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setCancel", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "B", "snippet": "        public B setCancel(@StringRes int id) {            return setCancel(getString(id));        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/UIDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setCancel", "params": ["CharSequence"], "throws": null, "modifiers": ["public"], "return_type": "B", "snippet": "        public B setCancel(CharSequence text) {            mCancelView.setText(text);            mLineView.setVisibility((text == null || \"\".equals(text.toString())) ? View.GONE : View.VISIBLE);            return (B) this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/UIDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setConfirm", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "B", "snippet": "        public B setConfirm(@StringRes int id) {            return setConfirm(getString(id));        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/UIDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setConfirm", "params": ["CharSequence"], "throws": null, "modifiers": ["public"], "return_type": "B", "snippet": "        public B setConfirm(CharSequence text) {            mConfirmView.setText(text);            return (B) this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/UIDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setAutoDismiss", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "B", "snippet": "        public B setAutoDismiss(boolean dismiss) {            mAutoDismiss = dismiss;            return (B) this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/UIDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "autoDismiss", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void autoDismiss() {            if (mAutoDismiss) {                dismiss();            }        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/UIDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "initDatabase", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void initDatabase() throws Exception {    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/force_flush_on_select/ibatisConfig.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/force_flush_on_select/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/force_flush_on_select/ForceFlushOnSelectTest.java", "stars": "15", "class": {"name": "ForceFlushOnSelectTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testShouldFlushLocalSessionCacheOnQuery", "params": [], "throws": ["SQLException"], "modifiers": [], "return_type": "void", "snippet": "  void testShouldFlushLocalSessionCacheOnQuery() throws SQLException {    try (SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.SIMPLE)) {      PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class);      personMapper.selectByIdFlush(1);      updateDatabase(sqlSession.getConnection());      Person updatedPerson = personMapper.selectByIdFlush(1);      assertEquals(\"Simone\", updatedPerson.getFirstName());      sqlSession.commit();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/force_flush_on_select/ForceFlushOnSelectTest.java", "stars": "15", "class": {"name": "ForceFlushOnSelectTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testShouldNotFlushLocalSessionCacheOnQuery", "params": [], "throws": ["SQLException"], "modifiers": [], "return_type": "void", "snippet": "  void testShouldNotFlushLocalSessionCacheOnQuery() throws SQLException {    try (SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.SIMPLE)) {      PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class);      personMapper.selectByIdNoFlush(1);      updateDatabase(sqlSession.getConnection());      Person updatedPerson = personMapper.selectByIdNoFlush(1);      assertEquals(\"John\", updatedPerson.getFirstName());      sqlSession.commit();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/force_flush_on_select/ForceFlushOnSelectTest.java", "stars": "15", "class": {"name": "ForceFlushOnSelectTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testShouldFlushLocalSessionCacheOnQueryForList", "params": [], "throws": ["SQLException"], "modifiers": [], "return_type": "void", "snippet": "  void testShouldFlushLocalSessionCacheOnQueryForList() throws SQLException {    try (SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.SIMPLE)) {      PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class);      List<Person> people = personMapper.selectAllFlush();      updateDatabase(sqlSession.getConnection());      people = personMapper.selectAllFlush();      assertEquals(\"Simone\", people.get(0).getFirstName());      sqlSession.commit();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/force_flush_on_select/ForceFlushOnSelectTest.java", "stars": "15", "class": {"name": "ForceFlushOnSelectTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testShouldNotFlushLocalSessionCacheOnQueryForList", "params": [], "throws": ["SQLException"], "modifiers": [], "return_type": "void", "snippet": "  void testShouldNotFlushLocalSessionCacheOnQueryForList() throws SQLException {    try (SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.SIMPLE)) {      PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class);      List<Person> people = personMapper.selectAllNoFlush();      updateDatabase(sqlSession.getConnection());      people = personMapper.selectAllNoFlush();      assertEquals(\"John\", people.get(0).getFirstName());      sqlSession.commit();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/force_flush_on_select/ForceFlushOnSelectTest.java", "stars": "15", "class": {"name": "ForceFlushOnSelectTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "updateDatabase", "params": ["Connection"], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void updateDatabase(Connection conn) throws SQLException {    try (Statement stmt = conn.createStatement()) {      stmt.executeUpdate(\"UPDATE person SET firstName = 'Simone' WHERE id = 1\");    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/force_flush_on_select/ForceFlushOnSelectTest.java", "stars": "15", "class": {"name": "ForceFlushOnSelectTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testUpdateShouldFlushLocalCache", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testUpdateShouldFlushLocalCache() {    try (SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.SIMPLE)) {      PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class);      Person person = personMapper.selectByIdNoFlush(1);      person.setLastName(\"Perez\"); // it is ignored in update      personMapper.update(person);      Person updatedPerson = personMapper.selectByIdNoFlush(1);      assertEquals(\"Smith\", updatedPerson.getLastName());      assertNotSame(person, updatedPerson);      sqlSession.commit();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/force_flush_on_select/ForceFlushOnSelectTest.java", "stars": "15", "class": {"name": "ForceFlushOnSelectTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testSelectShouldFlushLocalCacheIfFlushLocalCacheAtferEachStatementIsTrue", "params": [], "throws": ["SQLException"], "modifiers": [], "return_type": "void", "snippet": "  void testSelectShouldFlushLocalCacheIfFlushLocalCacheAtferEachStatementIsTrue() throws SQLException {    sqlSessionFactory.getConfiguration().setLocalCacheScope(LocalCacheScope.STATEMENT);    try (SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.SIMPLE)) {      PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class);      List<Person> people = personMapper.selectAllNoFlush();      updateDatabase(sqlSession.getConnection());      people = personMapper.selectAllFlush();      assertEquals(\"Simone\", people.get(0).getFirstName());      sqlSession.commit();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/force_flush_on_select/ForceFlushOnSelectTest.java", "stars": "15", "class": {"name": "ForceFlushOnSelectTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onCreateView", "params": ["android", "android", "android"], "throws": null, "modifiers": ["public"], "return_type": "android", "snippet": "\tpublic android.view.View onCreateView (android.view.LayoutInflater p0, android.view.ViewGroup p1, android.os.Bundle p2)\t{\t\treturn n_onCreateView (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/ShellFragmentContainer.java", "stars": "2", "class": {"name": "ShellFragmentContainer", "extends": "crc64720bb2db43a66fe9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onCreateView", "params": ["android", "android", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "android", "snippet": "\tprivate native android.view.View n_onCreateView (android.view.LayoutInflater p0, android.view.ViewGroup p1, android.os.Bundle p2);\tpublic void onDestroyView ()\t{\t\tn_onDestroyView ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/ShellFragmentContainer.java", "stars": "2", "class": {"name": "ShellFragmentContainer", "extends": "crc64720bb2db43a66fe9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onDestroyView", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDestroyView ()\t{\t\tn_onDestroyView ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/ShellFragmentContainer.java", "stars": "2", "class": {"name": "ShellFragmentContainer", "extends": "crc64720bb2db43a66fe9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onDestroyView", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDestroyView ();\tpublic void onDestroy ()\t{\t\tn_onDestroy ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/ShellFragmentContainer.java", "stars": "2", "class": {"name": "ShellFragmentContainer", "extends": "crc64720bb2db43a66fe9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDestroy ()\t{\t\tn_onDestroy ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/ShellFragmentContainer.java", "stars": "2", "class": {"name": "ShellFragmentContainer", "extends": "crc64720bb2db43a66fe9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onDestroy", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDestroy ();\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/ShellFragmentContainer.java", "stars": "2", "class": {"name": "ShellFragmentContainer", "extends": "crc64720bb2db43a66fe9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/ShellFragmentContainer.java", "stars": "2", "class": {"name": "ShellFragmentContainer", "extends": "crc64720bb2db43a66fe9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/ShellFragmentContainer.java", "stars": "2", "class": {"name": "ShellFragmentContainer", "extends": "crc64720bb2db43a66fe9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "getSunRistSet", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getSunRistSet(){        lat = issData.getLat();        lon = issData.getLon();        String url = \"http://api.geonames.org/timezoneJSON?lat=\" + lat + \"&lng=\" + lon + \"&username=\" + usernameKey;        RestTemplate restTemplate = new RestTemplate();        HttpEntity httpEntityDayNight = new HttpEntity(sunRiseSet);        ResponseEntity<SunRiseSet> exchange = restTemplate.exchange(url, HttpMethod.GET, httpEntityDayNight, SunRiseSet.class);        this.sunRiseSet = exchange.getBody();        issData.setCountryName(sunRiseSet.getCountryName());        issData.setDstOffset(Long.valueOf(sunRiseSet.getDstOffset()));    }", "url": "https://raw.githubusercontent.com/wojciechgalach/PositionInternationalSpaceStation/master/src/main/java/pl/com/nur/internationalspacestation/internationalspacestation/controller/SunRistSetController.java", "stars": "1", "class": {"name": "SunRistSetController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseXMLFile", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void parseXMLFile() {    final File file = new File(this.xmlPath);    if (!file.exists()) {      throw new IllegalArgumentException(\"User xml file \" + this.xmlPath          + \" doesn't exist.\");    }    final HashMap<String, User> users = new HashMap<>();    final HashMap<String, String> userPassword = new HashMap<>();    final HashMap<String, Role> roles = new HashMap<>();    final HashMap<String, Set<String>> groupRoles =        new HashMap<>();    final HashMap<String, Set<String>> proxyUserMap =        new HashMap<>();    // Creating the document builder to parse xml.    final DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();    DocumentBuilder builder = null;    try {      // FIXME\u00a0Prevent XML External Entity (XXE) attacks.      XmlResolveUtils.avoidXEE(docBuilderFactory);      builder = docBuilderFactory.newDocumentBuilder();    } catch (final ParserConfigurationException e) {      throw new IllegalArgumentException(          \"Exception while parsing user xml. Document builder not created.\", e);    }    Document doc = null;    try {      doc = builder.parse(file);    } catch (final SAXException e) {      throw new IllegalArgumentException(\"Exception while parsing \" + this.xmlPath          + \". Invalid XML.\", e);    } catch (final IOException e) {      throw new IllegalArgumentException(\"Exception while parsing \" + this.xmlPath          + \". Error reading file.\", e);    }    // Only look at first item, because we should only be seeing    // azkaban-users tag.    final NodeList tagList = doc.getChildNodes();    final Node azkabanUsers = tagList.item(0);    User user = null;    final NodeList azkabanUsersList = azkabanUsers.getChildNodes();    for (int i = 0; i < azkabanUsersList.getLength(); ++i) {      final Node node = azkabanUsersList.item(i);      if (node.getNodeType() == Node.ELEMENT_NODE) {        if (node.getNodeName().equals(USER_TAG)) {          user = parseUserTag(node, users, userPassword, proxyUserMap);        }      }    }    // Synchronize the swap. Similarly, the gets are synchronized to this.    synchronized (this) {      this.users = users;    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/XmlUsersSync.java", "stars": "18", "class": {"name": "XmlUsersSync", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseUserTag", "params": ["Node", "HashMap<String,User>", "HashMap<String,String>", "HashMap<String,Set>"], "throws": null, "modifiers": ["private"], "return_type": "User", "snippet": "  private User parseUserTag(final Node node, final HashMap<String, User> users,      final HashMap<String, String> userPassword,      final HashMap<String, Set<String>> proxyUserMap) {    final NamedNodeMap userAttrMap = node.getAttributes();    final Node userNameAttr = userAttrMap.getNamedItem(USERNAME_ATTR);    if (userNameAttr == null) {      throw new RuntimeException(\"Error loading user. The '\" + USERNAME_ATTR          + \"' attribute doesn't exist\");    }    // Add user to the user/password map    final String username = userNameAttr.getNodeValue();    //final String password = passwordAttr.getNodeValue();    //userPassword.put(username, username);    userPassword.put(username, username);    // Add the user to the node    final User user = new User(userNameAttr.getNodeValue());    users.put(username, user);    logger.info(\"Loading user \" + user.getUserId());    final Node roles = userAttrMap.getNamedItem(ROLES_ATTR);    if (roles != null) {      final String value = roles.getNodeValue();      final String[] roleSplit = value.split(\"\\\\s*,\\\\s*\");      for (final String role : roleSplit) {        user.addRole(role);      }    }    final Node groups = userAttrMap.getNamedItem(GROUPS_ATTR);    if (groups != null) {      final String value = groups.getNodeValue();      final String[] groupSplit = value.split(\"\\\\s*,\\\\s*\");      for (final String group : groupSplit) {        user.addGroup(group);      }    }    final Node proxy = userAttrMap.getNamedItem(PROXY_ATTR);    if (proxy != null) {      final String value = proxy.getNodeValue();      //\u7a7a\u5b57\u7b26\u4e32\u4e0d\u505a\u5904\u7406      if(org.apache.commons.lang.StringUtils.isNotEmpty(value)){        final String[] proxySplit = value.split(\"\\\\s*,\\\\s*\");        for (final String proxyUser : proxySplit) {          Set<String> proxySet = proxyUserMap.get(username);          if (proxySet == null) {            proxySet = new HashSet<>();            proxyUserMap.put(username, proxySet);          }          //\u628a\u4ee3\u7406\u7528\u6237\u6dfb\u52a0\u5230User\u5bf9\u8c61\u4e2d          user.addProxyUser(proxyUser);          proxySet.add(proxyUser);        }      }    }    return user;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/XmlUsersSync.java", "stars": "18", "class": {"name": "XmlUsersSync", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getXmlUserMap", "params": [], "throws": null, "modifiers": ["public"], "return_type": "HashMap<String,User>", "snippet": "  public HashMap<String, User> getXmlUserMap(){    return this.users;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/XmlUsersSync.java", "stars": "18", "class": {"name": "XmlUsersSync", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testMessage", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void testMessage() throws Exception {\t\tthis.mockMvc.perform(get(\"/hi\")).andExpect(content().string(\"Hello World\"));\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-junit-vintage/src/test/java/smoketest/SampleJUnitVintageApplicationTests.java", "stars": "47572", "class": {"name": "SampleJUnitVintageApplicationTests", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "musicupload", "params": ["MusicUploadRequest", "String"], "throws": ["UploadFailedException", "UnsupportedEncodingException"], "modifiers": ["public"], "return_type": "ResponseEntity<MusicUploadResponse>", "snippet": "    public ResponseEntity<MusicUploadResponse> musicupload(@RequestBody(required = false) final MusicUploadRequest musicUploadRequest, @RequestHeader(\"authorization\") final String authorization) throws            UploadFailedException, UnsupportedEncodingException {        final MusicEntity musicEntity = new MusicEntity();        musicEntity.setMusic(musicUploadRequest.getMusic());        musicEntity.setName(musicUploadRequest.getName());        musicEntity.setDescription(musicUploadRequest.getDescription());        musicEntity.setUuid(UUID.randomUUID().toString());        musicEntity.setNo_of_likes(0);        musicEntity.setCreated_at(ZonedDateTime.now());        musicEntity.setStatus(\"REGISTERED\");        final MusicEntity createdmusicEntity = musicUploadService.upload(musicEntity, authorization);        MusicUploadResponse musicUploadResponse = new MusicUploadResponse().id(createdmusicEntity.getUuid()).status(\"MUSIC SUCCESSFULLY REGISTERED\");        return new ResponseEntity<MusicUploadResponse>(musicUploadResponse, HttpStatus.CREATED);    }", "url": "https://raw.githubusercontent.com/aayush-grover/SoundCloud-Rest-Api/master/musichoster-api/src/main/java/com/upgrad/musichoster/api/controller/MusicUploadController.java", "stars": "2", "class": {"name": "MusicUploadController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPopulation", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getPopulation() {        return population;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/model/City.java", "stars": "2", "class": {"name": "City", "extends": "AnyData", "implements": null, "modifiers": ["public"]}}, {"method_name": "getMayor", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getMayor() {        return mayor;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/model/City.java", "stars": "2", "class": {"name": "City", "extends": "AnyData", "implements": null, "modifiers": ["public"]}}, {"method_name": "showDialog", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "Dlg", "snippet": "    public Dlg showDialog(boolean editable) {        final Dlg dlg = new CityDlg(this);        dlg.setEditable(editable);        dlg.setVisible(true);        return dlg;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/model/City.java", "stars": "2", "class": {"name": "City", "extends": "AnyData", "implements": null, "modifiers": ["public"]}}, {"method_name": "showSonDialog", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Dlg", "snippet": "    public Dlg showSonDialog() {        return null;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/model/City.java", "stars": "2", "class": {"name": "City", "extends": "AnyData", "implements": null, "modifiers": ["public"]}}, {"method_name": "provideOpenSubsProvider", "params": ["Context", "OkHttpClient", "ObjectMapper", "XMLRPCClient"], "throws": null, "modifiers": ["public"], "return_type": "OpenSubsProvider", "snippet": "    public OpenSubsProvider provideOpenSubsProvider(Context context, OkHttpClient client, ObjectMapper mapper, XMLRPCClient xmlrpcClient) {        return new OpenSubsProvider(context, client, mapper, xmlrpcClient);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/ProviderModule.java", "stars": "4", "class": {"name": "ProviderModule", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "provideMoviesProvider", "params": ["OkHttpClient", "ObjectMapper", "OpenSubsProvider"], "throws": null, "modifiers": ["public"], "return_type": "MoviesProvider", "snippet": "    public MoviesProvider provideMoviesProvider(OkHttpClient client, ObjectMapper mapper,                                                OpenSubsProvider subsProvider) {        return new MoviesProvider(client, mapper, subsProvider);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/ProviderModule.java", "stars": "4", "class": {"name": "ProviderModule", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "provideTVProvider", "params": ["OkHttpClient", "ObjectMapper", "OpenSubsProvider"], "throws": null, "modifiers": ["public"], "return_type": "TVProvider", "snippet": "    public TVProvider provideTVProvider(OkHttpClient client, ObjectMapper mapper,                                        OpenSubsProvider subsProvider) {        return new TVProvider(client, mapper, subsProvider);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/ProviderModule.java", "stars": "4", "class": {"name": "ProviderModule", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "provideAnimeProvider", "params": ["OkHttpClient", "ObjectMapper", "OpenSubsProvider"], "throws": null, "modifiers": ["public"], "return_type": "AnimeProvider", "snippet": "    public AnimeProvider provideAnimeProvider(OkHttpClient client, ObjectMapper mapper,                                              OpenSubsProvider subsProvider) {        return new AnimeProvider(client, mapper, subsProvider);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/ProviderModule.java", "stars": "4", "class": {"name": "ProviderModule", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["PostLiteId"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(PostLiteId aId) {        theId = aId;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/blog/PostLite.java", "stars": "15", "class": {"name": "PostLite", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setBlogId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setBlogId(int aBlogId) {        blogId = aBlogId;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/blog/PostLite.java", "stars": "15", "class": {"name": "PostLite", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "PostLiteId", "snippet": "    public PostLiteId getId() {        return theId;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/blog/PostLite.java", "stars": "15", "class": {"name": "PostLite", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBlogId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getBlogId() {        return blogId;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/blog/PostLite.java", "stars": "15", "class": {"name": "PostLite", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean equals(Object o) {        if (this == o) {            return true;        }        if (o == null || getClass() != o.getClass()) {            return false;        }        final PostLite that = (PostLite) o;        if (blogId != that.blogId) {            return false;        }        if (theId != null ? !theId.equals(that.theId) : that.theId != null) {            return false;        }        return true;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/blog/PostLite.java", "stars": "15", "class": {"name": "PostLite", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int hashCode() {        int myresult = theId != null ? theId.hashCode() : 0;        myresult = 31 * myresult + blogId;        return myresult;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/blog/PostLite.java", "stars": "15", "class": {"name": "PostLite", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "Boolean", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNonNullParameter(PreparedStatement ps, int i, Boolean parameter, JdbcType jdbcType)      throws SQLException {    ps.setBoolean(i, parameter);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/BooleanTypeHandler.java", "stars": "15", "class": {"name": "BooleanTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Boolean", "snippet": "  public Boolean getNullableResult(ResultSet rs, String columnName)      throws SQLException {    boolean result = rs.getBoolean(columnName);    return !result && rs.wasNull() ? null : result;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/BooleanTypeHandler.java", "stars": "15", "class": {"name": "BooleanTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Boolean", "snippet": "  public Boolean getNullableResult(ResultSet rs, int columnIndex)      throws SQLException {    boolean result = rs.getBoolean(columnIndex);    return !result && rs.wasNull() ? null : result;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/BooleanTypeHandler.java", "stars": "15", "class": {"name": "BooleanTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Boolean", "snippet": "  public Boolean getNullableResult(CallableStatement cs, int columnIndex)      throws SQLException {    boolean result = cs.getBoolean(columnIndex);    return !result && cs.wasNull() ? null : result;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/BooleanTypeHandler.java", "stars": "15", "class": {"name": "BooleanTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "isVanillaAdapter", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean isVanillaAdapter() {\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/model/CBTBakedModel.java", "stars": "3", "class": {"name": "CBTBakedModel", "extends": "ForwardingBakedModel", "implements": null, "modifiers": ["public"]}}, {"method_name": "emitBlockQuads", "params": ["BlockRenderView", "BlockState", "BlockPos", "Supplier<Random>", "RenderContext"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void emitBlockQuads(BlockRenderView blockView, BlockState state, BlockPos pos, Supplier<Random> randomSupplier, RenderContext context) {\t\tSpriteFinder spriteFinder = SpriteFinder.get(MinecraftClient.getInstance().getBakedModelManager().method_24153(SpriteAtlasTexture.BLOCK_ATLAS_TEX));\t\tcontext.pushTransform(quad -> {\t\t\t/*if(sideMatcher.test(quad.nominalFace())) {\t\t\t\tSprite spr = spriteFinder.find(quad, 0);\t\t\t\tif(tileMatcher == null || tileMatcher.test(spr)) {\t\t\t\t\tSprite newSpr = getSpriteForSide(quad.lightFace(), blockView, state, pos, randomSupplier.get());\t\t\t\t\tif(newSpr != null) {\t\t\t\t\t\tfor(int i = 0; i < 4; i++) {\t\t\t\t\t\t\tquad.spriteBake(0, newSpr, MutableQuadView.BAKE_LOCK_UV);\t\t\t\t\t\t\t//quad.sprite(i, 0, quad.spriteU(i, 0) - spr.getMinU() + newSpr.getMinU(), quad.spriteV(i, 0) - spr.getMinV() + newSpr.getMinV());\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t}\t\t\t}*/\t\t\tfor(SpriteProvider provider : spriteProviders) {\t\t\t\t//use short-circuiting to our advantage to save the more expensive ones for last\t\t\t\tif(provider.affectsDirection(quad.nominalFace()) && provider.affectsBlock(blockView, state, pos) && provider.affectsSprite(quad, spriteFinder)) {\t\t\t\t\tSprite newSpr;\t\t\t\t\tif((newSpr = provider.getSpriteForSide(quad.nominalFace(), blockView, state, pos, randomSupplier.get())) != null) {\t\t\t\t\t\tquad.spriteBake(0, newSpr, MutableQuadView.BAKE_LOCK_UV);\t\t\t\t\t}\t\t\t\t}\t\t\t}\t\t\treturn true;\t\t});\t\tsuper.emitBlockQuads(blockView, state, pos, randomSupplier, context);\t\tcontext.popTransform();\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/model/CBTBakedModel.java", "stars": "3", "class": {"name": "CBTBakedModel", "extends": "ForwardingBakedModel", "implements": null, "modifiers": ["public"]}}, {"method_name": "emitItemQuads", "params": ["ItemStack", "Supplier<Random>", "RenderContext"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void emitItemQuads(ItemStack stack, Supplier<Random> randomSupplier, RenderContext context) {\t\tthrow new UnsupportedOperationException(\"CBT models should never try to render as an item! THIS IS A PROBLEM!\");\t}", "url": "https://raw.githubusercontent.com/Nuclearfarts/connected-block-textures/master/src/main/java/io/github/nuclearfarts/cbt/model/CBTBakedModel.java", "stars": "3", "class": {"name": "CBTBakedModel", "extends": "ForwardingBakedModel", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create a SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/javassist/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/javassist/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/javassist/JavassistTest.java", "stars": "15", "class": {"name": "JavassistTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetAUserAndGroups", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetAUserAndGroups() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = mapper.getUser(1);      Assertions.assertEquals(\"User1\", user.getName());      assertTrue(user instanceof Proxy);      Assertions.assertEquals(1, user.getGroups().size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/javassist/JavassistTest.java", "stars": "15", "class": {"name": "JavassistTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "loginFtpWithRetry", "params": ["IFtpHelper", "FtpConnParams", "Logger"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void loginFtpWithRetry(IFtpHelper ftpHelper, FtpConnParams connParams, Logger log){        try {            RetryUtil.executeWithRetry((Callable<Void>) () -> {                ftpHelper.loginFtpServer(connParams);                return null;            }, 3, 4000, true);        } catch (Exception e) {            String message = String                    .format(\"\u4e0eftp\u670d\u52a1\u5668\u5efa\u7acb\u8fde\u63a5\u5931\u8d25, host:%s, username:%s, port:%s, errorMessage:%s\",                            connParams.getHost(), connParams.getUsername(), connParams.getPort(), e.getMessage());            log.error(message);            throw DataXException.asDataXException(                    FtpWriterErrorCode.FAIL_LOGIN, message, e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/FtpWriter.java", "stars": "23", "class": {"name": "FtpWriter", "extends": "Writer", "implements": null, "modifiers": ["public"]}}, {"method_name": "isSupportStream", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isSupportStream() {            return true;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/FtpWriter.java", "stars": "23", "class": {"name": "Job", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void init() {            this.writerSliceConfig = this.getPluginJobConf();            this.validateParameter();            UnstructuredStorageWriterUtil                    .validateParameter(this.writerSliceConfig);            loginFtpWithRetry(ftpHelper, this.connParams, LOG);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/FtpWriter.java", "stars": "23", "class": {"name": "Job", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "syncMetaData", "params": ["MetaSchema"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void syncMetaData(MetaSchema metaSchema) {            String path = this.writerSliceConfig.getString(Key.PATH);            //try to create direcotry            this.ftpHelper.mkDirRecursive(path);            //should wait for signal first            waitForSignal(path);            addMetaSchemaToFile(GsonUtil.toJson(metaSchema));        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/FtpWriter.java", "stars": "23", "class": {"name": "Job", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "validateParameter", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void validateParameter() {            String path = this.writerSliceConfig.getNecessaryValue(Key.PATH,                    FtpWriterErrorCode.REQUIRED_VALUE);            if (!path.startsWith(\"/\")) {                String message = String.format(\"\u8bf7\u68c0\u67e5\u53c2\u6570path:%s,\u9700\u8981\u914d\u7f6e\u4e3a\u7edd\u5bf9\u8def\u5f84\", path);                LOG.error(message);                throw DataXException.asDataXException(                        FtpWriterErrorCode.ILLEGAL_VALUE, message);            }            this.connParams = FtpConnParams.compose(connParams ->{                connParams.setHost(this.writerSliceConfig.getNecessaryValue(Key.HOST,                        FtpWriterErrorCode.REQUIRED_VALUE));                connParams.setUsername(this.writerSliceConfig.getNecessaryValue(                        Key.USERNAME, FtpWriterErrorCode.REQUIRED_VALUE));                connParams.setPassword(this.writerSliceConfig.getString(Key.PASSWORD, \"\"));                connParams.setPrvKeyPath(this.writerSliceConfig.getString(Key.PRV_KEY_PATH, \"\"));                if(StringUtils.isBlank(connParams.getPrvKeyPath()) && StringUtils.isBlank(connParams.getPassword())){                    throw DataXException.asDataXException(FtpWriterErrorCode.REQUIRED_VALUE, \"you need to set private key path or password\");                }                connParams.setTimeout(this.writerSliceConfig.getInt(Key.TIMEOUT, Constant.DEFAULT_TIMEOUT));                connParams.setProtocol(this.writerSliceConfig.getNecessaryValue(                        Key.PROTOCOL, FtpWriterErrorCode.REQUIRED_VALUE));                connParams.setPort(this.writerSliceConfig.getInt(Key.PORT,                        Constant.DEFAULT_SFTP_PORT));            });            if (\"sftp\".equalsIgnoreCase(this.connParams.getProtocol())) {                this.ftpHelper = new SftpHelperImpl();            } else if (\"ftp\".equalsIgnoreCase(this.connParams.getProtocol())) {                this.ftpHelper = new StandardFtpHelperImpl();            } else {                throw DataXException.asDataXException(                        FtpWriterErrorCode.ILLEGAL_VALUE, String.format(                                \"\u4ec5\u652f\u6301 ftp\u548csftp \u4f20\u8f93\u534f\u8bae , \u4e0d\u652f\u6301\u60a8\u914d\u7f6e\u7684\u4f20\u8f93\u534f\u8bae: [%s]\",                                this.connParams.getProtocol()));            }            this.writerSliceConfig.set(Key.PORT, this.connParams.getPort());        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/FtpWriter.java", "stars": "23", "class": {"name": "Job", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "prepare", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void prepare() {            String path = this.writerSliceConfig.getString(Key.PATH);            waitForSignal(path);            // warn: \u8fd9\u91cc\u7528\u6237\u9700\u8981\u914d\u4e00\u4e2a\u76ee\u5f55            this.ftpHelper.mkDirRecursive(path);            String writeMode = this.writerSliceConfig                    .getString(com.alibaba.datax.plugin.unstructuredstorage.writer.Key.WRITE_MODE);            Set<String> allFileExists = this.ftpHelper.getAllFilesInDir(path,                    \"\", false, false);            this.allFileExists = allFileExists;            // truncate option handler            if (\"truncate\".equals(writeMode)) {                LOG.info(String.format(                        \"\u7531\u4e8e\u60a8\u914d\u7f6e\u4e86writeMode truncate, \u5f00\u59cb\u6e05\u7406 [%s] \u4e0b\u9762\u7684\u5185\u5bb9\",                        path));                Set<String> fullFileNameToDelete = new HashSet<>();                for (String each : allFileExists) {                    //skip meta file                    if(each.trim().equals(this.writerSliceConfig                            .getString(Key.META_FILE_PATH, DEFAULT_META_FILE_PATH))){                        continue;                    }                    fullFileNameToDelete.add(UnstructuredStorageWriterUtil                            .buildFilePath(path, each, null));                }                LOG.info(String.format(                        \"\u5220\u9664\u76ee\u5f55path:[%s] \u4e0b\u6587\u4ef6\u5217\u8868\u5982\u4e0b: [%s]\", path,                        StringUtils.join(fullFileNameToDelete.iterator(), \", \")));                this.ftpHelper.deleteFiles(fullFileNameToDelete);            } else if (\"append\".equals(writeMode)) {                LOG.info(String                        .format(\"\u7531\u4e8e\u60a8\u914d\u7f6e\u4e86writeMode append, [%s] \u76ee\u5f55\u5199\u5165\u524d\u4e0d\u505a\u6e05\u7406\u5de5\u4f5c\",                                path));                LOG.info(String.format(                        \"\u76ee\u5f55path:[%s] \u4e0b\u5df2\u7ecf\u5b58\u5728\u7684\u6587\u4ef6\u5217\u8868\u5982\u4e0b: [%s]\",                        path,                        StringUtils.join(allFileExists.iterator(), \", \")));            } else if (\"nonConflict\".equals(writeMode)) {                LOG.info(String.format(                        \"\u7531\u4e8e\u60a8\u914d\u7f6e\u4e86writeMode nonConflict, \u5f00\u59cb\u68c0\u67e5 [%s] \u4e0b\u9762\u7684\u5185\u5bb9\", path));                if (!allFileExists.isEmpty()) {                    LOG.info(String.format(                            \"\u76ee\u5f55path:[%s] \u4e0b\u51b2\u7a81\u6587\u4ef6\u5217\u8868\u5982\u4e0b: [%s]\",                            path,                            StringUtils.join(allFileExists.iterator(), \", \")));                    throw DataXException                            .asDataXException(                                    FtpWriterErrorCode.ILLEGAL_VALUE,                                    String.format(                                            \"\u60a8\u914d\u7f6e\u7684path: [%s] \u76ee\u5f55\u4e0d\u4e3a\u7a7a, \u4e0b\u9762\u5b58\u5728\u5176\u4ed6\u6587\u4ef6\u6216\u6587\u4ef6\u5939.\",                                            path));                }            } else {                throw DataXException                        .asDataXException(                                FtpWriterErrorCode.ILLEGAL_VALUE,                                String.format(                                        \"\u4ec5\u652f\u6301 truncate, append, nonConflict \u4e09\u79cd\u6a21\u5f0f, \u4e0d\u652f\u6301\u60a8\u914d\u7f6e\u7684 writeMode \u6a21\u5f0f : [%s]\",                                        writeMode));            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/FtpWriter.java", "stars": "23", "class": {"name": "Job", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "post", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void post() {            if(StringUtils.isNotBlank(this.tempPath)){                String path = this.writerSliceConfig.getString(Key.PATH);                try {                    this.ftpHelper.moveToDirectory(new ArrayList<>(                            this.ftpHelper.getAllFilesInDir(this.tempPath, \"\", false, true)                    ), path);                }finally{                    this.ftpHelper.deleteFiles(Collections.singleton(this.tempPath));                }                this.tempPath = null;            }            //add signal file            addSignal();        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/FtpWriter.java", "stars": "23", "class": {"name": "Job", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "destroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void destroy() {            if(StringUtils.isNotBlank(this.tempPath)){                this.ftpHelper.deleteFiles(Collections.singleton(this.tempPath));            }            try {                this.ftpHelper.logoutFtpServer();            } catch (Exception e) {                String message = String                        .format(\"\u5173\u95ed\u4e0eftp\u670d\u52a1\u5668\u8fde\u63a5\u5931\u8d25, host:%s, username:%s, port:%s, errorMessage:%s\",                                this.connParams.getHost(), this.connParams.getUsername(),                                this.connParams.getPort(), e.getMessage());                LOG.error(message, e);            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/FtpWriter.java", "stars": "23", "class": {"name": "Job", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "split", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "List<Configuration>", "snippet": "        public List<Configuration> split(int mandatoryNumber) {            this.tempPath = UnstructuredStorageWriterUtil.buildTmpFilePath(                    this.writerSliceConfig.getString(Key.PATH),                    String.format(CommonConstant.TEMP_PREFIX, System.currentTimeMillis()),                    IOUtils.DIR_SEPARATOR,                    path -> this.allFileExists.contains(path)            );            this.writerSliceConfig.set(com.alibaba.datax.plugin.unstructuredstorage.writer.Key.TEMP_PATH,                    this.tempPath);            //mkdir            this.ftpHelper.mkDirRecursive(this.tempPath);            return UnstructuredStorageWriterUtil.split(this.writerSliceConfig,                    this.allFileExists,  getTransportType() ,mandatoryNumber);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/FtpWriter.java", "stars": "23", "class": {"name": "Job", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "waitForSignal", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void waitForSignal(String path0){            if(this.writerSliceConfig.getBool(Key.TRANSIT, true)) {                String path = path0;                if (!path.endsWith(String.valueOf(IOUtils.DIR_SEPARATOR_UNIX))) {                    path += String.valueOf(IOUtils.DIR_SEPARATOR_UNIX);                }                path += SIGNAL_FILE_NAME;                signalFilePath = path;                if (ftpHelper.isFileExist(path)) {                    LOG.info(\"signal file: {} exits, wait for the consuming of downstream...\", signalFilePath);                    do {                        try {                            Thread.sleep(WAIT_SIGNAL_SLEEP_INTERVAL);                        } catch (InterruptedException e) {                            Thread.currentThread().interrupt();                            throw DataXException.asDataXException(FtpWriterErrorCode.RUNTIME_EXCEPTION,                                    \"interrupted while waiting for the consuming of downstream\");                        }                    } while ((ftpHelper.isFileExist(path)));                }            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/FtpWriter.java", "stars": "23", "class": {"name": "Job", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "addSignal", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void addSignal(){            if(StringUtils.isNotEmpty(signalFilePath) && this.writerSliceConfig.getBool(Key.TRANSIT, true)){                //empty signal file                ftpHelper.getOutputStream(signalFilePath);            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/FtpWriter.java", "stars": "23", "class": {"name": "Job", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "addMetaSchemaToFile", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void addMetaSchemaToFile(String content){            String path = this.writerSliceConfig.getString(Key.PATH);            if(!path.endsWith(String.valueOf(IOUtils.DIR_SEPARATOR_UNIX))){                path += String.valueOf(IOUtils.DIR_SEPARATOR_UNIX);            }            String metaPath = this.writerSliceConfig.getString(Key.META_FILE_PATH, DEFAULT_META_FILE_PATH);            path += metaPath;            try {                if(ftpHelper.isFileExist(path)){                    ftpHelper.deleteFiles(Collections.singleton(path));                }                ByteArrayInputStream inputStream = new ByteArrayInputStream(                        content.getBytes(this.writerSliceConfig.getString(com.alibaba.datax.plugin.unstructuredstorage.writer.Key.ENCODING,                                \"UTF-8\")));                OutputStream outputStream = ftpHelper.getOutputStream(path);                byte[] buffer = new byte[8 * 1024];                int size;                while((size = inputStream.read(buffer)) > 0){                    outputStream.write(buffer, 0, size);                }                //close simplify                inputStream.close();                outputStream.close();            } catch (IOException e) {                throw DataXException.asDataXException(FtpWriterErrorCode.FAIL_SYNC_METASCHEMA, e.getMessage(), e);            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/FtpWriter.java", "stars": "23", "class": {"name": "Job", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void init() {            this.writerSliceConfig = this.getPluginJobConf();            this.tempPath = this.writerSliceConfig                    .getString(com.alibaba.datax.plugin.unstructuredstorage.writer.Key.TEMP_PATH, \"\");            this.fileName = this.writerSliceConfig                    .getString(com.alibaba.datax.plugin.unstructuredstorage.writer.Key.FILE_NAME, \"\");            this.suffix = this.writerSliceConfig                    .getString(com.alibaba.datax.plugin.unstructuredstorage.writer.Key.SUFFIX);            this.connParams = FtpConnParams.compose(connParams -> {                connParams.setHost(this.writerSliceConfig.getString(Key.HOST));                connParams.setPort(this.writerSliceConfig.getInt(Key.PORT));                connParams.setUsername(this.writerSliceConfig.getString(Key.USERNAME));                connParams.setPassword(this.writerSliceConfig.getString(Key.PASSWORD, \"\"));                connParams.setPrvKeyPath(this.writerSliceConfig.getString(Key.PRV_KEY_PATH, \"\"));                connParams.setTimeout(this.writerSliceConfig.getInt(Key.TIMEOUT,                        Constant.DEFAULT_TIMEOUT));                connParams.setProtocol(this.writerSliceConfig.getString(Key.PROTOCOL));            });            if (\"sftp\".equalsIgnoreCase(this.connParams.getProtocol())) {                this.ftpHelper = new SftpHelperImpl();            } else if (\"ftp\".equalsIgnoreCase(this.connParams.getProtocol())) {                this.ftpHelper = new StandardFtpHelperImpl();            }            loginFtpWithRetry(ftpHelper, this.connParams, LOG);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/FtpWriter.java", "stars": "23", "class": {"name": "Task", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "prepare", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void prepare() {        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/FtpWriter.java", "stars": "23", "class": {"name": "Task", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "startWrite", "params": ["RecordReceiver"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void startWrite(RecordReceiver lineReceiver) {            LOG.info(\"begin do write...\");            String fileFullPath = UnstructuredStorageWriterUtil.buildFilePath(                    this.tempPath, this.fileName, this.suffix);            LOG.info(String.format(\"write to file : [%s]\", fileFullPath));            OutputStream outputStream = null;            try {                ftpHelper.mkDirRecursive(fileFullPath.substring(0,                        StringUtils.lastIndexOf(fileFullPath, IOUtils.DIR_SEPARATOR)));                outputStream = this.ftpHelper.getOutputStream(fileFullPath);                String encoding = writerSliceConfig.getString(com.alibaba.datax.plugin.unstructuredstorage.writer.Key.ENCODING,                        com.alibaba.datax.plugin.unstructuredstorage.writer.Constant.DEFAULT_ENCODING);                String compress = writerSliceConfig.getString(com.alibaba.datax.plugin.unstructuredstorage.writer.Key.COMPRESS, \"\");                if(\"zip\".equalsIgnoreCase(compress)){                    outputStream = new ZipCollectOutputStream(fileName.substring(0, fileName.lastIndexOf(\".\")),                            outputStream, encoding);                }                UnstructuredStorageWriterUtil.writeToStream(lineReceiver,                        outputStream, this.writerSliceConfig, this.fileName,                        this.getTaskPluginCollector());            } catch (Exception e) {                throw DataXException.asDataXException(                        FtpWriterErrorCode.WRITE_FILE_IO_ERROR,                        String.format(\"\u65e0\u6cd5\u521b\u5efa\u5f85\u5199\u6587\u4ef6 : [%s]\", this.fileName), e);            } finally {                IOUtils.closeQuietly(outputStream);            }            LOG.info(\"end do write\");        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/FtpWriter.java", "stars": "23", "class": {"name": "Task", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "startWrite", "params": ["ChannelInput"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void startWrite(ChannelInput channelInput) {            LOG.info(\"begin do write form stream channel\");            try{                InputStream inputStream;                while((inputStream = channelInput.nextStream()) != null){                    StreamMeta metaData = channelInput.streamMetaData(this.writerSliceConfig                            .getString(com.alibaba.datax.plugin.unstructuredstorage.writer.Key.ENCODING, \"UTF-8\"));                    LOG.info(\"begin do read input stream, name : \" + metaData.getName() + \", relativePath: \" + metaData.getRelativePath());                    String relativePath = metaData.getRelativePath();                    if(StringUtils.isNotBlank(fileName)){                        //modify the relativePath                        relativePath = relativePath.substring(0, relativePath.lastIndexOf(IOUtils.DIR_SEPARATOR) + 1)                                + fileName + \"_\" + metaData.getName();                    }                    String fileFullPath = UnstructuredStorageWriterUtil.buildFilePath(this.tempPath, relativePath, \"\");                    ftpHelper.mkDirRecursive(fileFullPath.substring(0,                            StringUtils.lastIndexOf(fileFullPath, IOUtils.DIR_SEPARATOR)));                    OutputStream outputStream = ftpHelper.getOutputStream(fileFullPath);                    try{                        UnstructuredStorageWriterUtil.writeToStream(inputStream, outputStream,                                this.writerSliceConfig);                    }finally{                        IOUtils.closeQuietly(outputStream);                    }                }            } catch (IOException e){                throw DataXException.asDataXException(FrameworkErrorCode.CHANNEL_STREAM_ERROR, e);            }            LOG.info(\"end to write from stream channel\");        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/FtpWriter.java", "stars": "23", "class": {"name": "Task", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "post", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void post() {        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/FtpWriter.java", "stars": "23", "class": {"name": "Task", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "destroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void destroy() {            try {                this.ftpHelper.logoutFtpServer();            } catch (Exception e) {                String message = String                        .format(\"\u5173\u95ed\u4e0eftp\u670d\u52a1\u5668\u8fde\u63a5\u5931\u8d25, host:%s, username:%s, port:%s, errorMessage:%s\",                                this.connParams.getHost(), this.connParams.getUsername(), this.connParams.getPort(), e.getMessage());                LOG.error(message, e);            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-ftpwriter/src/main/java/com/alibaba/datax/plugin/writer/ftpwriter/FtpWriter.java", "stars": "23", "class": {"name": "Task", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "indices", "params": ["String", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "Response<Object>", "snippet": "    public Response<Object> indices(@PathVariable(\"ds_id\") String dsId, HttpServletRequest request){        if(!hasDataAuth(DataSource.class, DataAuthScope.EXECUTE, request, dataSourceService.get(dsId))){            return new Response<>().errorResponse(CodeConstant.AUTH_ERROR, null, super.informationSwitch(\"exchange.data_source.not.access.rights\"));        }        return new Response<>().successResponse(elasticMetaDbService.getDatabases(dsId));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/ElasticInfoController.java", "stars": "23", "class": {"name": "ElasticInfoController", "extends": "AbstractDataAuthController", "implements": null, "modifiers": ["public"]}}, {"method_name": "types", "params": ["String", "String", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "Response<Object>", "snippet": "    public Response<Object> types(@PathVariable(\"ds_id\") String dsId,                                  @PathVariable(\"index\")String index, HttpServletRequest request){        if(!hasDataAuth(DataSource.class, DataAuthScope.EXECUTE, request, dataSourceService.get(dsId))){            return new Response<>().errorResponse(CodeConstant.AUTH_ERROR, null, super.informationSwitch(\"exchange.data_source.not.access.rights\"));        }        return new Response<>().successResponse(elasticMetaDbService.getTables(dsId, index));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/ElasticInfoController.java", "stars": "23", "class": {"name": "ElasticInfoController", "extends": "AbstractDataAuthController", "implements": null, "modifiers": ["public"]}}, {"method_name": "columns", "params": ["String", "String", "String", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "Response<Object>", "snippet": "    public Response<Object> columns(@PathVariable(\"ds_id\") String dsId,                                    @PathVariable(\"index\")String index,                                    @PathVariable(\"type\")String type, HttpServletRequest request){        if(!hasDataAuth(DataSource.class, DataAuthScope.EXECUTE, request, dataSourceService.get(dsId))){            return new Response<>().errorResponse(CodeConstant.AUTH_ERROR, null, super.informationSwitch(\"exchange.data_source.not.access.rights\"));        }        return new Response<>().successResponse(elasticMetaDbService.getColumns(dsId, index,  type));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/ElasticInfoController.java", "stars": "23", "class": {"name": "ElasticInfoController", "extends": "AbstractDataAuthController", "implements": null, "modifiers": ["public"]}}, {"method_name": "apply", "params": ["DynamicContext"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean apply(DynamicContext context) {    context.appendSql(text);    return true;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/scripting/xmltags/StaticTextSqlNode.java", "stars": "15", "class": {"name": "StaticTextSqlNode", "extends": null, "implements": ["SqlNode"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args)\t{\t\tGouzaoqiDemo g1 = new GouzaoqiDemo();\t\tGouzaoqiDemo g2 = new GouzaoqiDemo(10);\t\tGouzaoqiDemo g3 = new GouzaoqiDemo(\"\u738b\u741b\");\t\tGouzaoqiDemo g4 = new GouzaoqiDemo(10 , \"\u738b\u741b\");\t\t\t\t//\u8c03\u7528\u5e26\u6709static\u7684\u65b9\u6cd5:\u7c7b\u540d.\t\tConstructorTest.doSome();    \t\tdoSome();    //\u5728\u540c\u4e00\u4e2a\u7c7b\u4e2d\u53ef\u76f4\u63a5\u8c03\u7528\uff0c\u6548\u679c\u4e0e\u4e0a\u4e00\u884c\u4ee3\u7801\u4e00\u6837\t\t\t\t//\u8c03\u7528\u6ca1\u6709static\u7684\u65b9\u6cd5:\u5f15\u7528.\t\t//doOther\u65b9\u6cd5\u5728ConstructorTest\u7c7b\u4e2d\uff0c\u6240\u4ee5\u8981\u521b\u5efaConstructorTest\u5bf9\u8c61\t\t//\u521b\u5efaConstructorTest\u5bf9\u8c61\uff0c\u8c03\u7528\u65e0\u53c2\u6570\u6784\u9020\u65b9\u6cd5\u3002\t\tConstructorTest c = new ConstructorTest();    //\u4e00\u4e2a\u7c7b\u4e2d\u6ca1\u6709\u4efb\u4f55\u6784\u9020\u65b9\u6cd5\u7684\u8bdd\uff0c\u7cfb\u7edf\u9ed8\u8ba4\u63d0\u4f9b\u4e00\u4e2a\u65e0\u53c2\u6570\u6784\u9020\u5668\t\tc.doOther();\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/leiTest/ConstructorTest.java", "stars": "2", "class": {"name": "ConstructorTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "doSome", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void doSome()\t{\t\tSystem.out.println(\"do some!\");\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/leiTest/ConstructorTest.java", "stars": "2", "class": {"name": "ConstructorTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "doOther", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void doOther()\t{\t\tSystem.out.println(\"do other!\");\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/leiTest/ConstructorTest.java", "stars": "2", "class": {"name": "ConstructorTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void show() {        System.out.println(\"\u8fd9\u662fPython\u8bfe\u7a0b\u7684\u7b14\u8bb0\");    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/abstractfactory/PythonNote.java", "stars": "2", "class": {"name": "PythonNote", "extends": "Note", "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void run();}", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/task/AbstractCreateChannelFailureTask.java", "stars": "1", "class": {"name": "AbstractCreateChannelFailureTask", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "handle", "params": ["Class<?>", "Type", "Object"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object handle(Class<?> target, Type[] neededGenerics, Object value) {        if (isApplicable(target, value)                && (getParametersRequired() == -1 || neededGenerics.length == getParametersRequired())) {            return cast(target, neededGenerics, value);        } else {            return null;        }    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/typeconversions/TypeConversion.java", "stars": "3", "class": {"name": "TypeConversion", "extends": null, "implements": ["Comparable"], "modifiers": ["public", "abstract"]}}, {"method_name": "cast", "params": ["Class<?>", "Type", "Object"], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "Object", "snippet": "    protected abstract Object cast(Class<?> target, Type[] neededGenerics, Object value);    public abstract boolean isApplicable(Class<?> target, Object value);    protected abstract int getParametersRequired();    public int compareTo(TypeConversion other) {        return Integer.valueOf(getParametersRequired()).compareTo(other.getParametersRequired());    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/typeconversions/TypeConversion.java", "stars": "3", "class": {"name": "TypeConversion", "extends": null, "implements": ["Comparable"], "modifiers": ["public", "abstract"]}}, {"method_name": "isApplicable", "params": ["Class<?>", "Object"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "boolean", "snippet": "    public abstract boolean isApplicable(Class<?> target, Object value);    protected abstract int getParametersRequired();    public int compareTo(TypeConversion other) {        return Integer.valueOf(getParametersRequired()).compareTo(other.getParametersRequired());    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/typeconversions/TypeConversion.java", "stars": "3", "class": {"name": "TypeConversion", "extends": null, "implements": ["Comparable"], "modifiers": ["public", "abstract"]}}, {"method_name": "getParametersRequired", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "int", "snippet": "    protected abstract int getParametersRequired();    public int compareTo(TypeConversion other) {        return Integer.valueOf(getParametersRequired()).compareTo(other.getParametersRequired());    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/typeconversions/TypeConversion.java", "stars": "3", "class": {"name": "TypeConversion", "extends": null, "implements": ["Comparable"], "modifiers": ["public", "abstract"]}}, {"method_name": "compareTo", "params": ["TypeConversion"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int compareTo(TypeConversion other) {        return Integer.valueOf(getParametersRequired()).compareTo(other.getParametersRequired());    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/typeconversions/TypeConversion.java", "stars": "3", "class": {"name": "TypeConversion", "extends": null, "implements": ["Comparable"], "modifiers": ["public", "abstract"]}}, {"method_name": "getDBType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getDBType() {    return \"h2\";  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-db/src/main/java/azkaban/db/H2FileDataSource.java", "stars": "18", "class": {"name": "H2FileDataSource", "extends": "AzkabanDataSource", "implements": null, "modifiers": ["public"]}}, {"method_name": "allowsOnDuplicateKey", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean allowsOnDuplicateKey() {    return false;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-db/src/main/java/azkaban/db/H2FileDataSource.java", "stars": "18", "class": {"name": "H2FileDataSource", "extends": "AzkabanDataSource", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onCreate(Bundle savedInstanceState) {\t\tsuper.onCreate(savedInstanceState);\t\tsetContentView(R.layout.profile);\t\tprofileMap = (Profile) getIntent().getSerializableExtra(\"profile\");\t\tLog.d(\"Custom-UI\", \"Validate ID = \" + profileMap.getValidatedId());\t\tLog.d(\"Custom-UI\", \"First Name  = \" + profileMap.getFirstName());\t\tLog.d(\"Custom-UI\", \"Last Name   = \" + profileMap.getLastName());\t\tLog.d(\"Custom-UI\", \"Email       = \" + profileMap.getEmail());\t\tLog.d(\"Custom-UI\", \"Gender  \t = \" + profileMap.getGender());\t\tLog.d(\"Custom-UI\", \"Country  \t = \" + profileMap.getCountry());\t\tLog.d(\"Custom-UI\", \"Language  \t = \" + profileMap.getLanguage());\t\tLog.d(\"Custom-UI\", \"Location \t = \" + profileMap.getLocation());\t\tLog.d(\"Custom-UI\", \"Profile Image URL  = \" + profileMap.getProfileImageURL());\t\tprovider_name = getIntent().getStringExtra(\"provider\");\t\t// Set title\t\tname = (TextView) findViewById(R.id.name);\t\tdisplayName = (TextView) findViewById(R.id.displayName);\t\temail = (TextView) findViewById(R.id.email);\t\tlocation = (TextView) findViewById(R.id.location);\t\tgender = (TextView) findViewById(R.id.gender);\t\tlanguage = (TextView) findViewById(R.id.language);\t\tcountry = (TextView) findViewById(R.id.country);\t\timage = (ImageView) findViewById(R.id.imgView);\t\timageLoader = new ImageLoader(ProfileActivity.this);\t\timageLoader.DisplayImage(profileMap.getProfileImageURL(), image);\t\t// Name:\t\t// Facebook returns : FullName,FirstName,Last Name\t\t// MySpace, SalesForce, Yahoo, Google, FourSquare,\t\t// Linkedin returns : Display Name, First , Last Name\t\t// RunKeeper : First Name , Full Name\t\t// Yammer, Twitter : FullName\t\tif (profileMap.getFullName() == null)\t\t\tname.setText(\"Name                  :  \" + profileMap.getFirstName() + profileMap.getLastName());\t\telse\t\t\tname.setText(\"Name                  :  \" + profileMap.getFullName());\t\t// Display Name\t\t// Return by Twitter, MySpace, Yahoo , SalesForce\t\tif (provider_name.equalsIgnoreCase(\"twitter\") || provider_name.equalsIgnoreCase(\"myspace\")\t\t\t\t|| provider_name.equalsIgnoreCase(\"yahoo\") || provider_name.equalsIgnoreCase(\"salesforce\"))\t\t\tdisplayName.setText(\"Display Name  :  \" + profileMap.getDisplayName());\t\telse\t\t\tdisplayName.setVisibility(View.GONE);\t\t// Email\t\t// Not Return by Twitter, MySpace,Runkeeper\t\tif (!provider_name.equalsIgnoreCase(\"twitter\") || !provider_name.equalsIgnoreCase(\"myspace\")\t\t\t\t|| !provider_name.equalsIgnoreCase(\"runkeeper\"))\t\t\temail.setText(\"Email                  :  \" + profileMap.getEmail());\t\telse\t\t\temail.setVisibility(View.GONE);\t\t// Location\t\t// Not Return by Twitter, Google, salesForce\t\tif (!provider_name.equalsIgnoreCase(\"twitter\") || !provider_name.equalsIgnoreCase(\"google\")\t\t\t\t|| !provider_name.equalsIgnoreCase(\"salesforce\"))\t\t\tlocation.setText(\"Location            :  \" + profileMap.getLocation());\t\telse\t\t\tlocation.setVisibility(View.GONE);\t\t// Gender\t\t// Return by FB, Yahoo, Runkeeper , FourSquare\t\tif (provider_name.equalsIgnoreCase(\"facebook\") || provider_name.equalsIgnoreCase(\"runkeeper\")\t\t\t\t|| provider_name.equalsIgnoreCase(\"yahoo\") || provider_name.equalsIgnoreCase(\"foursquare\"))\t\t\tgender.setText(\"Gender               :  \" + profileMap.getGender());\t\telse\t\t\tgender.setVisibility(View.GONE);\t\t// Language\t\t// Not Return by Linkedin, Yammer, Runkeeper, FourSquare\t\tif (!provider_name.equalsIgnoreCase(\"linkedin\") || !provider_name.equalsIgnoreCase(\"yammer\")\t\t\t\t|| !provider_name.equalsIgnoreCase(\"runkeeper\") || !provider_name.equalsIgnoreCase(\"foursquare\"))\t\t\tlanguage.setText(\"Language          :  \" + profileMap.getLanguage());\t\telse\t\t\tlanguage.setVisibility(View.GONE);\t\t// Country\t\t// Return by FB , Google , SalesForce\t\tif (provider_name.equalsIgnoreCase(\"facebook\") || provider_name.equalsIgnoreCase(\"google\")\t\t\t\t|| provider_name.equalsIgnoreCase(\"salesforce\"))\t\t\tcountry.setText(\"Country            :  \" + profileMap.getCountry());\t\telse\t\t\tcountry.setVisibility(View.GONE);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/custom-ui/src/org/brickred/customui/ProfileActivity.java", "stars": "74", "class": {"name": "ProfileActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/chainofresponsibility/Course.java", "stars": "2", "class": {"name": "Course", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/chainofresponsibility/Course.java", "stars": "2", "class": {"name": "Course", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNote", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getNote() {        return note;    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/chainofresponsibility/Course.java", "stars": "2", "class": {"name": "Course", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setNote", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setNote(String note) {        this.note = note;    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/chainofresponsibility/Course.java", "stars": "2", "class": {"name": "Course", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getVideo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getVideo() {        return video;    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/chainofresponsibility/Course.java", "stars": "2", "class": {"name": "Course", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setVideo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setVideo(String video) {        this.video = video;    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/chainofresponsibility/Course.java", "stars": "2", "class": {"name": "Course", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"Course{\" +                \"name='\" + name + '\\'' +                \", note='\" + note + '\\'' +                \", video='\" + video + '\\'' +                '}';    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/chainofresponsibility/Course.java", "stars": "2", "class": {"name": "Course", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testSchemeHttp", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void testSchemeHttp() throws Exception {\t\tString uri = \"http://image.com/1.png\";\t\tScheme result = Scheme.ofUri(uri);\t\tScheme expected = Scheme.HTTP;\t\tAssertions.assertThat(result).isEqualTo(expected);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/test/com/nostra13/universalimageloader/core/download/BaseImageDownloaderTest.java", "stars": "74", "class": {"name": "BaseImageDownloaderTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testSchemeHttps", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void testSchemeHttps() throws Exception {\t\tString uri = \"https://image.com/1.png\";\t\tScheme result = Scheme.ofUri(uri);\t\tScheme expected = Scheme.HTTPS;\t\tAssertions.assertThat(result).isEqualTo(expected);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/test/com/nostra13/universalimageloader/core/download/BaseImageDownloaderTest.java", "stars": "74", "class": {"name": "BaseImageDownloaderTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testSchemeContent", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void testSchemeContent() throws Exception {\t\tString uri = \"content://path/to/content\";\t\tScheme result = Scheme.ofUri(uri);\t\tScheme expected = Scheme.CONTENT;\t\tAssertions.assertThat(result).isEqualTo(expected);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/test/com/nostra13/universalimageloader/core/download/BaseImageDownloaderTest.java", "stars": "74", "class": {"name": "BaseImageDownloaderTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testSchemeAssets", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void testSchemeAssets() throws Exception {\t\tString uri = \"assets://folder/1.png\";\t\tScheme result = Scheme.ofUri(uri);\t\tScheme expected = Scheme.ASSETS;\t\tAssertions.assertThat(result).isEqualTo(expected);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/test/com/nostra13/universalimageloader/core/download/BaseImageDownloaderTest.java", "stars": "74", "class": {"name": "BaseImageDownloaderTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testSchemeDrawables", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void testSchemeDrawables() throws Exception {\t\tString uri = \"drawable://123456890\";\t\tScheme result = Scheme.ofUri(uri);\t\tScheme expected = Scheme.DRAWABLE;\t\tAssertions.assertThat(result).isEqualTo(expected);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/test/com/nostra13/universalimageloader/core/download/BaseImageDownloaderTest.java", "stars": "74", "class": {"name": "BaseImageDownloaderTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testSchemeFile", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void testSchemeFile() throws Exception {\t\tString uri = \"file://path/on/the/device/1.png\";\t\tScheme result = Scheme.ofUri(uri);\t\tScheme expected = Scheme.FILE;\t\tAssertions.assertThat(result).isEqualTo(expected);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/test/com/nostra13/universalimageloader/core/download/BaseImageDownloaderTest.java", "stars": "74", "class": {"name": "BaseImageDownloaderTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testSchemeUnknown", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void testSchemeUnknown() throws Exception {\t\tString uri = \"other://image.com/1.png\";\t\tScheme result = Scheme.ofUri(uri);\t\tScheme expected = Scheme.UNKNOWN;\t\tAssertions.assertThat(result).isEqualTo(expected);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/test/com/nostra13/universalimageloader/core/download/BaseImageDownloaderTest.java", "stars": "74", "class": {"name": "BaseImageDownloaderTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getId() {        return id;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/ExternalInputInfo.java", "stars": "4", "class": {"name": "ExternalInputInfo", "extends": null, "implements": ["JSONSerializable"], "modifiers": ["public"]}}, {"method_name": "setId", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(String inputId) {        this.id = inputId;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/ExternalInputInfo.java", "stars": "4", "class": {"name": "ExternalInputInfo", "extends": null, "implements": ["JSONSerializable"], "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/ExternalInputInfo.java", "stars": "4", "class": {"name": "ExternalInputInfo", "extends": null, "implements": ["JSONSerializable"], "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String inputName) {        this.name = inputName;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/ExternalInputInfo.java", "stars": "4", "class": {"name": "ExternalInputInfo", "extends": null, "implements": ["JSONSerializable"], "modifiers": ["public"]}}, {"method_name": "setRawData", "params": ["JSONObject"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRawData(JSONObject rawData) {        this.rawData = rawData;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/ExternalInputInfo.java", "stars": "4", "class": {"name": "ExternalInputInfo", "extends": null, "implements": ["JSONSerializable"], "modifiers": ["public"]}}, {"method_name": "getRawData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "JSONObject", "snippet": "    public JSONObject getRawData() {        return rawData;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/ExternalInputInfo.java", "stars": "4", "class": {"name": "ExternalInputInfo", "extends": null, "implements": ["JSONSerializable"], "modifiers": ["public"]}}, {"method_name": "isConnected", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isConnected() {        return connected;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/ExternalInputInfo.java", "stars": "4", "class": {"name": "ExternalInputInfo", "extends": null, "implements": ["JSONSerializable"], "modifiers": ["public"]}}, {"method_name": "setConnected", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setConnected(boolean connected) {        this.connected = connected;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/ExternalInputInfo.java", "stars": "4", "class": {"name": "ExternalInputInfo", "extends": null, "implements": ["JSONSerializable"], "modifiers": ["public"]}}, {"method_name": "getIconURL", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getIconURL() {        return iconURL;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/ExternalInputInfo.java", "stars": "4", "class": {"name": "ExternalInputInfo", "extends": null, "implements": ["JSONSerializable"], "modifiers": ["public"]}}, {"method_name": "setIconURL", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIconURL(String iconURL) {        this.iconURL = iconURL;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/ExternalInputInfo.java", "stars": "4", "class": {"name": "ExternalInputInfo", "extends": null, "implements": ["JSONSerializable"], "modifiers": ["public"]}}, {"method_name": "toJSONObject", "params": [], "throws": ["JSONException"], "modifiers": ["public"], "return_type": "JSONObject", "snippet": "    public JSONObject toJSONObject() throws JSONException {        JSONObject obj = new JSONObject();        obj.put(\"id\", id);        obj.put(\"name\", name);        obj.put(\"connected\", connected);        obj.put(\"icon\", iconURL);        obj.put(\"rawData\", rawData);        return obj;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/ExternalInputInfo.java", "stars": "4", "class": {"name": "ExternalInputInfo", "extends": null, "implements": ["JSONSerializable"], "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean equals(Object o) {        if (o instanceof ExternalInputInfo) {            ExternalInputInfo eii = (ExternalInputInfo) o;            return this.id.equals(eii.id) &&                    this.name.equals(eii.name);        }        return false;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/core/ExternalInputInfo.java", "stars": "4", "class": {"name": "ExternalInputInfo", "extends": null, "implements": ["JSONSerializable"], "modifiers": ["public"]}}, {"method_name": "removeEldestEntry", "params": ["java"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean removeEldestEntry(java.util.Map.Entry eldest) {        if (size() > MAX_SIZE && eldest.getValue() instanceof BleBluetooth) {            ((BleBluetooth) eldest.getValue()).disconnect();        }        return size() > MAX_SIZE;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/utils/BleLruHashMap.java", "stars": "2", "class": {"name": "BleLruHashMap", "extends": "LinkedHashMap", "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        StringBuilder sb = new StringBuilder();        for (Entry<K, V> entry : entrySet()) {            sb.append(String.format(\"%s:%s \", entry.getKey(), entry.getValue()));        }        return sb.toString();    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/FastBleLib/src/main/java/com/clj/fastble/utils/BleLruHashMap.java", "stars": "2", "class": {"name": "BleLruHashMap", "extends": "LinkedHashMap", "implements": null, "modifiers": ["public"]}}, {"method_name": "randomInt", "params": ["int", "int"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int randomInt(int min, int max) {        return min + random.nextInt(max - min + 1);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generateGrid", "params": ["long"], "throws": null, "modifiers": ["private"], "return_type": "Grid", "snippet": "    private Grid generateGrid(long seed) {        int width = randomInt(Config.MAP_MIN_WIDTH, Config.MAP_MAX_WIDTH);        int height = randomInt(Config.MAP_MIN_HEIGHT, Config.MAP_MAX_HEIGHT);        mapGenerator.init();        if (gameManager.getPlayerCount() == 2) {            if (width % 2 == 0) {                width++;            }        } else if (gameManager.getPlayerCount() == 4) {            if (height % 2 == 0) {                height++;            }        }        Grid grid = new Grid(width, height);        if (gameManager.getPlayerCount() == 2) {            mapGenerator.generateWithHorizontalSymetry(grid, random);        } else if (gameManager.getPlayerCount() == 4) {            mapGenerator.generateWithCentralSymetry(grid, random);        } else {            mapGenerator.generate(grid, random);        }        if (Config.MAP_WRAPS) {            Grid bigGrid = new Grid(width + 2, height + 2);            for (int y = 0; y < height + 2; ++y) {                for (int x = 0; x < width + 2; ++x) {                    Coord gridPos = new Coord(x - 1, y - 1);                    if (isOuterBorder(x, y, width, height)) {                        if (x == 0 && isTunnelExit(grid, gridPos.x + 1, gridPos.y)) {                            bigGrid.get(x, y).setType(CellType.FLOOR);                        } else if (x == width + 1 && isTunnelExit(grid, gridPos.x - 1, gridPos.y)) {                            bigGrid.get(x, y).setType(CellType.FLOOR);                        } else {                            bigGrid.get(x, y).setType(CellType.WALL);                        }                    } else {                        bigGrid.get(x, y).copy(grid.get(x - 1, y - 1));                    }                }            }            grid = bigGrid;        }        return grid;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isTunnelExit", "params": ["Grid", "int", "int"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isTunnelExit(Grid grid, int x, int y) {        return grid.get(x, y).isFloor() && !grid.get(x, y - 1).isFloor() && !grid.get(x, y + 1).isFloor();    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isOuterBorder", "params": ["int", "int", "int", "int"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isOuterBorder(int x, int y, int width, int height) {        return x == 0 || y == 0 || x == width + 1 || y == height + 1;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init(long seed) {        String state = gameManager.getGameParameters().getProperty(\"state\");        if (state != null && System.getProperty(\"allow.config.override\") != null) {            initGameFromState(state);        }        random = new Random(seed);        if (grid == null) {            grid = generateGrid(seed);        }        if (pacmenPerPlayer == 0) {            pacmenPerPlayer = randomInt(Config.MIN_PACS_PER_PLAYER, Config.MAX_PACS_PER_PLAYER);        }        totalPacmen = pacmenPerPlayer * gameManager.getPlayerCount();        if (pacmen == null) {            generatePacmen();            List<Coord> freeCells = grid.cells.entrySet()                .stream()                .filter(entry -> entry.getValue().getType() == CellType.FLOOR)                .filter(entry -> entry.getKey().getX() != grid.getWidth() / 2)                .map(entry -> entry.getKey())                .collect(Collectors.toList());            Collections.shuffle(freeCells, random);            if (gameManager.getPlayerCount() == 2) {                List<Coord> leftCells = freeCells.stream()                    .filter(c -> c.getX() <= grid.getWidth() / 2)                    .collect(Collectors.toList());                int i;                for (i = 0; i < pacmenPerPlayer; ++i) {                    Coord leftCell = leftCells.get(i);                    Coord rightCell = new Coord(grid.getWidth() - 1 - leftCell.getX(), leftCell.getY());                    int leftPlayer = random.nextInt(2);                    int rightPlayer = (leftPlayer + 1) % 2;                    gameManager.getPlayer(leftPlayer).getPacmen().get(i).setPosition(leftCell);                    gameManager.getPlayer(rightPlayer).getPacmen().get(i).setPosition(rightCell);                }                for (int j = 0; j < Config.NUMBER_OF_CHERRIES / 2; j++) {                    Coord leftCell = leftCells.get(i + j);                    Coord rightCell = new Coord(grid.getWidth() - 1 - leftCell.getX(), leftCell.getY());                    grid.get(leftCell).setHasCherry(true);                    grid.get(rightCell).setHasCherry(true);                }            } else if (gameManager.getPlayerCount() == 4) {                List<Coord> topLeftCells = freeCells.stream()                    .filter(c -> c.getX() <= grid.getWidth() / 2)                    .collect(Collectors.toList());                for (int i = 0; i < pacmenPerPlayer; ++i) {                    Coord topLeftCell = topLeftCells.get(i);                    Coord topRightCell = new Coord(grid.getWidth() - 1 - topLeftCell.getX(), topLeftCell.getY());                    Coord bottomLeftCell = new Coord(topLeftCell.getX(), grid.getHeight() - 1 - topLeftCell.getY());                    Coord bottomRightCell = new Coord(grid.getWidth() - 1 - topLeftCell.getX(), grid.getHeight() - 1 - topLeftCell.getY());                    gameManager.getPlayer(0).getPacmen().get(i).setPosition(topLeftCell);                    gameManager.getPlayer(1).getPacmen().get(i).setPosition(topRightCell);                    gameManager.getPlayer(2).getPacmen().get(i).setPosition(bottomLeftCell);                    gameManager.getPlayer(3).getPacmen().get(i).setPosition(bottomRightCell);                }            } else {                for (int i = 0; i < totalPacmen; ++i) {                    Coord freeCell = freeCells.get(i);                    pacmen.get(i).setPosition(freeCell);                }            }        }        // generate pellets        grid.cells.entrySet().stream().forEach(entry -> {            Coord coord = entry.getKey();            Cell cell = entry.getValue();            boolean spawnPellet = cell.isFloor() && !cell.hasCherry() &&                pacmen.stream()                    .filter(pac -> pac.getPosition().equals(coord))                    .count() == 0;            if (spawnPellet) {                cell.setHasPellet(true);            }        });        view.init(pacmen, grid, pacmenPerPlayer);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initGameFromState", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initGameFromState(String state) {        String[] lines = state.split(\";\");        int width = lines[0].length();        int height = lines.length;        Map<Integer, List<Coord>> spawns = new LinkedHashMap<>();        spawns.put(0, new ArrayList<Coord>());        spawns.put(1, new ArrayList<Coord>());        Map<Coord, PacmanType> types = new HashMap<>();        grid = new Grid(width, height);        for (int y = 0; y < height; ++y) {            for (int x = 0; x < width; ++x) {                char c = lines[y].charAt(x);                Cell cell = grid.get(x, y);                if (c == '#') {                    cell.setType(CellType.WALL);                } else {                    cell.setType(CellType.FLOOR);                }                switch (c) {                case '.':                    cell.setHasPellet(true);                    break;                case 'o':                    cell.setHasCherry(true);                    break;                case '1':                case '0': {                    int player = Integer.valueOf(String.valueOf(c));                    spawns.computeIfAbsent(player, (i -> new ArrayList<>()));                    spawns.get(player).add(new Coord(x, y));                    totalPacmen++;                    break;                }                case 'r':                case 'p':                case 's':                case 'n': {                    int player = 0;                    saveSpawnPoint(spawns, types, new Coord(x, y), c, player);                    break;                }                case 'R':                case 'P':                case 'S':                case 'N': {                    int player = 1;                    saveSpawnPoint(spawns, types, new Coord(x, y), c, player);                    break;                }                }            }        }        pacmen = new ArrayList<>(totalPacmen);        spawns.forEach((playerIdx, coords) -> {            Player player = gameManager.getPlayer(playerIdx);            for (Coord c : coords) {                PacmanType type = types.getOrDefault(c, PacmanType.NEUTRAL);                Pacman pacman = new Pacman(pacmen.size(), player.getPacmen().size(), player, type);                pacman.setPosition(c);                player.addPacman(pacman);                pacmen.add(pacman);            }        });    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "saveSpawnPoint", "params": ["Map<Integer,List>", "Map<Coord,PacmanType>", "Coord", "char", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void saveSpawnPoint(Map<Integer, List<Coord>> spawns, Map<Coord, PacmanType> types, Coord pos, char c, int player) {        spawns.computeIfAbsent(player, (i -> new ArrayList<>()));        spawns.get(player).add(pos);        totalPacmen++;        types.put(pos, PacmanType.fromCharacter(c));    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generatePacmen", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void generatePacmen() {        pacmen = new ArrayList<>(totalPacmen);        int pacmanIndex = 0;        int typeIndex = 0;        while (pacmanIndex < totalPacmen) {            for (Player player : gameManager.getPlayers()) {                if (pacmanIndex < totalPacmen) {                    PacmanType type = Config.SWITCH_ABILITY_AVAILABLE ? PacmanType.values()[typeIndex % 3] : PacmanType.NEUTRAL;                    Pacman pac = new Pacman(pacmanIndex, player.getPacmen().size(), player, type);                    player.addPacman(pac);                    pacmanIndex++;                    pacmen.add(pac);                }            }            typeIndex++;        }    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "canEat", "params": ["Pacman", "Pacman"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean canEat(Pacman pac1, Pacman pac2) {        if (pac1.getOwner().equals(pac2.getOwner())) {            return false;        }        if (pac1.getType() == PacmanType.PAPER) {            return pac2.getType() == PacmanType.ROCK;        }        if (pac1.getType() == PacmanType.ROCK) {            return pac2.getType() == PacmanType.SCISSORS;        }        if (pac1.getType() == PacmanType.SCISSORS) {            return pac2.getType() == PacmanType.PAPER;        }        return false;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGlobalInfoFor", "params": ["Player"], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> getGlobalInfoFor(Player player) {        List<String> lines = new ArrayList<String>();        // add map info        lines.add(String.format(\"%d %d\", grid.width, grid.height));        for (int y = 0; y < grid.getHeight(); ++y) {            List<Cell> row = new ArrayList<>(grid.getWidth());            for (int x = 0; x < grid.getWidth(); ++x) {                row.add(grid.get(x, y));            }            lines.add(                row.stream()                    .map(cell -> cellToCharater(cell))                    .collect(Collectors.joining())            );        }        return lines;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPacmanLineInfo", "params": ["Player", "Pacman"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String getPacmanLineInfo(Player player, Pacman pac) {        return String.format(            \"%d %d %d %d %s %d %d\",            pac.getNumber(),            pac.getOwner() == player ? 1 : 0,            pac.getPosition().x,            pac.getPosition().y,            pac.isDead() ? \"DEAD\" : pac.getType().name().toUpperCase(),            pac.getAbilityDuration(),            pac.getAbilityCooldown()        );    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPelletLineInfo", "params": ["Coord", "int"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String getPelletLineInfo(Coord pellet, int value) {        return String.format(            \"%d %d %d\",            pellet.x,            pellet.y,            value        );    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCurrentFrameInfoFor", "params": ["Player"], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> getCurrentFrameInfoFor(Player player) {        Player opponentPlayer = gameManager.getActivePlayers().get((player.getIndex() + 1) % 2);        List<String> lines = new ArrayList<String>();        lines.add(String.format(\"%d %d\", player.pellets, opponentPlayer.pellets));        List<Pacman> visiblePacmen = Config.FOG_OF_WAR ? findVisiblePacmen(player) : pacmen;        if (Config.PROVIDE_DEAD_PACS) {            Stream.concat(player.getDeadPacmen(), opponentPlayer.getDeadPacmen())                .forEach(visiblePacmen::add);        }        lines.add(Integer.toString(visiblePacmen.size()));        visiblePacmen            .stream()            .sorted(Comparator.comparing(Pacman::getId))            .map(pac -> getPacmanLineInfo(player, pac))            .forEach(lines::add);        List<Coord> visiblePellets = Config.FOG_OF_WAR ? findVisiblePellets(player) : grid.getAllPellets();        List<Coord> visibleCherries = grid.getAllCherries();        lines.add(Integer.toString(visiblePellets.size() + visibleCherries.size()));        for (Coord pellet : visiblePellets) {            lines.add(getPelletLineInfo(pellet, 1));        }        for (Coord cherry : visibleCherries) {            lines.add(getPelletLineInfo(cherry, Config.CHERRY_SCORE));        }        return lines;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "cellToCharater", "params": ["Cell"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String cellToCharater(Cell cell) {        if (cell.isWall()) {            return \"#\";        }        return \" \";    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resetGameTurnData", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void resetGameTurnData() {        currentStep = 0;        gameManager.getPlayers().stream().forEach(Player::turnReset);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "performGameUpdate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void performGameUpdate() {        view.startOfTurn();        executePacmenAbilities();        updateAbilityModifiers();        processPacmenIntent();        resolveMovement();        // update view        view.endOfTurn();        printPacmenGameSummary();    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "performGameSpeedUpdate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void performGameSpeedUpdate() {        view.startOfTurn();        gameManager.addToGameSummary(\"Only pacs with the SPEED ability enabled can move:\");        for (Pacman pac : pacmen) {            if (pac.getSpeed() <= 1 || pac.getIntent().getActionType() != ActionType.MOVE) {                List<Coord> path = new ArrayList<>();                path.add(pac.getPosition());                pac.setIntendedPath(path);            }            pac.setBlocked(false);        }        resolveMovement();        // update view        view.endOfTurn();        printPacmenGameSummary();    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveMovement", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void resolveMovement() {        Set<Pacman> pacmenToKill = new HashSet<>();        MovementResolution resolution = resolvePacmenMovement();        // display warning messages for unreachable targets.        for (Pacman pac : pacmen) {            if (pac.getWarningPathMessage() != null) {                String summary = String.format(                    \"Pac %d: %s\",                    pac.getNumber(),                    pac.getWarningPathMessage()                );                pac.addToGameSummary(summary);                pac.setWarningPathMessage(null);            }        }        // find pacmen to kill        for (Pacman pac : pacmen) {            otherPacmen(pac).forEach(other -> {                if (canEat(pac, other) && pacmenHaveCollided(pac, other)) {                    boolean added = pacmenToKill.add(other);                    if (added) {                        view.killPacman(other);                    }                }            });        }        Map<Double, Set<Pacman>> pacmenToFlash = new HashMap<>();        Set<BumpCouple> bumpToDisplay = new HashSet<BumpCouple>();        for (Pacman pac : resolution.getBlockedPacmen()) {            Pacman blocker = resolution.getBlockerOf(pac);            Coord from = getIntendedPositionAtStep(pac, pac.getCurrentPathStep());            Coord blockerFrom = getIntendedPositionAtStep(blocker, pac.getCurrentPathStep());            Coord to = getIntendedPositionAtStep(pac, pac.getCurrentPathStep() + 1);            int distanceToBlocker = grid.calculateDistance(pac.getPosition(), blocker.getPosition());            if (pacmenToKill.contains(pac) && !resolution.getBlockedPacmen().contains(blocker)) {                continue;            }            view.bumpPacman(pac, from, to, distanceToBlocker);            BumpCouple bumpCouple = new BumpCouple(from, blockerFrom, to, distanceToBlocker);            bumpToDisplay.add(bumpCouple);            double flashTime = 0.5;            Set<Pacman> flashingInUnison = pacmenToFlash.computeIfAbsent(flashTime, k -> new HashSet<Pacman>());            flashingInUnison.add(pac);            flashingInUnison.add(blocker);        }        pacmenToFlash.forEach((time, flashingInUnison) -> {            flashingInUnison.forEach(pac -> {                view.flashPacman(pac, time);            });        });        for (BumpCouple bumpCouple : bumpToDisplay) {            view.launchBumpFx(                bumpCouple.getFrom(), bumpCouple.getFromBlocker(), bumpCouple.getTo(), bumpCouple.getDistance()            );        }        for (Pacman pac : resolution.getBlockedPacmen()) {            Coord target = getIntendedPositionAtStep(pac, pac.getCurrentPathStep() + 1);            pac.addToGameSummary(                String.format(                    \"Pac %d is blocked from entering (%d, %d).\",                    pac.getNumber(), target.getX(), target.getY()                )            );        }        killPacmen(pacmenToKill);        eatPellets();        eatCherries();        currentStep++;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPacFastEnoughFilter", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "Predicate<Pacman>", "snippet": "    private Predicate<? super Pacman> getPacFastEnoughFilter(int step) {        return pac -> pac.fastEnoughToMoveAt(step);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "printPacmenGameSummary", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void printPacmenGameSummary() {        for (Player player : gameManager.getPlayers()) {            if (player.getPacmen().stream().anyMatch(pac -> !pac.getGameSummary().isEmpty())) {                gameManager.addToGameSummary(String.format(\"%s:\", player.getNicknameToken()));                player.getPacmen().stream()                    .sorted(Comparator.comparing(Pacman::getId))                    .forEach(pac -> {                        pac.getGameSummary().forEach(line -> {                            gameManager.addToGameSummary(\"- \" + line);                        });                        pac.clearGameSummary();                    });            }        }    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateAbilityModifiers", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void updateAbilityModifiers() {        for (Pacman pac : pacmen) {            if (pac.getSpeed() > 1 && pac.getAbilityDuration() == 0) {                pac.setSpeed(Config.PACMAN_BASE_SPEED);                view.endSpeed(pac);            }        }    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pacmenHaveCollided", "params": ["Pacman", "Pacman"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean pacmenHaveCollided(Pacman a, Pacman b) {        Coord fromA = getIntendedPositionAtStep(a, a.getPreviousPathStep());        Coord fromB = getIntendedPositionAtStep(b, b.getPreviousPathStep());        Coord toA = getIntendedPositionAtStep(a, a.getCurrentPathStep());        Coord toB = getIntendedPositionAtStep(b, b.getCurrentPathStep());        return toA.equals(toB) || (toA.equals(fromB) && toB.equals(fromA));    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "otherPacmen", "params": ["Pacman"], "throws": null, "modifiers": ["private"], "return_type": "Stream<Pacman>", "snippet": "    private Stream<Pacman> otherPacmen(Pacman pac) {        return otherPacmen(pac, pacmen);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "otherPacmen", "params": ["Pacman", "Collection<Pacman>"], "throws": null, "modifiers": ["private"], "return_type": "Stream<Pacman>", "snippet": "    private Stream<Pacman> otherPacmen(Pacman pac, Collection<Pacman> collection) {        return collection.stream().filter(p -> p != pac);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "byDistanceTo", "params": ["Coord"], "throws": null, "modifiers": ["private", "static"], "return_type": "Comparator<Pacman>", "snippet": "    private static Comparator<? super Pacman> byDistanceTo(Coord position) {        return (a, b) -> {            return a.getPosition().manhattanTo(position) - b.getPosition().manhattanTo(position);        };    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resolvePacmenMovement", "params": [], "throws": null, "modifiers": ["private"], "return_type": "MovementResolution", "snippet": "    private MovementResolution resolvePacmenMovement() {        MovementResolution resolution = new MovementResolution();        List<Pacman> pacmenToResolve = pacmen.stream()            .filter(pac -> pac.getIntent().getActionType() == ActionType.MOVE)            .filter(pac -> !pac.moveFinished())            .filter(getPacFastEnoughFilter(currentStep))            .collect(Collectors.toList());        List<Pacman> resolvedPacmen = new ArrayList<>();        do {            resolvedPacmen.clear();            for (Pacman pac : pacmenToResolve) {                Optional<Pacman> blockedBy = otherPacmen(pac)                    .filter(other -> {                        return isBodyBlockedBy(pac, other);                    })                    .min(byDistanceTo(pac.getPosition()));                if (blockedBy.isPresent()) {                    resolvedPacmen.add(pac);                    resolution.addBlockedPacmen(pac);                    resolution.blockedBy.put(pac, blockedBy.get());                }            }            resolvedPacmen.forEach(pac -> pac.setBlocked(true));            pacmenToResolve.removeAll(resolvedPacmen);        } while (!resolvedPacmen.isEmpty());        for (Pacman pac : pacmenToResolve) {            movePacman(pac);            resolution.addMovedPacman(pac);        }        return resolution;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isBodyBlockedBy", "params": ["Pacman", "Pacman"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isBodyBlockedBy(Pacman pac, Pacman other) {        if (!Config.BODY_BLOCK) {            return false;        }        if (!Config.FRIENDLY_BODY_BLOCK && pac.getOwner() == other.getOwner()) {            return false;        }        // Never blocked against something pac can eat        if (canEat(pac, other)) {            return false;        }        // If beaten, can go to same coord (we only block crossing in that case)        if (canEat(other, pac) && pacmenWillShareSameCoord(pac, other)) {            return false;        }        return pacmenWillCollide(pac, other);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pacmenWillShareSameCoord", "params": ["Pacman", "Pacman"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean pacmenWillShareSameCoord(Pacman a, Pacman b) {        Coord toA = getIntendedPositionAtStep(a, a.gotBlocked() ? a.getCurrentPathStep() : a.getCurrentPathStep() + 1);        Coord toB = getIntendedPositionAtStep(b, b.gotBlocked() ? b.getCurrentPathStep() : b.getCurrentPathStep() + 1);        return toA.equals(toB);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pacmenWillCollide", "params": ["Pacman", "Pacman"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean pacmenWillCollide(Pacman a, Pacman b) {        Coord fromA = getIntendedPositionAtStep(a, a.getCurrentPathStep());        Coord fromB = getIntendedPositionAtStep(b, b.getCurrentPathStep());        Coord toA = a.gotBlocked() ? fromA : getIntendedPositionAtStep(a, a.getCurrentPathStep() + 1);        Coord toB = b.gotBlocked() ? fromB : getIntendedPositionAtStep(b, b.getCurrentPathStep() + 1);        return toA.equals(toB) || (toA.equals(fromB) && toB.equals(fromA));    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getIntendedPositionAtStep", "params": ["Pacman", "int"], "throws": null, "modifiers": ["private"], "return_type": "Coord", "snippet": "    private Coord getIntendedPositionAtStep(Pacman pac, int step) {        return pac.getIntendedPath().get(Math.min(step, pac.getIntendedPath().size() - 1));    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "processPacmenIntent", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void processPacmenIntent() {        for (Pacman pac : pacmen) {            if (pac.getIntent().getActionType() == ActionType.MOVE) {                pac.setIntendedPath(computeIntendedPath(pac));            } else {                ArrayList<Coord> intendedPath = new ArrayList<>();                intendedPath.add(pac.getPosition());                pac.setIntendedPath(intendedPath);            }            view.setPacMessage(pac);        }    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "executePacmenAbilities", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void executePacmenAbilities() {        for (Pacman pac : pacmen) {            if (pac.getAbilityToUse() != null) {                Ability.Type ability = pac.getAbilityToUse();                if (pac.getAbilityCooldown() != 0) {                    if (pac.getAbilityToUse() == Ability.Type.SPEED) {                        pac.addToGameSummary(String.format(                                \"Pac %d can't use a speed boost yet!\",                                pac.getNumber()                            )                        );                    } else {                        PacmanType pacType = getPacmanTypeFromAbility(ability);                        pac.addToGameSummary(String.format(                                \"Pac %d can't switch to %s form yet!\",                                pac.getNumber(),                                pacType.toString()                            )                        );                    }                    continue;                }                if (                    !Config.SPEED_ABILITY_AVAILABLE && ability == Ability.Type.SPEED                        || !Config.SWITCH_ABILITY_AVAILABLE && ability != Ability.Type.SPEED                ) {                    String abilityCategory = ability == Ability.Type.SPEED ? \"Speed boost\" : \"Pac type switching\";                    pac.addToGameSummary(String.format(                            \"Pac %d: %s is not available in this league!\",                            pac.getNumber(),                            abilityCategory                        )                    );                    continue;                }                if (ability == Type.SET_ROCK || ability == Type.SET_PAPER || ability == Type.SET_SCISSORS) {                    view.changePacmanType(pac, pac.getType());                    pac.setType(getPacmanTypeFromAbility(ability));                } else if (ability == Type.SPEED) {                    pac.setSpeed(Config.SPEED_BOOST);                    view.chargeSpeed(pac);                    pac.setAbilityDuration(Config.ABILITY_DURATION);                }                pac.setAbilityCooldown(Config.ABILITY_COOLDOWN);                view.addCooldownAnimation(pac);                if (ability == Ability.Type.SPEED) {                    pac.addToGameSummary(String.format(                            \"Pac %d used a speed boost.\",                            pac.getNumber()                        )                    );                } else {                    pac.addToGameSummary(String.format(                            \"Pac %d switch to %s form.\",                            pac.getNumber(),                            pac.getType().toString()                        )                    );                }            }        }    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPacmanTypeFromAbility", "params": ["Type"], "throws": null, "modifiers": ["private"], "return_type": "PacmanType", "snippet": "    private PacmanType getPacmanTypeFromAbility(Type ability) {        switch (ability) {        case SET_ROCK:            return PacmanType.ROCK;        case SET_PAPER:            return PacmanType.PAPER;        case SET_SCISSORS:            return PacmanType.SCISSORS;        default:            return null;        }    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "computeIntendedPath", "params": ["Pacman"], "throws": null, "modifiers": ["private"], "return_type": "List<Coord>", "snippet": "    private List<Coord> computeIntendedPath(Pacman pac) {        MoveAction intent = (MoveAction) pac.getIntent();        PathFinderResult pfr = pathfinder.setGrid(grid)            .from(pac.getPosition())            .to(intent.getTarget())            .findPath();        List<Coord> wholePath = pfr.path;        if (pfr.isNearest) {            Coord newTarget = pfr.path.get(pfr.path.size() - 1);            if (pfr.path.size() > 1) {                pac.setWarningPathMessage(                    String.format(                        \"Warning: target (%d, %d) is unreachable, going to (%d, %d) instead.\",                        intent.getTarget().x,                        intent.getTarget().y,                        newTarget.x,                        newTarget.y                    )                );            } else {                pac.setWarningPathMessage(                    String.format(                        \"Warning: target (%d, %d) is unreachable. Staying here!\",                        intent.getTarget().x,                        intent.getTarget().y                    )                );            }        } else {            pac.setWarningPathMessage(null);        }        List<Coord> pathThisTurn = new ArrayList<>();        if (wholePath.size() > 1) {            int stepsThisTurn = Math.min(pac.getSpeed(), wholePath.size() - 1);            pathThisTurn = wholePath.subList(0, stepsThisTurn + 1);        } else {            // pacman stay in place or cannot move            pathThisTurn.add(pac.getPosition());        }        return pathThisTurn;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "movePacman", "params": ["Pacman"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void movePacman(Pacman pac) {        pac.setCurrentPathStep(pac.getCurrentPathStep() + 1);        Coord from = getIntendedPositionAtStep(pac, pac.getPreviousPathStep());        Coord to = getIntendedPositionAtStep(pac, pac.getCurrentPathStep());        pac.setPosition(to);        view.movePacman(pac, from, to);        String messageGameSummary = String.format(            \"Pac %d moved to (%d, %d).\",            pac.getNumber(),            pac.getPosition().x,            pac.getPosition().y        );        if (pac.getWarningPathMessage() != null) {            messageGameSummary += \" \" + pac.getWarningPathMessage();            pac.setWarningPathMessage(null);        }        pac.addToGameSummary(messageGameSummary);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "killPacmen", "params": ["Collection<Pacman>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void killPacmen(Collection<Pacman> pacmenToKill) {        for (Pacman pac : pacmenToKill) {            pacmen.remove(pac);            pac.setDead();            Player pacOwner = pac.getOwner();            if (!pacOwner.getAlivePacmen().findAny().isPresent()) {                pacOwner.deactivate();            }            gameManager.addTooltip(                pac.getOwner(), String.format(                    \"Pac %d has died.\",                    pac.getNumber()                )            );            pac.addToGameSummary(String.format(                    \"Pac %d has died.\",                    pac.getNumber()                )            );        }    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "eatItem", "params": ["Function<Cell,Boolean>", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void eatItem(Function<Cell, Boolean> hasItem, int pelletValue) {        Map<Coord, List<Pacman>> eatenBy = new HashMap<>();        for (Pacman pac : pacmen) {            Cell cell = grid.get(pac.getPosition());            if (hasItem.apply(cell)) {                eatenBy.computeIfAbsent(pac.getPosition(), key -> new ArrayList<>(totalPacmen));                eatenBy.get(pac.getPosition()).add(pac);                eatenBy.compute(pac.getPosition(), (key, list) -> {                    if (list == null) {                        list = new ArrayList<>();                    }                    boolean eatenByMe = list.stream()                        .anyMatch(item -> item.getOwner() == pac.getOwner());                    if (!eatenByMe) {                        list.add(pac);                    }                    return list;                });            }        }        eatenBy.forEach((coord, list) -> {            list.stream()                .map(Pacman::getOwner)                .distinct()                .forEach(player -> {                    player.pellets += pelletValue;                });            grid.get(coord).setHasPellet(false);            grid.get(coord).setHasCherry(false);            view.eatPellet(coord, list, pelletValue);        });        view.updateScores();    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "eatPellets", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void eatPellets() {        eatItem(Cell::hasPellet, 1);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "eatCherries", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void eatCherries() {        eatItem(Cell::hasCherry, Config.CHERRY_SCORE);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "canImproveRanking", "params": ["Player"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean canImproveRanking(Player player) {        int remainingPellets = getRemainingPellets();        return remainingPellets > 0 && gameManager.getPlayers().stream()            .filter(p -> p != player && p.pellets >= player.pellets)            .anyMatch(p -> player.pellets + remainingPellets >= p.pellets);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isGameOver", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isGameOver() {        // one player left with pacmen        List<Player> activePlayers = gameManager.getActivePlayers();        if (activePlayers.size() <= 1) {            return true;        }        // the game isn't over if a player can still improve its rank        return gameManager.getActivePlayers().stream().noneMatch(this::canImproveRanking);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "performGameOver", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void performGameOver() {        // one player left with pacmen        List<Player> activePlayers = gameManager.getActivePlayers();        if (activePlayers.size() <= 1) {            if (activePlayers.size() == 1) {                gameManager.addToGameSummary(                    String.format(                        \"Only %s still has pacs standing!\",                        activePlayers.get(0).getNicknameToken()                    )                );                activePlayers.get(0).pellets += getRemainingPellets();                view.updateScores();                view.getAllPellets(activePlayers.get(0));            } else {                gameManager.addToGameSummary(\"No pacs remaining!\");            }            return;        }        // We have a winner        int remainingPellets = getRemainingPellets();        for (Player player : gameManager.getPlayers()) {            if (gameManager.getActivePlayers().stream().filter(p -> p != player).allMatch(p -> p.pellets + remainingPellets < player.pellets)) {                gameManager.addToGameSummary(                    String.format(                        \"Game Over: %s has so many pellets that they can't be defeated!\",                        player.getNicknameToken()                    )                );                return;            }        }    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRemainingPellets", "params": [], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int getRemainingPellets() {        return grid.getCells().values().stream()            .filter(cell -> cell.hasPellet() || cell.hasCherry())            .mapToInt(cell -> cell.hasPellet() ? 1 : Config.CHERRY_SCORE)            .sum();    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findVisiblePacmen", "params": ["Player"], "throws": null, "modifiers": ["private"], "return_type": "List<Pacman>", "snippet": "    private List<Pacman> findVisiblePacmen(Player player) {        List<Coord> coords = findVisibleItems(player, coord -> pacmen.stream().anyMatch(pac -> pac.getPosition().equals(coord)));        List<Pacman> visiblePacmen = pacmen            .stream()            .filter(pac -> coords.contains(pac.getPosition()))            .collect(Collectors.toList());        return visiblePacmen;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findVisibleItems", "params": ["Player", "Function<Coord,Boolean>"], "throws": null, "modifiers": ["private"], "return_type": "List<Coord>", "snippet": "    private List<Coord> findVisibleItems(Player player, Function<Coord, Boolean> hasItem) {        List<Coord> visibleItems = new ArrayList<Coord>();        player.getAlivePacmen().forEach(playerPac -> {            for (Coord unitMove : Config.ADJACENCY) {                Coord currentCoord = playerPac.getPosition();                while (grid.get(currentCoord).isFloor()) {                    if (hasItem.apply(currentCoord) && !visibleItems.contains(currentCoord)) {                        visibleItems.add(currentCoord);                    }                    Optional<Coord> nextCoord = grid.getCoordNeighbour(currentCoord, unitMove);                    if (nextCoord.isPresent()) {                        currentCoord = nextCoord.get();                    } else {                        break;                    }                    if (playerPac.getPosition().equals(currentCoord)) {                        break;                    }                }            }        });        return visibleItems;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findVisiblePellets", "params": ["Player"], "throws": null, "modifiers": ["private"], "return_type": "List<Coord>", "snippet": "    private List<Coord> findVisiblePellets(Player player) {        return findVisibleItems(player, coord -> grid.get(coord).hasPellet());    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isSpeedTurn", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isSpeedTurn() {        int numSteps = pacmen.stream()            .mapToInt(p -> p.getIntendedPath().size())            .max()            .getAsInt() - 1;        return currentStep > 0 && currentStep < numSteps;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGrid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Grid", "snippet": "    public Grid getGrid() {        return grid;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/Game.java", "stars": "15", "class": {"name": "Game", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hasOverlappingRendering", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean hasOverlappingRendering() {        return false;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/presenters/MoreCardView.java", "stars": "4", "class": {"name": "MoreCardView", "extends": "BaseCardView", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "setTitleText", "params": ["CharSequence"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTitleText(CharSequence text) {        if (titleTextView == null) {            return;        }        titleTextView.setText(text);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/presenters/MoreCardView.java", "stars": "4", "class": {"name": "MoreCardView", "extends": "BaseCardView", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "getTitleText", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CharSequence", "snippet": "    public CharSequence getTitleText() {        if (titleTextView == null) {            return null;        }        return titleTextView.getText();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/presenters/MoreCardView.java", "stars": "4", "class": {"name": "MoreCardView", "extends": "BaseCardView", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "setImageResource", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setImageResource(int imageResource) {        imageView.setImageResource(imageResource);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/presenters/MoreCardView.java", "stars": "4", "class": {"name": "MoreCardView", "extends": "BaseCardView", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "onFocusChange", "params": ["View", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onFocusChange(View v, boolean hasFocus) {        if (hasFocus) {            setBackgroundResource(R.color.primary_dark);        } else {            setBackgroundResource(R.color.default_background);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/tv/src/main/java/butter/droid/tv/presenters/MoreCardView.java", "stars": "4", "class": {"name": "MoreCardView", "extends": "BaseCardView", "implements": ["View"], "modifiers": ["public"]}}, {"method_name": "openSsl", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "NettyMonitor", "snippet": "  public NettyMonitor openSsl(boolean openSsl) {    this.environment.add(PATH_SERVER_SSL, openSsl);    return this;  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyMonitor.java", "stars": "3", "class": {"name": "NettyMonitor", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "needClientAuth", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "NettyMonitor", "snippet": "  public NettyMonitor needClientAuth(boolean needClientAuth) {    this.environment.add(PATH_NEED_CLIENT_AUTH, needClientAuth);    return this;  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyMonitor.java", "stars": "3", "class": {"name": "NettyMonitor", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "keystorePath", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "NettyMonitor", "snippet": "  public NettyMonitor keystorePath(String keystorePath) {    requireNonNull(keystorePath, \"keystore path cannot be null\");    this.environment.add(PATH_SERVER_SSL_PRIVATE_KEY, keystorePath);    return this;  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyMonitor.java", "stars": "3", "class": {"name": "NettyMonitor", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "caCertificatePath", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "NettyMonitor", "snippet": "  public NettyMonitor caCertificatePath(String caCertificatePath) {    requireNonNull(caCertificatePath, \"Certificate path cannot be null\");    this.environment.add(PATH_SERVER_SSL_CERT, caCertificatePath);    return this;  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyMonitor.java", "stars": "3", "class": {"name": "NettyMonitor", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "certificatePassword", "params": ["char"], "throws": null, "modifiers": ["public"], "return_type": "NettyMonitor", "snippet": "  public NettyMonitor certificatePassword(char[] certificatePassword) {    requireNonNull(certificatePassword, \"Certificate password must be set\");    this.environment.add(PATH_SERVER_SSL_PRIVATE_KEY_PASS, certificatePassword);    return this;  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyMonitor.java", "stars": "3", "class": {"name": "NettyMonitor", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "requireArgument", "params": ["boolean"], "throws": null, "modifiers": ["static"], "return_type": "void", "snippet": "  static void requireArgument(boolean expression) {    if (!expression) {      throw new IllegalArgumentException();    }  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyMonitor.java", "stars": "3", "class": {"name": "NettyMonitor", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "requireState", "params": ["boolean"], "throws": null, "modifiers": ["static"], "return_type": "void", "snippet": "  static void requireState(boolean expression) {    if (!expression) {      throw new IllegalStateException();    }  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyMonitor.java", "stars": "3", "class": {"name": "NettyMonitor", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "requireState", "params": ["boolean", "String", "Object"], "throws": null, "modifiers": ["static"], "return_type": "void", "snippet": "  static void requireState(boolean expression, String template, Object... args) {    if (!expression) {      throw new IllegalStateException(String.format(template, args));    }  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyMonitor.java", "stars": "3", "class": {"name": "NettyMonitor", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "of", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "NettyMonitor", "snippet": "  public static NettyMonitor of() {    return new NettyMonitor();  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyMonitor.java", "stars": "3", "class": {"name": "NettyMonitor", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "bind", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "NettyMonitor", "snippet": "  public NettyMonitor bind(int port) {    requireState(!(port <= 0 || port > 65533), \"The port number must be correctly available\");    this.environment.add(PATH_SERVER_PORT, port);    return this;  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyMonitor.java", "stars": "3", "class": {"name": "NettyMonitor", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "bootCls", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Class<?>", "snippet": "  public Class<?> bootCls() {    return bootCls;  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyMonitor.java", "stars": "3", "class": {"name": "NettyMonitor", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "args", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String[] args() {    return args;  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyMonitor.java", "stars": "3", "class": {"name": "NettyMonitor", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "bootName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String bootName() {    return bootName;  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyMonitor.java", "stars": "3", "class": {"name": "NettyMonitor", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "environment", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Environment", "snippet": "  public Environment environment() {    return this.environment;  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyMonitor.java", "stars": "3", "class": {"name": "NettyMonitor", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getSingleExecutor", "params": [], "throws": null, "modifiers": ["private"], "return_type": "Executor", "snippet": "  private Executor getSingleExecutor() {    MonitorThreadFactory monitorThreadFactory = new MonitorThreadFactory(SERVER_THREAD_NAME);    return Executors.newCachedThreadPool(monitorThreadFactory);  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyMonitor.java", "stars": "3", "class": {"name": "NettyMonitor", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "start", "params": ["Class<T>", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public <T> void start(Class<T> bootCls, String[] args) {    try {      this.bootName = bootCls.getName();      this.args = args;      this.loadConfig();    } catch (IllegalAccessException e) {      log.error(\"An exception occurred while loading the configuration\", e);    }    final String threadName = this.environment.get(PATH_APP_THREAD_NAME, SERVER_THREAD_NAME);    final Thread bootThread = new Thread(openTcpConnection(bootCls), threadName);    this.singleExecutor.execute(bootThread);    this.started = true;  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyMonitor.java", "stars": "3", "class": {"name": "NettyMonitor", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "openTcpConnection", "params": ["Class<T>"], "throws": null, "modifiers": ["private"], "return_type": "Runnable", "snippet": "  private <T> Runnable openTcpConnection(Class<T> bootCls) {    return () -> {      try {        this.bootCls = bootCls;        this.nettyServer.start(this);        this.countDownLatch.countDown();        this.nettyServer.join();      } catch (BindException e) {        log.error(\"Bind port is exception:\", e);      } catch (Exception e) {        log.error(\"An exception occurred while the service started\", e);      }    };  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyMonitor.java", "stars": "3", "class": {"name": "NettyMonitor", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "loadConfig", "params": [], "throws": ["IllegalAccessException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void loadConfig() throws IllegalAccessException {    String bootConf = this.environment.get(PATH_SERVER_BOOT_CONFIG, PATH_CONFIG_PROPERTIES);    final Environment bootConfEnv = Environment.of(bootConf);    final Map<String, String> constFieldMap = PropertyUtils.confFieldMap();    this.loadPropsOrYaml(bootConfEnv, constFieldMap);    //Support loading configuration from args array of main function    if (!requireNonNull(bootConfEnv).isEmpty()) {      Map<String, String> bootEnvMap = bootConfEnv.toStringMap();      Set<Map.Entry<String, String>> entrySet = bootEnvMap.entrySet();      entrySet.forEach(entry -> this.environment.add(entry.getKey(), entry.getValue()));    }  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyMonitor.java", "stars": "3", "class": {"name": "NettyMonitor", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "loadPropsOrYaml", "params": ["Environment", "Map<String,String>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void loadPropsOrYaml(Environment bootConfEnv, Map<String, String> constField) {    /** Properties are configured by default, and the properties loaded     *  by default are application.properties. */    constField.keySet().forEach(key ->            Optional.ofNullable(System.getProperty(constField.get(key)))                    .ifPresent(property -> bootConfEnv.add(key, property)));    /** If there is no properties configuration, the yaml format is     * used, and the default yaml loaded is application.yml*/    if (bootConfEnv.isEmpty()) {      Optional.ofNullable(PropertyUtils.yaml(PATH_CONFIG_YAML))              .ifPresent(yamlConfigTreeMap ->                      bootConfEnv.load(new StringReader(                              PropertyUtils.toProperties(yamlConfigTreeMap))));    }  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyMonitor.java", "stars": "3", "class": {"name": "NettyMonitor", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "await", "params": [], "throws": null, "modifiers": ["public"], "return_type": "NettyMonitor", "snippet": "  public NettyMonitor await() {    if (!this.started) {      throw new IllegalStateException(\"Server hasn't been started. Call start() before calling this method.\");    }    try {      this.countDownLatch.await();    } catch (Exception e) {      log.error(\"Server start await error\", e);      Thread.currentThread().interrupt();    }    return this;  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyMonitor.java", "stars": "3", "class": {"name": "NettyMonitor", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "stop", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void stop() {    this.nettyServer.stop();  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyMonitor.java", "stars": "3", "class": {"name": "NettyMonitor", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setTitleAndContent", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTitleAndContent(String title, String content){        mMessage = content;        mTitle = title;    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/component/ProgresDialog.java", "stars": "2", "class": {"name": "ProgresDialog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOnCancelListener", "params": ["DialogInterface"], "throws": null, "modifiers": ["public", "final"], "return_type": "ProgresDialog", "snippet": "    public final ProgresDialog setOnCancelListener(DialogInterface.OnCancelListener p_listener) {        mProgressDialog.setOnCancelListener(p_listener);        return this;    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/component/ProgresDialog.java", "stars": "2", "class": {"name": "ProgresDialog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initView", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initView(){        titleView = (TextView) mProgressDialog.findViewById(R.id.loading_dialog_title);        contentView = (TextView) mProgressDialog.findViewById(R.id.loading_dialog_content);        //contentView.setTypeface(FontUtils.loadFontFromAssets(context, Constant.FONT_BOLD));        progress = (ProgressBar) mProgressDialog.findViewById(R.id.avLoading);    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/component/ProgresDialog.java", "stars": "2", "class": {"name": "ProgresDialog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "    public final void show() {        mProgressDialog.setIndeterminate(true);        mProgressDialog.show();        mProgressDialog.setContentView(R.layout.dialog_loading);        initView();        titleView.setText(mTitle);        contentView.setText(mMessage);        //progress.show();    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/component/ProgresDialog.java", "stars": "2", "class": {"name": "ProgresDialog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "dismiss", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "    public final void dismiss() {        mProgressDialog.dismiss();    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/component/ProgresDialog.java", "stars": "2", "class": {"name": "ProgresDialog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isShowing", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "boolean", "snippet": "    public final boolean isShowing() {        return mProgressDialog.isShowing();    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/component/ProgresDialog.java", "stars": "2", "class": {"name": "ProgresDialog", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "TaskMonitor", "snippet": "    public static TaskMonitor getInstance() {        return instance;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/TaskMonitor.java", "stars": "23", "class": {"name": "TaskMonitor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "registerTask", "params": ["Integer", "Communication"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void registerTask(Integer taskid, Communication communication) {        //\u5982\u679ctask\u5df2\u7ecffinish\uff0c\u76f4\u63a5\u8fd4\u56de        if (communication.isFinished()) {            return;        }        tasks.putIfAbsent(taskid, new TaskCommunication(taskid, communication));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/TaskMonitor.java", "stars": "23", "class": {"name": "TaskMonitor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeTask", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeTask(Integer taskid) {        tasks.remove(taskid);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/TaskMonitor.java", "stars": "23", "class": {"name": "TaskMonitor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "report", "params": ["Integer", "Communication"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void report(Integer taskid, Communication communication) {        //\u5982\u679ctask\u5df2\u7ecffinish\uff0c\u76f4\u63a5\u8fd4\u56de        if (communication.isFinished()) {            return;        }        if (!tasks.containsKey(taskid)) {            LOG.warn(\"unexpected: taskid({}) missed.\", taskid);            tasks.putIfAbsent(taskid, new TaskCommunication(taskid, communication));        } else {            tasks.get(taskid).report(communication);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/TaskMonitor.java", "stars": "23", "class": {"name": "TaskMonitor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTaskCommunication", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "TaskCommunication", "snippet": "    public TaskCommunication getTaskCommunication(Integer taskid) {        return tasks.get(taskid);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/TaskMonitor.java", "stars": "23", "class": {"name": "TaskMonitor", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "report", "params": ["Communication"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void report(Communication communication) {            ttl = System.currentTimeMillis();            //\u91c7\u96c6\u7684\u6570\u91cf\u589e\u957f\uff0c\u5219\u53d8\u66f4\u5f53\u524d\u8bb0\u5f55, \u4f18\u5148\u5224\u65ad\u8fd9\u4e2a\u6761\u4ef6\uff0c\u56e0\u4e3a\u76ee\u7684\u662f\u4e0d\u5361\u4f4f\uff0c\u800c\u4e0d\u662fexpired            if (CommunicationTool.getTotalReadRecords(communication) > lastAllReadRecords) {                lastAllReadRecords = CommunicationTool.getTotalReadRecords(communication);                lastUpdateComunicationTS = ttl;            } else if (isExpired(lastUpdateComunicationTS)) {                communication.setState(State.FAILED);                communication.setTimestamp(ttl);                communication.setThrowable(DataXException.asDataXException(CommonErrorCode.TASK_HUNG_EXPIRED,                        String.format(\"task(%s) hung expired [allReadRecord(%s), elased(%s)]\", taskid, lastAllReadRecords, (ttl - lastUpdateComunicationTS))));            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/TaskMonitor.java", "stars": "23", "class": {"name": "TaskCommunication", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isExpired", "params": ["long"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "        private boolean isExpired(long lastUpdateComunicationTS) {            return System.currentTimeMillis() - lastUpdateComunicationTS > EXPIRED_TIME;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/TaskMonitor.java", "stars": "23", "class": {"name": "TaskCommunication", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getTaskid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "        public Integer getTaskid() {            return taskid;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/TaskMonitor.java", "stars": "23", "class": {"name": "TaskCommunication", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getLastAllReadRecords", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "        public long getLastAllReadRecords() {            return lastAllReadRecords;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/TaskMonitor.java", "stars": "23", "class": {"name": "TaskCommunication", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getLastUpdateComunicationTS", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "        public long getLastUpdateComunicationTS() {            return lastUpdateComunicationTS;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/TaskMonitor.java", "stars": "23", "class": {"name": "TaskCommunication", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getTtl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "        public long getTtl() {            return ttl;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/taskgroup/TaskMonitor.java", "stars": "23", "class": {"name": "TaskCommunication", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getId() {        return id;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRole.java", "stars": "2", "class": {"name": "UmsRole", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Long id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRole.java", "stars": "2", "class": {"name": "UmsRole", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRole.java", "stars": "2", "class": {"name": "UmsRole", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRole.java", "stars": "2", "class": {"name": "UmsRole", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getDescription", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDescription() {        return description;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRole.java", "stars": "2", "class": {"name": "UmsRole", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setDescription", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDescription(String description) {        this.description = description;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRole.java", "stars": "2", "class": {"name": "UmsRole", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getAdminCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getAdminCount() {        return adminCount;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRole.java", "stars": "2", "class": {"name": "UmsRole", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setAdminCount", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAdminCount(Integer adminCount) {        this.adminCount = adminCount;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRole.java", "stars": "2", "class": {"name": "UmsRole", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getCreateTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date getCreateTime() {        return createTime;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRole.java", "stars": "2", "class": {"name": "UmsRole", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setCreateTime", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCreateTime(Date createTime) {        this.createTime = createTime;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRole.java", "stars": "2", "class": {"name": "UmsRole", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getStatus() {        return status;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRole.java", "stars": "2", "class": {"name": "UmsRole", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setStatus", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStatus(Integer status) {        this.status = status;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRole.java", "stars": "2", "class": {"name": "UmsRole", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getSort", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getSort() {        return sort;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRole.java", "stars": "2", "class": {"name": "UmsRole", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "setSort", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSort(Integer sort) {        this.sort = sort;    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRole.java", "stars": "2", "class": {"name": "UmsRole", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        StringBuilder sb = new StringBuilder();        sb.append(getClass().getSimpleName());        sb.append(\" [\");        sb.append(\"Hash = \").append(hashCode());        sb.append(\", id=\").append(id);        sb.append(\", name=\").append(name);        sb.append(\", description=\").append(description);        sb.append(\", adminCount=\").append(adminCount);        sb.append(\", createTime=\").append(createTime);        sb.append(\", status=\").append(status);        sb.append(\", sort=\").append(sort);        sb.append(\", serialVersionUID=\").append(serialVersionUID);        sb.append(\"]\");        return sb.toString();    }", "url": "https://raw.githubusercontent.com/gavin-yyj/vhr-/master/swagger/src/main/java/com/macro/mall/tiny/mbg/model/UmsRole.java", "stars": "2", "class": {"name": "UmsRole", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_demo_from_gallery);        mButton = (Button) findViewById(R.id.gallery_bt);        mButton.setOnClickListener(mButtonClicked);        mImage = (ImageView) findViewById(R.id.source_iv);        mUriTv = (TextView) findViewById(R.id.uri_tv);        mDescriptEt = (TextView) findViewById(R.id.desc_tv);        mDescriptEt.setText(DEFAULT_DESCRIPTION);        mPinIt = (PinItButton) findViewById(R.id.pin_bt);        PinItButton.setDebugMode(true);        PinItButton.setPartnerId(\"myApp\");        mPinIt.setUrl(WEB_URL);        mPinIt.setDescription(DEFAULT_DESCRIPTION);        PinItButton.setPartnerId(DemoMainActivity.CLIENT_ID);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/PinItDemo/src/com/pinterest/samples/pinit/DemoFromGallery.java", "stars": "74", "class": {"name": "DemoFromGallery", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onActivityResult", "params": ["int", "int", "Intent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (resultCode == Activity.RESULT_OK && requestCode == IMAGE_SELECT) {            // Check for returned image from gallery            if (data == null)                return;            Uri imageUri = data.getData();            setImageUri(imageUri);        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/PinItDemo/src/com/pinterest/samples/pinit/DemoFromGallery.java", "stars": "74", "class": {"name": "DemoFromGallery", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "setImageUri", "params": ["Uri"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setImageUri(Uri imageUri) {        if (imageUri == null)            return;        mImageUri = imageUri;        mUriTv.setText(imageUri.toString());        mPinIt.setImageUri(mImageUri);        try {            Bitmap pinthumb = imageFromUri(this, mImageUri, 400, 300);            mImage.setImageBitmap(pinthumb);        } catch (IOException ignored) {        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/PinItDemo/src/com/pinterest/samples/pinit/DemoFromGallery.java", "stars": "74", "class": {"name": "DemoFromGallery", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "imageFromUri", "params": ["Context", "Uri", "int", "int"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "Bitmap", "snippet": "    public static Bitmap imageFromUri(Context context, Uri uri, int width,        int height) throws IOException {        ContentResolver resolver = context.getContentResolver();        InputStream input = resolver.openInputStream(uri);        // Just get some info        BitmapFactory.Options onlyBoundsOptions = new BitmapFactory.Options();        onlyBoundsOptions.inJustDecodeBounds = true;        onlyBoundsOptions.inDensity = Bitmap.DENSITY_NONE;        onlyBoundsOptions.inPurgeable = true;        onlyBoundsOptions.inInputShareable = true;        BitmapFactory.decodeStream(input, null, onlyBoundsOptions);        input.close();        int xSample = 0, ySample = 0;        if ((onlyBoundsOptions.outWidth == -1) || (onlyBoundsOptions.outHeight == -1))            return null;        else {            xSample = (int) Math.floor(onlyBoundsOptions.outWidth / width);            ySample = (int) Math.floor(onlyBoundsOptions.outHeight / height);        }        // Decode        BitmapFactory.Options bitmapOptions = new BitmapFactory.Options();        bitmapOptions.inPreferredConfig = Bitmap.Config.ARGB_8888;        bitmapOptions.inDensity = Bitmap.DENSITY_NONE;        bitmapOptions.inPurgeable = true;        bitmapOptions.inInputShareable = true;        bitmapOptions.inSampleSize = Math.min(xSample, ySample);        input = context.getContentResolver().openInputStream(uri);        Bitmap bitmap = BitmapFactory.decodeStream(input, null, bitmapOptions);        input.close();        return bitmap;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/PinItDemo/src/com/pinterest/samples/pinit/DemoFromGallery.java", "stars": "74", "class": {"name": "DemoFromGallery", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldDemonstrateProvidedStringBuilder", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldDemonstrateProvidedStringBuilder() {    //You can pass in your own StringBuilder    final StringBuilder sb = new StringBuilder();    //From the tutorial    final String sql = example1().usingAppender(sb).toString();    assertEquals(\"SELECT P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME, P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON\\n\" +        \"FROM PERSON P, ACCOUNT A\\n\" +        \"INNER JOIN DEPARTMENT D on D.ID = P.DEPARTMENT_ID\\n\" +        \"INNER JOIN COMPANY C on D.COMPANY_ID = C.ID\\n\" +        \"WHERE (P.ID = A.ID AND P.FIRST_NAME like ?) \\n\" +        \"OR (P.LAST_NAME like ?)\\n\" +        \"GROUP BY P.ID\\n\" +        \"HAVING (P.LAST_NAME like ?) \\n\" +        \"OR (P.FIRST_NAME like ?)\\n\" +        \"ORDER BY P.ID, P.FULL_NAME\", sql);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldDemonstrateMixedStyle", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldDemonstrateMixedStyle() {    //Mixed    final String sql = new SQL() {{      SELECT(\"id, name\");      FROM(\"PERSON A\");      WHERE(\"name like ?\").WHERE(\"id = ?\");    }}.toString();    assertEquals(\"\" +        \"SELECT id, name\\n\" +        \"FROM PERSON A\\n\" +        \"WHERE (name like ? AND id = ?)\", sql);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldDemonstrateFluentStyle", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldDemonstrateFluentStyle() {    //Fluent Style    final String sql = new SQL()        .SELECT(\"id, name\").FROM(\"PERSON A\")        .WHERE(\"name like ?\")        .WHERE(\"id = ?\").toString();    assertEquals(\"\" +        \"SELECT id, name\\n\" +        \"FROM PERSON A\\n\" +        \"WHERE (name like ? AND id = ?)\", sql);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldProduceExpectedSimpleSelectStatement", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldProduceExpectedSimpleSelectStatement() {    final String expected =        \"SELECT P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME\\n\" +            \"FROM PERSON P\\n\" +            \"WHERE (P.ID like #id# AND P.FIRST_NAME like #firstName# AND P.LAST_NAME like #lastName#)\\n\" +            \"ORDER BY P.LAST_NAME\";    assertEquals(expected, example2(\"a\", \"b\", \"c\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldProduceExpectedSimpleSelectStatementMissingFirstParam", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldProduceExpectedSimpleSelectStatementMissingFirstParam() {    final String expected =        \"SELECT P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME\\n\" +            \"FROM PERSON P\\n\" +            \"WHERE (P.FIRST_NAME like #firstName# AND P.LAST_NAME like #lastName#)\\n\" +            \"ORDER BY P.LAST_NAME\";    assertEquals(expected, example2(null, \"b\", \"c\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldProduceExpectedSimpleSelectStatementMissingFirstTwoParams", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldProduceExpectedSimpleSelectStatementMissingFirstTwoParams() {    final String expected =        \"SELECT P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME\\n\" +            \"FROM PERSON P\\n\" +            \"WHERE (P.LAST_NAME like #lastName#)\\n\" +            \"ORDER BY P.LAST_NAME\";    assertEquals(expected, example2(null, null, \"c\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldProduceExpectedSimpleSelectStatementMissingAllParams", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldProduceExpectedSimpleSelectStatementMissingAllParams() {    final String expected =        \"SELECT P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME\\n\" +            \"FROM PERSON P\\n\" +            \"ORDER BY P.LAST_NAME\";    assertEquals(expected, example2(null, null, null));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldProduceExpectedComplexSelectStatement", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldProduceExpectedComplexSelectStatement() {    final String expected =        \"SELECT P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME, P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON\\n\" +            \"FROM PERSON P, ACCOUNT A\\n\" +            \"INNER JOIN DEPARTMENT D on D.ID = P.DEPARTMENT_ID\\n\" +            \"INNER JOIN COMPANY C on D.COMPANY_ID = C.ID\\n\" +            \"WHERE (P.ID = A.ID AND P.FIRST_NAME like ?) \\n\" +            \"OR (P.LAST_NAME like ?)\\n\" +            \"GROUP BY P.ID\\n\" +            \"HAVING (P.LAST_NAME like ?) \\n\" +            \"OR (P.FIRST_NAME like ?)\\n\" +            \"ORDER BY P.ID, P.FULL_NAME\";    assertEquals(expected, example1().toString());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "example1", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "SQL", "snippet": "  private static SQL example1() {    return new SQL() {{      SELECT(\"P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME\");      SELECT(\"P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON\");      FROM(\"PERSON P\");      FROM(\"ACCOUNT A\");      INNER_JOIN(\"DEPARTMENT D on D.ID = P.DEPARTMENT_ID\");      INNER_JOIN(\"COMPANY C on D.COMPANY_ID = C.ID\");      WHERE(\"P.ID = A.ID\");      WHERE(\"P.FIRST_NAME like ?\");      OR();      WHERE(\"P.LAST_NAME like ?\");      GROUP_BY(\"P.ID\");      HAVING(\"P.LAST_NAME like ?\");      OR();      HAVING(\"P.FIRST_NAME like ?\");      ORDER_BY(\"P.ID\");      ORDER_BY(\"P.FULL_NAME\");    }};  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "example2", "params": ["String", "String", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "  private static String example2(final String id, final String firstName, final String lastName) {    return new SQL() {{      SELECT(\"P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME\");      FROM(\"PERSON P\");      if (id != null) {        WHERE(\"P.ID like #id#\");      }      if (firstName != null) {        WHERE(\"P.FIRST_NAME like #firstName#\");      }      if (lastName != null) {        WHERE(\"P.LAST_NAME like #lastName#\");      }      ORDER_BY(\"P.LAST_NAME\");    }}.toString();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "variableLengthArgumentOnSelect", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void variableLengthArgumentOnSelect() {    final String sql = new SQL() {{      SELECT(\"P.ID\", \"P.USERNAME\");    }}.toString();    assertEquals(\"SELECT P.ID, P.USERNAME\", sql);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "variableLengthArgumentOnSelectDistinct", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void variableLengthArgumentOnSelectDistinct() {    final String sql = new SQL() {{      SELECT_DISTINCT(\"P.ID\", \"P.USERNAME\");    }}.toString();    assertEquals(\"SELECT DISTINCT P.ID, P.USERNAME\", sql);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "variableLengthArgumentOnFrom", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void variableLengthArgumentOnFrom() {    final String sql = new SQL() {{      SELECT().FROM(\"TABLE_A a\", \"TABLE_B b\");    }}.toString();    assertEquals(\"FROM TABLE_A a, TABLE_B b\", sql);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "variableLengthArgumentOnJoin", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void variableLengthArgumentOnJoin() {    final String sql = new SQL() {{      SELECT().JOIN(\"TABLE_A b ON b.id = a.id\", \"TABLE_C c ON c.id = a.id\");    }}.toString();    assertEquals(\"JOIN TABLE_A b ON b.id = a.id\\n\" +        \"JOIN TABLE_C c ON c.id = a.id\", sql);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "variableLengthArgumentOnInnerJoin", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void variableLengthArgumentOnInnerJoin() {    final String sql = new SQL() {{      SELECT().INNER_JOIN(\"TABLE_A b ON b.id = a.id\", \"TABLE_C c ON c.id = a.id\");    }}.toString();    assertEquals(\"INNER JOIN TABLE_A b ON b.id = a.id\\n\" +        \"INNER JOIN TABLE_C c ON c.id = a.id\", sql);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "variableLengthArgumentOnOuterJoin", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void variableLengthArgumentOnOuterJoin() {    final String sql = new SQL() {{      SELECT().OUTER_JOIN(\"TABLE_A b ON b.id = a.id\", \"TABLE_C c ON c.id = a.id\");    }}.toString();    assertEquals(\"OUTER JOIN TABLE_A b ON b.id = a.id\\n\" +        \"OUTER JOIN TABLE_C c ON c.id = a.id\", sql);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "variableLengthArgumentOnLeftOuterJoin", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void variableLengthArgumentOnLeftOuterJoin() {    final String sql = new SQL() {{      SELECT().LEFT_OUTER_JOIN(\"TABLE_A b ON b.id = a.id\", \"TABLE_C c ON c.id = a.id\");    }}.toString();    assertEquals(\"LEFT OUTER JOIN TABLE_A b ON b.id = a.id\\n\" +        \"LEFT OUTER JOIN TABLE_C c ON c.id = a.id\", sql);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "variableLengthArgumentOnRightOuterJoin", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void variableLengthArgumentOnRightOuterJoin() {    final String sql = new SQL() {{      SELECT().RIGHT_OUTER_JOIN(\"TABLE_A b ON b.id = a.id\", \"TABLE_C c ON c.id = a.id\");    }}.toString();    assertEquals(\"RIGHT OUTER JOIN TABLE_A b ON b.id = a.id\\n\" +        \"RIGHT OUTER JOIN TABLE_C c ON c.id = a.id\", sql);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "variableLengthArgumentOnWhere", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void variableLengthArgumentOnWhere() {    final String sql = new SQL() {{      SELECT().WHERE(\"a = #{a}\", \"b = #{b}\");    }}.toString();    assertEquals(\"WHERE (a = #{a} AND b = #{b})\", sql);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "variableLengthArgumentOnGroupBy", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void variableLengthArgumentOnGroupBy() {    final String sql = new SQL() {{      SELECT().GROUP_BY(\"a\", \"b\");    }}.toString();    assertEquals(\"GROUP BY a, b\", sql);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "variableLengthArgumentOnHaving", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void variableLengthArgumentOnHaving() {    final String sql = new SQL() {{      SELECT().HAVING(\"a = #{a}\", \"b = #{b}\");    }}.toString();    assertEquals(\"HAVING (a = #{a} AND b = #{b})\", sql);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "variableLengthArgumentOnOrderBy", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void variableLengthArgumentOnOrderBy() {    final String sql = new SQL() {{      SELECT().ORDER_BY(\"a\", \"b\");    }}.toString();    assertEquals(\"ORDER BY a, b\", sql);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "variableLengthArgumentOnSet", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void variableLengthArgumentOnSet() {    final String sql = new SQL() {{      UPDATE(\"TABLE_A\").SET(\"a = #{a}\", \"b = #{b}\");    }}.toString();    assertEquals(\"UPDATE TABLE_A\\n\" +        \"SET a = #{a}, b = #{b}\", sql);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "variableLengthArgumentOnIntoColumnsAndValues", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void variableLengthArgumentOnIntoColumnsAndValues() {    final String sql = new SQL() {{      INSERT_INTO(\"TABLE_A\").INTO_COLUMNS(\"a\", \"b\").INTO_VALUES(\"#{a}\", \"#{b}\");    }}.toString();    assertEquals(\"INSERT INTO TABLE_A\\n (a, b)\\nVALUES (#{a}, #{b})\", sql);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "fixFor903UpdateJoins", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void fixFor903UpdateJoins() {    final SQL sql = new SQL().UPDATE(\"table1 a\").INNER_JOIN(\"table2 b USING (ID)\").SET(\"a.value = b.value\");    assertThat(sql.toString()).isEqualTo(\"UPDATE table1 a\\nINNER JOIN table2 b USING (ID)\\nSET a.value = b.value\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "selectUsingLimitVariableName", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void selectUsingLimitVariableName() {    final String sql = new SQL() {{      SELECT(\"*\").FROM(\"test\").ORDER_BY(\"id\").LIMIT(\"#{limit}\");    }}.toString();    assertEquals(\"SELECT *\\nFROM test\\nORDER BY id LIMIT #{limit}\", sql);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "selectUsingOffsetVariableName", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void selectUsingOffsetVariableName() {    final String sql = new SQL() {{      SELECT(\"*\").FROM(\"test\").ORDER_BY(\"id\").OFFSET(\"#{offset}\");    }}.toString();    assertEquals(\"SELECT *\\nFROM test\\nORDER BY id OFFSET #{offset}\", sql);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "selectUsingLimitAndOffset", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void selectUsingLimitAndOffset() {    final String sql = new SQL() {{      SELECT(\"*\").FROM(\"test\").ORDER_BY(\"id\").LIMIT(20).OFFSET(100);    }}.toString();    assertEquals(\"SELECT *\\nFROM test\\nORDER BY id LIMIT 20 OFFSET 100\", sql);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "updateUsingLimit", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void updateUsingLimit() {    final String sql = new SQL() {{      UPDATE(\"test\").SET(\"status = #{updStatus}\").WHERE(\"status = #{status}\").LIMIT(20);    }}.toString();    assertEquals(\"UPDATE test\\nSET status = #{updStatus}\\nWHERE (status = #{status}) LIMIT 20\", sql);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "deleteUsingLimit", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void deleteUsingLimit() {    final String sql = new SQL() {{      DELETE_FROM(\"test\").WHERE(\"status = #{status}\").LIMIT(20);    }}.toString();    assertEquals(\"DELETE FROM test\\nWHERE (status = #{status}) LIMIT 20\", sql);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "selectUsingFetchFirstRowsOnlyVariableName", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void selectUsingFetchFirstRowsOnlyVariableName() {    final String sql = new SQL() {{      SELECT(\"*\").FROM(\"test\").ORDER_BY(\"id\").FETCH_FIRST_ROWS_ONLY(\"#{fetchFirstRows}\");    }}.toString();    assertEquals(\"SELECT *\\nFROM test\\nORDER BY id FETCH FIRST #{fetchFirstRows} ROWS ONLY\", sql);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "selectUsingOffsetRowsVariableName", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void selectUsingOffsetRowsVariableName() {    final String sql = new SQL() {{      SELECT(\"*\").FROM(\"test\").ORDER_BY(\"id\").OFFSET_ROWS(\"#{offsetRows}\");    }}.toString();    assertEquals(\"SELECT *\\nFROM test\\nORDER BY id OFFSET #{offsetRows} ROWS\", sql);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "selectUsingOffsetRowsAndFetchFirstRowsOnly", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void selectUsingOffsetRowsAndFetchFirstRowsOnly() {    final String sql = new SQL() {{      SELECT(\"*\").FROM(\"test\").ORDER_BY(\"id\").OFFSET_ROWS(100).FETCH_FIRST_ROWS_ONLY(20);    }}.toString();    assertEquals(\"SELECT *\\nFROM test\\nORDER BY id OFFSET 100 ROWS FETCH FIRST 20 ROWS ONLY\", sql);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "supportBatchInsert", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void supportBatchInsert(){    final String sql =  new SQL(){{      INSERT_INTO(\"table1 a\");      INTO_COLUMNS(\"col1,col2\");      INTO_VALUES(\"val1\",\"val2\");      ADD_ROW();      INTO_VALUES(\"val1\",\"val2\");    }}.toString();    assertThat(sql).isEqualToIgnoringWhitespace(\"INSERT INTO table1 a (col1,col2) VALUES (val1,val2), (val1,val2)\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "singleInsert", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void singleInsert() {    final String sql = new SQL() {{      INSERT_INTO(\"table1 a\");      INTO_COLUMNS(\"col1,col2\");      INTO_VALUES(\"val1\", \"val2\");    }}.toString();    assertThat(sql).isEqualToIgnoringWhitespace(\"INSERT INTO table1 a (col1,col2) VALUES (val1,val2)\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "singleInsertWithMultipleInsertValues", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void singleInsertWithMultipleInsertValues() {    final String sql = new SQL() {{      INSERT_INTO(\"TABLE_A\").INTO_COLUMNS(\"a\", \"b\").INTO_VALUES(\"#{a}\").INTO_VALUES(\"#{b}\");    }}.toString();    assertThat(sql).isEqualToIgnoringWhitespace(\"INSERT INTO TABLE_A (a, b) VALUES (#{a}, #{b})\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "batchInsertWithMultipleInsertValues", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void batchInsertWithMultipleInsertValues() {    final String sql = new SQL() {{      INSERT_INTO(\"TABLE_A\");      INTO_COLUMNS(\"a\", \"b\");      INTO_VALUES(\"#{a1}\");      INTO_VALUES(\"#{b1}\");      ADD_ROW();      INTO_VALUES(\"#{a2}\");      INTO_VALUES(\"#{b2}\");    }}.toString();    assertThat(sql).isEqualToIgnoringWhitespace(\"INSERT INTO TABLE_A (a, b) VALUES (#{a1}, #{b1}), (#{a2}, #{b2})\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testValues", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testValues() {    final String sql = new SQL() {{      INSERT_INTO(\"PERSON\");      VALUES(\"ID, FIRST_NAME\", \"#{id}, #{firstName}\");      VALUES(\"LAST_NAME\", \"#{lastName}\");    }}.toString();    assertThat(sql).isEqualToIgnoringWhitespace(\"INSERT INTO PERSON (ID, FIRST_NAME, LAST_NAME) VALUES (#{id}, #{firstName}, #{lastName})\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/jdbc/SQLTest.java", "stars": "15", "class": {"name": "SQLTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "solution", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int solution(int x, int[] a) {        // write your code in Java SE 8        \t\tSet<Integer> perfectSet = new HashSet<>();                for (int i = 1; i<=x; i++) {            perfectSet.add(i);        }                int i = 0;        while (perfectSet.size() != 0 && (i < a.length)) {            perfectSet.remove(a[i]);            i++;        }        return perfectSet.size() == 0 ? i - 1 : -1;    }", "url": "https://raw.githubusercontent.com/njcodernoob/codility-java-solutions/master/FrogRiverOne.java", "stars": "2", "class": {"name": "FrogRiverOne", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUpMethod", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUpMethod(){        driver = WebDriverFactory.getDriver(\"chrome\");        driver.manage().window().maximize();        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);        driver.get(\"https://only-testing-blog.blogspot.com/2014/01/textbox.html\");    }", "url": "https://raw.githubusercontent.com/vatanhorasan/myStudies/master/src/test/java/com/cybertek/tests/myStudies/Study1.java", "stars": "2", "class": {"name": "Study1", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "afterMethod", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void afterMethod() throws InterruptedException {        Thread.sleep(2000);        driver.quit();    }", "url": "https://raw.githubusercontent.com/vatanhorasan/myStudies/master/src/test/java/com/cybertek/tests/myStudies/Study1.java", "stars": "2", "class": {"name": "Study1", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testAlert", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testAlert() throws InterruptedException {        driver.findElement(By.cssSelector(\"button[onclick='myFunctionf()']\")).click();        Alert alert = driver.switchTo().alert();        alert.sendKeys(\"Say my name\");        alert.accept();    }", "url": "https://raw.githubusercontent.com/vatanhorasan/myStudies/master/src/test/java/com/cybertek/tests/myStudies/Study1.java", "stars": "2", "class": {"name": "Study1", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "dropDown", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void dropDown() throws InterruptedException {        WebElement dropBox = driver.findElement(By.xpath(\"(//select)[2]\"));        Select selectCountries = new Select(dropBox);        int size = selectCountries.getOptions().size();        WebElement rightArrow = driver.findElement(By.xpath(\"(//td)[2]/input[1]\"));        WebElement leftArrow = driver.findElement(By.xpath(\"(//td)[2]/input[2]\"));        for (int i = 0; i < size; i++) {            selectCountries.selectByIndex(0);            rightArrow.click();        }        selectCountries = new Select(driver.findElement(By.xpath(\"(//select)[3]\")));        for (int i = 0; i < size; i++) {            selectCountries.selectByIndex(0);            leftArrow.click();        }    }", "url": "https://raw.githubusercontent.com/vatanhorasan/myStudies/master/src/test/java/com/cybertek/tests/myStudies/Study1.java", "stars": "2", "class": {"name": "Study1", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "newPage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void newPage(){        String handle1 = driver.getWindowHandle();        driver.findElement(By.linkText(\"Open New Page\")).click();        Set<String> handles = driver.getWindowHandles();        for (String handle : handles) {            if(!handle.equals(handle1)){                driver.switchTo().window(handle);                break;            }        }        WebElement dropBox = driver.findElement(By.xpath(\"(//select)[2]\"));        Select selectCountries = new Select(dropBox);        int size = selectCountries.getOptions().size();        WebElement rightArrow = driver.findElement(By.xpath(\"(//td)[2]/input[1]\"));        WebElement leftArrow = driver.findElement(By.xpath(\"(//td)[2]/input[2]\"));        for (int i = 0; i < size; i++) {            selectCountries.selectByIndex(0);            rightArrow.click();        }    }", "url": "https://raw.githubusercontent.com/vatanhorasan/myStudies/master/src/test/java/com/cybertek/tests/myStudies/Study1.java", "stars": "2", "class": {"name": "Study1", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "tableTest", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void tableTest(){        WebElement table = driver.findElement(By.xpath(\"(//table)[2]\"));        //System.out.println(table.getText());        int rowNum = driver.findElements(By.xpath(\"(//table)[2]//tr\")).size();        int colNum = driver.findElements(By.xpath(\"(//table)[2]//tr[1]/td\")).size();        WebElement firstCell = driver.findElement(By.xpath(\"(//table)[2]//tr[1]/td[1]\"));        //printing all the cells        for (int i=1 ; i<=rowNum ; i++){            for(int j=1 ; j<=colNum ; j++){                if(i==3 && j==6){                    break;                }                String xPath = \"(//table)[2]//tr[\"+i+\"]/td[\"+j+\"]\";                String cellText = driver.findElement(By.xpath(xPath)).getText();                double num = Double.parseDouble(cellText);                if(num%2==0){                    System.out.print(num +\" | \");                }            }            System.out.println();        }    }", "url": "https://raw.githubusercontent.com/vatanhorasan/myStudies/master/src/test/java/com/cybertek/tests/myStudies/Study1.java", "stars": "2", "class": {"name": "Study1", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate() {        super.onCreate();        // \u521d\u59cb\u5316        CallConfig callConfig = new CallConfig.Builder(                \"http://www.google.com/\",                \"68e109f0f40ca72a15e05cc22786f8e6\",                \"\",                true).build();        CallKit.initForModule(this, callConfig);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/app/src/main/java/io/agora/opensource/BasicApp.java", "stars": "1", "class": {"name": "BasicApp", "extends": "Application", "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void start() {        if (isRunning)            return;        isRunning = true;        scanTimer = new Timer();        scanTimer.schedule(new MDNSSearchTask(), 100, RESCAN_INTERVAL);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/ZeroconfDiscoveryProvider.java", "stars": "4", "class": {"name": "ZeroconfDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "createJmDNS", "params": [], "throws": ["IOException"], "modifiers": ["protected"], "return_type": "JmDNS", "snippet": "    protected JmDNS createJmDNS() throws IOException {        if (srcAddress != null)            return JmDNS.create(srcAddress, HOSTNAME);        else            return null;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/ZeroconfDiscoveryProvider.java", "stars": "4", "class": {"name": "ZeroconfDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "stop", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void stop() {        isRunning = false;        if (scanTimer != null) {            scanTimer.cancel();            scanTimer = null;        }        if (jmdns != null) {            for (DiscoveryFilter searchTarget : serviceFilters) {                String filter = searchTarget.getServiceFilter();                jmdns.removeServiceListener(filter, jmdnsListener);            }        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/ZeroconfDiscoveryProvider.java", "stars": "4", "class": {"name": "ZeroconfDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "restart", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void restart() {        stop();        start();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/ZeroconfDiscoveryProvider.java", "stars": "4", "class": {"name": "ZeroconfDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "reset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void reset() {        stop();        foundServices.clear();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/ZeroconfDiscoveryProvider.java", "stars": "4", "class": {"name": "ZeroconfDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "rescan", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void rescan() {        try {            if (jmdns != null) {                jmdns.close();                jmdns = null;            }            jmdns = createJmDNS();            if (jmdns != null) {                for (DiscoveryFilter searchTarget : serviceFilters) {                    String filter = searchTarget.getServiceFilter();                    jmdns.addServiceListener(filter, jmdnsListener);                }            }        } catch (IOException e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/ZeroconfDiscoveryProvider.java", "stars": "4", "class": {"name": "ZeroconfDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "addListener", "params": ["DiscoveryProviderListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addListener(DiscoveryProviderListener listener) {        serviceListeners.add(listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/ZeroconfDiscoveryProvider.java", "stars": "4", "class": {"name": "ZeroconfDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "removeListener", "params": ["DiscoveryProviderListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeListener(DiscoveryProviderListener listener) {        serviceListeners.remove(listener);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/ZeroconfDiscoveryProvider.java", "stars": "4", "class": {"name": "ZeroconfDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "addDeviceFilter", "params": ["DiscoveryFilter"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addDeviceFilter(DiscoveryFilter filter) {        if (filter.getServiceFilter() == null) {            Log.e(Util.T, \"This device filter does not have zeroconf filter info\");        } else {            serviceFilters.add(filter);        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/ZeroconfDiscoveryProvider.java", "stars": "4", "class": {"name": "ZeroconfDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "removeDeviceFilter", "params": ["DiscoveryFilter"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeDeviceFilter(DiscoveryFilter filter) {        serviceFilters.remove(filter);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/ZeroconfDiscoveryProvider.java", "stars": "4", "class": {"name": "ZeroconfDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "setFilters", "params": ["List<DiscoveryFilter>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFilters(List<DiscoveryFilter> filters) {        serviceFilters = filters;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/ZeroconfDiscoveryProvider.java", "stars": "4", "class": {"name": "ZeroconfDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "isEmpty", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isEmpty() {        return serviceFilters.size() == 0;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/ZeroconfDiscoveryProvider.java", "stars": "4", "class": {"name": "ZeroconfDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "serviceIdForFilter", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String serviceIdForFilter(String filter) {        String serviceId = \"\";        for (DiscoveryFilter serviceFilter : serviceFilters) {            String ssdpFilter = serviceFilter.getServiceFilter();            if (ssdpFilter.equals(filter)) {                return serviceFilter.getServiceId();            }        }        return serviceId;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/ZeroconfDiscoveryProvider.java", "stars": "4", "class": {"name": "ZeroconfDiscoveryProvider", "extends": null, "implements": ["DiscoveryProvider"], "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void run() {            List<String> killKeys = new ArrayList<String>();            long killPoint = new Date().getTime() - TIMEOUT;            for (String key : foundServices.keySet()) {                ServiceDescription service = foundServices.get(key);                if (service == null || service.getLastDetection() < killPoint) {                    killKeys.add(key);                }            }            for (String key : killKeys) {                final ServiceDescription service = foundServices.get(key);                if (service != null) {                    Util.runOnUI(new Runnable() {                        @Override                        public void run() {                            for (DiscoveryProviderListener listener : serviceListeners) {                                listener.onServiceRemoved(ZeroconfDiscoveryProvider.this, service);                            }                        }                    });                }                if (foundServices.containsKey(key))                    foundServices.remove(key);            }            rescan();        }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/discovery/provider/ZeroconfDiscoveryProvider.java", "stars": "4", "class": {"name": "MDNSSearchTask", "extends": "TimerTask", "implements": null, "modifiers": ["private"]}}, {"method_name": "setParameter", "params": ["PreparedStatement", "int", "Integer", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setParameter(PreparedStatement ps, int i, Integer parameter, JdbcType jdbcType) throws SQLException {    ps.setInt(i, parameter);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/typehandler/CustomIntegerTypeHandler.java", "stars": "15", "class": {"name": "CustomIntegerTypeHandler", "extends": null, "implements": ["TypeHandler"], "modifiers": ["public"]}}, {"method_name": "getResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getResult(ResultSet rs, String columnName) throws SQLException {    return rs.getInt(columnName);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/typehandler/CustomIntegerTypeHandler.java", "stars": "15", "class": {"name": "CustomIntegerTypeHandler", "extends": null, "implements": ["TypeHandler"], "modifiers": ["public"]}}, {"method_name": "getResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getResult(ResultSet rs, int columnIndex) throws SQLException {    return rs.getInt(columnIndex);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/typehandler/CustomIntegerTypeHandler.java", "stars": "15", "class": {"name": "CustomIntegerTypeHandler", "extends": null, "implements": ["TypeHandler"], "modifiers": ["public"]}}, {"method_name": "getResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getResult(CallableStatement cs, int columnIndex) throws SQLException {    return cs.getInt(columnIndex);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/builder/typehandler/CustomIntegerTypeHandler.java", "stars": "15", "class": {"name": "CustomIntegerTypeHandler", "extends": null, "implements": ["TypeHandler"], "modifiers": ["public"]}}, {"method_name": "fitAspectRatioContains", "params": ["int", "int", "int", "int"], "throws": null, "modifiers": ["private", "static"], "return_type": "double", "snippet": "    private static double fitAspectRatioContains(int srcWidth, int srcHeight, int maxWidth, int maxHeight) {        return Math.min((double) maxWidth / srcWidth, (double) maxHeight / srcHeight);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": ["List<Pacman>", "Grid", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init(List<Pacman> pacmenModel, Grid grid, int pacmenPerPlayer) {        random = new Random();        switchers = new HashMap<>();        cooldownLaunchers = new ArrayList<>();        goners = new ArrayList<>();        dying = new ArrayList<>();        movers = new ArrayList<>();        bumpers = new ArrayList<>();        flashers = new ArrayList<>();        this.pacmenPerPlayer = pacmenPerPlayer;        this.gridModel = grid;        background = gem.createSprite().setImage(\"BACKGROUND_semi.jpg\");        gameZone = gem.createGroup();        screenWidth = gem.getWorld().getWidth();        screenHeight = gem.getWorld().getHeight();        int gameZoneWidth = grid.getWidth() * cellSize;        int gameZoneHeight = grid.getHeight() * cellSize;        double coefficient = fitAspectRatioContains(gameZoneWidth, gameZoneHeight, screenWidth, screenHeight - HUD_HEIGHT);        gameZone.setScale(coefficient);        if (coefficient > 2.8) {            pacmanSize = cellSize;        }        center(gameZone, gameZoneWidth * coefficient, gameZoneHeight * coefficient, screenWidth, screenHeight);        gameZone.setY(gameZone.getY() + HUD_HEIGHT / 2);        TooltipGlobalData tooltipData = new TooltipGlobalData(            grid.getWidth(), grid.getHeight(), gameZone.getX(), gameZone.getY(), cellSize, coefficient        );        tooltipModule.init(tooltipData);        pacMask = gem.createRectangle()            .setWidth(gameZoneWidth)            .setHeight(gameZoneHeight)            .setZIndex(20);        gameZone.add(pacMask);        Group speedboostGroup = gem.createGroup().setZIndex(Z_LAYER_PAC - 1).setMask(pacMask);        gameZone.add(speedboostGroup);        events.init(gameZone.getScaleX(), speedboostGroup.getId());        initPacmen(pacmenModel);        initGrid(grid);        initHud();        endOfTurn();    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initHud", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initHud() {        int hudWidth = 530;        Group hudGroup = gem.createGroup()            .setZIndex(Z_LAYER_HUD);        Sprite hudRed = gem.createSprite()            .setImage(\"HUD_Masque_RED\")            .setZIndex(1);        Sprite hudBlue = gem.createSprite()            .setImage(\"HUD_Masque_BLUE\")            .setX(screenWidth - hudWidth)            .setZIndex(1);        hudGroup.add(hudRed, hudBlue);        scoreLabels = new ArrayList<BitmapText>(gameManager.getPlayerCount());        int playerHudZoneWidth = screenWidth / (gameManager.getPlayerCount());        double avatarRotation = 0.08;        int avatarSize = 130;        int playerHudNameOffset = 630;        int playerHudScoreOffset = 320;        int playerHudAvatarOffset = 882;        for (Player p : gameManager.getPlayers()) {            int coefMirror = p.getIndex() == 0 ? -1 : 1;            BitmapText nameLabel = gem.createBitmapText()                .setFont(\"BRLNS_66\")                .setFontSize(36)                .setText(p.getNicknameToken())                .setMaxWidth(300)                .setAnchorX(0.5)                .setX(playerHudZoneWidth + coefMirror * playerHudNameOffset)                .setY(7)                .setZIndex(2);            BitmapText scoreLabel = gem.createBitmapText()                .setFont(\"BRLNS_66\")                .setFontSize(72)                .setText(\"0\")                .setAnchorX(0.5)                .setX(playerHudZoneWidth + coefMirror * playerHudScoreOffset)                .setY(10)                .setZIndex(2);            Sprite avatar = gem.createSprite()                .setImage(p.getAvatarToken())                .setAnchor(0.5)                .setX(playerHudZoneWidth + coefMirror * playerHudAvatarOffset)                .setY(70)                .setRotation(coefMirror * avatarRotation)                .setBaseHeight(avatarSize)                .setBaseWidth(avatarSize)                .setZIndex(0);            hudGroup.add(nameLabel, scoreLabel, avatar);            scoreLabels.add(scoreLabel);        }    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initGrid", "params": ["Grid"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initGrid(Grid gridModel) {        grid = gridViewProvider.get();        grid.init(gridModel, cellSize);        ContainerBasedEntity<?> buffer = grid.group;        buffer.setZIndex(Z_LAYER_GRID);        ContainerBasedEntity<?> tunnels = grid.groupTunnel;        tunnels.setZIndex(Z_LAYER_PAC + 1);        pellets = new HashMap<>();        cells = grid.cells;        gridModel.getCells().forEach(            (Coord coord, Cell cell) -> {                if (cell.hasPellet()) {                    Sprite pellet = gem.createSprite()                        .setBaseWidth((int) (cellSize * 0.3))                        .setBaseHeight((int) (cellSize * 0.3))                        .setAnchor(0.5)                        .setZIndex(Z_LAYER_PELLET)                        .setImage(\"Bonusx1\");                    setToGridCenterCoordinates(pellet, coord);                    pellets.put(coord, pellet);                    gameZone.add(pellet);                }                if (cell.hasCherry()) {                    Sprite cherry = gem.createSprite()                        .setBaseWidth((int) (cellSize * 0.6))                        .setBaseHeight((int) (cellSize * 0.6))                        .setAnchor(0.5)                        .setImage(\"Bonusx5\")                        .setZIndex(Z_LAYER_PELLET);                    setToGridCenterCoordinates(cherry, coord);                    pellets.put(coord, cherry);                    gameZone.add(cherry);                }            }        );        gameZone.add(buffer, tunnels);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "center", "params": ["Entity<?>", "double", "double", "int", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void center(Entity<?> entity, double entityWidth, double entityHeight, int containerWidth, int containerHeight) {        int x = (int) (containerWidth / 2 - (double) entityWidth / 2);        int y = (int) (containerHeight / 2 - (double) entityHeight / 2);        entity            .setX(x)            .setY(y);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initPacmen", "params": ["List<Pacman>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initPacmen(List<Pacman> pacmenModel) {        pacmen = new ArrayList<>(pacmenModel.size());        pacmenWrapClones = new HashMap<>(pacmenModel.size());        totalPacmen = pacmenPerPlayer * gameManager.getPlayerCount();        for (Pacman pacModel : pacmenModel) {            PacmanView pacman = createPacmanGroup(pacModel);            PacmanView clone = createClone(pacman, pacModel, true);            clone.group.setVisible(false);            // Pacs are face to face when the game starts            if (pacModel.getPosition().getX() * 2 < gridModel.getWidth()) {                pacman.rotationWrapper.setScaleX(-1, Curve.NONE);            }            setToGridCenterCoordinates(pacman.group, pacModel.getPosition());            gameZone.add(pacman.group);            pacmen.add(pacman);            toggleModule.displayOnToggleState(pacman.message, \"messageToggle\", true);            updateTooltipText(pacman);        }    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateTooltipText", "params": ["PacmanView"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void updateTooltipText(PacmanView pacman) {        tooltipModule.setTooltipText(            pacman.sprite,            getTooltipText(pacman.model)        );    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTooltipText", "params": ["Pacman"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String getTooltipText(Pacman pacModel) {        String color = pacModel.getOwner().getColor();        if (pacModel.getType() == PacmanType.NEUTRAL) {            return String.format(                \"id: %d (%s)\",                pacModel.getNumber(),                color            );        }        if (pacModel.getAbilityDuration() > 0) {            return String.format(                \"id: %d (%s)\\ntype: %s\\nspeed turns left: %d\",                pacModel.getNumber(),                color,                pacModel.getType().name().toUpperCase(),                pacModel.getAbilityDuration() - 1            );        }        return String.format(            \"id: %d (%s)\\ntype: %s\",            pacModel.getNumber(),            color,            pacModel.getType().name().toUpperCase()        );    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createPacmanGroup", "params": ["Pacman"], "throws": null, "modifiers": ["private"], "return_type": "PacmanView", "snippet": "    private PacmanView createPacmanGroup(Pacman pacModel) {        return createPacmanGroup(pacModel, true, false);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createPacmanGroup", "params": ["Pacman", "boolean", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "PacmanView", "snippet": "    private PacmanView createPacmanGroup(Pacman pacModel, boolean alive, boolean clone) {        PacmanView pacman = new PacmanView(pacModel);        pacman.sprite = gem.createSpriteAnimation()            .setDuration(gameManager.getFrameDuration())            .setLoop(true)            .setVisible(true)            .setPlaying(false)            .setAnchor(0.5)            .setMask(pacMask)            .setZIndex(Z_LAYER_PACMAN_SPRITE);        pacman.switchFX = gem.createSpriteAnimation()            .setImages(getFxImages(1, 20, \"transition\"))            .setVisible(false)            .setZIndex(Z_LAYER_PACMAN_SWITCH_FX)            .setAnchor(0.5)            .setBlendMode(BlendMode.ADD)            .setScale(0.5);        pacman.message = gem.createText()            .setFontSize(30)            .setFontFamily(\"Arial\")            .setAnchor(0.5)            .setFillColor(pacModel.getOwner().getColorToken())            .setMaxWidth(136)            .setStrokeThickness(4)            .setZIndex(Z_LAYER_PACMAN_MESSAGE)            .setVisible(true);        setToAbsoluteCenterWithOffset(pacman.message, pacModel.getPosition(), 0, Y_OFFSET_PACMAN_MESSAGE);        pacman.plasmaBallContainer = gem.createGroup()            .setAlpha(0)            .setZIndex(Z_LAYER_PACMAN_PLASMA);        events.addPlasmaBall(pacman.plasmaBallContainer.getId());        pacman.group = gem.createGroup(pacman.plasmaBallContainer, pacman.switchFX, pacman.sprite)            .setZIndex(Z_LAYER_PAC);        if (!clone) {            pacman.cooldownBarBackground = gem.createRectangle()                .setScale(0.5)                .setWidth(100)                .setHeight(15)                .setLineWidth(3)                .setFillColor(0x000000)                .setZIndex(Z_LAYER_COOLDOWNBAR_BACKGROUND)                .setVisible(false);            pacman.cooldownBar = gem.createRectangle()                .setScale(0.5)                .setWidth(100)                .setHeight(15)                .setLineColor(0x000000)                .setLineWidth(3)                .setFillColor(0x90c43b)                .setVisible(false)                .setZIndex(Z_LAYER_COOLDOWNBAR);            setToAbsoluteCenterWithOffset(pacman.cooldownBar, pacModel.getPosition(), X_OFFSET_PACMAN_COOLDOWN, Y_OFFSET_PACMAN_COOLDOWN);            setToAbsoluteCenterWithOffset(pacman.cooldownBarBackground, pacModel.getPosition(), X_OFFSET_PACMAN_COOLDOWN, Y_OFFSET_PACMAN_COOLDOWN);        }        Group baseScaleWrapper = wrapGroupAround(pacman.sprite).setScale(0.67);        pacman.rotationWrapper = wrapGroupAround(pacman.sprite);        if (!clone && pacModel.getType() != PacmanType.NEUTRAL) {            pacman.death = gem.createSpriteAnimation()                .setImages(PacmanView.getDeathPacmanImages(pacModel.getOwner().getIndex(), pacModel.getType()))                .setDuration(gameManager.getFrameDuration() / 2)                .setLoop(false)                .pause()                .setVisible(false)                .setAnchor(0.5)                .setMask(pacMask);            pacman.deathFX = gem.createSpriteAnimation()                .setImages(getFxImages(28, 39, \"mort_FX\"))                .setVisible(false)                .setLoop(false)                .pause()                .setZIndex(1)                .setAnchor(0.5)                .setBlendMode(BlendMode.ADD)                .setDuration(gameManager.getFrameDuration() / 2);            pacman.sprite.getParent().ifPresent(group -> group.add(pacman.death, pacman.deathFX));        }        Player owner = pacModel.getOwner();        pacman.setViewState(owner.getIndex(), pacModel.getType(), alive);        gem.commitEntityState(0, baseScaleWrapper);        return pacman;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "wrapGroupAround", "params": ["Entity<?>"], "throws": null, "modifiers": ["private"], "return_type": "Group", "snippet": "    private Group wrapGroupAround(Entity<?> entity) {        Group wrapper = gem.createGroup();        Optional<ContainerBasedEntity<?>> parent = entity.getParent();        parent.ifPresent(p -> {            p.remove(entity);        });        wrapper.add(entity);        parent.ifPresent(p -> {            p.add(wrapper);        });        return wrapper;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFxImages", "params": ["int", "int", "String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String[] getFxImages(int startNumber, int endNumber, String mask) {        List<String> fxImages = new ArrayList<String>();        for (int i = startNumber; i < endNumber + 1; i++) {            String formattedNumber = String.format(\"%04d\", i);            fxImages.add(mask + formattedNumber);        }        return fxImages.toArray(new String[0]);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setToGridCoordinates", "params": ["Entity<?>", "Coord"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void setToGridCoordinates(Entity<?> entity, Coord position) {        entity            .setX(position.getX() * cellSize)            .setY(position.getY() * cellSize);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setToGridCenterCoordinates", "params": ["Entity<?>", "Point2D"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setToGridCenterCoordinates(Entity<?> entity, Point2D.Double position) {        entity            .setX((int) (position.getX() * cellSize + cellSize / 2))            .setY((int) (position.getY() * cellSize + cellSize / 2));    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setToGridCenterCoordinates", "params": ["Entity<?>", "Coord"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setToGridCenterCoordinates(Entity<?> entity, Coord position) {        entity            .setX(position.getX() * cellSize + cellSize / 2)            .setY(position.getY() * cellSize + cellSize / 2);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "eatPellet", "params": ["Coord", "List<Pacman>", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void eatPellet(Coord coord, List<Pacman> list, int pelletValue) {        Entity<?> pellet = pellets.get(coord);        pellet.setVisible(false);        Map<String, Object> params = events.createAnimationEvent(\"splash\", 1).getParams();        double x = convertXFromGridToAbsoluteCenter(coord.getX());        double y = convertYFromGridToAbsoluteCenter(coord.getY());        params.put(\"x\", x);        params.put(\"y\", y);        params.put(\"v\", pelletValue);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "bumpPacman", "params": ["Pacman", "Coord", "Coord", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void bumpPacman(Pacman pacModel, Coord from, Coord to, int distanceToBlocker) {        bumpers.add(new Bump(pacModel, from, to, distanceToBlocker));    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "animateBump", "params": ["Pacman", "Coord", "Coord", "int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void animateBump(Pacman pacModel, Coord from, Coord to, int distanceToBlocker) {        PacmanView pac = pacmen.get(pacModel.getId());        double progress = distanceToBlocker / 4d;        double midTime = 0.5;        boolean alive = !isInPain(pacModel);        if (to.manhattanTo(from) > 1) {            Coord unitDiff = to.subtract(from).getUnitVector();            Coord exitingCoord = from.subtract(unitDiff);            Coord enteringCoord = to.add(unitDiff);            //Wrapping            Point2D.Double pacFrom = new Point2D.Double(from.getX(), from.getY());            Point2D.Double pacTo = getPartWay(from, exitingCoord, progress);            Point2D.Double cloneFrom = new Point2D.Double(enteringCoord.getX(), enteringCoord.getY());            Point2D.Double cloneTo = getPartWay(enteringCoord, to, progress);            PacmanView pacClone = summonClone(pac, pacModel, alive);            translatePacman(pac, pacFrom, pacTo, to, from, alive, 0, midTime, false);            translatePacman(pacClone, cloneFrom, cloneTo, to, from, alive, 0, midTime, false);            translatePacman(pac, pacTo, pacFrom, to, from, alive, midTime, 1, true);            translatePacman(pacClone, cloneTo, cloneFrom, to, from, alive, midTime, 1, true);            //XXX: this is duplicate code from animateMove            pacClone.group.setVisible(false);            if (!alive) {                animateDeath(pac, pacModel);            }        } else {            Point2D.Double fromPoint = new Point2D.Double(from.getX(), from.getY());            Point2D.Double partWay = getPartWay(from, to, progress);            translatePacman(pac, fromPoint, partWay, from, to, alive, 0, midTime, false);            translatePacman(pac, partWay, fromPoint, from, to, alive, midTime, 1, true);        }    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPartWay", "params": ["Coord", "Coord", "double"], "throws": null, "modifiers": ["private"], "return_type": "Point2D", "snippet": "    private Point2D.Double getPartWay(Coord from, Coord to, double progress) {        return new Point2D.Double(            from.getX() + (to.getX() - from.getX()) * progress,            from.getY() + (to.getY() - from.getY()) * progress        );    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "launchBumpFx", "params": ["Coord", "Coord", "Coord", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void launchBumpFx(Coord fromA, Coord fromB, Coord to, int distance) {        double mid = 0.5;        double x, y;        if (pointsLinedUpOnGrid(fromA, fromB)) {            //A o B            if (Math.abs(fromA.getX() - fromB.getX()) == grid.width - 1) {                // Both pacs are placed on a border                // Don't show the \"choc\" animation                return;            }            double meanX = ((fromA.getX() + fromB.getX()) / 2d);            double meanXWrap = ((fromA.getX() + fromB.getX() + grid.width) / 2d) % grid.width;            double meanY = ((fromA.getY() + fromB.getY()) / 2d);            boolean wrap = Math.abs(fromA.getX() - fromB.getX()) > grid.width / 2d;            x = convertXFromGridToAbsoluteCenter(wrap ? meanXWrap : meanX);            y = convertYFromGridToAbsoluteCenter(meanY);        } else {            //A o            //  B            x = convertXFromGridToAbsoluteCenter(to.getX());            y = convertYFromGridToAbsoluteCenter(to.getY());        }        double angle = Math.atan2(fromB.getY() - fromA.getY(), fromB.getX() - fromA.getX());        ViewerEvent event = events.createAnimationEvent(\"play\", mid);        event.getParams().put(\"x\", x);        event.getParams().put(\"y\", y);        event.getParams().put(\"name\", \"choc\");        event.getParams().put(\"a\", angle); //TODO: convert to one of four possible states to save on serialized characters    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "convertXFromGridToAbsoluteCenter", "params": ["double"], "throws": null, "modifiers": ["private"], "return_type": "double", "snippet": "    private double convertXFromGridToAbsoluteCenter(double x) {        return (x + 0.5) * (gameZone.getScaleX() * cellSize) + gameZone.getX();    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "convertYFromGridToAbsoluteCenter", "params": ["double"], "throws": null, "modifiers": ["private"], "return_type": "double", "snippet": "    private double convertYFromGridToAbsoluteCenter(double y) {        return (y + 0.5) * (gameZone.getScaleY() * cellSize) + gameZone.getY();    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setToAbsoluteCenterWithOffset", "params": ["Entity<?>", "Coord", "double", "double"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setToAbsoluteCenterWithOffset(Entity<?> entity, Coord coord, double offsetX, double offsetY) {        entity.setX((int) ((coord.getX() + offsetX + 0.5) * (gameZone.getScaleX() * cellSize) + gameZone.getX()));        entity.setY((int) ((coord.getY() + offsetY + 0.5) * (gameZone.getScaleY() * cellSize) + gameZone.getY()));    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setToAbsoluteCenterWithOffset", "params": ["Entity<?>", "Point2D", "double", "double"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setToAbsoluteCenterWithOffset(Entity<?> entity, Point2D.Double position, double offsetX, double offsetY) {        entity.setX((int) ((position.x + offsetX + 0.5) * (gameZone.getScaleX() * cellSize) + gameZone.getX()));        entity.setY((int) ((position.y + offsetY + 0.5) * (gameZone.getScaleY() * cellSize) + gameZone.getY()));    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pointsLinedUpOnGrid", "params": ["Coord", "Coord"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean pointsLinedUpOnGrid(Coord from, Coord to) {        return from.getX() == to.getX() || from.getY() == to.getY();    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "flashPacman", "params": ["Pacman", "double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void flashPacman(Pacman pacModel, double time) {        flashers.add(new Flash(pacModel, time));    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "launchFlashFx", "params": ["Pacman", "double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void launchFlashFx(Pacman pacModel, double time) {        PacmanView pac = pacmen.get(pacModel.getId());        ViewerEvent event = events.createAnimationEvent(\"flash\", time);        event.getParams().put(\"id\", pac.sprite.getId());        int cloneId = pacmenWrapClones.get(pac).sprite.getId();        ViewerEvent cloneEvent = events.createAnimationEvent(\"flash\", time);        cloneEvent.getParams().put(\"id\", cloneId);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "launchSpeedBoostFx", "params": ["Pacman", "Point2D", "Point2D", "double", "double", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void launchSpeedBoostFx(Pacman pacModel, Point2D.Double from, Point2D.Double to, double startTime, double endTime, boolean flip) {        PacmanView pac = pacmen.get(pacModel.getId());        int indexColor = pacModel.getOwner().getIndex();        ViewerEvent event = events.createAnimationEvent(\"speed\", startTime);        double fromX = (from.getX() * cellSize + cellSize / 2);        double fromY = (from.getY() * cellSize + cellSize / 2);        double toX = (to.getX() * cellSize + cellSize / 2);        double toY = (to.getY() * cellSize + cellSize / 2);        event.getParams().put(\"color\", indexColor);        event.getParams().put(\"id\", pac.sprite.getId());        event.getParams().put(\"toX\", toX);        event.getParams().put(\"toY\", toY);        event.getParams().put(\"fromX\", fromX);        event.getParams().put(\"fromY\", fromY);        event.getParams().put(\"walkEnd\", endTime);        event.getParams().put(\"walkFlip\", flip ? 1 : 0);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "movePacman", "params": ["Pacman", "Coord", "Coord"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void movePacman(Pacman pacModel, Coord from, Coord to) {        movers.add(new Move(pacModel, from, to));    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "performMoves", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void performMoves() {        movers.stream()            .forEach((move) -> animateMove(move.pacModel, move.from, move.to));    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "performBumps", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void performBumps() {        bumpers.stream()            .forEach((bump) -> animateBump(bump.pacModel, bump.from, bump.to, bump.distanceToBlocker));    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "performFlashes", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void performFlashes() {        flashers.stream()            .sorted(Comparator.comparingDouble(flash -> flash.time))            .forEach((flash) -> launchFlashFx(flash.pacModel, flash.time));    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "translatePacman", "params": ["PacmanView", "Coord", "Coord", "Coord", "Coord", "boolean", "double", "double"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void translatePacman(        PacmanView pacman, Coord from, Coord to, Coord rotateFrom, Coord rotateTo, boolean alive, double startTime, double endTime    ) {        translatePacman(            pacman,            new Point2D.Double(from.getX(), from.getY()),            new Point2D.Double(to.getX(), to.getY()),            rotateFrom, rotateTo, alive, startTime,            endTime, false        );    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "translatePacman", "params": ["PacmanView", "Point2D", "Point2D", "Coord", "Coord", "boolean", "double", "double", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void translatePacman(        PacmanView pacman, Point2D.Double from, Point2D.Double to, Coord rotateFrom,        Coord rotateTo, boolean alive, double startTime, double endTime, boolean flip    ) {        rotatePacman(pacman, rotateFrom, rotateTo, startTime);        pacman.sprite.play();        setToAbsoluteCenterWithOffset(pacman.message, from, 0, Y_OFFSET_PACMAN_MESSAGE);        setToGridCenterCoordinates(pacman.group, from);        if (pacman.cooldownBar != null) {            setToAbsoluteCenterWithOffset(pacman.cooldownBar, from, X_OFFSET_PACMAN_COOLDOWN, Y_OFFSET_PACMAN_COOLDOWN);            setToAbsoluteCenterWithOffset(pacman.cooldownBarBackground, from, X_OFFSET_PACMAN_COOLDOWN, Y_OFFSET_PACMAN_COOLDOWN);            gem.commitEntityState(startTime, pacman.cooldownBar, pacman.cooldownBarBackground);        }        gem.commitEntityState(startTime, pacman.group, pacman.sprite, pacman.rotationWrapper, pacman.message);        setToAbsoluteCenterWithOffset(pacman.message, to, 0, Y_OFFSET_PACMAN_MESSAGE);        setToGridCenterCoordinates(pacman.group, to);        if (pacman.cooldownBar != null) {            setToAbsoluteCenterWithOffset(pacman.cooldownBar, to, X_OFFSET_PACMAN_COOLDOWN, Y_OFFSET_PACMAN_COOLDOWN);            setToAbsoluteCenterWithOffset(pacman.cooldownBarBackground, to, X_OFFSET_PACMAN_COOLDOWN, Y_OFFSET_PACMAN_COOLDOWN);        }        if (pacman.model.isSpeeding()) {            launchSpeedBoostFx(pacman.model, from, to, startTime, endTime, flip);        }    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "animateMove", "params": ["Pacman", "Coord", "Coord"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void animateMove(Pacman pacModel, Coord from, Coord to) {        PacmanView pac = pacmen.get(pacModel.getId());        boolean alive = !isInPain(pacModel);        pac.setViewState(pacModel.getOwner().getIndex(), pacModel.getType(), alive);        pac.sprite.play();        gem.commitEntityState(0, pac.sprite);        if (from.manhattanTo(to) > 1) {            // pacman wraps            Coord unitDiff = to.subtract(from).getUnitVector();            Coord exitingCoord = from.subtract(unitDiff);            Coord enteringCoord = to.add(unitDiff);            PacmanView pacClone = summonClone(pac, pacModel, alive);            // Original pac            translatePacman(pac, enteringCoord, to, to, from, alive, 0, 1);            // Clone pac            translatePacman(pacClone, from, exitingCoord, to, from, alive, 0, 1);            pacClone.group.setVisible(false);            if (!alive) {                animateDeath(pac, pacModel);            }        } else {            translatePacman(pac, from, to, from, to, alive, 0, 1);            if (!alive) {                // Die after final movement                animateDeath(pac, pacModel);            }        }    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "summonClone", "params": ["PacmanView", "Pacman", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "PacmanView", "snippet": "    private PacmanView summonClone(PacmanView pac, Pacman pacModel, boolean alive) {        PacmanView pacClone = pacmenWrapClones.get(pac);        pacClone.setViewState(pacModel.getOwner().getIndex(), pacModel.getType(), alive);        pacClone.group.setVisible(true);        pacClone.sprite.setDuration(pac.sprite.getDuration());        return pacClone;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createClone", "params": ["PacmanView", "Pacman", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "PacmanView", "snippet": "    private PacmanView createClone(PacmanView pac, Pacman pacModel, boolean alive) {        boolean isClone = true;        PacmanView pacClone = createPacmanGroup(pacModel, alive, isClone);        pacmenWrapClones.put(pac, pacClone);        gameZone.add(pacClone.group);        gem.commitEntityState(0, gameZone);        pacClone.sprite.setDuration(pac.sprite.getDuration());        return pacClone;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "rotatePacman", "params": ["PacmanView", "Coord", "Coord", "double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void rotatePacman(PacmanView pac, Coord from, Coord to, double t) {        if (from.getY() > to.getY()) {            pac.rotationWrapper.setRotation(Math.PI / 2 * pac.rotationWrapper.getScaleX(), Curve.NONE);        } else if (from.getY() < to.getY()) {            pac.rotationWrapper.setRotation(-Math.PI / 2 * pac.rotationWrapper.getScaleX(), Curve.NONE);        } else if (from.getX() > to.getX()) {            pac.rotationWrapper.setRotation(0, Curve.NONE);            pac.rotationWrapper.setScaleX(1, Curve.NONE);        } else if (from.getX() < to.getX()) {            pac.rotationWrapper.setRotation(0, Curve.NONE);            pac.rotationWrapper.setScaleX(-1, Curve.NONE);        }        gem.commitEntityState(t, pac.rotationWrapper);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "killPacman", "params": ["Pacman"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void killPacman(Pacman pacModel) {        goners.add(pacModel);        PacmanView pacman = pacmen.get(pacModel.getId());        PacmanView clone = summonClone(pacman, pacModel, false);        clone.group.setVisible(false);        sendShake(pacman, 0, 1);        sendShake(clone, 0, 1);        cooldownLaunchers.remove(pacModel);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "changePacmanType", "params": ["Pacman", "PacmanType"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void changePacmanType(Pacman pacModel, PacmanType originalType) {        switchers.put(pacModel, originalType);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "performSwitches", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void performSwitches() {        // Switchers can also be dying during the switch        for (Entry<Pacman, PacmanType> switcher : switchers.entrySet()) {            Pacman pacmanModel = switcher.getKey();            PacmanType originalType = switcher.getValue();            PacmanView pacman = pacmen.get(pacmanModel.getId());            animateSwitch(pacman, originalType, pacmanModel, !isInPain(pacmanModel));            updateTooltipText(pacman);        }    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sendShake", "params": ["PacmanView", "double", "double"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void sendShake(PacmanView pacman, double startTime, double endTime) {        Map<String, Object> params = events.createAnimationEvent(\"shake\", startTime).getParams();        params.put(\"id\", pacman.group.getId());        params.put(\"length\", endTime - startTime);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "animatePain", "params": ["Pacman", "double", "double"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void animatePain(Pacman pacmanModel, double start, double end) {        PacmanView pacman = pacmen.get(pacmanModel.getId());        pacman.setViewState(pacmanModel.getOwner().getIndex(), pacmanModel.getType(), false);        gem.commitEntityState(start, pacman.sprite);        animateDeath(pacman, pacmanModel);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "animatePain", "params": ["Pacman"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void animatePain(Pacman pacmanModel) {        animatePain(pacmanModel, 0, 1);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "animateDeath", "params": ["PacmanView", "Pacman"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void animateDeath(PacmanView pacman, Pacman pacmanModel) {        pacman.sprite.setVisible(false);        pacman.death.setVisible(true);        pacman.death.play();        pacman.plasmaBallContainer.setVisible(false);        dying.add(pacman);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isInPain", "params": ["Pacman"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isInPain(Pacman pacman) {        return goners.contains(pacman);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "animateSwitch", "params": ["PacmanView", "PacmanType", "Pacman", "boolean"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void animateSwitch(PacmanView pacman, PacmanType originalType, Pacman pacModel, boolean alive) {        double switchFXStart = 7 / 35d;        double switchFXDuration = 20 / 35d;        pacman.setViewState(pacModel.getOwner().getIndex(), originalType, alive);        gem.commitEntityState(0, pacman.sprite);        pacman.setViewState(pacModel.getOwner().getIndex(), pacModel.getType(), alive);        pacman.switchFX            .reset()            .setDuration((int) (gameManager.getFrameDuration() * switchFXDuration))            .setVisible(true)            .play();        gem.commitEntityState(switchFXStart, pacman.switchFX);        pacman.switchFX.setVisible(false);        gem.commitEntityState(switchFXStart + switchFXDuration, pacman.switchFX);        bouncePacman(pacman);        if (!alive) {            animateDeath(pacman, pacModel);        }    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "bouncePacman", "params": ["PacmanView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void bouncePacman(PacmanView pacman) {        double growthEnd = 9 / 35d;        double shrinkStart = 26 / 35d;        double shrinkEnd = 31 / 35d;        double reboundEnd = 33 / 35d;        double settleEnd = 35 / 35d;        pacman.sprite.setScale(1.3);        gem.commitEntityState(growthEnd, pacman.sprite);        gem.commitEntityState(shrinkStart, pacman.sprite);        pacman.sprite.setScale(0.9);        gem.commitEntityState(shrinkEnd, pacman.sprite);        pacman.sprite.setScale(1.35);        gem.commitEntityState(reboundEnd, pacman.sprite);        pacman.sprite.setScale(1);        gem.commitEntityState(settleEnd, pacman.sprite);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addCooldownAnimation", "params": ["Pacman"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addCooldownAnimation(Pacman pac) {        cooldownLaunchers.add(pac);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "performCooldownAnimation", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void performCooldownAnimation() {        int totalCooldown = Config.ABILITY_COOLDOWN - 1;        List<Pacman> cooldownToRemove = new ArrayList<>();        for (Pacman pacmanModel : cooldownLaunchers) {            int currentCooldown = pacmanModel.getAbilityCooldown() - 1;            PacmanView pacman = pacmen.get(pacmanModel.getId());            int width = pacman.cooldownBarBackground.getWidth();            if (currentCooldown <= 0) {                pacman.cooldownBar.setVisible(false);                pacman.cooldownBarBackground.setVisible(false);                cooldownToRemove.add(pacmanModel);            } else {                pacman.cooldownBar.setVisible(true);                pacman.cooldownBarBackground.setVisible(true);            }            pacman.cooldownBar.setWidth((int) (((double) (totalCooldown - currentCooldown) / totalCooldown) * width));        }        cooldownLaunchers.removeAll(cooldownToRemove);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPacMessage", "params": ["Pacman"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPacMessage(Pacman pacModel) {        PacmanView pac = pacmen.get(pacModel.getId());        if (pacModel.getMessage() != null) {            pac.message.setText(pacModel.getMessage());            pac.message.setVisible(true);        } else {            pac.message.setVisible(false);        }        gem.commitEntityState(0, pac.message);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateScores", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateScores() {        for (Player p : gameManager.getPlayers()) {            BitmapText scoreLabel = scoreLabels.get(p.getIndex());            scoreLabel.setText(String.valueOf(p.pellets));        }    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "scaleStackedPacmen", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void scaleStackedPacmen() {        Map<Coord, List<Pacman>> pacByPosition = new HashMap<>();        gameManager.getPlayers().stream()            .flatMap(player -> player.getAlivePacmen())            .forEach(pacModel -> {                pacByPosition.computeIfAbsent(pacModel.getPosition(), key -> new ArrayList<>(totalPacmen));                pacByPosition.get(pacModel.getPosition()).add(pacModel);            });        for (PacmanView pacman : pacmen) {            pacman.group                .setScaleX(1)                .setScaleY(1)                .setZIndex(Z_LAYER_PAC);        }        pacByPosition.values().stream()            .forEach(list -> {                int idx = 0;                for (Pacman pacModel : list) {                    PacmanView pac = pacmen.get(pacModel.getId());                    double shrink = 1 - (idx * 0.1);                    pac.group                        .setZIndex(Z_LAYER_PAC + idx)                        .setScaleX(shrink)                        .setScaleY(shrink);                    idx++;                }            });    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "endOfTurn", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void endOfTurn() {        performMoves();        performBumps();        performSwitches();        performCooldownAnimation();        performFlashes();        // Goners that are not switchers animate differently        goners.stream()            .filter(e -> !switchers.containsKey(e))            .filter(e -> !isAMover(e))            .forEach(goner -> {                animatePain(goner);            });        pacmen.stream()            .filter(pac -> pac.model.isSpeeding() || pac.model.isEndOfSpeed())            .forEach(pac -> updateTooltipText(pac));        ;        scaleStackedPacmen();    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isAMover", "params": ["Pacman"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isAMover(Pacman e) {        return movers.stream().anyMatch(m -> m.pacModel == e);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllPellets", "params": ["Player"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void getAllPellets(Player player) {        List<Pacman> alivePacmen = player.getAlivePacmen().collect(Collectors.toList());        if (!alivePacmen.isEmpty()) {            double maxDistance = new Coord(0, 0).euclideanTo(gridModel.getWidth(), gridModel.getHeight());            pellets.forEach(                (pos, pellet) -> {                    if (pellet.isVisible()) {                        Coord destination = alivePacmen.get(                            random.nextInt(                                alivePacmen.size()                            )                        ).getPosition();                        double dist = pos.euclideanTo(destination);                        setToGridCenterCoordinates(pellet, destination);                        double t = Math.max(0, Math.min(1, dist / maxDistance));                        gem.commitEntityState(t, pellet);                    }                }            );        }    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "startOfTurn", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void startOfTurn() {        switchers.clear();        goners.clear();        movers.clear();        bumpers.clear();        flashers.clear();        for (PacmanView pacman : dying) {            //Place dying pac below other pacs            pacman.group.setZIndex(Z_LAYER_PAC - 1);            gem.commitEntityState(0, pacman.group);            pacman.message.setVisible(false);            pacman.cooldownBar.setVisible(false);            pacman.cooldownBarBackground.setVisible(false);            pacman.death.setVisible(false);            // Program the end of the dying animation            pacman.deathFX                .setVisible(true)                .play();            gem.commitEntityState(0.5, pacman.deathFX, pacman.death, pacman.message, pacman.cooldownBar, pacman.cooldownBarBackground);            pacman.deathFX.setVisible(false);        }        dying.clear();        for (PacmanView pacman : pacmen) {            // By default, pacmen are still            pacman.sprite.pause();            gem.commitEntityState(0, pacman.sprite);        }    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "chargeSpeed", "params": ["Pacman"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void chargeSpeed(Pacman pacModel) {        PacmanView pacman = pacmen.get(pacModel.getId());        ViewerEvent event = events.createAnimationEvent(\"play\", 0);        double x = convertXFromGridToAbsoluteCenter(pacModel.getPosition().getX());        double y = convertYFromGridToAbsoluteCenter(pacModel.getPosition().getY());        event.params.put(\"x\", x);        event.params.put(\"y\", y);        event.params.put(\"name\", \"charge\");        sendShake(pacman, 0, 1);        PacmanView clone = pacmenWrapClones.get(pacman);        pacman.plasmaBallContainer.setAlpha(1);        clone.plasmaBallContainer.setAlpha(1);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createTunnelMask", "params": ["Coord", "int", "int", "double"], "throws": null, "modifiers": ["public"], "return_type": "Sprite", "snippet": "    public Sprite createTunnelMask(Coord coord, int cellSize, int padding, double cornerSize) {        Sprite mask = gem.createSprite()            .setAnchorX(0.5)            .setBaseWidth(cellSize - padding)            .setBaseHeight((int) (cellSize + 2 * cornerSize - padding));        mask.setImage(\"tunnel_masque\");        if (coord.getX() == (grid.width - 1)) {            mask.setScaleX(-1);        } else if (coord.getX() == 0) {            mask.setScaleX(1);        }        return mask;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "endSpeed", "params": ["Pacman"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void endSpeed(Pacman pacModel) {        PacmanView pacman = pacmen.get(pacModel.getId());        PacmanView clone = pacmenWrapClones.get(pacman);        pacman.plasmaBallContainer.setAlpha(0);        clone.plasmaBallContainer.setAlpha(0);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/view/View.java", "stars": "15", "class": {"name": "View", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initWithNiwsConfig", "params": ["IClientConfig"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initWithNiwsConfig(IClientConfig iClientConfig) {    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/route/MachineLoadRule.java", "stars": "23", "class": {"name": "MachineLoadRule", "extends": "AbstractLoadBalancerRule", "implements": null, "modifiers": ["public"]}}, {"method_name": "choose", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "Server", "snippet": "    public Server choose(Object key) {        return choose(getLoadBalancer(), key);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/route/MachineLoadRule.java", "stars": "23", "class": {"name": "MachineLoadRule", "extends": "AbstractLoadBalancerRule", "implements": null, "modifiers": ["public"]}}, {"method_name": "choose", "params": ["ILoadBalancer", "Object"], "throws": null, "modifiers": ["private"], "return_type": "Server", "snippet": "    private Server choose(ILoadBalancer lb, Object key){        Server server = null;        if(null != lb){            while(null == server && !Thread.interrupted()){                List<Server> upList = lb.getReachableServers();                List<Server> allList = lb.getAllServers();                if(allList.size() == 0){                    return null;                }                List<String> hostPorts = new ArrayList<>();                upList.forEach(s -> {                    if(s.isAlive()) {                        hostPorts.add(s.getHostPort());                    }                });                logger.trace(\"UpList:\"+ Json.toJson(upList, String.class));                List<ExecutorNode> candidates = new ArrayList<>();                if(null != key){                    String keyStr = String.valueOf(key);                    if(keyStr.startsWith(FeignConstants.LB_LABEL_PREFIX_JOB)) {                        String jobIdStr = keyStr.substring(FeignConstants.LB_LABEL_PREFIX_JOB.length());                        if(StringUtils.isNotBlank(jobIdStr)){                            long jobId = Long.valueOf(jobIdStr);                            candidates = jobExecNodeDao.getAvailsByJobId(jobId, machineLoadConf.getHeartBeatAvailInterval());                        }                    }else if(keyStr.startsWith(FeignConstants.LB_LABEL_PREFIX_USER)){                        String userName = keyStr.substring(FeignConstants.LB_LABEL_PREFIX_USER.length());                        if(StringUtils.isNotBlank(userName)){                            candidates = userExecNodeDao.getAvailNodesByUser(userName, machineLoadConf.getHeartBeatAvailInterval());                        }                    }else if(keyStr.startsWith(FeignConstants.LB_LABEL_PREFIX_TAB)){                        //do nothing                    }                }else {                    candidates = nodeDao.getAvails(machineLoadConf.getHeartBeatAvailInterval());                }                //retain all in hostPorts list                candidates.retainAll(hostPorts);                logger.info(\"Candidate nodes:\" + Json.toJson(candidates, null));                if(candidates.isEmpty()){                    throw new NoAvailableServerException(\"No available candidate servers\");                }                int cpuW = machineLoadConf.getCpuWeight();                int memW = machineLoadConf.getMemWeight();                double sum = (double)cpuW + (double)memW;                AtomicDouble count = new AtomicDouble();                final List<Double> nodeWeight = new ArrayList<>();                Iterator<ExecutorNode> iterator = candidates.iterator();                while(iterator.hasNext()){                    ExecutorNode e = iterator.next();                    if (e.getCpuRate() >= machineLoadConf.getCpuThreshold() ||                            e.getMemRate() >= machineLoadConf.getMemThreshold()) {                        iterator.remove();                        continue;                    }                    double v =((1.0 - e.getCpuRate()) * cpuW + (1.0 - e.getMemRate()) * memW) /sum;                    count.addAndGet(v);                    nodeWeight.add(v);                }                if(candidates.size() <= 0){                    throw new NoAvailableServerException(\"No available candidate servers\");                }                double v = random.nextDouble() * count.get();                int select = 0;                double pos = 0.0;                for(;select < nodeWeight.size(); select++){                    pos += nodeWeight.get(select);                    if(pos >= v){                        break;                    }                }                select = hostPorts.indexOf(candidates.get(select).getAddress());                if(select >= 0){                    server = upList.get(select);                }            }        }        logger.info(\"Finally choose server:[\" + server+\"]\");        return server;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/route/MachineLoadRule.java", "stars": "23", "class": {"name": "MachineLoadRule", "extends": "AbstractLoadBalancerRule", "implements": null, "modifiers": ["public"]}}, {"method_name": "setNodeDao", "params": ["ExecNodeDao"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void setNodeDao(ExecNodeDao nodeDao){        this.nodeDao = nodeDao;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/route/MachineLoadRule.java", "stars": "23", "class": {"name": "MachineLoadRule", "extends": "AbstractLoadBalancerRule", "implements": null, "modifiers": ["public"]}}, {"method_name": "setJobExecNodeDao", "params": ["JobExecNodeDao"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void setJobExecNodeDao(JobExecNodeDao jobExecNodeDao){        this.jobExecNodeDao = jobExecNodeDao;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/route/MachineLoadRule.java", "stars": "23", "class": {"name": "MachineLoadRule", "extends": "AbstractLoadBalancerRule", "implements": null, "modifiers": ["public"]}}, {"method_name": "setMachineLoadConf", "params": ["MachineLoadConf"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void setMachineLoadConf(MachineLoadConf conf){        this.machineLoadConf = conf;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/route/MachineLoadRule.java", "stars": "23", "class": {"name": "MachineLoadRule", "extends": "AbstractLoadBalancerRule", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUserExecNodeDao", "params": ["UserExecNodeDao"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUserExecNodeDao(UserExecNodeDao userExecNodeDao) {        this.userExecNodeDao = userExecNodeDao;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/route/MachineLoadRule.java", "stars": "23", "class": {"name": "MachineLoadRule", "extends": "AbstractLoadBalancerRule", "implements": null, "modifiers": ["public"]}}, {"method_name": "getRegistryList", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> getRegistryList() {        if (addressList!=null && addressList.trim().length()>0) {            registryList = new ArrayList<String>(Arrays.asList(addressList.split(\",\")));        }        return registryList;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/core/model/XxlJobGroup.java", "stars": "1", "class": {"name": "XxlJobGroup", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "load", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void load() {        super.load();        initialize();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/command/CommandManager.java", "stars": "12", "class": {"name": "CommandManager", "extends": "HashMapManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "initialize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initialize() {        register(new ToggleCommand(), new BindCommand(), new ModulesCommand(), new FriendCommand()                , new HClipCommand(), new HelpCommand(), new MobOwnerCommand());    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/command/CommandManager.java", "stars": "12", "class": {"name": "CommandManager", "extends": "HashMapManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "getAliasMap", "params": [], "throws": null, "modifiers": ["public"], "return_type": "HashMap<String,Command>", "snippet": "    public HashMap<String, Command> getAliasMap() {        return this.aliasMap;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/command/CommandManager.java", "stars": "12", "class": {"name": "CommandManager", "extends": "HashMapManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "register", "params": ["Command"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void register(Command... commands) {        for (Command command : commands) {            include(command.getLabel().toLowerCase(), command);            if (command.getAlias().length > 0) {                for (String com : command.getAlias()) {                    aliasMap.put(com.toLowerCase(), command);                }            }        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/command/CommandManager.java", "stars": "12", "class": {"name": "CommandManager", "extends": "HashMapManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "dispatch", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void dispatch(final String s) {        final String[] command = s.split(\" \");        if (command.length > 1) {            Module m = Mercury.INSTANCE.getModuleManager().find(command[0]);            if (m != null) {                if (command[1].equals(\"help\")) {                    try {                        ChatUtil.print(m.getLabel() + \"'s available properties (\" + Mercury.INSTANCE.getPropertyManager().getPropertiesFromObject(m).size() + \") are:\");                        Mercury.INSTANCE.getPropertyManager().getPropertiesFromObject(m).forEach(prop -> ChatUtil.print(prop.getLabel() + \": \" + prop.getValue()));                    } catch (NullPointerException ex) {                        ChatUtil.print(\"This module has no properties.\");                    }                    ChatUtil.print(m.getLabel() + \" is bound to \" + Keyboard.getKeyName(m.getBind()) + \".\");                    if (!m.getDescription().equals(\"\"))                        ChatUtil.print(\"Desc: \" + m.getDescription());                    return;                }                if (command.length >= 2) {                    Mercury.INSTANCE.getPropertyManager().getPropertiesFromObject(m).stream()                            .filter(property -> command[1].equalsIgnoreCase(property.getLabel()))                            .forEach(property -> {                                if (property instanceof BooleanProperty) {                                    BooleanProperty booleanProperty = (BooleanProperty) property;                                    booleanProperty.setValue(!booleanProperty.getValue());                                    ChatUtil.print(booleanProperty.getLabel() + \" has been \" + (booleanProperty.getValue() ? \"\\247aenabled\\2477\" : \"\\247cdisabled\\2477\") + \" for \" + m.getLabel() + \".\");                                } else if (property instanceof ModeStringProperty) {                                    ModeStringProperty modeProperty = (ModeStringProperty) property;                                    if (command.length >= 3) {                                        modeProperty.setValue(command[2]);                                        ChatUtil.print(modeProperty.getLabel() + \" has been set to \" + modeProperty.getValue() + \" for \" + ChatFormatting.AQUA + m.getLabel() + ChatFormatting.WHITE + \".\");                                    } else if (command.length >= 2) {                                        ChatUtil.print(m.getLabel() + \"'s available \" + modeProperty.getLabel() + \"s are:\");                                        Arrays.stream(modeProperty.getModes()).forEach(prop -> ChatUtil.print(modeProperty.getValue().toLowerCase().equals(prop.toLowerCase()) ? ChatFormatting.GRAY + prop : prop));                                    }                                } else if (property instanceof NumberProperty) {                                    NumberProperty numberProperty = (NumberProperty) property;                                    if (command.length >= 3) {                                        try {                                            numberProperty.setValue(command[2]);                                            ChatUtil.print(numberProperty.getLabel() + \" has been set to \" + numberProperty.getValue() + \" for \" + ChatFormatting.AQUA + m.getLabel() + ChatFormatting.WHITE + \".\");                                        } catch (NumberFormatException ex) {                                            ChatUtil.print(command[2] + \" is not a number.\");                                        }                                    } else {                                        ChatUtil.print(\"Not enough arguments to change property.\");                                    }                                } else if (property instanceof StringProperty) {                                    StringProperty stringProperty = (StringProperty) property;                                    if (command.length >= 3) {                                        stringProperty.setValue(s.substring((m.getLabel().length() + stringProperty.getLabel().length() + 2)));                                        ChatUtil.print(stringProperty.getLabel() + \" has been set to \"+ ChatFormatting.GRAY + stringProperty.getValue() + ChatFormatting.WHITE + \" for \" + ChatFormatting.AQUA + m.getLabel() + ChatFormatting.WHITE + \".\");                                    } else {                                        ChatUtil.print(\"Not enough arguments to change property.\");                                    }                                } /*else {                                    if (command.length >= 3) {                                        property.setValue(command[2]);                                        ChatUtil.print(property.getLabel() + \" has been set to \" + property.getValue() + \" for \" + m.getLabel() + \".\");                                    } else {                                        ChatUtil.print(\"Not enough arguments to change property.\");                                    }                                }*/                            });                } else {                    ChatUtil.print(\"Property not found! Do .\" + command[0] + \" help for list of properties.\");                }            }        }        Command c = getRegistry().get(command[0]);        if (c != null) {            c.onRun(command);        }        Command cc = getAliasMap().get(command[0]);        if (cc != null) {            cc.onRun(command);        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/api/command/CommandManager.java", "stars": "12", "class": {"name": "CommandManager", "extends": "HashMapManager", "implements": null, "modifiers": ["public"]}}, {"method_name": "submit", "params": ["String", "String", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String submit(String[] fields, String schoolTaskWid, String address) {\t\tString formFields = getFields(fields);\t\tString param = new Form(fields[3], address, fields[2], schoolTaskWid, formFields).toString();\t\tString result = HttpUtil.sendPost(Data.submitForm, param, Data.getSubHeaders());\t\treturn JSONObject.fromObject(result).get(\"message\").toString();\t}", "url": "https://raw.githubusercontent.com/meethigher/cpdaily-submit/master/CpDaily.java", "stars": "2", "class": {"name": "CpDaily", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getForm", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String[] getForm() {\t\tString todayData = HttpUtil.sendPost(Data.queryCollector, \"{\\\"pageSize\\\": 6,\\\"pageNumber\\\": 1}\",\t\t\t\tData.getSubHeaders());\t\tJSONArray todayForm = null;\t\ttry {\t\t\ttodayForm = JSONObject.fromObject(todayData).getJSONObject(\"datas\").getJSONArray(\"rows\");\t\t} catch (Exception e) {\t\t\tSystem.out.println(\"\u83b7\u53d6\u8868\u5355\u4fe1\u606f\u5931\u8d25\uff0c\u7a0b\u5e8f\u7ec8\u6b62\u3002\u8bf7\u68c0\u67e5\u767b\u5f55\u662f\u5426\u5931\u6548\");\t\t\tSystem.exit(0);\t\t}\t\tString flag;// flag\u7528\u6765\u5224\u65ad\u672c\u6b21\u67e5\u8be2\u662f\u5426\u6709\u6570\u636e\t\tString isHandled = \"\", collectWid = \"\", formWid = \"\";\t\tif (todayForm.size() < 1) {// \u6ca1\u6709\u6570\u636e\t\t\tflag = \"no\";\t\t} else {// \u6709\u6570\u636e\t\t\tflag = \"yes\";\t\t\tisHandled = todayForm.getJSONObject(0).getString(\"isHandled\");\t\t\tcollectWid = todayForm.getJSONObject(0).getString(\"wid\");\t\t\tformWid = todayForm.getJSONObject(0).getString(\"formWid\");\t\t}\t\tString[] fields = { flag, isHandled, collectWid, formWid };\t\treturn fields;\t}", "url": "https://raw.githubusercontent.com/meethigher/cpdaily-submit/master/CpDaily.java", "stars": "2", "class": {"name": "CpDaily", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSchool", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String getSchool(String[] fields) {\t\tString param = \"{\\\"collectorWid\\\":\\\"\" + fields[2] + \"\\\"}\";\t\tString todayData = HttpUtil.sendPost(Data.detailCollector, param, Data.getSubHeaders());\t\tString todaySchool = null;\t\ttry {\t\t\ttodaySchool = JSONObject.fromObject(todayData).getJSONObject(\"datas\").getJSONObject(\"collector\")\t\t\t\t\t.get(\"schoolTaskWid\").toString();\t\t} catch (Exception e) {\t\t\tSystem.out.println(\"\u83b7\u53d6\u5b66\u6821\u4fe1\u606f\u5931\u8d25\uff0c\u7a0b\u5e8f\u7ec8\u6b62\u3002\u8bf7\u68c0\u67e5\u767b\u5f55\u662f\u5426\u5931\u6548\");\t\t\tSystem.exit(0);\t\t}\t\treturn todaySchool;\t}", "url": "https://raw.githubusercontent.com/meethigher/cpdaily-submit/master/CpDaily.java", "stars": "2", "class": {"name": "CpDaily", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFields", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String getFields(String[] fields) {\t\tString param = \"{\\\"pageSize\\\": 30, \\\"pageNumber\\\": 1, \\\"formWid\\\": \" + fields[3] + \", \\\"collectorWid\\\": \"\t\t\t\t+ fields[2] + \"}\";\t\tString todayData = HttpUtil.sendPost(Data.formFields, param, Data.getHeaders());\t\tJSONArray todayRows = null;\t\ttry {\t\t\ttodayRows = JSONObject.fromObject(todayData).getJSONObject(\"datas\").getJSONArray(\"rows\");\t\t} catch (Exception e) {\t\t\tSystem.out.println(\"\u83b7\u53d6\u8868\u5355\u8be6\u7ec6\u4fe1\u606f\u5931\u8d25\uff0c\u7a0b\u5e8f\u7ec8\u6b62\u3002\u8bf7\u68c0\u67e5\u767b\u5f55\u662f\u5426\u5931\u6548\");\t\t\tSystem.exit(0);\t\t}\t\treturn filterFields(todayRows);\t}", "url": "https://raw.githubusercontent.com/meethigher/cpdaily-submit/master/CpDaily.java", "stars": "2", "class": {"name": "CpDaily", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "filterFields", "params": ["JSONArray"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String filterFields(JSONArray array) {\t\tArrayList list = new ArrayList();\t\tfor (Object o : array) {\t\t\tJSONObject item = JSONObject.fromObject(o);\t\t\titem.put(\"fieldItems\", changeJsonArray(item.get(\"fieldItems\").toString()));\t\t\tlist.add(item);\t\t}\t\treturn list.toString();\t}", "url": "https://raw.githubusercontent.com/meethigher/cpdaily-submit/master/CpDaily.java", "stars": "2", "class": {"name": "CpDaily", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "changeJsonArray", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String changeJsonArray(String fieldItems) {\t\tJSONArray array = JSONArray.fromObject(fieldItems);\t\tArrayList list = new ArrayList();\t\tfor (Object o : array) {\t\t\tJSONObject item = JSONObject.fromObject(o);\t\t\tif (\"1\".equals(item.get(\"isSelected\").toString())) {\t\t\t\tlist.add(item);\t\t\t}\t\t}\t\treturn list.toString();\t}", "url": "https://raw.githubusercontent.com/meethigher/cpdaily-submit/master/CpDaily.java", "stars": "2", "class": {"name": "CpDaily", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "afterTextChanged", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void afterTextChanged (android.text.Editable p0)\t{\t\tn_afterTextChanged (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EntryCellView.java", "stars": "2", "class": {"name": "EntryCellView", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "n_afterTextChanged", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_afterTextChanged (android.text.Editable p0);\tpublic void beforeTextChanged (java.lang.CharSequence p0, int p1, int p2, int p3)\t{\t\tn_beforeTextChanged (p0, p1, p2, p3);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EntryCellView.java", "stars": "2", "class": {"name": "EntryCellView", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "beforeTextChanged", "params": ["java", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void beforeTextChanged (java.lang.CharSequence p0, int p1, int p2, int p3)\t{\t\tn_beforeTextChanged (p0, p1, p2, p3);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EntryCellView.java", "stars": "2", "class": {"name": "EntryCellView", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "n_beforeTextChanged", "params": ["java", "int", "int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_beforeTextChanged (java.lang.CharSequence p0, int p1, int p2, int p3);\tpublic void onTextChanged (java.lang.CharSequence p0, int p1, int p2, int p3)\t{\t\tn_onTextChanged (p0, p1, p2, p3);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EntryCellView.java", "stars": "2", "class": {"name": "EntryCellView", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "onTextChanged", "params": ["java", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onTextChanged (java.lang.CharSequence p0, int p1, int p2, int p3)\t{\t\tn_onTextChanged (p0, p1, p2, p3);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EntryCellView.java", "stars": "2", "class": {"name": "EntryCellView", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "n_onTextChanged", "params": ["java", "int", "int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onTextChanged (java.lang.CharSequence p0, int p1, int p2, int p3);\tpublic void onFocusChange (android.view.View p0, boolean p1)\t{\t\tn_onFocusChange (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EntryCellView.java", "stars": "2", "class": {"name": "EntryCellView", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "onFocusChange", "params": ["android", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onFocusChange (android.view.View p0, boolean p1)\t{\t\tn_onFocusChange (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EntryCellView.java", "stars": "2", "class": {"name": "EntryCellView", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "n_onFocusChange", "params": ["android", "boolean"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onFocusChange (android.view.View p0, boolean p1);\tpublic boolean onEditorAction (android.widget.TextView p0, int p1, android.view.KeyEvent p2)\t{\t\treturn n_onEditorAction (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EntryCellView.java", "stars": "2", "class": {"name": "EntryCellView", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "onEditorAction", "params": ["android", "int", "android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onEditorAction (android.widget.TextView p0, int p1, android.view.KeyEvent p2)\t{\t\treturn n_onEditorAction (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EntryCellView.java", "stars": "2", "class": {"name": "EntryCellView", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "n_onEditorAction", "params": ["android", "int", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onEditorAction (android.widget.TextView p0, int p1, android.view.KeyEvent p2);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EntryCellView.java", "stars": "2", "class": {"name": "EntryCellView", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EntryCellView.java", "stars": "2", "class": {"name": "EntryCellView", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/EntryCellView.java", "stars": "2", "class": {"name": "EntryCellView", "extends": "android", "implements": ["mono", "android", "android", "android", "android"], "modifiers": ["public"]}}, {"method_name": "criar", "params": ["OrdemServico"], "throws": null, "modifiers": ["public"], "return_type": "OrdemServico", "snippet": "\tpublic OrdemServico criar(OrdemServico ordemServico) {\t\tCliente cliente = clienteRepository.findById(ordemServico.getCliente().getId())\t\t\t\t.orElseThrow(() -> new NegocioException(\"Cliente n\u00e3o encontrado\"));\t\tordemServico.setCliente(cliente);\t\tordemServico.setStatus(StatusOrdemServico.ABERTA);\t\tordemServico.setDataAbertura(OffsetDateTime.now());\t\treturn ordemServicoRepository.save(ordemServico);\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/domain/service/GestaoOrdemServicoService.java", "stars": "2", "class": {"name": "GestaoOrdemServicoService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "finalizar", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void finalizar(Long ordemServicoId) {\t\tOrdemServico ordemServico = buscar(ordemServicoId);\t\tordemServico.finalizar();\t\tordemServicoRepository.save(ordemServico);\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/domain/service/GestaoOrdemServicoService.java", "stars": "2", "class": {"name": "GestaoOrdemServicoService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buscar", "params": ["Long"], "throws": null, "modifiers": ["private"], "return_type": "OrdemServico", "snippet": "\tprivate OrdemServico buscar(Long ordemServicoId) {\t\treturn ordemServicoRepository.findById(ordemServicoId)\t\t\t\t.orElseThrow(() -> new EntidadeNaoEncontradaException(\"Ordem de servi\u00e7o n\u00e3o encontrada\"));\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/domain/service/GestaoOrdemServicoService.java", "stars": "2", "class": {"name": "GestaoOrdemServicoService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "adicionarComentario", "params": ["Long", "String"], "throws": null, "modifiers": ["public"], "return_type": "Comentario", "snippet": "\tpublic Comentario adicionarComentario(Long ordemServicoId, String descricao) {\t\tOrdemServico ordemServico = buscar(ordemServicoId);\t\tComentario comentario = new Comentario();\t\tcomentario.setDataEnvio(OffsetDateTime.now());\t\tcomentario.setDescricao(descricao);\t\tcomentario.setOrdemServico(ordemServico);\t\treturn comentarioRepository.save(comentario);\t}", "url": "https://raw.githubusercontent.com/jeanpsilva/osworks/master/src/main/java/com/algaworks/osworks/domain/service/GestaoOrdemServicoService.java", "stars": "2", "class": {"name": "GestaoOrdemServicoService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStartAddress", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getStartAddress() {        return start;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/Memory.java", "stars": "4", "class": {"name": "Memory", "extends": null, "implements": ["Addressable"], "modifiers": ["public"]}}, {"method_name": "getEndAddress", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getEndAddress() {        return start + length - 1;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/Memory.java", "stars": "4", "class": {"name": "Memory", "extends": null, "implements": ["Addressable"], "modifiers": ["public"]}}, {"method_name": "load8", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "byte", "snippet": "    public byte load8(int address) {        return data[address - start];    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/Memory.java", "stars": "4", "class": {"name": "Memory", "extends": null, "implements": ["Addressable"], "modifiers": ["public"]}}, {"method_name": "load16", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "short", "snippet": "    public short load16(int address) {        byte val1 = data[address - start];        byte val2 = data[address - start + 1];        return (short)((val1 << 8) + val2);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/Memory.java", "stars": "4", "class": {"name": "Memory", "extends": null, "implements": ["Addressable"], "modifiers": ["public"]}}, {"method_name": "store8", "params": ["int", "byte"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void store8(int address, byte value) {        data[address - start] = value;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/Memory.java", "stars": "4", "class": {"name": "Memory", "extends": null, "implements": ["Addressable"], "modifiers": ["public"]}}, {"method_name": "store16", "params": ["int", "short"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void store16(int address, short value) {        data[address - start] = (byte)(value >> 8);        data[address - start + 1] = (byte)(value & 0xff);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/Memory.java", "stars": "4", "class": {"name": "Memory", "extends": null, "implements": ["Addressable"], "modifiers": ["public"]}}, {"method_name": "forward", "params": ["int", "String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void forward(int port, String serial) throws IOException {        String cmd = String.format(\"forward tcp:%d tcp:27019\",port);        String ret = ShellUtils.execAdb(cmd, serial);        System.out.println(ret);    }", "url": "https://raw.githubusercontent.com/qintianchen/GAutomatorView/master/src/sample/utils/Device.java", "stars": "2", "class": {"name": "Device", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "screenshot", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void screenshot(String serial) throws IOException {        String cmd = \"shell screencap -p /sdcard/screen.png\";        String ret = ShellUtils.execAdb(cmd, serial);        cmd = \"pull /sdcard/screen.png D:/pictures/screenshot.png\";        ret = ShellUtils.execAdb(cmd, serial);    }", "url": "https://raw.githubusercontent.com/qintianchen/GAutomatorView/master/src/sample/utils/Device.java", "stars": "2", "class": {"name": "Device", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setClient", "params": ["Consul"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setClient(Consul client) {        this.client = client;    }", "url": "https://raw.githubusercontent.com/raahul1705/Compute/master/app/src/main/java/com/rxn/compute/NetworkManager.java", "stars": "2", "class": {"name": "NetworkManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findDevices", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ArrayList<String>", "snippet": "    public ArrayList<String> findDevices() {        addresses.clear();        if (client == null) {            return addresses;        }        HealthClient hc = client.healthClient();        List<ServiceHealth> nodes = hc.getHealthyServiceInstances(\"compute\").getResponse();        // Parse JSON Data        for (ServiceHealth node: nodes) {            String address = node.getNode().getAddress();            JSONObject nodeJson = new JSONObject(node.getNode().getNodeMeta().get());            addresses.add(address);            int utilization = 0;            ArrayList<ProcessData> processes = new ArrayList<>();            try {                JSONArray processesArr = new JSONArray(nodeJson.get(\"processes\").toString());                utilization = nodeJson.getInt(\"utilization\");                for (int i = 0; i < processesArr.length(); i++) {                    JSONObject process = processesArr.getJSONObject(i);                    String processName = process.getString(\"name\");                    JSONArray objsJson = process.getJSONArray(\"objs\");                    List<Pair<String, Integer>> objectData = new ArrayList<>();                    for (int j = 0; j < objsJson.length(); j++) {                        JSONObject obj = objsJson.getJSONObject(j);                        String objName = obj.getString(\"name\");                        int objUtil = obj.getInt(\"utilization\");                        Pair<String, Integer> objPair = new Pair<>(objName, objUtil);                        objectData.add(objPair);                    }                    ProcessData processData = new ProcessData(processName, objectData);                    processes.add(processData);                }            } catch (JSONException e) {                // Error                e.printStackTrace();                Log.e(Constants.NETWORK_MANAGER_TAG, \"JSON Read error\");            }            ProcessorData processorData = new ProcessorData(address, processes, utilization);            processors.add(processorData);        }        List<ProcessorData> rankedProcessors = processors;        // LAAF Algorithm        for (int i = 0; i < processors.size(); i++) {            int currUtil = processors.get(i).getCurrentUtilization();            processors.get(i).setExpectedUtilization(currUtil);            int index = rankedProcessors.indexOf(processors.get(i));            rankedProcessors.get(index).setExpectedUtilization(currUtil);            List<ProcessData> processList = processors.get(i).getProcesses();            for (int j = 0; j < processList.size(); j++) {                List<Pair<String, Integer>> objList = processList.get(j).getObjectPairs();                for (int  k = 0; k < objList.size(); k++) {                    // Sort rankedProcessors                    rankedProcessors.sort(new Comparator<ProcessorData>() {                        @Override                        public int compare(ProcessorData o1, ProcessorData o2) {                            return (o1.getExpectedUtilization() -                                    o2.getExpectedUtilization());                        }                    });                    int load = objList.get(k).second                            + rankedProcessors.get(0).getExpectedUtilization();                    rankedProcessors.get(0).setExpectedUtilization(load);                }            }        }        ArrayList<String> sortedAddresses = new ArrayList<>();        for (ProcessorData processorData: rankedProcessors) {            sortedAddresses.add(processorData.getName());        }        addresses = sortedAddresses;        return addresses;    }", "url": "https://raw.githubusercontent.com/raahul1705/Compute/master/app/src/main/java/com/rxn/compute/NetworkManager.java", "stars": "2", "class": {"name": "NetworkManager", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getName() {            return name;        }", "url": "https://raw.githubusercontent.com/raahul1705/Compute/master/app/src/main/java/com/rxn/compute/NetworkManager.java", "stars": "2", "class": {"name": "ProcessData", "extends": null, "implements": null, "modifiers": ["private"]}}, {"method_name": "getObjectPairs", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Pair>", "snippet": "        public List<Pair<String, Integer>> getObjectPairs() {            return objectPairs;        }", "url": "https://raw.githubusercontent.com/raahul1705/Compute/master/app/src/main/java/com/rxn/compute/NetworkManager.java", "stars": "2", "class": {"name": "ProcessData", "extends": null, "implements": null, "modifiers": ["private"]}}, {"method_name": "getCurrentUtilization", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getCurrentUtilization() {            return currentUtilization;        }", "url": "https://raw.githubusercontent.com/raahul1705/Compute/master/app/src/main/java/com/rxn/compute/NetworkManager.java", "stars": "2", "class": {"name": "ProcessorData", "extends": null, "implements": null, "modifiers": ["private"]}}, {"method_name": "setCurrentUtilization", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setCurrentUtilization(int currentUtilization) {            this.currentUtilization = currentUtilization;        }", "url": "https://raw.githubusercontent.com/raahul1705/Compute/master/app/src/main/java/com/rxn/compute/NetworkManager.java", "stars": "2", "class": {"name": "ProcessorData", "extends": null, "implements": null, "modifiers": ["private"]}}, {"method_name": "getExpectedUtilization", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "        public int getExpectedUtilization() {            return expectedUtilization;        }", "url": "https://raw.githubusercontent.com/raahul1705/Compute/master/app/src/main/java/com/rxn/compute/NetworkManager.java", "stars": "2", "class": {"name": "ProcessorData", "extends": null, "implements": null, "modifiers": ["private"]}}, {"method_name": "setExpectedUtilization", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setExpectedUtilization(int expectedUtilization) {            this.expectedUtilization = expectedUtilization;        }", "url": "https://raw.githubusercontent.com/raahul1705/Compute/master/app/src/main/java/com/rxn/compute/NetworkManager.java", "stars": "2", "class": {"name": "ProcessorData", "extends": null, "implements": null, "modifiers": ["private"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getName() {            return name;        }", "url": "https://raw.githubusercontent.com/raahul1705/Compute/master/app/src/main/java/com/rxn/compute/NetworkManager.java", "stars": "2", "class": {"name": "ProcessorData", "extends": null, "implements": null, "modifiers": ["private"]}}, {"method_name": "getProcesses", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<ProcessData>", "snippet": "        public List<ProcessData> getProcesses() {            return processes;        }", "url": "https://raw.githubusercontent.com/raahul1705/Compute/master/app/src/main/java/com/rxn/compute/NetworkManager.java", "stars": "2", "class": {"name": "ProcessorData", "extends": null, "implements": null, "modifiers": ["private"]}}, {"method_name": "executeProcedure", "params": ["java"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void executeProcedure(java.util.HashMap<String, Object> dependencies) {\t\tif (dependencies.get(\"x\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency x for procedure PaeoniaPlayer!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"y\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency y for procedure PaeoniaPlayer!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"z\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency z for procedure PaeoniaPlayer!\");\t\t\treturn;\t\t}\t\tif (dependencies.get(\"world\") == null) {\t\t\tSystem.err.println(\"Failed to load dependency world for procedure PaeoniaPlayer!\");\t\t\treturn;\t\t}\t\tint x = (int) dependencies.get(\"x\");\t\tint y = (int) dependencies.get(\"y\");\t\tint z = (int) dependencies.get(\"z\");\t\tWorld world = (World) dependencies.get(\"world\");\t\tif (!world.isRemote) {\t\t\tItemEntity entityToSpawn = new ItemEntity(world, x, y, z, new ItemStack(PaeoniaBlock.block, (int) (1)));\t\t\tentityToSpawn.setPickupDelay(10);\t\t\tworld.addEntity(entityToSpawn);\t\t}\t\tif (!world.isRemote) {\t\t\tItemEntity entityToSpawn = new ItemEntity(world, x, y, z, new ItemStack(Items.FLOWER_POT, (int) (1)));\t\t\tentityToSpawn.setPickupDelay(10);\t\t\tworld.addEntity(entityToSpawn);\t\t}\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/procedures/PaeoniaPlayerProcedure.java", "stars": "2", "class": {"name": "PaeoniaPlayerProcedure", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "reverse", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String reverse(@QueryParam(\"input\") @NotNull String input) {\t\treturn new StringBuilder(input).reverse().toString();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-jersey/src/main/java/smoketest/jersey/ReverseEndpoint.java", "stars": "47572", "class": {"name": "ReverseEndpoint", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toInfosDemandeurUI", "params": ["Map<TypeMasque,Integer>", "IdentiteDemandeurUI"], "throws": null, "modifiers": ["public"], "return_type": "InfosDemandeurUI", "snippet": "    public InfosDemandeurUI toInfosDemandeurUI(Map<TypeMasque, Integer> nbMasquesDistribuesParType, IdentiteDemandeurUI identiteDemandeurUI) {        return InfosDemandeurUI.builder()                .identite(identiteDemandeurUI)                .nbMasquesAdulteReutilisableDejaDistribues(nbMasquesDistribuesParType.getOrDefault(ADULTE_REUTILISABLE, 0))                .nbMasquesAdulteUsageUniqueDejaDistribues(nbMasquesDistribuesParType.getOrDefault(ADULTE_USAGE_UNIQUE, 0))                .nbMasquesEnfantReutilisableDejaDistribues(nbMasquesDistribuesParType.getOrDefault(ENFANT_REUTILISABLE, 0))                .nbMasquesEnfantUsageUniqueDejaDistribues(nbMasquesDistribuesParType.getOrDefault(ENFANT_USAGE_UNIQUE, 0))                .build();    }", "url": "https://raw.githubusercontent.com/LAB-MI/remise-masques-covid-19/master/src/main/java/fr/gouv/interieur/dmgp/remettant/application/ui/data/InfosDemandeurUIMapper.java", "stars": "5", "class": {"name": "InfosDemandeurUIMapper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOrderId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getOrderId() {    return orderId;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/multipleresultsetswithassociation/OrderHeader.java", "stars": "15", "class": {"name": "OrderHeader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOrderId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setOrderId(int orderId) {    this.orderId = orderId;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/multipleresultsetswithassociation/OrderHeader.java", "stars": "15", "class": {"name": "OrderHeader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCustName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getCustName() {    return custName;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/multipleresultsetswithassociation/OrderHeader.java", "stars": "15", "class": {"name": "OrderHeader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCustName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setCustName(String custName) {    this.custName = custName;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/multipleresultsetswithassociation/OrderHeader.java", "stars": "15", "class": {"name": "OrderHeader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items\t\t\t\t.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.BUILDING_BLOCKS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/AcaciaParquetSlabBlock.java", "stars": "2", "class": {"name": "AcaciaParquetSlabBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, state.get(TYPE) == SlabType.DOUBLE ? 2 : 1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/AcaciaParquetSlabBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "SlabBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onDrawFrame", "params": ["javax"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDrawFrame (javax.microedition.khronos.opengles.GL10 p0)\t{\t\tn_onDrawFrame (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/OpenGLViewRenderer_Renderer.java", "stars": "2", "class": {"name": "OpenGLViewRenderer_Renderer", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onDrawFrame", "params": ["javax"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDrawFrame (javax.microedition.khronos.opengles.GL10 p0);\tpublic void onSurfaceChanged (javax.microedition.khronos.opengles.GL10 p0, int p1, int p2)\t{\t\tn_onSurfaceChanged (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/OpenGLViewRenderer_Renderer.java", "stars": "2", "class": {"name": "OpenGLViewRenderer_Renderer", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onSurfaceChanged", "params": ["javax", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onSurfaceChanged (javax.microedition.khronos.opengles.GL10 p0, int p1, int p2)\t{\t\tn_onSurfaceChanged (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/OpenGLViewRenderer_Renderer.java", "stars": "2", "class": {"name": "OpenGLViewRenderer_Renderer", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onSurfaceChanged", "params": ["javax", "int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onSurfaceChanged (javax.microedition.khronos.opengles.GL10 p0, int p1, int p2);\tpublic void onSurfaceCreated (javax.microedition.khronos.opengles.GL10 p0, javax.microedition.khronos.egl.EGLConfig p1)\t{\t\tn_onSurfaceCreated (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/OpenGLViewRenderer_Renderer.java", "stars": "2", "class": {"name": "OpenGLViewRenderer_Renderer", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "onSurfaceCreated", "params": ["javax", "javax"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onSurfaceCreated (javax.microedition.khronos.opengles.GL10 p0, javax.microedition.khronos.egl.EGLConfig p1)\t{\t\tn_onSurfaceCreated (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/OpenGLViewRenderer_Renderer.java", "stars": "2", "class": {"name": "OpenGLViewRenderer_Renderer", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onSurfaceCreated", "params": ["javax", "javax"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onSurfaceCreated (javax.microedition.khronos.opengles.GL10 p0, javax.microedition.khronos.egl.EGLConfig p1);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/OpenGLViewRenderer_Renderer.java", "stars": "2", "class": {"name": "OpenGLViewRenderer_Renderer", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/OpenGLViewRenderer_Renderer.java", "stars": "2", "class": {"name": "OpenGLViewRenderer_Renderer", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/OpenGLViewRenderer_Renderer.java", "stars": "2", "class": {"name": "OpenGLViewRenderer_Renderer", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        try {            //\u53ef\u80fd\u4f1a\u4ea7\u751f\u5f02\u5e38\u7684\u4ee3\u7801            readFile(\"c:\\\\a.tx\");        } catch (IOException e) {            //\u5f02\u5e38\u7684\u5904\u7406\u903b\u8f91            e.printStackTrace();        } finally {            //\u65e0\u8bba\u662f\u5426\u51fa\u73b0\u5f02\u5e38,\u90fd\u4f1a\u6267\u884c            System.out.println(\"\u8d44\u6e90\u91ca\u653e\");        }    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/16.%E3%80%90%E5%BC%82%E5%B8%B8%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%91-%E7%AC%94%E8%AE%B0/code/05_ExceptionAndThread/src/com/itheima/demo02/Exception/Demo02TryCatchFinally.java", "stars": "2", "class": {"name": "Demo02TryCatchFinally", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readFile", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void readFile(String fileName) throws IOException {        if(!fileName.endsWith(\".txt\")){            throw new IOException(\"\u6587\u4ef6\u7684\u540e\u7f00\u540d\u4e0d\u5bf9\");        }        System.out.println(\"\u8def\u5f84\u6ca1\u6709\u95ee\u9898,\u8bfb\u53d6\u6587\u4ef6\");    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/16.%E3%80%90%E5%BC%82%E5%B8%B8%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%91-%E7%AC%94%E8%AE%B0/code/05_ExceptionAndThread/src/com/itheima/demo02/Exception/Demo02TryCatchFinally.java", "stars": "2", "class": {"name": "Demo02TryCatchFinally", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testMultipleReverseIncludeXmlConfig", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testMultipleReverseIncludeXmlConfig() throws Exception {    testMultipleReverseIncludes(getSqlSessionFactoryXmlConfig());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/MultipleReverseIncludeTest.java", "stars": "15", "class": {"name": "MultipleReverseIncludeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testMultipleReverseIncludeJavaConfig", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testMultipleReverseIncludeJavaConfig() throws Exception {    testMultipleReverseIncludes(getSqlSessionFactoryJavaConfig());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/MultipleReverseIncludeTest.java", "stars": "15", "class": {"name": "MultipleReverseIncludeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testMultipleReverseIncludes", "params": ["SqlSessionFactory"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void testMultipleReverseIncludes(SqlSessionFactory sqlSessionFactory) {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      MultipleReverseIncludePersonMapper personMapper = sqlSession.getMapper(MultipleReverseIncludePersonMapper.class);      Person person = personMapper.select(1);      assertEquals((Integer) 1, person.getId());      assertEquals(\"John\", person.getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/MultipleReverseIncludeTest.java", "stars": "15", "class": {"name": "MultipleReverseIncludeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getSqlSessionFactoryXmlConfig", "params": [], "throws": ["Exception"], "modifiers": ["private"], "return_type": "SqlSessionFactory", "snippet": "  private SqlSessionFactory getSqlSessionFactoryXmlConfig() throws Exception {    try (Reader configReader = Resources        .getResourceAsReader(\"org/apache/ibatis/submitted/xml_external_ref/MultipleReverseIncludeMapperConfig.xml\")) {      SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configReader);      initDb(sqlSessionFactory);      return sqlSessionFactory;    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/MultipleReverseIncludeTest.java", "stars": "15", "class": {"name": "MultipleReverseIncludeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getSqlSessionFactoryJavaConfig", "params": [], "throws": ["Exception"], "modifiers": ["private"], "return_type": "SqlSessionFactory", "snippet": "  private SqlSessionFactory getSqlSessionFactoryJavaConfig() throws Exception {    Configuration configuration = new Configuration();    Environment environment = new Environment(\"development\", new JdbcTransactionFactory(), new UnpooledDataSource(        \"org.hsqldb.jdbcDriver\", \"jdbc:hsqldb:mem:xmlextref\", null));    configuration.setEnvironment(environment);    configuration.addMapper(MultipleReverseIncludePersonMapper.class);    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configuration);    initDb(sqlSessionFactory);    return sqlSessionFactory;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/MultipleReverseIncludeTest.java", "stars": "15", "class": {"name": "MultipleReverseIncludeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "initDb", "params": ["SqlSessionFactory"], "throws": ["IOException", "SQLException"], "modifiers": ["private", "static"], "return_type": "void", "snippet": "  private static void initDb(SqlSessionFactory sqlSessionFactory) throws IOException, SQLException {    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/xml_external_ref/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/MultipleReverseIncludeTest.java", "stars": "15", "class": {"name": "MultipleReverseIncludeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "newInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "OTCFragment", "snippet": "    public static OTCFragment newInstance() {        return new OTCFragment();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/otc/OTCFragment.java", "stars": "1", "class": {"name": "OTCFragment", "extends": "MyFragment", "implements": ["XCollapsingToolbarLayout"], "modifiers": ["public"]}}, {"method_name": "getLayoutId", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getLayoutId() {        return R.layout.otc_fragment;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/otc/OTCFragment.java", "stars": "1", "class": {"name": "OTCFragment", "extends": "MyFragment", "implements": ["XCollapsingToolbarLayout"], "modifiers": ["public"]}}, {"method_name": "initView", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initView() {    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/otc/OTCFragment.java", "stars": "1", "class": {"name": "OTCFragment", "extends": "MyFragment", "implements": ["XCollapsingToolbarLayout"], "modifiers": ["public"]}}, {"method_name": "initData", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initData() {        mTitles.add(getString(R.string.buy));        mTitles.add(getString(R.string.sell));        initMagicIndicator(mTitles);        setViewPage();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/otc/OTCFragment.java", "stars": "1", "class": {"name": "OTCFragment", "extends": "MyFragment", "implements": ["XCollapsingToolbarLayout"], "modifiers": ["public"]}}, {"method_name": "onActivityCreated", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onActivityCreated(@Nullable Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);        // TODO: Use the ViewModel    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/otc/OTCFragment.java", "stars": "1", "class": {"name": "OTCFragment", "extends": "MyFragment", "implements": ["XCollapsingToolbarLayout"], "modifiers": ["public"]}}, {"method_name": "initMagicIndicator", "params": ["List<String>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initMagicIndicator(final List<String> titles) {        mIndicator.setBackgroundColor(Color.parseColor(\"#ffffff\"));        CommonNavigator commonNavigator = new CommonNavigator(getActivity());        commonNavigator.setAdjustMode(true);        commonNavigator.setAdapter(new CommonNavigatorAdapter() {            @Override            public int getCount() {                return titles.size();            }            @Override            public IPagerTitleView getTitleView(Context context, final int index) {                SimplePagerTitleView simplePagerTitleView = new ColorFlipPagerTitleView(context);                simplePagerTitleView.setText(titles.get(index));                simplePagerTitleView.setTextSize(UIUtil.dip2px(context, 16));//\u8bbe\u7f6e\u5bfc\u822a\u7684\u6587\u5b57\u5927\u5c0f                simplePagerTitleView.setMaxLines(1);                simplePagerTitleView.setNormalColor(ContextCompat.getColor(context, R.color.color_000000));                simplePagerTitleView.setSelectedColor(ContextCompat.getColor(context, R.color.color_000000));                simplePagerTitleView.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                         mFrgVP.setCurrentItem(index);                    }                });                return simplePagerTitleView;            }            @Override            public IPagerIndicator getIndicator(Context context) {                LinePagerIndicator indicator = new LinePagerIndicator(context);                indicator.setMode(LinePagerIndicator.MODE_EXACTLY);                indicator.setLineHeight(UIUtil.dip2px(context, 2));                indicator.setLineWidth(UIUtil.dip2px(context, 20));                indicator.setRoundRadius(UIUtil.dip2px(context, 5));                indicator.setTop(UIUtil.dip2px(context, 10));                indicator.setColors(ContextCompat.getColor(context, R.color.color_318AFD));                return indicator;            }        });        mIndicator.setNavigator(commonNavigator);        ViewPagerHelper.bind(mIndicator, mFrgVP);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/otc/OTCFragment.java", "stars": "1", "class": {"name": "OTCFragment", "extends": "MyFragment", "implements": ["XCollapsingToolbarLayout"], "modifiers": ["public"]}}, {"method_name": "setViewPage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setViewPage() {        mFrgs.clear();        Bundle homeBundle = new Bundle();        mOTCBugFragment = new OTCBuyFragment();        mOTCBugFragment.setArguments(homeBundle);        mFrgs.add(mOTCBugFragment);        Bundle homeBundle1 = new Bundle();        mOTCSellFragment = new OTCSellFragment();        mOTCSellFragment.setArguments(homeBundle1);        mFrgs.add(mOTCSellFragment);        mFrgAdapter = new TabPagerAdapter(getChildFragmentManager(), mFrgs, mTitles);        mFrgVP.setAdapter(mFrgAdapter);        mFrgVP.setOffscreenPageLimit(mTitles.size());        mFrgVP.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {            @Override            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {            }            @Override            public void onPageSelected(int position) {                mCurVPPosition = position;            }            @Override            public void onPageScrollStateChanged(int state) {            }        });    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/otc/OTCFragment.java", "stars": "1", "class": {"name": "OTCFragment", "extends": "MyFragment", "implements": ["XCollapsingToolbarLayout"], "modifiers": ["public"]}}, {"method_name": "OnClick", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void OnClick(){        Intent intent = new Intent(getContext(), FundingRecordsActivity.class);        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);        getActivity().startActivity(intent);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/otc/OTCFragment.java", "stars": "1", "class": {"name": "OTCFragment", "extends": "MyFragment", "implements": ["XCollapsingToolbarLayout"], "modifiers": ["public"]}}, {"method_name": "onScrimsStateChange", "params": ["XCollapsingToolbarLayout", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onScrimsStateChange(XCollapsingToolbarLayout layout, boolean shown) {    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/fragment/otc/OTCFragment.java", "stars": "1", "class": {"name": "OTCFragment", "extends": "MyFragment", "implements": ["XCollapsingToolbarLayout"], "modifiers": ["public"]}}, {"method_name": "shouldSetParameter", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldSetParameter() throws Exception {    TYPE_HANDLER.setParameter(ps, 1, LOCAL_DATE, null);    verify(ps).setObject(1, LOCAL_DATE);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/LocalDateTypeHandlerTest.java", "stars": "15", "class": {"name": "LocalDateTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByName() throws Exception {    when(rs.getObject(\"column\", LocalDate.class)).thenReturn(LOCAL_DATE);    assertEquals(LOCAL_DATE, TYPE_HANDLER.getResult(rs, \"column\"));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/LocalDateTypeHandlerTest.java", "stars": "15", "class": {"name": "LocalDateTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByName() throws Exception {    when(rs.getObject(\"column\", LocalDate.class)).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(rs, \"column\"));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/LocalDateTypeHandlerTest.java", "stars": "15", "class": {"name": "LocalDateTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByPosition() throws Exception {    when(rs.getObject(1, LocalDate.class)).thenReturn(LOCAL_DATE);    assertEquals(LOCAL_DATE, TYPE_HANDLER.getResult(rs, 1));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/LocalDateTypeHandlerTest.java", "stars": "15", "class": {"name": "LocalDateTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByPosition() throws Exception {    when(rs.getObject(1, LocalDate.class)).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(rs, 1));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/LocalDateTypeHandlerTest.java", "stars": "15", "class": {"name": "LocalDateTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromCallableStatement() throws Exception {    when(cs.getObject(1, LocalDate.class)).thenReturn(LOCAL_DATE);    assertEquals(LOCAL_DATE, TYPE_HANDLER.getResult(cs, 1));    verify(cs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/LocalDateTypeHandlerTest.java", "stars": "15", "class": {"name": "LocalDateTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromCallableStatement() throws Exception {    when(cs.getObject(1, LocalDate.class)).thenReturn(null);    assertNull(TYPE_HANDLER.getResult(cs, 1));    verify(cs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/LocalDateTypeHandlerTest.java", "stars": "15", "class": {"name": "LocalDateTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "message", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String message() {\t\treturn \"Hello \" + this.service.message();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-jersey/src/main/java/smoketest/jersey/Endpoint.java", "stars": "47572", "class": {"name": "Endpoint", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onAttach", "params": ["Context"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onAttach(Context context) {        super.onAttach(context);        if (context instanceof MediaDetailActivity)            mActivity = (MediaDetailActivity) context;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/base/BaseDetailFragment.java", "stars": "4", "class": {"name": "BaseDetailFragment", "extends": "Fragment", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "canTakeStack", "params": ["EntityPlayer"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean canTakeStack(EntityPlayer playerIn) {        return false;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/GUI/SlotLocked.java", "stars": "2", "class": {"name": "SlotLocked", "extends": "Slot", "implements": null, "modifiers": ["public"]}}, {"method_name": "isItemValid", "params": ["ItemStack"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isItemValid(ItemStack stack) {        return false;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/GUI/SlotLocked.java", "stars": "2", "class": {"name": "SlotLocked", "extends": "Slot", "implements": null, "modifiers": ["public"]}}, {"method_name": "visit", "params": ["Mural"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void visit(Mural mural) {        System.out.println(\"\u4e2d\u56fd\u6e38\u5ba2\u53c2\u89c2\u4e86\" + mural.getName());    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/visitor/ChineseVisitor.java", "stars": "2", "class": {"name": "ChineseVisitor", "extends": null, "implements": ["Visitor"], "modifiers": ["public"]}}, {"method_name": "visit", "params": ["JadeArticle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void visit(JadeArticle jadeArticle) {        System.out.println(\"\u4e2d\u56fd\u6e38\u5ba2\u53c2\u89c2\u4e86\" + jadeArticle.getName());    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/visitor/ChineseVisitor.java", "stars": "2", "class": {"name": "ChineseVisitor", "extends": null, "implements": ["Visitor"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/PickerRenderer.java", "stars": "2", "class": {"name": "PickerRenderer", "extends": "crc64720bb2db43a66fe9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc64720bb2db43a66fe9/PickerRenderer.java", "stars": "2", "class": {"name": "PickerRenderer", "extends": "crc64720bb2db43a66fe9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate() {        super.onCreate();        mTimelineManager = TimelineManager.from(this);        // Even though the text-to-speech engine is only used in response to a menu action, we        // initialize it when the application starts so that we avoid delays that could occur        // if we waited until it was needed to start it up.        mSpeech = new TextToSpeech(this, new TextToSpeech.OnInitListener() {            @Override            public void onInit(int status) {                // Do nothing.            }        });        SensorManager sensorManager =                (SensorManager) getSystemService(Context.SENSOR_SERVICE);        LocationManager locationManager =                (LocationManager) getSystemService(Context.LOCATION_SERVICE);        mOrientationManager = new OrientationManager(sensorManager, locationManager);        mLandmarks = new Landmarks(this);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Compass/src/com/google/android/glass/sample/compass/CompassService.java", "stars": "74", "class": {"name": "CompassService", "extends": "Service", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBind", "params": ["Intent"], "throws": null, "modifiers": ["public"], "return_type": "IBinder", "snippet": "    public IBinder onBind(Intent intent) {        return mBinder;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Compass/src/com/google/android/glass/sample/compass/CompassService.java", "stars": "74", "class": {"name": "CompassService", "extends": "Service", "implements": null, "modifiers": ["public"]}}, {"method_name": "onStartCommand", "params": ["Intent", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int onStartCommand(Intent intent, int flags, int startId) {        if (mLiveCard == null) {            mLiveCard = mTimelineManager.createLiveCard(LIVE_CARD_ID);            mRenderer = new CompassRenderer(this, mOrientationManager, mLandmarks);            mLiveCard.setDirectRenderingEnabled(true).getSurfaceHolder().addCallback(mRenderer);            // Display the options menu when the live card is tapped.            Intent menuIntent = new Intent(this, CompassMenuActivity.class);            menuIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);            mLiveCard.setAction(PendingIntent.getActivity(this, 0, menuIntent, 0));            mLiveCard.publish(PublishMode.REVEAL);        }        return START_STICKY;    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Compass/src/com/google/android/glass/sample/compass/CompassService.java", "stars": "74", "class": {"name": "CompassService", "extends": "Service", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDestroy() {        if (mLiveCard != null && mLiveCard.isPublished()) {            mLiveCard.unpublish();            mLiveCard.getSurfaceHolder().removeCallback(mRenderer);            mLiveCard = null;        }        mSpeech.shutdown();        mSpeech = null;        mOrientationManager = null;        mLandmarks = null;        super.onDestroy();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Compass/src/com/google/android/glass/sample/compass/CompassService.java", "stars": "74", "class": {"name": "CompassService", "extends": "Service", "implements": null, "modifiers": ["public"]}}, {"method_name": "readHeadingAloud", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void readHeadingAloud() {            float heading = mOrientationManager.getHeading();            Resources res = getResources();            String[] spokenDirections = res.getStringArray(R.array.spoken_directions);            String directionName = spokenDirections[MathUtils.getHalfWindIndex(heading)];            int roundedHeading = Math.round(heading);            int headingFormat;            if (roundedHeading == 1) {                headingFormat = R.string.spoken_heading_format_one;            } else {                headingFormat = R.string.spoken_heading_format;            }            String headingText = res.getString(headingFormat, roundedHeading, directionName);            mSpeech.speak(headingText, TextToSpeech.QUEUE_FLUSH, null);        }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Compass/src/com/google/android/glass/sample/compass/CompassService.java", "stars": "74", "class": {"name": "CompassBinder", "extends": "Binder", "implements": null, "modifiers": ["public"]}}, {"method_name": "getVideoRendererIndex", "params": [], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int getVideoRendererIndex() {        if (mInternalPlayer != null) {            for (int i = 0; i < mInternalPlayer.getRendererCount(); i++) {                if (mInternalPlayer.getRendererType(i) == C.TRACK_TYPE_VIDEO) {                    return i;                }            }        }        return 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "setDisplay", "params": ["SurfaceHolder"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDisplay(SurfaceHolder sh) {        if (sh == null)            setSurface(null);        else            setSurface(sh.getSurface());    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "setSurface", "params": ["Surface"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSurface(Surface surface) {        mSurface = surface;        if (mInternalPlayer != null) {            if (surface != null && !surface.isValid()) {                mSurface = null;            }            mInternalPlayer.setVideoSurface(surface);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "setDataSource", "params": ["Context", "Uri", "Map<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDataSource(Context context, Uri uri, Map<String, String> headers) {        if (headers != null) {            mHeaders.clear();            mHeaders.putAll(headers);        }        setDataSource(context, uri);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "setDataSource", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDataSource(String path) {        setDataSource(mAppContext, Uri.parse(path));    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "setDataSource", "params": ["Context", "Uri"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDataSource(Context context, Uri uri) {        mDataSource = uri.toString();        mMediaSource = mExoHelper.getMediaSource(mDataSource, isPreview, isCache, isLooping, mCacheDir, mOverrideExtension);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "setDataSource", "params": ["FileDescriptor"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDataSource(FileDescriptor fd) {        throw new UnsupportedOperationException(\"no support\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "getDataSource", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDataSource() {        return mDataSource;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "prepareAsync", "params": [], "throws": ["IllegalStateException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void prepareAsync() throws IllegalStateException {        if (mInternalPlayer != null)            throw new IllegalStateException(\"can't prepare a prepared player\");        prepareAsyncInternal();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": ["IllegalStateException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void start() throws IllegalStateException {        if (mInternalPlayer == null)            return;        mInternalPlayer.setPlayWhenReady(true);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "stop", "params": [], "throws": ["IllegalStateException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void stop() throws IllegalStateException {        if (mInternalPlayer == null)            return;        mInternalPlayer.release();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "pause", "params": [], "throws": ["IllegalStateException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void pause() throws IllegalStateException {        if (mInternalPlayer == null)            return;        mInternalPlayer.setPlayWhenReady(false);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "setWakeMode", "params": ["Context", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setWakeMode(Context context, int mode) {        // FIXME: implement    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "setScreenOnWhilePlaying", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setScreenOnWhilePlaying(boolean screenOn) {        // TODO: do nothing    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "getTrackInfo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "IjkTrackInfo", "snippet": "    public IjkTrackInfo[] getTrackInfo() {        // TODO: implement        return null;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "getVideoWidth", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getVideoWidth() {        return mVideoWidth;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "getVideoHeight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getVideoHeight() {        return mVideoHeight;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "isPlaying", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isPlaying() {        if (mInternalPlayer == null)            return false;        int state = mInternalPlayer.getPlaybackState();        switch (state) {            case Player.STATE_BUFFERING:            case Player.STATE_READY:                return mInternalPlayer.getPlayWhenReady();            case Player.STATE_IDLE:            case Player.STATE_ENDED:            default:                return false;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "seekTo", "params": ["long"], "throws": ["IllegalStateException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void seekTo(long msec) throws IllegalStateException {        if (mInternalPlayer == null)            return;        mInternalPlayer.seekTo(msec);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "getCurrentPosition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getCurrentPosition() {        if (mInternalPlayer == null)            return 0;        return mInternalPlayer.getCurrentPosition();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "getDuration", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getDuration() {        if (mInternalPlayer == null)            return 0;        return mInternalPlayer.getDuration();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "getVideoSarNum", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getVideoSarNum() {        return 1;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "getVideoSarDen", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getVideoSarDen() {        return 1;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "reset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void reset() {        if (mInternalPlayer != null) {            mInternalPlayer.release();            mInternalPlayer = null;        }        if (mExoHelper != null) {            mExoHelper.release();        }        mSurface = null;        mDataSource = null;        mVideoWidth = 0;        mVideoHeight = 0;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "setLooping", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLooping(boolean looping) {        isLooping = looping;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "isLooping", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isLooping() {        return isLooping;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "setVolume", "params": ["float", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setVolume(float leftVolume, float rightVolume) {        if (mInternalPlayer != null)            mInternalPlayer.setVolume((leftVolume + rightVolume) / 2);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "getAudioSessionId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getAudioSessionId() {        return audioSessionId;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "getMediaInfo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MediaInfo", "snippet": "    public MediaInfo getMediaInfo() {        return null;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "setLogEnabled", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLogEnabled(boolean enable) {        // do nothing    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "isPlayable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isPlayable() {        return true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "setAudioStreamType", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAudioStreamType(int streamtype) {        // do nothing    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "setKeepInBackground", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setKeepInBackground(boolean keepInBackground) {        // do nothing    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "release", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void release() {        if (mInternalPlayer != null) {            reset();            mEventLogger = null;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "prepareAsyncInternal", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void prepareAsyncInternal() {        new Handler(Looper.getMainLooper()).post(                new Runnable() {                    @Override                    public void run() {                        if (mTrackSelector == null) {                            mTrackSelector = new DefaultTrackSelector();                        }                        mEventLogger = new EventLogger(mTrackSelector);                        boolean preferExtensionDecoders = true;                        boolean useExtensionRenderers = true;//\u662f\u5426\u5f00\u542f\u6269\u5c55                        @DefaultRenderersFactory.ExtensionRendererMode int extensionRendererMode = useExtensionRenderers                                ? (preferExtensionDecoders ? DefaultRenderersFactory.EXTENSION_RENDERER_MODE_PREFER                                : DefaultRenderersFactory.EXTENSION_RENDERER_MODE_ON)                                : DefaultRenderersFactory.EXTENSION_RENDERER_MODE_OFF;                        if (mRendererFactory == null) {                            mRendererFactory = new DefaultRenderersFactory(mAppContext);                            mRendererFactory.setExtensionRendererMode(extensionRendererMode);                        }                        if (mLoadControl == null) {                            mLoadControl = new DefaultLoadControl();                        }                        mInternalPlayer = ExoPlayerFactory.newSimpleInstance(mAppContext, mRendererFactory, mTrackSelector, mLoadControl, null, Looper.getMainLooper());                        mInternalPlayer.addListener(IjkExo2MediaPlayer.this);                        mInternalPlayer.addAnalyticsListener(IjkExo2MediaPlayer.this);                        mInternalPlayer.addListener(mEventLogger);                        if (mSpeedPlaybackParameters != null) {                            mInternalPlayer.setPlaybackParameters(mSpeedPlaybackParameters);                        }                        if (mSurface != null)                            mInternalPlayer.setVideoSurface(mSurface);                        mInternalPlayer.prepare(mMediaSource);                        mInternalPlayer.setPlayWhenReady(false);                    }                }        );    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "getOverrideExtension", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOverrideExtension() {        return mOverrideExtension;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "setOverrideExtension", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOverrideExtension(String overrideExtension) {        this.mOverrideExtension = overrideExtension;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "stopPlayback", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void stopPlayback() {        mInternalPlayer.stop();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "setPreview", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPreview(boolean preview) {        isPreview = preview;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "isPreview", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isPreview() {        return isPreview;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "isCache", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isCache() {        return isCache;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "setSeekParameter", "params": ["SeekParameters"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSeekParameter(@Nullable SeekParameters seekParameters) {        mInternalPlayer.setSeekParameters(seekParameters);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "setCache", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCache(boolean cache) {        isCache = cache;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "getCacheDir", "params": [], "throws": null, "modifiers": ["public"], "return_type": "File", "snippet": "    public File getCacheDir() {        return mCacheDir;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "setCacheDir", "params": ["File"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCacheDir(File cacheDir) {        this.mCacheDir = cacheDir;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "getMediaSource", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MediaSource", "snippet": "    public MediaSource getMediaSource() {        return mMediaSource;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "setMediaSource", "params": ["MediaSource"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMediaSource(MediaSource mediaSource) {        this.mMediaSource = mediaSource;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "getExoHelper", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ExoSourceManager", "snippet": "    public ExoSourceManager getExoHelper() {        return mExoHelper;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "setSpeed", "params": ["float", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSpeed(@Size(min = 0) float speed, @Size(min = 0) float pitch) {        PlaybackParameters playbackParameters = new PlaybackParameters(speed, pitch);        mSpeedPlaybackParameters = playbackParameters;        if (mInternalPlayer != null) {            mInternalPlayer.setPlaybackParameters(playbackParameters);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "getSpeed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getSpeed() {        return mInternalPlayer.getPlaybackParameters().speed;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "getBufferedPercentage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getBufferedPercentage() {        if (mInternalPlayer == null)            return 0;        return mInternalPlayer.getBufferedPercentage();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onTimelineChanged", "params": ["Timeline", "Object", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onTimelineChanged(Timeline timeline, Object manifest, int reason) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "getTrackSelector", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MappingTrackSelector", "snippet": "    public MappingTrackSelector getTrackSelector() {        return mTrackSelector;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "setTrackSelector", "params": ["MappingTrackSelector"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTrackSelector(MappingTrackSelector trackSelector) {        this.mTrackSelector = trackSelector;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "getLoadControl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "LoadControl", "snippet": "    public LoadControl getLoadControl() {        return mLoadControl;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "setLoadControl", "params": ["LoadControl"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLoadControl(LoadControl loadControl) {        this.mLoadControl = loadControl;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "getRendererFactory", "params": [], "throws": null, "modifiers": ["public"], "return_type": "DefaultRenderersFactory", "snippet": "    public DefaultRenderersFactory getRendererFactory() {        return mRendererFactory;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "setRendererFactory", "params": ["DefaultRenderersFactory"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRendererFactory(DefaultRenderersFactory rendererFactory) {        this.mRendererFactory = rendererFactory;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onTracksChanged", "params": ["TrackGroupArray", "TrackSelectionArray"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onTracksChanged(TrackGroupArray trackGroups, TrackSelectionArray trackSelections) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onLoadingChanged", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onLoadingChanged(boolean isLoading) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onPlayerStateChanged", "params": ["boolean", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPlayerStateChanged(boolean playWhenReady, int playbackState) {        //\u91cd\u65b0\u64ad\u653e\u72b6\u6001\u987a\u5e8f\u4e3a\uff1aSTATE_IDLE -\u300bSTATE_BUFFERING -\u300bSTATE_READY        //\u7f13\u51b2\u65f6\u987a\u5e8f\u4e3a\uff1aSTATE_BUFFERING -\u300bSTATE_READY        //Log.e(TAG, \"onPlayerStateChanged: playWhenReady = \" + playWhenReady + \", playbackState = \" + playbackState);        if (isLastReportedPlayWhenReady != playWhenReady || lastReportedPlaybackState != playbackState) {            if (isBuffering) {                switch (playbackState) {                    case Player.STATE_ENDED:                    case Player.STATE_READY:                        notifyOnInfo(IMediaPlayer.MEDIA_INFO_BUFFERING_END, mInternalPlayer.getBufferedPercentage());                        isBuffering = false;                        break;                }            }            if (isPreparing) {                switch (playbackState) {                    case Player.STATE_READY:                        notifyOnPrepared();                        isPreparing = false;                        break;                }            }            switch (playbackState) {                case Player.STATE_BUFFERING:                    notifyOnInfo(IMediaPlayer.MEDIA_INFO_BUFFERING_START, mInternalPlayer.getBufferedPercentage());                    isBuffering = true;                    break;                case Player.STATE_READY:                    break;                case Player.STATE_ENDED:                    notifyOnCompletion();                    break;                default:                    break;            }        }        isLastReportedPlayWhenReady = playWhenReady;        lastReportedPlaybackState = playbackState;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onRepeatModeChanged", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRepeatModeChanged(int repeatMode) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onShuffleModeEnabledChanged", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onShuffleModeEnabledChanged(boolean shuffleModeEnabled) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onPlayerError", "params": ["ExoPlaybackException"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPlayerError(ExoPlaybackException error) {        notifyOnError(IMediaPlayer.MEDIA_ERROR_UNKNOWN, IMediaPlayer.MEDIA_ERROR_UNKNOWN);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onPositionDiscontinuity", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPositionDiscontinuity(int reason) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onPlaybackParametersChanged", "params": ["PlaybackParameters"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPlaybackParametersChanged(PlaybackParameters playbackParameters) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onSeekProcessed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSeekProcessed() {        notifyOnSeekComplete();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onPlayerStateChanged", "params": ["EventTime", "boolean", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPlayerStateChanged(EventTime eventTime, boolean playWhenReady, int playbackState) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onTimelineChanged", "params": ["EventTime", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onTimelineChanged(EventTime eventTime, int reason) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onPositionDiscontinuity", "params": ["EventTime", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPositionDiscontinuity(EventTime eventTime, int reason) {        notifyOnInfo(ON_POSITION_DISCOUNTINUITY, reason);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onSeekStarted", "params": ["EventTime"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSeekStarted(EventTime eventTime) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onSeekProcessed", "params": ["EventTime"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSeekProcessed(EventTime eventTime) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onPlaybackParametersChanged", "params": ["EventTime", "PlaybackParameters"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPlaybackParametersChanged(EventTime eventTime, PlaybackParameters playbackParameters) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onRepeatModeChanged", "params": ["EventTime", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRepeatModeChanged(EventTime eventTime, int repeatMode) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onShuffleModeChanged", "params": ["EventTime", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onShuffleModeChanged(EventTime eventTime, boolean shuffleModeEnabled) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onLoadingChanged", "params": ["EventTime", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onLoadingChanged(EventTime eventTime, boolean isLoading) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onPlayerError", "params": ["EventTime", "ExoPlaybackException"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPlayerError(EventTime eventTime, ExoPlaybackException error) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onTracksChanged", "params": ["EventTime", "TrackGroupArray", "TrackSelectionArray"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onTracksChanged(EventTime eventTime, TrackGroupArray trackGroups, TrackSelectionArray trackSelections) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onLoadStarted", "params": ["EventTime", "MediaSourceEventListener", "MediaSourceEventListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onLoadStarted(EventTime eventTime, MediaSourceEventListener.LoadEventInfo loadEventInfo, MediaSourceEventListener.MediaLoadData mediaLoadData) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onLoadCompleted", "params": ["EventTime", "MediaSourceEventListener", "MediaSourceEventListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onLoadCompleted(EventTime eventTime, MediaSourceEventListener.LoadEventInfo loadEventInfo, MediaSourceEventListener.MediaLoadData mediaLoadData) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onLoadCanceled", "params": ["EventTime", "MediaSourceEventListener", "MediaSourceEventListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onLoadCanceled(EventTime eventTime, MediaSourceEventListener.LoadEventInfo loadEventInfo, MediaSourceEventListener.MediaLoadData mediaLoadData) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onLoadError", "params": ["EventTime", "MediaSourceEventListener", "MediaSourceEventListener", "IOException", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onLoadError(EventTime eventTime, MediaSourceEventListener.LoadEventInfo loadEventInfo, MediaSourceEventListener.MediaLoadData mediaLoadData, IOException error, boolean wasCanceled) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onDownstreamFormatChanged", "params": ["EventTime", "MediaSourceEventListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDownstreamFormatChanged(EventTime eventTime, MediaSourceEventListener.MediaLoadData mediaLoadData) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onUpstreamDiscarded", "params": ["EventTime", "MediaSourceEventListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onUpstreamDiscarded(EventTime eventTime, MediaSourceEventListener.MediaLoadData mediaLoadData) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onMediaPeriodCreated", "params": ["EventTime"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onMediaPeriodCreated(EventTime eventTime) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onMediaPeriodReleased", "params": ["EventTime"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onMediaPeriodReleased(EventTime eventTime) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onReadingStarted", "params": ["EventTime"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onReadingStarted(EventTime eventTime) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onBandwidthEstimate", "params": ["EventTime", "int", "long", "long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBandwidthEstimate(EventTime eventTime, int totalLoadTimeMs, long totalBytesLoaded, long bitrateEstimate) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onMetadata", "params": ["EventTime", "Metadata"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onMetadata(EventTime eventTime, Metadata metadata) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onDecoderEnabled", "params": ["EventTime", "int", "DecoderCounters"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDecoderEnabled(EventTime eventTime, int trackType, DecoderCounters decoderCounters) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onDecoderInitialized", "params": ["EventTime", "int", "String", "long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDecoderInitialized(EventTime eventTime, int trackType, String decoderName, long initializationDurationMs) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onDecoderInputFormatChanged", "params": ["EventTime", "int", "Format"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDecoderInputFormatChanged(EventTime eventTime, int trackType, Format format) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onDecoderDisabled", "params": ["EventTime", "int", "DecoderCounters"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDecoderDisabled(EventTime eventTime, int trackType, DecoderCounters decoderCounters) {        audioSessionId = C.AUDIO_SESSION_ID_UNSET;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onAudioSessionId", "params": ["EventTime", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onAudioSessionId(EventTime eventTime, int audioSessionId) {        this.audioSessionId = audioSessionId;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onAudioUnderrun", "params": ["EventTime", "int", "long", "long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onAudioUnderrun(EventTime eventTime, int bufferSize, long bufferSizeMs, long elapsedSinceLastFeedMs) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onDroppedVideoFrames", "params": ["EventTime", "int", "long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDroppedVideoFrames(EventTime eventTime, int droppedFrames, long elapsedMs) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onVideoSizeChanged", "params": ["EventTime", "int", "int", "int", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onVideoSizeChanged(EventTime eventTime, int width, int height, int unappliedRotationDegrees, float pixelWidthHeightRatio) {        mVideoWidth = (int) (width * pixelWidthHeightRatio);        mVideoHeight = height;        notifyOnVideoSizeChanged((int) (width * pixelWidthHeightRatio), height, 1, 1);        if (unappliedRotationDegrees > 0)            notifyOnInfo(IMediaPlayer.MEDIA_INFO_VIDEO_ROTATION_CHANGED, unappliedRotationDegrees);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onRenderedFirstFrame", "params": ["EventTime", "Surface"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRenderedFirstFrame(EventTime eventTime, Surface surface) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onDrmKeysLoaded", "params": ["EventTime"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDrmKeysLoaded(EventTime eventTime) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onDrmSessionManagerError", "params": ["EventTime", "Exception"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDrmSessionManagerError(EventTime eventTime, Exception error) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onDrmKeysRestored", "params": ["EventTime"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDrmKeysRestored(EventTime eventTime) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "onDrmKeysRemoved", "params": ["EventTime"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDrmKeysRemoved(EventTime eventTime) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/tv/danmaku/ijk/media/exo2/IjkExo2MediaPlayer.java", "stars": "2", "class": {"name": "IjkExo2MediaPlayer", "extends": "AbstractMediaPlayer", "implements": ["Player", "AnalyticsListener"], "modifiers": ["public"]}}, {"method_name": "validAccessToken", "params": ["HttpServletRequest"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void validAccessToken(HttpServletRequest request){        if (XxlJobAdminConfig.getAdminConfig().getAccessToken()!=null                && XxlJobAdminConfig.getAdminConfig().getAccessToken().trim().length()>0                && !XxlJobAdminConfig.getAdminConfig().getAccessToken().equals(request.getHeader(XxlJobRemotingUtil.XXL_RPC_ACCESS_TOKEN))) {            throw new XxlJobException(\"The access token is wrong.\");        }    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/controller/JobApiController.java", "stars": "1", "class": {"name": "JobApiController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseParam", "params": ["String", "Class<?>", "Class<?>"], "throws": null, "modifiers": ["private"], "return_type": "Object", "snippet": "    private Object parseParam(String data, Class<?> parametrized, Class<?>... parameterClasses){        Object param = null;        try {            if (parameterClasses != null) {                param = JacksonUtil.readValue(data, parametrized, parameterClasses);            } else {                param = JacksonUtil.readValue(data, parametrized);            }        } catch (Exception e) { }        if (param==null) {            throw new XxlJobException(\"The request data invalid.\");        }        return param;    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/controller/JobApiController.java", "stars": "1", "class": {"name": "JobApiController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "callback", "params": ["HttpServletRequest", "String"], "throws": null, "modifiers": ["public"], "return_type": "ReturnT<String>", "snippet": "    public ReturnT<String> callback(HttpServletRequest request, @RequestBody(required = false) String data) {        // valid        validAccessToken(request);        // param        List<HandleCallbackParam> callbackParamList = (List<HandleCallbackParam>) parseParam(data, List.class, HandleCallbackParam.class);        // invoke        return adminBiz.callback(callbackParamList);    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/controller/JobApiController.java", "stars": "1", "class": {"name": "JobApiController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "registry", "params": ["HttpServletRequest", "String"], "throws": null, "modifiers": ["public"], "return_type": "ReturnT<String>", "snippet": "    public ReturnT<String> registry(HttpServletRequest request, @RequestBody(required = false) String data) {        // valid        validAccessToken(request);        // param        RegistryParam registryParam = (RegistryParam) parseParam(data, RegistryParam.class);        // invoke        return adminBiz.registry(registryParam);    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/controller/JobApiController.java", "stars": "1", "class": {"name": "JobApiController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "registryRemove", "params": ["HttpServletRequest", "String"], "throws": null, "modifiers": ["public"], "return_type": "ReturnT<String>", "snippet": "    public ReturnT<String> registryRemove(HttpServletRequest request, @RequestBody(required = false) String data) {        // valid        validAccessToken(request);        // param        RegistryParam registryParam = (RegistryParam) parseParam(data, RegistryParam.class);        // invoke        return adminBiz.registryRemove(registryParam);    }", "url": "https://raw.githubusercontent.com/miaoo92/xxl-job-mongo/master/src/main/java/com/avon/rga/controller/JobApiController.java", "stars": "1", "class": {"name": "JobApiController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "create", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "FeignLabelLoadBalancer", "snippet": "    public FeignLabelLoadBalancer create(String clientName){        return this.cache.computeIfAbsent(clientName, (key)->{            IClientConfig config = this.factory.getClientConfig(clientName);            ILoadBalancer lb = this.factory.getLoadBalancer(clientName);            ServerIntrospector serverIntrospector = this.factory.getInstance(clientName, ServerIntrospector.class);            return new FeignLabelLoadBalancer(lb, config, serverIntrospector);        });    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/route/feign/LabelLoadBalancerFactory.java", "stars": "23", "class": {"name": "LabelLoadBalancerFactory", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRequestSpecificRetryHandler", "params": ["LbClientRequest", "IClientConfig"], "throws": null, "modifiers": ["public"], "return_type": "RequestSpecificRetryHandler", "snippet": "        public RequestSpecificRetryHandler getRequestSpecificRetryHandler(LbClientRequest request, IClientConfig requestConfig) {            if(null != this.ribbon && this.ribbon.isOkToRetryOnAllOperations()){                return new RequestSpecificRetryHandler(true, true, this.getRetryHandler(),                        requestConfig);            }            if(!\"GET\".equals(request.toRequest().method())){                return new RequestSpecificRetryHandler(true, false, this.getRetryHandler(),                        requestConfig);            }else{                return new RequestSpecificRetryHandler(true, true, this.getRetryHandler(),                        requestConfig);            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/route/feign/LabelLoadBalancerFactory.java", "stars": "23", "class": {"name": "FeignLabelLoadBalancer", "extends": "AbstractLoadBalancerAwareClient", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "customizeLoadBalancerCommandBuilder", "params": ["LbClientRequest", "IClientConfig", "LoadBalancerCommand"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void customizeLoadBalancerCommandBuilder(LbClientRequest request, IClientConfig config, LoadBalancerCommand.Builder<LbClientResponse> builder) {            //set load balancer key            Object key = request.getLoadBalancerKey();            if(null != key){                logger.info(\"set load balancer label:\" + request.getLoadBalancerKey());                builder.withServerLocator(request.getLoadBalancerKey());            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/route/feign/LabelLoadBalancerFactory.java", "stars": "23", "class": {"name": "FeignLabelLoadBalancer", "extends": "AbstractLoadBalancerAwareClient", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "reconstructURIWithServer", "params": ["Server", "URI"], "throws": null, "modifiers": ["public"], "return_type": "URI", "snippet": "        public URI reconstructURIWithServer(Server server, URI original) {            URI uri = updateToSecureConnectionIfNeeded(original, this.clientConfig, this.serverIntrospector, server);            return super.reconstructURIWithServer(server, uri);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/route/feign/LabelLoadBalancerFactory.java", "stars": "23", "class": {"name": "FeignLabelLoadBalancer", "extends": "AbstractLoadBalancerAwareClient", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "execute", "params": ["LbClientRequest", "IClientConfig"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "LbClientResponse", "snippet": "        public LbClientResponse execute(LbClientRequest lbClientRequest, IClientConfig iClientConfig) throws Exception {            Request.Options options;            if(null != iClientConfig){                RibbonProperties override = RibbonProperties.from(iClientConfig);                options = new Request.Options(this.connectTimeout, this.readTimeout);            }else{                options = new Request.Options(this.connectTimeout, this.readTimeout);            }            return new LbClientResponse(lbClientRequest.getUri(),                    lbClientRequest.client.execute(lbClientRequest.toRequest(), options));        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/route/feign/LabelLoadBalancerFactory.java", "stars": "23", "class": {"name": "FeignLabelLoadBalancer", "extends": "AbstractLoadBalancerAwareClient", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "executeWithLoadBalancer", "params": ["LbClientRequest", "IClientConfig"], "throws": ["ClientException"], "modifiers": ["public"], "return_type": "LbClientResponse", "snippet": "        public LbClientResponse executeWithLoadBalancer(LbClientRequest request, IClientConfig requestConfig) throws ClientException {            LoadBalancerCommand<LbClientResponse> command = buildLoadBalancerCommand(request, requestConfig);            try {                return command.submit(                        server -> {                            //set the server chosen                            request.chosenServer = server;                            URI finalUri = reconstructURIWithServer(server, request.getUri());                            LbClientRequest requestForServer = (LbClientRequest) request.replaceUri(finalUri);                            try {                                return Observable.just(this.execute(requestForServer, requestConfig));                            }                            catch (Exception e) {                                return Observable.error(e);                            }                        })                        .toBlocking()                        .single();            } catch (Exception e) {                Throwable t = e.getCause();                if (t instanceof ClientException) {                    throw (ClientException) t;                } else {                    throw new ClientException(e);                }            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/route/feign/LabelLoadBalancerFactory.java", "stars": "23", "class": {"name": "FeignLabelLoadBalancer", "extends": "AbstractLoadBalancerAwareClient", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "toRequest", "params": ["Request"], "throws": null, "modifiers": ["private"], "return_type": "Request", "snippet": "            private Request toRequest(Request request){                return Request.create(request.method(), getUri().toASCIIString(), this.headers, request.body(), request.charset());            }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/route/feign/LabelLoadBalancerFactory.java", "stars": "23", "class": {"name": "LbClientRequest", "extends": "ClientRequest", "implements": null, "modifiers": ["static"]}}, {"method_name": "toRequest", "params": [], "throws": null, "modifiers": [], "return_type": "Request", "snippet": "            Request toRequest(){                return toRequest(this.request);            }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/route/feign/LabelLoadBalancerFactory.java", "stars": "23", "class": {"name": "LbClientRequest", "extends": "ClientRequest", "implements": null, "modifiers": ["static"]}}, {"method_name": "getChosenServer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Server", "snippet": "            public Server getChosenServer() {                return chosenServer;            }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/route/feign/LabelLoadBalancerFactory.java", "stars": "23", "class": {"name": "LbClientRequest", "extends": "ClientRequest", "implements": null, "modifiers": ["static"]}}, {"method_name": "getPayload", "params": [], "throws": ["ClientException"], "modifiers": ["public"], "return_type": "Object", "snippet": "            public Object getPayload() throws ClientException {                return this.response.body();            }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/route/feign/LabelLoadBalancerFactory.java", "stars": "23", "class": {"name": "LbClientResponse", "extends": null, "implements": ["IResponse"], "modifiers": ["static"]}}, {"method_name": "hasPayload", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "            public boolean hasPayload() {                return this.response.body() != null;            }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/route/feign/LabelLoadBalancerFactory.java", "stars": "23", "class": {"name": "LbClientResponse", "extends": null, "implements": ["IResponse"], "modifiers": ["static"]}}, {"method_name": "isSuccess", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "            public boolean isSuccess() {                return this.response.status() == 200;            }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/route/feign/LabelLoadBalancerFactory.java", "stars": "23", "class": {"name": "LbClientResponse", "extends": null, "implements": ["IResponse"], "modifiers": ["static"]}}, {"method_name": "getRequestedURI", "params": [], "throws": null, "modifiers": ["public"], "return_type": "URI", "snippet": "            public URI getRequestedURI() {                return this.uri;            }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/route/feign/LabelLoadBalancerFactory.java", "stars": "23", "class": {"name": "LbClientResponse", "extends": null, "implements": ["IResponse"], "modifiers": ["static"]}}, {"method_name": "getHeaders", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,?>", "snippet": "            public Map<String, ?> getHeaders() {                return this.response.headers();            }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/route/feign/LabelLoadBalancerFactory.java", "stars": "23", "class": {"name": "LbClientResponse", "extends": null, "implements": ["IResponse"], "modifiers": ["static"]}}, {"method_name": "close", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "            public void close() throws IOException {                if(this.response != null && this.response.body() != null){                    this.response.body().close();                }            }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/route/feign/LabelLoadBalancerFactory.java", "stars": "23", "class": {"name": "LbClientResponse", "extends": null, "implements": ["IResponse"], "modifiers": ["static"]}}, {"method_name": "toResponse", "params": [], "throws": null, "modifiers": [], "return_type": "Response", "snippet": "            Response toResponse(){                return this.response;            }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/common/src/main/java/com/webank/wedatasphere/exchangis/route/feign/LabelLoadBalancerFactory.java", "stars": "23", "class": {"name": "LbClientResponse", "extends": null, "implements": ["IResponse"], "modifiers": ["static"]}}, {"method_name": "testHashCode", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testHashCode() {    Object arr;    arr = new long[] { 1 };    assertEquals(Arrays.hashCode((long[]) arr), ArrayUtil.hashCode(arr));    arr = new int[] { 1 };    assertEquals(Arrays.hashCode((int[]) arr), ArrayUtil.hashCode(arr));    arr = new short[] { 1 };    assertEquals(Arrays.hashCode((short[]) arr), ArrayUtil.hashCode(arr));    arr = new char[] { 1 };    assertEquals(Arrays.hashCode((char[]) arr), ArrayUtil.hashCode(arr));    arr = new byte[] { 1 };    assertEquals(Arrays.hashCode((byte[]) arr), ArrayUtil.hashCode(arr));    arr = new boolean[] { true };    assertEquals(Arrays.hashCode((boolean[]) arr), ArrayUtil.hashCode(arr));    arr = new float[] { 1f };    assertEquals(Arrays.hashCode((float[]) arr), ArrayUtil.hashCode(arr));    arr = new double[] { 1d };    assertEquals(Arrays.hashCode((double[]) arr), ArrayUtil.hashCode(arr));    arr = new Object[] { \"str\" };    assertEquals(Arrays.hashCode((Object[]) arr), ArrayUtil.hashCode(arr));    assertEquals(0, ArrayUtil.hashCode(null));    assertEquals(\"str\".hashCode(), ArrayUtil.hashCode(\"str\"));    assertEquals(Integer.valueOf(1).hashCode(), ArrayUtil.hashCode(1));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ArrayUtilTest.java", "stars": "15", "class": {"name": "ArrayUtilTest", "extends": "ArrayUtil", "implements": null, "modifiers": []}}, {"method_name": "testequals", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testequals() {    assertTrue(ArrayUtil.equals(new long[] { 1 }, new long[] { 1 }));    assertTrue(ArrayUtil.equals(new int[] { 1 }, new int[] { 1 }));    assertTrue(ArrayUtil.equals(new short[] { 1 }, new short[] { 1 }));    assertTrue(ArrayUtil.equals(new char[] { 1 }, new char[] { 1 }));    assertTrue(ArrayUtil.equals(new byte[] { 1 }, new byte[] { 1 }));    assertTrue(ArrayUtil.equals(new boolean[] { true }, new boolean[] { true }));    assertTrue(ArrayUtil.equals(new float[] { 1f }, new float[] { 1f }));    assertTrue(ArrayUtil.equals(new double[] { 1d }, new double[] { 1d }));    assertTrue(ArrayUtil.equals(new Object[] { \"str\" }, new Object[] { \"str\" }));    assertFalse(ArrayUtil.equals(new long[] { 1 }, new long[] { 2 }));    assertFalse(ArrayUtil.equals(new int[] { 1 }, new int[] { 2 }));    assertFalse(ArrayUtil.equals(new short[] { 1 }, new short[] { 2 }));    assertFalse(ArrayUtil.equals(new char[] { 1 }, new char[] { 2 }));    assertFalse(ArrayUtil.equals(new byte[] { 1 }, new byte[] { 2 }));    assertFalse(ArrayUtil.equals(new boolean[] { true }, new boolean[] { false }));    assertFalse(ArrayUtil.equals(new float[] { 1f }, new float[] { 2f }));    assertFalse(ArrayUtil.equals(new double[] { 1d }, new double[] { 2d }));    assertFalse(ArrayUtil.equals(new Object[] { \"str\" }, new Object[] { \"rts\" }));    assertTrue(ArrayUtil.equals(null, null));    assertFalse(ArrayUtil.equals(new long[] { 1 }, null));    assertFalse(ArrayUtil.equals(null, new long[] { 1 }));    assertTrue(ArrayUtil.equals(1, 1));    assertTrue(ArrayUtil.equals(\"str\", \"str\"));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ArrayUtilTest.java", "stars": "15", "class": {"name": "ArrayUtilTest", "extends": "ArrayUtil", "implements": null, "modifiers": []}}, {"method_name": "testToString", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void testToString() {    Object arr;    arr = new long[] { 1 };    assertEquals(Arrays.toString((long[]) arr), ArrayUtil.toString(arr));    arr = new int[] { 1 };    assertEquals(Arrays.toString((int[]) arr), ArrayUtil.toString(arr));    arr = new short[] { 1 };    assertEquals(Arrays.toString((short[]) arr), ArrayUtil.toString(arr));    arr = new char[] { 1 };    assertEquals(Arrays.toString((char[]) arr), ArrayUtil.toString(arr));    arr = new byte[] { 1 };    assertEquals(Arrays.toString((byte[]) arr), ArrayUtil.toString(arr));    arr = new boolean[] { true };    assertEquals(Arrays.toString((boolean[]) arr), ArrayUtil.toString(arr));    arr = new float[] { 1f };    assertEquals(Arrays.toString((float[]) arr), ArrayUtil.toString(arr));    arr = new double[] { 1d };    assertEquals(Arrays.toString((double[]) arr), ArrayUtil.toString(arr));    arr = new Object[] { \"str\" };    assertEquals(Arrays.toString((Object[]) arr), ArrayUtil.toString(arr));    assertEquals(Integer.valueOf(1).toString(), ArrayUtil.toString(1));    assertEquals(\"null\", ArrayUtil.toString(null));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/reflection/ArrayUtilTest.java", "stars": "15", "class": {"name": "ArrayUtilTest", "extends": "ArrayUtil", "implements": null, "modifiers": []}}, {"method_name": "onTouchEvent", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onTouchEvent (android.view.MotionEvent p0)\t{\t\treturn n_onTouchEvent (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsSeekBar.java", "stars": "2", "class": {"name": "FormsSeekBar", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onTouchEvent", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onTouchEvent (android.view.MotionEvent p0);\tpublic boolean isPressed ()\t{\t\treturn n_isPressed ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsSeekBar.java", "stars": "2", "class": {"name": "FormsSeekBar", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "isPressed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean isPressed ()\t{\t\treturn n_isPressed ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsSeekBar.java", "stars": "2", "class": {"name": "FormsSeekBar", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_isPressed", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_isPressed ();\tpublic void setPressed (boolean p0)\t{\t\tn_setPressed (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsSeekBar.java", "stars": "2", "class": {"name": "FormsSeekBar", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "setPressed", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setPressed (boolean p0)\t{\t\tn_setPressed (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsSeekBar.java", "stars": "2", "class": {"name": "FormsSeekBar", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_setPressed", "params": ["boolean"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_setPressed (boolean p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsSeekBar.java", "stars": "2", "class": {"name": "FormsSeekBar", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsSeekBar.java", "stars": "2", "class": {"name": "FormsSeekBar", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/FormsSeekBar.java", "stars": "2", "class": {"name": "FormsSeekBar", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "setup", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setup() throws Exception {    DataSource dataSource = BaseDataTest.createBlogDataSource();    BaseDataTest.runScript(dataSource, BaseDataTest.BLOG_DDL);    BaseDataTest.runScript(dataSource, BaseDataTest.BLOG_DATA);    TransactionFactory transactionFactory = new JdbcTransactionFactory();    Environment environment = new Environment(\"Production\", transactionFactory, dataSource);    Configuration configuration = new Configuration(environment);    configuration.setLazyLoadingEnabled(true);    configuration.setUseActualParamName(false); // to test legacy style reference (#{0} #{1})    configuration.getTypeAliasRegistry().registerAlias(Blog.class);    configuration.getTypeAliasRegistry().registerAlias(Post.class);    configuration.getTypeAliasRegistry().registerAlias(Author.class);    configuration.addMapper(BoundBlogMapper.class);    configuration.addMapper(BoundAuthorMapper.class);    sqlSessionFactory = new SqlSessionFactoryBuilder().build(configuration);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldSelectBlogWithPostsUsingSubSelect", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSelectBlogWithPostsUsingSubSelect() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);      Blog b = mapper.selectBlogWithPostsUsingSubSelect(1);      assertEquals(1, b.getId());      assertNotNull(b.getAuthor());      assertEquals(101, b.getAuthor().getId());      assertEquals(\"jim\", b.getAuthor().getUsername());      assertEquals(\"********\", b.getAuthor().getPassword());      assertEquals(2, b.getPosts().size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldFindPostsInList", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFindPostsInList() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundAuthorMapper mapper = session.getMapper(BoundAuthorMapper.class);      List<Post> posts = mapper.findPostsInList(new ArrayList<Integer>() {{        add(1);        add(3);        add(5);      }});      assertEquals(3, posts.size());      session.rollback();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldFindPostsInArray", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFindPostsInArray() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundAuthorMapper mapper = session.getMapper(BoundAuthorMapper.class);      Integer[] params = new Integer[]{1, 3, 5};      List<Post> posts = mapper.findPostsInArray(params);      assertEquals(3, posts.size());      session.rollback();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldFindThreeSpecificPosts", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFindThreeSpecificPosts() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundAuthorMapper mapper = session.getMapper(BoundAuthorMapper.class);      List<Post> posts = mapper.findThreeSpecificPosts(1, new RowBounds(1, 1), 3, 5);      assertEquals(1, posts.size());      assertEquals(3, posts.get(0).getId());      session.rollback();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldInsertAuthorWithSelectKey", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldInsertAuthorWithSelectKey() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundAuthorMapper mapper = session.getMapper(BoundAuthorMapper.class);      Author author = new Author(-1, \"cbegin\", \"******\", \"cbegin@nowhere.com\", \"N/A\", Section.NEWS);      int rows = mapper.insertAuthor(author);      assertEquals(1, rows);      session.rollback();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "verifyErrorMessageFromSelectKey", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void verifyErrorMessageFromSelectKey() {    try (SqlSession session = sqlSessionFactory.openSession()) {      try {        BoundAuthorMapper mapper = session.getMapper(BoundAuthorMapper.class);        Author author = new Author(-1, \"cbegin\", \"******\", \"cbegin@nowhere.com\", \"N/A\", Section.NEWS);        when(() -> mapper.insertAuthorInvalidSelectKey(author));        then(caughtException()).isInstanceOf(PersistenceException.class).hasMessageContaining(            \"### The error may exist in org/apache/ibatis/binding/BoundAuthorMapper.xml\" + System.lineSeparator() +                \"### The error may involve org.apache.ibatis.binding.BoundAuthorMapper.insertAuthorInvalidSelectKey!selectKey\" + System.lineSeparator() +                \"### The error occurred while executing a query\");      } finally {        session.rollback();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "verifyErrorMessageFromInsertAfterSelectKey", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void verifyErrorMessageFromInsertAfterSelectKey() {    try (SqlSession session = sqlSessionFactory.openSession()) {      try {        BoundAuthorMapper mapper = session.getMapper(BoundAuthorMapper.class);        Author author = new Author(-1, \"cbegin\", \"******\", \"cbegin@nowhere.com\", \"N/A\", Section.NEWS);        when(() -> mapper.insertAuthorInvalidInsert(author));        then(caughtException()).isInstanceOf(PersistenceException.class).hasMessageContaining(            \"### The error may exist in org/apache/ibatis/binding/BoundAuthorMapper.xml\" + System.lineSeparator() +                \"### The error may involve org.apache.ibatis.binding.BoundAuthorMapper.insertAuthorInvalidInsert\" + System.lineSeparator() +                \"### The error occurred while executing an update\");      } finally {        session.rollback();      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldInsertAuthorWithSelectKeyAndDynamicParams", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldInsertAuthorWithSelectKeyAndDynamicParams() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundAuthorMapper mapper = session.getMapper(BoundAuthorMapper.class);      Author author = new Author(-1, \"cbegin\", \"******\", \"cbegin@nowhere.com\", \"N/A\", Section.NEWS);      int rows = mapper.insertAuthorDynamic(author);      assertEquals(1, rows);      assertNotEquals(-1, author.getId()); // id must be autogenerated      Author author2 = mapper.selectAuthor(author.getId());      assertNotNull(author2);      assertEquals(author.getEmail(), author2.getEmail());      session.rollback();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldSelectRandom", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSelectRandom() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);      Integer x = mapper.selectRandom();      assertNotNull(x);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldExecuteBoundSelectListOfBlogsStatement", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldExecuteBoundSelectListOfBlogsStatement() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);      List<Blog> blogs = mapper.selectBlogs();      assertEquals(2, blogs.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldExecuteBoundSelectMapOfBlogsById", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldExecuteBoundSelectMapOfBlogsById() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);      Map<Integer,Blog> blogs = mapper.selectBlogsAsMapById();      assertEquals(2, blogs.size());      for(Map.Entry<Integer,Blog> blogEntry : blogs.entrySet()) {        assertEquals(blogEntry.getKey(), (Integer) blogEntry.getValue().getId());      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldExecuteMultipleBoundSelectOfBlogsByIdInWithProvidedResultHandlerBetweenSessions", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldExecuteMultipleBoundSelectOfBlogsByIdInWithProvidedResultHandlerBetweenSessions() {    final DefaultResultHandler handler = new DefaultResultHandler();    try (SqlSession session = sqlSessionFactory.openSession()) {      session.select(\"selectBlogsAsMapById\", handler);    }    final DefaultResultHandler moreHandler = new DefaultResultHandler();    try (SqlSession session = sqlSessionFactory.openSession()) {      session.select(\"selectBlogsAsMapById\", moreHandler);    }    assertEquals(2, handler.getResultList().size());    assertEquals(2, moreHandler.getResultList().size());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldExecuteMultipleBoundSelectOfBlogsByIdInWithProvidedResultHandlerInSameSession", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldExecuteMultipleBoundSelectOfBlogsByIdInWithProvidedResultHandlerInSameSession() {    try (SqlSession session = sqlSessionFactory.openSession()) {      final DefaultResultHandler handler = new DefaultResultHandler();      session.select(\"selectBlogsAsMapById\", handler);      final DefaultResultHandler moreHandler = new DefaultResultHandler();      session.select(\"selectBlogsAsMapById\", moreHandler);      assertEquals(2, handler.getResultList().size());      assertEquals(2, moreHandler.getResultList().size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldExecuteMultipleBoundSelectMapOfBlogsByIdInSameSessionWithoutClearingLocalCache", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldExecuteMultipleBoundSelectMapOfBlogsByIdInSameSessionWithoutClearingLocalCache() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);      Map<Integer,Blog> blogs = mapper.selectBlogsAsMapById();      Map<Integer,Blog> moreBlogs = mapper.selectBlogsAsMapById();      assertEquals(2, blogs.size());      assertEquals(2, moreBlogs.size());      for(Map.Entry<Integer,Blog> blogEntry : blogs.entrySet()) {        assertEquals(blogEntry.getKey(), (Integer) blogEntry.getValue().getId());      }      for(Map.Entry<Integer,Blog> blogEntry : moreBlogs.entrySet()) {        assertEquals(blogEntry.getKey(), (Integer) blogEntry.getValue().getId());      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldExecuteMultipleBoundSelectMapOfBlogsByIdBetweenTwoSessionsWithGlobalCacheEnabled", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldExecuteMultipleBoundSelectMapOfBlogsByIdBetweenTwoSessionsWithGlobalCacheEnabled() {    Map<Integer,Blog> blogs;    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);      blogs = mapper.selectBlogsAsMapById();    }    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);      Map<Integer,Blog> moreBlogs = mapper.selectBlogsAsMapById();      assertEquals(2, blogs.size());      assertEquals(2, moreBlogs.size());      for(Map.Entry<Integer,Blog> blogEntry : blogs.entrySet()) {        assertEquals(blogEntry.getKey(), (Integer) blogEntry.getValue().getId());      }      for(Map.Entry<Integer,Blog> blogEntry : moreBlogs.entrySet()) {        assertEquals(blogEntry.getKey(), (Integer) blogEntry.getValue().getId());      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldSelectListOfBlogsUsingXMLConfig", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSelectListOfBlogsUsingXMLConfig() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);      List<Blog> blogs = mapper.selectBlogsFromXML();      assertEquals(2, blogs.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldExecuteBoundSelectListOfBlogsStatementUsingProvider", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldExecuteBoundSelectListOfBlogsStatementUsingProvider() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);      List<Blog> blogs = mapper.selectBlogsUsingProvider();      assertEquals(2, blogs.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldExecuteBoundSelectListOfBlogsAsMaps", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldExecuteBoundSelectListOfBlogsAsMaps() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);      List<Map<String,Object>> blogs = mapper.selectBlogsAsMaps();      assertEquals(2, blogs.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldSelectListOfPostsLike", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSelectListOfPostsLike() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);      List<Post> posts = mapper.selectPostsLike(new RowBounds(1,1),\"%a%\");      assertEquals(1, posts.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldSelectListOfPostsLikeTwoParameters", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSelectListOfPostsLikeTwoParameters() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);      List<Post> posts = mapper.selectPostsLikeSubjectAndBody(new RowBounds(1,1),\"%a%\",\"%a%\");      assertEquals(1, posts.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldExecuteBoundSelectOneBlogStatement", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldExecuteBoundSelectOneBlogStatement() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);      Blog blog = mapper.selectBlog(1);      assertEquals(1, blog.getId());      assertEquals(\"Jim Business\", blog.getTitle());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldExecuteBoundSelectOneBlogStatementWithConstructor", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldExecuteBoundSelectOneBlogStatementWithConstructor() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);      Blog blog = mapper.selectBlogUsingConstructor(1);      assertEquals(1, blog.getId());      assertEquals(\"Jim Business\", blog.getTitle());      assertNotNull(blog.getAuthor(), \"author should not be null\");      List<Post> posts = blog.getPosts();      assertTrue(posts != null && !posts.isEmpty(), \"posts should not be empty\");    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldExecuteBoundSelectBlogUsingConstructorWithResultMap", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldExecuteBoundSelectBlogUsingConstructorWithResultMap() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);      Blog blog = mapper.selectBlogUsingConstructorWithResultMap(1);      assertEquals(1, blog.getId());      assertEquals(\"Jim Business\", blog.getTitle());      assertNotNull(blog.getAuthor(), \"author should not be null\");      List<Post> posts = blog.getPosts();      assertTrue(posts != null && !posts.isEmpty(), \"posts should not be empty\");    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldExecuteBoundSelectBlogUsingConstructorWithResultMapAndProperties", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldExecuteBoundSelectBlogUsingConstructorWithResultMapAndProperties() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);      Blog blog = mapper.selectBlogUsingConstructorWithResultMapAndProperties(1);      assertEquals(1, blog.getId());      assertEquals(\"Jim Business\", blog.getTitle());      assertNotNull(blog.getAuthor(), \"author should not be null\");      Author author = blog.getAuthor();      assertEquals(101, author.getId());      assertEquals(\"jim@ibatis.apache.org\", author.getEmail());      assertEquals(\"jim\", author.getUsername());      assertEquals(Section.NEWS, author.getFavouriteSection());      List<Post> posts = blog.getPosts();      assertNotNull(posts, \"posts should not be empty\");      assertEquals(2, posts.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldExecuteBoundSelectBlogUsingConstructorWithResultMapCollection", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldExecuteBoundSelectBlogUsingConstructorWithResultMapCollection() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);      Blog blog = mapper.selectBlogUsingConstructorWithResultMapCollection(1);      assertEquals(1, blog.getId());      assertEquals(\"Jim Business\", blog.getTitle());      assertNotNull(blog.getAuthor(), \"author should not be null\");      List<Post> posts = blog.getPosts();      assertTrue(posts != null && !posts.isEmpty(), \"posts should not be empty\");    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldExecuteBoundSelectOneBlogStatementWithConstructorUsingXMLConfig", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldExecuteBoundSelectOneBlogStatementWithConstructorUsingXMLConfig() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);      Blog blog = mapper.selectBlogByIdUsingConstructor(1);      assertEquals(1, blog.getId());      assertEquals(\"Jim Business\", blog.getTitle());      assertNotNull(blog.getAuthor(), \"author should not be null\");      List<Post> posts = blog.getPosts();      assertTrue(posts != null && !posts.isEmpty(), \"posts should not be empty\");    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldSelectOneBlogAsMap", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSelectOneBlogAsMap() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);      Map<String,Object> blog = mapper.selectBlogAsMap(new HashMap<String, Object>() {        {          put(\"id\", 1);        }      });      assertEquals(1, blog.get(\"ID\"));      assertEquals(\"Jim Business\", blog.get(\"TITLE\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldSelectOneAuthor", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSelectOneAuthor() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundAuthorMapper mapper = session.getMapper(BoundAuthorMapper.class);      Author author = mapper.selectAuthor(101);      assertEquals(101, author.getId());      assertEquals(\"jim\", author.getUsername());      assertEquals(\"********\", author.getPassword());      assertEquals(\"jim@ibatis.apache.org\", author.getEmail());      assertEquals(\"\", author.getBio());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldSelectOneAuthorFromCache", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSelectOneAuthorFromCache() {    Author author1 = selectOneAuthor();    Author author2 = selectOneAuthor();    assertSame(author1, author2, \"Same (cached) instance should be returned unless rollback is called.\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "selectOneAuthor", "params": [], "throws": null, "modifiers": ["private"], "return_type": "Author", "snippet": "  private Author selectOneAuthor() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundAuthorMapper mapper = session.getMapper(BoundAuthorMapper.class);      return mapper.selectAuthor(101);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldSelectOneAuthorByConstructor", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSelectOneAuthorByConstructor() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundAuthorMapper mapper = session.getMapper(BoundAuthorMapper.class);      Author author = mapper.selectAuthorConstructor(101);      assertEquals(101, author.getId());      assertEquals(\"jim\", author.getUsername());      assertEquals(\"********\", author.getPassword());      assertEquals(\"jim@ibatis.apache.org\", author.getEmail());      assertEquals(\"\", author.getBio());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldSelectDraftTypedPosts", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSelectDraftTypedPosts() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);      List<Post> posts = mapper.selectPosts();      assertEquals(5, posts.size());      assertTrue(posts.get(0) instanceof DraftPost);      assertFalse(posts.get(1) instanceof DraftPost);      assertTrue(posts.get(2) instanceof DraftPost);      assertFalse(posts.get(3) instanceof DraftPost);      assertFalse(posts.get(4) instanceof DraftPost);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldSelectDraftTypedPostsWithResultMap", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSelectDraftTypedPostsWithResultMap() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);      List<Post> posts = mapper.selectPostsWithResultMap();      assertEquals(5, posts.size());      assertTrue(posts.get(0) instanceof DraftPost);      assertFalse(posts.get(1) instanceof DraftPost);      assertTrue(posts.get(2) instanceof DraftPost);      assertFalse(posts.get(3) instanceof DraftPost);      assertFalse(posts.get(4) instanceof DraftPost);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldReturnANotNullToString", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldReturnANotNullToString() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);      assertNotNull(mapper.toString());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldReturnANotNullHashCode", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldReturnANotNullHashCode() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);      assertNotNull(mapper.hashCode());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldCompareTwoMappers", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldCompareTwoMappers() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);      BoundBlogMapper mapper2 = session.getMapper(BoundBlogMapper.class);      assertNotEquals(mapper, mapper2);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldFailWhenSelectingOneBlogWithNonExistentParam", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFailWhenSelectingOneBlogWithNonExistentParam() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);      assertThrows(Exception.class, () -> mapper.selectBlogByNonExistentParam(1));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldFailWhenSelectingOneBlogWithNullParam", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFailWhenSelectingOneBlogWithNullParam() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);      assertThrows(Exception.class, () -> mapper.selectBlogByNullParam(null));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldFailWhenSelectingOneBlogWithNonExistentNestedParam", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFailWhenSelectingOneBlogWithNonExistentNestedParam() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);      mapper.selectBlogByNonExistentNestedParam(1, Collections.<String, Object>emptyMap());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldSelectBlogWithDefault30ParamNames", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSelectBlogWithDefault30ParamNames() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);      Blog blog = mapper.selectBlogByDefault30ParamNames(1, \"Jim Business\");      assertNotNull(blog);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldSelectBlogWithDefault31ParamNames", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSelectBlogWithDefault31ParamNames() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);      Blog blog = mapper.selectBlogByDefault31ParamNames(1, \"Jim Business\");      assertNotNull(blog);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldSelectBlogWithAParamNamedValue", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldSelectBlogWithAParamNamedValue() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);      Blog blog = mapper.selectBlogWithAParamNamedValue(\"id\", 1, \"Jim Business\");      assertNotNull(blog);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldCacheMapperMethod", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void shouldCacheMapperMethod() throws Exception {    try (SqlSession session = sqlSessionFactory.openSession()) {      // Create another mapper instance with a method cache we can test against:      final MapperProxyFactory<BoundBlogMapper> mapperProxyFactory = new MapperProxyFactory<BoundBlogMapper>(BoundBlogMapper.class);      assertEquals(BoundBlogMapper.class, mapperProxyFactory.getMapperInterface());      final BoundBlogMapper mapper = mapperProxyFactory.newInstance(session);      assertNotSame(mapper, mapperProxyFactory.newInstance(session));      assertTrue(mapperProxyFactory.getMethodCache().isEmpty());      // Mapper methods we will call later:      final Method selectBlog = BoundBlogMapper.class.getMethod(\"selectBlog\", Integer.TYPE);      final Method selectBlogByIdUsingConstructor = BoundBlogMapper.class.getMethod(\"selectBlogByIdUsingConstructor\", Integer.TYPE);      // Call mapper method and verify it is cached:      mapper.selectBlog(1);      assertEquals(1, mapperProxyFactory.getMethodCache().size());      assertTrue(mapperProxyFactory.getMethodCache().containsKey(selectBlog));      final MapperMethodInvoker cachedSelectBlog = mapperProxyFactory.getMethodCache().get(selectBlog);      // Call mapper method again and verify the cache is unchanged:      session.clearCache();      mapper.selectBlog(1);      assertEquals(1, mapperProxyFactory.getMethodCache().size());      assertSame(cachedSelectBlog, mapperProxyFactory.getMethodCache().get(selectBlog));      // Call another mapper method and verify that it shows up in the cache as well:      session.clearCache();      mapper.selectBlogByIdUsingConstructor(1);      assertEquals(2, mapperProxyFactory.getMethodCache().size());      assertSame(cachedSelectBlog, mapperProxyFactory.getMethodCache().get(selectBlog));      assertTrue(mapperProxyFactory.getMethodCache().containsKey(selectBlogByIdUsingConstructor));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetBlogsWithAuthorsAndPosts", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetBlogsWithAuthorsAndPosts() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);      List<Blog> blogs = mapper.selectBlogsWithAutorAndPosts();      assertEquals(2, blogs.size());      assertTrue(blogs.get(0) instanceof Proxy);      assertEquals(101, blogs.get(0).getAuthor().getId());      assertEquals(1, blogs.get(0).getPosts().size());      assertEquals(1, blogs.get(0).getPosts().get(0).getId());      assertTrue(blogs.get(1) instanceof Proxy);      assertEquals(102, blogs.get(1).getAuthor().getId());      assertEquals(1, blogs.get(1).getPosts().size());      assertEquals(2, blogs.get(1).getPosts().get(0).getId());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetBlogsWithAuthorsAndPostsEagerly", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetBlogsWithAuthorsAndPostsEagerly() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);      List<Blog> blogs = mapper.selectBlogsWithAutorAndPostsEagerly();      assertEquals(2, blogs.size());      assertFalse(blogs.get(0) instanceof Factory);      assertEquals(101, blogs.get(0).getAuthor().getId());      assertEquals(1, blogs.get(0).getPosts().size());      assertEquals(1, blogs.get(0).getPosts().get(0).getId());      assertFalse(blogs.get(1) instanceof Factory);      assertEquals(102, blogs.get(1).getAuthor().getId());      assertEquals(1, blogs.get(1).getPosts().size());      assertEquals(2, blogs.get(1).getPosts().get(0).getId());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "executeWithResultHandlerAndRowBounds", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void executeWithResultHandlerAndRowBounds() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);      final DefaultResultHandler handler = new DefaultResultHandler();      mapper.collectRangeBlogs(handler, new RowBounds(1, 1));      assertEquals(1, handler.getResultList().size());      Blog blog = (Blog) handler.getResultList().get(0);      assertEquals(2, blog.getId());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "executeWithMapKeyAndRowBounds", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void executeWithMapKeyAndRowBounds() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);      Map<Integer, Blog> blogs = mapper.selectRangeBlogsAsMapById(new RowBounds(1, 1));      assertEquals(1, blogs.size());      Blog blog = blogs.get(2);      assertEquals(2, blog.getId());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "executeWithCursorAndRowBounds", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void executeWithCursorAndRowBounds() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);      try (Cursor<Blog> blogs = mapper.openRangeBlogs(new RowBounds(1, 1)) ) {        Iterator<Blog> blogIterator = blogs.iterator();        Blog blog = blogIterator.next();        assertEquals(2, blog.getId());        assertFalse(blogIterator.hasNext());      }    } catch (IOException e) {      Assertions.fail(e.getMessage());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "registeredMappers", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void registeredMappers() {    Collection<Class<?>> mapperClasses = sqlSessionFactory.getConfiguration().getMapperRegistry().getMappers();    assertEquals(2, mapperClasses.size());    assertTrue(mapperClasses.contains(BoundBlogMapper.class));    assertTrue(mapperClasses.contains(BoundAuthorMapper.class));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldMapPropertiesUsingRepeatableAnnotation", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldMapPropertiesUsingRepeatableAnnotation() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundAuthorMapper mapper = session.getMapper(BoundAuthorMapper.class);      Author author = new Author(-1, \"cbegin\", \"******\", \"cbegin@nowhere.com\", \"N/A\", Section.NEWS);      mapper.insertAuthor(author);      Author author2 = mapper.selectAuthorMapToPropertiesUsingRepeatable(author.getId());      assertNotNull(author2);      assertEquals(author.getId(), author2.getId());      assertEquals(author.getUsername(), author2.getUsername());      assertEquals(author.getPassword(), author2.getPassword());      assertEquals(author.getBio(), author2.getBio());      assertEquals(author.getEmail(), author2.getEmail());      session.rollback();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldMapConstructorUsingRepeatableAnnotation", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldMapConstructorUsingRepeatableAnnotation() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundAuthorMapper mapper = session.getMapper(BoundAuthorMapper.class);      Author author = new Author(-1, \"cbegin\", \"******\", \"cbegin@nowhere.com\", \"N/A\", Section.NEWS);      mapper.insertAuthor(author);      Author author2 = mapper.selectAuthorMapToConstructorUsingRepeatable(author.getId());      assertNotNull(author2);      assertEquals(author.getId(), author2.getId());      assertEquals(author.getUsername(), author2.getUsername());      assertEquals(author.getPassword(), author2.getPassword());      assertEquals(author.getBio(), author2.getBio());      assertEquals(author.getEmail(), author2.getEmail());      assertEquals(author.getFavouriteSection(), author2.getFavouriteSection());      session.rollback();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldMapUsingSingleRepeatableAnnotation", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldMapUsingSingleRepeatableAnnotation() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundAuthorMapper mapper = session.getMapper(BoundAuthorMapper.class);      Author author = new Author(-1, \"cbegin\", \"******\", \"cbegin@nowhere.com\", \"N/A\", Section.NEWS);      mapper.insertAuthor(author);      Author author2 = mapper.selectAuthorUsingSingleRepeatable(author.getId());      assertNotNull(author2);      assertEquals(author.getId(), author2.getId());      assertEquals(author.getUsername(), author2.getUsername());      assertNull(author2.getPassword());      assertNull(author2.getBio());      assertNull(author2.getEmail());      assertNull(author2.getFavouriteSection());      session.rollback();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldMapWhenSpecifyBothArgAndConstructorArgs", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldMapWhenSpecifyBothArgAndConstructorArgs() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundAuthorMapper mapper = session.getMapper(BoundAuthorMapper.class);      Author author = new Author(-1, \"cbegin\", \"******\", \"cbegin@nowhere.com\", \"N/A\", Section.NEWS);      mapper.insertAuthor(author);      Author author2 = mapper.selectAuthorUsingBothArgAndConstructorArgs(author.getId());      assertNotNull(author2);      assertEquals(author.getId(), author2.getId());      assertEquals(author.getUsername(), author2.getUsername());      assertEquals(author.getPassword(), author2.getPassword());      assertEquals(author.getBio(), author2.getBio());      assertEquals(author.getEmail(), author2.getEmail());      assertEquals(author.getFavouriteSection(), author2.getFavouriteSection());      session.rollback();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldMapWhenSpecifyBothResultAndResults", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldMapWhenSpecifyBothResultAndResults() {    try (SqlSession session = sqlSessionFactory.openSession()) {      BoundAuthorMapper mapper = session.getMapper(BoundAuthorMapper.class);      Author author = new Author(-1, \"cbegin\", \"******\", \"cbegin@nowhere.com\", \"N/A\", Section.NEWS);      mapper.insertAuthor(author);      Author author2 = mapper.selectAuthorUsingBothResultAndResults(author.getId());      assertNotNull(author2);      assertEquals(author.getId(), author2.getId());      assertEquals(author.getUsername(), author2.getUsername());      assertNull(author2.getPassword());      assertNull(author2.getBio());      assertNull(author2.getEmail());      assertNull(author2.getFavouriteSection());      session.rollback();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/binding/BindingTest.java", "stars": "15", "class": {"name": "BindingTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "main", "params": ["String"], "throws": ["InterruptedException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) throws InterruptedException {\t\tsetUp(\"chrome\", \"https://opensource-demo.orangehrmlive.com/\");\t\tdriver.findElement(By.id(\"txtUsername\")).sendKeys(\"Admin\");\t\tWebElement password = driver.findElement(By.name(\"txtPassword\"));\t\tpassword.sendKeys(\"admin123\");\t\tWebElement loginBtn = driver.findElement(By.className(\"button\"));\t\t// Lets pretend click is not working\t\t// driver.findElement(By.className(\"button\")).click();\t\t// to click we need JSExecutor interface in Selenium\t\tJavascriptExecutor js = (JavascriptExecutor) driver;\t\t// highlighting\t\tjs.executeScript(\"arguments[0].style.backgroundColor='Purple'\", loginBtn);\t\tThread.sleep(3000);\t\t// click\t\tjs.executeScript(\"arguments[0].click();\", loginBtn);\t\t// we can scroll up and down\t\tjs.executeScript(\"window.scrollBy(0,25000)\");\t\tdriver.quit();\t}", "url": "https://raw.githubusercontent.com/fadimedibi/SeleniumTurkish/master/src/com/class7/JsExecutor.java", "stars": "3", "class": {"name": "JsExecutor", "extends": "CommonMethods", "implements": null, "modifiers": ["public"]}}, {"method_name": "isSupportStream", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isSupportStream() {            return true;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-textfilewriter/src/main/java/com/alibaba/datax/plugin/writer/txtfilewriter/TxtFileWriter.java", "stars": "23", "class": {"name": "Job", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void init() {            this.writerSliceConfig = this.getPluginJobConf();            this.validateParameter();            String dateFormatOld = this.writerSliceConfig                    .getString(com.alibaba.datax.plugin.unstructuredstorage.writer.Key.FORMAT);            String dateFormatNew = this.writerSliceConfig                    .getString(com.alibaba.datax.plugin.unstructuredstorage.writer.Key.DATE_FORMAT);            if (null == dateFormatNew) {                this.writerSliceConfig                        .set(com.alibaba.datax.plugin.unstructuredstorage.writer.Key.DATE_FORMAT,                                dateFormatOld);            }            if (null != dateFormatOld) {                LOG.warn(\"\u60a8\u4f7f\u7528format\u914d\u7f6e\u65e5\u671f\u683c\u5f0f\u5316, \u8fd9\u662f\u4e0d\u63a8\u8350\u7684\u884c\u4e3a, \u8bf7\u4f18\u5148\u4f7f\u7528dateFormat\u914d\u7f6e\u9879, \u4e24\u9879\u540c\u65f6\u5b58\u5728\u5219\u4f7f\u7528dateFormat.\");            }            UnstructuredStorageWriterUtil                    .validateParameter(this.writerSliceConfig);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-textfilewriter/src/main/java/com/alibaba/datax/plugin/writer/txtfilewriter/TxtFileWriter.java", "stars": "23", "class": {"name": "Job", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "validateParameter", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void validateParameter() {            String path = this.writerSliceConfig.getNecessaryValue(Key.PATH,                    TxtFileWriterErrorCode.REQUIRED_VALUE);            try {                // warn: \u8fd9\u91cc\u7528\u6237\u9700\u8981\u914d\u4e00\u4e2a\u76ee\u5f55                File dir = new File(path);                if (dir.isFile()) {                    throw DataXException                            .asDataXException(                                    TxtFileWriterErrorCode.ILLEGAL_VALUE,                                    String.format(                                            \"\u60a8\u914d\u7f6e\u7684path: [%s] \u4e0d\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u76ee\u5f55, \u8bf7\u60a8\u6ce8\u610f\u6587\u4ef6\u91cd\u540d, \u4e0d\u5408\u6cd5\u76ee\u5f55\u540d\u7b49\u60c5\u51b5.\",                                            path));                }                if (!dir.exists()) {                    boolean createdOk = dir.mkdirs();                    if (!createdOk) {                        throw DataXException                                .asDataXException(                                        TxtFileWriterErrorCode.CONFIG_INVALID_EXCEPTION,                                        String.format(\"\u60a8\u6307\u5b9a\u7684\u6587\u4ef6\u8def\u5f84 : [%s] \u521b\u5efa\u5931\u8d25.\",                                                path));                    }                }            } catch (SecurityException se) {                throw DataXException.asDataXException(                        TxtFileWriterErrorCode.SECURITY_NOT_ENOUGH,                        String.format(\"\u60a8\u6ca1\u6709\u6743\u9650\u521b\u5efa\u6587\u4ef6\u8def\u5f84 : [%s] \", path), se);            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-textfilewriter/src/main/java/com/alibaba/datax/plugin/writer/txtfilewriter/TxtFileWriter.java", "stars": "23", "class": {"name": "Job", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "prepare", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void prepare() {            String path = this.writerSliceConfig.getString(Key.PATH);            String writeMode = this.writerSliceConfig                    .getString(com.alibaba.datax.plugin.unstructuredstorage.writer.Key.WRITE_MODE);            // truncate option handler            if (\"truncate\".equals(writeMode)) {                try {                    File dir = new File(path);                    LOG.info(String.format(\"\u7531\u4e8e\u60a8\u914d\u7f6e\u4e86writeMode truncate, \u5f00\u59cb\u6e05\u7406 [%s] \u4e0b\u9762\u6240\u6709\u5185\u5bb9\", path));                    if(dir.exists()) {                        for (File eachFile : Objects.requireNonNull(dir.listFiles())) {                            FileUtils.forceDelete(eachFile);                        }                    }                } catch (NullPointerException npe) {                    throw DataXException                            .asDataXException(                                    TxtFileWriterErrorCode.Write_FILE_ERROR,                                    String.format(\"\u60a8\u914d\u7f6e\u7684\u76ee\u5f55\u6e05\u7a7a\u65f6\u51fa\u73b0\u7a7a\u6307\u9488\u5f02\u5e38 : [%s]\",                                            path), npe);                } catch (IllegalArgumentException iae) {                    throw DataXException.asDataXException(                            TxtFileWriterErrorCode.SECURITY_NOT_ENOUGH,                            String.format(\"\u60a8\u914d\u7f6e\u7684\u76ee\u5f55\u53c2\u6570\u5f02\u5e38 : [%s]\", path));                } catch (SecurityException se) {                    throw DataXException.asDataXException(                            TxtFileWriterErrorCode.SECURITY_NOT_ENOUGH,                            String.format(\"\u60a8\u6ca1\u6709\u6743\u9650\u67e5\u770b\u76ee\u5f55 : [%s]\", path));                } catch (IOException e) {                    throw DataXException.asDataXException(                            TxtFileWriterErrorCode.Write_FILE_ERROR,                            String.format(\"\u65e0\u6cd5\u6e05\u7a7a\u76ee\u5f55 : [%s]\", path), e);                }            } else if (\"append\".equals(writeMode)) {                LOG.info(\"\u7531\u4e8e\u60a8\u914d\u7f6e\u4e86writeMode append, \u5199\u5165\u524d\u4e0d\u505a\u6e05\u7406\u5de5\u4f5c\");            } else if (\"nonConflict\".equals(writeMode)) {                LOG.info(String.format(                        \"\u7531\u4e8e\u60a8\u914d\u7f6e\u4e86writeMode nonConflict, \u5f00\u59cb\u68c0\u67e5 [%s] \u4e0b\u9762\u7684\u5185\u5bb9\", path));                // warn: check two times about exists, mkdirs                File dir = new File(path);                try {                    if (dir.exists()) {                        if (dir.isFile()) {                            throw DataXException                                    .asDataXException(                                            TxtFileWriterErrorCode.ILLEGAL_VALUE,                                            String.format(                                                    \"\u60a8\u914d\u7f6e\u7684path: [%s] \u4e0d\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u76ee\u5f55, \u8bf7\u60a8\u6ce8\u610f\u6587\u4ef6\u91cd\u540d, \u4e0d\u5408\u6cd5\u76ee\u5f55\u540d\u7b49\u60c5\u51b5.\",                                                    path));                        }                        File[] filesWithFileNamePrefix = dir.listFiles();                        if (null != filesWithFileNamePrefix && filesWithFileNamePrefix.length > 0) {                            List<String> allFiles = new ArrayList<String>();                            for (File eachFile : filesWithFileNamePrefix) {                                allFiles.add(eachFile.getName());                            }                            LOG.error(String.format(\"\u51b2\u7a81\u6587\u4ef6\u5217\u8868\u4e3a: [%s]\",                                    StringUtils.join(allFiles, \",\")));                            throw DataXException                                    .asDataXException(                                            TxtFileWriterErrorCode.ILLEGAL_VALUE,                                            String.format(                                                    \"\u60a8\u914d\u7f6e\u7684path: [%s] \u76ee\u5f55\u4e0d\u4e3a\u7a7a, \u4e0b\u9762\u5b58\u5728\u5176\u4ed6\u6587\u4ef6\u6216\u6587\u4ef6\u5939.\",                                                    path));                        }                    } else {                        boolean createdOk = dir.mkdirs();                        if (!createdOk) {                            throw DataXException                                    .asDataXException(                                            TxtFileWriterErrorCode.CONFIG_INVALID_EXCEPTION,                                            String.format(                                                    \"\u60a8\u6307\u5b9a\u7684\u6587\u4ef6\u8def\u5f84 : [%s] \u521b\u5efa\u5931\u8d25.\",                                                    path));                        }                    }                } catch (SecurityException se) {                    throw DataXException.asDataXException(                            TxtFileWriterErrorCode.SECURITY_NOT_ENOUGH,                            String.format(\"\u60a8\u6ca1\u6709\u6743\u9650\u67e5\u770b\u76ee\u5f55 : [%s]\", path));                }            } else {                throw DataXException                        .asDataXException(                                TxtFileWriterErrorCode.ILLEGAL_VALUE,                                String.format(                                        \"\u4ec5\u652f\u6301 truncate, append, nonConflict \u4e09\u79cd\u6a21\u5f0f, \u4e0d\u652f\u6301\u60a8\u914d\u7f6e\u7684 writeMode \u6a21\u5f0f : [%s]\",                                        writeMode));            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-textfilewriter/src/main/java/com/alibaba/datax/plugin/writer/txtfilewriter/TxtFileWriter.java", "stars": "23", "class": {"name": "Job", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "post", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void post() {            String path = this.writerSliceConfig.getNecessaryValue(Key.PATH,                    TxtFileWriterErrorCode.REQUIRED_VALUE);            if(StringUtils.isNotBlank(this.tempPath)){                try {                    LOG.info(String.format(\"move files or directories under temporary path: %s to path: %s\", tempPath, path));                    try {                        File[] moveFiles = new File(this.tempPath).listFiles();                        for(File moveFile : moveFiles) {                            moveToDirectory(moveFile, new File(path));                        }                    } catch (IOException e) {                        throw DataXException.asDataXException(                                TxtFileWriterErrorCode.Write_FILE_IO_ERROR,                                String.format(\"cannot move temporary directory, message: %s\"                                        , e.getMessage())                        );                    }                }finally{                    try {                        LOG.info(String.format(\"delete temporary path : %s\", tempPath));                        FileUtils.forceDelete(new File(this.tempPath));                        this.tempPath = null;                    }catch(IOException e){                        DataXException de = DataXException.asDataXException(                                TxtFileWriterErrorCode.Write_FILE_IO_ERROR,                                String.format(\"cannot delete temporary directory %s\", this.tempPath)                        );                        LOG.error(de.getMessage(), de);                    }                }            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-textfilewriter/src/main/java/com/alibaba/datax/plugin/writer/txtfilewriter/TxtFileWriter.java", "stars": "23", "class": {"name": "Job", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "destroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void destroy() {            if(StringUtils.isNotBlank(tempPath)){                try {                    LOG.info(String.format(\"delete temporary path : %s\", tempPath));                    FileUtils.forceDelete(new File(this.tempPath));                }catch(IOException e){                    DataXException de = DataXException.asDataXException(                            TxtFileWriterErrorCode.Write_FILE_IO_ERROR,                            String.format(\"cannot delete temporary directory %s\", this.tempPath)                    );                    LOG.error(de.getMessage(), de);                }            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-textfilewriter/src/main/java/com/alibaba/datax/plugin/writer/txtfilewriter/TxtFileWriter.java", "stars": "23", "class": {"name": "Job", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "split", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "List<Configuration>", "snippet": "        public List<Configuration> split(int mandatoryNumber) {            LOG.info(\"begin do split...\");            List<Configuration> writerSplitConfigs = new ArrayList<Configuration>();            String filePrefix = this.writerSliceConfig                    .getString(com.alibaba.datax.plugin.unstructuredstorage.writer.Key.FILE_NAME, \"\");            Set<String> allFiles;            String path = null;            try {                path = this.writerSliceConfig.getString(Key.PATH);                File dir = new File(path);                allFiles = new HashSet<>(Arrays.asList(Objects.requireNonNull(dir.list())));            } catch (SecurityException se) {                throw DataXException.asDataXException(                        TxtFileWriterErrorCode.SECURITY_NOT_ENOUGH,                        String.format(\"\u60a8\u6ca1\u6709\u6743\u9650\u67e5\u770b\u76ee\u5f55 : [%s]\", path));            }            this.tempPath = UnstructuredStorageWriterUtil.buildTmpFilePath(path,                    String.format(CommonConstant.TEMP_PREFIX, System.currentTimeMillis()), IOUtils.DIR_SEPARATOR ,                    allFiles::contains);            String fileSuffix;            for (int i = 0; i < mandatoryNumber; i++) {                // handle same file name                Configuration splitedTaskConfig = this.writerSliceConfig                        .clone();                splitedTaskConfig.set(com.alibaba.datax.plugin.unstructuredstorage.writer.Key.TEMP_PATH, this.tempPath);                if(getTransportType() == TransportType.STREAM){                    splitedTaskConfig.set(com.alibaba.datax.plugin.unstructuredstorage.writer.Key.FILE_NAME,                           filePrefix);                    writerSplitConfigs.add(splitedTaskConfig);                    continue;                }                String fullFileName = null;                do{                    fileSuffix = UUID.randomUUID().toString().replace('-', '_');                    fullFileName = String.format(\"%s__%s\", filePrefix,                            fileSuffix);                }while(allFiles.contains(fullFileName));                allFiles.add(fullFileName);                String suffix = CompressSuffixName.chooseSuffix(this.writerSliceConfig                        .getString(com.alibaba.datax.plugin.unstructuredstorage.writer.Key.COMPRESS, \"\"));                if(StringUtils.isNotBlank(suffix)){                    fullFileName += suffix;                }                splitedTaskConfig                        .set(com.alibaba.datax.plugin.unstructuredstorage.writer.Key.FILE_NAME,                                fullFileName);                LOG.info(String.format(\"splited write file name:[%s]\",                        fullFileName));                writerSplitConfigs.add(splitedTaskConfig);            }            LOG.info(\"end do split.\");            return writerSplitConfigs;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-textfilewriter/src/main/java/com/alibaba/datax/plugin/writer/txtfilewriter/TxtFileWriter.java", "stars": "23", "class": {"name": "Job", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "moveToDirectory", "params": ["File", "File"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "        private void moveToDirectory(File src, File destDir) throws IOException{            if(src.isDirectory()){                File childDestDir = new File(destDir, src.getName());                if(childDestDir.exists()){                    if(!childDestDir.isDirectory()){                        throw new IOException(\"Destination has the conflict file named '\" + childDestDir.getPath() + \"'\");                    }                    File[] childFiles = src.listFiles();                    if(null != childFiles) {                        for (File childFile : childFiles) {                            moveToDirectory(childFile, childDestDir);                        }                    }                }else{                    FileUtils.moveToDirectory(src, destDir, true);                }            }else{                File dest = new File(destDir, src.getName());                boolean canMove = !dest.exists() || (dest.exists() && dest.delete());                if(canMove){                    FileUtils.moveFile(src, dest);                }            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-textfilewriter/src/main/java/com/alibaba/datax/plugin/writer/txtfilewriter/TxtFileWriter.java", "stars": "23", "class": {"name": "Job", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void init() {            this.writerSliceConfig = this.getPluginJobConf();            this.tempPath = this.writerSliceConfig                    .getString(com.alibaba.datax.plugin.unstructuredstorage.writer.Key.TEMP_PATH, \"\");            this.fileName = this.writerSliceConfig                    .getString(com.alibaba.datax.plugin.unstructuredstorage.writer.Key.FILE_NAME, \"\");        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-textfilewriter/src/main/java/com/alibaba/datax/plugin/writer/txtfilewriter/TxtFileWriter.java", "stars": "23", "class": {"name": "Task", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "prepare", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void prepare() {        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-textfilewriter/src/main/java/com/alibaba/datax/plugin/writer/txtfilewriter/TxtFileWriter.java", "stars": "23", "class": {"name": "Task", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "startWrite", "params": ["RecordReceiver"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void startWrite(RecordReceiver lineReceiver) {            LOG.debug(\"begin do write...\");            String fileFullPath = this.buildFilePath(this.fileName);            LOG.debug(String.format(\"write to file : [%s]\", fileFullPath));            OutputStream outputStream = null;            try {                File newFile = new File(fileFullPath);                newFile.getParentFile().mkdirs();                if(!newFile.createNewFile()){                    throw DataXException.asDataXException(TxtFileWriterErrorCode.SECURITY_NOT_ENOUGH,                            String.format(\"\u65e0\u6cd5\u521b\u5efa\u5f85\u5199\u6587\u4ef6 : [%s]\", this.fileName));                }                outputStream = new FileOutputStream(newFile);                UnstructuredStorageWriterUtil.writeToStream(lineReceiver,                        outputStream, this.writerSliceConfig, this.fileName,                        this.getTaskPluginCollector());            } catch (SecurityException se) {                throw DataXException.asDataXException(                        TxtFileWriterErrorCode.SECURITY_NOT_ENOUGH,                        String.format(\"\u60a8\u6ca1\u6709\u6743\u9650\u521b\u5efa\u6587\u4ef6  : [%s]\", this.fileName));            } catch (IOException ioe) {                throw DataXException.asDataXException(                        TxtFileWriterErrorCode.Write_FILE_IO_ERROR,                        String.format(\"\u65e0\u6cd5\u521b\u5efa\u5f85\u5199\u6587\u4ef6 : [%s]\", this.fileName), ioe);            } finally {                IOUtils.closeQuietly(outputStream);            }            LOG.debug(\"end do write\");        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-textfilewriter/src/main/java/com/alibaba/datax/plugin/writer/txtfilewriter/TxtFileWriter.java", "stars": "23", "class": {"name": "Task", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "startWrite", "params": ["ChannelInput"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void startWrite(ChannelInput channelInput) {            LOG.info(\"begin do write from stream channel...\");            try {                InputStream inputStream;                while((inputStream = channelInput.nextStream()) != null){                    StreamMeta metaData = channelInput.streamMetaData(this.writerSliceConfig                            .getString(com.alibaba.datax.plugin.unstructuredstorage.writer.Key.ENCODING, \"UTF-8\"));                    LOG.info(\"begin do read input stream, name : \" + metaData.getName() + \", relativePath: \" + metaData.getRelativePath());                    String relativePath = metaData.getRelativePath();                    if(StringUtils.isNotBlank(fileName)){                        //modify the relativePath                        relativePath = relativePath.substring(0, relativePath.lastIndexOf(IOUtils.DIR_SEPARATOR) + 1)                                + fileName + \"_\" + metaData.getName();                    }                    String fileFullPath = this.buildFilePath(relativePath);                    File file = new File(fileFullPath);                    file.getParentFile().mkdirs();                    FileOutputStream outputStream = new FileOutputStream(file, false);                    try {                        UnstructuredStorageWriterUtil.writeToStream(inputStream, outputStream                        , this.writerSliceConfig);                        outputStream.flush();                    }finally{                        IOUtils.closeQuietly(outputStream);                    }                }            } catch (IOException e) {                throw DataXException.asDataXException(FrameworkErrorCode.CHANNEL_STREAM_ERROR, e);            }            LOG.info(\"end do write from stream channel\");        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-textfilewriter/src/main/java/com/alibaba/datax/plugin/writer/txtfilewriter/TxtFileWriter.java", "stars": "23", "class": {"name": "Task", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "buildFilePath", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "        private String buildFilePath(String fileName) {            boolean isEndWithSeparator = false;            switch (IOUtils.DIR_SEPARATOR) {                case IOUtils.DIR_SEPARATOR_UNIX:                    isEndWithSeparator = this.tempPath.endsWith(String                            .valueOf(IOUtils.DIR_SEPARATOR));                    break;                case IOUtils.DIR_SEPARATOR_WINDOWS:                    isEndWithSeparator = this.tempPath.endsWith(String                            .valueOf(IOUtils.DIR_SEPARATOR_WINDOWS));                    break;                default:                    break;            }            if (!isEndWithSeparator) {                this.tempPath = this.tempPath + IOUtils.DIR_SEPARATOR;            }            return String.format(\"%s%s\", this.tempPath, fileName);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-textfilewriter/src/main/java/com/alibaba/datax/plugin/writer/txtfilewriter/TxtFileWriter.java", "stars": "23", "class": {"name": "Task", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "post", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void post() {        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-textfilewriter/src/main/java/com/alibaba/datax/plugin/writer/txtfilewriter/TxtFileWriter.java", "stars": "23", "class": {"name": "Task", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "destroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void destroy() {        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-textfilewriter/src/main/java/com/alibaba/datax/plugin/writer/txtfilewriter/TxtFileWriter.java", "stars": "23", "class": {"name": "Task", "extends": "Writer", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "createRestApi", "params": ["OptionService"], "throws": null, "modifiers": ["public"], "return_type": "Docket", "snippet": "    public Docket createRestApi(OptionService optionService) {        return new Docket(DocumentationType.SWAGGER_2)                .apiInfo(apiInfo())                .host(optionService.getBlogBaseUrl())                .select()                .paths(PathSelectors.any())                .apis(RequestHandlerSelectors.basePackage(\"cn.tsxygfy.beyond.controller.admin.api\"))                .build();    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/configuration/SwaggerConfig.java", "stars": "1", "class": {"name": "SwaggerConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "apiInfo", "params": [], "throws": null, "modifiers": ["private"], "return_type": "ApiInfo", "snippet": "    private ApiInfo apiInfo() {        return new ApiInfoBuilder()                .title(\"BEYOND API\")                .description(\"beyond\u535a\u5ba2api\u6587\u6863\")                .contact(new Contact(\"ruby woo\", \"https://www.tsxygfy.cn\", \"i520gfy@gmail.com\"))                .version(BeyondConst.BEYOND_VERSION)                .build();    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/configuration/SwaggerConfig.java", "stars": "1", "class": {"name": "SwaggerConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onNavigationItemSelected", "params": ["int", "long"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean onNavigationItemSelected (int p0, long p1)\t{\t\treturn n_onNavigationItemSelected (p0, p1);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v7/app/ActionBar_OnNavigationListenerImplementor.java", "stars": "2", "class": {"name": "ActionBar_OnNavigationListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "n_onNavigationItemSelected", "params": ["int", "long"], "throws": null, "modifiers": ["native", "private"], "return_type": "boolean", "snippet": "\tprivate native boolean n_onNavigationItemSelected (int p0, long p1);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v7/app/ActionBar_OnNavigationListenerImplementor.java", "stars": "2", "class": {"name": "ActionBar_OnNavigationListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v7/app/ActionBar_OnNavigationListenerImplementor.java", "stars": "2", "class": {"name": "ActionBar_OnNavigationListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Debug/90/android/src/mono/android/support/v7/app/ActionBar_OnNavigationListenerImplementor.java", "stars": "2", "class": {"name": "ActionBar_OnNavigationListenerImplementor", "extends": "java", "implements": ["mono", "android"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\t//\u521b\u5efa\u4e3b\u4eba\u5bf9\u8c61\t\tZhuren wangchen = new Zhuren();\t\t//\u521b\u5efa\u5ba0\u7269\u5bf9\u8c61\t\tChongwu tom = new Chongwu();\t\t//\u4e3b\u4eba\u5582\u517b\u5ba0\u7269\t\twangchen.feed(tom);\t\t//\u521b\u5efa\u5c0f\u72d7\u5bf9\u8c61\t\tDogcw erha = new Dogcw();\t\t//\u4e3b\u4eba\u5582\u517b\u5c0f\u72d7\t\twangchen.feed(erha);\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/duotai/Testyy.java", "stars": "2", "class": {"name": "Testyy", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getId() {    return id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/UserWithNothingWithInterface.java", "stars": "15", "class": {"name": "UserWithNothingWithInterface", "extends": null, "implements": ["Owned"], "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setId(Integer id) {    this.id = id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/UserWithNothingWithInterface.java", "stars": "15", "class": {"name": "UserWithNothingWithInterface", "extends": null, "implements": ["Owned"], "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getName() {    return name;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/UserWithNothingWithInterface.java", "stars": "15", "class": {"name": "UserWithNothingWithInterface", "extends": null, "implements": ["Owned"], "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setName(String name) {    this.name = name;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/UserWithNothingWithInterface.java", "stars": "15", "class": {"name": "UserWithNothingWithInterface", "extends": null, "implements": ["Owned"], "modifiers": ["public"]}}, {"method_name": "getOwner", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Group", "snippet": "  public Group getOwner() {    return owner;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/UserWithNothingWithInterface.java", "stars": "15", "class": {"name": "UserWithNothingWithInterface", "extends": null, "implements": ["Owned"], "modifiers": ["public"]}}, {"method_name": "setOwner", "params": ["Group"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setOwner(Group owner) {    this.owner = owner;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/UserWithNothingWithInterface.java", "stars": "15", "class": {"name": "UserWithNothingWithInterface", "extends": null, "implements": ["Owned"], "modifiers": ["public"]}}, {"method_name": "cast", "params": ["Class<?>", "Type", "Object"], "throws": null, "modifiers": ["protected"], "return_type": "Object", "snippet": "    protected Object cast(Class<?> target, Type[] neededGenerics, Object value) {        if (value instanceof Boolean) {            return value;        } else {            return Boolean.parseBoolean(value.toString());        }    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/typeconversions/BooleanTypeConversion.java", "stars": "3", "class": {"name": "BooleanTypeConversion", "extends": "TypeConversion", "implements": null, "modifiers": ["public"]}}, {"method_name": "isApplicable", "params": ["Class<?>", "Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isApplicable(Class<?> target, Object value) {        return boolean.class.isAssignableFrom(target) || Boolean.class.isAssignableFrom(target);    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/typeconversions/BooleanTypeConversion.java", "stars": "3", "class": {"name": "BooleanTypeConversion", "extends": "TypeConversion", "implements": null, "modifiers": ["public"]}}, {"method_name": "getParametersRequired", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "    protected int getParametersRequired() {        return 0;    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slib/config/typeconversions/BooleanTypeConversion.java", "stars": "3", "class": {"name": "BooleanTypeConversion", "extends": "TypeConversion", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPush", "params": ["PushEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPush(PushEvent event) {        event.setCancelled(true);    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/player/NoPush.java", "stars": "12", "class": {"name": "NoPush", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "getUpdatedTriggers", "params": ["long"], "throws": ["TriggerLoaderException"], "modifiers": ["public"], "return_type": "List<Trigger>", "snippet": "  public List<Trigger> getUpdatedTriggers(final long lastUpdateTime) throws TriggerLoaderException {    logger.info(\"Loading triggers changed since \" + new DateTime(lastUpdateTime).toString());    final ResultSetHandler<List<Trigger>> handler = new TriggerResultHandler();    try {      final List<Trigger> triggers = this.dbOperator          .query(GET_UPDATED_TRIGGERS, handler, lastUpdateTime);      logger.info(\"Loaded \" + triggers.size() + \" triggers.\");      return triggers;    } catch (final SQLException ex) {      throw new TriggerLoaderException(\"Loading triggers from db failed.\", ex);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/JdbcTriggerImpl.java", "stars": "18", "class": {"name": "JdbcTriggerImpl", "extends": null, "implements": ["TriggerLoader"], "modifiers": ["public"]}}, {"method_name": "loadTriggers", "params": [], "throws": ["TriggerLoaderException"], "modifiers": ["public"], "return_type": "List<Trigger>", "snippet": "  public List<Trigger> loadTriggers() throws TriggerLoaderException {    logger.info(\"Loading all triggers from db.\");    final ResultSetHandler<List<Trigger>> handler = new TriggerResultHandler();    try {      final List<Trigger> triggers = this.dbOperator.query(GET_ALL_TRIGGERS, handler);      logger.info(\"Loaded \" + triggers.size() + \" triggers.\");      return triggers;    } catch (final SQLException ex) {      throw new TriggerLoaderException(\"Loading triggers from db failed.\", ex);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/JdbcTriggerImpl.java", "stars": "18", "class": {"name": "JdbcTriggerImpl", "extends": null, "implements": ["TriggerLoader"], "modifiers": ["public"]}}, {"method_name": "loadTriggersId", "params": [], "throws": ["TriggerLoaderException"], "modifiers": ["public"], "return_type": "List<Integer>", "snippet": "  public List<Integer> loadTriggersId() throws TriggerLoaderException {    logger.info(\"Loading all triggers Id from db.\");    final ResultSetHandler<List<Integer>> handler = new TriggerIdResultHandler();    try {      final List<Integer> triggersId = this.dbOperator.query(GET_ALL_TRIGGERS_ID, handler);      logger.info(\"Loaded \" + triggersId.size() + \" triggersId.\");      return triggersId;    } catch (final SQLException ex) {      throw new TriggerLoaderException(\"Loading triggersId from db failed.\", ex);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/JdbcTriggerImpl.java", "stars": "18", "class": {"name": "JdbcTriggerImpl", "extends": null, "implements": ["TriggerLoader"], "modifiers": ["public"]}}, {"method_name": "removeTrigger", "params": ["Trigger"], "throws": ["TriggerLoaderException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void removeTrigger(final Trigger t) throws TriggerLoaderException {    logger.info(\"Removing trigger \" + t.toString() + \" from db.\");    try {      final int removes = this.dbOperator.update(REMOVE_TRIGGER, t.getTriggerId());      if (removes == 0) {        throw new TriggerLoaderException(\"No trigger has been removed.\");      }    } catch (final SQLException ex) {      throw new TriggerLoaderException(\"Remove trigger \" + t.getTriggerId() + \" from db failed. \",          ex);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/JdbcTriggerImpl.java", "stars": "18", "class": {"name": "JdbcTriggerImpl", "extends": null, "implements": ["TriggerLoader"], "modifiers": ["public"]}}, {"method_name": "addTrigger", "params": ["Trigger"], "throws": ["TriggerLoaderException"], "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "  public synchronized void addTrigger(final Trigger t) throws TriggerLoaderException {    logger.info(\"Inserting trigger \" + t.toString() + \" into db.\");    final SQLTransaction<Long> insertAndGetLastID = transOperator -> {      transOperator.update(ADD_TRIGGER, DateTime.now().getMillis());      // This commit must be called in order to unlock trigger table and have last insert ID.      transOperator.getConnection().commit();      return transOperator.getLastInsertId();    };    try {      final long id = this.dbOperator.transaction(insertAndGetLastID);      t.setTriggerId((int) id);      updateTrigger(t);      logger.info(\"uploaded trigger \" + t.getDescription());    } catch (final SQLException ex) {      logger.error(\"Adding Trigger \" + t.getTriggerId() + \" failed.\");      throw new TriggerLoaderException(\"trigger id is not properly created.\", ex);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/JdbcTriggerImpl.java", "stars": "18", "class": {"name": "JdbcTriggerImpl", "extends": null, "implements": ["TriggerLoader"], "modifiers": ["public"]}}, {"method_name": "updateTrigger", "params": ["Trigger"], "throws": ["TriggerLoaderException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void updateTrigger(final Trigger t) throws TriggerLoaderException {    logger.info(\"Updating trigger \" + t.getTriggerId() + \" into db.\");    t.setLastModifyTime(System.currentTimeMillis());    updateTrigger(t, this.defaultEncodingType);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/JdbcTriggerImpl.java", "stars": "18", "class": {"name": "JdbcTriggerImpl", "extends": null, "implements": ["TriggerLoader"], "modifiers": ["public"]}}, {"method_name": "updateTrigger", "params": ["Trigger", "EncodingType"], "throws": ["TriggerLoaderException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void updateTrigger(final Trigger t, final EncodingType encType)      throws TriggerLoaderException {    final String json = JSONUtils.toJSON(t.toJson());    byte[] data = null;    try {      final byte[] stringData = json.getBytes(\"UTF-8\");      data = stringData;      if (encType == EncodingType.GZIP) {        data = GZIPUtils.gzipBytes(stringData);      }      logger.debug(          \"NumChars: \" + json.length() + \" UTF-8:\" + stringData.length + \" Gzip:\" + data.length);    } catch (final IOException e) {      logger.error(\"Trigger encoding fails\", e);      throw new TriggerLoaderException(\"Error encoding the trigger \" + t.toString(), e);    }    try {      final int updates = this.dbOperator          .update(UPDATE_TRIGGER, t.getSource(), t.getLastModifyTime(), encType.getNumVal(), data,              t.getTriggerId());      if (updates == 0) {        throw new TriggerLoaderException(\"No trigger has been updated.\");      }    } catch (final SQLException ex) {      logger.error(\"Updating Trigger \" + t.getTriggerId() + \" failed.\");      throw new TriggerLoaderException(\"DB Trigger update failed. \", ex);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/JdbcTriggerImpl.java", "stars": "18", "class": {"name": "JdbcTriggerImpl", "extends": null, "implements": ["TriggerLoader"], "modifiers": ["public"]}}, {"method_name": "loadTrigger", "params": ["int"], "throws": ["TriggerLoaderException"], "modifiers": ["public"], "return_type": "Trigger", "snippet": "  public Trigger loadTrigger(final int triggerId) throws TriggerLoaderException {    logger.info(\"Loading trigger \" + triggerId + \" from db.\");    final ResultSetHandler<List<Trigger>> handler = new TriggerResultHandler();    try {      final List<Trigger> triggers = this.dbOperator.query(GET_TRIGGER, handler, triggerId);      if (triggers.size() == 0) {        logger.error(\"Loaded 0 triggers. Failed to load trigger \" + triggerId);        throw new TriggerLoaderException(\"Loaded 0 triggers. Failed to load trigger \" + triggerId);      }      return triggers.get(0);    } catch (final SQLException ex) {      logger.error(\"Failed to load trigger \" + triggerId);      throw new TriggerLoaderException(\"Load a specific trigger failed.\", ex);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/JdbcTriggerImpl.java", "stars": "18", "class": {"name": "JdbcTriggerImpl", "extends": null, "implements": ["TriggerLoader"], "modifiers": ["public"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<Trigger>", "snippet": "    public List<Trigger> handle(final ResultSet rs) throws SQLException {      if (!rs.next()) {        return Collections.<Trigger>emptyList();      }      final ArrayList<Trigger> triggers = new ArrayList<>();      do {        final int triggerId = rs.getInt(1);        final int encodingType = rs.getInt(4);        final byte[] data = rs.getBytes(5);        Object jsonObj = null;        if (data != null) {          final EncodingType encType = EncodingType.fromInteger(encodingType);          try {            // Convoluted way to inflate strings. Should find common package or            // helper function.            jsonObj = JSONUtils.parseJSONFromString(encType == EncodingType.GZIP ?                GZIPUtils.unGzipString(data, \"UTF-8\") : new String(data, \"UTF-8\"));          } catch (final IOException e) {            throw new SQLException(\"Error reconstructing trigger data \");          }        }        Trigger t = null;        try {          t = Trigger.fromJson(jsonObj);          triggers.add(t);        } catch (final Exception e) {          logger.error(\"Failed to load trigger \" + triggerId, e);        }      } while (rs.next());      return triggers;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/JdbcTriggerImpl.java", "stars": "18", "class": {"name": "TriggerResultHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["public", "static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<Integer>", "snippet": "    public List<Integer> handle(final ResultSet rs) throws SQLException {      if (!rs.next()) {        return Collections.<Integer>emptyList();      }      final ArrayList<Integer> triggersId = new ArrayList<>();      do {        final int triggerId = rs.getInt(1);        triggersId.add(triggerId);      } while (rs.next());      return triggersId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/JdbcTriggerImpl.java", "stars": "18", "class": {"name": "TriggerIdResultHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["public", "static"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_lesson6);    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson6Activity.java", "stars": "2", "class": {"name": "Lesson6Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "argbEvaluator", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void argbEvaluator(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.ANIM_ARGB_EVALUATOR.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson6Activity.java", "stars": "2", "class": {"name": "Lesson6Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "hsvEvaluator", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void hsvEvaluator(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.ANIM_HSV_EVALUATOR.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson6Activity.java", "stars": "2", "class": {"name": "Lesson6Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "ofObject", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void ofObject(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.ANIM_OF_OBJECT.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson6Activity.java", "stars": "2", "class": {"name": "Lesson6Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "propertyValuesHolder", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void propertyValuesHolder(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.ANIM_PROPERTY_VALUES_HOLDER.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson6Activity.java", "stars": "2", "class": {"name": "Lesson6Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "animatorSet", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void animatorSet(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.ANIM_ANIMATOR_SET.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson6Activity.java", "stars": "2", "class": {"name": "Lesson6Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "keyframe", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void keyframe(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.ANIM_KEY_FRAME.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson6Activity.java", "stars": "2", "class": {"name": "Lesson6Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(@NonNull LayoutInflater inflater,                             ViewGroup container, Bundle savedInstanceState) {        View v = inflater.inflate(R.layout.fragment_statistic, container, false);        titleTopCountriesText   = v.findViewById(R.id.titleTopCountriesText);        titleCovidGlobalText    = v.findViewById(R.id.titleCovidGlobalText);        titleStatisticText      = v.findViewById(R.id.titleStatisticText);        topCountriesSlider      = v.findViewById(R.id.topCountriesSlider);        activeCaseText          = v.findViewById(R.id.activeCaseText);        curesText               = v.findViewById(R.id.curedText);        deathText               = v.findViewById(R.id.deathText);        globalDataStats         = v.findViewById(R.id.globalDataStats);        statisticList           = v.findViewById(R.id.statisticList);        dateText                = v.findViewById(R.id.dateText);        search                  = v.findViewById(R.id.search);        layoutTop               = v.findViewById(R.id.layoutTop);        RelativeLayout bottomSheetLayout                = (RelativeLayout) v.findViewById(R.id.layoutStatisticGlobal);        bottomSheetBehavior = BottomSheetBehavior.from(bottomSheetLayout);        LinearLayoutManager horizontalLayoutManager = new LinearLayoutManager(topCountriesSlider.getContext(), LinearLayoutManager.HORIZONTAL, false);        topCountriesSlider.setLayoutManager(horizontalLayoutManager);        if(GlobalVar.getInstance().getDataStatsSummary().size() != 0){            LoadingStatisticFragment loading = new LoadingStatisticFragment();            loading.execute(null, dataStatsGlobal, dataStatsSummary);            bottomSheetBehavior.setPeekHeight(layoutStatisticHeight);        }else{            requestTask = 1;            CallService callService = new CallService(getContext(),this);            callService.execute(\"summary\", Constant.METHOD_GET);        }        statisticList.setTextFilterEnabled(true);        search.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {                adapter.getFilter().filter(s.toString());            }            @Override            public void afterTextChanged(Editable s) {            }        });        statisticList.setOnItemClickListener(this);        Utility.setListViewHeight(statisticList);        setFont(v);        return v;    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/fragments/StatisticFragment.java", "stars": "2", "class": {"name": "StatisticFragment", "extends": "BaseGlobalVar", "implements": ["AsyncTaskCompleteListener", "AdapterView"], "modifiers": ["public"]}}, {"method_name": "setFont", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFont(View v){        TextView titleCountryText   = v.findViewById(R.id.titleCountryText);        TextView titlePositiveText  = v.findViewById(R.id.titlePositiveText);        TextView titleDeathText     = v.findViewById(R.id.titleDeathText);        TextView titleRecoveredText = v.findViewById(R.id.titleRecoveredText);        titleCountryText.setTypeface(FontUtils.loadFontFromAssets(getContext(), Constant.FONT_BOLD));        titleDeathText.setTypeface(FontUtils.loadFontFromAssets(getContext(), Constant.FONT_BOLD));        titlePositiveText.setTypeface(FontUtils.loadFontFromAssets(getContext(), Constant.FONT_BOLD));        titleRecoveredText.setTypeface(FontUtils.loadFontFromAssets(getContext(), Constant.FONT_BOLD));        titleTopCountriesText.setTypeface(FontUtils.loadFontFromAssets(getContext(), Constant.FONT_BOLD));        titleStatisticText.setTypeface(FontUtils.loadFontFromAssets(getContext(), Constant.FONT_BOLD));        titleCovidGlobalText.setTypeface(FontUtils.loadFontFromAssets(getContext(), Constant.FONT_BOLD));        activeCaseText.setTypeface(FontUtils.loadFontFromAssets(getContext(), Constant.FONT_NORMAL));        curesText.setTypeface(FontUtils.loadFontFromAssets(getContext(), Constant.FONT_NORMAL));        deathText.setTypeface(FontUtils.loadFontFromAssets(getContext(), Constant.FONT_NORMAL));        dateText.setTypeface(FontUtils.loadFontFromAssets(getContext(), Constant.FONT_NORMAL));    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/fragments/StatisticFragment.java", "stars": "2", "class": {"name": "StatisticFragment", "extends": "BaseGlobalVar", "implements": ["AsyncTaskCompleteListener", "AdapterView"], "modifiers": ["public"]}}, {"method_name": "buildStats", "params": ["DataStats"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void buildStats( DataStats dataStats){        float maxValue = (float) dataStats.getPostive() + dataStats.getCured() + dataStats.getDeath();        globalDataStats.setMaxValue(maxValue);        globalDataStats.setMinValue(0f);        Collection<FitChartValue> values = new ArrayList<>();        values.add(new FitChartValue((float)dataStats.getPostive(), getContext().getResources().getColor(R.color.bg_Blue)));        values.add(new FitChartValue((float)dataStats.getCured(), getContext().getResources().getColor(R.color.bg_Green)));        values.add(new FitChartValue((float)dataStats.getDeath(), getContext().getResources().getColor(R.color.bg_Red)));        globalDataStats.setValues(values);    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/fragments/StatisticFragment.java", "stars": "2", "class": {"name": "StatisticFragment", "extends": "BaseGlobalVar", "implements": ["AsyncTaskCompleteListener", "AdapterView"], "modifiers": ["public"]}}, {"method_name": "getTop5", "params": ["List<DataStats>"], "throws": null, "modifiers": ["public"], "return_type": "List<DataStats>", "snippet": "    public List<DataStats> getTop5(List<DataStats> dataStats){        List<DataStats> top5 = new ArrayList<DataStats>();        int max1 = 0 ,max2 = 0 ,max3 = 0,max4 = 0,max5= 0;        int indexMax1 = 0 ,indexMax2 = 0 ,indexMax3 = 0,indexMax4 = 0,indexMax5= 0;        for(int x = 0; x < dataStats.size();x++){            if(dataStats.get(x).getPostive() > max1){                max1 = dataStats.get(x).getPostive();                indexMax1 = x;            }        }        for(int x = 0; x < dataStats.size();x++){            if(dataStats.get(x).getPostive() > max2 && dataStats.get(x).getPostive() < max1){                max2 = dataStats.get(x).getPostive();                indexMax2 = x;            }        }        for(int x = 0; x < dataStats.size();x++){            if(dataStats.get(x).getPostive() > max3 && dataStats.get(x).getPostive() < max2){                max3 = dataStats.get(x).getPostive();                indexMax3 = x;            }        }        for(int x = 0; x < dataStats.size();x++){            if(dataStats.get(x).getPostive() > max4 && dataStats.get(x).getPostive() < max3){                max4 = dataStats.get(x).getPostive();                indexMax4 = x;            }        }        for(int x = 0; x < dataStats.size();x++){            if(dataStats.get(x).getPostive() > max5 && dataStats.get(x).getPostive() < max4){                max5 = dataStats.get(x).getPostive();                indexMax5 = x;            }        }        top5.add(dataStats.get(indexMax1));        top5.add(dataStats.get(indexMax2));        top5.add(dataStats.get(indexMax3));        top5.add(dataStats.get(indexMax4));        top5.add(dataStats.get(indexMax5));        return top5;    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/fragments/StatisticFragment.java", "stars": "2", "class": {"name": "StatisticFragment", "extends": "BaseGlobalVar", "implements": ["AsyncTaskCompleteListener", "AdapterView"], "modifiers": ["public"]}}, {"method_name": "onTaskComplete", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onTaskComplete(Object[] params) {           result = (String) params[0];            if(Utility.cekValidResult(result, getActivity())){                if(requestTask == 1){                    requestTask = 3;                    LoadingStatisticFragment loading = new LoadingStatisticFragment();                    loading.execute(result);                }else if(requestTask == 2){                    List<DataStats> dataStats = Utility.buildDataStats(result);                    Intent intent = new Intent(getActivity(), DetailsStatisticActivity.class);                    intent.putParcelableArrayListExtra(\"dataStats\", (ArrayList<? extends DataStats>) dataStats);                    intent.putExtra(\"country\", dataStats.get(0).getCountry());                    startActivityForResult(intent,1);                }            }    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/fragments/StatisticFragment.java", "stars": "2", "class": {"name": "StatisticFragment", "extends": "BaseGlobalVar", "implements": ["AsyncTaskCompleteListener", "AdapterView"], "modifiers": ["public"]}}, {"method_name": "onItemClick", "params": ["AdapterView<?>", "View", "int", "long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {            DataStats dataStats = new DataStats();            dataStats = (DataStats) statisticList.getItemAtPosition(position);            requestTask = 2;            CallService callService = new CallService(getContext(),this);            callService.execute(\"dayone/country/\"+dataStats.getCountry(), Constant.METHOD_GET);    }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/fragments/StatisticFragment.java", "stars": "2", "class": {"name": "StatisticFragment", "extends": "BaseGlobalVar", "implements": ["AsyncTaskCompleteListener", "AdapterView"], "modifiers": ["public"]}}, {"method_name": "onPreExecute", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void onPreExecute() {            if(withLoading){                loading = new ProgresDialog(getContext());                loading.show();            }        }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/fragments/StatisticFragment.java", "stars": "2", "class": {"name": "LoadingStatisticFragment", "extends": "AsyncTask", "implements": null, "modifiers": ["public"]}}, {"method_name": "doInBackground", "params": ["Object"], "throws": null, "modifiers": ["protected"], "return_type": "List<DataStats>", "snippet": "        protected List<DataStats> doInBackground(Object... params) {            String result = (String) params[0];            if(result != null){                try{                    JSONObject jsonObject = new JSONObject(result);                    String jsonCountries = jsonObject.getString(\"Countries\");                    dataStatsCountries = Utility.buildDataSummary(jsonCountries);                    String jsonGlobal = jsonObject.getString(\"Global\");                    dataStatsGlobal =  Utility.buildDataGlobal(jsonGlobal);                }catch (JSONException e){                    Log.e(\"JSONException ee\", e.getMessage());                }            }else{                dataStatsGlobal     = (DataStats) params[1];                dataStatsCountries  = (List<DataStats>) params[2];            }            GlobalVar.getInstance().setDataStatsSummary(dataStatsCountries);            GlobalVar.getInstance().setDataStatsGlobal(dataStatsGlobal);            return dataStatsCountries;        }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/fragments/StatisticFragment.java", "stars": "2", "class": {"name": "LoadingStatisticFragment", "extends": "AsyncTask", "implements": null, "modifiers": ["public"]}}, {"method_name": "onPostExecute", "params": ["List<DataStats>"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void onPostExecute(List<DataStats> result) {            activeCaseText.setText( getContext().getString(R.string.label_activeCase) +\"\\n\"+ formatter.format(dataStatsGlobal.getPostive()));            curesText.setText( getContext().getString(R.string.label_cured) +\"\\n\"+ formatter.format(dataStatsGlobal.getCured()));            deathText.setText( getContext().getString(R.string.label_death) +\"\\n\"+formatter.format(dataStatsGlobal.getDeath()));            buildStats(dataStatsGlobal);            dateText.setText(Utility.dateFormat(Constant.SIMPLE_DATE, dataStatsCountries.get(0).getDate()));            adapter = new StatisticListAdapter(getContext(), result);            adapter.notifyDataSetChanged();            result = getTop5(result);            statisticList.setAdapter(adapter);            topCountriesSlider.setAdapter(new TopCountriesAdapter(getContext(), (ArrayList<DataStats>) result));            int height = layoutTop.getHeight() - 25;            GlobalVar.getInstance().setLayoutStatisticHeight(height);            bottomSheetBehavior.setPeekHeight(height);            Utility.setListViewHeight(statisticList);            try {                loading.dismiss();            } catch (IllegalArgumentException e) {                e.printStackTrace();            }        }", "url": "https://raw.githubusercontent.com/fadhilahramadhan/Android_Covid19Stats/master/app/src/main/java/fadhilah/ramadhan/covid19stats/fragments/StatisticFragment.java", "stars": "2", "class": {"name": "LoadingStatisticFragment", "extends": "AsyncTask", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create a SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/associationtest/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/associationtest/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/associationtest/AssociationTest.java", "stars": "15", "class": {"name": "AssociationTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetAllCars", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetAllCars() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      List<Car> cars = mapper.getCars();      Assertions.assertEquals(4, cars.size());      Assertions.assertEquals(\"VW\", cars.get(0).getType());      Assertions.assertNotNull(cars.get(0).getEngine());      Assertions.assertNull(cars.get(0).getBrakes());      Assertions.assertEquals(\"Opel\", cars.get(1).getType());      Assertions.assertNull(cars.get(1).getEngine());      Assertions.assertNotNull(cars.get(1).getBrakes());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/associationtest/AssociationTest.java", "stars": "15", "class": {"name": "AssociationTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetOneCarWithOneEngineAndBrakes", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetOneCarWithOneEngineAndBrakes() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      List<Car> cars = mapper.getCars2();      Assertions.assertEquals(1, cars.size());      Assertions.assertNotNull(cars.get(0).getEngine());      Assertions.assertNotNull(cars.get(0).getBrakes());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/associationtest/AssociationTest.java", "stars": "15", "class": {"name": "AssociationTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetAllCarsNonUnique", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetAllCarsNonUnique() {    // this is a little weird - we might expect 4 objects back, but there are only    // 1 distinct carid, so we get one back.    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      List<Car> cars = mapper.getCars2();      Assertions.assertEquals(1, cars.size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/associationtest/AssociationTest.java", "stars": "15", "class": {"name": "AssociationTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetAllCarsAndDetectAssociationType", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetAllCarsAndDetectAssociationType() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      List<Car> cars = mapper.getCarsAndDetectAssociationType();      Assertions.assertEquals(4, cars.size());      Assertions.assertEquals(\"VW\", cars.get(0).getType());      Assertions.assertNotNull(cars.get(0).getEngine());      Assertions.assertNull(cars.get(0).getBrakes());      Assertions.assertEquals(\"Opel\", cars.get(1).getType());      Assertions.assertNull(cars.get(1).getEngine());      Assertions.assertNotNull(cars.get(1).getBrakes());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/associationtest/AssociationTest.java", "stars": "15", "class": {"name": "AssociationTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setup", "params": ["FMLCommonSetupEvent"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setup(final FMLCommonSetupEvent event)    {    }", "url": "https://raw.githubusercontent.com/MrzDev/mod/master/src/main/java/com/mrz/swordmod/SwordMod.java", "stars": "2", "class": {"name": "SwordMod", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "doClientStuff", "params": ["FMLClientSetupEvent"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void doClientStuff(final FMLClientSetupEvent event) {    }", "url": "https://raw.githubusercontent.com/MrzDev/mod/master/src/main/java/com/mrz/swordmod/SwordMod.java", "stars": "2", "class": {"name": "SwordMod", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        System.out.println(\"Hello Modular\");    }", "url": "https://raw.githubusercontent.com/enriquedevs/java11/master/TestModularApp/src/mymodule/com/app/main/Main.java", "stars": "1", "class": {"name": "Main", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDataForSignInTest", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "\tpublic Object[][] getDataForSignInTest() {\t\treturn new Object[][] { { \"abcd@gmail.com\", \"abcdefghi\" }, };\t}", "url": "https://raw.githubusercontent.com/vanitha128/appiumTests/master/src/test/java/materialLogin/MaterialLoginSignInTest.java", "stars": "2", "class": {"name": "MaterialLoginSignInTest", "extends": "SetupAndroidTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "setupDriver", "params": [], "throws": ["MalformedURLException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setupDriver() throws MalformedURLException {\t\tdriver = setupDriver(ANDROID_DEVICE_NAME, MATERIAL_LOGIN_APK, APPIUM_AUTOMATION_NAME, NEW_COMMAND_TIMEOUT);\t}", "url": "https://raw.githubusercontent.com/vanitha128/appiumTests/master/src/test/java/materialLogin/MaterialLoginSignInTest.java", "stars": "2", "class": {"name": "MaterialLoginSignInTest", "extends": "SetupAndroidTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "signInTest", "params": ["String", "String"], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void signInTest(String email, String password) throws InterruptedException {\t\tSignInPage signInPage = new SignInPage(driver);\t\tsignInPage.enterUserName(email);\t\tsignInPage.enterPassword(password);\t\tsignInPage.clickSubmitButton();\t\t// validation that home page is displayed after sign in.\t\tHomePage homePage = new HomePage(driver);\t\tAssert.assertTrue(homePage.isInitialized());\t}", "url": "https://raw.githubusercontent.com/vanitha128/appiumTests/master/src/test/java/materialLogin/MaterialLoginSignInTest.java", "stars": "2", "class": {"name": "MaterialLoginSignInTest", "extends": "SetupAndroidTest", "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "HttpStatus", "snippet": "    public HttpStatus getStatus() {        return HttpStatus.BAD_REQUEST;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/exception/NotMatchException.java", "stars": "1", "class": {"name": "NotMatchException", "extends": "BaseException", "implements": null, "modifiers": ["public"]}}, {"method_name": "isClassCacheEnabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isClassCacheEnabled() {    return classCacheEnabled;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/DefaultReflectorFactory.java", "stars": "15", "class": {"name": "DefaultReflectorFactory", "extends": null, "implements": ["ReflectorFactory"], "modifiers": ["public"]}}, {"method_name": "setClassCacheEnabled", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setClassCacheEnabled(boolean classCacheEnabled) {    this.classCacheEnabled = classCacheEnabled;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/DefaultReflectorFactory.java", "stars": "15", "class": {"name": "DefaultReflectorFactory", "extends": null, "implements": ["ReflectorFactory"], "modifiers": ["public"]}}, {"method_name": "findForClass", "params": ["Class<?>"], "throws": null, "modifiers": ["public"], "return_type": "Reflector", "snippet": "  public Reflector findForClass(Class<?> type) {    if (classCacheEnabled) {      // synchronized (type) removed see issue #461      return reflectorMap.computeIfAbsent(type, Reflector::new);    } else {      return new Reflector(type);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/DefaultReflectorFactory.java", "stars": "15", "class": {"name": "DefaultReflectorFactory", "extends": null, "implements": ["ReflectorFactory"], "modifiers": ["public"]}}, {"method_name": "submit", "params": ["LoadAndDisplayImageTask"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid submit(final LoadAndDisplayImageTask task) {\t\ttaskDistributor.execute(new Runnable() {\t\t\t@Override\t\t\tpublic void run() {\t\t\t\tboolean isImageCachedOnDisc = configuration.discCache.get(task.getLoadingUri()).exists();\t\t\t\tinitExecutorsIfNeed();\t\t\t\tif (isImageCachedOnDisc) {\t\t\t\t\ttaskExecutorForCachedImages.execute(task);\t\t\t\t} else {\t\t\t\t\ttaskExecutor.execute(task);\t\t\t\t}\t\t\t}\t\t});\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderEngine.java", "stars": "74", "class": {"name": "ImageLoaderEngine", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "submit", "params": ["ProcessAndDisplayImageTask"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid submit(ProcessAndDisplayImageTask task) {\t\tinitExecutorsIfNeed();\t\ttaskExecutorForCachedImages.execute(task);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderEngine.java", "stars": "74", "class": {"name": "ImageLoaderEngine", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "initExecutorsIfNeed", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void initExecutorsIfNeed() {\t\tif (!configuration.customExecutor && ((ExecutorService) taskExecutor).isShutdown()) {\t\t\ttaskExecutor = createTaskExecutor();\t\t}\t\tif (!configuration.customExecutorForCachedImages && ((ExecutorService) taskExecutorForCachedImages).isShutdown()) {\t\t\ttaskExecutorForCachedImages = createTaskExecutor();\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderEngine.java", "stars": "74", "class": {"name": "ImageLoaderEngine", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "createTaskExecutor", "params": [], "throws": null, "modifiers": ["private"], "return_type": "Executor", "snippet": "\tprivate Executor createTaskExecutor() {\t\treturn DefaultConfigurationFactory.createExecutor(configuration.threadPoolSize, configuration.threadPriority, configuration.tasksProcessingType);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderEngine.java", "stars": "74", "class": {"name": "ImageLoaderEngine", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getLoadingUriForView", "params": ["ImageView"], "throws": null, "modifiers": [], "return_type": "String", "snippet": "\tString getLoadingUriForView(ImageView imageView) {\t\treturn cacheKeysForImageViews.get(imageView.hashCode());\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderEngine.java", "stars": "74", "class": {"name": "ImageLoaderEngine", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "prepareDisplayTaskFor", "params": ["ImageView", "String"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid prepareDisplayTaskFor(ImageView imageView, String memoryCacheKey) {\t\tcacheKeysForImageViews.put(imageView.hashCode(), memoryCacheKey);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderEngine.java", "stars": "74", "class": {"name": "ImageLoaderEngine", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "cancelDisplayTaskFor", "params": ["ImageView"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid cancelDisplayTaskFor(ImageView imageView) {\t\tcacheKeysForImageViews.remove(imageView.hashCode());\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderEngine.java", "stars": "74", "class": {"name": "ImageLoaderEngine", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "denyNetworkDownloads", "params": ["boolean"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid denyNetworkDownloads(boolean denyNetworkDownloads) {\t\tnetworkDenied.set(denyNetworkDownloads);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderEngine.java", "stars": "74", "class": {"name": "ImageLoaderEngine", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "handleSlowNetwork", "params": ["boolean"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid handleSlowNetwork(boolean handleSlowNetwork) {\t\tslowNetwork.set(handleSlowNetwork);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderEngine.java", "stars": "74", "class": {"name": "ImageLoaderEngine", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "pause", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid pause() {\t\tpaused.set(true);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderEngine.java", "stars": "74", "class": {"name": "ImageLoaderEngine", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "resume", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid resume() {\t\tsynchronized (paused) {\t\t\tpaused.set(false);\t\t\tpaused.notifyAll();\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderEngine.java", "stars": "74", "class": {"name": "ImageLoaderEngine", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "stop", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid stop() {\t\tif (!configuration.customExecutor) {\t\t\t((ExecutorService) taskExecutor).shutdownNow();\t\t}\t\tif (!configuration.customExecutorForCachedImages) {\t\t\t((ExecutorService) taskExecutorForCachedImages).shutdownNow();\t\t}\t\tcacheKeysForImageViews.clear();\t\turiLocks.clear();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderEngine.java", "stars": "74", "class": {"name": "ImageLoaderEngine", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getLockForUri", "params": ["String"], "throws": null, "modifiers": [], "return_type": "ReentrantLock", "snippet": "\tReentrantLock getLockForUri(String uri) {\t\tReentrantLock lock = uriLocks.get(uri);\t\tif (lock == null) {\t\t\tlock = new ReentrantLock();\t\t\turiLocks.put(uri, lock);\t\t}\t\treturn lock;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderEngine.java", "stars": "74", "class": {"name": "ImageLoaderEngine", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getPause", "params": [], "throws": null, "modifiers": [], "return_type": "AtomicBoolean", "snippet": "\tAtomicBoolean getPause() {\t\treturn paused;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderEngine.java", "stars": "74", "class": {"name": "ImageLoaderEngine", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "isNetworkDenied", "params": [], "throws": null, "modifiers": [], "return_type": "boolean", "snippet": "\tboolean isNetworkDenied() {\t\treturn networkDenied.get();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderEngine.java", "stars": "74", "class": {"name": "ImageLoaderEngine", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "isSlowNetwork", "params": [], "throws": null, "modifiers": [], "return_type": "boolean", "snippet": "\tboolean isSlowNetwork() {\t\treturn slowNetwork.get();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/ImageLoaderEngine.java", "stars": "74", "class": {"name": "ImageLoaderEngine", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "method", "params": ["int", "Calcable"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int method(int number,Calcable c){       return c.calsAbs(number);    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/24.%E3%80%90Stream%E6%B5%81%E3%80%81%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%E3%80%91%E7%AC%94%E8%AE%B0/code/13_StreamAndMethodReference/src/com/itheima/demo06/StaticMethodReference/Demo01StaticMethodReference(1).java", "stars": "2", "class": {"name": "Demo01StaticMethodReference", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        //\u8c03\u7528method\u65b9\u6cd5,\u4f20\u9012\u8ba1\u7b97\u7edd\u5bf9\u503c\u5f97\u6574\u6570,\u548cLambda\u8868\u8fbe\u5f0f        int number = method(-10,(n)->{            //\u5bf9\u53c2\u6570\u8fdb\u884c\u7edd\u5bf9\u503c\u5f97\u8ba1\u7b97\u5e76\u8fd4\u56de\u7ed3\u679c            return Math.abs(n);        });        System.out.println(number);        /*            \u4f7f\u7528\u65b9\u6cd5\u5f15\u7528\u4f18\u5316Lambda\u8868\u8fbe\u5f0f            Math\u7c7b\u662f\u5b58\u5728\u7684            abs\u8ba1\u7b97\u7edd\u5bf9\u503c\u7684\u9759\u6001\u65b9\u6cd5\u4e5f\u662f\u5df2\u7ecf\u5b58\u5728\u7684            \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u7c7b\u540d\u5f15\u7528\u9759\u6001\u65b9\u6cd5         */        int number2 = method(-10,Math::abs);        System.out.println(number2);    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/24.%E3%80%90Stream%E6%B5%81%E3%80%81%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%E3%80%91%E7%AC%94%E8%AE%B0/code/13_StreamAndMethodReference/src/com/itheima/demo06/StaticMethodReference/Demo01StaticMethodReference(1).java", "stars": "2", "class": {"name": "Demo01StaticMethodReference", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onClient", "params": ["PacketUpdatePicker", "EntityPlayer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClient(PacketUpdatePicker message, EntityPlayer player) {    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Network/Packets/PacketUpdatePicker.java", "stars": "2", "class": {"name": "PacketUpdatePicker", "extends": "Vec3fPacket", "implements": null, "modifiers": ["public"]}}, {"method_name": "onServer", "params": ["PacketUpdatePicker", "EntityPlayer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onServer(PacketUpdatePicker message, EntityPlayer player) {        ItemStack stack = player.getHeldItemMainhand();        if (stack.getItem() == ItemColorPicker.itemInst) {            ItemColorPicker.setColor(stack, message.x, message.y, message.z);        }    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Network/Packets/PacketUpdatePicker.java", "stars": "2", "class": {"name": "PacketUpdatePicker", "extends": "Vec3fPacket", "implements": null, "modifiers": ["public"]}}, {"method_name": "salvar", "params": ["Produto"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void salvar(Produto produto) {        em.persist(produto);    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/dao/ProdutoDaoImpl.java", "stars": "2", "class": {"name": "ProdutoDaoImpl", "extends": null, "implements": ["ProdutoDao"], "modifiers": ["public"]}}, {"method_name": "salvarNaTabela", "params": ["Produto", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void salvarNaTabela(Produto produto, Integer tabelaId) {        produtoTabelaKey = new ProdutoTabelaKey(produto.getId(), tabelaId);        produtoTabela.setId(produtoTabelaKey);        produtoTabela.setProduto(produto);        produtoTabela.setTabela(tabelaDao.recuperarPorId(tabelaId));        em.persist(produtoTabela);    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/dao/ProdutoDaoImpl.java", "stars": "2", "class": {"name": "ProdutoDaoImpl", "extends": null, "implements": ["ProdutoDao"], "modifiers": ["public"]}}, {"method_name": "recuperarPorTabela", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "List<Produto>", "snippet": "    public List<Produto> recuperarPorTabela(Integer tabelaId) {        return em.createQuery(\"select p from Produto p where Tabela.id = :tabelaId\", Produto.class)                .setParameter(\"tabelaId\", tabelaId)                .getResultList();    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/dao/ProdutoDaoImpl.java", "stars": "2", "class": {"name": "ProdutoDaoImpl", "extends": null, "implements": ["ProdutoDao"], "modifiers": ["public"]}}, {"method_name": "recuperar", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Produto>", "snippet": "    public List<Produto> recuperar() {        return em.createQuery(\"select p from Produto p\", Produto.class).getResultList();    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/dao/ProdutoDaoImpl.java", "stars": "2", "class": {"name": "ProdutoDaoImpl", "extends": null, "implements": ["ProdutoDao"], "modifiers": ["public"]}}, {"method_name": "recuperarPorId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Produto", "snippet": "    public Produto recuperarPorId(Integer id) {        return em.find(Produto.class, id);    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/dao/ProdutoDaoImpl.java", "stars": "2", "class": {"name": "ProdutoDaoImpl", "extends": null, "implements": ["ProdutoDao"], "modifiers": ["public"]}}, {"method_name": "recuperarPorTabelaIdEProdutoId", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Produto", "snippet": "    public Produto recuperarPorTabelaIdEProdutoId(Integer tabelaId, Integer produtoId) {        return em.createQuery(\"select p from Produto p where Tabela.id = :tabelaId and p.id = :produtoId\", Produto.class)                .setParameter(\"tabelaId\", tabelaId)                .setParameter(\"produtoId\", produtoId)                .getSingleResult();    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/dao/ProdutoDaoImpl.java", "stars": "2", "class": {"name": "ProdutoDaoImpl", "extends": null, "implements": ["ProdutoDao"], "modifiers": ["public"]}}, {"method_name": "atualizar", "params": ["Produto"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void atualizar(Produto produto) {        em.merge(produto);    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/dao/ProdutoDaoImpl.java", "stars": "2", "class": {"name": "ProdutoDaoImpl", "extends": null, "implements": ["ProdutoDao"], "modifiers": ["public"]}}, {"method_name": "atualizarNaTabela", "params": ["Produto", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void atualizarNaTabela(Produto produto, Integer tabelaId) {        produtoTabela.setProduto(produto);        produtoTabela.setTabela(tabelaDao.recuperarPorId(tabelaId));        em.merge(produtoTabela);    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/dao/ProdutoDaoImpl.java", "stars": "2", "class": {"name": "ProdutoDaoImpl", "extends": null, "implements": ["ProdutoDao"], "modifiers": ["public"]}}, {"method_name": "excluir", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void excluir(Integer id) {        em.remove(em.getReference(Produto.class, id));    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/dao/ProdutoDaoImpl.java", "stars": "2", "class": {"name": "ProdutoDaoImpl", "extends": null, "implements": ["ProdutoDao"], "modifiers": ["public"]}}, {"method_name": "excluirNaTabela", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void excluirNaTabela(Integer produtoId, Integer tabelaId) {        em.remove(em.getReference(ProdutoTabela.class, produtoTabela.getProduto()));    }", "url": "https://raw.githubusercontent.com/bonamigor/gera_notas/master/src/main/java/br/com/geranotas/dao/ProdutoDaoImpl.java", "stars": "2", "class": {"name": "ProdutoDaoImpl", "extends": null, "implements": ["ProdutoDao"], "modifiers": ["public"]}}, {"method_name": "copyOptions", "params": ["Options", "Options"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void copyOptions(Options srcOptions, Options destOptions) {\t\tdestOptions.inDensity = srcOptions.inDensity;\t\tdestOptions.inDither = srcOptions.inDither;\t\tdestOptions.inInputShareable = srcOptions.inInputShareable;\t\tdestOptions.inJustDecodeBounds = srcOptions.inJustDecodeBounds;\t\tdestOptions.inPreferredConfig = srcOptions.inPreferredConfig;\t\tdestOptions.inPurgeable = srcOptions.inPurgeable;\t\tdestOptions.inSampleSize = srcOptions.inSampleSize;\t\tdestOptions.inScaled = srcOptions.inScaled;\t\tdestOptions.inScreenDensity = srcOptions.inScreenDensity;\t\tdestOptions.inTargetDensity = srcOptions.inTargetDensity;\t\tdestOptions.inTempStorage = srcOptions.inTempStorage;\t\tif (Build.VERSION.SDK_INT >= 10) copyOptions10(srcOptions, destOptions);\t\tif (Build.VERSION.SDK_INT >= 11) copyOptions11(srcOptions, destOptions);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/decode/ImageDecodingInfo.java", "stars": "74", "class": {"name": "ImageDecodingInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "copyOptions10", "params": ["Options", "Options"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void copyOptions10(Options srcOptions, Options destOptions) {\t\tdestOptions.inPreferQualityOverSpeed = srcOptions.inPreferQualityOverSpeed;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/decode/ImageDecodingInfo.java", "stars": "74", "class": {"name": "ImageDecodingInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "copyOptions11", "params": ["Options", "Options"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void copyOptions11(Options srcOptions, Options destOptions) {\t\tdestOptions.inBitmap = srcOptions.inBitmap;\t\tdestOptions.inMutable = srcOptions.inMutable;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/decode/ImageDecodingInfo.java", "stars": "74", "class": {"name": "ImageDecodingInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getImageKey", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getImageKey() {\t\treturn imageKey;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/decode/ImageDecodingInfo.java", "stars": "74", "class": {"name": "ImageDecodingInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getImageUri", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getImageUri() {\t\treturn imageUri;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/decode/ImageDecodingInfo.java", "stars": "74", "class": {"name": "ImageDecodingInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTargetSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ImageSize", "snippet": "\tpublic ImageSize getTargetSize() {\t\treturn targetSize;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/decode/ImageDecodingInfo.java", "stars": "74", "class": {"name": "ImageDecodingInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getImageScaleType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ImageScaleType", "snippet": "\tpublic ImageScaleType getImageScaleType() {\t\treturn imageScaleType;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/decode/ImageDecodingInfo.java", "stars": "74", "class": {"name": "ImageDecodingInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getViewScaleType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ViewScaleType", "snippet": "\tpublic ViewScaleType getViewScaleType() {\t\treturn viewScaleType;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/decode/ImageDecodingInfo.java", "stars": "74", "class": {"name": "ImageDecodingInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDownloader", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ImageDownloader", "snippet": "\tpublic ImageDownloader getDownloader() {\t\treturn downloader;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/decode/ImageDecodingInfo.java", "stars": "74", "class": {"name": "ImageDecodingInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getExtraForDownloader", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "\tpublic Object getExtraForDownloader() {\t\treturn extraForDownloader;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/decode/ImageDecodingInfo.java", "stars": "74", "class": {"name": "ImageDecodingInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDecodingOptions", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Options", "snippet": "\tpublic Options getDecodingOptions() {\t\treturn decodingOptions;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/decode/ImageDecodingInfo.java", "stars": "74", "class": {"name": "ImageDecodingInfo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void run() {    if (isTriggerExpired()) {      logger.info(this + \" expired\");      return;    }    final boolean isTriggerConditionMet = this.triggerCondition.isMet();    if (isTriggerConditionMet) {      logger.info(\"Condition \" + this.triggerCondition.getExpression() + \" met\");      for (final TriggerAction action : this.actions) {        try {           ExecutableFlow flow = executorLoader.fetchExecutableFlow(this.execId);           // FIXME\u00a0Added judgment. If the task has been completed, the task will not be triggered.           if(!Status.isStatusFinished(flow.getStatus())){          //if(Status.RUNNING.equals(flow.getStatus())){            action.doAction();          }        } catch (final Exception e) {          logger.error(\"Failed to do action \" + action.getDescription()              + \" for execution \" + azkaban.execapp.Trigger.this.execId, e);        }      }    }  }  /**   * Check if the trigger is expired and reset isExpired   *   * @return true if trigger is expired   */  public boolean isTriggerExpired() {    return this.expireCondition.isMet();  }  @Override  public String toString() {    final StringBuilder actionsString = new StringBuilder();    for (final TriggerAction act : this.actions) {      actionsString.append(\", \");      actionsString.append(act.getDescription());    }    return \"Trigger for execution \" + this.execId + \" with trigger condition of \"        + this.triggerCondition.getExpression() + \" and expire condition of \"        + this.expireCondition.getExpression() + actionsString;  }}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/Trigger.java", "stars": "18", "class": {"name": "Trigger", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "isTriggerExpired", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isTriggerExpired() {    return this.expireCondition.isMet();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/Trigger.java", "stars": "18", "class": {"name": "Trigger", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    final StringBuilder actionsString = new StringBuilder();    for (final TriggerAction act : this.actions) {      actionsString.append(\", \");      actionsString.append(act.getDescription());    }    return \"Trigger for execution \" + this.execId + \" with trigger condition of \"        + this.triggerCondition.getExpression() + \" and expire condition of \"        + this.expireCondition.getExpression() + actionsString;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/Trigger.java", "stars": "18", "class": {"name": "Trigger", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "getProcess", "params": [], "throws": null, "modifiers": ["final", "protected"], "return_type": "Process", "snippet": "    protected final Process getProcess(){        return process;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "AbstractJavaInternalTaskProcess", "extends": "AbstractTaskProcess", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init() {        workDir = new File(WorkSpace.createLocalDirIfNotExist(getExecConfig().getJobLogDir(),                getJobId(),  getTaskId()));        taskLog = new DefaultLocalTaskLog(new File(workDir, logFileName()));        initInternal();        String execUser = getExecUser();        //try to switch user, change the owner of working directory        if(needToSwitchUser(execUser)){            int code = changeOwnerRecursive(workDir, execUser);            if(code != 0){                throw new RuntimeException(\"Task: \" + getTaskId() + \" switch to user:'\" + execUser + \"' failed\");            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "AbstractJavaInternalTaskProcess", "extends": "AbstractTaskProcess", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "clean", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clean() {        if(null == workDir){            workDir = new File(WorkSpace.getLocalSpace(getExecConfig().getJobLogDir(),                    getJobId(), getTaskId()));        }        if(workDir.exists()){            try {                clean(workDir);            }finally{                deleteRecurse(workDir);            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "AbstractJavaInternalTaskProcess", "extends": "AbstractTaskProcess", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "execute", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "int", "snippet": "    public final int execute() {        process = executeInternal();        if(null == process){            throw new TaskResAllocException(\"process == null\");        }        try {            return process.waitFor();        } catch (InterruptedException e) {            //If is necessary ?            Thread.currentThread().interrupt();            return -1;        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "AbstractJavaInternalTaskProcess", "extends": "AbstractTaskProcess", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "executeAsync", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Future<Integer>", "snippet": "    public Future<Integer> executeAsync() {        try {            process = executeInternal();            if (process == null){                throw new TaskResAllocException(\"process == null\");            }            long end = System.currentTimeMillis() + WAIT_FOR_ALLOCATE_TIME * 1000;            boolean allocate = checkIfAlloc();            boolean alive = true;            while(!allocate  && System.currentTimeMillis() < end){                Thread.sleep(CHECK_ALLOCATE_INTERVAL);                allocate = checkIfAlloc();                if (!alive){                    break;                }                alive = process.isAlive();            }            if(!allocate){                throw new TaskResAllocException();            }            return new JavaProcessFuture();        }catch(Exception e){            throw new TaskResAllocException(e.getMessage(), e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "AbstractJavaInternalTaskProcess", "extends": "AbstractTaskProcess", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "log", "params": ["long", "long"], "throws": null, "modifiers": ["public"], "return_type": "LogResult", "snippet": "    public LogResult log(long startLine, long windSize) {        if(null != taskLog){            return taskLog.fetchLog(startLine, windSize);        }        return new LogResult((int)startLine, -1, \"Cannot read log, this task doesn't init\", true);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "AbstractJavaInternalTaskProcess", "extends": "AbstractTaskProcess", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "destroy", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "    public final void destroy() {        if(null != process) {            try {                destroy(process);            } finally {                if (!process.isAlive()) {                    process = null;                }            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "AbstractJavaInternalTaskProcess", "extends": "AbstractTaskProcess", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getResource", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Resource", "snippet": "    public Resource getResource() {        return new Resource(getTaskId(), 0, 0);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "AbstractJavaInternalTaskProcess", "extends": "AbstractTaskProcess", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isAlive", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isAlive() {        return null != process && process.isAlive();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "AbstractJavaInternalTaskProcess", "extends": "AbstractTaskProcess", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getInputStream", "params": [], "throws": null, "modifiers": ["public"], "return_type": "InputStream", "snippet": "    public InputStream getInputStream() {        if(process == null){            return null;        }        return process.getInputStream();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "AbstractJavaInternalTaskProcess", "extends": "AbstractTaskProcess", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getErrorStream", "params": [], "throws": null, "modifiers": ["public"], "return_type": "InputStream", "snippet": "    public InputStream getErrorStream() {        if(process == null){            return null;        }        return process.getErrorStream();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "AbstractJavaInternalTaskProcess", "extends": "AbstractTaskProcess", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "changeOwnerRecursive", "params": ["File", "String"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int changeOwnerRecursive(File workDir, String execUser){        int code = 0;        try{            ProcessBuilder builder = RunShell.createProcBuilder(StringUtils.join(new String[]{\"sudo chown -R \", execUser,                workDir.getPath()}, \" \"), null, workDir);            code = builder.start().waitFor();        }catch(IOException e){            throw new RuntimeException(\"IO error while switching user\", e);        }catch(InterruptedException e){            Thread.currentThread().interrupt();            throw new RuntimeException(e);        }        return code;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "AbstractJavaInternalTaskProcess", "extends": "AbstractTaskProcess", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getProcessId", "params": ["Process"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "    private int getProcessId(Process process){        int processId = -1;        try{            File  pidFile = new File(workDir + File.separator + pidFileName());            if(pidFile.exists()){                try (BufferedReader reader = new BufferedReader(                        new InputStreamReader(new FileInputStream(pidFile), \"UTF-8\"))) {                    processId = Integer.parseInt(reader.readLine());                } catch (IOException e) {                    LOG.error(\"Read 'pid' file error: \" + e.getMessage());                } catch (Exception e) {                    LOG.error(\"Get pid error:\" + e.getMessage());                }                if (processId < 0 && process != null) {                    Field f = process.getClass().getDeclaredField(\"pid\");                    f.setAccessible(true);                    processId = f.getInt(process);                }            }        }catch(Throwable throwable){            LOG.error(\"Pid get occur exception: \" + throwable.getMessage(), throwable);        }        return processId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "AbstractJavaInternalTaskProcess", "extends": "AbstractTaskProcess", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "deletePidFile", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void deletePidFile(){        File pidFile = new File(workDir + File.separator + pidFileName());        if(pidFile.exists()){            deleteRecurse(pidFile);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "AbstractJavaInternalTaskProcess", "extends": "AbstractTaskProcess", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "deleteRecurse", "params": ["File"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void deleteRecurse(File file){        if(file.isDirectory()){            File[] files = file.listFiles();            if(null != files){                for(File f : files){                    deleteRecurse(f);                }            }            if(!file.delete() && file.exists()){                LOG.error(\"IO_ERROR: cannot delete directory: {}, please check the permission\", file.getAbsolutePath());            }        }else{            if(!file.delete() && file.exists()){                LOG.error(\"IO_ERROR: cannot delete file: {}, please check the permission\", file.getAbsolutePath());            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "AbstractJavaInternalTaskProcess", "extends": "AbstractTaskProcess", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "killProcess", "params": ["int"], "throws": ["IOException", "InterruptedException"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void killProcess(int pid) throws IOException, InterruptedException {        String osName = System.getProperty(\"os.name\");        if(StringUtils.isNotBlank(osName) && osName.toLowerCase().contains(WINDOWS_TAG)){            // kill all process (sub) windows            Runtime.getRuntime().exec(\"taskkill -PID\" + pid + \" -T -F\");        }else{            LOG.debug(\"Attempt to kill the process with cmd [kill -SIGTERM ]\");            String userDir = System.getProperty(\"user.dir\", \"\");            int code = Runtime.getRuntime().exec(userDir + \"/bin/task-kill.sh \" + pid).waitFor();            if(code != 0){                throw new RuntimeException(\"Return code is \" + code);            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "AbstractJavaInternalTaskProcess", "extends": "AbstractTaskProcess", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "destroy", "params": ["Process"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void destroy(@Nullable Process process){        try{            int pid = getProcessId(process);            if(pid != -1){                killProcess(pid);                //delete pid                deletePidFile();                LOG.info(\"Destroy job {} taskId {} complete.\", getJobId(), getTaskId());            }        }catch (Exception e){            LOG.error(\"Kill process of task{} error.\", getTaskId(), e);            throw new RuntimeException(e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "AbstractJavaInternalTaskProcess", "extends": "AbstractTaskProcess", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "clean", "params": ["File"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void clean(File workDir){        if(needToSwitchUser(getExecUser())){            changeOwnerRecursive(workDir, System.getProperty(\"user.name\", \"\"));        }        LOG.info(\"Clean the job {} task {} working directory: {}\", getJobId(), getTaskId(), workDir.getPath());        File[] files = workDir.listFiles();        if(null != files){            for(File file : files){                if(file.getName().equals(logFileName())){                    File dist = new File(getExecConfig().getJobLogHistory(), getJobId() + \"_\" + getTaskId() + \".log\");                    try{                        FileUtils.copyFile(file, dist);                    }catch(IOException e){                        throw new RuntimeException(\"IO_ERROR: copy file: \" + file.getAbsolutePath() +                                \" to dist: \" + dist.getAbsolutePath(), e);                    }                }                if(file.getName().equals(pidFileName())){                    try {                        //try to kill process                        String pidStr = FileUtils.readFileToString(file);                        if(StringUtils.isNotBlank(pidStr)){                            killProcess(Integer.parseInt(pidStr.trim()));                        }                    } catch (Exception e) {                        //ignore                    }                }            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "AbstractJavaInternalTaskProcess", "extends": "AbstractTaskProcess", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "needToSwitchUser", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean needToSwitchUser(String execUser){        String procUser = System.getProperty(\"user.name\", \"\");        return StringUtils.isNotBlank(execUser) &&                procUser.equals(getExecConfig().getLinuxSudoUser()) &&                !execUser.equals(procUser);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "AbstractJavaInternalTaskProcess", "extends": "AbstractTaskProcess", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "checkIfAlloc", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean checkIfAlloc(){        return true;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "AbstractJavaInternalTaskProcess", "extends": "AbstractTaskProcess", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isAlloc", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected  boolean isAlloc(){        return true;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "AbstractJavaInternalTaskProcess", "extends": "AbstractTaskProcess", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "logFileName", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "    protected String logFileName(){        return JobContainer.LOG_SYS_NAME;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "AbstractJavaInternalTaskProcess", "extends": "AbstractTaskProcess", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "pidFileName", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "String", "snippet": "    protected String pidFileName(){        return JobContainer.PID_NAME;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "AbstractJavaInternalTaskProcess", "extends": "AbstractTaskProcess", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "initInternal", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void initInternal();    /**     * Execute internally     * @return java process object     */    protected abstract Process executeInternal();    /**     * Java cmd builder     */    protected static final class JavaCommandBuilder{        private static final String DEFAULT_CLASSPATH_SEPARATOR ;        private static final MutablePair<String, String> HEAP_DUMP = new MutablePair<>(\"\", \"-XX:+HeapDumpOnOutOfMemoryError\");        private static final MutablePair<String, String> FILE_ENCODING_PROP = new MutablePair<>(\"-Dfile.encoding\", \"UTF-8\");        private static final MutablePair<String, String> SECURITY_EGD = new MutablePair<>(\"-Djava.security.egd\", \"file:///dev/urandom\");        /**         * Java execute Path         */        private String javaPath;        /**         * Main class         */        private String mainClass;        /**         * Classpath         */        private MutablePair<String, String> classPath = new MutablePair<>(\"-classpath\", \".\");        /**         * Xmx         */        private Triple<String, Long, MemUtils.StoreUnit> jvmXmx;        /**         * Xms         */        private Triple<String, Long, MemUtils.StoreUnit> jvmXms;        /**         * Default props         */        private List<Pair<String, String>> props = new ArrayList<>();        /**         * Command props         */        private List<Pair<String, String>> cmdProps = new ArrayList<>();        static{            String osName = System.getProperty(\"os.name\", \"\").toLowerCase();            if(osName.indexOf(\"windows\") > 0){                DEFAULT_CLASSPATH_SEPARATOR = \";\";            }else{                DEFAULT_CLASSPATH_SEPARATOR = \":\";            }        }        public JavaCommandBuilder(String javaPath, String mainClass){            this.javaPath = javaPath;            this.mainClass = mainClass;            this.props.add(HEAP_DUMP);            this.props.add(FILE_ENCODING_PROP);            this.props.add(SECURITY_EGD);        }        public JavaCommandBuilder Xmx(long size, MemUtils.StoreUnit unit){            this.jvmXmx = new MutableTriple<>(\"-Xmx\", size, unit);            return this;        }        public JavaCommandBuilder Xms(long size, MemUtils.StoreUnit unit){            this.jvmXms = new MutableTriple<>(\"-Xms\", size, unit);            return this;        }        public JavaCommandBuilder classPath(String name){            //Just support linux            this.classPath.setRight(name + DEFAULT_CLASSPATH_SEPARATOR + this.classPath.getRight());            return this;        }        public JavaCommandBuilder prop(String name, String value){            props.add(new MutablePair<>(name, value));            return this;        }        public JavaCommandBuilder prop(String value){            props.add(new MutablePair<>(\"\", value));            return this;        }        public JavaCommandBuilder prop(MutablePair<String, String> pair){            props.add(pair);            return this;        }        public JavaCommandBuilder cmdProp(String name, String value){            cmdProps.add(new MutablePair<>(name, value));            return this;        }        public JavaCommandBuilder cmdProp(String value){            cmdProps.add(new MutablePair<>(\"\", value));            return this;        }        public JavaCommandBuilder cmdProp(MutablePair<String, String> pair){            cmdProps.add(pair);            return this;        }        public String build(){            List<String> commandSliceList = new ArrayList<>();            commandSliceList.add(javaPath);            commandSliceList.add(jvmXmx.getLeft() + jvmXmx.getRight().toMB(jvmXmx.getMiddle()) + \"m\");            commandSliceList.add(jvmXms.getLeft() + jvmXms.getRight().toMB(jvmXms.getMiddle()) + \"m\");            commandSliceList.add(classPath.getLeft());            commandSliceList.add(classPath.getRight());            props.forEach(prop -> {                if(StringUtils.isNotBlank(prop.getLeft())) {                    commandSliceList.add(prop.getLeft() + \"=\" + prop.getRight());                }else {                    commandSliceList.add(prop.getRight());                }            });            commandSliceList.add(mainClass);            cmdProps.forEach(prop -> {                if(StringUtils.isNotBlank(prop.getLeft())) {                    commandSliceList.add(prop.getLeft() + \" \" + prop.getRight());                }else {                    commandSliceList.add(prop.getRight());                }            });            return StringUtils.join(commandSliceList, \" \");        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "AbstractJavaInternalTaskProcess", "extends": "AbstractTaskProcess", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "executeInternal", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "Process", "snippet": "    protected abstract Process executeInternal();    /**     * Java cmd builder     */    protected static final class JavaCommandBuilder{        private static final String DEFAULT_CLASSPATH_SEPARATOR ;        private static final MutablePair<String, String> HEAP_DUMP = new MutablePair<>(\"\", \"-XX:+HeapDumpOnOutOfMemoryError\");        private static final MutablePair<String, String> FILE_ENCODING_PROP = new MutablePair<>(\"-Dfile.encoding\", \"UTF-8\");        private static final MutablePair<String, String> SECURITY_EGD = new MutablePair<>(\"-Djava.security.egd\", \"file:///dev/urandom\");        /**         * Java execute Path         */        private String javaPath;        /**         * Main class         */        private String mainClass;        /**         * Classpath         */        private MutablePair<String, String> classPath = new MutablePair<>(\"-classpath\", \".\");        /**         * Xmx         */        private Triple<String, Long, MemUtils.StoreUnit> jvmXmx;        /**         * Xms         */        private Triple<String, Long, MemUtils.StoreUnit> jvmXms;        /**         * Default props         */        private List<Pair<String, String>> props = new ArrayList<>();        /**         * Command props         */        private List<Pair<String, String>> cmdProps = new ArrayList<>();        static{            String osName = System.getProperty(\"os.name\", \"\").toLowerCase();            if(osName.indexOf(\"windows\") > 0){                DEFAULT_CLASSPATH_SEPARATOR = \";\";            }else{                DEFAULT_CLASSPATH_SEPARATOR = \":\";            }        }        public JavaCommandBuilder(String javaPath, String mainClass){            this.javaPath = javaPath;            this.mainClass = mainClass;            this.props.add(HEAP_DUMP);            this.props.add(FILE_ENCODING_PROP);            this.props.add(SECURITY_EGD);        }        public JavaCommandBuilder Xmx(long size, MemUtils.StoreUnit unit){            this.jvmXmx = new MutableTriple<>(\"-Xmx\", size, unit);            return this;        }        public JavaCommandBuilder Xms(long size, MemUtils.StoreUnit unit){            this.jvmXms = new MutableTriple<>(\"-Xms\", size, unit);            return this;        }        public JavaCommandBuilder classPath(String name){            //Just support linux            this.classPath.setRight(name + DEFAULT_CLASSPATH_SEPARATOR + this.classPath.getRight());            return this;        }        public JavaCommandBuilder prop(String name, String value){            props.add(new MutablePair<>(name, value));            return this;        }        public JavaCommandBuilder prop(String value){            props.add(new MutablePair<>(\"\", value));            return this;        }        public JavaCommandBuilder prop(MutablePair<String, String> pair){            props.add(pair);            return this;        }        public JavaCommandBuilder cmdProp(String name, String value){            cmdProps.add(new MutablePair<>(name, value));            return this;        }        public JavaCommandBuilder cmdProp(String value){            cmdProps.add(new MutablePair<>(\"\", value));            return this;        }        public JavaCommandBuilder cmdProp(MutablePair<String, String> pair){            cmdProps.add(pair);            return this;        }        public String build(){            List<String> commandSliceList = new ArrayList<>();            commandSliceList.add(javaPath);            commandSliceList.add(jvmXmx.getLeft() + jvmXmx.getRight().toMB(jvmXmx.getMiddle()) + \"m\");            commandSliceList.add(jvmXms.getLeft() + jvmXms.getRight().toMB(jvmXms.getMiddle()) + \"m\");            commandSliceList.add(classPath.getLeft());            commandSliceList.add(classPath.getRight());            props.forEach(prop -> {                if(StringUtils.isNotBlank(prop.getLeft())) {                    commandSliceList.add(prop.getLeft() + \"=\" + prop.getRight());                }else {                    commandSliceList.add(prop.getRight());                }            });            commandSliceList.add(mainClass);            cmdProps.forEach(prop -> {                if(StringUtils.isNotBlank(prop.getLeft())) {                    commandSliceList.add(prop.getLeft() + \" \" + prop.getRight());                }else {                    commandSliceList.add(prop.getRight());                }            });            return StringUtils.join(commandSliceList, \" \");        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "AbstractJavaInternalTaskProcess", "extends": "AbstractTaskProcess", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "cancel", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean cancel(boolean mayInterruptIfRunning) {            if(mayInterruptIfRunning){                process.destroy();            }            return false;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "JavaProcessFuture", "extends": null, "implements": ["Future"], "modifiers": ["private"]}}, {"method_name": "isCancelled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isCancelled() {            return true;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "JavaProcessFuture", "extends": null, "implements": ["Future"], "modifiers": ["private"]}}, {"method_name": "isDone", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isDone() {            return !process.isAlive();        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "JavaProcessFuture", "extends": null, "implements": ["Future"], "modifiers": ["private"]}}, {"method_name": "get", "params": [], "throws": ["InterruptedException", "ExecutionException"], "modifiers": ["public"], "return_type": "Integer", "snippet": "        public Integer get() throws InterruptedException, ExecutionException {            return process.waitFor();        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "JavaProcessFuture", "extends": null, "implements": ["Future"], "modifiers": ["private"]}}, {"method_name": "get", "params": ["long", "TimeUnit"], "throws": ["InterruptedException", "ExecutionException", "TimeoutException"], "modifiers": ["public"], "return_type": "Integer", "snippet": "        public Integer get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {            boolean result = process.waitFor(timeout, unit);            if(!result){                throw new TaskTimeoutException();            }            return process.waitFor();        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "JavaProcessFuture", "extends": null, "implements": ["Future"], "modifiers": ["private"]}}, {"method_name": "Xmx", "params": ["long", "MemUtils"], "throws": null, "modifiers": ["public"], "return_type": "JavaCommandBuilder", "snippet": "        public JavaCommandBuilder Xmx(long size, MemUtils.StoreUnit unit){            this.jvmXmx = new MutableTriple<>(\"-Xmx\", size, unit);            return this;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "JavaCommandBuilder", "extends": null, "implements": null, "modifiers": ["final", "static", "protected"]}}, {"method_name": "Xms", "params": ["long", "MemUtils"], "throws": null, "modifiers": ["public"], "return_type": "JavaCommandBuilder", "snippet": "        public JavaCommandBuilder Xms(long size, MemUtils.StoreUnit unit){            this.jvmXms = new MutableTriple<>(\"-Xms\", size, unit);            return this;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "JavaCommandBuilder", "extends": null, "implements": null, "modifiers": ["final", "static", "protected"]}}, {"method_name": "classPath", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "JavaCommandBuilder", "snippet": "        public JavaCommandBuilder classPath(String name){            //Just support linux            this.classPath.setRight(name + DEFAULT_CLASSPATH_SEPARATOR + this.classPath.getRight());            return this;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "JavaCommandBuilder", "extends": null, "implements": null, "modifiers": ["final", "static", "protected"]}}, {"method_name": "prop", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "JavaCommandBuilder", "snippet": "        public JavaCommandBuilder prop(String name, String value){            props.add(new MutablePair<>(name, value));            return this;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "JavaCommandBuilder", "extends": null, "implements": null, "modifiers": ["final", "static", "protected"]}}, {"method_name": "prop", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "JavaCommandBuilder", "snippet": "        public JavaCommandBuilder prop(String value){            props.add(new MutablePair<>(\"\", value));            return this;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "JavaCommandBuilder", "extends": null, "implements": null, "modifiers": ["final", "static", "protected"]}}, {"method_name": "prop", "params": ["MutablePair<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "JavaCommandBuilder", "snippet": "        public JavaCommandBuilder prop(MutablePair<String, String> pair){            props.add(pair);            return this;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "JavaCommandBuilder", "extends": null, "implements": null, "modifiers": ["final", "static", "protected"]}}, {"method_name": "cmdProp", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "JavaCommandBuilder", "snippet": "        public JavaCommandBuilder cmdProp(String name, String value){            cmdProps.add(new MutablePair<>(name, value));            return this;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "JavaCommandBuilder", "extends": null, "implements": null, "modifiers": ["final", "static", "protected"]}}, {"method_name": "cmdProp", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "JavaCommandBuilder", "snippet": "        public JavaCommandBuilder cmdProp(String value){            cmdProps.add(new MutablePair<>(\"\", value));            return this;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "JavaCommandBuilder", "extends": null, "implements": null, "modifiers": ["final", "static", "protected"]}}, {"method_name": "cmdProp", "params": ["MutablePair<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "JavaCommandBuilder", "snippet": "        public JavaCommandBuilder cmdProp(MutablePair<String, String> pair){            cmdProps.add(pair);            return this;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "JavaCommandBuilder", "extends": null, "implements": null, "modifiers": ["final", "static", "protected"]}}, {"method_name": "build", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String build(){            List<String> commandSliceList = new ArrayList<>();            commandSliceList.add(javaPath);            commandSliceList.add(jvmXmx.getLeft() + jvmXmx.getRight().toMB(jvmXmx.getMiddle()) + \"m\");            commandSliceList.add(jvmXms.getLeft() + jvmXms.getRight().toMB(jvmXms.getMiddle()) + \"m\");            commandSliceList.add(classPath.getLeft());            commandSliceList.add(classPath.getRight());            props.forEach(prop -> {                if(StringUtils.isNotBlank(prop.getLeft())) {                    commandSliceList.add(prop.getLeft() + \"=\" + prop.getRight());                }else {                    commandSliceList.add(prop.getRight());                }            });            commandSliceList.add(mainClass);            cmdProps.forEach(prop -> {                if(StringUtils.isNotBlank(prop.getLeft())) {                    commandSliceList.add(prop.getLeft() + \" \" + prop.getRight());                }else {                    commandSliceList.add(prop.getRight());                }            });            return StringUtils.join(commandSliceList, \" \");        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/AbstractJavaInternalTaskProcess.java", "stars": "23", "class": {"name": "JavaCommandBuilder", "extends": null, "implements": null, "modifiers": ["final", "static", "protected"]}}, {"method_name": "encrypt", "params": ["byte", "String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "byte", "snippet": "    public static byte[] encrypt(byte[] cleartext, String password) throws IOException {        return encrypt(cleartext, password, DEFAULT_CYPHER);    }", "url": "https://raw.githubusercontent.com/sadv1r/ansible-vault-editor-idea-plugin/master/src/main/java/ru/sadv1r/ansible/vault/VaultHandler.java", "stars": "7", "class": {"name": "VaultHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "encrypt", "params": ["byte", "String", "String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "byte", "snippet": "    public static byte[] encrypt(byte[] cleartext, String password, String cypher) throws IOException {        @NotNull Optional<Cypher> cypherInstance = CypherFactory.getCypher(cypher);        if (!cypherInstance.isPresent()) {            throw new IOException(\"Unsupported vault cypher\");        }        byte[] vaultData = cypherInstance.get().encrypt(cleartext, password);        String vaultDataString = new String(vaultData);        String vaultPackage = cypherInstance.get().infoLine() + \"\\n\" + vaultDataString;        return vaultPackage.getBytes();    }", "url": "https://raw.githubusercontent.com/sadv1r/ansible-vault-editor-idea-plugin/master/src/main/java/ru/sadv1r/ansible/vault/VaultHandler.java", "stars": "7", "class": {"name": "VaultHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "decrypt", "params": ["String", "String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "byte", "snippet": "    public static byte[] decrypt(String encrypted, String password) throws IOException {        final int firstLineBreakIndex = encrypted.indexOf(LINE_BREAK);        final String infoLinePart = encrypted.substring(0, firstLineBreakIndex);        final VaultInfo vaultInfo = new VaultInfo(infoLinePart);        final String vaultDataPart = encrypted.substring(firstLineBreakIndex + 1);        final byte[] encryptedData = getVaultData(vaultDataPart);        return vaultInfo.getCypher().decrypt(encryptedData, password);    }", "url": "https://raw.githubusercontent.com/sadv1r/ansible-vault-editor-idea-plugin/master/src/main/java/ru/sadv1r/ansible/vault/VaultHandler.java", "stars": "7", "class": {"name": "VaultHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getVaultData", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "byte", "snippet": "    private static byte[] getVaultData(String vaultData) {        final String rawData = removeLineBreaks(vaultData);        return Util.unhex(rawData);    }", "url": "https://raw.githubusercontent.com/sadv1r/ansible-vault-editor-idea-plugin/master/src/main/java/ru/sadv1r/ansible/vault/VaultHandler.java", "stars": "7", "class": {"name": "VaultHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "removeLineBreaks", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "    private static String removeLineBreaks(final String string) {        final String[] lines = string.split(LINE_BREAK);        return String.join(\"\", Arrays.asList(lines));    }", "url": "https://raw.githubusercontent.com/sadv1r/ansible-vault-editor-idea-plugin/master/src/main/java/ru/sadv1r/ansible/vault/VaultHandler.java", "stars": "7", "class": {"name": "VaultHandler", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPageNum", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getPageNum() {        return pageNum;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/dto/PageResult.java", "stars": "1", "class": {"name": "PageResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPageNum", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPageNum(int pageNum) {        this.pageNum = pageNum;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/dto/PageResult.java", "stars": "1", "class": {"name": "PageResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPageSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getPageSize() {        return pageSize;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/dto/PageResult.java", "stars": "1", "class": {"name": "PageResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPageSize", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPageSize(int pageSize) {        this.pageSize = pageSize;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/dto/PageResult.java", "stars": "1", "class": {"name": "PageResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTotalSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getTotalSize() {        return totalSize;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/dto/PageResult.java", "stars": "1", "class": {"name": "PageResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTotalSize", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTotalSize(long totalSize) {        this.totalSize = totalSize;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/dto/PageResult.java", "stars": "1", "class": {"name": "PageResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTotalPages", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getTotalPages() {        return totalPages;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/dto/PageResult.java", "stars": "1", "class": {"name": "PageResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTotalPages", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTotalPages(int totalPages) {        this.totalPages = totalPages;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/dto/PageResult.java", "stars": "1", "class": {"name": "PageResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getContent", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<?>", "snippet": "    public List<?> getContent() {        return content;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/dto/PageResult.java", "stars": "1", "class": {"name": "PageResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setContent", "params": ["List<?>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setContent(List<?> content) {        this.content = content;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/dto/PageResult.java", "stars": "1", "class": {"name": "PageResult", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["FileNotFoundException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws FileNotFoundException {        //System.out.println(\"HelloWorld\");        //\u521b\u5efa\u6253\u5370\u6d41PrintStream\u5bf9\u8c61,\u6784\u9020\u65b9\u6cd5\u4e2d\u7ed1\u5b9a\u8981\u8f93\u51fa\u7684\u76ee\u7684\u5730        PrintStream ps = new PrintStream(\"10_IO\\\\print.txt\");        //\u5982\u679c\u4f7f\u7528\u7ee7\u627f\u81ea\u7236\u7c7b\u7684write\u65b9\u6cd5\u5199\u6570\u636e,\u90a3\u4e48\u67e5\u770b\u6570\u636e\u7684\u65f6\u5019\u4f1a\u67e5\u8be2\u7f16\u7801\u8868 97->a        ps.write(97);        //\u5982\u679c\u4f7f\u7528\u81ea\u5df1\u7279\u6709\u7684\u65b9\u6cd5print/println\u65b9\u6cd5\u5199\u6570\u636e,\u5199\u7684\u6570\u636e\u539f\u6837\u8f93\u51fa 97->97        ps.println(97);        ps.println(8.8);        ps.println('a');        ps.println(\"HelloWorld\");        ps.println(true);        //\u91ca\u653e\u8d44\u6e90        ps.close();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/17.%E3%80%90%E7%BA%BF%E7%A8%8B%E3%80%81%E5%90%8C%E6%AD%A5%E3%80%91-%E7%AC%94%E8%AE%B0/21.%E3%80%90%E7%BC%93%E5%86%B2%E6%B5%81%E3%80%81%E8%BD%AC%E6%8D%A2%E6%B5%81%E3%80%81%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81%E3%80%81%E6%89%93%E5%8D%B0%E6%B5%81%E3%80%91-%E7%AC%94%E8%AE%B0/code/10_IO/src/com/itheima/demo05/PrintStream/Demo01PrintStream.java", "stars": "2", "class": {"name": "Demo01PrintStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items.add(() -> new BlockItem(block, new Item.Properties().group(null)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedSunflowerBlock.java", "stars": "2", "class": {"name": "PottedSunflowerBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "clientLoad", "params": ["FMLClientSetupEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clientLoad(FMLClientSetupEvent event) {\t\tRenderTypeLookup.setRenderLayer(block, RenderType.getCutout());\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedSunflowerBlock.java", "stars": "2", "class": {"name": "PottedSunflowerBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "isNormalCube", "params": ["BlockState", "IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean isNormalCube(BlockState state, IBlockReader worldIn, BlockPos pos) {\t\t\treturn false;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedSunflowerBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "propagatesSkylightDown", "params": ["BlockState", "IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean propagatesSkylightDown(BlockState state, IBlockReader reader, BlockPos pos) {\t\t\treturn true;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedSunflowerBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getShape", "params": ["BlockState", "IBlockReader", "BlockPos", "ISelectionContext"], "throws": null, "modifiers": ["public"], "return_type": "VoxelShape", "snippet": "\t\tpublic VoxelShape getShape(BlockState state, IBlockReader world, BlockPos pos, ISelectionContext context) {\t\t\treturn VoxelShapes.create(0.312D, 0D, 0.312D, 0.688D, 0.375D, 0.688D);\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedSunflowerBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "tickRate", "params": ["IWorldReader"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\t\tpublic int tickRate(IWorldReader world) {\t\t\treturn 0;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedSunflowerBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getPickBlock", "params": ["BlockState", "RayTraceResult", "IBlockReader", "BlockPos", "PlayerEntity"], "throws": null, "modifiers": ["public"], "return_type": "ItemStack", "snippet": "\t\tpublic ItemStack getPickBlock(BlockState state, RayTraceResult target, IBlockReader world, BlockPos pos, PlayerEntity player) {\t\t\treturn new ItemStack(HelianthusBlock.block, (int) (1));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedSunflowerBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getMaterialColor", "params": ["BlockState", "IBlockReader", "BlockPos"], "throws": null, "modifiers": ["public"], "return_type": "MaterialColor", "snippet": "\t\tpublic MaterialColor getMaterialColor(BlockState state, IBlockReader blockAccess, BlockPos pos) {\t\t\treturn MaterialColor.STONE;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedSunflowerBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getPushReaction", "params": ["BlockState"], "throws": null, "modifiers": ["public"], "return_type": "PushReaction", "snippet": "\t\tpublic PushReaction getPushReaction(BlockState state) {\t\t\treturn PushReaction.DESTROY;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedSunflowerBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(Blocks.FLOWER_POT, (int) (1)));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedSunflowerBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "removedByPlayer", "params": ["BlockState", "World", "BlockPos", "PlayerEntity", "boolean", "IFluidState"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\t\tpublic boolean removedByPlayer(BlockState state, World world, BlockPos pos, PlayerEntity entity, boolean willHarvest, IFluidState fluid) {\t\t\tboolean retval = super.removedByPlayer(state, world, pos, entity, willHarvest, fluid);\t\t\tint x = pos.getX();\t\t\tint y = pos.getY();\t\t\tint z = pos.getZ();\t\t\t{\t\t\t\tjava.util.HashMap<String, Object> $_dependencies = new java.util.HashMap<>();\t\t\t\t$_dependencies.put(\"x\", x);\t\t\t\t$_dependencies.put(\"y\", y);\t\t\t\t$_dependencies.put(\"z\", z);\t\t\t\t$_dependencies.put(\"world\", world);\t\t\t\tSunflowerPlayerProcedure.executeProcedure($_dependencies);\t\t\t}\t\t\treturn retval;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedSunflowerBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onExplosionDestroy", "params": ["World", "BlockPos", "Explosion"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void onExplosionDestroy(World world, BlockPos pos, Explosion e) {\t\t\tsuper.onExplosionDestroy(world, pos, e);\t\t\tint x = pos.getX();\t\t\tint y = pos.getY();\t\t\tint z = pos.getZ();\t\t\t{\t\t\t\tjava.util.HashMap<String, Object> $_dependencies = new java.util.HashMap<>();\t\t\t\t$_dependencies.put(\"x\", x);\t\t\t\t$_dependencies.put(\"y\", y);\t\t\t\t$_dependencies.put(\"z\", z);\t\t\t\t$_dependencies.put(\"world\", world);\t\t\t\tSunflowerExplosionProcedure.executeProcedure($_dependencies);\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedSunflowerBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "onBlockActivated", "params": ["BlockState", "World", "BlockPos", "PlayerEntity", "Hand", "BlockRayTraceResult"], "throws": null, "modifiers": ["public"], "return_type": "ActionResultType", "snippet": "\t\tpublic ActionResultType onBlockActivated(BlockState state, World world, BlockPos pos, PlayerEntity entity, Hand hand,\t\t\t\tBlockRayTraceResult hit) {\t\t\tsuper.onBlockActivated(state, world, pos, entity, hand, hit);\t\t\tint x = pos.getX();\t\t\tint y = pos.getY();\t\t\tint z = pos.getZ();\t\t\tDirection direction = hit.getFace();\t\t\t{\t\t\t\tjava.util.HashMap<String, Object> $_dependencies = new java.util.HashMap<>();\t\t\t\t$_dependencies.put(\"entity\", entity);\t\t\t\t$_dependencies.put(\"x\", x);\t\t\t\t$_dependencies.put(\"y\", y);\t\t\t\t$_dependencies.put(\"z\", z);\t\t\t\t$_dependencies.put(\"world\", world);\t\t\t\tRightClickedSunflowerProcedure.executeProcedure($_dependencies);\t\t\t}\t\t\treturn ActionResultType.SUCCESS;\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/PottedSunflowerBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "init", "params": ["Configuration"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void init(Configuration originalConfig) {            OriginalConfPretreatmentUtil.doPretreatment(originalConfig);            LOG.debug(\"After job init(), job config now is:[\\n{}\\n]\",                    originalConfig.toJSON());        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/reader/CommonRdbmsReader.java", "stars": "23", "class": {"name": "Job", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "preCheck", "params": ["Configuration", "DataBaseType"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void preCheck(Configuration originalConfig, DataBaseType dataBaseType) {            /*\u68c0\u67e5\u6bcf\u4e2a\u8868\u662f\u5426\u6709\u8bfb\u6743\u9650\uff0c\u4ee5\u53caquerySql\u8ddfsplik Key\u662f\u5426\u6b63\u786e*/            Configuration queryConf = ReaderSplitUtil.doPreCheckSplit(originalConfig);            String splitPK = queryConf.getString(Key.SPLIT_PK);            List<Object> connList = queryConf.getList(Constant.CONN_MARK, Object.class);            String username = queryConf.getString(Key.USERNAME);            String password = queryConf.getString(Key.PASSWORD);            String proxyHost = queryConf.getString(Key.PROXY_HOST, DEFAULT_PROXY_SOCKS_HOST);            int proxyPort = queryConf.getInt(Key.PROXY_PORT, DEFAULT_PROXY_SOCKS_PORT);            ExecutorService exec;            if (connList.size() < 10) {                exec = Executors.newFixedThreadPool(connList.size());            } else {                exec = Executors.newFixedThreadPool(10);            }            Collection<PreCheckTask> taskList = new ArrayList<PreCheckTask>();            for (int i = 0, len = connList.size(); i < len; i++) {                Configuration connConf = Configuration.from(connList.get(i).toString());                PreCheckTask t = new PreCheckTask(username, password, proxyHost, proxyPort, connConf, dataBaseType, splitPK);                taskList.add(t);            }            List<Future<Boolean>> results = Lists.newArrayList();            try {                results = exec.invokeAll(taskList);            } catch (InterruptedException e) {                Thread.currentThread().interrupt();            }            for (Future<Boolean> result : results) {                try {                    result.get();                } catch (ExecutionException e) {                    DataXException de = (DataXException) e.getCause();                    throw de;                } catch (InterruptedException e) {                    Thread.currentThread().interrupt();                }            }            exec.shutdownNow();        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/reader/CommonRdbmsReader.java", "stars": "23", "class": {"name": "Job", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "split", "params": ["Configuration", "int"], "throws": null, "modifiers": ["public"], "return_type": "List<Configuration>", "snippet": "        public List<Configuration> split(Configuration originalConfig,                                         int adviceNumber) {            return ReaderSplitUtil.doSplit(originalConfig, adviceNumber);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/reader/CommonRdbmsReader.java", "stars": "23", "class": {"name": "Job", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "post", "params": ["Configuration"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void post(Configuration originalConfig) {            // do nothing        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/reader/CommonRdbmsReader.java", "stars": "23", "class": {"name": "Job", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "destroy", "params": ["Configuration"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void destroy(Configuration originalConfig) {            // do nothing        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/reader/CommonRdbmsReader.java", "stars": "23", "class": {"name": "Job", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "init", "params": ["Configuration"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void init(Configuration readerSliceConfig) {\t\t\t/* for database connection */            this.username = readerSliceConfig.getString(Key.USERNAME);            this.password = readerSliceConfig.getString(Key.PASSWORD);            this.proxyHost = readerSliceConfig.getString(Key.PROXY_HOST, DEFAULT_PROXY_SOCKS_HOST);            this.proxyPort = readerSliceConfig.getInt(Key.PROXY_PORT, DEFAULT_PROXY_SOCKS_PORT);            if(StringUtils.isNotBlank(password)){                try {                    password = (String) CryptoUtils.string2Object(password);                } catch (Exception e) {                    throw DataXException.asDataXException(DBUtilErrorCode.CONF_ERROR, \"decrypt password failed\");                }            }            this.jdbcUrl = readerSliceConfig.getString(Key.JDBC_URL);            //ob10\u7684\u5904\u7406            if (this.jdbcUrl.startsWith(com.alibaba.datax.plugin.rdbms.writer.Constant.OB10_SPLIT_STRING) && this.dataBaseType == DataBaseType.MySql) {                String[] ss = this.jdbcUrl.split(com.alibaba.datax.plugin.rdbms.writer.Constant.OB10_SPLIT_STRING_PATTERN);                if (ss.length != 3) {                    throw DataXException                            .asDataXException(                                    DBUtilErrorCode.JDBC_OB10_ADDRESS_ERROR, \"JDBC OB10\u683c\u5f0f\u9519\u8bef\uff0c\u8bf7\u8054\u7cfbaskdatax\");                }                LOG.info(\"this is ob1_0 jdbc url.\");                this.username = ss[1].trim() + \":\" + this.username;                this.jdbcUrl = ss[2];                LOG.info(\"this is ob1_0 jdbc url. user=\" + this.username + \" :url=\" + this.jdbcUrl);            }            this.mandatoryEncoding = readerSliceConfig.getString(Key.MANDATORY_ENCODING, \"\");            basicMsg = String.format(\"jdbcUrl:[%s]\", this.jdbcUrl);        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/reader/CommonRdbmsReader.java", "stars": "23", "class": {"name": "Task", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "startRead", "params": ["Configuration", "RecordSender", "TaskPluginCollector", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void startRead(Configuration readerSliceConfig,                              RecordSender recordSender,                              TaskPluginCollector taskPluginCollector, int fetchSize) {            String querySql = readerSliceConfig.getString(Key.QUERY_SQL);            String table = readerSliceConfig.getString(Key.TABLE);            PerfTrace.getInstance().addTaskDetails(taskId, table + \",\" + basicMsg);            LOG.info(\"Begin to read record by Sql: [{}\\n] {}.\",                    querySql, basicMsg);            PerfRecord queryPerfRecord = new PerfRecord(taskGroupId, taskId, PerfRecord.PHASE.SQL_QUERY);            queryPerfRecord.start();            Connection conn = DBUtil.getConnection(this.dataBaseType, jdbcUrl,                    username, password, proxyHost, proxyPort);            // session config .etc related            DBUtil.dealWithSessionConfig(conn, readerSliceConfig,                    this.dataBaseType, basicMsg);            int columnNumber = 0;            ResultSet rs = null;            Statement stmt = null;            try {                rs = DBUtil.query(conn, querySql, fetchSize);                stmt = rs.getStatement();                queryPerfRecord.end();                ResultSetMetaData metaData = rs.getMetaData();                columnNumber = metaData.getColumnCount();                //\u8fd9\u4e2a\u7edf\u8ba1\u5e72\u51c0\u7684result_Next\u65f6\u95f4                PerfRecord allResultPerfRecord = new PerfRecord(taskGroupId, taskId, PerfRecord.PHASE.RESULT_NEXT_ALL);                allResultPerfRecord.start();                long rsNextUsedTime = 0;                long lastTime = System.nanoTime();                while (rs.next()) {                    rsNextUsedTime += (System.nanoTime() - lastTime);                    this.transportOneRecord(recordSender, rs,                            metaData, columnNumber, mandatoryEncoding, taskPluginCollector);                    lastTime = System.nanoTime();                }                allResultPerfRecord.end(rsNextUsedTime);                //\u76ee\u524d\u5927\u76d8\u662f\u4f9d\u8d56\u8fd9\u4e2a\u6253\u5370\uff0c\u800c\u4e4b\u524d\u8fd9\u4e2aFinish read record\u662f\u5305\u542b\u4e86sql\u67e5\u8be2\u548cresult next\u7684\u5168\u90e8\u65f6\u95f4                LOG.info(\"Finished read record by Sql: [{}\\n] {}.\",                        querySql, basicMsg);            } catch (Exception e) {                throw RdbmsException.asQueryException(this.dataBaseType, e, querySql, table, username);            } finally {                DBUtil.closeDBResources(stmt, conn);            }        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/reader/CommonRdbmsReader.java", "stars": "23", "class": {"name": "Task", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "post", "params": ["Configuration"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void post(Configuration originalConfig) {            // do nothing        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/reader/CommonRdbmsReader.java", "stars": "23", "class": {"name": "Task", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "destroy", "params": ["Configuration"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void destroy(Configuration originalConfig) {            // do nothing        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/reader/CommonRdbmsReader.java", "stars": "23", "class": {"name": "Task", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "transportOneRecord", "params": ["RecordSender", "ResultSet", "ResultSetMetaData", "int", "String", "TaskPluginCollector"], "throws": null, "modifiers": ["protected"], "return_type": "Record", "snippet": "        protected Record transportOneRecord(RecordSender recordSender, ResultSet rs,                                            ResultSetMetaData metaData, int columnNumber, String mandatoryEncoding,                                            TaskPluginCollector taskPluginCollector) {            Record record = buildRecord(recordSender, rs, metaData, columnNumber, mandatoryEncoding, taskPluginCollector);            recordSender.sendToWriter(record);            return record;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/reader/CommonRdbmsReader.java", "stars": "23", "class": {"name": "Task", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "buildRecord", "params": ["RecordSender", "ResultSet", "ResultSetMetaData", "int", "String", "TaskPluginCollector"], "throws": null, "modifiers": ["protected"], "return_type": "Record", "snippet": "        protected Record buildRecord(RecordSender recordSender, ResultSet rs, ResultSetMetaData metaData, int columnNumber, String mandatoryEncoding,                                     TaskPluginCollector taskPluginCollector) {            Record record = recordSender.createRecord();            try {                for (int i = 1; i <= columnNumber; i++) {                    switch (metaData.getColumnType(i)) {                        case Types.CHAR:                        case Types.NCHAR:                        case Types.VARCHAR:                        case Types.LONGVARCHAR:                        case Types.NVARCHAR:                        case Types.LONGNVARCHAR:                            String rawData;                            if (StringUtils.isBlank(mandatoryEncoding)) {                                rawData = rs.getString(i);                            } else {                                rawData = new String((rs.getBytes(i) == null ? EMPTY_CHAR_ARRAY :                                        rs.getBytes(i)), mandatoryEncoding);                            }                            record.addColumn(new StringColumn(rawData));                            break;                        case Types.CLOB:                        case Types.NCLOB:                            record.addColumn(new StringColumn(rs.getString(i)));                            break;                        case Types.SMALLINT:                        case Types.TINYINT:                        case Types.INTEGER:                        case Types.BIGINT:                            record.addColumn(new LongColumn(rs.getString(i)));                            break;                        case Types.NUMERIC:                        case Types.DECIMAL:                            record.addColumn(new DoubleColumn(rs.getString(i)));                            break;                        case Types.FLOAT:                        case Types.REAL:                        case Types.DOUBLE:                            record.addColumn(new DoubleColumn(rs.getString(i)));                            break;                        case Types.TIME:                            record.addColumn(new DateColumn(rs.getTime(i)));                            break;                        // for mysql bug, see http://bugs.mysql.com/bug.php?id=35115                        case Types.DATE:                            if (metaData.getColumnTypeName(i).equalsIgnoreCase(\"year\")) {                                record.addColumn(new LongColumn(rs.getInt(i)));                            } else {                                record.addColumn(new DateColumn(rs.getDate(i)));                            }                            break;                        case Types.TIMESTAMP:                            record.addColumn(new DateColumn(rs.getTimestamp(i)));                            break;                        case Types.BINARY:                        case Types.VARBINARY:                        case Types.BLOB:                        case Types.LONGVARBINARY:                            record.addColumn(new BytesColumn(rs.getBytes(i)));                            break;                        // warn: bit(1) -> Types.BIT \u53ef\u4f7f\u7528BoolColumn                        // warn: bit(>1) -> Types.VARBINARY \u53ef\u4f7f\u7528BytesColumn                        case Types.BOOLEAN:                        case Types.BIT:                            record.addColumn(new BoolColumn(rs.getBoolean(i)));                            break;                        case Types.NULL:                            String stringData = null;                            if (rs.getObject(i) != null) {                                stringData = rs.getObject(i).toString();                            }                            record.addColumn(new StringColumn(stringData));                            break;                        default:                            throw DataXException                                    .asDataXException(                                            DBUtilErrorCode.UNSUPPORTED_TYPE,                                            String.format(                                                    \"\u60a8\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u5217\u914d\u7f6e\u4fe1\u606f\u6709\u8bef. \u56e0\u4e3aDataX \u4e0d\u652f\u6301\u6570\u636e\u5e93\u8bfb\u53d6\u8fd9\u79cd\u5b57\u6bb5\u7c7b\u578b. \u5b57\u6bb5\u540d:[%s], \u5b57\u6bb5\u540d\u79f0:[%s], \u5b57\u6bb5Java\u7c7b\u578b:[%s]. \u8bf7\u5c1d\u8bd5\u4f7f\u7528\u6570\u636e\u5e93\u51fd\u6570\u5c06\u5176\u8f6c\u6362datax\u652f\u6301\u7684\u7c7b\u578b \u6216\u8005\u4e0d\u540c\u6b65\u8be5\u5b57\u6bb5 .\",                                                    metaData.getColumnName(i),                                                    metaData.getColumnType(i),                                                    metaData.getColumnClassName(i)));                    }                }            } catch (Exception e) {                if (IS_DEBUG) {                    LOG.debug(\"read domain \" + record.toString()                            + \" occur exception:\", e);                }                //TODO \u8fd9\u91cc\u8bc6\u522b\u4e3a\u810f\u6570\u636e\u9760\u8c31\u5417\uff1f                taskPluginCollector.collectDirtyRecord(record, e);                if (e instanceof DataXException) {                    throw (DataXException) e;                }            }            return record;        }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/reader/CommonRdbmsReader.java", "stars": "23", "class": {"name": "Task", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "clear", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clear(boolean reallocate) {\t\ttopRegion=0; topCell=0; topOffset=0;\t\tnBits=0; nElements=0;\t\tif (reallocate) regions = new long[1][LONGS_PER_REGION];\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/RigidStream.java", "stars": "2", "class": {"name": "RigidStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deallocate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void deallocate() {\t\tint nRegions = regions.length;\t\tfor (int i=0; i<nRegions; i++) regions[i]=null;\t\tregions=null;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/RigidStream.java", "stars": "2", "class": {"name": "RigidStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "nBits", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "long", "snippet": "\tpublic final long nBits() {\t\treturn nBits;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/RigidStream.java", "stars": "2", "class": {"name": "RigidStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "nElements", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "long", "snippet": "\tpublic final long nElements() {\t\treturn nElements;\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/RigidStream.java", "stars": "2", "class": {"name": "RigidStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "push", "params": ["long"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "\tpublic final void push(long bits) {\t\tfinal long lBits = bits&Utils.shiftOnesRight[sixtyFourMinusBitsPerInt];\t\tint tmp = 64-topOffset;\t\tfinal int nRegions;\t\tlong[] array = regions[topRegion];\t\tnElements++;\t\tnBits+=bitsPerInt;//System.out.println(\"topRegion=\"+topRegion+\" regions=\"+regions+\" regions[topRegion]=\"+regions[topRegion]);\t\tif (tmp>0) {\t\t\tarray[topCell]&=Utils.shiftOnesLeft[tmp];\t\t\tarray[topCell]|=lBits<<(tmp-bitsPerInt);\t\t\ttopOffset+=bitsPerInt;\t\t}\t\telse {\t\t\tif (topCell+1<array.length) topCell++;\t\t\telse {\t\t\t\tnRegions=regions.length;\t\t\t\tif (topRegion==nRegions-1) {\t\t\t\t\tlong[][] newRegions = new long[nRegions<<1][0];\t\t\t\t\tSystem.arraycopy(regions,0,newRegions,0,nRegions);\t\t\t\t\tregions=newRegions;\t\t\t\t}\t\t\t\ttopRegion++;\t\t\t\tregions[topRegion] = new long[LONGS_PER_REGION];\t\t\t\tarray=regions[topRegion];\t\t\t\ttopCell=0;\t\t\t}\t\t\tarray[topCell]=0L;\t\t\tarray[topCell]|=lBits<<sixtyFourMinusBitsPerInt;\t\t\ttopOffset=bitsPerInt;\t\t}\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/RigidStream.java", "stars": "2", "class": {"name": "RigidStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pop", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "\tpublic final void pop() {if (nBits==0) System.out.println(\"popping from an empty stack!!!!\");\t\tnElements--;\t\tnBits-=bitsPerInt;boolean probe = topRegion==0 && topCell==0 && topOffset==0;\t\tint newTopRegion = (int)(nBits>>>(LOG2_LONGS_PER_REGION+6));\t\tfor (int i=newTopRegion+1; i<=topRegion; i++) regions[i]=null;\t\ttopRegion=newTopRegion;\t\ttopCell=(int)((nBits>>>6)-(topRegion<<LOG2_LONGS_PER_REGION));\t\ttopOffset=(int)(nBits&Utils.LAST_6_BITS_LONG);if (probe) System.out.println(\"after popping the last element: nBits=\"+nBits+\" topRegion=\"+topRegion+\" topCell=\"+topCell+\" topOffset=\"+topOffset);/*\t\tif (topOffset!=0) {\t\t\ttopOffset-=bitsPerInt;\t\t\treturn;\t\t}\t\tif (topCell!=0) {\t\t\ttopCell--;\t\t\ttopOffset=sixtyFourMinusBitsPerInt;\t\t\treturn;\t\t}\t\tif (topRegion!=0) {\t\t\tregions[topRegion]=null;\t\t\ttopRegion--;\t\t\ttopCell=LONGS_PER_REGION-1;\t\t\ttopOffset=sixtyFourMinusBitsPerInt;\t\t\treturn;\t\t}*/\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/RigidStream.java", "stars": "2", "class": {"name": "RigidStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getElementAt", "params": ["long"], "throws": null, "modifiers": ["public", "final"], "return_type": "long", "snippet": "\tpublic final long getElementAt(long i) {\t\ti<<=log2BitsPerInt;\t\tint offset = (int)(i&Utils.shiftOnesRight[64-6]);\t\ti>>>=6;\t\tint cell = (int)(i&Utils.shiftOnesRight[SIXTYFOUR_MINUS_LOG2_LONGS_PER_REGION]);\t\ti>>>=LOG2_LONGS_PER_REGION;\t\treturn (regions[(int)i][cell]>>>sixtyFourMinusBitsPerInt-offset)&oneSelectors[0];\t}", "url": "https://raw.githubusercontent.com/fcunial/portfolio/master/surprisingStrings/RigidStream.java", "stars": "2", "class": {"name": "RigidStream", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createBulk", "params": ["BulkProcessor", "int", "int"], "throws": null, "modifiers": [], "return_type": "BulkProcessor", "snippet": "    BulkProcessor createBulk(BulkProcessor.Listener listener, int bulkActions, int bulkPerTask){        BiConsumer<BulkRequest, ActionListener<BulkResponse>> consumer = ((bulkRequest, bulkResponseActionListener)            -> restClient.bulkAsync(bulkRequest, COMMON_OPTIONS, bulkResponseActionListener));        BulkProcessor.Builder builder = BulkProcessor.builder(consumer, listener);        builder.setBulkActions(bulkActions);        builder.setBulkSize(new ByteSizeValue(-1, ByteSizeUnit.BYTES));        builder.setConcurrentRequests(bulkPerTask - 1);        builder.setBackoffPolicy(BackoffPolicy.constantBackoff(TimeValue.timeValueMillis(DEFAULT_BACKOFF_DELAY_MILLS),                DEFAULT_BACKOFF_TIMES));        BulkProcessor bulkProcessor = builder.build();        bulkProcessors.add(bulkProcessor);        return bulkProcessor;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/ElasticRestClient.java", "stars": "23", "class": {"name": "ElasticRestClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "close", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void close(){        for(BulkProcessor bulkProcessor : bulkProcessors){            bulkProcessor.close();        }        execute(restClient ->{            try {                restClient.close();            }catch(Exception e){                throw DataXException.asDataXException(ElasticWriterErrorCode.CLOSE_EXCEPTION, e);            }            return null;        });    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/ElasticRestClient.java", "stars": "23", "class": {"name": "ElasticRestClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "existIndices", "params": ["String"], "throws": null, "modifiers": [], "return_type": "boolean", "snippet": "    boolean existIndices(String... indices){        return execute(restClient -> restClient.indices().exists(configureTimedRequest(new GetIndexRequest(indices)),                COMMON_OPTIONS));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/ElasticRestClient.java", "stars": "23", "class": {"name": "ElasticRestClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteIndices", "params": ["String"], "throws": null, "modifiers": [], "return_type": "boolean", "snippet": "    boolean deleteIndices(String... indices){        return execute( restClient -> {                AcknowledgedResponse response = restClient.indices()                        .delete(new DeleteIndexRequest(indices), COMMON_OPTIONS);                return response.isAcknowledged();        });    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/ElasticRestClient.java", "stars": "23", "class": {"name": "ElasticRestClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createIndex", "params": ["String", "String", "Map<String,Object>", "Map<Object,Object>"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void createIndex(String indexName, String typeName, Map<String, Object> settings,                     Map<Object, Object> properties){        execute( restClient ->{            if(!existIndices(indexName)) {                createIndex(indexName, settings);            }            putMapping(indexName, typeName, properties);            return null;        });    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/ElasticRestClient.java", "stars": "23", "class": {"name": "ElasticRestClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProps", "params": ["String", "String"], "throws": null, "modifiers": [], "return_type": "Map<Object,Object>", "snippet": "    Map<Object, Object> getProps(String indexName, String typeName){        return execute( restClient->{            GetMappingsRequest request = new GetMappingsRequest();            request.indices(indexName);            RequestOptions.Builder optionsBuilder = COMMON_OPTIONS.toBuilder();            optionsBuilder.addHeader(MAPPING_TYPE_HEAD, typeName);            GetMappingsResponse response = restClient.indices()                    .getMapping(configureTimedRequest(request), optionsBuilder.build());            Map<String, Object> typeMap = response.mappings().get(indexName).sourceAsMap();            Map propsMap = typeMap;            if(typeMap.containsKey(typeName)) {                Object type = typeMap.get(typeName);                if (type instanceof Map) {                    propsMap = (Map)type;                }            }            Object props = propsMap.get(FIELD_PROPS);            if (props instanceof Map) {                return (Map) props;            }            return null;        });    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/ElasticRestClient.java", "stars": "23", "class": {"name": "ElasticRestClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "putMapping", "params": ["String", "String", "Map<Object,Object>"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void putMapping(String indexName, String typeName, Map<Object, Object> properties) throws IOException {        if(null == properties){            properties = new HashMap<>();        }        Map<String, Object> mappings = new HashMap<>(1);        mappings.put(FIELD_PROPS, properties);        PutMappingRequest request = new PutMappingRequest(indexName).source(mappings);        RequestOptions.Builder optionsBuilder = COMMON_OPTIONS.toBuilder();        optionsBuilder.addHeader(MAPPING_TYPE_HEAD, typeName);        AcknowledgedResponse acknowledgedResponse = restClient.indices().putMapping(configureTimedRequest(request), optionsBuilder.build());        if(!acknowledgedResponse.isAcknowledged()){            throw DataXException.asDataXException(ElasticWriterErrorCode.PUT_MAPPINGS_ERROR,                    \"can't put mapping, type:[\" + typeName +\"], properties:\" +JSON.toJSONString(properties));        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/ElasticRestClient.java", "stars": "23", "class": {"name": "ElasticRestClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createIndex", "params": ["String", "Map<String,Object>"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void createIndex(String indexName, Map<String, Object> settings) throws IOException {        if(null == settings){            settings = new HashMap<>(1);        }        CreateIndexRequest request = new CreateIndexRequest(indexName)                .settings(settings).waitForActiveShards(ActiveShardCount.DEFAULT);        try {            CreateIndexResponse response = restClient.indices().create(configureTimedRequest(request), COMMON_OPTIONS);            if(!response.isAcknowledged()){                throw DataXException.asDataXException(ElasticWriterErrorCode.CREATE_INDEX_ERROR, \"can't create index:[\" + indexName +                        \"], settings:\" + JSON.toJSONString(settings) + \", message:[acknowledged=false]\");            }        }catch(ElasticsearchException e){            if(e.status().getStatus()                    != RestStatus.BAD_REQUEST.getStatus()){                throw e;            }            logger.error(\"index:[\"+ indexName +\"] maybe already existed, status=\" + e.status().getStatus());        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/ElasticRestClient.java", "stars": "23", "class": {"name": "ElasticRestClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "configureTimedRequest", "params": ["T"], "throws": null, "modifiers": ["private"], "return_type": "T", "snippet": "    private <T extends TimedRequest>T configureTimedRequest(T request){        request.setMasterTimeout(TimeValue                .timeValueMillis(Integer                        .valueOf(String.valueOf(clientConfig.getOrDefault(ElasticKey.CLIENT_CONFIG_MASTER_TIMEOUT, MASTER_TIMEOUT_IN_MILLISECONDS)))                ));        request.setTimeout(TimeValue                .timeValueMillis(Integer                        .valueOf(String.valueOf(clientConfig.getOrDefault(ElasticKey.CLIENT_CONFIG_REQ_TIMEOUT, REQ_TIMEOUT_IN_MILLISECONDS)))                ));        return request;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/ElasticRestClient.java", "stars": "23", "class": {"name": "ElasticRestClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "execute", "params": ["Exec<RestHighLevelClient,R>"], "throws": null, "modifiers": ["private"], "return_type": "R", "snippet": "    private <R>R execute(Exec<RestHighLevelClient, R> execFunc){        try {            return execFunc.apply(restClient);        }catch(ElasticsearchException e){            throw DataXException.asDataXException(ElasticWriterErrorCode.REQUEST_ERROR, e.status().name(), e);        }catch (Exception e) {            throw DataXException.asDataXException(ElasticWriterErrorCode.BAD_CONNECT, e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/ElasticRestClient.java", "stars": "23", "class": {"name": "ElasticRestClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "custom", "params": ["String", "Map<String,Object>"], "throws": null, "modifiers": ["static"], "return_type": "ElasticRestClient", "snippet": "    static ElasticRestClient custom(String[] endPoints, Map<String, Object> clientConfig){        try {            return new ElasticRestClient(endPoints, null, null, clientConfig);        } catch (IOException e) {            throw DataXException.asDataXException(ElasticWriterErrorCode.BAD_CONNECT, e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/ElasticRestClient.java", "stars": "23", "class": {"name": "ElasticRestClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "custom", "params": ["String", "String", "String", "Map<String,Object>"], "throws": null, "modifiers": ["static"], "return_type": "ElasticRestClient", "snippet": "    static ElasticRestClient custom(String[] endPoints,                                    String username, String password, Map<String, Object> clientConfig){        try {            return new ElasticRestClient(endPoints, username, password, null, clientConfig);        } catch (IOException e) {            throw DataXException.asDataXException(ElasticWriterErrorCode.BAD_CONNECT, e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/ElasticRestClient.java", "stars": "23", "class": {"name": "ElasticRestClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sslCustom", "params": ["String", "String", "String", "Map<String,Object>"], "throws": null, "modifiers": ["static"], "return_type": "ElasticRestClient", "snippet": "    static ElasticRestClient sslCustom(String[] endPoints,                                              String keyStorePath, String keyStorePass, Map<String, Object> clientConfig){        try {            return new ElasticRestClient(endPoints, null, buildSSLContext(keyStorePath, keyStorePass)            , clientConfig);        } catch (IOException e) {            throw DataXException.asDataXException(ElasticWriterErrorCode.BAD_CONNECT, e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/ElasticRestClient.java", "stars": "23", "class": {"name": "ElasticRestClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sslCustom", "params": ["String", "String", "String", "String", "String", "Map<String,Object>"], "throws": null, "modifiers": ["static"], "return_type": "ElasticRestClient", "snippet": "    static ElasticRestClient sslCustom(String[] endPoints,                                              String username, String password,                                              String keyStorePath, String keyStorePass, Map<String, Object> clientConfig){        try{            return new ElasticRestClient(endPoints, username, password,                    buildSSLContext(keyStorePath, keyStorePass), clientConfig);        }catch(IOException e){            throw DataXException.asDataXException(ElasticWriterErrorCode.BAD_CONNECT, e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/ElasticRestClient.java", "stars": "23", "class": {"name": "ElasticRestClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buildSSLContext", "params": ["String", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "SSLContext", "snippet": "    private static SSLContext buildSSLContext(String keyStorePath, String keyStorePass){        try {            KeyStore truststore = KeyStore.getInstance(\"jks\");            try (InputStream inputStream = Files.newInputStream(Paths.get(new URI(keyStorePath)))) {                truststore.load(inputStream, keyStorePass.toCharArray());            } catch (URISyntaxException | IOException | NoSuchAlgorithmException | CertificateException e) {                throw DataXException.asDataXException(ElasticWriterErrorCode.BAD_CONNECT, e);            }            SSLContextBuilder sslContextBuilder = SSLContexts.custom()                    .loadTrustMaterial(truststore, null);            return sslContextBuilder.build();        }catch(KeyStoreException | NoSuchAlgorithmException | KeyManagementException e){            throw DataXException.asDataXException(ElasticWriterErrorCode.BAD_CONNECT, e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/ElasticRestClient.java", "stars": "23", "class": {"name": "ElasticRestClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initialClient", "params": ["String", "CredentialsProvider", "SSLContext", "Map<String,Object>"], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void initialClient(String[] endPoints, CredentialsProvider credentialsProvider,                               SSLContext sslContext, Map<String, Object> clientConfig) throws IOException {        if(null == clientConfig){            clientConfig = Collections.emptyMap();        }        HttpHost[] httpHosts = new HttpHost[endPoints.length];        for(int i = 0 ; i < endPoints.length; i++){            httpHosts[i] = HttpHost.create(endPoints[i]);        }        RestClientBuilder restClientBuilder = RestClient.builder(httpHosts);        Map<String, Object> finalClientConfig = clientConfig;        restClientBuilder.setHttpClientConfigCallback(                httpClientBuilder -> {                    if(null != credentialsProvider) {                        httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider);                    }                    if(null != sslContext){                        httpClientBuilder.setSSLContext(sslContext);                    }                    httpClientBuilder.addInterceptorFirst((HttpRequestInterceptor) (httpRequest, httpContext) -> {                        if(httpRequest instanceof HttpRequestWrapper){                            HttpRequestWrapper wrapper = (HttpRequestWrapper)httpRequest;                            String uri = wrapper.getURI().toString();                            if(matchVerison) {                                uri = uri.replace(INCLUDE_TYPE_NAME + \"=false\", INCLUDE_TYPE_NAME + \"=true\");                            }else{                                //when use the different version, remove the INCLUDE_TYPE_NAME                                uri = uri.replaceAll(INCLUDE_TYPE_NAME + \"=[^&]+\", \"\")                                .replaceAll(MASTER_TIMEOUT + \"=[^&]+\", \"\");                            }                            String type = MAPPING_TYPE_DEFAULT;                            if (null != wrapper.getFirstHeader(MAPPING_TYPE_HEAD)) {                                type = wrapper.getFirstHeader(MAPPING_TYPE_HEAD).getValue();                            }                            uri = uri.replace(MAPPING_PATH, MAPPING_PATH + \"/\" + type);                            try {                                wrapper.setURI(new URI(uri));                            } catch (URISyntaxException e) {                                logger.error(e.getMessage(), e);                            }                        }                    });                    httpClientBuilder.setMaxConnTotal(Integer.parseInt(                            String.valueOf(finalClientConfig.getOrDefault(ElasticKey.CLIENT_CONFIG_POOL_SIZE, 1))));                    return httpClientBuilder;                }        );        restClientBuilder.setRequestConfigCallback(                requestConfigBuilder -> requestConfigBuilder                        .setContentCompressionEnabled(true)                        .setConnectTimeout(Integer.parseInt(                                String.valueOf(finalClientConfig.getOrDefault(ElasticKey.CLIENT_CONFIG_CONN_TIMEOUT,                                        CONN_TIMEOUT_IN_MILLISECONDS))))                        .setConnectionRequestTimeout(Integer.parseInt(                                String.valueOf(finalClientConfig.getOrDefault(ElasticKey.CLIENT_CONFIG_CONN_TIMEOUT,                                        CONN_TIMEOUT_IN_MILLISECONDS))))                        .setSocketTimeout(Integer.parseInt(                                String.valueOf(finalClientConfig.getOrDefault(ElasticKey.CLIENT_CONFIG_SOCKET_TIMEOUT,                                        SOCK_TIMEOUT_IN_MILLISECONDS)))));        restClient = new RestHighLevelClient(restClientBuilder);        boolean connect = restClient.ping(COMMON_OPTIONS);        if(! connect){           throw DataXException.asDataXException(ElasticWriterErrorCode.BAD_CONNECT, \"Ping to elastic server failed\");        }        //check the version        checkVersion();        this.clientConfig = clientConfig;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/ElasticRestClient.java", "stars": "23", "class": {"name": "ElasticRestClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkVersion", "params": [], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "    private void checkVersion() throws IOException {        logger.info(\"Check the version of ElasticSearch\");        MainResponse response = restClient.info(COMMON_OPTIONS);        Version version = response.getVersion();        if(!version.isCompatible(Version.V_6_7_1)){            throw DataXException.asDataXException(ElasticWriterErrorCode.CONFIG_ERROR,                    \"ElasticSearch's version is not compatible\");        }        logger.info(\"The version of ElasticSearch: [\" + version.toString() +\"]\");        if(version.major != VERSION_TAG){            throw DataXException.asDataXException(ElasticWriterErrorCode.CONFIG_ERROR,                    \"ElasticSearch's version is not compatible\");        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-elasticsearchwriter/src/main/java/com/webank/wedatasphere/exchangis/datax/plugin/writer/elasticsearchwriter/v6/ElasticRestClient.java", "stars": "23", "class": {"name": "ElasticRestClient", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items\t\t\t\t.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.BUILDING_BLOCKS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/MudBrickStairsBlock.java", "stars": "2", "class": {"name": "MudBrickStairsBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 0));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/MudBrickStairsBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "StairsBlock", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "get", "params": ["String"], "throws": null, "modifiers": ["public", "final"], "return_type": "Bitmap", "snippet": "\tpublic final Bitmap get(String key) {\t\tif (key == null) {\t\t\tthrow new NullPointerException(\"key == null\");\t\t}\t\tsynchronized (this) {\t\t\treturn map.get(key);\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/impl/LruMemoryCache.java", "stars": "74", "class": {"name": "LruMemoryCache", "extends": null, "implements": ["MemoryCacheAware"], "modifiers": ["public"]}}, {"method_name": "put", "params": ["String", "Bitmap"], "throws": null, "modifiers": ["public", "final"], "return_type": "boolean", "snippet": "\tpublic final boolean put(String key, Bitmap value) {\t\tif (key == null || value == null) {\t\t\tthrow new NullPointerException(\"key == null || value == null\");\t\t}\t\tsynchronized (this) {\t\t\tsize += sizeOf(key, value);\t\t\tBitmap previous = map.put(key, value);\t\t\tif (previous != null) {\t\t\t\tsize -= sizeOf(key, previous);\t\t\t}\t\t}\t\ttrimToSize(maxSize);\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/impl/LruMemoryCache.java", "stars": "74", "class": {"name": "LruMemoryCache", "extends": null, "implements": ["MemoryCacheAware"], "modifiers": ["public"]}}, {"method_name": "trimToSize", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "\tprivate void trimToSize(int maxSize) {\t\twhile (true) {\t\t\tString key;\t\t\tBitmap value;\t\t\tsynchronized (this) {\t\t\t\tif (size < 0 || (map.isEmpty() && size != 0)) {\t\t\t\t\tthrow new IllegalStateException(getClass().getName() + \".sizeOf() is reporting inconsistent results!\");\t\t\t\t}\t\t\t\tif (size <= maxSize || map.isEmpty()) {\t\t\t\t\tbreak;\t\t\t\t}\t\t\t\tMap.Entry<String, Bitmap> toEvict = map.entrySet().iterator().next();\t\t\t\tif (toEvict == null) {\t\t\t\t\tbreak;\t\t\t\t}\t\t\t\tkey = toEvict.getKey();\t\t\t\tvalue = toEvict.getValue();\t\t\t\tmap.remove(key);\t\t\t\tsize -= sizeOf(key, value);\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/impl/LruMemoryCache.java", "stars": "74", "class": {"name": "LruMemoryCache", "extends": null, "implements": ["MemoryCacheAware"], "modifiers": ["public"]}}, {"method_name": "remove", "params": ["String"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "\tpublic final void remove(String key) {\t\tif (key == null) {\t\t\tthrow new NullPointerException(\"key == null\");\t\t}\t\tsynchronized (this) {\t\t\tBitmap previous = map.remove(key);\t\t\tif (previous != null) {\t\t\t\tsize -= sizeOf(key, previous);\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/impl/LruMemoryCache.java", "stars": "74", "class": {"name": "LruMemoryCache", "extends": null, "implements": ["MemoryCacheAware"], "modifiers": ["public"]}}, {"method_name": "keys", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Collection<String>", "snippet": "\tpublic Collection<String> keys() {\t\tsynchronized (this) {\t\t\treturn new HashSet<String>(map.keySet());\t\t}\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/impl/LruMemoryCache.java", "stars": "74", "class": {"name": "LruMemoryCache", "extends": null, "implements": ["MemoryCacheAware"], "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clear() {\t\ttrimToSize(-1); // -1 will evict 0-sized elements\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/impl/LruMemoryCache.java", "stars": "74", "class": {"name": "LruMemoryCache", "extends": null, "implements": ["MemoryCacheAware"], "modifiers": ["public"]}}, {"method_name": "sizeOf", "params": ["String", "Bitmap"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "\tprivate int sizeOf(String key, Bitmap value) {\t\treturn value.getRowBytes() * value.getHeight();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/impl/LruMemoryCache.java", "stars": "74", "class": {"name": "LruMemoryCache", "extends": null, "implements": ["MemoryCacheAware"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["synchronized", "public", "final"], "return_type": "String", "snippet": "\tpublic synchronized final String toString() {\t\treturn String.format(\"LruCache[maxSize=%d]\", maxSize);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/impl/LruMemoryCache.java", "stars": "74", "class": {"name": "LruMemoryCache", "extends": null, "implements": ["MemoryCacheAware"], "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Long", "snippet": "    public Long getId() {        return id;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Links.java", "stars": "1", "class": {"name": "Links", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Long id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Links.java", "stars": "1", "class": {"name": "Links", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Links.java", "stars": "1", "class": {"name": "Links", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Links.java", "stars": "1", "class": {"name": "Links", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUrl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getUrl() {        return url;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Links.java", "stars": "1", "class": {"name": "Links", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUrl", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUrl(String url) {        this.url = url;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Links.java", "stars": "1", "class": {"name": "Links", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getImg", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getImg() {        return img;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Links.java", "stars": "1", "class": {"name": "Links", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setImg", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setImg(String img) {        this.img = img;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Links.java", "stars": "1", "class": {"name": "Links", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDescription", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDescription() {        return description;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Links.java", "stars": "1", "class": {"name": "Links", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDescription", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDescription(String description) {        this.description = description;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Links.java", "stars": "1", "class": {"name": "Links", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTeam", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTeam() {        return team;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Links.java", "stars": "1", "class": {"name": "Links", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTeam", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTeam(String team) {        this.team = team;    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/model/po/Links.java", "stars": "1", "class": {"name": "Links", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getName() {\t\treturn name;\t}", "url": "https://raw.githubusercontent.com/akifarfien/RestApi-SpringBoot--ChatMateApp/master/src/main/java/com/project/copypasteapi/Bean/UserData.java", "stars": "2", "class": {"name": "UserData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setName(String name) {\t\tthis.name = name;\t}", "url": "https://raw.githubusercontent.com/akifarfien/RestApi-SpringBoot--ChatMateApp/master/src/main/java/com/project/copypasteapi/Bean/UserData.java", "stars": "2", "class": {"name": "UserData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTextmssg", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getTextmssg() {\t\treturn textmssg;\t}", "url": "https://raw.githubusercontent.com/akifarfien/RestApi-SpringBoot--ChatMateApp/master/src/main/java/com/project/copypasteapi/Bean/UserData.java", "stars": "2", "class": {"name": "UserData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTextmssg", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setTextmssg(String textmssg) {\t\tthis.textmssg = textmssg;\t}", "url": "https://raw.githubusercontent.com/akifarfien/RestApi-SpringBoot--ChatMateApp/master/src/main/java/com/project/copypasteapi/Bean/UserData.java", "stars": "2", "class": {"name": "UserData", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toProperties", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "Properties", "snippet": "    public static Properties toProperties(String content) {        Properties properties = new Properties();        Yaml yaml = createYaml();        for (Object object : yaml.loadAll(content)) {            if (object != null) {                Map<String, Object> flattenedMap = getFlattenedMap((asMap(object)));                properties.putAll(flattenedMap);            }        }        return properties;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/util/YamlUtil.java", "stars": "4", "class": {"name": "YamlUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createYaml", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "Yaml", "snippet": "    private static Yaml createYaml() {        LoaderOptions options = new LoaderOptions();        options.setAllowDuplicateKeys(false);        return new Yaml(options);    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/util/YamlUtil.java", "stars": "4", "class": {"name": "YamlUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "asMap", "params": ["Object"], "throws": null, "modifiers": ["private", "static"], "return_type": "Map<String,Object>", "snippet": "    private static Map<String, Object> asMap(Object object) {        // YAML can have numbers as keys        Map<String, Object> result = new LinkedHashMap<>();        if (!(object instanceof Map)) {            // A document can be a text literal            result.put(\"document\", object);            return result;        }        @SuppressWarnings(\"unchecked\")        Map<Object, Object> map = (Map<Object, Object>) object;        map.forEach((key, value) -> {            if (value instanceof Map) {                value = asMap(value);            }            if (key instanceof CharSequence) {                result.put(key.toString(), value);            } else {                // It has to be a map key in this case                result.put(\"[\" + key.toString() + \"]\", value);            }        });        return result;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/util/YamlUtil.java", "stars": "4", "class": {"name": "YamlUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFlattenedMap", "params": ["Map<String,Object>"], "throws": null, "modifiers": ["private", "static"], "return_type": "Map<String,Object>", "snippet": "    private static Map<String, Object> getFlattenedMap(Map<String, Object> source) {        Map<String, Object> result = new LinkedHashMap<>();        buildFlattenedMap(result, source, null);        return result;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/util/YamlUtil.java", "stars": "4", "class": {"name": "YamlUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "buildFlattenedMap", "params": ["Map<String,Object>", "Map<String,Object>", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void buildFlattenedMap(Map<String, Object> result, Map<String, Object> source, String path) {        source.forEach((key, value) -> {            if (StringUtils.hasText(path)) {                if (key.startsWith(\"[\")) {                    key = path + key;                } else {                    key = path + '.' + key;                }            }            if (value instanceof String) {                result.put(key, value);            } else if (value instanceof Map) {                // Need a compound key                @SuppressWarnings(\"unchecked\")                Map<String, Object> map = (Map<String, Object>) value;                buildFlattenedMap(result, map, key);            } else if (value instanceof Collection) {                // Need a compound key                @SuppressWarnings(\"unchecked\")                Collection<Object> collection = (Collection<Object>) value;                if (collection.isEmpty()) {                    result.put(key, \"\");                } else {                    int count = 0;                    for (Object object : collection) {                        buildFlattenedMap(result, Collections.singletonMap(                                \"[\" + (count++) + \"]\", object), key);                    }                }            } else {                result.put(key, (value != null ? value : \"\"));            }        });    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/util/YamlUtil.java", "stars": "4", "class": {"name": "YamlUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateDialog", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "Dialog", "snippet": "    public Dialog onCreateDialog(Bundle savedInstanceState) {        ChangeLogRecyclerView chgList = (ChangeLogRecyclerView) View.inflate(getActivity(), R.layout.fragment_dialog_changelog, null);        return new AlertDialog.Builder(getActivity())                .setTitle(R.string.changelog)                .setView(chgList)                .setPositiveButton(R.string.ok,                        new DialogInterface.OnClickListener() {                            public void onClick(DialogInterface dialog, int whichButton) {                                dialog.dismiss();                            }                        }                )                .create();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/fragments/dialog/ChangeLogDialogFragment.java", "stars": "4", "class": {"name": "ChangeLogDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "getMessage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getMessage() {    String message = super.getMessage();    if (message == null && getCause() != null) {      message = getCause().getMessage();    }    return message;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-spi/src/main/java/azkaban/spi/AzkabanException.java", "stars": "18", "class": {"name": "AzkabanException", "extends": "RuntimeException", "implements": null, "modifiers": ["public"]}}, {"method_name": "enable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void enable() {        loadFiles();    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/lifecycle/FileLifecycle.java", "stars": "2", "class": {"name": "FileLifecycle", "extends": "Lifecycle", "implements": null, "modifiers": ["public"]}}, {"method_name": "loadFiles", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void loadFiles() {        File dataFolder = plugin.getDataFolder();        if (!dataFolder.exists())            dataFolder.mkdirs();        plugin.saveDefaultConfig();        configuration = plugin.getConfig();        vipTypeFolder = new File(dataFolder, \"/vips/\");        if (!vipTypeFolder.exists()) {            vipTypeFolder.mkdirs();            copyResource(\"_example.yml\", new File(vipTypeFolder, \"_example.yml\"));        }    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/lifecycle/FileLifecycle.java", "stars": "2", "class": {"name": "FileLifecycle", "extends": "Lifecycle", "implements": null, "modifiers": ["public"]}}, {"method_name": "copyResource", "params": ["String", "File"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void copyResource(String name, File to) {        try {            if (!to.exists())                to.createNewFile();            InputStream in = plugin.getResource(name);            OutputStream out = new FileOutputStream(to);            byte[] buf = new byte[1024];            int len;            while ((len = in.read(buf)) > 0) {                out.write(buf, 0, len);            }            out.close();            in.close();        } catch (Exception exception) {            exception.printStackTrace();            // TODO: log        }    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/lifecycle/FileLifecycle.java", "stars": "2", "class": {"name": "FileLifecycle", "extends": "Lifecycle", "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatic", "params": ["FieldInsnNode"], "throws": null, "modifiers": ["public"], "return_type": "AbstractValue", "snippet": "\tpublic AbstractValue getStatic(FieldInsnNode insn) {\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/main/java/me/coley/analysis/StaticGetFactory.java", "stars": "12", "class": {"name": "StaticGetFactory", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "invoke", "params": ["Object", "Method", "Object"], "throws": ["Throwable"], "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object invoke(Object proxy, Method method, Object[] params) throws Throwable {    try {      if (Object.class.equals(method.getDeclaringClass())) {        return method.invoke(this, params);      }      Object o = method.invoke(rs, params);      if (\"next\".equals(method.getName())) {        if ((Boolean) o) {          rows++;          if (isTraceEnabled()) {            ResultSetMetaData rsmd = rs.getMetaData();            final int columnCount = rsmd.getColumnCount();            if (first) {              first = false;              printColumnHeaders(rsmd, columnCount);            }            printColumnValues(columnCount);          }        } else {          debug(\"     Total: \" + rows, false);        }      }      clearColumnInfo();      return o;    } catch (Throwable t) {      throw ExceptionUtil.unwrapThrowable(t);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/jdbc/ResultSetLogger.java", "stars": "15", "class": {"name": "ResultSetLogger", "extends": "BaseJdbcLogger", "implements": ["InvocationHandler"], "modifiers": ["public", "final"]}}, {"method_name": "printColumnHeaders", "params": ["ResultSetMetaData", "int"], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void printColumnHeaders(ResultSetMetaData rsmd, int columnCount) throws SQLException {    StringJoiner row = new StringJoiner(\", \", \"   Columns: \", \"\");    for (int i = 1; i <= columnCount; i++) {      if (BLOB_TYPES.contains(rsmd.getColumnType(i))) {        blobColumns.add(i);      }      row.add(rsmd.getColumnLabel(i));    }    trace(row.toString(), false);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/jdbc/ResultSetLogger.java", "stars": "15", "class": {"name": "ResultSetLogger", "extends": "BaseJdbcLogger", "implements": ["InvocationHandler"], "modifiers": ["public", "final"]}}, {"method_name": "printColumnValues", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void printColumnValues(int columnCount) {    StringJoiner row = new StringJoiner(\", \", \"       Row: \", \"\");    for (int i = 1; i <= columnCount; i++) {      try {        if (blobColumns.contains(i)) {          row.add(\"<<BLOB>>\");        } else {          row.add(rs.getString(i));        }      } catch (SQLException e) {        // generally can't call getString() on a BLOB column        row.add(\"<<Cannot Display>>\");      }    }    trace(row.toString(), false);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/jdbc/ResultSetLogger.java", "stars": "15", "class": {"name": "ResultSetLogger", "extends": "BaseJdbcLogger", "implements": ["InvocationHandler"], "modifiers": ["public", "final"]}}, {"method_name": "newInstance", "params": ["ResultSet", "Log", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "ResultSet", "snippet": "  public static ResultSet newInstance(ResultSet rs, Log statementLog, int queryStack) {    InvocationHandler handler = new ResultSetLogger(rs, statementLog, queryStack);    ClassLoader cl = ResultSet.class.getClassLoader();    return (ResultSet) Proxy.newProxyInstance(cl, new Class[]{ResultSet.class}, handler);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/jdbc/ResultSetLogger.java", "stars": "15", "class": {"name": "ResultSetLogger", "extends": "BaseJdbcLogger", "implements": ["InvocationHandler"], "modifiers": ["public", "final"]}}, {"method_name": "getRs", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ResultSet", "snippet": "  public ResultSet getRs() {    return rs;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/jdbc/ResultSetLogger.java", "stars": "15", "class": {"name": "ResultSetLogger", "extends": "BaseJdbcLogger", "implements": ["InvocationHandler"], "modifiers": ["public", "final"]}}, {"method_name": "put", "params": ["K", "V"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean put(K key, V value) {\t\tboolean putSuccessfully = false;\t\t// Try to add value to hard cache\t\tint valueSize = getSize(value);\t\tint sizeLimit = getSizeLimit();\t\tint curCacheSize = cacheSize.get();\t\tif (valueSize < sizeLimit) {\t\t\twhile (curCacheSize + valueSize > sizeLimit) {\t\t\t\tV removedValue = removeNext();\t\t\t\tif (hardCache.remove(removedValue)) {\t\t\t\t\tcurCacheSize = cacheSize.addAndGet(-getSize(removedValue));\t\t\t\t}\t\t\t}\t\t\thardCache.add(value);\t\t\tcacheSize.addAndGet(valueSize);\t\t\tputSuccessfully = true;\t\t}\t\t// Add value to soft cache\t\tsuper.put(key, value);\t\treturn putSuccessfully;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/LimitedMemoryCache.java", "stars": "74", "class": {"name": "LimitedMemoryCache", "extends": "BaseMemoryCache", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "remove", "params": ["K"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void remove(K key) {\t\tV value = super.get(key);\t\tif (value != null) {\t\t\tif (hardCache.remove(value)) {\t\t\t\tcacheSize.addAndGet(-getSize(value));\t\t\t}\t\t}\t\tsuper.remove(key);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/LimitedMemoryCache.java", "stars": "74", "class": {"name": "LimitedMemoryCache", "extends": "BaseMemoryCache", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void clear() {\t\thardCache.clear();\t\tcacheSize.set(0);\t\tsuper.clear();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/LimitedMemoryCache.java", "stars": "74", "class": {"name": "LimitedMemoryCache", "extends": "BaseMemoryCache", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getSizeLimit", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "int", "snippet": "\tprotected int getSizeLimit() {\t\treturn sizeLimit;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/LimitedMemoryCache.java", "stars": "74", "class": {"name": "LimitedMemoryCache", "extends": "BaseMemoryCache", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getSize", "params": ["V"], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "int", "snippet": "\tprotected abstract int getSize(V value);\tprotected abstract V removeNext();}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/LimitedMemoryCache.java", "stars": "74", "class": {"name": "LimitedMemoryCache", "extends": "BaseMemoryCache", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "removeNext", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "V", "snippet": "\tprotected abstract V removeNext();}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/LimitedMemoryCache.java", "stars": "74", "class": {"name": "LimitedMemoryCache", "extends": "BaseMemoryCache", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "solution", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "\tpublic static int solution(int[] a) {        // write your code in Java SE 8        int sumA = 0;        int suml = a[0];                for (int i = 0; i < a.length; i++) {            sumA += a[i];        }                int sumr = sumA - a[0];        int minDiff = Math.abs(suml - sumr);                        for (int p = 1; p < a.length - 1; p++) {            suml += a[p];            sumr -= a[p];                        int diff = Math.abs(suml - sumr);                        if (diff < minDiff) minDiff = diff;        }                return minDiff;    }", "url": "https://raw.githubusercontent.com/njcodernoob/codility-java-solutions/master/TapeEquilibrium.java", "stars": "2", "class": {"name": "TapeEquilibrium", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tint[] a = {1,1};\t\tSystem.out.println(solution(a));\t}", "url": "https://raw.githubusercontent.com/njcodernoob/codility-java-solutions/master/TapeEquilibrium.java", "stars": "2", "class": {"name": "TapeEquilibrium", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["NoSuchMethodException", "InvocationTargetException", "IllegalAccessException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {        ArrayList<Integer> array = new ArrayList<>();        Class<? extends ArrayList> c = array.getClass();        Method m = c.getMethod(\"add\", Object.class);        m.invoke(array, \"hello\");        m.invoke(array, \"world\");        m.invoke(array, \"java\");        System.out.println(array);    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/cc1021/fan/array.java", "stars": "2", "class": {"name": "array", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateDialog", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "Dialog", "snippet": "    public Dialog onCreateDialog(Bundle savedInstanceState) {        View view = View.inflate(getActivity(), R.layout.fragment_synopsis, null);        ButterKnife.bind(this, view);        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity())                .setView(view)                .setNeutralButton(R.string.close,                        new DialogInterface.OnClickListener() {                            @Override                            public void onClick(DialogInterface dialog, int which) {                                dialog.dismiss();                            }                        }                );        if (getArguments().containsKey(\"text\")) {            synopsisText.setText(getArguments().getString(\"text\"));        }        return builder.create();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/fragments/dialog/SynopsisDialogFragment.java", "stars": "4", "class": {"name": "SynopsisDialogFragment", "extends": "DialogFragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void main(String[] args) {    SpringApplication.run(SpringBootUploadMultipleFilesApplication.class, args);  }", "url": "https://raw.githubusercontent.com/bezkoder/spring-boot-upload-multiple-files/master/src/main/java/com/bezkoder/spring/files/uploadmultiple/SpringBootUploadMultipleFilesApplication.java", "stars": "2", "class": {"name": "SpringBootUploadMultipleFilesApplication", "extends": null, "implements": ["CommandLineRunner"], "modifiers": ["public"]}}, {"method_name": "run", "params": ["String"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void run(String... arg) throws Exception {    storageService.deleteAll();    storageService.init();  }", "url": "https://raw.githubusercontent.com/bezkoder/spring-boot-upload-multiple-files/master/src/main/java/com/bezkoder/spring/files/uploadmultiple/SpringBootUploadMultipleFilesApplication.java", "stars": "2", "class": {"name": "SpringBootUploadMultipleFilesApplication", "extends": null, "implements": ["CommandLineRunner"], "modifiers": ["public"]}}, {"method_name": "setProp", "params": ["PropertyDescriptor", "String", "Object"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setProp(PropertyDescriptor property, String name, Object obj) {        property = property(name);        property.setValue(NOT_UNDEFINED, Boolean.TRUE);        property.setValue(DEFAULT, obj);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/testbean/GrpcRequestBeanInfo.java", "stars": "3", "class": {"name": "GrpcRequestBeanInfo", "extends": "BeanInfoSupport", "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean equals(Object o) {        if (this == o) {            return true;        }        if (!(o instanceof Authority)) {            return false;        }        return Objects.equals(name, ((Authority) o).name);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/domain/Authority.java", "stars": "2", "class": {"name": "Authority", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int hashCode() {        return Objects.hashCode(name);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/domain/Authority.java", "stars": "2", "class": {"name": "Authority", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"Authority{\" +            \"name='\" + name + '\\'' +            \"}\";    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/domain/Authority.java", "stars": "2", "class": {"name": "Authority", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        initActivity();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseActivity.java", "stars": "1", "class": {"name": "BaseActivity", "extends": "AppCompatActivity", "implements": ["HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "initActivity", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initActivity() {        initLayout();        initView();        initData();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseActivity.java", "stars": "1", "class": {"name": "BaseActivity", "extends": "AppCompatActivity", "implements": ["HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "getLayoutId", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "int", "snippet": "    protected abstract int getLayoutId();    /**     * \u521d\u59cb\u5316\u63a7\u4ef6     */    protected abstract void initView();    /**     * \u521d\u59cb\u5316\u6570\u636e     */    protected abstract void initData();    /**     * \u521d\u59cb\u5316\u5e03\u5c40     */    protected void initLayout() {        if (getLayoutId() > 0) {            setContentView(getLayoutId());            initSoftKeyboard();        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseActivity.java", "stars": "1", "class": {"name": "BaseActivity", "extends": "AppCompatActivity", "implements": ["HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "initView", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void initView();    /**     * \u521d\u59cb\u5316\u6570\u636e     */    protected abstract void initData();    /**     * \u521d\u59cb\u5316\u5e03\u5c40     */    protected void initLayout() {        if (getLayoutId() > 0) {            setContentView(getLayoutId());            initSoftKeyboard();        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseActivity.java", "stars": "1", "class": {"name": "BaseActivity", "extends": "AppCompatActivity", "implements": ["HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "initData", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void initData();    /**     * \u521d\u59cb\u5316\u5e03\u5c40     */    protected void initLayout() {        if (getLayoutId() > 0) {            setContentView(getLayoutId());            initSoftKeyboard();        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseActivity.java", "stars": "1", "class": {"name": "BaseActivity", "extends": "AppCompatActivity", "implements": ["HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "initLayout", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initLayout() {        if (getLayoutId() > 0) {            setContentView(getLayoutId());            initSoftKeyboard();        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseActivity.java", "stars": "1", "class": {"name": "BaseActivity", "extends": "AppCompatActivity", "implements": ["HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "initSoftKeyboard", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initSoftKeyboard() {        // \u70b9\u51fb\u5916\u90e8\u9690\u85cf\u8f6f\u952e\u76d8\uff0c\u63d0\u5347\u7528\u6237\u4f53\u9a8c        getContentView().setOnClickListener(v -> hideSoftKeyboard());    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseActivity.java", "stars": "1", "class": {"name": "BaseActivity", "extends": "AppCompatActivity", "implements": ["HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDestroy() {        removeCallbacks();        super.onDestroy();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseActivity.java", "stars": "1", "class": {"name": "BaseActivity", "extends": "AppCompatActivity", "implements": ["HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "finish", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void finish() {        hideSoftKeyboard();        super.finish();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseActivity.java", "stars": "1", "class": {"name": "BaseActivity", "extends": "AppCompatActivity", "implements": ["HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "onNewIntent", "params": ["Intent"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onNewIntent(Intent intent) {        super.onNewIntent(intent);        // \u8bbe\u7f6e\u4e3a\u5f53\u524d\u7684 Intent\uff0c\u907f\u514d Activity \u88ab\u6740\u6b7b\u540e\u91cd\u542f Intent \u8fd8\u662f\u6700\u539f\u5148\u7684\u90a3\u4e2a        setIntent(intent);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseActivity.java", "stars": "1", "class": {"name": "BaseActivity", "extends": "AppCompatActivity", "implements": ["HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "getBundle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Bundle", "snippet": "    public Bundle getBundle() {        return getIntent().getExtras();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseActivity.java", "stars": "1", "class": {"name": "BaseActivity", "extends": "AppCompatActivity", "implements": ["HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "getActivity", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "BaseActivity", "snippet": "    protected BaseActivity getActivity() {        return this;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseActivity.java", "stars": "1", "class": {"name": "BaseActivity", "extends": "AppCompatActivity", "implements": ["HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "getContentView", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ViewGroup", "snippet": "    public ViewGroup getContentView() {        return findViewById(Window.ID_ANDROID_CONTENT);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseActivity.java", "stars": "1", "class": {"name": "BaseActivity", "extends": "AppCompatActivity", "implements": ["HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "startActivity", "params": ["Class<Activity>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void startActivity(Class<? extends Activity> clazz) {        startActivity(new Intent(this, clazz));    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseActivity.java", "stars": "1", "class": {"name": "BaseActivity", "extends": "AppCompatActivity", "implements": ["HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "startActivityForResult", "params": ["Class<Activity>", "OnActivityCallback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void startActivityForResult(Class<? extends Activity> clazz, OnActivityCallback callback) {        startActivityForResult(new Intent(this, clazz), null, callback);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseActivity.java", "stars": "1", "class": {"name": "BaseActivity", "extends": "AppCompatActivity", "implements": ["HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "startActivityForResult", "params": ["Intent", "OnActivityCallback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void startActivityForResult(Intent intent, OnActivityCallback callback) {        startActivityForResult(intent, null, callback);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseActivity.java", "stars": "1", "class": {"name": "BaseActivity", "extends": "AppCompatActivity", "implements": ["HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "startActivityForResult", "params": ["Intent", "Bundle", "OnActivityCallback"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void startActivityForResult(Intent intent, @Nullable Bundle options, OnActivityCallback callback) {        // \u56de\u8c03\u8fd8\u6ca1\u6709\u7ed3\u675f\uff0c\u6240\u4ee5\u4e0d\u80fd\u518d\u6b21\u8c03\u7528\u6b64\u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u53ea\u9002\u5408\u4e00\u5bf9\u4e00\u56de\u8c03\uff0c\u5176\u4ed6\u9700\u6c42\u8bf7\u4f7f\u7528\u539f\u751f\u7684\u65b9\u6cd5\u5b9e\u73b0        if (mActivityCallback == null) {            mActivityCallback = callback;            // \u968f\u673a\u751f\u6210\u8bf7\u6c42\u7801\uff0c\u8fd9\u4e2a\u8bf7\u6c42\u7801\u5fc5\u987b\u5728 2 \u7684 16 \u6b21\u5e42\u4ee5\u5185\uff0c\u4e5f\u5c31\u662f 0 - 65535            mActivityRequestCode = new Random().nextInt((int) Math.pow(2, 16));            startActivityForResult(intent, mActivityRequestCode, options);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseActivity.java", "stars": "1", "class": {"name": "BaseActivity", "extends": "AppCompatActivity", "implements": ["HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "onActivityResult", "params": ["int", "int", "Intent"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {        if (mActivityCallback != null && mActivityRequestCode == requestCode) {            mActivityCallback.onActivityResult(resultCode, data);            mActivityCallback = null;        } else {            super.onActivityResult(requestCode, resultCode, data);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseActivity.java", "stars": "1", "class": {"name": "BaseActivity", "extends": "AppCompatActivity", "implements": ["HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "startActivityForResult", "params": ["Intent", "int", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void startActivityForResult(Intent intent, int requestCode, @Nullable Bundle options) {        hideSoftKeyboard();        // \u67e5\u770b\u6e90\u7801\u5f97\u77e5 startActivity \u6700\u7ec8\u4e5f\u4f1a\u8c03\u7528 startActivityForResult        super.startActivityForResult(intent, requestCode, options);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseActivity.java", "stars": "1", "class": {"name": "BaseActivity", "extends": "AppCompatActivity", "implements": ["HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "hideSoftKeyboard", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void hideSoftKeyboard() {        // \u9690\u85cf\u8f6f\u952e\u76d8\uff0c\u907f\u514d\u8f6f\u952e\u76d8\u5f15\u53d1\u7684\u5185\u5b58\u6cc4\u9732        View view = getCurrentFocus();        if (view != null) {            InputMethodManager manager = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);            if (manager != null) {                manager.hideSoftInputFromWindow(view.getWindowToken(), 0);            }        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseActivity.java", "stars": "1", "class": {"name": "BaseActivity", "extends": "AppCompatActivity", "implements": ["HandlerAction", "ClickAction", "BundleAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ObjectId", "snippet": "    public ObjectId getId() {        return id;    }", "url": "https://raw.githubusercontent.com/falvojr/stackoverflow-61560293/master/src/main/java/com/falvojr/domain/Log.java", "stars": "1", "class": {"name": "Log", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["ObjectId"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(ObjectId id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/falvojr/stackoverflow-61560293/master/src/main/java/com/falvojr/domain/Log.java", "stars": "1", "class": {"name": "Log", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOutbound", "params": [], "throws": null, "modifiers": ["public"], "return_type": "org", "snippet": "    public org.bson.Document getOutbound() {        return outbound;    }", "url": "https://raw.githubusercontent.com/falvojr/stackoverflow-61560293/master/src/main/java/com/falvojr/domain/Log.java", "stars": "1", "class": {"name": "Log", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOutbound", "params": ["org"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOutbound(org.bson.Document outbound) {        this.outbound = outbound;    }", "url": "https://raw.githubusercontent.com/falvojr/stackoverflow-61560293/master/src/main/java/com/falvojr/domain/Log.java", "stars": "1", "class": {"name": "Log", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "exec", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String exec(HttpServletRequest req, HttpServletResponse resp) {\t\tString view = \"/clsProj/main.cls\";\t\treq.setAttribute(\"isRedirect\", true);\t\tHttpSession session = req.getSession();\t\tsession.removeAttribute(\"SID\");\t\treturn view;\t}", "url": "https://raw.githubusercontent.com/increpas-cls2/clsProj/branch/clsProj/src/com/increpas/www/controller/member/LogoutProc.java", "stars": "2", "class": {"name": "LogoutProc", "extends": null, "implements": ["ClsController"], "modifiers": ["public"]}}, {"method_name": "doFilter", "params": ["ServletRequest", "ServletResponse", "FilterChain"], "throws": ["IOException", "ServletException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)        throws IOException, ServletException {        HttpServletRequest httpServletRequest = (HttpServletRequest) servletRequest;        String jwt = resolveToken(httpServletRequest);        if (StringUtils.hasText(jwt) && this.tokenProvider.validateToken(jwt)) {            Authentication authentication = this.tokenProvider.getAuthentication(jwt);            SecurityContextHolder.getContext().setAuthentication(authentication);        }        filterChain.doFilter(servletRequest, servletResponse);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/security/jwt/JWTFilter.java", "stars": "2", "class": {"name": "JWTFilter", "extends": "GenericFilterBean", "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveToken", "params": ["HttpServletRequest"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String resolveToken(HttpServletRequest request) {        String bearerToken = request.getHeader(AUTHORIZATION_HEADER);        if (StringUtils.hasText(bearerToken) && bearerToken.startsWith(\"Bearer \")) {            return bearerToken.substring(7);        }        String jwt = request.getParameter(AUTHORIZATION_TOKEN);        if (StringUtils.hasText(jwt)) {            return jwt;        }        return null;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/security/jwt/JWTFilter.java", "stars": "2", "class": {"name": "JWTFilter", "extends": "GenericFilterBean", "implements": null, "modifiers": ["public"]}}, {"method_name": "createByteBuf", "params": ["AbstractNetMessage"], "throws": null, "modifiers": ["public"], "return_type": "ByteBuf", "snippet": "    public ByteBuf createByteBuf(AbstractNetMessage netMessage){        ByteBuf byteBuf = Unpooled.buffer(256);        return byteBuf;    }", "url": "https://raw.githubusercontent.com/wangxingman/my_project/master/netty_game_app/netty_game_server/src/main/java/com/game/coding/encoder/MessageEncoderFactoryApp.java", "stars": "1", "class": {"name": "MessageEncoderFactoryApp", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "authGet", "params": ["String", "String", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    String authGet(            @RequestParam(name = \"signature\",                    required = false) String signature,            @RequestParam(name = \"timestamp\",                    required = false) String timestamp,            @RequestParam(name = \"nonce\", required = false) String nonce,            @RequestParam(name = \"echostr\", required = false) String echostr) {        this.logger.info(\"\\n\u63a5\u6536\u5230\u6765\u81ea\u5fae\u4fe1\u670d\u52a1\u5668\u7684\u8ba4\u8bc1\u6d88\u606f\uff1a[{}, {}, {}, {}]\", signature,                timestamp, nonce, echostr);        if (StringUtils.isAnyBlank(signature,timestamp, nonce, echostr)) {            throw new IllegalArgumentException(\"\u8bf7\u6c42\u53c2\u6570\u975e\u6cd5\uff0c\u8bf7\u6838\u5b9e!\");        }        if (this.wxService.checkSignature(timestamp,nonce,signature)) {            return echostr;        }        return \"\u975e\u6cd5\u8bf7\u6c42\";    }", "url": "https://raw.githubusercontent.com/visayang/wechatdev/master/src/main/java/com/chad/wechatdev/controller/VerificationController.java", "stars": "2", "class": {"name": "VerificationController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "post", "params": ["String", "String", "String", "String", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    String post(@RequestBody String requestBody,                @RequestParam(\"signature\") String signature,                @RequestParam(\"timestamp\") String timestamp,                @RequestParam(\"nonce\") String nonce,                @RequestParam(name = \"encrypt_type\",                               required = false) String encType,                @RequestParam(name = \"msg_signature\",                               required = false) String msgSignature) {        this.logger.info(                \"\\n\u63a5\u6536\u5fae\u4fe1\u8bf7\u6c42\uff1a[signature=[{}], encType=[{}], msgSignature=[{}],\"                        + \" timestamp=[{}], nonce=[{}], requestBody=[\\n{}\\n] \",                signature, encType, msgSignature, timestamp, nonce, requestBody);        if (!this.wxService.checkSignature(timestamp, nonce, signature)) {            throw new IllegalArgumentException(\"\u975e\u6cd5\u8bf7\u6c42\uff0c\u53ef\u80fd\u5c5e\u4e8e\u4f2a\u9020\u7684\u8bf7\u6c42\uff01\");        }        String out = null;        if (encType == null) {            // \u660e\u6587\u4f20\u8f93\u7684\u6d88\u606f            WxMpXmlMessage inMessage = WxMpXmlMessage.fromXml(requestBody);            WxMpXmlOutMessage outMessage = this.route(inMessage);            if (outMessage == null) {                return \"\";            }            out = outMessage.toXml();        } else if (\"aes\".equals(encType)) {            // aes\u52a0\u5bc6\u7684\u6d88\u606f            WxMpXmlMessage inMessage = WxMpXmlMessage.fromEncryptedXml(                    requestBody, this.wxService.getWxMpConfigStorage(), timestamp,                    nonce, msgSignature);            this.logger.debug(\"\\n\u6d88\u606f\u89e3\u5bc6\u540e\u5185\u5bb9\u4e3a\uff1a\\n{} \", inMessage.toString());            WxMpXmlOutMessage outMessage = this.route(inMessage);            if (outMessage == null) {                return \"\";            }            out = outMessage                    .toEncryptedXml(this.wxService.getWxMpConfigStorage());        }        this.logger.debug(\"\\n\u7ec4\u88c5\u56de\u590d\u4fe1\u606f\uff1a{}\", out);        return out;    }", "url": "https://raw.githubusercontent.com/visayang/wechatdev/master/src/main/java/com/chad/wechatdev/controller/VerificationController.java", "stars": "2", "class": {"name": "VerificationController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "route", "params": ["WxMpXmlMessage"], "throws": null, "modifiers": ["private"], "return_type": "WxMpXmlOutMessage", "snippet": "    private WxMpXmlOutMessage route(WxMpXmlMessage message) {        try {            return this.router.route(message);        } catch (Exception e) {            this.logger.error(e.getMessage(), e);        }        return null;    }", "url": "https://raw.githubusercontent.com/visayang/wechatdev/master/src/main/java/com/chad/wechatdev/controller/VerificationController.java", "stars": "2", "class": {"name": "VerificationController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onApplyWindowInsets", "params": ["android"], "throws": null, "modifiers": ["public"], "return_type": "android", "snippet": "\tpublic android.view.WindowInsets onApplyWindowInsets (android.view.WindowInsets p0)\t{\t\treturn n_onApplyWindowInsets (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CustomFrameLayout.java", "stars": "2", "class": {"name": "CustomFrameLayout", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onApplyWindowInsets", "params": ["android"], "throws": null, "modifiers": ["native", "private"], "return_type": "android", "snippet": "\tprivate native android.view.WindowInsets n_onApplyWindowInsets (android.view.WindowInsets p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CustomFrameLayout.java", "stars": "2", "class": {"name": "CustomFrameLayout", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CustomFrameLayout.java", "stars": "2", "class": {"name": "CustomFrameLayout", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/CustomFrameLayout.java", "stars": "2", "class": {"name": "CustomFrameLayout", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "show", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void show() {        if (mMainLayout == null) {            //\u521d\u59cb\u5316\u5e03\u5c40            initLayout();        }        if (!isShow()) {            // \u663e\u793a\u5e03\u5c40            mMainLayout.setVisibility(VISIBLE);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/HintLayout.java", "stars": "1", "class": {"name": "HintLayout", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "hide", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void hide() {        if (mMainLayout != null && isShow()) {            //\u9690\u85cf\u5e03\u5c40            mMainLayout.setVisibility(INVISIBLE);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/HintLayout.java", "stars": "1", "class": {"name": "HintLayout", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isShow", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isShow() {        return mMainLayout != null && mMainLayout.getVisibility() == VISIBLE;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/HintLayout.java", "stars": "1", "class": {"name": "HintLayout", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setIcon", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIcon(@DrawableRes int id) {        setIcon(ContextCompat.getDrawable(getContext(), id));    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/HintLayout.java", "stars": "1", "class": {"name": "HintLayout", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setIcon", "params": ["Drawable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIcon(Drawable drawable) {        if (mImageView != null) {            mImageView.setImageDrawable(drawable);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/HintLayout.java", "stars": "1", "class": {"name": "HintLayout", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setAnim", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setAnim(@RawRes int id) {        mImageView.setAnimation(id);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/HintLayout.java", "stars": "1", "class": {"name": "HintLayout", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setHint", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setHint(@StringRes int id) {        setHint(getResources().getString(id));    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/HintLayout.java", "stars": "1", "class": {"name": "HintLayout", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setHint", "params": ["CharSequence"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setHint(CharSequence text) {        if (mTextView != null && text != null) {            mTextView.setText(text);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/HintLayout.java", "stars": "1", "class": {"name": "HintLayout", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "initLayout", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initLayout() {        mMainLayout = (ViewGroup) LayoutInflater.from(getContext()).inflate(R.layout.widget_hint_layout, this, false);        mImageView = mMainLayout.findViewById(R.id.iv_hint_icon);        mTextView = mMainLayout.findViewById(R.id.iv_hint_text);        if (mMainLayout.getBackground() == null) {            // \u9ed8\u8ba4\u4f7f\u7528 windowBackground \u4f5c\u4e3a\u80cc\u666f            TypedArray ta = getContext().obtainStyledAttributes(new int[]{android.R.attr.windowBackground});            mMainLayout.setBackground(ta.getDrawable(0));            ta.recycle();        }        addView(mMainLayout);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/HintLayout.java", "stars": "1", "class": {"name": "HintLayout", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "setOnClickListener", "params": ["OnClickListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnClickListener(@Nullable OnClickListener l) {        if (isShow()) {            mMainLayout.setOnClickListener(l);        } else {            super.setOnClickListener(l);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/widget/HintLayout.java", "stars": "1", "class": {"name": "HintLayout", "extends": "FrameLayout", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "generateCode", "params": [], "throws": ["CodeException"], "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String generateCode() throws CodeException {\t\tString result = \"\";\t\tresult += super.generateCode();\t\tString left = \"\";\t\tString right = \"\";\t\tboolean leftAdress = false;\t\tboolean rightAdress = false;\t\t\t\tif (lhs.isVARIABLE()\t\t\t\t|| lhs.isARRAY()\t\t\t\t|| lhs.isDOT()) {\t\t\tleft = lhs.generateCode();\t\t}\t\telse if (lhs.isPOINTER()) {\t\t\tleft = ((ExprPOINTER)lhs).getPointerCode();\t\t\tleftAdress = true;\t\t}\t\telse {\t\t\tthrow new CodeException(\"affectation non pr\u00e9vue StmAFF(35)\" .concat(lhs.getClass().getSimpleName()));\t\t}\t\t\t\tif (rhs.isVALUE()\t\t\t\t|| rhs.isVARIABLE() \t\t\t\t|| rhs.isARRAY()\t\t\t\t|| rhs.isDOT()\t\t\t\t|| rhs.isOP()) {\t\t\tright = rhs.generateCode();\t\t}\t\telse if (rhs.isPOINTER()) {\t\t\tright = ((ExprPOINTER)rhs).getPointerCode();\t\t\trightAdress = true;\t\t}\t\telse if (rhs.isADRESS()) {\t\t\tright = ((ExprADDRESS)rhs).getAdressCode();\t\t\trightAdress = true;\t\t}\t\telse {\t\t\tthrow new CodeException(\"affectation non pr\u00e9vue StmAFF(54)\" .concat(rhs.getClass().getSimpleName()));\t\t}\t\t\t\tswitch (rhs.getTypeCode()) {\t\tcase BOOLEAN:\t\tcase FLOAT:\t\tcase INTEGER:\t\tcase ENUM:\t\t\tif (leftAdress && rightAdress) {\t\t\t\t//#include <string.h>\t\t\t\t//void *memcpy(void *dest, const void *src, size_t n);\t\t\t\tresult += tab() + \"memcpy(\" + left + \", \" + right + \", \" + lhs.getType().getSize() + \");\" + NL;\t\t\t}\t\t\telse if (leftAdress) {\t\t\t\tif (lhs.isPOINTER()) {\t\t\t\t\tresult += tab() + \"*\" + left + \" = \" + right + \";\" + NL;\t\t\t\t}\t\t\t\telse {\t\t\t\t\tresult += tab() + left + \" = \" + right + \";\" + NL;\t\t\t\t}\t\t\t}\t\t\telse {\t\t\t\tresult += tab() + left + \" = \" + right + \";\" + NL;\t\t\t}\t\t\tbreak;\t\tcase POINTER:\t\t\t//result += NL + \"//\" + leftAdress + \"-\" + rightAdress + NL;\t\t\t//result += \"//\" + lhs.getTypeCode() + \"-\" + rhs.getTypeCode() + NL;\t\t\t//result += \"//\" + lhs.getClass().getSimpleName() + \"-\" + rhs.getClass().getSimpleName() + NL;\t\t\tif ((lhs.isARRAY() || lhs.isDOT()) && rhs.isVARIABLE()) {\t\t\t\t//#include <string.h>\t\t\t\t//void *memcpy(void *dest, const void *src, size_t n);\t\t\t\tresult += tab() + \"memcpy(\" + left + \", \" + right + \", \" + lhs.getType().getSize() + \");\" + NL;\t\t\t}\t\t\telse {\t\t\t\tresult += tab() + left + \" = \" + right + \";\" + NL;\t\t\t}\t\t\tbreak;\t\tcase STRING:\t\t\t//char *__string_657_ = \"src\";\t\t\t// int _iterator_657_ = 0;\t\t\t//for (char *i = __string_657_ ; *i ; i++) {\t\t\t// (*(dest + _iterator_657_++)) = *(i);\t\t\t//}\t\t\tresult += tab() + \"char *__string_\" + getId() + \"_ = \" + right + \";\" + NL;\t\t\tresult += tab() + \"int __iterator_\" + getId() + \"_ = 0;\" + NL;\t\t\tresult += tab() + \"for (char *__i_ = __string_\" + getId() + \"_ ; *__i_ ; ++__i_)\" + NL;\t\t\tif (left.substring(0,  1).equals(\"*\")) {\t\t\t\tresult += tab() + \"\\t(*(\" + left.substring(1) + \" + __iterator_\" + getId() + \"_++)) = *__i_;\" + NL;\t\t\t}\t\t\telse {\t\t\t\tresult += tab() + \"\\t(*(\" + left + \" + __iterator_\" + getId() + \"_++)) = *__i_;\" + NL;\t\t\t}\t\t\tbreak;\t\tcase STRUCT:\t\t\tresult += tab() + \"memcpy(\" + left + \", \" + right + \", \" + lhs.getType().getSize() + \");\" + NL;\t\t\tbreak;\t\tdefault:\t\t\tthrow new CodeException(\"affectation\");\t\t}\t\treturn result;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/StmAFF.java", "stars": "3", "class": {"name": "StmAFF", "extends": "Stm", "implements": null, "modifiers": ["public"]}}, {"method_name": "checkType", "params": [], "throws": ["TypeException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void checkType() throws TypeException {\t\tlhs.checkType();\t\trhs.checkType();\t\tif (!(lhs.getType().equals(rhs.getType())))\t\t\tthrow new TypeException(\"affectation: \" + lhs.getType() + \" diff\u00e9rent de \" + rhs.getType(), line, column);\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/StmAFF.java", "stars": "3", "class": {"name": "StmAFF", "extends": "Stm", "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String toString() {\t\treturn lhs + \" = \" + rhs;\t}", "url": "https://raw.githubusercontent.com/RhenaudTheLukark/Lea2C/master/src/fr/ubordeaux/deptinfo/compilation/lea/abstract_syntax/StmAFF.java", "stars": "3", "class": {"name": "StmAFF", "extends": "Stm", "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create a SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/rounding/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/rounding/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/rounding/RoundingHandlersTest.java", "stars": "15", "class": {"name": "RoundingHandlersTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetAUser", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetAUser() {    try (SqlSession session = sqlSessionFactory.openSession()) {      Mapper mapper = session.getMapper(Mapper.class);      User user = mapper.getUser(1);      Assertions.assertEquals(\"User1\", user.getName());      Assertions.assertEquals(RoundingMode.UP, user.getRoundingMode());      user = mapper.getUser2(1);      Assertions.assertEquals(\"User1\", user.getName());      Assertions.assertEquals(RoundingMode.UP, user.getRoundingMode());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/rounding/RoundingHandlersTest.java", "stars": "15", "class": {"name": "RoundingHandlersTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldInsertUser2", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldInsertUser2() {    try (SqlSession session = sqlSessionFactory.openSession()) {      Mapper mapper = session.getMapper(Mapper.class);      User user = new User();      user.setId(2);      user.setName(\"User2\");      user.setFunkyNumber(BigDecimal.ZERO);      user.setRoundingMode(RoundingMode.UNNECESSARY);      mapper.insert(user);      mapper.insert2(user);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/rounding/RoundingHandlersTest.java", "stars": "15", "class": {"name": "RoundingHandlersTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_lesson1);    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson1Activity.java", "stars": "2", "class": {"name": "Lesson1Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawColorView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawColorView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.DRAW_COLOR_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson1Activity.java", "stars": "2", "class": {"name": "Lesson1Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawCircleView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawCircleView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.DRAW_CIRCLE_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson1Activity.java", "stars": "2", "class": {"name": "Lesson1Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawRectView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawRectView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.DRAW_RECT_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson1Activity.java", "stars": "2", "class": {"name": "Lesson1Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawPointView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawPointView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.DRAW_POINT_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson1Activity.java", "stars": "2", "class": {"name": "Lesson1Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawOvalView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawOvalView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.DRAW_OVAL_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson1Activity.java", "stars": "2", "class": {"name": "Lesson1Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawLineView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawLineView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.DRAW_LINE_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson1Activity.java", "stars": "2", "class": {"name": "Lesson1Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawRoundRectView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawRoundRectView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.DRAW_ROUND_RECT_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson1Activity.java", "stars": "2", "class": {"name": "Lesson1Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawArcView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawArcView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.DRAW_ARC_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson1Activity.java", "stars": "2", "class": {"name": "Lesson1Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawPathView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawPathView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.DRAW_PATH_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson1Activity.java", "stars": "2", "class": {"name": "Lesson1Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawHistogramView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawHistogramView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.DRAW_HISTOGRAM_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson1Activity.java", "stars": "2", "class": {"name": "Lesson1Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "drawPathChartView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void drawPathChartView(View view) {        ContainerActivity.startActivity(this, LayoutIdUtil.LayoutType.DRAW_PIE_CHART_VIEW.name());    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/activity/Lesson1Activity.java", "stars": "2", "class": {"name": "Lesson1Activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tint n;\t\tScanner sc = new Scanner(System.in);\t\tSystem.out.print(\"enter no of rows:\");\t\tn = sc.nextInt();\t\tint k ;\t\tfor(int i = 1;i <= n; i++) {\t\t\tk = 1;\t\t\tfor(int  j =1; j<= n-i+1; j++) {\t\t\t\twhile(k != i) {\t\t\t\t\tSystem.out.print(\" \");\t\t\t\t\tk = k+1;\t\t\t\t}\t\t\t\tif(j == n-i+1) \t\t\t\t\tSystem.out.print(\"*\");\t\t\t\telse\t\t\t\t\tSystem.out.print(\"* \");\t\t\t\t\t\t\t}\t\t\tSystem.out.println();\t\t}\t\tsc.close();\t}", "url": "https://raw.githubusercontent.com/likith22/java-programs/master/ReversePyramid.java", "stars": "3", "class": {"name": "ReversePyramid", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pluginAll", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object pluginAll(Object target) {    for (Interceptor interceptor : interceptors) {      target = interceptor.plugin(target);    }    return target;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/plugin/InterceptorChain.java", "stars": "15", "class": {"name": "InterceptorChain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addInterceptor", "params": ["Interceptor"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void addInterceptor(Interceptor interceptor) {    interceptors.add(interceptor);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/plugin/InterceptorChain.java", "stars": "15", "class": {"name": "InterceptorChain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getInterceptors", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Interceptor>", "snippet": "  public List<Interceptor> getInterceptors() {    return Collections.unmodifiableList(interceptors);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/plugin/InterceptorChain.java", "stars": "15", "class": {"name": "InterceptorChain", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "Year", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNonNullParameter(PreparedStatement ps, int i, Year year, JdbcType type) throws SQLException {    ps.setInt(i, year.getValue());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/YearTypeHandler.java", "stars": "15", "class": {"name": "YearTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Year", "snippet": "  public Year getNullableResult(ResultSet rs, String columnName) throws SQLException {    int year = rs.getInt(columnName);    return year == 0 && rs.wasNull() ? null : Year.of(year);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/YearTypeHandler.java", "stars": "15", "class": {"name": "YearTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Year", "snippet": "  public Year getNullableResult(ResultSet rs, int columnIndex) throws SQLException {    int year = rs.getInt(columnIndex);    return year == 0 && rs.wasNull() ? null : Year.of(year);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/YearTypeHandler.java", "stars": "15", "class": {"name": "YearTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Year", "snippet": "  public Year getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {    int year = cs.getInt(columnIndex);    return year == 0 && cs.wasNull() ? null : Year.of(year);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/YearTypeHandler.java", "stars": "15", "class": {"name": "YearTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "fromFileDescriptorSet", "params": ["FileDescriptorSet"], "throws": null, "modifiers": ["public", "static"], "return_type": "ServiceResolver", "snippet": "    public static ServiceResolver fromFileDescriptorSet(FileDescriptorSet descriptorSet) {        ImmutableMap<String, FileDescriptorProto> descriptorProtoIndex =                computeDescriptorProtoIndex(descriptorSet);        Map<String, FileDescriptor> descriptorCache = new HashMap<>();        ImmutableList.Builder<FileDescriptor> result = ImmutableList.builder();        for (FileDescriptorProto descriptorProto : descriptorSet.getFileList()) {            try {                result.add(descriptorFromProto(descriptorProto, descriptorProtoIndex, descriptorCache));            } catch (DescriptorValidationException e) {                continue;            }        }        return new ServiceResolver(result.build());    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/protobuf/ServiceResolver.java", "stars": "3", "class": {"name": "ServiceResolver", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "listMessageTypes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ImmutableSet<Descriptor>", "snippet": "    public ImmutableSet<Descriptor> listMessageTypes() {        ImmutableSet.Builder<Descriptor> resultBuilder = ImmutableSet.builder();        fileDescriptors.forEach(d -> resultBuilder.addAll(d.getMessageTypes()));        return resultBuilder.build();    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/protobuf/ServiceResolver.java", "stars": "3", "class": {"name": "ServiceResolver", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveServiceMethod", "params": ["ProtoMethodName"], "throws": null, "modifiers": ["public"], "return_type": "MethodDescriptor", "snippet": "    public MethodDescriptor resolveServiceMethod(ProtoMethodName method) {        return resolveServiceMethod(                method.getServiceName(),                method.getMethodName(),                method.getPackageName());    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/protobuf/ServiceResolver.java", "stars": "3", "class": {"name": "ServiceResolver", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resolveServiceMethod", "params": ["String", "String", "String"], "throws": null, "modifiers": ["private"], "return_type": "MethodDescriptor", "snippet": "    private MethodDescriptor resolveServiceMethod(            String serviceName, String methodName, String packageName) {        ServiceDescriptor service = findService(serviceName, packageName);        MethodDescriptor method = service.findMethodByName(methodName);        if (method == null) {            throw new IllegalArgumentException(                    \"Unable to find method \" + methodName + \" in service \" + serviceName);        }        return method;    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/protobuf/ServiceResolver.java", "stars": "3", "class": {"name": "ServiceResolver", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findService", "params": ["String", "String"], "throws": null, "modifiers": ["private"], "return_type": "ServiceDescriptor", "snippet": "    private ServiceDescriptor findService(String serviceName, String packageName) {        // TODO(dino): Consider creating an index.        for (FileDescriptor fileDescriptor : fileDescriptors) {            if (!fileDescriptor.getPackage().equals(packageName)) {                // Package does not match this file, ignore.                continue;            }            ServiceDescriptor serviceDescriptor = fileDescriptor.findServiceByName(serviceName);            if (serviceDescriptor != null) {                return serviceDescriptor;            }        }        throw new IllegalArgumentException(\"Unable to find service with name: \" + serviceName);    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/protobuf/ServiceResolver.java", "stars": "3", "class": {"name": "ServiceResolver", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "computeDescriptorProtoIndex", "params": ["FileDescriptorSet"], "throws": null, "modifiers": ["private", "static"], "return_type": "ImmutableMap<String,FileDescriptorProto>", "snippet": "    private static ImmutableMap<String, FileDescriptorProto> computeDescriptorProtoIndex(            FileDescriptorSet fileDescriptorSet) {        ImmutableMap.Builder<String, FileDescriptorProto> resultBuilder = ImmutableMap.builder();        for (FileDescriptorProto descriptorProto : fileDescriptorSet.getFileList()) {            resultBuilder.put(descriptorProto.getName(), descriptorProto);        }        return resultBuilder.build();    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/protobuf/ServiceResolver.java", "stars": "3", "class": {"name": "ServiceResolver", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "descriptorFromProto", "params": ["FileDescriptorProto", "ImmutableMap<String,FileDescriptorProto>", "Map<String,FileDescriptor>"], "throws": ["DescriptorValidationException"], "modifiers": ["private", "static"], "return_type": "FileDescriptor", "snippet": "    private static FileDescriptor descriptorFromProto(            FileDescriptorProto descriptorProto,            ImmutableMap<String, FileDescriptorProto> descriptorProtoIndex,            Map<String, FileDescriptor> descriptorCache) throws DescriptorValidationException {        // First, check the cache.        String descritorName = descriptorProto.getName();        if (descriptorCache.containsKey(descritorName)) {            return descriptorCache.get(descritorName);        }        // Then, fetch all the required dependencies recursively.        ImmutableList.Builder<FileDescriptor> dependencies = ImmutableList.builder();        for (String dependencyName : descriptorProto.getDependencyList()) {            if (!descriptorProtoIndex.containsKey(dependencyName)) {                throw new IllegalArgumentException(\"Could not find dependency: \" + dependencyName);            }            FileDescriptorProto dependencyProto = descriptorProtoIndex.get(dependencyName);            dependencies.add(descriptorFromProto(dependencyProto, descriptorProtoIndex, descriptorCache));        }        // Finally, construct the actual descriptor.        FileDescriptor[] empty = new FileDescriptor[0];        return FileDescriptor.buildFrom(descriptorProto, dependencies.build().toArray(empty));    }", "url": "https://raw.githubusercontent.com/zalopay-oss/jmeter-grpc-request/master/src/main/java/vn/zalopay/benchmark/core/protobuf/ServiceResolver.java", "stars": "3", "class": {"name": "ServiceResolver", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getWidth", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getWidth() {        return mWidth;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/CustomPopWindow.java", "stars": "2", "class": {"name": "CustomPopWindow", "extends": null, "implements": ["PopupWindow"], "modifiers": ["public"]}}, {"method_name": "getHeight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getHeight() {        return mHeight;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/CustomPopWindow.java", "stars": "2", "class": {"name": "CustomPopWindow", "extends": null, "implements": ["PopupWindow"], "modifiers": ["public"]}}, {"method_name": "showAsDropDown", "params": ["View", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "CustomPopWindow", "snippet": "    public CustomPopWindow showAsDropDown(View anchor, int xOff, int yOff) {        if (mPopupWindow != null) {            mPopupWindow.showAsDropDown(anchor, xOff, yOff);        }        return this;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/CustomPopWindow.java", "stars": "2", "class": {"name": "CustomPopWindow", "extends": null, "implements": ["PopupWindow"], "modifiers": ["public"]}}, {"method_name": "showAsDropDown", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "CustomPopWindow", "snippet": "    public CustomPopWindow showAsDropDown(View anchor) {        if (mPopupWindow != null) {            mPopupWindow.showAsDropDown(anchor);        }        return this;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/CustomPopWindow.java", "stars": "2", "class": {"name": "CustomPopWindow", "extends": null, "implements": ["PopupWindow"], "modifiers": ["public"]}}, {"method_name": "showAsDropDown", "params": ["View", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "CustomPopWindow", "snippet": "    public CustomPopWindow showAsDropDown(View anchor, int xOff, int yOff, int gravity) {        if (mPopupWindow != null) {            mPopupWindow.showAsDropDown(anchor, xOff, yOff, gravity);        }        return this;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/CustomPopWindow.java", "stars": "2", "class": {"name": "CustomPopWindow", "extends": null, "implements": ["PopupWindow"], "modifiers": ["public"]}}, {"method_name": "showAtLocation", "params": ["View", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "CustomPopWindow", "snippet": "    public CustomPopWindow showAtLocation(View parent, int gravity, int x, int y) {        if (parent.getParent() != null) {            ((ViewGroup) parent.getParent()).removeView(parent);        }        if (mPopupWindow != null) {            mPopupWindow.showAtLocation(parent, gravity, x, y);        }        return this;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/CustomPopWindow.java", "stars": "2", "class": {"name": "CustomPopWindow", "extends": null, "implements": ["PopupWindow"], "modifiers": ["public"]}}, {"method_name": "apply", "params": ["PopupWindow"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void apply(PopupWindow popupWindow) {        popupWindow.setClippingEnabled(mClippEnable);        if (mIgnoreCheekPress) {            popupWindow.setIgnoreCheekPress();        }        if (mInputMode != -1) {            popupWindow.setInputMethodMode(mInputMode);        }        if (mSoftInputMode != -1) {            popupWindow.setSoftInputMode(mSoftInputMode);        }        if (mOnDismissListener != null) {            popupWindow.setOnDismissListener(mOnDismissListener);        }        if (mOnTouchListener != null) {            popupWindow.setTouchInterceptor(mOnTouchListener);        }        popupWindow.setTouchable(mTouchable);    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/CustomPopWindow.java", "stars": "2", "class": {"name": "CustomPopWindow", "extends": null, "implements": ["PopupWindow"], "modifiers": ["public"]}}, {"method_name": "build", "params": [], "throws": null, "modifiers": ["private"], "return_type": "PopupWindow", "snippet": "    private PopupWindow build() {        if (mContentView == null) {            mContentView = LayoutInflater.from(mContext).inflate(mResLayoutId, null);        }        // 2017.3.17 add        // \u83b7\u53d6\u5f53\u524dActivity\u7684window        //get current activity's window        Activity activity = (Activity) mContentView.getContext();        if (activity != null && mIsBackgroundDark) {            //\u5982\u679c\u8bbe\u7f6e\u7684\u503c\u57280 - 1\u7684\u8303\u56f4\u5185\uff0c\u5219\u7528\u8bbe\u7f6e\u7684\u503c\uff0c\u5426\u5219\u7528\u9ed8\u8ba4\u503c            //If the set value is in the range of 0-1, use the set value, otherwise use the default value            final float alpha = (mBackgroundDrakValue > 0 && mBackgroundDrakValue < 1) ? mBackgroundDrakValue : DEFAULT_ALPHA;            mWindow = activity.getWindow();            WindowManager.LayoutParams params = mWindow.getAttributes();            params.alpha = alpha;            mWindow.addFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND);            mWindow.setAttributes(params);        }        if (mWidth != 0 && mHeight != 0) {            mPopupWindow = new PopupWindow(mContentView, mWidth, mHeight);        } else {            mPopupWindow = new PopupWindow(mContentView, ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);        }        if (mAnimationStyle != -1) {            mPopupWindow.setAnimationStyle(mAnimationStyle);        }        apply(mPopupWindow);//\u8bbe\u7f6e\u4e00\u4e9b\u5c5e\u6027        if (mWidth == 0 || mHeight == 0) {            mPopupWindow.getContentView().measure(View.MeasureSpec.UNSPECIFIED, View.MeasureSpec.UNSPECIFIED);            //\u5982\u679c\u5916\u9762\u6ca1\u6709\u8bbe\u7f6e\u5bbd\u9ad8\u7684\u60c5\u51b5\u4e0b\uff0c\u8ba1\u7b97\u5bbd\u9ad8\u5e76\u8d4b\u503c            //If the outside is not set, calculate the width and assign a value            mWidth = mPopupWindow.getContentView().getMeasuredWidth();            mHeight = mPopupWindow.getContentView().getMeasuredHeight();        }        // \u6dfb\u52a0dissmiss \u76d1\u542c        //add Listener        mPopupWindow.setOnDismissListener(this);        //2017.6.27 add:fix \u8bbe\u7f6e  setOutsideTouchable\uff08false\uff09\u70b9\u51fb\u5916\u90e8\u53d6\u6d88\u7684bug.        // \u5224\u65ad\u662f\u5426\u70b9\u51fbPopupWindow\u4e4b\u5916\u7684\u5730\u65b9\u5173\u95ed popWindow        if (!enableOutsideTouchDisMiss) {            //\u6ce8\u610f\u8fd9\u4e09\u4e2a\u5c5e\u6027\u5fc5\u987b\u540c\u65f6\u8bbe\u7f6e\uff0c\u4e0d\u7136\u4e0d\u80fddisMiss\uff0c\u4ee5\u4e0b\u4e09\u884c\u4ee3\u7801\u5728Android 4.4 \u4e0a\u662f\u53ef\u4ee5\uff0c\u7136\u540e\u5728Android 6.0\u4ee5\u4e0a\uff0c\u4e0b\u9762\u7684\u4e09\u884c\u4ee3\u7801\u5c31\u4e0d\u8d77\u4f5c\u7528\u4e86\uff0c\u5c31\u5f97\u7528\u4e0b\u9762\u7684\u65b9\u6cd5            mPopupWindow.setFocusable(true);            mPopupWindow.setOutsideTouchable(false);            mPopupWindow.setBackgroundDrawable(null);            //\u6ce8\u610f\u4e0b\u9762\u8fd9\u4e09\u4e2a\u662fcontentView \u4e0d\u662fPopupWindow            mPopupWindow.getContentView().setFocusable(true);            mPopupWindow.getContentView().setFocusableInTouchMode(true);            mPopupWindow.getContentView().setOnKeyListener(new View.OnKeyListener() {                @Override                public boolean onKey(View v, int keyCode, KeyEvent event) {                    if (keyCode == KeyEvent.KEYCODE_BACK) {                        mPopupWindow.dismiss();                        return true;                    }                    return false;                }            });            //\u5728Android 6.0\u4ee5\u4e0a \uff0c\u53ea\u80fd\u901a\u8fc7\u62e6\u622a\u4e8b\u4ef6\u6765\u89e3\u51b3            mPopupWindow.setTouchInterceptor(new View.OnTouchListener() {                @Override                public boolean onTouch(View v, MotionEvent event) {                    final int x = (int) event.getX();                    final int y = (int) event.getY();                    if ((event.getAction() == MotionEvent.ACTION_DOWN)                            && ((x < 0) || (x >= mWidth) || (y < 0) || (y >= mHeight))) {                        Log.e(TAG, \"out side \");                        Log.e(TAG, \"width:\" + mPopupWindow.getWidth() + \"height:\" + mPopupWindow.getHeight() + \" x:\" + x + \" y  :\" + y);                        return true;                    } else if (event.getAction() == MotionEvent.ACTION_OUTSIDE) {                        Log.e(TAG, \"out side ...\");                        return true;                    }                    return false;                }            });        } else {            mPopupWindow.setFocusable(mIsFocusable);            mPopupWindow.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));            mPopupWindow.setOutsideTouchable(mIsOutside);        }        // update        mPopupWindow.update();        return mPopupWindow;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/CustomPopWindow.java", "stars": "2", "class": {"name": "CustomPopWindow", "extends": null, "implements": ["PopupWindow"], "modifiers": ["public"]}}, {"method_name": "onDismiss", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDismiss() {        dissmiss();    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/CustomPopWindow.java", "stars": "2", "class": {"name": "CustomPopWindow", "extends": null, "implements": ["PopupWindow"], "modifiers": ["public"]}}, {"method_name": "dissmiss", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void dissmiss() {        if (mOnDismissListener != null) {            mOnDismissListener.onDismiss();        }        //\u5982\u679c\u8bbe\u7f6e\u4e86\u80cc\u666f\u53d8\u6697\uff0c\u90a3\u4e48\u5728dissmiss\u7684\u65f6\u5019\u9700\u8981\u8fd8\u539f        //If the background is set to darken, restore it when dissmiss occurs        if (mWindow != null) {            WindowManager.LayoutParams params = mWindow.getAttributes();            params.alpha = 1.0f;            mWindow.setAttributes(params);        }        if (mPopupWindow != null && mPopupWindow.isShowing()) {            mPopupWindow.dismiss();        }    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/CustomPopWindow.java", "stars": "2", "class": {"name": "CustomPopWindow", "extends": null, "implements": ["PopupWindow"], "modifiers": ["public"]}}, {"method_name": "getPopupWindow", "params": [], "throws": null, "modifiers": ["public"], "return_type": "PopupWindow", "snippet": "    public PopupWindow getPopupWindow() {        return mPopupWindow;    }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/CustomPopWindow.java", "stars": "2", "class": {"name": "CustomPopWindow", "extends": null, "implements": ["PopupWindow"], "modifiers": ["public"]}}, {"method_name": "size", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "PopupWindowBuilder", "snippet": "        public PopupWindowBuilder size(int width, int height) {            mCustomPopWindow.mWidth = width;            mCustomPopWindow.mHeight = height;            return this;        }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/CustomPopWindow.java", "stars": "2", "class": {"name": "PopupWindowBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setFocusable", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "PopupWindowBuilder", "snippet": "        public PopupWindowBuilder setFocusable(boolean focusable) {            mCustomPopWindow.mIsFocusable = focusable;            return this;        }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/CustomPopWindow.java", "stars": "2", "class": {"name": "PopupWindowBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setView", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "PopupWindowBuilder", "snippet": "        public PopupWindowBuilder setView(int resLayoutId) {            mCustomPopWindow.mResLayoutId = resLayoutId;            mCustomPopWindow.mContentView = null;            return this;        }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/CustomPopWindow.java", "stars": "2", "class": {"name": "PopupWindowBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "PopupWindowBuilder", "snippet": "        public PopupWindowBuilder setView(View view) {            mCustomPopWindow.mContentView = view;            mCustomPopWindow.mResLayoutId = -1;            setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);            return this;        }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/CustomPopWindow.java", "stars": "2", "class": {"name": "PopupWindowBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setOutsideTouchable", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "PopupWindowBuilder", "snippet": "        public PopupWindowBuilder setOutsideTouchable(boolean outsideTouchable) {            mCustomPopWindow.mIsOutside = outsideTouchable;            return this;        }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/CustomPopWindow.java", "stars": "2", "class": {"name": "PopupWindowBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setAnimationStyle", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "PopupWindowBuilder", "snippet": "        public PopupWindowBuilder setAnimationStyle(int animationStyle) {            mCustomPopWindow.mAnimationStyle = animationStyle;            return this;        }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/CustomPopWindow.java", "stars": "2", "class": {"name": "PopupWindowBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setClippingEnable", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "PopupWindowBuilder", "snippet": "        public PopupWindowBuilder setClippingEnable(boolean enable) {            mCustomPopWindow.mClippEnable = enable;            return this;        }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/CustomPopWindow.java", "stars": "2", "class": {"name": "PopupWindowBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setIgnoreCheekPress", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "PopupWindowBuilder", "snippet": "        public PopupWindowBuilder setIgnoreCheekPress(boolean ignoreCheekPress) {            mCustomPopWindow.mIgnoreCheekPress = ignoreCheekPress;            return this;        }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/CustomPopWindow.java", "stars": "2", "class": {"name": "PopupWindowBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setInputMethodMode", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "PopupWindowBuilder", "snippet": "        public PopupWindowBuilder setInputMethodMode(int mode) {            mCustomPopWindow.mInputMode = mode;            return this;        }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/CustomPopWindow.java", "stars": "2", "class": {"name": "PopupWindowBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setOnDissmissListener", "params": ["PopupWindow"], "throws": null, "modifiers": ["public"], "return_type": "PopupWindowBuilder", "snippet": "        public PopupWindowBuilder setOnDissmissListener(PopupWindow.OnDismissListener onDissmissListener) {            mCustomPopWindow.mOnDismissListener = onDissmissListener;            return this;        }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/CustomPopWindow.java", "stars": "2", "class": {"name": "PopupWindowBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setSoftInputMode", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "PopupWindowBuilder", "snippet": "        public PopupWindowBuilder setSoftInputMode(int softInputMode) {            mCustomPopWindow.mSoftInputMode = softInputMode;            return this;        }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/CustomPopWindow.java", "stars": "2", "class": {"name": "PopupWindowBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setTouchable", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "PopupWindowBuilder", "snippet": "        public PopupWindowBuilder setTouchable(boolean touchable) {            mCustomPopWindow.mTouchable = touchable;            return this;        }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/CustomPopWindow.java", "stars": "2", "class": {"name": "PopupWindowBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setTouchIntercepter", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "PopupWindowBuilder", "snippet": "        public PopupWindowBuilder setTouchIntercepter(View.OnTouchListener touchIntercepter) {            mCustomPopWindow.mOnTouchListener = touchIntercepter;            return this;        }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/CustomPopWindow.java", "stars": "2", "class": {"name": "PopupWindowBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "enableBackgroundDark", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "PopupWindowBuilder", "snippet": "        public PopupWindowBuilder enableBackgroundDark(boolean isDark) {            mCustomPopWindow.mIsBackgroundDark = isDark;            return this;        }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/CustomPopWindow.java", "stars": "2", "class": {"name": "PopupWindowBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "setBgDarkAlpha", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "PopupWindowBuilder", "snippet": "        public PopupWindowBuilder setBgDarkAlpha(float darkValue) {            mCustomPopWindow.mBackgroundDrakValue = darkValue;            return this;        }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/CustomPopWindow.java", "stars": "2", "class": {"name": "PopupWindowBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "enableOutsideTouchableDissmiss", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "PopupWindowBuilder", "snippet": "        public PopupWindowBuilder enableOutsideTouchableDissmiss(boolean disMiss) {            mCustomPopWindow.enableOutsideTouchDisMiss = disMiss;            return this;        }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/CustomPopWindow.java", "stars": "2", "class": {"name": "PopupWindowBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "create", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CustomPopWindow", "snippet": "        public CustomPopWindow create() {            //\u6784\u5efaPopWindow            mCustomPopWindow.build();            return mCustomPopWindow;        }", "url": "https://raw.githubusercontent.com/Aivacom/JLYLiveChat-android/master/app/src/main/java/com/mediaroom/utils/CustomPopWindow.java", "stars": "2", "class": {"name": "PopupWindowBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "init", "params": ["FMLInitializationEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void init(FMLInitializationEvent event) {\t\ttry {\t\t\tEmojis.load();\t\t} catch(Exception ignored) {\t\t}\t}", "url": "https://raw.githubusercontent.com/Tigermouthbear/emoji-mod/master/src/main/java/me/tigermouthbear/emojimod/impl/EmojiMod.java", "stars": "3", "class": {"name": "EmojiMod", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTypeWithDataId", "params": ["ConfigType", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String getTypeWithDataId(ConfigType configType, String dataId) {        String type = configType.getType();        if (dataId.endsWith(PROPERTIES_SUFFIX)) {            type = ConfigType.PROPERTIES.getType();        } else if (dataId.endsWith(YAML_SUFFIX)) {            type = ConfigType.YAML.getType();        }        return type;    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/util/ConfigTypeUtil.java", "stars": "4", "class": {"name": "ConfigTypeUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "initialize", "params": ["Main"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initialize(Main test) {\t\tSystem.out.println();\t\tthis.test = test;\t\tnj1.setText(test.getNom1().getText());\t\tnj2.setText(test.getNom2().getText());\t\tsuggestions.setCellValueFactory(new PropertyValueFactory<Suggestion, String>(\"Mot\"));\t\tpoint.setCellValueFactory(new PropertyValueFactory<Suggestion, Integer>(\"Score\"));\t\tx.setCellValueFactory(new PropertyValueFactory<Suggestion, Integer>(\"Posx\"));\t\ty.setCellValueFactory(new PropertyValueFactory<Suggestion, Integer>(\"Posy\"));\t\tsens.setCellValueFactory(new PropertyValueFactory<Suggestion, String>(\"Sens\"));\t\tif (test.sologameInstance == null) {\t\t\tjoueur1 = test.gameInstance.tourActuel();\t\t\tjoueur2 = test.gameInstance.adversaireActuel();\t\t} else {\t\t\tjoueur1 = test.sologameInstance.tourActuel();\t\t\tjoueur2 = test.sologameInstance.adversaireActuel();\t\t}\t\ttest.initchevalet(joueur2.getMain());\t\ttest.initchevalet(joueur1.getMain());\t\ttest.selection.addListener((ListChangeListener<Integer>) change -> {\t\t\tif (test.selection.size() > 0) {\t\t\t\tjeter.setText(\"Jeter Lettres\");\t\t\t} else {\t\t\t\tjeter.setText(\"Passer Tour\");\t\t\t}\t\t});\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Partiecontrol.java", "stars": "4", "class": {"name": "Partiecontrol", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "quitter", "params": ["ActionEvent"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid quitter(ActionEvent event) {\t\t// test.music(\"victoire\");\t\talert.setTitle(\"BRAVO\");\t\tGridPane icon = new GridPane();\t\tImage image = new Image(\"Images/drapeaudamier.png\");\t\tImageView imageView = new ImageView(image);\t\talert.setGraphic(imageView);\t\tif (test.sologameInstance == null) {\t\t\talert.setHeaderText(\"F\u00e9licitations \" + test.gameInstance.adversaireActuel().verifierNom());\t\t\talert.setContentText(test.gameInstance.tourActuel().verifierNom()+\" s'est rendu\");\t\t\tif (Fini) {\t\t\t\tif (test.gameInstance.tourActuel().verifierScore() > test.gameInstance.adversaireActuel()\t\t\t\t\t\t.verifierScore()) {\t\t\t\t\talert.setHeaderText(\"F\u00e9licitations \" + test.gameInstance.tourActuel().verifierNom());\t\t\t\t\talert.setContentText(\"Tu as gagn\u00e9 avec un score path\u00e9tique de \"\t\t\t\t\t\t\t+ test.gameInstance.tourActuel().verifierScore());\t\t\t\t} else if (test.gameInstance.tourActuel().verifierScore() < test.gameInstance.adversaireActuel()\t\t\t\t\t\t.verifierScore()) {\t\t\t\t\talert.setHeaderText(\"F\u00e9licitations \" + test.gameInstance.adversaireActuel().verifierNom());\t\t\t\t\talert.setContentText(\"Tu as gagn\u00e9 avec un score path\u00e9tique de \"\t\t\t\t\t\t\t+ test.gameInstance.adversaireActuel().verifierScore());\t\t\t\t} else {\t\t\t\t\talert.setHeaderText(\"F\u00e9licitations \");\t\t\t\t\talert.setContentText(\"Vous \u00eates de force \u00e9gale\");\t\t\t\t}\t\t\t}\t\t} else {\t\t\talert.setHeaderText(\" \");\t\t\talert.setContentText(\"L'ordinateur a gagn\u00e9\");\t\t\talert.setGraphic(new ImageView(new Image(\"Images/blanc.png\")));\t\t\tif (Fini) {\t\t\t\tif (test.sologameInstance.tourActuel().verifierScore() > test.sologameInstance.adversaireActuel()\t\t\t\t\t\t.verifierScore()) {\t\t\t\t\talert.setHeaderText(\"F\u00e9licitations \" + test.sologameInstance.tourActuel().verifierNom());\t\t\t\t\talert.setContentText(\"Tu as gagn\u00e9 avec un score path\u00e9tique de \"\t\t\t\t\t\t\t+ test.sologameInstance.adversaireActuel().verifierScore());\t\t\t\t} else if (test.sologameInstance.tourActuel().verifierScore() < test.sologameInstance.adversaireActuel()\t\t\t\t\t\t.verifierScore()) {\t\t\t\t\talert.setHeaderText(\"F\u00e9licitations \" + test.sologameInstance.adversaireActuel().verifierNom());\t\t\t\t\talert.setContentText(\"Tu as gagn\u00e9 avec un score path\u00e9tique de \"\t\t\t\t\t\t\t+ test.sologameInstance.adversaireActuel().verifierScore());\t\t\t\t} else {\t\t\t\t\talert.setHeaderText(\"F\u00e9licitations \" + \"Vous \u00eates de force \u00e9gale\");\t\t\t\t\talert.setContentText(\"Vous \u00eates de force \u00e9gale\");\t\t\t\t}\t\t\t}\t\t}\t\tsuggestionmain.getItems().clear();\t\ttest.selection.clear();\t\tDialogPane dialogPane = alert.getDialogPane();\t\tFile f = new File(\"src/chart.css\");\t\tdialogPane.getStylesheets().add(\"file:///\" + f.getAbsolutePath().replace(\"\\\\\", \"/\"));\t\tdialogPane.getStyleClass().add(\"myDialog\");\t\talert.showAndWait();\t\tButton bouton = (Button) event.getSource();\t\tGroup root = ((Group) bouton.getParent().getParent().getParent().getParent());\t\troot.getChildren().clear();\t\ttest.init(\"Startmenu.fxml\");\t\t// place la grille\t\ttest.acceuilgauche.getChildren().add(test.grille);\t\troot.getChildren().add(test.acceuilmain);\t\troot.getChildren().add(test.rootLayout);\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Partiecontrol.java", "stars": "4", "class": {"name": "Partiecontrol", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "suggester", "params": ["ActionEvent"], "throws": ["IOException"], "modifiers": [], "return_type": "void", "snippet": "\tvoid suggester(ActionEvent event) throws IOException {\t\tint[] m;\t\tanagramDictionnaire aD = new anagramDictionnaire(\"dico.txt\");\t\tDictionnaire d = new Dictionnaire(\"dico.txt\");\t\tObservableList<Suggestion> mots = FXCollections.observableArrayList();\t\tif (test.sologameInstance == null) {\t\t\tm = test.gameInstance.tourActuel().verifierMain();\t\t\ttest.gameInstance.plat.montrerPlateau();\t\t\tpermutationSearch pS = new permutationSearch(aD, d, test.gameInstance.plat, m, test.gameInstance.usedWords);\t\t\tfor (int i = 0; i < pS.totalPossibleWords(); ++i) {\t\t\t\tif (pS.possibleWord(i).verifierNom().length() >= 3){\t\t\t\t\tif (pS.possibleWord(i).verifierHorizontal()) {\t\t\t\t\t\tmots.add(new Suggestion(pS.possibleWord(i).verifierNom(), pS.possibleWord(i).verifierPoints(),\t\t\t\t\t\t\t\tpS.possibleWord(i).verifierY(), pS.possibleWord(i).verifierX(), \"Horizontal\"));\t\t\t\t\t} else {\t\t\t\t\t\tmots.add(new Suggestion(pS.possibleWord(i).verifierNom(), pS.possibleWord(i).verifierPoints(),\t\t\t\t\t\t\t\tpS.possibleWord(i).verifierY(), pS.possibleWord(i).verifierX(), \"Vertical\"));\t\t\t\t\t}\t\t\t\t}\t\t\t}\t\t} else {\t\t\tm = test.sologameInstance.tourActuel().verifierMain();\t\t\tpermutationSearch pS = new permutationSearch(aD, d, test.sologameInstance.plat, m,\t\t\t\t\ttest.sologameInstance.usedWords);\t\t\tfor (int i = 0; i < pS.totalPossibleWords(); ++i) {\t\t\t\tif (pS.possibleWord(i).verifierNom().length() >= 3){\t\t\t\t\tif (pS.possibleWord(i).verifierHorizontal()) {\t\t\t\t\t\tmots.add(new Suggestion(pS.possibleWord(i).verifierNom(), pS.possibleWord(i).verifierPoints(),\t\t\t\t\t\t\t\tpS.possibleWord(i).verifierY(), pS.possibleWord(i).verifierX(), \"Horizontal\"));\t\t\t\t\t} else {\t\t\t\t\t\tmots.add(new Suggestion(pS.possibleWord(i).verifierNom(), pS.possibleWord(i).verifierPoints(),\t\t\t\t\t\t\t\tpS.possibleWord(i).verifierY(), pS.possibleWord(i).verifierX(), \"Vertical\"));\t\t\t\t\t}\t\t\t\t}\t\t\t}\t\t}\t\tsuggestionmain.setEditable(true);\t\tsuggestionmain.setItems(mots);\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Partiecontrol.java", "stars": "4", "class": {"name": "Partiecontrol", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "valid", "params": ["ActionEvent"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid valid(ActionEvent event) {\t\t/** LETTRE DANS CASE **/\t\tGroup gj = (Group) test.acceuilgauche.getChildren().get(2);\t\tGroup gg = (Group) test.acceuilgauche.getChildren().get(0);\t\tArrayList listeCases = new ArrayList();\t\tArrayList listeTexte = new ArrayList();\t\tArrayList listePos = new ArrayList();\t\tArrayList temp = new ArrayList();\t\tif (test.sologameInstance == null) {\t\t\tfor (Node a : gj.getChildren()) {\t\t\t\tif (a.getClass().equals(Text.class)) {\t\t\t\t\tif (a.getId() != null) {\t\t\t\t\t\tlistePos.add(Integer.parseInt(a.getId()));\t\t\t\t\t\tlisteCases.add(gg.getChildren().get(Integer.parseInt(a.getId())));\t\t\t\t\t\tlisteTexte.add(((Text) a).getText());\t\t\t\t\t}\t\t\t\t}\t\t\t}\t\t\ttemp.add(listePos);\t\t\ttemp.add(listeTexte);\t\t\ttemp.add(listeCases);\t\t\tboolean horizontale = true;\t\t\tif (listePos.size() >= 1) {\t\t\t\tboolean hor=true;\t\t\t\tboolean vert=true;\t\t\t\tfor(Object a:listePos) {\t\t\t\t\tif((int)a/15!=(int)listePos.get(0)/15) {\t\t\t\t\t\thor=false;\t\t\t\t\t}\t\t\t\t\tif((int)a%15!=(int)listePos.get(0)%15) {\t\t\t\t\t\tvert=false;\t\t\t\t\t}\t\t\t\t}\t\t\t\tif(hor || vert) {\t\t\t\tif (listePos.size() > 1) {\t\t\t\t\tfor (int a = 1; a < listePos.size(); a++) {\t\t\t\t\t\tint x = (int) listePos.get(a) / 15;\t\t\t\t\t\tint y = (int) listePos.get(a) % 15;\t\t\t\t\t\tif (x == (int) listePos.get(0) / 15) {\t\t\t\t\t\t\thorizontale = false;\t\t\t\t\t\t} else if (y == (int) listePos.get(0) % 15) {\t\t\t\t\t\t\thorizontale = true;\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t} else {\t\t\t\t\tif ((int) listePos.get(0) / 15 == 0) {// lettre tout \u00e0 gauche\t\t\t\t\t\tif (((Rectangle) ((Case) gg.getChildren().get((int) listePos.get(0) + 15)).getChildren().get(0))\t\t\t\t\t\t\t\t.getId().equals(\"true\")) {\t\t\t\t\t\t\thorizontale = true;\t\t\t\t\t\t} else {\t\t\t\t\t\t\thorizontale = false;\t\t\t\t\t\t}\t\t\t\t\t} else if ((int) listePos.get(0) / 15 == 14) {// tout \u00e0 droite\t\t\t\t\t\tif (((Rectangle) ((Case) gg.getChildren().get((int) listePos.get(0) - 15)).getChildren().get(0))\t\t\t\t\t\t\t\t.getId().equals(\"true\")) {\t\t\t\t\t\t\thorizontale = true;\t\t\t\t\t\t} else {\t\t\t\t\t\t\thorizontale = false;\t\t\t\t\t\t}\t\t\t\t\t} else {// entre les deux\t\t\t\t\t\tif (((Rectangle) ((Case) gg.getChildren().get((int) listePos.get(0) - 15)).getChildren().get(0))\t\t\t\t\t\t\t\t.getId().equals(\"true\")\t\t\t\t\t\t\t\t|| ((Rectangle) ((Case) gg.getChildren().get((int) listePos.get(0) + 15)).getChildren()\t\t\t\t\t\t\t\t\t\t.get(0)).getId().equals(\"true\")) {\t\t\t\t\t\t\thorizontale = true;\t\t\t\t\t\t} else {\t\t\t\t\t\t\thorizontale = false;\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t}\t\t\t\tboolean flag = false;\t\t\t\twhile (!flag) {\t\t\t\t\tflag = true;\t\t\t\t\tfor (int a = 0; a < listePos.size() - 1; a++) {\t\t\t\t\t\tArrayList temp2 = (ArrayList) temp.get(0);\t\t\t\t\t\tArrayList temp3 = (ArrayList) temp.get(1);\t\t\t\t\t\tArrayList temp4 = (ArrayList) temp.get(2);\t\t\t\t\t\tif ((int) temp2.get(a) > (int) temp2.get(a + 1)) {\t\t\t\t\t\t\tflag = false;\t\t\t\t\t\t\tObject aux = temp2.get(a);\t\t\t\t\t\t\tObject aux2 = temp3.get(a);\t\t\t\t\t\t\tObject aux3 = temp4.get(a);\t\t\t\t\t\t\ttemp2.set(a, temp2.get(a + 1));\t\t\t\t\t\t\ttemp2.set(a + 1, aux);\t\t\t\t\t\t\ttemp3.set(a, temp3.get(a + 1));\t\t\t\t\t\t\ttemp3.set(a + 1, aux2);\t\t\t\t\t\t\ttemp4.set(a, temp4.get(a + 1));\t\t\t\t\t\t\ttemp4.set(a + 1, aux3);\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t}\t\t\t\tArrayList posFin = new ArrayList();\t\t\t\tArrayList texteFin = new ArrayList();\t\t\t\tArrayList casesFin = new ArrayList();\t\t\t\tint entre=0;\t\t\t\tif (horizontale) {\t\t\t\t\tentre=((int)listePos.get(listePos.size()-1)/15-(int)listePos.get(0)/15);\t\t\t\t\t// cases avant\t\t\t\t\tint val1 = 0;\t\t\t\t\twhile (val1 < (int) listePos.get(0) / 15) {\t\t\t\t\t\tif (((Rectangle) ((Case) gg.getChildren().get((15 * val1) + (int) listePos.get(0) % 15))\t\t\t\t\t\t\t\t.getChildren().get(0)).getId().equals(\"true\")) {\t\t\t\t\t\t\tposFin.add((15 * val1) + (int) listePos.get(0) % 15);\t\t\t\t\t\t\ttexteFin.add(((Text) ((Case) gg.getChildren().get((15 * val1) + (int) listePos.get(0) % 15))\t\t\t\t\t\t\t\t\t.getChildren().get(1)).getText());\t\t\t\t\t\t\tcasesFin.add(gg.getChildren().get((15 * val1) + (int) listePos.get(0) % 15));\t\t\t\t\t\t} else {\t\t\t\t\t\t\tposFin = new ArrayList();\t\t\t\t\t\t\ttexteFin = new ArrayList();\t\t\t\t\t\t\tcasesFin = new ArrayList();\t\t\t\t\t\t}\t\t\t\t\t\tval1 += 1;\t\t\t\t\t}\t\t\t\t\t// cases dedans\t\t\t\t\tfor(int a=0;a<entre+1;a++) {\t\t\t\t\t\tif(((Case)((Group)test.acceuilgauche.getChildren().get(0)).getChildren().get((int)listePos.get(0)+15*a)).getChildren().get(0).getId().equals(\"true\")) {\t\t\t\t\t\t\tif(((Text)((Case)((Group)test.acceuilgauche.getChildren().get(0)).getChildren().get((int)listePos.get(0)+15*a)).getChildren().get(1)).getText().equals(\"\")) {\t\t\t\t\t\t\t\ttexteFin.add(((Case)((Group)test.acceuilgauche.getChildren().get(0)).getChildren().get((int)listePos.get(0)+15*a)).getChildren().get(1).getId());\t\t\t\t\t\t\t}\t\t\t\t\t\t\telse {\t\t\t\t\t\t\t\ttexteFin.add(((Text)((Case)((Group)test.acceuilgauche.getChildren().get(0)).getChildren().get((int)listePos.get(0)+15*a)).getChildren().get(1)).getText());\t\t\t\t\t\t\t}\t\t\t\t\t\t\tposFin.add((int)listePos.get(0)+15*a);\t\t\t\t\t\t\tcasesFin.add(((Group)test.acceuilgauche.getChildren().get(0)).getChildren().get((int)listePos.get(0)+15*a));\t\t\t\t\t\t}\t\t\t\t\t\telse {\t\t\t\t\t\t\ttexteFin.add(null);\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t\t// cases apr\u00e8s\t\t\t\t\tint val = 1;\t\t\t\t\tif ((int) listePos.get(listePos.size() - 1) / 15 < 14) {\t\t\t\t\t\twhile (((Rectangle) ((Case) gg.getChildren()\t\t\t\t\t\t\t\t.get((int) listePos.get(listePos.size() - 1) + (15 * val))).getChildren().get(0))\t\t\t\t\t\t\t\t\t\t.getId().equals(\"true\")\t\t\t\t\t\t\t\t&& ((int) listePos.get(listePos.size() - 1) + (15 * val)) / 15 < 15) {\t\t\t\t\t\t\tposFin.add((int) listePos.get(listePos.size() - 1) + (15 * val));\t\t\t\t\t\t\ttexteFin.add(((Text) ((Case) gg.getChildren()\t\t\t\t\t\t\t\t\t.get((int) listePos.get(listePos.size() - 1) + (15 * val))).getChildren().get(1))\t\t\t\t\t\t\t\t\t\t\t.getText());\t\t\t\t\t\t\tcasesFin.add(gg.getChildren().get((int) listePos.get(listePos.size() - 1) + (15 * val)));\t\t\t\t\t\t\tval += 1;\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t} else {\t\t\t\t\tentre=((int)listePos.get(listePos.size()-1)%15-(int)listePos.get(0)%15);\t\t\t\t\t// cases avant\t\t\t\t\tint val1 = 0;\t\t\t\t\twhile (val1 < (int) listePos.get(0) % 15) {\t\t\t\t\t\tif (((Rectangle) ((Case) gg.getChildren().get(val1 + ((int) listePos.get(0) / 15) * 15))\t\t\t\t\t\t\t\t.getChildren().get(0)).getId().equals(\"true\")) {\t\t\t\t\t\t\tposFin.add(val1 + ((int) listePos.get(0) / 15) * 15);\t\t\t\t\t\t\ttexteFin.add(((Text) ((Case) gg.getChildren().get(val1 + ((int) listePos.get(0) / 15) * 15))\t\t\t\t\t\t\t\t\t.getChildren().get(1)).getText());\t\t\t\t\t\t\tcasesFin.add(gg.getChildren().get(val1 + ((int) listePos.get(0) / 15) * 15));\t\t\t\t\t\t} else {\t\t\t\t\t\t\tposFin = new ArrayList();\t\t\t\t\t\t\ttexteFin = new ArrayList();\t\t\t\t\t\t\tcasesFin = new ArrayList();\t\t\t\t\t\t}\t\t\t\t\t\tval1 += 1;\t\t\t\t\t}\t\t\t\t\t// cases dedans\t\t\t\t\tfor(int a=0;a<entre+1;a++) {\t\t\t\t\t\tif(((Case)((Group)test.acceuilgauche.getChildren().get(0)).getChildren().get((int)listePos.get(0)+1*a)).getChildren().get(0).getId().equals(\"true\")) {\t\t\t\t\t\t\tif(((Text)((Case)((Group)test.acceuilgauche.getChildren().get(0)).getChildren().get((int)listePos.get(0)+1*a)).getChildren().get(1)).getText().equals(\"\")) {\t\t\t\t\t\t\t\ttexteFin.add(((Case)((Group)test.acceuilgauche.getChildren().get(0)).getChildren().get((int)listePos.get(0)+1*a)).getChildren().get(1).getId());\t\t\t\t\t\t\t}\t\t\t\t\t\t\telse {\t\t\t\t\t\t\t\ttexteFin.add(((Text)((Case)((Group)test.acceuilgauche.getChildren().get(0)).getChildren().get((int)listePos.get(0)+1*a)).getChildren().get(1)).getText());\t\t\t\t\t\t\t}\t\t\t\t\t\t\tposFin.add((int)listePos.get(0)+1*a);\t\t\t\t\t\t\tcasesFin.add(((Group)test.acceuilgauche.getChildren().get(0)).getChildren().get((int)listePos.get(0)+1*a));\t\t\t\t\t\t}\t\t\t\t\t\telse {\t\t\t\t\t\t\ttexteFin.add(null);\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t\tint val = 1;\t\t\t\t\t// cases apr\u00e8s\t\t\t\t\tif ((int) listePos.get(listePos.size() - 1) % 15 < 14) {\t\t\t\t\t\twhile (((Rectangle) ((Case) gg.getChildren()\t\t\t\t\t\t\t\t.get((int) listePos.get(listePos.size() - 1) + (1 * val))).getChildren().get(0)).getId()\t\t\t\t\t\t\t\t\t\t.equals(\"true\")\t\t\t\t\t\t\t\t&& ((int) listePos.get(listePos.size() - 1) + (1 * val)) % 15 < 15) {\t\t\t\t\t\t\tposFin.add((int) listePos.get(listePos.size() - 1) + (1 * val));\t\t\t\t\t\t\ttexteFin.add(((Text) ((Case) gg.getChildren()\t\t\t\t\t\t\t\t\t.get((int) listePos.get(listePos.size() - 1) + (1 * val))).getChildren().get(1))\t\t\t\t\t\t\t\t\t\t\t.getText());\t\t\t\t\t\t\tcasesFin.add(gg.getChildren().get((int) listePos.get(listePos.size() - 1) + (1 * val)));\t\t\t\t\t\t\tval += 1;\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t}\t\t\t\tlistePos = posFin;\t\t\t\tlisteTexte = texteFin;\t\t\t\tlisteCases = casesFin;\t\t\t\tint[] mot = new int[listePos.size()];\t\t\t\ttry {\t\t\t\t\tfor (int a = 0; a < listePos.size(); a++) {\t\t\t\t\t\tmot[a] = (int) ((String) listeTexte.get(a)).charAt(0);\t\t\t\t\t}\t\t\t\t} catch (Exception e) {\t\t\t\t\tSystem.out.println(e+\"Les lettres ne se suivent pas\");\t\t\t\t}\t\t\t\tif (joueur1.verifierTour()) {\t\t\t\t\tif (test.gameInstance.proceedWithAction(test.gameInstance.tourActuel(), mot,\t\t\t\t\t\t\t(int) listePos.get(0) % 15, (int) listePos.get(0) / 15, horizontale)) {\t\t\t\t\t\t// jetons dans case\t\t\t\t\t\tif (test.gameInstance.asGagne()) {\t\t\t\t\t\t\tFini = true;\t\t\t\t\t\t}\t\t\t\t\t\ttest.gameInstance.tourActuel().resetTourPasser();\t\t\t\t\t\tsuggestionmain.getItems().clear();\t\t\t\t\t\t// test.music(\"gg\");\t\t\t\t\t\tfor (int a = 0; a < listeCases.size(); a++) {\t\t\t\t\t\t\t((Text) ((Case) listeCases.get(a)).getChildren().get(1))\t\t\t\t\t\t\t\t\t.setText((String) listeTexte.get(a));\t\t\t\t\t\t\t((Rectangle) ((Case) listeCases.get(a)).getChildren().get(0)).setFill(Color.SEAGREEN);\t\t\t\t\t\t}\t\t\t\t\t\ttest.acceuilgauche.getChildren().remove(2);\t\t\t\t\t\ttest.initchevalet(test.gameInstance.adversaireActuel().getMain());\t\t\t\t\t\ttest.acceuilgauche.getChildren().add(test.chevalet);\t\t\t\t\t\t// changement de tour\t\t\t\t\t\tjoueur1.terminerTour();\t\t\t\t\t\tjoueur2.commencerTour();\t\t\t\t\t\tjoueur1 = test.gameInstance.adversaireActuel();\t\t\t\t\t\tjoueur2 = test.gameInstance.tourActuel();\t\t\t\t\t\ttest.gameInstance.plat.montrerPlateau();\t\t\t\t\t} else {\t\t\t\t\t\tAlert pabon = new Alert(AlertType.INFORMATION);\t\t\t\t\t\tpabon.setContentText(\"Attention le mot est invalide\");\t\t\t\t\t\tpabon.showAndWait();\t\t\t\t\t\t// test.music(\"no\");\t\t\t\t\t}\t\t\t\t} else {\t\t\t\t\tif (test.gameInstance.proceedWithAction(test.gameInstance.tourActuel(), mot,\t\t\t\t\t\t\t(int) listePos.get(0) % 15, (int) listePos.get(0) / 15, horizontale)) {\t\t\t\t\t\t// jetons dans case\t\t\t\t\t\tif (test.gameInstance.asGagne()) {\t\t\t\t\t\t\tFini = true;\t\t\t\t\t\t}\t\t\t\t\t\ttest.gameInstance.tourActuel().resetTourPasser();\t\t\t\t\t\tsuggestionmain.getItems().clear();\t\t\t\t\t\tfor (int a = 0; a < listeCases.size(); a++) {\t\t\t\t\t\t\t((Text) ((Case) listeCases.get(a)).getChildren().get(1))\t\t\t\t\t\t\t\t\t.setText((String) listeTexte.get(a));\t\t\t\t\t\t\t((Rectangle) ((Case) listeCases.get(a)).getChildren().get(0)).setFill(Color.SEAGREEN);\t\t\t\t\t\t}\t\t\t\t\t\ttest.acceuilgauche.getChildren().remove(2);\t\t\t\t\t\ttest.initchevalet(test.gameInstance.adversaireActuel().getMain());\t\t\t\t\t\ttest.acceuilgauche.getChildren().add(test.chevalet);\t\t\t\t\t\tjoueur2.terminerTour();\t\t\t\t\t\tjoueur1.commencerTour();\t\t\t\t\t\tjoueur2 = test.gameInstance.adversaireActuel();\t\t\t\t\t\tjoueur1 = test.gameInstance.tourActuel();\t\t\t\t\t\ttest.gameInstance.plat.montrerPlateau();\t\t\t\t\t} else {\t\t\t\t\t\tAlert pabon = new Alert(AlertType.INFORMATION);\t\t\t\t\t\tpabon.setContentText(\"Attention le mot est invalide\");\t\t\t\t\t\tpabon.showAndWait();\t\t\t\t\t\t// test.music(\"no\");\t\t\t\t\t}\t\t\t\t}\t\t\t\t}else {\t\t\t\t\tAlert pabon = new Alert(AlertType.INFORMATION);\t\t\t\t\tpabon.setContentText(\"Attention le mot est invalide\");\t\t\t\t\tpabon.showAndWait();\t\t\t\t}\t\t\t}\t\t\telse {\t\t\t\tAlert pabon = new Alert(AlertType.INFORMATION);\t\t\t\tpabon.setContentText(\"Vous n'avez pas plac\u00e9 de lettre\");\t\t\t\tpabon.showAndWait();\t\t\t}\t\t\tnj1.setText(String.valueOf(test.gameInstance.tourActuel().verifierNom()));\t\t\tnj2.setText(String.valueOf(test.gameInstance.adversaireActuel().verifierNom()));\t\t\tscore1.setText(String.valueOf(test.gameInstance.tourActuel().verifierScore()));\t\t\tscore2.setText(String.valueOf(test.gameInstance.adversaireActuel().verifierScore()));\t\t}\t\t// SOLO\t\telse {\t\t\tfor (Node a : gj.getChildren()) {\t\t\t\tif (a.getClass().equals(Text.class)) {\t\t\t\t\tif (a.getId() != null) {\t\t\t\t\t\tlistePos.add(Integer.parseInt(a.getId()));\t\t\t\t\t\tlisteCases.add(gg.getChildren().get(Integer.parseInt(a.getId())));\t\t\t\t\t\tlisteTexte.add(((Text) a).getText());\t\t\t\t\t}\t\t\t\t}\t\t\t}\t\t\ttemp.add(listePos);\t\t\ttemp.add(listeTexte);\t\t\ttemp.add(listeCases);\t\t\tboolean horizontale = true;\t\t\tif (listePos.size() >= 1) {\t\t\t\tboolean hor=true;\t\t\t\tboolean vert=true;\t\t\t\tfor(Object a:listePos) {\t\t\t\t\tif((int)a/15!=(int)listePos.get(0)/15) {\t\t\t\t\t\thor=false;\t\t\t\t\t}\t\t\t\t\tif((int)a%15!=(int)listePos.get(0)%15) {\t\t\t\t\t\tvert=false;\t\t\t\t\t}\t\t\t\t}\t\t\t\tif(hor || vert) {\t\t\t\tif (listePos.size() > 1) {\t\t\t\t\tfor (int a = 1; a < listePos.size(); a++) {\t\t\t\t\t\tint x = (int) listePos.get(a) / 15;\t\t\t\t\t\tint y = (int) listePos.get(a) % 15;\t\t\t\t\t\tif (x == (int) listePos.get(0) / 15) {\t\t\t\t\t\t\thorizontale = false;\t\t\t\t\t\t} else if (y == (int) listePos.get(0) % 15) {\t\t\t\t\t\t\thorizontale = true;\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t} else {\t\t\t\t\tif ((int) listePos.get(0) / 15 == 0) {// lettre tout \u00e0 gauche\t\t\t\t\t\tif (((Rectangle) ((Case) gg.getChildren().get((int) listePos.get(0) + 15)).getChildren().get(0))\t\t\t\t\t\t\t\t.getId().equals(\"true\")) {\t\t\t\t\t\t\thorizontale = true;\t\t\t\t\t\t} else {\t\t\t\t\t\t\thorizontale = false;\t\t\t\t\t\t}\t\t\t\t\t} else if ((int) listePos.get(0) / 15 == 14) {// tout \u00e0 droite\t\t\t\t\t\tif (((Rectangle) ((Case) gg.getChildren().get((int) listePos.get(0) - 15)).getChildren().get(0))\t\t\t\t\t\t\t\t.getId().equals(\"true\")) {\t\t\t\t\t\t\thorizontale = true;\t\t\t\t\t\t} else {\t\t\t\t\t\t\thorizontale = false;\t\t\t\t\t\t}\t\t\t\t\t} else {// entre les deux\t\t\t\t\t\tif (((Rectangle) ((Case) gg.getChildren().get((int) listePos.get(0) - 15)).getChildren().get(0))\t\t\t\t\t\t\t\t.getId().equals(\"true\")\t\t\t\t\t\t\t\t|| ((Rectangle) ((Case) gg.getChildren().get((int) listePos.get(0) + 15)).getChildren()\t\t\t\t\t\t\t\t\t\t.get(0)).getId().equals(\"true\")) {\t\t\t\t\t\t\thorizontale = true;\t\t\t\t\t\t} else {\t\t\t\t\t\t\thorizontale = false;\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t}\t\t\t\tboolean flag = false;\t\t\t\twhile (!flag) {\t\t\t\t\tflag = true;\t\t\t\t\tfor (int a = 0; a < listePos.size() - 1; a++) {\t\t\t\t\t\tArrayList temp2 = (ArrayList) temp.get(0);\t\t\t\t\t\tArrayList temp3 = (ArrayList) temp.get(1);\t\t\t\t\t\tArrayList temp4 = (ArrayList) temp.get(2);\t\t\t\t\t\tif ((int) temp2.get(a) > (int) temp2.get(a + 1)) {\t\t\t\t\t\t\tflag = false;\t\t\t\t\t\t\tObject aux = temp2.get(a);\t\t\t\t\t\t\tObject aux2 = temp3.get(a);\t\t\t\t\t\t\tObject aux3 = temp4.get(a);\t\t\t\t\t\t\ttemp2.set(a, temp2.get(a + 1));\t\t\t\t\t\t\ttemp2.set(a + 1, aux);\t\t\t\t\t\t\ttemp3.set(a, temp3.get(a + 1));\t\t\t\t\t\t\ttemp3.set(a + 1, aux2);\t\t\t\t\t\t\ttemp4.set(a, temp4.get(a + 1));\t\t\t\t\t\t\ttemp4.set(a + 1, aux3);\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t}\t\t\t\tArrayList posFin = new ArrayList();\t\t\t\tArrayList texteFin = new ArrayList();\t\t\t\tArrayList casesFin = new ArrayList();\t\t\t\tint entre=0;\t\t\t\tif (horizontale) {\t\t\t\t\tentre=((int)listePos.get(listePos.size()-1)/15-(int)listePos.get(0)/15);\t\t\t\t\t// cases avant\t\t\t\t\tint val1 = 0;\t\t\t\t\twhile (val1 < (int) listePos.get(0) / 15) {\t\t\t\t\t\tif (((Rectangle) ((Case) gg.getChildren().get((15 * val1) + (int) listePos.get(0) % 15))\t\t\t\t\t\t\t\t.getChildren().get(0)).getId().equals(\"true\")) {\t\t\t\t\t\t\tposFin.add((15 * val1) + (int) listePos.get(0) % 15);\t\t\t\t\t\t\ttexteFin.add(((Text) ((Case) gg.getChildren().get((15 * val1) + (int) listePos.get(0) % 15))\t\t\t\t\t\t\t\t\t.getChildren().get(1)).getText());\t\t\t\t\t\t\tcasesFin.add(gg.getChildren().get((15 * val1) + (int) listePos.get(0) % 15));\t\t\t\t\t\t} else {\t\t\t\t\t\t\tposFin = new ArrayList();\t\t\t\t\t\t\ttexteFin = new ArrayList();\t\t\t\t\t\t\tcasesFin = new ArrayList();\t\t\t\t\t\t}\t\t\t\t\t\tval1 += 1;\t\t\t\t\t}\t\t\t\t\t// cases dedans\t\t\t\t\tfor(int a=0;a<entre+1;a++) {\t\t\t\t\t\tif(((Case)((Group)test.acceuilgauche.getChildren().get(0)).getChildren().get((int)listePos.get(0)+15*a)).getChildren().get(0).getId().equals(\"true\")) {\t\t\t\t\t\t\tif(((Text)((Case)((Group)test.acceuilgauche.getChildren().get(0)).getChildren().get((int)listePos.get(0)+15*a)).getChildren().get(1)).getText().equals(\"\")) {\t\t\t\t\t\t\t\ttexteFin.add(((Case)((Group)test.acceuilgauche.getChildren().get(0)).getChildren().get((int)listePos.get(0)+15*a)).getChildren().get(1).getId());\t\t\t\t\t\t\t}\t\t\t\t\t\t\telse {\t\t\t\t\t\t\t\ttexteFin.add(((Text)((Case)((Group)test.acceuilgauche.getChildren().get(0)).getChildren().get((int)listePos.get(0)+15*a)).getChildren().get(1)).getText());\t\t\t\t\t\t\t}\t\t\t\t\t\t\tposFin.add((int)listePos.get(0)+15*a);\t\t\t\t\t\t\tcasesFin.add(((Group)test.acceuilgauche.getChildren().get(0)).getChildren().get((int)listePos.get(0)+15*a));\t\t\t\t\t\t}\t\t\t\t\t\telse {\t\t\t\t\t\t\ttexteFin.add(null);\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t\tint val = 1;\t\t\t\t\t// cases apr\u00e8s\t\t\t\t\tif ((int) listePos.get(listePos.size() - 1) / 15 < 14) {\t\t\t\t\t\twhile (((Rectangle) ((Case) gg.getChildren()\t\t\t\t\t\t\t\t.get((int) listePos.get(listePos.size() - 1) + (15 * val))).getChildren().get(0))\t\t\t\t\t\t\t\t\t\t.getId().equals(\"true\")\t\t\t\t\t\t\t\t&& ((int) listePos.get(listePos.size() - 1) + (15 * val)) / 15 < 15) {\t\t\t\t\t\t\tposFin.add((int) listePos.get(listePos.size() - 1) + (15 * val));\t\t\t\t\t\t\ttexteFin.add(((Text) ((Case) gg.getChildren()\t\t\t\t\t\t\t\t\t.get((int) listePos.get(listePos.size() - 1) + (15 * val))).getChildren().get(1))\t\t\t\t\t\t\t\t\t\t\t.getText());\t\t\t\t\t\t\tcasesFin.add(gg.getChildren().get((int) listePos.get(listePos.size() - 1) + (15 * val)));\t\t\t\t\t\t\tval += 1;\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t} else {\t\t\t\t\tentre=((int)listePos.get(listePos.size()-1)%15-(int)listePos.get(0)%15);\t\t\t\t\t// cases avant\t\t\t\t\tint val1 = 0;\t\t\t\t\twhile (val1 < (int) listePos.get(0) % 15) {\t\t\t\t\t\tif (((Rectangle) ((Case) gg.getChildren().get(val1 + ((int) listePos.get(0) / 15) * 15))\t\t\t\t\t\t\t\t.getChildren().get(0)).getId().equals(\"true\")) {\t\t\t\t\t\t\tposFin.add(val1 + ((int) listePos.get(0) / 15) * 15);\t\t\t\t\t\t\ttexteFin.add(((Text) ((Case) gg.getChildren().get(val1 + ((int) listePos.get(0) / 15) * 15))\t\t\t\t\t\t\t\t\t.getChildren().get(1)).getText());\t\t\t\t\t\t\tcasesFin.add(gg.getChildren().get(val1 + ((int) listePos.get(0) / 15) * 15));\t\t\t\t\t\t} else {\t\t\t\t\t\t\tposFin = new ArrayList();\t\t\t\t\t\t\ttexteFin = new ArrayList();\t\t\t\t\t\t\tcasesFin = new ArrayList();\t\t\t\t\t\t}\t\t\t\t\t\tval1 += 1;\t\t\t\t\t}\t\t\t\t\t// cases dedans\t\t\t\t\tfor(int a=0;a<entre+1;a++) {\t\t\t\t\t\tif(((Case)((Group)test.acceuilgauche.getChildren().get(0)).getChildren().get((int)listePos.get(0)+1*a)).getChildren().get(0).getId().equals(\"true\")) {\t\t\t\t\t\t\tif(((Text)((Case)((Group)test.acceuilgauche.getChildren().get(0)).getChildren().get((int)listePos.get(0)+1*a)).getChildren().get(1)).getText().equals(\"\")) {\t\t\t\t\t\t\t\ttexteFin.add(((Case)((Group)test.acceuilgauche.getChildren().get(0)).getChildren().get((int)listePos.get(0)+1*a)).getChildren().get(1).getId());\t\t\t\t\t\t\t}\t\t\t\t\t\t\telse {\t\t\t\t\t\t\t\ttexteFin.add(((Text)((Case)((Group)test.acceuilgauche.getChildren().get(0)).getChildren().get((int)listePos.get(0)+1*a)).getChildren().get(1)).getText());\t\t\t\t\t\t\t}\t\t\t\t\t\t\tposFin.add((int)listePos.get(0)+1*a);\t\t\t\t\t\t\tcasesFin.add(((Group)test.acceuilgauche.getChildren().get(0)).getChildren().get((int)listePos.get(0)+1*a));\t\t\t\t\t\t}\t\t\t\t\t\telse {\t\t\t\t\t\t\ttexteFin.add(null);\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t\tint val = 1;\t\t\t\t\t// cases apr\u00e8s\t\t\t\t\tif ((int) listePos.get(listePos.size() - 1) % 15 < 14) {\t\t\t\t\t\twhile (((Rectangle) ((Case) gg.getChildren()\t\t\t\t\t\t\t\t.get((int) listePos.get(listePos.size() - 1) + (1 * val))).getChildren().get(0)).getId()\t\t\t\t\t\t\t\t\t\t.equals(\"true\")\t\t\t\t\t\t\t\t&& ((int) listePos.get(listePos.size() - 1) + (1 * val)) % 15 < 15) {\t\t\t\t\t\t\tposFin.add((int) listePos.get(listePos.size() - 1) + (1 * val));\t\t\t\t\t\t\ttexteFin.add(((Text) ((Case) gg.getChildren()\t\t\t\t\t\t\t\t\t.get((int) listePos.get(listePos.size() - 1) + (1 * val))).getChildren().get(1))\t\t\t\t\t\t\t\t\t\t\t.getText());\t\t\t\t\t\t\tcasesFin.add(gg.getChildren().get((int) listePos.get(listePos.size() - 1) + (1 * val)));\t\t\t\t\t\t\tval += 1;\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t}\t\t\t\tlistePos = posFin;\t\t\t\tlisteTexte = texteFin;\t\t\t\tlisteCases = casesFin;\t\t\t\tint[] mot = new int[listePos.size()];\t\t\t\ttry {\t\t\t\t\tfor (int a = 0; a < listePos.size(); a++) {\t\t\t\t\t\tmot[a] = (int) ((String) listeTexte.get(a)).charAt(0);\t\t\t\t\t}\t\t\t\t} catch (Exception e) {\t\t\t\t\tSystem.out.println(\"Les lettres ne se suivent pas\");\t\t\t\t}\t\t\t\tif (test.sologameInstance.proceedWithAction(test.sologameInstance.tourActuel(), mot,\t\t\t\t\t\t(int) listePos.get(0) % 15, (int) listePos.get(0) / 15, horizontale)) {\t\t\t\t\t// jetons dans case\t\t\t\t\tif (test.sologameInstance.asGagne()) {\t\t\t\t\t\tFini = true;\t\t\t\t\t}\t\t\t\t\tsuggestionmain.getItems().clear();\t\t\t\t\ttest.sologameInstance.tourActuel().resetTourPasser();\t\t\t\t\tfor (int a = 0; a < listeCases.size(); a++) {\t\t\t\t\t\t((Text) ((Case) listeCases.get(a)).getChildren().get(1)).setText((String) listeTexte.get(a));\t\t\t\t\t\t((Rectangle) ((Case) listeCases.get(a)).getChildren().get(0)).setFill(Color.SEAGREEN);\t\t\t\t\t}\t\t\t\t\ttest.acceuilgauche.getChildren().remove(2);\t\t\t\t\ttest.initchevalet(test.sologameInstance.tourActuel().getMain());\t\t\t\t\ttest.acceuilgauche.getChildren().add(test.chevalet);\t\t\t\t\t//((ImageView) test.acceuildroite.getChildren().get(9)).setImage(new Image(\"Images/user.png\"));\t\t\t\t\t//((ImageView) test.acceuildroite.getChildren().get(10)).setImage(new Image(\"Images/bot.png\"));\t\t\t\t\t// changement de tour\t\t\t\t\tjoueur1.terminerTour();\t\t\t\t\tjoueur2.commencerTour();\t\t\t\t\tjoueur1 = test.sologameInstance.adversaireActuel();\t\t\t\t\tjoueur2 = test.sologameInstance.tourActuel();\t\t\t\t\t// Partie IA\t\t\t\t\tIajoue().setOnSucceeded(new EventHandler<WorkerStateEvent>() {\t\t\t\t        @Override\t\t\t\t        public void handle(WorkerStateEvent t)\t\t\t\t        {\t\t\t\t        \tfor(Node a:test.acceuildroite.getChildren()) {\t\t\t\t                if(a.getClass().equals(Button.class)) {\t\t\t\t                    a.setDisable(false);\t\t\t\t                }\t\t\t\t            }\t\t\t\t    \t\ttest.acceuilgauche.getChildren().get(2).setDisable(false);\t\t\t\t        \tjoueur2.terminerTour();\t\t\t\t\t\t\tjoueur1.commencerTour();\t\t\t\t\t\t\tjoueur2 = test.sologameInstance.adversaireActuel();\t\t\t\t\t\t\tjoueur1 = test.sologameInstance.tourActuel();\t\t\t\t\t\t\ttest.acceuilgauche.getChildren().remove(2);\t\t\t\t\t\t\ttest.initchevalet(test.sologameInstance.tourActuel().getMain());\t\t\t\t\t\t\ttest.acceuilgauche.getChildren().add(test.chevalet);\t\t\t\t\t\t\tnj1.setText(test.sologameInstance.tourActuel().verifierNom());\t\t\t\t\t\t\tnj2.setText(test.sologameInstance.adversaireActuel().verifierNom());\t\t\t\t\t\t\tscore1.setText(String.valueOf(test.sologameInstance.tourActuel().verifierScore()));\t\t\t\t\t\t\tscore2.setText(String.valueOf(test.sologameInstance.adversaireActuel().verifierScore()));\t\t\t\t        }\t\t\t\t    });\t\t\t\t} // mot pas bon\t\t\t\telse {\t\t\t\t\tAlert pabon = new Alert(AlertType.INFORMATION);\t\t\t\t\tpabon.setContentText(\"Attention le mot est invalide\");\t\t\t\t\tpabon.showAndWait();\t\t\t\t\t// test.music(\"no\");\t\t\t\t}\t\t\t\t}\t\t\t\telse {\t\t\t\t\tAlert pabon = new Alert(AlertType.INFORMATION);\t\t\t\t\tpabon.setContentText(\"Attention le mot est invalide\");\t\t\t\t\tpabon.showAndWait();\t\t\t\t}\t\t\t} else {\t\t\t\tAlert pabon = new Alert(AlertType.INFORMATION);\t\t\t\tpabon.setContentText(\"Vous n'avez pas plac\u00e9 de lettre\");\t\t\t\tpabon.showAndWait();\t\t\t}\t\t}\t\tif (Fini) {\t\t\tquitter(event);\t\t}\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Partiecontrol.java", "stars": "4", "class": {"name": "Partiecontrol", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "Iajoue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Task", "snippet": "\tpublic Task Iajoue() {\t\t// Partie IA\t\tTask<Void> task = new Task<Void>() {\t\t\t@Override\t\t\tpublic Void call() {\t\t\t\tfor(Node a:test.acceuildroite.getChildren()) {\t\t            if(a.getClass().equals(Button.class)) {\t\t                a.setDisable(true);\t\t            }\t\t        }\t\t\t\ttest.acceuilgauche.getChildren().get(2).setDisable(true);\t\t\t\tupdateProgress(0, 100);\t\t\t\tupdateProgress(30, 100);\t\t\t\tMot ia = test.sologameInstance.getBestMove();\t\t\t\tupdateProgress(50, 100);\t\t\t\tif (ia != null) {// L'ia joue un mot\t\t\t\t\tint[] mot = ia.getLettres();\t\t\t\t\tboolean horizontale = ia.verifierHorizontal();\t\t\t\t\tint xPos = ia.verifierX();\t\t\t\t\tint yPos = ia.verifierY();\t\t\t\t\tif (test.sologameInstance.proceedWithAction(test.sologameInstance.tourActuel(), mot, xPos, yPos,\t\t\t\t\t\t\thorizontale)) {\t\t\t\t\t\tupdateProgress(70, 100);\t\t\t\t\t\ttest.sologameInstance.tourActuel().resetTourPasser();\t\t\t\t\t\tif (test.sologameInstance.asGagne()) {\t\t\t\t\t\t\tFini = true;\t\t\t\t\t\t}\t\t\t\t\t\tint x = 0;\t\t\t\t\t\tint y = 0;\t\t\t\t\t\tfor (int a = 0; a < mot.length; a++) {\t\t\t\t\t\t\t((Case) ((Group) test.acceuilgauche.getChildren().get(0)).getChildren()\t\t\t\t\t\t\t\t\t.get((yPos + y) * 15 + (xPos + x))).lettre\t\t\t\t\t\t\t\t\t\t\t.setText(Character.toString((char) mot[a]).toUpperCase());\t\t\t\t\t\t\t((Case) ((Group) test.acceuilgauche.getChildren().get(0)).getChildren()\t\t\t\t\t\t\t\t\t.get((yPos + y) * 15 + (xPos + x))).rectangle.setFill(Color.SEAGREEN);\t\t\t\t\t\t\t((Case) ((Group) test.acceuilgauche.getChildren().get(0)).getChildren()\t\t\t\t\t\t\t\t\t.get((yPos + y) * 15 + (xPos + x))).rectangle.setId(\"true\");\t\t\t\t\t\t\tif (horizontale) {\t\t\t\t\t\t\t\ty += 1;\t\t\t\t\t\t\t} else {\t\t\t\t\t\t\t\tx += 1;\t\t\t\t\t\t\t}\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t\tupdateProgress(80, 100);\t\t\t\t} else {// L'ia jette sa main\t\t\t\t\tif (test.sologameInstance.lettresRestant() > 0) { // si il reste des lettres dans la pioche on\t\t\t\t\t\ttest.sologameInstance.tourActuel().resetTourPasser();\t\t\t\t\t\tfor (int i = 0; i < test.sologameInstance.tourActuel().verifierMain().length; i++)\t\t\t\t\t\t\ttest.sologameInstance.tourActuel().jeterLettre(i, test.sologameInstance.getNombreLettre());\t\t\t\t\t} else {// fin de partie\t\t\t\t\t\ttest.sologameInstance.tourActuel().incrementTourPasser();\t\t\t\t\t}\t\t\t\t}\t\t\t\tupdateProgress(100, 100);\t\t\t\treturn null;\t\t\t}\t\t};\t\tcomputing.progressProperty().bind(task.progressProperty());\t\tThread th = new Thread(task);\t\tth.setDaemon(true);\t\tth.start();\t\treturn task;\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Partiecontrol.java", "stars": "4", "class": {"name": "Partiecontrol", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "anulTab", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void anulTab() {\t\tfor(Node a:((Group)test.acceuilgauche.getChildren().get(2)).getChildren()) {\t\t\tif(a.getClass().equals(Rectangle.class)) {\t\t\t\tif(((Rectangle)a).getFill().equals(Color.LIGHTGREEN)) {\t\t\t\t\tif(a.getId()!=null) {\t\t\t\t\t\tint pos=Integer.parseInt(a.getId());\t\t\t\t\t\t((Case)((Group)test.acceuilgauche.getChildren().get(0)).getChildren().get(pos)).getChildren().get(0).setId(\"false\");\t\t\t\t\t}\t\t\t\t}\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Partiecontrol.java", "stars": "4", "class": {"name": "Partiecontrol", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "jete", "params": ["ActionEvent"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\tvoid jete(ActionEvent event) {\t\t// selection non vide\t\tanulTab();\t\tif (jeter.getText().equals(\"Jeter Lettres\")) {\t\t\tif (test.sologameInstance == null) {\t\t\t\tif (test.gameInstance.getNombreLettre().size() < test.selection.size()) {\t\t\t\t\tAlert restant = new Alert(AlertType.INFORMATION);\t\t\t\t\trestant.setContentText(\"Attention, il n'y a pas assez de lettres\");\t\t\t\t\trestant.showAndWait();\t\t\t\t} else {\t\t\t\t\tfor (int i = 0; i < test.selection.size(); i++) {\t\t\t\t\t\ttest.gameInstance.tourActuel().jeterLettre(test.selection.get(i),\t\t\t\t\t\t\t\ttest.gameInstance.getNombreLettre());\t\t\t\t\t}\t\t\t\t\ttest.gameInstance.tourActuel().resetTourPasser();\t\t\t\t\tif (joueur1.verifierTour()) {\t\t\t\t\t\tjoueur1.terminerTour();\t\t\t\t\t\tjoueur2.commencerTour();\t\t\t\t\t\tjoueur1 = test.gameInstance.adversaireActuel();\t\t\t\t\t\tjoueur2 = test.gameInstance.tourActuel();\t\t\t\t\t} else {\t\t\t\t\t\tjoueur2.terminerTour();\t\t\t\t\t\tjoueur1.commencerTour();\t\t\t\t\t\tjoueur2 = test.gameInstance.adversaireActuel();\t\t\t\t\t\tjoueur1 = test.gameInstance.tourActuel();\t\t\t\t\t}\t\t\t\t}\t\t\t}\t\t\t// solo\t\t\telse {\t\t\t\tif (test.sologameInstance.getNombreLettre().size() < test.selection.size()) {\t\t\t\t\tAlert restant = new Alert(AlertType.INFORMATION);\t\t\t\t\trestant.setContentText(\"Attention, il n'y a pas assez de lettres\");\t\t\t\t\trestant.showAndWait();\t\t\t\t} else {\t\t\t\t\tfor (int i = 0; i < test.selection.size(); i++) {\t\t\t\t\t\ttest.sologameInstance.tourActuel().jeterLettre(test.selection.get(i),\t\t\t\t\t\t\t\ttest.sologameInstance.getNombreLettre());\t\t\t\t\t}\t\t\t\t\ttest.sologameInstance.tourActuel().resetTourPasser();\t\t\t\t\tjoueur1.terminerTour();\t\t\t\t\tjoueur2.commencerTour();\t\t\t\t\tjoueur1 = test.sologameInstance.adversaireActuel();\t\t\t\t\tjoueur2 = test.sologameInstance.tourActuel();\t\t\t\t\tIajoue().setOnSucceeded(new EventHandler<WorkerStateEvent>() {\t\t\t\t        @Override\t\t\t\t        public void handle(WorkerStateEvent t)\t\t\t\t        {\t\t\t\t        \tfor(Node a:test.acceuildroite.getChildren()) {\t\t\t\t                if(a.getClass().equals(Button.class)) {\t\t\t\t                    a.setDisable(false);\t\t\t\t                }\t\t\t\t            }\t\t\t\t    \t\ttest.acceuilgauche.getChildren().get(2).setDisable(false);\t\t\t\t        \tjoueur2.terminerTour();\t\t\t\t\t\t\tjoueur1.commencerTour();\t\t\t\t\t\t\tjoueur2 = test.sologameInstance.adversaireActuel();\t\t\t\t\t\t\tjoueur1 = test.sologameInstance.tourActuel();\t\t\t\t\t\t\ttest.acceuilgauche.getChildren().remove(2);\t\t\t\t\t\t\ttest.initchevalet(test.sologameInstance.tourActuel().getMain());\t\t\t\t\t\t\ttest.acceuilgauche.getChildren().add(test.chevalet);\t\t\t\t\t\t\tnj1.setText(test.sologameInstance.tourActuel().verifierNom());\t\t\t\t\t\t\tnj2.setText(test.sologameInstance.adversaireActuel().verifierNom());\t\t\t\t\t\t\tscore1.setText(String.valueOf(test.sologameInstance.tourActuel().verifierScore()));\t\t\t\t\t\t\tscore2.setText(String.valueOf(test.sologameInstance.adversaireActuel().verifierScore()));\t\t\t\t        }\t\t\t\t    });\t\t\t\t}\t\t\t}\t\t} else {\t\t\tif (joueur1.tourPasser >= 3 && joueur2.tourPasser >= 3) {\t\t\t\tif (test.sologameInstance == null) {\t\t\t\t\tif (test.gameInstance.getNombreLettre().size() != 0) {\t\t\t\t\t\tAlert restant = new Alert(AlertType.INFORMATION);\t\t\t\t\t\trestant.setHeaderText(null);\t\t\t\t\t\trestant.setContentText(\"Veuillez jouer ou changer de lettres, il y en a encore \"\t\t\t\t\t\t\t\t+ test.gameInstance.getNombreLettre().size());\t\t\t\t\t\trestant.showAndWait();\t\t\t\t\t} else {\t\t\t\t\t\tFini = true;\t\t\t\t\t}\t\t\t\t} else {\t\t\t\t\tif (test.sologameInstance.getNombreLettre().size() != 0) {\t\t\t\t\t\tAlert restant = new Alert(AlertType.INFORMATION);\t\t\t\t\t\trestant.setHeaderText(null);\t\t\t\t\t\trestant.setContentText(\"Veuillez jouer ou changer de lettres, il y en a encore \"\t\t\t\t\t\t\t\t+ test.sologameInstance.getNombreLettre().size());\t\t\t\t\t\trestant.showAndWait();\t\t\t\t\t} else {\t\t\t\t\t\tFini = true;\t\t\t\t\t}\t\t\t\t}\t\t\t} else {\t\t\t\tif (test.sologameInstance == null) {\t\t\t\t\ttest.gameInstance.tourActuel().incrementTourPasser();\t\t\t\t\tif (joueur1.verifierTour()) {\t\t\t\t\t\tjoueur1.terminerTour();\t\t\t\t\t\tjoueur2.commencerTour();\t\t\t\t\t\tjoueur1 = test.gameInstance.adversaireActuel();\t\t\t\t\t\tjoueur2 = test.gameInstance.tourActuel();\t\t\t\t\t} else {\t\t\t\t\t\tjoueur2.terminerTour();\t\t\t\t\t\tjoueur1.commencerTour();\t\t\t\t\t\tjoueur2 = test.gameInstance.adversaireActuel();\t\t\t\t\t\tjoueur1 = test.gameInstance.tourActuel();\t\t\t\t\t}\t\t\t\t} else {\t\t\t\t\ttest.sologameInstance.tourActuel().incrementTourPasser();\t\t\t\t\tjoueur1.terminerTour();\t\t\t\t\tjoueur2.commencerTour();\t\t\t\t\tjoueur1 = test.sologameInstance.adversaireActuel();\t\t\t\t\tjoueur2 = test.sologameInstance.tourActuel();\t\t\t\t\tIajoue().setOnSucceeded(new EventHandler<WorkerStateEvent>() {\t\t\t\t        @Override\t\t\t\t        public void handle(WorkerStateEvent t)\t\t\t\t        {\t\t\t\t        \tfor(Node a:test.acceuildroite.getChildren()) {\t\t\t\t                if(a.getClass().equals(Button.class)) {\t\t\t\t                    a.setDisable(false);\t\t\t\t                }\t\t\t\t            }\t\t\t\t    \t\ttest.acceuilgauche.getChildren().get(2).setDisable(false);\t\t\t\t        \tjoueur2.terminerTour();\t\t\t\t\t\t\tjoueur1.commencerTour();\t\t\t\t\t\t\tjoueur2 = test.sologameInstance.adversaireActuel();\t\t\t\t\t\t\tjoueur1 = test.sologameInstance.tourActuel();\t\t\t\t\t\t\ttest.acceuilgauche.getChildren().remove(2);\t\t\t\t\t\t\ttest.initchevalet(test.sologameInstance.tourActuel().getMain());\t\t\t\t\t\t\ttest.acceuilgauche.getChildren().add(test.chevalet);\t\t\t\t\t\t\tnj1.setText(test.sologameInstance.tourActuel().verifierNom());\t\t\t\t\t\t\tnj2.setText(test.sologameInstance.adversaireActuel().verifierNom());\t\t\t\t\t\t\tscore1.setText(String.valueOf(test.sologameInstance.tourActuel().verifierScore()));\t\t\t\t\t\t\tscore2.setText(String.valueOf(test.sologameInstance.adversaireActuel().verifierScore()));\t\t\t\t        }\t\t\t\t    });\t\t\t\t}\t\t\t}\t\t}\t\tif (test.sologameInstance == null) {\t\t\ttest.acceuilgauche.getChildren().remove(2);\t\t\ttest.initchevalet(test.gameInstance.tourActuel().getMain());\t\t\ttest.acceuilgauche.getChildren().add(test.chevalet);\t\t\tnj1.setText(test.gameInstance.tourActuel().verifierNom());\t\t\tnj2.setText(test.gameInstance.adversaireActuel().verifierNom());\t\t\tscore1.setText(String.valueOf(test.gameInstance.tourActuel().verifierScore()));\t\t\tscore2.setText(String.valueOf(test.gameInstance.adversaireActuel().verifierScore()));\t\t} else {\t\t}\t\tif (Fini) {\t\t\tquitter(event);\t\t}\t\tsuggestionmain.getItems().clear();\t\ttest.selection.clear();\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Partiecontrol.java", "stars": "4", "class": {"name": "Partiecontrol", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSens", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\t\tpublic String getSens() {\t\t\treturn Sens;\t\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Partiecontrol.java", "stars": "4", "class": {"name": "Suggestion", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSens", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void setSens(String sens) {\t\t\tSens = sens;\t\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Partiecontrol.java", "stars": "4", "class": {"name": "Suggestion", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getScore", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "\t\tpublic Integer getScore() {\t\t\treturn Score;\t\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Partiecontrol.java", "stars": "4", "class": {"name": "Suggestion", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setScore", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void setScore(Integer score) {\t\t\tScore = score;\t\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Partiecontrol.java", "stars": "4", "class": {"name": "Suggestion", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPosx", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "\t\tpublic Integer getPosx() {\t\t\treturn Posx;\t\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Partiecontrol.java", "stars": "4", "class": {"name": "Suggestion", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPosx", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void setPosx(Integer xx) {\t\t\tthis.Posx = xx;\t\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Partiecontrol.java", "stars": "4", "class": {"name": "Suggestion", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMot", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\t\tpublic String getMot() {\t\t\treturn Mot;\t\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Partiecontrol.java", "stars": "4", "class": {"name": "Suggestion", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMot", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void setMot(String mot) {\t\t\tthis.Mot = mot;\t\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Partiecontrol.java", "stars": "4", "class": {"name": "Suggestion", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPosy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "\t\tpublic Integer getPosy() {\t\t\treturn Posy;\t\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Partiecontrol.java", "stars": "4", "class": {"name": "Suggestion", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPosy", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void setPosy(Integer yy) {\t\t\tthis.Posy = yy;\t\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Partiecontrol.java", "stars": "4", "class": {"name": "Suggestion", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "configure", "params": ["SpringApplicationBuilder"], "throws": null, "modifiers": ["protected"], "return_type": "SpringApplicationBuilder", "snippet": "    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {        /**         * set a default to use when no profile is configured.         */        DefaultProfileUtil.addDefaultProfile(application.application());        return application.sources(GardleApp.class);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/ApplicationWebXml.java", "stars": "2", "class": {"name": "ApplicationWebXml", "extends": "SpringBootServletInitializer", "implements": null, "modifiers": ["public"]}}, {"method_name": "fastJsonHttpMessageConverter", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "FastJsonHttpMessageConverter", "snippet": "    public static FastJsonHttpMessageConverter fastJsonHttpMessageConverter() {        logger.info(\"fastJsonHttpMessageConverter........\");        FastJsonHttpMessageConverter fastJsonHttpMessageConverter = new FastJsonHttpMessageConverter();        List<MediaType> supportedMediaTypes = new ArrayList<MediaType>();        supportedMediaTypes.add(MediaType.parseMediaType(\"text/plain;charset=utf-8\"));        supportedMediaTypes.add(MediaType.parseMediaType(\"text/html;charset=utf-8\"));        supportedMediaTypes.add(MediaType.parseMediaType(\"text/json;charset=utf-8\"));        supportedMediaTypes.add(MediaType.parseMediaType(\"application/json;charset=utf-8\"));        supportedMediaTypes.add(MediaType.parseMediaType(\"text/html;charset=utf-8\"));        supportedMediaTypes.add(MediaType.parseMediaType(\"*\"));        fastJsonHttpMessageConverter.setSupportedMediaTypes(supportedMediaTypes);        fastJsonHttpMessageConverter.setFastJsonConfig(getFastJsonConfig());        return fastJsonHttpMessageConverter;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/fastJson/BaseFastJsonConfig.java", "stars": "7", "class": {"name": "BaseFastJsonConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFastJsonConfig", "params": [], "throws": null, "modifiers": ["private", "static"], "return_type": "FastJsonConfig", "snippet": "    private static FastJsonConfig getFastJsonConfig() {        logger.info(\"getFastJsonConfig.....\");        FastJsonConfig fastJsonConfig = new FastJsonConfig();        //serializerFeatureList\u4e2d\u6dfb\u52a0\u8f6c\u6362\u89c4\u5219        List<SerializerFeature> serializerFeatureList = new ArrayList<SerializerFeature>();        //\u8f93\u51fakey\u65f6\u662f\u5426\u4f7f\u7528\u53cc\u5f15\u53f7        serializerFeatureList.add(SerializerFeature.QuoteFieldNames);        //\u662f\u5426\u8f93\u51fa\u503c\u4e3anull\u7684\u5b57\u6bb5        serializerFeatureList.add(SerializerFeature.WriteMapNullValue);        //\u6570\u503c\u5b57\u6bb5\u5982\u679c\u4e3anull,\u8f93\u51fa\u4e3a0,\u800c\u975enull        serializerFeatureList.add(SerializerFeature.WriteNullNumberAsZero);        //List\u5b57\u6bb5\u5982\u679c\u4e3anull,\u8f93\u51fa\u4e3a[],\u800c\u975enull        serializerFeatureList.add(SerializerFeature.WriteNullListAsEmpty);        //\u5b57\u7b26\u7c7b\u578b\u5b57\u6bb5\u5982\u679c\u4e3anull,\u8f93\u51fa\u4e3a\"\",\u800c\u975enull        serializerFeatureList.add(SerializerFeature.WriteNullStringAsEmpty);        //Boolean\u5b57\u6bb5\u5982\u679c\u4e3anull,\u8f93\u51fa\u4e3afalse,\u800c\u975enull        serializerFeatureList.add(SerializerFeature.WriteNullBooleanAsFalse);        //null String\u4e0d\u8f93\u51fa        serializerFeatureList.add(SerializerFeature.WriteNullStringAsEmpty);        //Date\u7684\u65e5\u671f\u8f6c\u6362\u5668        serializerFeatureList.add(SerializerFeature.WriteDateUseDateFormat);        SerializerFeature[] serializerFeatures =                serializerFeatureList.toArray(new SerializerFeature[serializerFeatureList.size()]);        fastJsonConfig.setSerializerFeatures(serializerFeatures);        fastJsonConfig.setSerializeConfig(new CustomSerializeConfig());        ParserConfig.getGlobalInstance().putDeserializer(StatusCode.class, new StatusCodeDeserializer());        ParserConfig.getGlobalInstance().addAccept(\"com.cgb.dp.common.entity\");        fastJsonConfig.getParserConfig().setAutoTypeSupport(true);        return fastJsonConfig;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-common/src/main/java/com/cgb/bcpinstall/common/fastJson/BaseFastJsonConfig.java", "stars": "7", "class": {"name": "BaseFastJsonConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["android", "android", "android"], "throws": null, "modifiers": ["public"], "return_type": "android", "snippet": "\tpublic android.view.View onCreateView (android.view.LayoutInflater p0, android.view.ViewGroup p1, android.os.Bundle p2)\t{\t\treturn n_onCreateView (p0, p1, p2);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PageExtensions_EmbeddedFragment.java", "stars": "2", "class": {"name": "PageExtensions_EmbeddedFragment", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onCreateView", "params": ["android", "android", "android"], "throws": null, "modifiers": ["native", "private"], "return_type": "android", "snippet": "\tprivate native android.view.View n_onCreateView (android.view.LayoutInflater p0, android.view.ViewGroup p1, android.os.Bundle p2);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PageExtensions_EmbeddedFragment.java", "stars": "2", "class": {"name": "PageExtensions_EmbeddedFragment", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PageExtensions_EmbeddedFragment.java", "stars": "2", "class": {"name": "PageExtensions_EmbeddedFragment", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/PageExtensions_EmbeddedFragment.java", "stars": "2", "class": {"name": "PageExtensions_EmbeddedFragment", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "doPost", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": ["javax.servlet.ServletException", "IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws javax.servlet.ServletException, IOException {        request.setCharacterEncoding(\"utf-8\");        response.setCharacterEncoding(\"utf-8\");        String sno = request.getParameter(\"sno\");        String name = request.getParameter(\"name\");        Student student = new Student(sno, name);        request.setAttribute(\"student\", student);        request.getRequestDispatcher(\"/secondServlet\").forward(request, response);    }", "url": "https://raw.githubusercontent.com/Nightnessss/web-homework/master/homework01/src/com/fehead/FirstServlet.java", "stars": "4", "class": {"name": "FirstServlet", "extends": "HttpServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": ["javax.servlet.ServletException", "IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws javax.servlet.ServletException, IOException {    }", "url": "https://raw.githubusercontent.com/Nightnessss/web-homework/master/homework01/src/com/fehead/FirstServlet.java", "stars": "4", "class": {"name": "FirstServlet", "extends": "HttpServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCommand", "params": ["CommandSender", "Command", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {        if (args.length != 2) {            sender.sendMessage(ChatColor.RED + \"Please specify a player & a group!\");            return true;        }        String playerName = args[0];        String groupName = args[1];        // Get an OfflinePlayer object for the player        OfflinePlayer player = this.plugin.getServer().getOfflinePlayer(playerName);        // Player not known?        if (player == null) {            sender.sendMessage(ChatColor.RED + playerName +  \" has never joined the server!\");            return true;        }        // Get a group object for the group name.        Group group = this.luckPerms.getGroupManager().getGroup(groupName);        // Group doesn't exist?        if (group == null) {            sender.sendMessage(ChatColor.RED + groupName +  \" does not exist!\");            return true;        }        // Load, modify & save the user in LuckPerms.        this.luckPerms.getUserManager().modifyUser(player.getUniqueId(), (User user) -> {            // Remove all other inherited groups the user had before.            user.data().clear(NodeType.INHERITANCE::matches);            // Create a node to add to the player.            Node node = InheritanceNode.builder(group).build();            // Add the node to the user.            user.data().add(node);            // Tell the sender.            sender.sendMessage(ChatColor.RED + user.getUsername() + \" is now in group \" + group.getDisplayName());        });        return true;    }", "url": "https://raw.githubusercontent.com/LuckPerms/api-cookbook/master/src/main/java/me/lucko/lpcookbook/commands/SetGroupCommand.java", "stars": "1", "class": {"name": "SetGroupCommand", "extends": null, "implements": ["CommandExecutor"], "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getId() {    return id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/UserWithGetObjectWithoutInterface.java", "stars": "15", "class": {"name": "UserWithGetObjectWithoutInterface", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setId(Integer id) {    this.id = id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/UserWithGetObjectWithoutInterface.java", "stars": "15", "class": {"name": "UserWithGetObjectWithoutInterface", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getName() {    return name;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/UserWithGetObjectWithoutInterface.java", "stars": "15", "class": {"name": "UserWithGetObjectWithoutInterface", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setName(String name) {    this.name = name;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/UserWithGetObjectWithoutInterface.java", "stars": "15", "class": {"name": "UserWithGetObjectWithoutInterface", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOwner", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Group", "snippet": "  public Group getOwner() {    return owner;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/UserWithGetObjectWithoutInterface.java", "stars": "15", "class": {"name": "UserWithGetObjectWithoutInterface", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOwner", "params": ["Group"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setOwner(Group owner) {    this.owner = owner;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/UserWithGetObjectWithoutInterface.java", "stars": "15", "class": {"name": "UserWithGetObjectWithoutInterface", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getObject", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getObject() {    return null;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/UserWithGetObjectWithoutInterface.java", "stars": "15", "class": {"name": "UserWithGetObjectWithoutInterface", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init() {        try {            if (!directory.exists())                directory.mkdir();            String title = String.format(\"%s %s | 1.12.2\", getName(), getVersion());            Display.setTitle(title);            propertyManager.load();            moduleManager = new ModuleManager(new File(directory, \"modules\"));            moduleManager.load();            componentManager = new ComponentManager(new File(directory, \"hud\"));            componentManager.load();            friendManager.setDirectory(new File(directory, \"friends.json\"));            friendManager.load();            commandManager.load();            smallTextManager.load();            profileManager.load();            tickRateManager.load();            Runtime.getRuntime().addShutdownHook(new Thread(this::shutdown));        } catch (Exception e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/Mercury.java", "stars": "12", "class": {"name": "Mercury", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shutdown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void shutdown() {        moduleManager.unload();        componentManager.unload();        friendManager.unload();        tickRateManager.unload();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/Mercury.java", "stars": "12", "class": {"name": "Mercury", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return NAME;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/Mercury.java", "stars": "12", "class": {"name": "Mercury", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getVersion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getVersion() {        return VERSION;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/Mercury.java", "stars": "12", "class": {"name": "Mercury", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDirectory", "params": [], "throws": null, "modifiers": ["public"], "return_type": "File", "snippet": "    public File getDirectory() {        return this.directory;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/Mercury.java", "stars": "12", "class": {"name": "Mercury", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPropertyManager", "params": [], "throws": null, "modifiers": ["public"], "return_type": "PropertyManager", "snippet": "    public PropertyManager getPropertyManager() {        return this.propertyManager;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/Mercury.java", "stars": "12", "class": {"name": "Mercury", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEventManager", "params": [], "throws": null, "modifiers": ["public"], "return_type": "EventManager<Event>", "snippet": "    public EventManager<Event> getEventManager() {        return this.eventManager;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/Mercury.java", "stars": "12", "class": {"name": "Mercury", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getModuleManager", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ModuleManager", "snippet": "    public ModuleManager getModuleManager() {        return this.moduleManager;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/Mercury.java", "stars": "12", "class": {"name": "Mercury", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHudManager", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ComponentManager", "snippet": "    public ComponentManager getHudManager() {        return this.componentManager;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/Mercury.java", "stars": "12", "class": {"name": "Mercury", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCommandManager", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CommandManager", "snippet": "    public CommandManager getCommandManager() {        return this.commandManager;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/Mercury.java", "stars": "12", "class": {"name": "Mercury", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFriendManager", "params": [], "throws": null, "modifiers": ["public"], "return_type": "FriendManager", "snippet": "    public FriendManager getFriendManager() {        return this.friendManager;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/Mercury.java", "stars": "12", "class": {"name": "Mercury", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTickRateManager", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TickRateManager", "snippet": "    public TickRateManager getTickRateManager() {        return this.tickRateManager;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/Mercury.java", "stars": "12", "class": {"name": "Mercury", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProfileManager", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ProfileManager", "snippet": "    public ProfileManager getProfileManager() {        return this.profileManager;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/Mercury.java", "stars": "12", "class": {"name": "Mercury", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSmallTextManager", "params": [], "throws": null, "modifiers": ["public"], "return_type": "SmallTextManager", "snippet": "    public SmallTextManager getSmallTextManager() {        return this.smallTextManager;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/Mercury.java", "stars": "12", "class": {"name": "Mercury", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTranslationManager", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TranslationManager", "snippet": "    public TranslationManager getTranslationManager() {        return this.translationManager;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/Mercury.java", "stars": "12", "class": {"name": "Mercury", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isDebugEnabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isDebugEnabled() {    return log.isDebugEnabled();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/log4j2/Log4j2AbstractLoggerImpl.java", "stars": "15", "class": {"name": "Log4j2AbstractLoggerImpl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "isTraceEnabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isTraceEnabled() {    return log.isTraceEnabled();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/log4j2/Log4j2AbstractLoggerImpl.java", "stars": "15", "class": {"name": "Log4j2AbstractLoggerImpl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "error", "params": ["String", "Throwable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void error(String s, Throwable e) {    log.logIfEnabled(FQCN, Level.ERROR, MARKER, (Message) new SimpleMessage(s), e);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/log4j2/Log4j2AbstractLoggerImpl.java", "stars": "15", "class": {"name": "Log4j2AbstractLoggerImpl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "error", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void error(String s) {    log.logIfEnabled(FQCN, Level.ERROR, MARKER, (Message) new SimpleMessage(s), null);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/log4j2/Log4j2AbstractLoggerImpl.java", "stars": "15", "class": {"name": "Log4j2AbstractLoggerImpl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "debug", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void debug(String s) {    log.logIfEnabled(FQCN, Level.DEBUG, MARKER, (Message) new SimpleMessage(s), null);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/log4j2/Log4j2AbstractLoggerImpl.java", "stars": "15", "class": {"name": "Log4j2AbstractLoggerImpl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "trace", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void trace(String s) {    log.logIfEnabled(FQCN, Level.TRACE, MARKER, (Message) new SimpleMessage(s), null);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/log4j2/Log4j2AbstractLoggerImpl.java", "stars": "15", "class": {"name": "Log4j2AbstractLoggerImpl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "warn", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void warn(String s) {    log.logIfEnabled(FQCN, Level.WARN, MARKER, (Message) new SimpleMessage(s), null);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/logging/log4j2/Log4j2AbstractLoggerImpl.java", "stars": "15", "class": {"name": "Log4j2AbstractLoggerImpl", "extends": null, "implements": ["Log"], "modifiers": ["public"]}}, {"method_name": "onProgressChanged", "params": ["SeekBar", "int", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {    if (progress == 0) {      width = 0;      height = 0;      framerate = 0;      captureFormatText.setText(R.string.muted);      return;    }    // Extract max bandwidth (in millipixels / second).    long maxCaptureBandwidth = java.lang.Long.MIN_VALUE;    for (CaptureFormat format : formats) {      maxCaptureBandwidth =          Math.max(maxCaptureBandwidth, (long) format.width * format.height * format.framerate.max);    }    // Fraction between 0 and 1.    double bandwidthFraction = (double) progress / 100.0;    // Make a log-scale transformation, still between 0 and 1.    final double kExpConstant = 3.0;    bandwidthFraction =        (Math.exp(kExpConstant * bandwidthFraction) - 1) / (Math.exp(kExpConstant) - 1);    targetBandwidth = bandwidthFraction * maxCaptureBandwidth;    // Choose the best format given a target bandwidth.    final CaptureFormat bestFormat = Collections.max(formats, compareFormats);    width = bestFormat.width;    height = bestFormat.height;    framerate = calculateFramerate(targetBandwidth, bestFormat);    captureFormatText.setText(        String.format(captureFormatText.getContext().getString(R.string.format_description), width,            height, framerate));  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CaptureQualityController.java", "stars": "2", "class": {"name": "CaptureQualityController", "extends": null, "implements": ["SeekBar"], "modifiers": ["public"]}}, {"method_name": "onStartTrackingTouch", "params": ["SeekBar"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onStartTrackingTouch(SeekBar seekBar) {}", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CaptureQualityController.java", "stars": "2", "class": {"name": "CaptureQualityController", "extends": null, "implements": ["SeekBar"], "modifiers": ["public"]}}, {"method_name": "onStopTrackingTouch", "params": ["SeekBar"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void onStopTrackingTouch(SeekBar seekBar) {    callEvents.onCaptureFormatChange(width, height, framerate);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CaptureQualityController.java", "stars": "2", "class": {"name": "CaptureQualityController", "extends": null, "implements": ["SeekBar"], "modifiers": ["public"]}}, {"method_name": "calculateFramerate", "params": ["double", "CaptureFormat"], "throws": null, "modifiers": ["private"], "return_type": "int", "snippet": "  private int calculateFramerate(double bandwidth, CaptureFormat format) {    return (int) Math.round(        Math.min(format.framerate.max, (int) Math.round(bandwidth / (format.width * format.height)))        / 1000.0);  }", "url": "https://raw.githubusercontent.com/agent10/androidwebrtcexample/master/app/src/main/java/org/appspot/apprtc/CaptureQualityController.java", "stars": "2", "class": {"name": "CaptureQualityController", "extends": null, "implements": ["SeekBar"], "modifiers": ["public"]}}, {"method_name": "getLabel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getLabel() {        return this.label;    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/Panel.java", "stars": "12", "class": {"name": "Panel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "draw", "params": ["int", "int", "float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void draw(int mouseY, int mouseX, float partialTicks) {}", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/Panel.java", "stars": "12", "class": {"name": "Panel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "mouseClicked", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void mouseClicked(final int mouseX, final int mouseY, final int mouseButton) {}", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/Panel.java", "stars": "12", "class": {"name": "Panel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "keyTyped", "params": ["char", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void keyTyped(final char typedChar, final int keyCode) {}", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/Panel.java", "stars": "12", "class": {"name": "Panel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "mouseReleased", "params": ["int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void mouseReleased(final int mouseX, final int mouseY, final int state) {}", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/Panel.java", "stars": "12", "class": {"name": "Panel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onGuiClosed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onGuiClosed() {}", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/gui/click/panel/Panel.java", "stars": "12", "class": {"name": "Panel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "checkTemplate", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean checkTemplate(String templateName) {        return this.engine.checkTemplate(templateName);    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/template/JetTemplateHelper.java", "stars": "2", "class": {"name": "JetTemplateHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parse", "params": ["String", "Map<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String parse(String templateName, Map<String, Object> context) {        var template = engine.getTemplate(templateName);        return templateToString(template, context);    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/template/JetTemplateHelper.java", "stars": "2", "class": {"name": "JetTemplateHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseSource", "params": ["String", "Map<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String parseSource(String source, Map<String, Object> context) {        var engine = JetEngine.create();        var template = engine.createTemplate(source);        return templateToString(template, context);    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/template/JetTemplateHelper.java", "stars": "2", "class": {"name": "JetTemplateHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "templateToString", "params": ["JetTemplate", "Map<String,Object>"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String templateToString(JetTemplate template, Map<String, Object> context) {        try (StringWriter writer = new StringWriter()) {            template.render(context, writer);            return writer.toString();        } catch (IOException e) {            e.printStackTrace();        }        return StrUtil.EMPTY;    }", "url": "https://raw.githubusercontent.com/Heemooo/Bored/master/src/main/java/com/bored/template/JetTemplateHelper.java", "stars": "2", "class": {"name": "JetTemplateHelper", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate() {        super.onCreate();        application=this;        initSDK(this);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyApplication.java", "stars": "1", "class": {"name": "MyApplication", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getApplication", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "MyApplication", "snippet": "    public static MyApplication getApplication() {        return application;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyApplication.java", "stars": "1", "class": {"name": "MyApplication", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "initSDK", "params": ["Application"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void initSDK(Application application) {        // \u53cb\u76df\u7edf\u8ba1\u3001\u767b\u5f55\u3001\u5206\u4eab SDK        UmengClient.init(application);        // \u5410\u53f8\u5de5\u5177\u7c7b        ToastUtils.init(application);        // \u8bbe\u7f6e Toast \u62e6\u622a\u5668        ToastUtils.setToastInterceptor(new ToastInterceptor() {            @Override            public boolean intercept(Toast toast, CharSequence text) {                boolean intercept = super.intercept(toast, text);                if (intercept) {                    Log.e(\"Toast\", \"\u7a7a Toast\");                } else {                    Log.i(\"Toast\", text.toString());                }                return intercept;            }        });        // \u6807\u9898\u680f\u5168\u5c40\u6837\u5f0f        TitleBar.initStyle(new TitleBarLightStyle(application) {            @Override            public Drawable getBackground() {                return new ColorDrawable(getColor(R.color.colorPrimary));            }            @Override            public Drawable getBackIcon() {                return getDrawable(R.drawable.ic_back_black);            }        });        // Bugly \u5f02\u5e38\u6355\u6349        CrashReport.initCrashReport(application, AppConfig.getBuglyId(), false);        // Crash \u6355\u6349\u754c\u9762        CaocConfig.Builder.create()                .backgroundMode(CaocConfig.BACKGROUND_MODE_SHOW_CUSTOM)                .enabled(true)                .trackActivities(true)                .minTimeBetweenCrashesMs(2000)                // \u91cd\u542f\u7684 Activity                .restartActivity(HomeActivity.class)                // \u9519\u8bef\u7684 Activity                .errorActivity(CrashActivity.class)                // \u8bbe\u7f6e\u76d1\u542c\u5668                //.eventListener(new YourCustomEventListener())                .apply();        // \u8bbe\u7f6e\u5168\u5c40\u7684 Header \u6784\u5efa\u5668        SmartRefreshLayout.setDefaultRefreshHeaderCreator((context, layout) -> new ClassicsHeader(context).setEnableLastTime(false));        // \u8bbe\u7f6e\u5168\u5c40\u7684 Footer \u6784\u5efa\u5668        SmartRefreshLayout.setDefaultRefreshFooterCreator((context, layout) -> new ClassicsFooter(context).setDrawableSize(20));        // Activity \u6808\u7ba1\u7406\u521d\u59cb\u5316        ActivityStackManager.getInstance().init(application);        // \u7f51\u7edc\u8bf7\u6c42\u6846\u67b6\u521d\u59cb\u5316        IRequestServer server;        if (AppConfig.isDebug()) {            server = new TestServer();        } else {            server = new ReleaseServer();        }        EasyConfig.with(new OkHttpClient())                // \u662f\u5426\u6253\u5370\u65e5\u5fd7                .setLogEnabled(AppConfig.isDebug())                // \u8bbe\u7f6e\u670d\u52a1\u5668\u914d\u7f6e                .setServer(server)                // \u8bbe\u7f6e\u8bf7\u6c42\u5904\u7406\u7b56\u7565                .setHandler(new RequestHandler())                // \u8bbe\u7f6e\u8bf7\u6c42\u91cd\u8bd5\u6b21\u6570                .setRetryCount(3)                // \u6dfb\u52a0\u5168\u5c40\u8bf7\u6c42\u53c2\u6570                //.addParam(\"token\", \"6666666\")                // \u6dfb\u52a0\u5168\u5c40\u8bf7\u6c42\u5934                //.addHeader(\"time\", \"20191030\")                .addHeader(\"content-type\", \"application/json\")                // \u542f\u7528\u914d\u7f6e                .into();        // Activity \u4fa7\u6ed1\u8fd4\u56de        SmartSwipeBack.activitySlidingBack(application, activity -> {            if (activity instanceof SwipeAction) {                return ((SwipeAction) activity).isSwipeEnable();            }            return true;        });    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyApplication.java", "stars": "1", "class": {"name": "MyApplication", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "attachBaseContext", "params": ["Context"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void attachBaseContext(Context base) {        super.attachBaseContext(base);        // \u4f7f\u7528 Dex\u5206\u5305        //MultiDex.install(this);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/common/MyApplication.java", "stars": "1", "class": {"name": "MyApplication", "extends": "Application", "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getId() {    return delegate.getId();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/BlockingCache.java", "stars": "15", "class": {"name": "BlockingCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "getSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getSize() {    return delegate.getSize();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/BlockingCache.java", "stars": "15", "class": {"name": "BlockingCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "putObject", "params": ["Object", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void putObject(Object key, Object value) {    try {      delegate.putObject(key, value);    } finally {      releaseLock(key);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/BlockingCache.java", "stars": "15", "class": {"name": "BlockingCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "getObject", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getObject(Object key) {    acquireLock(key);    Object value = delegate.getObject(key);    if (value != null) {      releaseLock(key);    }    return value;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/BlockingCache.java", "stars": "15", "class": {"name": "BlockingCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "removeObject", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object removeObject(Object key) {    // despite of its name, this method is called only to release locks    releaseLock(key);    return null;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/BlockingCache.java", "stars": "15", "class": {"name": "BlockingCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void clear() {    delegate.clear();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/BlockingCache.java", "stars": "15", "class": {"name": "BlockingCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "getLockForKey", "params": ["Object"], "throws": null, "modifiers": ["private"], "return_type": "ReentrantLock", "snippet": "  private ReentrantLock getLockForKey(Object key) {    return locks.computeIfAbsent(key, k -> new ReentrantLock());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/BlockingCache.java", "stars": "15", "class": {"name": "BlockingCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "acquireLock", "params": ["Object"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void acquireLock(Object key) {    Lock lock = getLockForKey(key);    if (timeout > 0) {      try {        boolean acquired = lock.tryLock(timeout, TimeUnit.MILLISECONDS);        if (!acquired) {          throw new CacheException(\"Couldn't get a lock in \" + timeout + \" for the key \" +  key + \" at the cache \" + delegate.getId());        }      } catch (InterruptedException e) {        throw new CacheException(\"Got interrupted while trying to acquire lock for key \" + key, e);      }    } else {      lock.lock();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/BlockingCache.java", "stars": "15", "class": {"name": "BlockingCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "releaseLock", "params": ["Object"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void releaseLock(Object key) {    ReentrantLock lock = locks.get(key);    if (lock.isHeldByCurrentThread()) {      lock.unlock();    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/BlockingCache.java", "stars": "15", "class": {"name": "BlockingCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "getTimeout", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getTimeout() {    return timeout;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/BlockingCache.java", "stars": "15", "class": {"name": "BlockingCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "setTimeout", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setTimeout(long timeout) {    this.timeout = timeout;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/BlockingCache.java", "stars": "15", "class": {"name": "BlockingCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "dip2px", "params": ["Context", "double"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int dip2px(Context context, double dpValue) {        float density = context.getResources().getDisplayMetrics().density;        return (int) (dpValue * density + 0.5);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/UIUtil.java", "stars": "1", "class": {"name": "UIUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getScreenWidth", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getScreenWidth(Context context) {        return context.getResources().getDisplayMetrics().widthPixels;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/UIUtil.java", "stars": "1", "class": {"name": "UIUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getResource", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "Resources", "snippet": "    public static Resources getResource(Context context) {        return context.getResources();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/UIUtil.java", "stars": "1", "class": {"name": "UIUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getColor", "params": ["Context", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getColor(Context context,int id) {        return getResource(context).getColor(id);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/UIUtil.java", "stars": "1", "class": {"name": "UIUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getDimens", "params": ["Context", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int getDimens(Context context,int id){        return getResource(context).getDimensionPixelOffset(id);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/UIUtil.java", "stars": "1", "class": {"name": "UIUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "showToast", "params": ["Context", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void showToast(Context context,String str) {        Toast toast = Toast.makeText(context, str, Toast.LENGTH_SHORT);        toast.setGravity(Gravity.CENTER,0,0);        toast.show();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/UIUtil.java", "stars": "1", "class": {"name": "UIUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "showToast", "params": ["Context", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void showToast(Context context,int str_id) {        Toast toast = Toast.makeText(context, str_id, Toast.LENGTH_SHORT);        toast.setGravity(Gravity.CENTER,0,0);        toast.show();    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/view/magicindicator/buildins/UIUtil.java", "stars": "1", "class": {"name": "UIUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] arpg){        //SpringApplication.run(RunApplication.class,arpg);        CoolQHttpApplication application = new CoolQHttpApplication();        try {            application.run(RunApplication.class);        } catch (BotVerifyException e) {            System.out.println(\"\\n\\n\u6ca1\u5f00cqhttp\u63d2\u4ef6\u5417\uff1f\uff0c\u6216\u8005\u662f\u6ca1\u6709\u914d\u7f6ecqhttp\uff1f\u542f\u52a8\u5931\u8d25\u60f9\");            Scanner scanner = new Scanner(System.in);            scanner.next();        }    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/RunApplication.java", "stars": "2", "class": {"name": "RunApplication", "extends": null, "implements": ["CoolQHttpApp"], "modifiers": ["public"]}}, {"method_name": "before", "params": ["CoolQHttpConfiguration"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void before(CoolQHttpConfiguration configuration) {        DB db =DB.getInstance();        db.init();    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/RunApplication.java", "stars": "2", "class": {"name": "RunApplication", "extends": null, "implements": ["CoolQHttpApp"], "modifiers": ["public"]}}, {"method_name": "after", "params": ["CQCodeUtil", "MsgSender"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void after(CQCodeUtil cqCodeUtil, MsgSender sender) {        constant.robotQQ=sender.GETTER.getLoginQQInfo().getQQ();//\u83b7\u53d6\u673a\u5668\u4ebaqq        Map<String, List<String>> map = DB.Instance.clearTree();//\u6e05\u9664\u8fc7\u671f\u6811\u4fe1\u606f        //\u5982\u679c\u6709\u5f3a\u5236\u4e0b\u6811\u7684\u4eba\u5458        if(!map.isEmpty()){            StringBuilder stringBuilder=new StringBuilder();            Set<String> groupNames =map.keySet();            for(String groupName:groupNames){                stringBuilder.append(clearTree);                for(String userQQ:map.get(groupName)){                    stringBuilder.append(\"[CQ:at,qq=\").append(userQQ).append(\"]\");                }                sender.SENDER.sendGroupMsg(groupName, stringBuilder.toString());                stringBuilder.delete(0,stringBuilder.length());            }        }        //\u83b7\u53d6\u6240\u6709\u7fa4\u6210\u5458        pcrGroupMap = new HashMap<>();        GroupList groups = sender.GETTER.getGroupList();        for (Group group : groups.getList()) {            GroupMemberList groupMember = sender.GETTER.getGroupMemberList(group.getCode());            for (GroupMember s : groupMember) {                pcrGroupMap.put(s.getQQ(), s.getName());            }        }        System.out.println(\"\u542f\u52a8\u6210\u529f\");        System.out.println(\"\u542f\u52a8\u6210\u529f\");        System.out.println(\"\u542f\u52a8\u6210\u529f\");        System.out.println(\"\u542f\u52a8\u6210\u529f\");        System.out.println(\"\u542f\u52a8\u6210\u529f\");    }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/RunApplication.java", "stars": "2", "class": {"name": "RunApplication", "extends": null, "implements": ["CoolQHttpApp"], "modifiers": ["public"]}}, {"method_name": "run", "params": ["String"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "        public void run(String... args) throws Exception {            try {                Runtime.getRuntime().exec(\"cmd /c start http://localhost:8080/test.html\");            } catch (Exception ex) {                ex.printStackTrace();            }        }", "url": "https://raw.githubusercontent.com/sciuridae564/PcrTool/tick/src/main/java/cn/sciuridae/RunApplication.java", "stars": "2", "class": {"name": "RunHomePage", "extends": null, "implements": ["CommandLineRunner"], "modifiers": ["public"]}}, {"method_name": "newSourceInfoStorage", "params": ["Context"], "throws": null, "modifiers": ["public", "static"], "return_type": "SourceInfoStorage", "snippet": "    public static SourceInfoStorage newSourceInfoStorage(Context context) {        return new DatabaseSourceInfoStorage(context);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/sourcestorage/SourceInfoStorageFactory.java", "stars": "2", "class": {"name": "SourceInfoStorageFactory", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "newEmptySourceInfoStorage", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "SourceInfoStorage", "snippet": "    public static SourceInfoStorage newEmptySourceInfoStorage() {        return new NoSourceInfoStorage();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-proxy_cache/src/main/java/com/danikula/videocache/sourcestorage/SourceInfoStorageFactory.java", "stars": "2", "class": {"name": "SourceInfoStorageFactory", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findInCache", "params": ["String", "DiscCacheAware"], "throws": null, "modifiers": ["public", "static"], "return_type": "File", "snippet": "\tpublic static File findInCache(String imageUri, DiscCacheAware discCache) {\t\tFile image = discCache.get(imageUri);\t\treturn image.exists() ? image : null;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/DiscCacheUtil.java", "stars": "74", "class": {"name": "DiscCacheUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "removeFromCache", "params": ["String", "DiscCacheAware"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean removeFromCache(String imageUri, DiscCacheAware discCache) {\t\tFile image = discCache.get(imageUri);\t\treturn image.delete();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/core/assist/DiscCacheUtil.java", "stars": "74", "class": {"name": "DiscCacheUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "initInternal", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void initInternal() {        try {            //Write configuration to file            FileUtils.writeStringToFile(new File(workDir, getExecConfig().getEngineDataXConfFile()), getTaskConfig().toJson());            LOG.debug(\"Write {}/{} success.\", workDir.getPath(), getExecConfig().getEngineDataXConfFile());            //Write processor code to file            if(StringUtils.isNotBlank(procSrcCode)) {                FileUtils.writeStringToFile(new File(workDir.getAbsolutePath() + IOUtils.DIR_SEPARATOR_UNIX + procSrcPath,                        PROC_FILE_NAME_PREFIX + System.currentTimeMillis()), procSrcCode);            }        }catch (Exception e){            LOG.error(\"Write job config error\",e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/datax/DataxTaskProcess.java", "stars": "23", "class": {"name": "DataxTaskProcess", "extends": "AbstractJavaInternalTaskProcess", "implements": null, "modifiers": ["public"]}}, {"method_name": "isAlloc", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isAlloc() {        return alloc;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/datax/DataxTaskProcess.java", "stars": "23", "class": {"name": "DataxTaskProcess", "extends": "AbstractJavaInternalTaskProcess", "implements": null, "modifiers": ["public"]}}, {"method_name": "checkIfAlloc", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean checkIfAlloc() {        File file = new File(workDir + \"/\" + PID_F_NAME);        alloc = file.exists();        return alloc;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/datax/DataxTaskProcess.java", "stars": "23", "class": {"name": "DataxTaskProcess", "extends": "AbstractJavaInternalTaskProcess", "implements": null, "modifiers": ["public"]}}, {"method_name": "executeInternal", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Process", "snippet": "    public Process executeInternal() {        String execUser = getExecUser();        Method method = getMethod();        String command = \"\";        // --jvm=-Xms -Xmx        String maxMemory = getTaskConfig().getString(JOB_ADVANCE_MAX_MEMORY, DEFAULT_JVM_HEAP_MEMORY).toLowerCase();        long mMemory = MemUtils.convertToMB(Long.parseLong(maxMemory.substring(0, maxMemory.length() - 1)),                maxMemory.substring(maxMemory.length() - 1));        if(method == Method.PYTHON){            command = StringUtils.join(new String[]{                    getExecConfig().getEngineDataXPythonShell(), getExecConfig().getEngineDataXPythonScript(),                    getExecConfig().getEngineDataXConfFile(),                    \"--\" + JOB_ID_CMD + \"=\" + getTaskId(),                    \"--jvm='-Xms\" + mMemory + \"m -Xmx\" + mMemory + \"m'\",                    \"-p'\" +                    \" -D\" + EXEC_USER_CMD + \"=\" + execUser +                    \" -D\" + LOG_FILE_NAME_CMD + \"=\" + logFileName() +                    \" -D\" + SERVER_ADDRESS_CMD + \"=\" + StringUtils.substringAfter(AppUtil.getIpAndPort(), \"http://\") +                    \"'\"}, \" \");        }else{            JavaCommandBuilder builder = new JavaCommandBuilder(MachineInfo.getProcPath(),                    getExecConfig().getEngineDataXJavaMainClass())                    .Xmx(mMemory, MemUtils.StoreUnit.MB).Xms(mMemory, MemUtils.StoreUnit.MB)                    .classPath(getExecConfig().getEngineDataXJavaClassPath())                    .prop(\"-D\" + LOG_LEVEL_CMD, \"info\")                    .prop(\"-D\" + LOGBACK_LISTENER_CMD, NopStatusListener.class.getName())                    .prop(\"-D\" + HOME_CMD, dataXHome)                    .prop(\"-D\" + LOG_FILE_NAME_CMD,  logFileName())                    .prop(\"-D\" + LOGBACK_CONF_CMD, getExecConfig().getEngineDataXJavaLogConf())                    .prop(\"-D\" + SERVER_ADDRESS_CMD, StringUtils.substringAfter(AppUtil.getIpAndPort(), \"http://\"))                    .cmdProp(\"-\" + JOB_ID_CMD, String.valueOf(getTaskId()))                    .cmdProp(\"-\" + JOB_CMD, this.workDir.getAbsolutePath() + File.separator + getExecConfig().getEngineDataXConfFile())                    .cmdProp(\"-\" + MODE_CMD, \"standalone\");            command = builder.build();        }        if(needToSwitchUser(execUser)){            command = \"sudo su \" + execUser + \" -c \\\"\" + command + \"\\\"\";        }        LOG.info(\"Run Command:{}\", command);        Map<String,String> env = new HashMap<>(4);        LOG.trace(\"Add token path {} to env\", System.getProperty(AuthConstraints.ENV_SERV_TOKEN_PATH));        try {            ProcessBuilder builder = RunShell.createProcBuilder(command, env, this.workDir);            return builder.start();        } catch (Exception e) {            LOG.error(\"Execute DataX occurred error: \"+ e.getMessage(), e);            throw new RuntimeException(e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/datax/DataxTaskProcess.java", "stars": "23", "class": {"name": "DataxTaskProcess", "extends": "AbstractJavaInternalTaskProcess", "implements": null, "modifiers": ["public"]}}, {"method_name": "getResource", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Resource", "snippet": "    public Resource getResource() {        String maxMemory = getTaskConfig().getString(JOB_ADVANCE_MAX_MEMORY, DEFAULT_JVM_HEAP_MEMORY).toLowerCase();        return new Resource(getTaskId(), 0,                MemUtils.convertToByte(Long.parseLong(maxMemory.substring(0, maxMemory.length() - 1)),                        maxMemory.substring(maxMemory.length() - 1)));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/datax/DataxTaskProcess.java", "stars": "23", "class": {"name": "DataxTaskProcess", "extends": "AbstractJavaInternalTaskProcess", "implements": null, "modifiers": ["public"]}}, {"method_name": "clean", "params": ["File"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void clean(File workDir) {        super.clean(workDir);        //Finally change the allocate status        alloc = false;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/datax/DataxTaskProcess.java", "stars": "23", "class": {"name": "DataxTaskProcess", "extends": "AbstractJavaInternalTaskProcess", "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"DataxTaskProcess{\" +                \"jobId=\" + getJobId() +                \", taskId=\" + getTaskId() +                \", loggerDir='\" + loggerDir + '\\'' +                \", taskConfig='\" + getTaskConfig()  + '\\'' +                '}';    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/datax/DataxTaskProcess.java", "stars": "23", "class": {"name": "DataxTaskProcess", "extends": "AbstractJavaInternalTaskProcess", "implements": null, "modifiers": ["public"]}}, {"method_name": "getMethod", "params": [], "throws": null, "modifiers": ["private"], "return_type": "Method", "snippet": "    private Method getMethod(){        String method = getExecConfig().getEngineDataXMethod();        Method methodType = null;        try{            methodType = Method.valueOf(StringUtils.isNotBlank(method)? method : \"java\");        }catch(Exception e){            //Ignore        }        if(null == methodType){            methodType = Method.JAVA;        }        return methodType;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/datax/DataxTaskProcess.java", "stars": "23", "class": {"name": "DataxTaskProcess", "extends": "AbstractJavaInternalTaskProcess", "implements": null, "modifiers": ["public"]}}, {"method_name": "put", "params": ["E"], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void put(E e) throws InterruptedException {    synchronized (this) {      while (count == 10)        this.wait();      data[count++] = e;      this.notifyAll();    }  }", "url": "https://raw.githubusercontent.com/SimonHGR/safari-threads/master/src/main/java/queue/BetterQueue.java", "stars": "3", "class": {"name": "BetterQueue", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "take", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "E", "snippet": "  public E take() throws InterruptedException {    synchronized (this) {      while (count == 0) // MIGHT wake up for wrong reasons (OS limitation)        this.wait();      E rv = data[0];      System.arraycopy(data, 1, data, 0, --count);      this.notifyAll(); // UNSCALABLE      return rv;    }  }", "url": "https://raw.githubusercontent.com/SimonHGR/safari-threads/master/src/main/java/queue/BetterQueue.java", "stars": "3", "class": {"name": "BetterQueue", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void main(String[] args) {    BetterQueue<int[]> queue = new BetterQueue<>();    new Thread(()-> {      System.out.println(\"Producer starting...\");      for (int i = 0; i < 10_000; i++) {        int [] data = {i, 0};        try {          if (i < 100) {            Thread.sleep(1);          }          data[1] = i;          if (i == 5_000) {            data[0] = -99;          }          queue.put(data); data = null; // SIMON SAYS!!!        } catch (InterruptedException e) {          e.printStackTrace();        }      }      System.out.println(\"Producer ending...\");    }).start();    new Thread(()-> {      System.out.println(\"Consumer starting...\");      for (int i = 0; i < 10_000; i++) {        try {          int [] data = queue.take();          if (data[0] != i || data[1] != i) {            System.out.println(\"**** ERROR at index \" + i);          }          if (i > 9_900) {            Thread.sleep(1);          }        } catch (InterruptedException ie) {          ie.printStackTrace();        }      }      System.out.println(\"Consumer ending...\");    }).start();  }", "url": "https://raw.githubusercontent.com/SimonHGR/safari-threads/master/src/main/java/queue/BetterQueue.java", "stars": "3", "class": {"name": "BetterQueue", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "index", "params": ["int", "int", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String index(            @ApiParam(name = \"page\", value = \"\u9875\u6570\", required = false)            @RequestParam(name = \"page\", required = false, defaultValue = \"1\")            int page,            @ApiParam(name = \"limit\", value = \"\u6761\u6570\", required = false)            @RequestParam(name = \"limit\", required = false, defaultValue = \"12\")            int limit,            HttpServletRequest request    ){        PageInfo<AttAchDto> atts = attAchService.getAtts(page, limit);        request.setAttribute(\"attachs\", atts);        request.setAttribute(Types.ATTACH_URL.getType(), Commons.site_option(Types.ATTACH_URL.getType(), Commons.site_url()));        request.setAttribute(\"max_file_size\", WebConst.MAX_FILE_SIZE / 1024);        return \"admin/attach\";    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/controller/AttAchController.java", "stars": "2", "class": {"name": "AttAchController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fileUpLoadToTencentCloud", "params": ["HttpServletRequest", "HttpServletResponse", "MultipartFile"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void fileUpLoadToTencentCloud(HttpServletRequest request,                                                HttpServletResponse response,                                                @ApiParam(name = \"editormd-image-file\", value = \"\u6587\u4ef6\u6570\u7ec4\", required = true)                                                @RequestParam(name = \"editormd-image-file\", required = true)                                                MultipartFile file){        //\u6587\u4ef6\u4e0a\u4f20        try {            request.setCharacterEncoding( \"utf-8\" );            response.setHeader( \"Content-Type\" , \"text/html\" );            String fileName = TaleUtils.getFileKey(file.getOriginalFilename()).replaceFirst(\"/\",\"\");            qiniuCloudService.upload(file, fileName);            AttAchDomain attAch = new AttAchDomain();            HttpSession session = request.getSession();            UserDomain sessionUser = (UserDomain) session.getAttribute(WebConst.LOGIN_SESSION_KEY);            attAch.setAuthorId(sessionUser.getUid());            attAch.setFtype(TaleUtils.isImage(file.getInputStream()) ? Types.IMAGE.getType() : Types.FILE.getType());            attAch.setFname(fileName);            attAch.setFkey(qiniuCloudService.QINIU_UPLOAD_SITE + fileName);            attAchService.addAttAch(attAch);            response.getWriter().write( \"{\\\"success\\\": 1, \\\"message\\\":\\\"\u4e0a\u4f20\u6210\u529f\\\",\\\"url\\\":\\\"\" + attAch.getFkey() + \"\\\"}\" );        } catch (IOException e) {            e.printStackTrace();            try {                response.getWriter().write( \"{\\\"success\\\":0}\" );            } catch (IOException e1) {                throw BusinessException.withErrorCode(ErrorConstant.Att.UPLOAD_FILE_FAIL)                        .withErrorMessageArguments(e.getMessage());            }            throw BusinessException.withErrorCode(ErrorConstant.Att.UPLOAD_FILE_FAIL)                    .withErrorMessageArguments(e.getMessage());        }    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/controller/AttAchController.java", "stars": "2", "class": {"name": "AttAchController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "filesUploadToCloud", "params": ["HttpServletRequest", "HttpServletResponse", "MultipartFile"], "throws": null, "modifiers": ["public"], "return_type": "APIResponse", "snippet": "    public APIResponse filesUploadToCloud(HttpServletRequest request,                                          HttpServletResponse response,                                          @ApiParam(name = \"file\", value = \"\u6587\u4ef6\u6570\u7ec4\", required = true)                                          @RequestParam(name = \"file\", required = true)                                          MultipartFile[] files){        //\u6587\u4ef6\u4e0a\u4f20        try {            request.setCharacterEncoding( \"utf-8\" );            response.setHeader( \"Content-Type\" , \"text/html\" );            for (MultipartFile file : files) {                String fileName = TaleUtils.getFileKey(file.getOriginalFilename()).replaceFirst(\"/\",\"\");                qiniuCloudService.upload(file, fileName);                AttAchDomain attAch = new AttAchDomain();                HttpSession session = request.getSession();                UserDomain sessionUser = (UserDomain) session.getAttribute(WebConst.LOGIN_SESSION_KEY);                attAch.setAuthorId(sessionUser.getUid());                attAch.setFtype(TaleUtils.isImage(file.getInputStream()) ? Types.IMAGE.getType() : Types.FILE.getType());                attAch.setFname(fileName);                attAch.setFkey(qiniuCloudService.QINIU_UPLOAD_SITE + fileName);                attAchService.addAttAch(attAch);            }            return APIResponse.success();        } catch (IOException e) {            e.printStackTrace();            throw BusinessException.withErrorCode(ErrorConstant.Att.UPLOAD_FILE_FAIL)                    .withErrorMessageArguments(e.getMessage());        }    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/controller/AttAchController.java", "stars": "2", "class": {"name": "AttAchController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteFileInfo", "params": ["Integer", "HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "APIResponse", "snippet": "    public APIResponse deleteFileInfo(            @ApiParam(name = \"id\", value = \"\u6587\u4ef6\u4e3b\u952e\", required = true)            @RequestParam(name = \"id\", required = true)            Integer id,            HttpServletRequest request    ){        try {            AttAchDto attAch = attAchService.getAttAchById(id);            if (null == attAch)                throw BusinessException.withErrorCode(ErrorConstant.Att.DELETE_ATT_FAIL +  \": \u6587\u4ef6\u4e0d\u5b58\u5728\");            attAchService.deleteAttAch(id);            return APIResponse.success();        } catch (Exception e) {            e.printStackTrace();            throw BusinessException.withErrorCode(e.getMessage());        }    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/controller/AttAchController.java", "stars": "2", "class": {"name": "AttAchController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create a SqlSessionFactory    try (Reader reader = Resources        .getResourceAsReader(\"org/apache/ibatis/submitted/sqlprovider/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);      sqlSessionFactory.getConfiguration().addMapper(StaticMethodSqlProviderMapper.class);      sqlSessionFactory.getConfiguration().addMapper(DatabaseIdMapper.class);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/sqlprovider/CreateDB.sql\");    // create a SqlSessionFactory    try (Reader reader = Resources        .getResourceAsReader(\"org/apache/ibatis/submitted/sqlprovider/mybatis-config.xml\")) {      sqlSessionFactoryForDerby = new SqlSessionFactoryBuilder().build(reader, \"development-derby\");      sqlSessionFactoryForDerby.getConfiguration().addMapper(DatabaseIdMapper.class);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetTwoUsers", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetTwoUsers() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      List<Integer> list = new ArrayList<>();      list.add(1);      list.add(3);      List<User> users = mapper.getUsers(list);      assertEquals(2, users.size());      assertEquals(\"User1\", users.get(0).getName());      assertEquals(\"User3\", users.get(1).getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetOneUser", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetOneUser() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      {        User user = mapper.getUser(4);        assertNotNull(user);        assertEquals(\"User4\", user.getName());      }      {        User user = mapper.getUser(null);        assertNull(user);      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetAllUsers", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetAllUsers() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      List<User> users = mapper.getAllUsers();      assertEquals(4, users.size());      assertEquals(\"User1\", users.get(0).getName());      assertEquals(\"User2\", users.get(1).getName());      assertEquals(\"User3\", users.get(2).getName());      assertEquals(\"User4\", users.get(3).getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetUsersByCriteria", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetUsersByCriteria() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      {        User criteria = new User();        criteria.setId(1);        List<User> users = mapper.getUsersByCriteria(criteria);        assertEquals(1, users.size());        assertEquals(\"User1\", users.get(0).getName());      }      {        User criteria = new User();        criteria.setName(\"User\");        List<User> users = mapper.getUsersByCriteria(criteria);        assertEquals(4, users.size());        assertEquals(\"User1\", users.get(0).getName());        assertEquals(\"User2\", users.get(1).getName());        assertEquals(\"User3\", users.get(2).getName());        assertEquals(\"User4\", users.get(3).getName());      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetUsersByCriteriaMap", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetUsersByCriteriaMap() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      {        Map<String, Object> criteria = new HashMap<>();        criteria.put(\"id\", 1);        List<User> users = mapper.getUsersByCriteriaMap(criteria);        assertEquals(1, users.size());        assertEquals(\"User1\", users.get(0).getName());      }      {        Map<String, Object> criteria = new HashMap<>();        criteria.put(\"name\", \"User\");        List<User> users = mapper.getUsersByCriteriaMap(criteria);        assertEquals(4, users.size());        assertEquals(\"User1\", users.get(0).getName());        assertEquals(\"User2\", users.get(1).getName());        assertEquals(\"User3\", users.get(2).getName());        assertEquals(\"User4\", users.get(3).getName());      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetUsersByCriteriaMapWithParam", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetUsersByCriteriaMapWithParam() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      {        Map<String, Object> criteria = new HashMap<>();        criteria.put(\"id\", 1);        List<User> users = mapper.getUsersByCriteriaMapWithParam(criteria);        assertEquals(1, users.size());        assertEquals(\"User1\", users.get(0).getName());      }      {        Map<String, Object> criteria = new HashMap<>();        criteria.put(\"name\", \"User\");        List<User> users = mapper.getUsersByCriteriaMapWithParam(criteria);        assertEquals(4, users.size());        assertEquals(\"User1\", users.get(0).getName());        assertEquals(\"User2\", users.get(1).getName());        assertEquals(\"User3\", users.get(2).getName());        assertEquals(\"User4\", users.get(3).getName());      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetUsersByName", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetUsersByName() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      List<User> users = mapper.getUsersByName(\"User\", \"id DESC\");      assertEquals(4, users.size());      assertEquals(\"User4\", users.get(0).getName());      assertEquals(\"User3\", users.get(1).getName());      assertEquals(\"User2\", users.get(2).getName());      assertEquals(\"User1\", users.get(3).getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetUsersByNameUsingMap", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetUsersByNameUsingMap() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      List<User> users = mapper.getUsersByNameUsingMap(\"User\", \"id DESC\");      assertEquals(4, users.size());      assertEquals(\"User4\", users.get(0).getName());      assertEquals(\"User3\", users.get(1).getName());      assertEquals(\"User2\", users.get(2).getName());      assertEquals(\"User1\", users.get(3).getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetUsersByNameWithParamNameAndOrderBy", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetUsersByNameWithParamNameAndOrderBy() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      List<User> users = mapper.getUsersByNameWithParamNameAndOrderBy(\"User\", \"id DESC\");      assertEquals(4, users.size());      assertEquals(\"User4\", users.get(0).getName());      assertEquals(\"User3\", users.get(1).getName());      assertEquals(\"User2\", users.get(2).getName());      assertEquals(\"User1\", users.get(3).getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetUsersByNameWithParamNameUsingMap", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetUsersByNameWithParamNameUsingMap() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      List<User> users = mapper.getUsersByNameWithParamNameAndOrderBy(\"User\", \"id DESC\");      assertEquals(4, users.size());      assertEquals(\"User4\", users.get(0).getName());      assertEquals(\"User3\", users.get(1).getName());      assertEquals(\"User2\", users.get(2).getName());      assertEquals(\"User1\", users.get(3).getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetUsersByNameWithParamName", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetUsersByNameWithParamName() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      {        List<User> users = mapper.getUsersByNameWithParamName(\"User\");        assertEquals(4, users.size());        assertEquals(\"User4\", users.get(0).getName());        assertEquals(\"User3\", users.get(1).getName());        assertEquals(\"User2\", users.get(2).getName());        assertEquals(\"User1\", users.get(3).getName());      }      {        List<User> users = mapper.getUsersByNameWithParamName(null);        assertEquals(4, users.size());        assertEquals(\"User4\", users.get(0).getName());        assertEquals(\"User3\", users.get(1).getName());        assertEquals(\"User2\", users.get(2).getName());        assertEquals(\"User1\", users.get(3).getName());      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "methodNotFound", "params": [], "throws": ["NoSuchMethodException"], "modifiers": [], "return_type": "void", "snippet": "  void methodNotFound() throws NoSuchMethodException {    try {      Class<?> mapperType = ErrorMapper.class;      Method mapperMethod = mapperType.getMethod(\"methodNotFound\");      new ProviderSqlSource(new Configuration(),            mapperMethod.getAnnotation(SelectProvider.class), mapperType, mapperMethod);      fail();    } catch (BuilderException e) {      assertTrue(e.getMessage().contains(\"Error creating SqlSource for SqlProvider. Method 'methodNotFound' not found in SqlProvider 'org.apache.ibatis.submitted.sqlprovider.SqlProviderTest$ErrorSqlBuilder'.\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "methodOverload", "params": [], "throws": ["NoSuchMethodException"], "modifiers": [], "return_type": "void", "snippet": "  void methodOverload() throws NoSuchMethodException {    try {      Class<?> mapperType = ErrorMapper.class;      Method mapperMethod = mapperType.getMethod(\"methodOverload\", String.class);      new ProviderSqlSource(new Configuration(),              mapperMethod.getAnnotation(SelectProvider.class), mapperType, mapperMethod);      fail();    } catch (BuilderException e) {      assertTrue(e.getMessage().contains(\"Error creating SqlSource for SqlProvider. Method 'overload' is found multiple in SqlProvider 'org.apache.ibatis.submitted.sqlprovider.SqlProviderTest$ErrorSqlBuilder'. Sql provider method can not overload.\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "notSqlProvider", "params": [], "throws": ["NoSuchMethodException"], "modifiers": [], "return_type": "void", "snippet": "  void notSqlProvider() throws NoSuchMethodException {    Object testAnnotation = getClass().getDeclaredMethod(\"notSqlProvider\").getAnnotation(Test.class);    try {      new ProviderSqlSource(new Configuration(), testAnnotation);      fail();    } catch (BuilderException e) {      assertTrue(e.getMessage().contains(\"Error creating SqlSource for SqlProvider.  Cause: java.lang.NoSuchMethodException: org.junit.jupiter.api.Test.type()\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "omitType", "params": [], "throws": ["NoSuchMethodException"], "modifiers": [], "return_type": "void", "snippet": "  void omitType() throws NoSuchMethodException {    try {      Class<?> mapperType = ErrorMapper.class;      Method mapperMethod = mapperType.getMethod(\"omitType\");      new ProviderSqlSource(new Configuration(),          mapperMethod.getAnnotation(SelectProvider.class), mapperType, mapperMethod);      fail();    } catch (BuilderException e) {      assertTrue(e.getMessage().contains(\"Please specify either 'value' or 'type' attribute of @SelectProvider at the 'public abstract void org.apache.ibatis.submitted.sqlprovider.SqlProviderTest$ErrorMapper.omitType()'.\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "differentTypeAndValue", "params": [], "throws": ["NoSuchMethodException"], "modifiers": [], "return_type": "void", "snippet": "  void differentTypeAndValue() throws NoSuchMethodException {    try {      Class<?> mapperType = ErrorMapper.class;      Method mapperMethod = mapperType.getMethod(\"differentTypeAndValue\");      new ProviderSqlSource(new Configuration(),          mapperMethod.getAnnotation(DeleteProvider.class), mapperType, mapperMethod);      fail();    } catch (BuilderException e) {      assertTrue(e.getMessage().contains(\"Cannot specify different class on 'value' and 'type' attribute of @DeleteProvider at the 'public abstract void org.apache.ibatis.submitted.sqlprovider.SqlProviderTest$ErrorMapper.differentTypeAndValue()'.\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "multipleProviderContext", "params": [], "throws": ["NoSuchMethodException"], "modifiers": [], "return_type": "void", "snippet": "  void multipleProviderContext() throws NoSuchMethodException {    try {      Class<?> mapperType = ErrorMapper.class;      Method mapperMethod = mapperType.getMethod(\"multipleProviderContext\");      new ProviderSqlSource(new Configuration(),            mapperMethod.getAnnotation(SelectProvider.class), mapperType, mapperMethod);      fail();    } catch (BuilderException e) {      assertTrue(e.getMessage().contains(\"Error creating SqlSource for SqlProvider. ProviderContext found multiple in SqlProvider method (org.apache.ibatis.submitted.sqlprovider.SqlProviderTest$ErrorSqlBuilder.multipleProviderContext). ProviderContext can not define multiple in SqlProvider method argument.\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "notSupportParameterObjectOnMultipleArguments", "params": [], "throws": ["NoSuchMethodException"], "modifiers": [], "return_type": "void", "snippet": "  void notSupportParameterObjectOnMultipleArguments() throws NoSuchMethodException {    try {      Class<?> mapperType = Mapper.class;      Method mapperMethod = mapperType.getMethod(\"getUsersByName\", String.class, String.class);      new ProviderSqlSource(new Configuration(),            mapperMethod.getAnnotation(SelectProvider.class), mapperType, mapperMethod)              .getBoundSql(new Object());      fail();    } catch (BuilderException e) {      assertTrue(e.getMessage().contains(\"Error invoking SqlProvider method 'public java.lang.String org.apache.ibatis.submitted.sqlprovider.OurSqlBuilder.buildGetUsersByNameQuery(java.lang.String,java.lang.String)' with specify parameter 'class java.lang.Object'.  Cause: java.lang.IllegalArgumentException: wrong number of arguments\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "notSupportParameterObjectOnNamedArgument", "params": [], "throws": ["NoSuchMethodException"], "modifiers": [], "return_type": "void", "snippet": "  void notSupportParameterObjectOnNamedArgument() throws NoSuchMethodException {    try {      Class<?> mapperType = Mapper.class;      Method mapperMethod = mapperType.getMethod(\"getUsersByNameWithParamName\", String.class);      new ProviderSqlSource(new Configuration(),            mapperMethod.getAnnotation(SelectProvider.class), mapperType, mapperMethod)              .getBoundSql(new Object());      fail();    } catch (BuilderException e) {      assertTrue(e.getMessage().contains(\"Error invoking SqlProvider method 'public java.lang.String org.apache.ibatis.submitted.sqlprovider.OurSqlBuilder.buildGetUsersByNameWithParamNameQuery(java.lang.String)' with specify parameter 'class java.lang.Object'.  Cause: java.lang.IllegalArgumentException: argument type mismatch\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "invokeError", "params": [], "throws": ["NoSuchMethodException"], "modifiers": [], "return_type": "void", "snippet": "  void invokeError() throws NoSuchMethodException {    try {      Class<?> mapperType = ErrorMapper.class;      Method mapperMethod = mapperType.getMethod(\"invokeError\");      new ProviderSqlSource(new Configuration(),            mapperMethod.getAnnotation(SelectProvider.class), mapperType, mapperMethod)              .getBoundSql(new Object());      fail();    } catch (BuilderException e) {      assertTrue(e.getMessage().contains(\"Error invoking SqlProvider method 'public java.lang.String org.apache.ibatis.submitted.sqlprovider.SqlProviderTest$ErrorSqlBuilder.invokeError()' with specify parameter 'class java.lang.Object'.  Cause: java.lang.UnsupportedOperationException: invokeError\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "invokeNestedError", "params": [], "throws": ["NoSuchMethodException"], "modifiers": [], "return_type": "void", "snippet": "  void invokeNestedError() throws NoSuchMethodException {    try {      Class<?> mapperType = ErrorMapper.class;      Method mapperMethod = mapperType.getMethod(\"invokeNestedError\");      new ProviderSqlSource(new Configuration(),        mapperMethod.getAnnotation(SelectProvider.class), mapperType, mapperMethod)        .getBoundSql(new Object());      fail();    } catch (BuilderException e) {      assertTrue(e.getMessage().contains(\"Error invoking SqlProvider method 'public java.lang.String org.apache.ibatis.submitted.sqlprovider.SqlProviderTest$ErrorSqlBuilder.invokeNestedError()' with specify parameter 'class java.lang.Object'.  Cause: java.lang.UnsupportedOperationException: invokeNestedError\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "invalidArgumentsCombination", "params": [], "throws": ["NoSuchMethodException"], "modifiers": [], "return_type": "void", "snippet": "  void invalidArgumentsCombination() throws NoSuchMethodException {    try {      Class<?> mapperType = ErrorMapper.class;      Method mapperMethod = mapperType.getMethod(\"invalidArgumentsCombination\", String.class);      new ProviderSqlSource(new Configuration(),        mapperMethod.getAnnotation(DeleteProvider.class), mapperType, mapperMethod)        .getBoundSql(\"foo\");      fail();    } catch (BuilderException e) {      assertTrue(e.getMessage().contains(\"Cannot invoke SqlProvider method 'public java.lang.String org.apache.ibatis.submitted.sqlprovider.SqlProviderTest$ErrorSqlBuilder.invalidArgumentsCombination(org.apache.ibatis.builder.annotation.ProviderContext,java.lang.String,java.lang.String)' with specify parameter 'class java.lang.String' because SqlProvider method arguments for 'public abstract void org.apache.ibatis.submitted.sqlprovider.SqlProviderTest$ErrorMapper.invalidArgumentsCombination(java.lang.String)' is an invalid combination.\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldInsertUser", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldInsertUser() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = new User();      user.setId(999);      user.setName(\"MyBatis\");      mapper.insert(user);      User loadedUser = mapper.getUser(999);      assertEquals(\"MyBatis\", loadedUser.getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldUpdateUser", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldUpdateUser() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = new User();      user.setId(999);      user.setName(\"MyBatis\");      mapper.insert(user);      user.setName(\"MyBatis3\");      mapper.update(user);      User loadedUser = mapper.getUser(999);      assertEquals(\"MyBatis3\", loadedUser.getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldDeleteUser", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldDeleteUser() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = new User();      user.setId(999);      user.setName(\"MyBatis\");      mapper.insert(user);      user.setName(\"MyBatis3\");      mapper.delete(999);      User loadedUser = mapper.getUser(999);      assertNull(loadedUser);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "mapperProviderContextOnly", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void mapperProviderContextOnly() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      assertEquals(\"User4\", mapper.selectById(4).getName());      assertNull(mapper.selectActiveById(4));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "mapperOneParamAndProviderContext", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void mapperOneParamAndProviderContext() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      assertEquals(1, mapper.selectByName(\"User4\").size());      assertEquals(0, mapper.selectActiveByName(\"User4\").size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "mapperMultipleParamAndProviderContextWithAtParam", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void mapperMultipleParamAndProviderContextWithAtParam() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      assertEquals(1, mapper.selectByIdAndNameWithAtParam(4,\"User4\").size());      assertEquals(0, mapper.selectActiveByIdAndNameWithAtParam(4,\"User4\").size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "mapperMultipleParamAndProviderContext", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void mapperMultipleParamAndProviderContext() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      assertEquals(1, mapper.selectByIdAndName(4,\"User4\").size());      assertEquals(0, mapper.selectActiveByIdAndName(4,\"User4\").size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "staticMethodNoArgument", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void staticMethodNoArgument() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      StaticMethodSqlProviderMapper mapper =          sqlSession.getMapper(StaticMethodSqlProviderMapper.class);      assertEquals(1, mapper.noArgument());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "staticMethodOneArgument", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void staticMethodOneArgument() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      StaticMethodSqlProviderMapper mapper =          sqlSession.getMapper(StaticMethodSqlProviderMapper.class);      assertEquals(10, mapper.oneArgument(10));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "staticMethodOnePrimitiveByteArgument", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void staticMethodOnePrimitiveByteArgument() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      StaticMethodSqlProviderMapper mapper =        sqlSession.getMapper(StaticMethodSqlProviderMapper.class);      assertEquals((byte) 10, mapper.onePrimitiveByteArgument((byte) 10));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "staticMethodOnePrimitiveShortArgument", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void staticMethodOnePrimitiveShortArgument() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      StaticMethodSqlProviderMapper mapper =        sqlSession.getMapper(StaticMethodSqlProviderMapper.class);      assertEquals((short) 10, mapper.onePrimitiveShortArgument((short) 10));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "staticMethodOnePrimitiveIntArgument", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void staticMethodOnePrimitiveIntArgument() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      StaticMethodSqlProviderMapper mapper =        sqlSession.getMapper(StaticMethodSqlProviderMapper.class);      assertEquals(10, mapper.onePrimitiveIntArgument(10));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "staticMethodOnePrimitiveLongArgument", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void staticMethodOnePrimitiveLongArgument() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      StaticMethodSqlProviderMapper mapper =        sqlSession.getMapper(StaticMethodSqlProviderMapper.class);      assertEquals(10L, mapper.onePrimitiveLongArgument(10L));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "staticMethodOnePrimitiveFloatArgument", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void staticMethodOnePrimitiveFloatArgument() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      StaticMethodSqlProviderMapper mapper =        sqlSession.getMapper(StaticMethodSqlProviderMapper.class);      assertEquals(10.1F, mapper.onePrimitiveFloatArgument(10.1F));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "staticMethodOnePrimitiveDoubleArgument", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void staticMethodOnePrimitiveDoubleArgument() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      StaticMethodSqlProviderMapper mapper =        sqlSession.getMapper(StaticMethodSqlProviderMapper.class);      assertEquals(10.1D, mapper.onePrimitiveDoubleArgument(10.1D));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "staticMethodOnePrimitiveBooleanArgument", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void staticMethodOnePrimitiveBooleanArgument() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      StaticMethodSqlProviderMapper mapper =        sqlSession.getMapper(StaticMethodSqlProviderMapper.class);      assertTrue(mapper.onePrimitiveBooleanArgument(true));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "staticMethodOnePrimitiveCharArgument", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void staticMethodOnePrimitiveCharArgument() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      StaticMethodSqlProviderMapper mapper =        sqlSession.getMapper(StaticMethodSqlProviderMapper.class);      assertEquals('A', mapper.onePrimitiveCharArgument('A'));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "boxing", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void boxing() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      StaticMethodSqlProviderMapper mapper =        sqlSession.getMapper(StaticMethodSqlProviderMapper.class);      assertEquals(10, mapper.boxing(10));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "unboxing", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void unboxing() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      StaticMethodSqlProviderMapper mapper =        sqlSession.getMapper(StaticMethodSqlProviderMapper.class);      assertEquals(100, mapper.unboxing(100));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "staticMethodMultipleArgument", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void staticMethodMultipleArgument() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      StaticMethodSqlProviderMapper mapper =          sqlSession.getMapper(StaticMethodSqlProviderMapper.class);      assertEquals(2, mapper.multipleArgument(1, 1));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "staticMethodOnlyProviderContext", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void staticMethodOnlyProviderContext() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      StaticMethodSqlProviderMapper mapper =          sqlSession.getMapper(StaticMethodSqlProviderMapper.class);      assertEquals(\"onlyProviderContext\", mapper.onlyProviderContext());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "staticMethodOneArgumentAndProviderContext", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void staticMethodOneArgumentAndProviderContext() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      StaticMethodSqlProviderMapper mapper =          sqlSession.getMapper(StaticMethodSqlProviderMapper.class);      assertEquals(\"oneArgumentAndProviderContext 100\", mapper.oneArgumentAndProviderContext(100));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "mapAndProviderContext", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void mapAndProviderContext() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      StaticMethodSqlProviderMapper mapper =        sqlSession.getMapper(StaticMethodSqlProviderMapper.class);      assertEquals(\"mybatis\", mapper.mapAndProviderContext(\"mybatis\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "multipleMap", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void multipleMap() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      StaticMethodSqlProviderMapper mapper =        sqlSession.getMapper(StaticMethodSqlProviderMapper.class);      assertEquals(\"123456\", mapper.multipleMap(Collections.singletonMap(\"value\", \"123\"), Collections.singletonMap(\"value\", \"456\")));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "providerContextAndMap", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void providerContextAndMap() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      StaticMethodSqlProviderMapper mapper =        sqlSession.getMapper(StaticMethodSqlProviderMapper.class);      assertEquals(\"mybatis\", mapper.providerContextAndParamMap(\"mybatis\"));    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "keepBackwardCompatibilityOnDeprecatedConstructorWithAnnotation", "params": [], "throws": ["NoSuchMethodException"], "modifiers": [], "return_type": "void", "snippet": "  void keepBackwardCompatibilityOnDeprecatedConstructorWithAnnotation() throws NoSuchMethodException {    Class<?> mapperType = StaticMethodSqlProviderMapper.class;    Method mapperMethod = mapperType.getMethod(\"noArgument\");    ProviderSqlSource sqlSource = new ProviderSqlSource(new Configuration(), (Object)mapperMethod.getAnnotation(SelectProvider.class), mapperType, mapperMethod);    assertEquals(\"SELECT 1 FROM INFORMATION_SCHEMA.SYSTEM_USERS\", sqlSource.getBoundSql(null).getSql());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldInsertUserSelective", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldInsertUserSelective() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = new User();      user.setId(999);      mapper.insertSelective(user);      User loadedUser = mapper.getUser(999);      assertNull(loadedUser.getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldUpdateUserSelective", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldUpdateUserSelective() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user = new User();      user.setId(999);      user.setName(\"MyBatis\");      mapper.insert(user);      user.setName(null);      mapper.updateSelective(user);      User loadedUser = mapper.getUser(999);      assertEquals(\"MyBatis\", loadedUser.getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "mapperGetByEntity", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void mapperGetByEntity() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User query = new User();      query.setName(\"User4\");      assertEquals(1, mapper.getByEntity(query).size());      query = new User();      query.setId(1);      assertEquals(1, mapper.getByEntity(query).size());      query = new User();      query.setId(1);      query.setName(\"User4\");      assertEquals(0, mapper.getByEntity(query).size());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldPassedDatabaseIdToProviderMethod", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldPassedDatabaseIdToProviderMethod() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()){      DatabaseIdMapper mapper = sqlSession.getMapper(DatabaseIdMapper.class);      assertEquals(\"hsql\", mapper.selectDatabaseId());    }    try (SqlSession sqlSession = sqlSessionFactoryForDerby.openSession()){      DatabaseIdMapper mapper = sqlSession.getMapper(DatabaseIdMapper.class);      assertEquals(\"derby\", mapper.selectDatabaseId());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProviderTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "methodNotFound", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void methodNotFound() {      throw new UnsupportedOperationException(\"methodNotFound\");    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "ErrorSqlBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "overload", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String overload() {      throw new UnsupportedOperationException(\"overload\");    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "ErrorSqlBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "overload", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String overload(String value) {      throw new UnsupportedOperationException(\"overload\");    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "ErrorSqlBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "invokeError", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String invokeError() {      throw new UnsupportedOperationException(\"invokeError\");    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "ErrorSqlBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "invokeNestedError", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String invokeNestedError() {      throw new IllegalStateException(new UnsupportedOperationException(\"invokeNestedError\"));    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "ErrorSqlBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "multipleProviderContext", "params": ["ProviderContext", "ProviderContext"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String multipleProviderContext(ProviderContext providerContext1, ProviderContext providerContext2) {      throw new UnsupportedOperationException(\"multipleProviderContext\");    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "ErrorSqlBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "invalidArgumentsCombination", "params": ["ProviderContext", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String invalidArgumentsCombination(ProviderContext providerContext, String value, String unnecessaryArgument) {      return \"\";    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "ErrorSqlBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "noArgument", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "      public static String noArgument() {        return \"SELECT 1 FROM INFORMATION_SCHEMA.SYSTEM_USERS\";      }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProvider", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "oneArgument", "params": ["Integer"], "throws": null, "modifiers": ["public", "static"], "return_type": "StringBuilder", "snippet": "      public static StringBuilder oneArgument(Integer value) {        return new StringBuilder().append(\"SELECT \").append(value)            .append(\" FROM INFORMATION_SCHEMA.SYSTEM_USERS\");      }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProvider", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onePrimitiveByteArgument", "params": ["byte"], "throws": null, "modifiers": ["public", "static"], "return_type": "StringBuilder", "snippet": "      public static StringBuilder onePrimitiveByteArgument(byte value) {        return new StringBuilder().append(\"SELECT \").append(value)          .append(\" FROM INFORMATION_SCHEMA.SYSTEM_USERS\");      }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProvider", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onePrimitiveShortArgument", "params": ["short"], "throws": null, "modifiers": ["public", "static"], "return_type": "StringBuilder", "snippet": "      public static StringBuilder onePrimitiveShortArgument(short value) {        return new StringBuilder().append(\"SELECT \").append(value)          .append(\" FROM INFORMATION_SCHEMA.SYSTEM_USERS\");      }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProvider", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onePrimitiveIntArgument", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "StringBuilder", "snippet": "      public static StringBuilder onePrimitiveIntArgument(int value) {        return new StringBuilder().append(\"SELECT \").append(value)          .append(\" FROM INFORMATION_SCHEMA.SYSTEM_USERS\");      }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProvider", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onePrimitiveLongArgument", "params": ["long"], "throws": null, "modifiers": ["public", "static"], "return_type": "StringBuilder", "snippet": "      public static StringBuilder onePrimitiveLongArgument(long value) {        return new StringBuilder().append(\"SELECT \").append(value)          .append(\" FROM INFORMATION_SCHEMA.SYSTEM_USERS\");      }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProvider", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onePrimitiveFloatArgument", "params": ["float"], "throws": null, "modifiers": ["public", "static"], "return_type": "StringBuilder", "snippet": "      public static StringBuilder onePrimitiveFloatArgument(float value) {        return new StringBuilder().append(\"SELECT \").append(value)          .append(\" FROM INFORMATION_SCHEMA.SYSTEM_USERS\");      }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProvider", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onePrimitiveDoubleArgument", "params": ["double"], "throws": null, "modifiers": ["public", "static"], "return_type": "StringBuilder", "snippet": "      public static StringBuilder onePrimitiveDoubleArgument(double value) {        return new StringBuilder().append(\"SELECT \").append(value)          .append(\" FROM INFORMATION_SCHEMA.SYSTEM_USERS\");      }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProvider", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onePrimitiveBooleanArgument", "params": ["boolean"], "throws": null, "modifiers": ["public", "static"], "return_type": "StringBuilder", "snippet": "      public static StringBuilder onePrimitiveBooleanArgument(boolean value) {        return new StringBuilder().append(\"SELECT \").append(value ? 1 : 0)          .append(\" FROM INFORMATION_SCHEMA.SYSTEM_USERS\");      }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProvider", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onePrimitiveCharArgument", "params": ["char"], "throws": null, "modifiers": ["public", "static"], "return_type": "StringBuilder", "snippet": "      public static StringBuilder onePrimitiveCharArgument(char value) {        return new StringBuilder().append(\"SELECT '\").append(value)          .append(\"' FROM INFORMATION_SCHEMA.SYSTEM_USERS\");      }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProvider", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "boxing", "params": ["Integer"], "throws": null, "modifiers": ["public", "static"], "return_type": "StringBuilder", "snippet": "      public static StringBuilder boxing(Integer value) {        return new StringBuilder().append(\"SELECT '\").append(value)          .append(\"' FROM INFORMATION_SCHEMA.SYSTEM_USERS\");      }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProvider", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "unboxing", "params": ["int"], "throws": null, "modifiers": ["public", "static"], "return_type": "StringBuilder", "snippet": "      public static StringBuilder unboxing(int value) {        return new StringBuilder().append(\"SELECT '\").append(value)          .append(\"' FROM INFORMATION_SCHEMA.SYSTEM_USERS\");      }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProvider", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "multipleArgument", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public", "static"], "return_type": "CharSequence", "snippet": "      public static CharSequence multipleArgument(@Param(\"value1\") Integer value1,          @Param(\"value2\") Integer value2) {        return \"SELECT \" + (value1 + value2) + \" FROM INFORMATION_SCHEMA.SYSTEM_USERS\";      }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProvider", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onlyProviderContext", "params": ["ProviderContext"], "throws": null, "modifiers": ["public", "static"], "return_type": "CharSequence", "snippet": "      public static CharSequence onlyProviderContext(ProviderContext context) {        return new StringBuilder().append(\"SELECT '\").append(context.getMapperMethod().getName())            .append(\"' FROM INFORMATION_SCHEMA.SYSTEM_USERS\");      }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProvider", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "oneArgumentAndProviderContext", "params": ["Integer", "ProviderContext"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "      public static String oneArgumentAndProviderContext(Integer value, ProviderContext context) {        return \"SELECT '\" + context.getMapperMethod().getName() + \" \" + value            + \"' FROM INFORMATION_SCHEMA.SYSTEM_USERS\";      }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProvider", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "mapAndProviderContext", "params": ["Map<String,Object>", "ProviderContext"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "      public static String mapAndProviderContext(Map<String, Object> map, ProviderContext context) {        return \"SELECT '\" + map.get(\"value\") + \"' FROM INFORMATION_SCHEMA.SYSTEM_USERS\";      }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProvider", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "providerContextAndParamMap", "params": ["ProviderContext", "MapperMethod"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "      public static String providerContextAndParamMap(ProviderContext context, MapperMethod.ParamMap<Object> map) {        return \"SELECT '\" + map.get(\"value\") + \"' FROM INFORMATION_SCHEMA.SYSTEM_USERS\";      }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProvider", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "multipleMap", "params": ["Map<String,Object>", "Map<String,Object>"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "      public static String multipleMap(@Param(\"map1\") Map<String, Object> map1, @Param(\"map2\") Map<String, Object> map2) {        return \"SELECT '\" + map1.get(\"value\") + map2.get(\"value\") + \"' FROM INFORMATION_SCHEMA.SYSTEM_USERS\";      }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProvider", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "provideSql", "params": ["ProviderContext"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "      public static String provideSql(ProviderContext context) {        if (\"hsql\".equals(context.getDatabaseId())) {          return \"SELECT '\" + context.getDatabaseId() + \"' FROM INFORMATION_SCHEMA.SYSTEM_USERS\";        } else {          return \"SELECT '\" + context.getDatabaseId() + \"' FROM SYSIBM.SYSDUMMY1\";        }      }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/sqlprovider/SqlProviderTest.java", "stars": "15", "class": {"name": "SqlProvider", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        Log.e(TAG, \"onCreate: of ContactFragment \");    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/Contact_Fragment.java", "stars": "2", "class": {"name": "Contact_Fragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        final View rootView = inflater.inflate(R.layout.fragment_contact_, container, false);        searchButton = (Button)rootView.findViewById(R.id.cont_search);        contact_list = (RecyclerView)rootView.findViewById(R.id.contact_list);        final Map<String, String> data = getcontacts.dcontacts;        List<listforadapter> list_hai = new ArrayList<>();        for (String s : data.keySet()) {            list_hai.add(new listforadapter(s, data.get(s)));            System.out.println(s + data.get(s));        }        //SET LAYOUT MANAGER        contact_list.setLayoutManager(new LinearLayoutManager(getContext()));        // SET ADAPTER        contact_list.setAdapter(new contact_Adapter(getContext(),list_hai));        final AutoCompleteTextView act=rootView.findViewById(R.id.yoyo_search);        String dat[]=new String[getcontacts.dcontacts.size()];        int count=0;        for(String x:getcontacts.dcontacts.keySet()){            dat[count]=x;            count++;            System.out.println(count+\" \"+x);        }        act.setAdapter(new ArrayAdapter<String>(getActivity().getApplicationContext(),android.R.layout.simple_list_item_1,dat));        searchButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                for(final String s:getcontacts.dcontacts.keySet()){                    if (s.equals(act.getText().toString())){                        requestDialog=new Dialog(getActivity());                        requestDialog.setContentView(R.layout.dialog_req);                        final TextView c_name = (TextView)requestDialog.findViewById(R.id.dialog_name_d);                        final TextView c_no = requestDialog.findViewById(R.id.dialog_number_d);                        final CircleImageView c_img =  requestDialog.findViewById(R.id.dialog_img_d);                        Button b=requestDialog.findViewById(R.id.requestt);                        final EditText money=requestDialog.findViewById(R.id.amt);                        final EditText remark=requestDialog.findViewById(R.id.remark);                        final String sst=s;                        b.setOnClickListener(new View.OnClickListener() {                            @Override                            public void onClick(View v) {                                DatabaseReference dr= FirebaseDatabase.getInstance().getReference(\"Users\");                                SharedPreferences sf=getActivity().getSharedPreferences(\"Login data\",MODE_PRIVATE);                                String ss=sf.getString(\"user\",\"unable to fetch\");                                dr.child(ss).child(\"Transactions\").child(\"take money\").child(sst).child(remark.getText().toString()).setValue(money.getText().toString());                                dr.child(sst).child(\"Transactions\").child(\"give money\").child(ss).child(remark.getText().toString()).setValue(money.getText().toString());                                requestDialog.dismiss();                                getActivity().getSupportFragmentManager().popBackStack();                                getActivity().getSupportFragmentManager().beginTransaction().replace(R.id.main_hu_container,new home_fragment()).commit();                            }                        });                        c_name.setText(sst);                        c_no.setText(data.get(sst));                        TextDrawable drawable = TextDrawable.builder().buildRound(sst.substring(0,1).toUpperCase(), Color.GREEN);                        c_img.setBackground(drawable);                        requestDialog.show();                    }                    else{                        Toast.makeText(getActivity().getApplicationContext(),\"Coantact Not Found\",Toast.LENGTH_SHORT).show();                    }                }            }        });     return rootView;    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/Contact_Fragment.java", "stars": "2", "class": {"name": "Contact_Fragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "print", "params": ["Environment", "Class<?>", "Log"], "throws": null, "modifiers": [], "return_type": "Banner", "snippet": "\tBanner print(Environment environment, Class<?> sourceClass, Log logger) {\t\tBanner banner = getBanner(environment);\t\ttry {\t\t\tlogger.info(createStringFromBanner(banner, environment, sourceClass));\t\t}\t\tcatch (UnsupportedEncodingException ex) {\t\t\tlogger.warn(\"Failed to create String for banner\", ex);\t\t}\t\treturn new PrintedBanner(banner, sourceClass);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplicationBannerPrinter.java", "stars": "47572", "class": {"name": "SpringApplicationBannerPrinter", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "print", "params": ["Environment", "Class<?>", "PrintStream"], "throws": null, "modifiers": [], "return_type": "Banner", "snippet": "\tBanner print(Environment environment, Class<?> sourceClass, PrintStream out) {\t\tBanner banner = getBanner(environment);\t\tbanner.printBanner(environment, sourceClass, out);\t\treturn new PrintedBanner(banner, sourceClass);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplicationBannerPrinter.java", "stars": "47572", "class": {"name": "SpringApplicationBannerPrinter", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getBanner", "params": ["Environment"], "throws": null, "modifiers": ["private"], "return_type": "Banner", "snippet": "\tprivate Banner getBanner(Environment environment) {\t\tBanners banners = new Banners();\t\tbanners.addIfNotNull(getImageBanner(environment));\t\tbanners.addIfNotNull(getTextBanner(environment));\t\tif (banners.hasAtLeastOneBanner()) {\t\t\treturn banners;\t\t}\t\tif (this.fallbackBanner != null) {\t\t\treturn this.fallbackBanner;\t\t}\t\treturn DEFAULT_BANNER;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplicationBannerPrinter.java", "stars": "47572", "class": {"name": "SpringApplicationBannerPrinter", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getTextBanner", "params": ["Environment"], "throws": null, "modifiers": ["private"], "return_type": "Banner", "snippet": "\tprivate Banner getTextBanner(Environment environment) {\t\tString location = environment.getProperty(BANNER_LOCATION_PROPERTY, DEFAULT_BANNER_LOCATION);\t\tResource resource = this.resourceLoader.getResource(location);\t\tif (resource.exists()) {\t\t\treturn new ResourceBanner(resource);\t\t}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplicationBannerPrinter.java", "stars": "47572", "class": {"name": "SpringApplicationBannerPrinter", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getImageBanner", "params": ["Environment"], "throws": null, "modifiers": ["private"], "return_type": "Banner", "snippet": "\tprivate Banner getImageBanner(Environment environment) {\t\tString location = environment.getProperty(BANNER_IMAGE_LOCATION_PROPERTY);\t\tif (StringUtils.hasLength(location)) {\t\t\tResource resource = this.resourceLoader.getResource(location);\t\t\treturn resource.exists() ? new ImageBanner(resource) : null;\t\t}\t\tfor (String ext : IMAGE_EXTENSION) {\t\t\tResource resource = this.resourceLoader.getResource(\"banner.\" + ext);\t\t\tif (resource.exists()) {\t\t\t\treturn new ImageBanner(resource);\t\t\t}\t\t}\t\treturn null;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplicationBannerPrinter.java", "stars": "47572", "class": {"name": "SpringApplicationBannerPrinter", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "createStringFromBanner", "params": ["Banner", "Environment", "Class<?>"], "throws": ["UnsupportedEncodingException"], "modifiers": ["private"], "return_type": "String", "snippet": "\tprivate String createStringFromBanner(Banner banner, Environment environment, Class<?> mainApplicationClass)\t\t\tthrows UnsupportedEncodingException {\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\t\tbanner.printBanner(environment, mainApplicationClass, new PrintStream(baos));\t\tString charset = environment.getProperty(\"spring.banner.charset\", \"UTF-8\");\t\treturn baos.toString(charset);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplicationBannerPrinter.java", "stars": "47572", "class": {"name": "SpringApplicationBannerPrinter", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "addIfNotNull", "params": ["Banner"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "\t\tvoid addIfNotNull(Banner banner) {\t\t\tif (banner != null) {\t\t\t\tthis.banners.add(banner);\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplicationBannerPrinter.java", "stars": "47572", "class": {"name": "Banners", "extends": null, "implements": ["Banner"], "modifiers": ["private", "static"]}}, {"method_name": "hasAtLeastOneBanner", "params": [], "throws": null, "modifiers": [], "return_type": "boolean", "snippet": "\t\tboolean hasAtLeastOneBanner() {\t\t\treturn !this.banners.isEmpty();\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplicationBannerPrinter.java", "stars": "47572", "class": {"name": "Banners", "extends": null, "implements": ["Banner"], "modifiers": ["private", "static"]}}, {"method_name": "printBanner", "params": ["Environment", "Class<?>", "PrintStream"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void printBanner(Environment environment, Class<?> sourceClass, PrintStream out) {\t\t\tfor (Banner banner : this.banners) {\t\t\t\tbanner.printBanner(environment, sourceClass, out);\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplicationBannerPrinter.java", "stars": "47572", "class": {"name": "Banners", "extends": null, "implements": ["Banner"], "modifiers": ["private", "static"]}}, {"method_name": "printBanner", "params": ["Environment", "Class<?>", "PrintStream"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void printBanner(Environment environment, Class<?> sourceClass, PrintStream out) {\t\t\tsourceClass = (sourceClass != null) ? sourceClass : this.sourceClass;\t\t\tthis.banner.printBanner(environment, sourceClass, out);\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplicationBannerPrinter.java", "stars": "47572", "class": {"name": "PrintedBanner", "extends": null, "implements": ["Banner"], "modifiers": ["private", "static"]}}, {"method_name": "onEnable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onEnable() {        DiscordRPC.LIB = club.minnced.discord.rpc.DiscordRPC.INSTANCE;        this.lastTime = System.currentTimeMillis() / 1000L;        final String applicationId = \"670676274338988042\";        final DiscordEventHandlers handlers = new DiscordEventHandlers();        DiscordRPC.LIB.Discord_Initialize(applicationId, handlers, true, \"\");        new Thread(() -> {            while (!Thread.currentThread().isInterrupted()) {                this.presence = new DiscordRichPresence();                this.presence.startTimestamp = lastTime;                this.presence.largeImageText = String.format(\"%s %s | 1.12.2\", Mercury.INSTANCE.getName(), Mercury.INSTANCE.getVersion());                this.presence.largeImageKey = String.format(\"name_%s_\", MathUtil.getRandom(1, 50));                this.presence.smallImageKey = \"discord\";                this.presence.smallImageText = \"https://discord.io/mercurymod\";           //     for (String devs : devs) {           //         if (mc.session.getProfile().getId().toString().equals(devs)) {            //            this.presence.smallImageKey = \"dev\";            //            this.presence.smallImageText = Trident.INSTANCE.getProfileManager().getName(UUID.fromString(devs));            //        }           //     }                    this.presence.details = (afk || mc.currentScreen instanceof GuiMainMenu || mc.currentScreen instanceof GuiMultiplayer) ? \"Currently AFK\" : \"Currently Exploring\";                serverData = mc.getCurrentServerData();                if (serverData != null) {                    StringBuilder sb = new StringBuilder(\"Multiplayer\");                    if (this.server)                        sb.append(\": \" + serverData.serverIP);                    if (name)                        sb.append(String.format(\" (%s)\", mc.getSession().getUsername()));                    this.presence.state = sb.toString();                } else if (mc.isSingleplayer()) {                    this.presence.state = \"Singleplayer\";                } else if (mc.currentScreen != null) {                    if (mc.currentScreen instanceof GuiMainMenu) {                        this.presence.state = \"Main Menu\";                    }                    if (mc.currentScreen instanceof GuiMultiplayer) {                        this.presence.state = \"Multiplayer\";                    }                }                DiscordRPC.LIB.Discord_UpdatePresence(this.presence);                DiscordRPC.LIB.Discord_RunCallbacks();                try {                    Thread.sleep(5000L);                } catch (InterruptedException ignored) {                    ignored.printStackTrace();                }            }        }, \"RPC-Callback-Handler\").start();    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/misc/DiscordRPC.java", "stars": "12", "class": {"name": "DiscordRPC", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "onUpdate", "params": ["UpdateEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onUpdate(UpdateEvent event) {        if (MotionUtil.getSpeed(Objects.requireNonNull(mc.player)) == 0.0) {            if (timer.hasReached(10000))            afk = true;        } else {            timer.reset();            afk = false;        }    }", "url": "https://raw.githubusercontent.com/Crystallinqq/Mercury-Client/master/src/main/java/fail/mercury/client/client/modules/misc/DiscordRPC.java", "stars": "12", "class": {"name": "DiscordRPC", "extends": "Module", "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecNodeId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getExecNodeId() {        return execNodeId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/domain/ExecNodeUser.java", "stars": "23", "class": {"name": "ExecNodeUser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setExecNodeId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setExecNodeId(Integer execNodeId) {        this.execNodeId = execNodeId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/domain/ExecNodeUser.java", "stars": "23", "class": {"name": "ExecNodeUser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecUser", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getExecUser() {        return execUser;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/domain/ExecNodeUser.java", "stars": "23", "class": {"name": "ExecNodeUser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setExecUser", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setExecUser(String execUser) {        this.execUser = execUser;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/domain/ExecNodeUser.java", "stars": "23", "class": {"name": "ExecNodeUser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRelationState", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getRelationState() {        return relationState;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/domain/ExecNodeUser.java", "stars": "23", "class": {"name": "ExecNodeUser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRelationState", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRelationState(int relationState) {        this.relationState = relationState;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/domain/ExecNodeUser.java", "stars": "23", "class": {"name": "ExecNodeUser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getUid() {        return uid;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/domain/ExecNodeUser.java", "stars": "23", "class": {"name": "ExecNodeUser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUid", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUid(Integer uid) {        this.uid = uid;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/domain/ExecNodeUser.java", "stars": "23", "class": {"name": "ExecNodeUser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getGid() {        return gid;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/domain/ExecNodeUser.java", "stars": "23", "class": {"name": "ExecNodeUser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setGid", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGid(Integer gid) {        this.gid = gid;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/domain/ExecNodeUser.java", "stars": "23", "class": {"name": "ExecNodeUser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isMarkDel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isMarkDel() {        return markDel;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/domain/ExecNodeUser.java", "stars": "23", "class": {"name": "ExecNodeUser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMarkDel", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMarkDel(boolean markDel) {        this.markDel = markDel;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/domain/ExecNodeUser.java", "stars": "23", "class": {"name": "ExecNodeUser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUpdateTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Date", "snippet": "    public Date getUpdateTime() {        return updateTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/domain/ExecNodeUser.java", "stars": "23", "class": {"name": "ExecNodeUser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUpdateTime", "params": ["Date"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUpdateTime(Date updateTime) {        this.updateTime = updateTime;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/domain/ExecNodeUser.java", "stars": "23", "class": {"name": "ExecNodeUser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUserType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getUserType() {        return userType;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/domain/ExecNodeUser.java", "stars": "23", "class": {"name": "ExecNodeUser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUserType", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUserType(String userType) {        this.userType = userType;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/exec/domain/ExecNodeUser.java", "stars": "23", "class": {"name": "ExecNodeUser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        // Teil 1        // Eingabe:        double einzelGehalt = 2000;        // Ausgabe: gezahlte Steuern        System.out.println(steuerSumme(einzelGehalt));        // Teil 2        // Eingabe:        double[] gehaeltern = {2000, 1234, 1238, 7261, 1238};        double summe = 0;        for (double gehalt: gehaeltern) {            summe += steuerSumme(gehalt);        }        System.out.println(summe);        // Ausgabe: Summe aller gezahlten Steuern    }", "url": "https://raw.githubusercontent.com/unterstein/dhbw-java-2020/master/src/SteuernBeispielLoesung.java", "stars": "3", "class": {"name": "SteuernBeispielLoesung", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "steuerSumme", "params": ["double"], "throws": null, "modifiers": ["static"], "return_type": "double", "snippet": "    static double steuerSumme(double gehalt) {        if (gehalt < 2000) {            return gehalt * 0.15;        } else if (gehalt < 3000) {            return gehalt * 0.2;        } else if (gehalt < 4000) {            return gehalt * 0.3;        } else if (gehalt < 5000) {            return gehalt * 0.35;        } else            return gehalt * 0.4;    }", "url": "https://raw.githubusercontent.com/unterstein/dhbw-java-2020/master/src/SteuernBeispielLoesung.java", "stars": "3", "class": {"name": "SteuernBeispielLoesung", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "intercept", "params": ["Chain"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "Response", "snippet": "    public Response intercept(Chain chain) throws IOException {        Request request = chain.request();        long t1 = System.nanoTime();//\u8bf7\u6c42\u53d1\u8d77\u7684\u65f6\u95f4        String rSubtype = null;        final RequestBody requestBody = request.body();        if (requestBody != null && requestBody.contentType() != null) {            rSubtype = requestBody.contentType().subtype();        }        if (isNotFileRequest(rSubtype)) {            Timber.d(\"Request: %s on %s%nRequest Params:%s %n%s\",                    request.url(),                    chain.connection(),                    bodyToString(request),                    request.headers());        }        Response response = chain.proceed(request);        long t2 = System.nanoTime();//\u6536\u5230\u54cd\u5e94\u7684\u65f6\u95f4        //\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528response.body\uff08\uff09.string()\u7684\u65b9\u5f0f\u8f93\u51fa\u65e5\u5fd7        //\u56e0\u4e3aresponse.body().string()\u4e4b\u540e\uff0cresponse\u4e2d\u7684\u6d41\u4f1a\u88ab\u5173\u95ed\uff0c\u7a0b\u5e8f\u4f1a\u62a5\u9519\uff0c        // \u6211\u4eec\u9700\u8981\u521b\u5efa\u51fa\u4e00\u4e2a\u65b0\u7684response\u7ed9\u5e94\u7528\u5c42\u5904\u7406        ResponseBody responseBody = response.peekBody(1024 * 1024);        if (responseBody != null) {            // final String content = responseBody.string();            final String content = uncompress(responseBody.bytes());            Timber.d(\"Response: [%s] %nResponse data:%s  %.1fms%n%s\",                    response.request().url(),                    content,                    (t2 - t1) / 1e6d,                    response.headers());        } else {            Timber.d(\"responseBody is null\");        }        return response;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/interceptor/NetworkLogInterceptor.java", "stars": "1", "class": {"name": "NetworkLogInterceptor", "extends": null, "implements": ["Interceptor"], "modifiers": ["public"]}}, {"method_name": "isNotFileRequest", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isNotFileRequest(final String subtype) {        return subtype != null && (subtype.contains(\"json\")                || subtype.contains(\"xml\")                || subtype.contains(\"plain\")                || subtype.contains(\"html\"));    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/interceptor/NetworkLogInterceptor.java", "stars": "1", "class": {"name": "NetworkLogInterceptor", "extends": null, "implements": ["Interceptor"], "modifiers": ["public"]}}, {"method_name": "bodyToString", "params": ["Request"], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "    private String bodyToString(final Request copy) {        try {            final Buffer buffer = new Buffer();            if (copy.body() == null)                return \"\";            copy.body().writeTo(buffer);            return buffer.readUtf8();            // return uncompress(buffer.readByteArray());        } catch (final IOException e) {            return \"{\\\"err\\\": \\\"\" + e.getMessage() + \"\\\"}\";        }    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/interceptor/NetworkLogInterceptor.java", "stars": "1", "class": {"name": "NetworkLogInterceptor", "extends": null, "implements": ["Interceptor"], "modifiers": ["public"]}}, {"method_name": "gzip", "params": ["RequestBody"], "throws": null, "modifiers": ["private"], "return_type": "RequestBody", "snippet": "    private RequestBody gzip(final RequestBody body) {        return new RequestBody() {            @Override            public MediaType contentType() {                return body.contentType();            }            @Override            public long contentLength() {                return -1; // \u65e0\u6cd5\u77e5\u9053\u538b\u7f29\u540e\u7684\u6570\u636e\u5927\u5c0f            }            @Override            public void writeTo(BufferedSink sink) throws IOException {                BufferedSink gzipSink = Okio.buffer(new GzipSink(sink));                body.writeTo(gzipSink);                gzipSink.close();            }        };    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/interceptor/NetworkLogInterceptor.java", "stars": "1", "class": {"name": "NetworkLogInterceptor", "extends": null, "implements": ["Interceptor"], "modifiers": ["public"]}}, {"method_name": "uncompress", "params": ["byte"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "String", "snippet": "    public String uncompress(byte str[]) throws IOException {        ByteArrayOutputStream baos = new ByteArrayOutputStream();        try (GZIPInputStream gis = new GZIPInputStream(new ByteArrayInputStream(str))) {            int b;            while ((b = gis.read()) != -1) {                baos.write((byte) b);            }        }        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {            return new String(baos.toByteArray(), StandardCharsets.UTF_8);        }        return new String(baos.toByteArray());    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/interceptor/NetworkLogInterceptor.java", "stars": "1", "class": {"name": "NetworkLogInterceptor", "extends": null, "implements": ["Interceptor"], "modifiers": ["public"]}}, {"method_name": "getSharedNum", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getSharedNum() {        return this.sharedNum;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/job/AzkabanAppJointLinkisSharedJob.java", "stars": "18", "class": {"name": "AzkabanAppJointLinkisSharedJob", "extends": "AzkabanAppJointLinkisJob", "implements": ["SharedJob"], "modifiers": ["public"]}}, {"method_name": "getSharedKey", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getSharedKey() {        String projectId = getJobProps().get(LinkisJobTypeConf.PROJECT_ID);        String flowId = getJobProps().get(LinkisJobTypeConf.FLOW_NAME);        String flowExecId = getJobProps().get(LinkisJobTypeConf.FLOW_EXEC_ID);        String nodeId = getJobProps().get(LinkisJobTypeConf.JOB_ID);        return projectId + \".\" + flowId + \".\" + flowExecId + \".\" + nodeId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/job/AzkabanAppJointLinkisSharedJob.java", "stars": "18", "class": {"name": "AzkabanAppJointLinkisSharedJob", "extends": "AzkabanAppJointLinkisJob", "implements": ["SharedJob"], "modifiers": ["public"]}}, {"method_name": "setSharedNum", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSharedNum(int sharedNum) {        this.sharedNum = sharedNum;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/job/AzkabanAppJointLinkisSharedJob.java", "stars": "18", "class": {"name": "AzkabanAppJointLinkisSharedJob", "extends": "AzkabanAppJointLinkisJob", "implements": ["SharedJob"], "modifiers": ["public"]}}, {"method_name": "isSimpleType", "params": ["Class<?>"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "  public static boolean isSimpleType(Class<?> clazz) {    return SIMPLE_TYPE_SET.contains(clazz);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/SimpleTypeRegistry.java", "stars": "15", "class": {"name": "SimpleTypeRegistry", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void init();    public void dispose() {        if(this.isDisposed()) return;        this.disposed = true;        if(this.container != null) {            this.container.removeConnection(this);            this.container = null;        }    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/connections/Connection.java", "stars": "2", "class": {"name": "Connection", "extends": null, "implements": ["IConnection"], "modifiers": ["public", "abstract"]}}, {"method_name": "dispose", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void dispose() {        if(this.isDisposed()) return;        this.disposed = true;        if(this.container != null) {            this.container.removeConnection(this);            this.container = null;        }    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/connections/Connection.java", "stars": "2", "class": {"name": "Connection", "extends": null, "implements": ["IConnection"], "modifiers": ["public", "abstract"]}}, {"method_name": "write", "params": ["ByteBuf"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void write(ByteBuf buffer);    public void handleEvent(IMessageEvent event) {        if(event == null) return;        event.setConnection(this);        Method messageCallback = event.getMessageCallback();        if(messageCallback != null)        {            try {                messageCallback.invoke(event.getMessageListener(), event);            } catch(Exception e) {                System.out.println(e);            }        }        event.dispose();    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/connections/Connection.java", "stars": "2", "class": {"name": "Connection", "extends": null, "implements": ["IConnection"], "modifiers": ["public", "abstract"]}}, {"method_name": "handleEvent", "params": ["IMessageEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void handleEvent(IMessageEvent event) {        if(event == null) return;        event.setConnection(this);        Method messageCallback = event.getMessageCallback();        if(messageCallback != null)        {            try {                messageCallback.invoke(event.getMessageListener(), event);            } catch(Exception e) {                System.out.println(e);            }        }        event.dispose();    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/connections/Connection.java", "stars": "2", "class": {"name": "Connection", "extends": null, "implements": ["IConnection"], "modifiers": ["public", "abstract"]}}, {"method_name": "handleEvents", "params": ["List<IMessageEvent>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void handleEvents(List<IMessageEvent> events) {        if((events == null) || (events.size() == 0)) return;        for(IMessageEvent event : events) this.handleEvent(event);    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/connections/Connection.java", "stars": "2", "class": {"name": "Connection", "extends": null, "implements": ["IConnection"], "modifiers": ["public", "abstract"]}}, {"method_name": "processComposer", "params": ["IMessageComposer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void processComposer(IMessageComposer composer) {        if(composer == null) return;        IServer server = this.getServer();        if(server == null) return;        int header = server.getMessages().getComposerId(composer);        if(header == -1) return;        this.write(server.getCodec().encode(header, composer.getMessageArray()));    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/connections/Connection.java", "stars": "2", "class": {"name": "Connection", "extends": null, "implements": ["IConnection"], "modifiers": ["public", "abstract"]}}, {"method_name": "processComposers", "params": ["List<IMessageComposer>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void processComposers(List<IMessageComposer> composers) {        if((composers == null) || (composers.size() == 0)) return;        for(IMessageComposer composer : composers) this.processComposer(composer);    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/connections/Connection.java", "stars": "2", "class": {"name": "Connection", "extends": null, "implements": ["IConnection"], "modifiers": ["public", "abstract"]}}, {"method_name": "isDisposed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isDisposed() {        return this.disposed;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/connections/Connection.java", "stars": "2", "class": {"name": "Connection", "extends": null, "implements": ["IConnection"], "modifiers": ["public", "abstract"]}}, {"method_name": "getServer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "IServer", "snippet": "    public IServer getServer() {        return this.server;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/connections/Connection.java", "stars": "2", "class": {"name": "Connection", "extends": null, "implements": ["IConnection"], "modifiers": ["public", "abstract"]}}, {"method_name": "setServer", "params": ["IServer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setServer(IServer server) {        this.server = server;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/connections/Connection.java", "stars": "2", "class": {"name": "Connection", "extends": null, "implements": ["IConnection"], "modifiers": ["public", "abstract"]}}, {"method_name": "getContainer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "IConnectionContainer", "snippet": "    public IConnectionContainer getContainer() {        return this.container;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/connections/Connection.java", "stars": "2", "class": {"name": "Connection", "extends": null, "implements": ["IConnection"], "modifiers": ["public", "abstract"]}}, {"method_name": "setContainer", "params": ["IConnectionContainer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setContainer(IConnectionContainer container) {        this.container = container;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/connections/Connection.java", "stars": "2", "class": {"name": "Connection", "extends": null, "implements": ["IConnection"], "modifiers": ["public", "abstract"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getId() {        return this.id;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/connections/Connection.java", "stars": "2", "class": {"name": "Connection", "extends": null, "implements": ["IConnection"], "modifiers": ["public", "abstract"]}}, {"method_name": "getIp", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getIp() {        return this.ip;    }", "url": "https://raw.githubusercontent.com/billsonnn/nitro-java/master/core/src/main/java/com/nitro/core/communication/connections/Connection.java", "stars": "2", "class": {"name": "Connection", "extends": null, "implements": ["IConnection"], "modifiers": ["public", "abstract"]}}, {"method_name": "init", "params": ["Context"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void init(Context context) {        super.init(context);        mStartButton = findViewById(R.id.start);        mTitleTextView = (TextView) findViewById(R.id.title);        mBackButton = (ImageView) findViewById(R.id.back);        mFullscreenButton = (ImageView) findViewById(R.id.fullscreen);        mProgressBar = (SeekBar) findViewById(R.id.progress);        mCurrentTimeTextView = (TextView) findViewById(R.id.current);        mTotalTimeTextView = (TextView) findViewById(R.id.total);        mBottomContainer = (ViewGroup) findViewById(R.id.layout_bottom);        mTopContainer = (ViewGroup) findViewById(R.id.layout_top);        mBottomProgressBar = (ProgressBar) findViewById(R.id.bottom_progressbar);        mThumbImageViewLayout = (RelativeLayout) findViewById(R.id.thumb);        mLockScreen = (ImageView) findViewById(R.id.lock_screen);        mLoadingProgressBar = findViewById(R.id.loading);        if (isInEditMode())            return;        if (mStartButton != null) {            mStartButton.setOnClickListener(this);        }        if (mFullscreenButton != null) {            mFullscreenButton.setOnClickListener(this);            mFullscreenButton.setOnTouchListener(this);        }        if (mProgressBar != null) {            mProgressBar.setOnSeekBarChangeListener(this);        }        if (mBottomContainer != null) {            mBottomContainer.setOnClickListener(this);        }        if (mTextureViewContainer != null) {            mTextureViewContainer.setOnClickListener(this);            mTextureViewContainer.setOnTouchListener(this);        }        if (mProgressBar != null) {            mProgressBar.setOnTouchListener(this);        }        if (mThumbImageViewLayout != null) {            mThumbImageViewLayout.setVisibility(GONE);            mThumbImageViewLayout.setOnClickListener(this);        }        if (mThumbImageView != null && !mIfCurrentIsFullscreen && mThumbImageViewLayout != null) {            mThumbImageViewLayout.removeAllViews();            resolveThumbImage(mThumbImageView);        }        if (mBackButton != null)            mBackButton.setOnClickListener(this);        if (mLockScreen != null) {            mLockScreen.setVisibility(GONE);            mLockScreen.setOnClickListener(new OnClickListener() {                @Override                public void onClick(View v) {                    if (mCurrentState == CURRENT_STATE_AUTO_COMPLETE ||                            mCurrentState == CURRENT_STATE_ERROR) {                        return;                    }                    lockTouchLogic();                    if (mLockClickListener != null) {                        mLockClickListener.onClick(v, mLockCurScreen);                    }                }            });        }        if (getActivityContext() != null) {            mSeekEndOffset = CommonUtil.dip2px(getActivityContext(), 50);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "onDetachedFromWindow", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDetachedFromWindow() {        super.onDetachedFromWindow();        Debuger.printfLog(GSYVideoControlView.this.hashCode() + \"------------------------------ dismiss onDetachedFromWindow\");        cancelProgressTimer();        cancelDismissControlViewTimer();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "onAutoCompletion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onAutoCompletion() {        super.onAutoCompletion();        if (mLockCurScreen) {            lockTouchLogic();            mLockScreen.setVisibility(GONE);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "onError", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onError(int what, int extra) {        super.onError(what, extra);        if (mLockCurScreen) {            lockTouchLogic();            mLockScreen.setVisibility(GONE);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "setStateAndUi", "params": ["int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void setStateAndUi(int state) {        mCurrentState = state;        if ((state == CURRENT_STATE_NORMAL && isCurrentMediaListener())                || state == CURRENT_STATE_AUTO_COMPLETE || state == CURRENT_STATE_ERROR) {            mHadPrepared = false;        }        switch (mCurrentState) {            case CURRENT_STATE_NORMAL:                if (isCurrentMediaListener()) {                    Debuger.printfLog(GSYVideoControlView.this.hashCode() + \"------------------------------ dismiss CURRENT_STATE_NORMAL\");                    cancelProgressTimer();                    getGSYVideoManager().releaseMediaPlayer();                    releasePauseCover();                    mBufferPoint = 0;                    mSaveChangeViewTIme = 0;                    if (mAudioManager != null) {                        mAudioManager.abandonAudioFocus(onAudioFocusChangeListener);                    }                }                releaseNetWorkState();                break;            case CURRENT_STATE_PREPAREING:                resetProgressAndTime();                break;            case CURRENT_STATE_PLAYING:                if (isCurrentMediaListener()) {                    Debuger.printfLog(GSYVideoControlView.this.hashCode() + \"------------------------------ CURRENT_STATE_PLAYING\");                    startProgressTimer();                }                break;            case CURRENT_STATE_PAUSE:                Debuger.printfLog(GSYVideoControlView.this.hashCode() + \"------------------------------ CURRENT_STATE_PAUSE\");                startProgressTimer();                break;            case CURRENT_STATE_ERROR:                if (isCurrentMediaListener()) {                    getGSYVideoManager().releaseMediaPlayer();                }                break;            case CURRENT_STATE_AUTO_COMPLETE:                Debuger.printfLog(GSYVideoControlView.this.hashCode() + \"------------------------------ dismiss CURRENT_STATE_AUTO_COMPLETE\");                cancelProgressTimer();                if (mProgressBar != null) {                    mProgressBar.setProgress(100);                }                if (mCurrentTimeTextView != null && mTotalTimeTextView != null) {                    mCurrentTimeTextView.setText(mTotalTimeTextView.getText());                }                if (mBottomProgressBar != null) {                    mBottomProgressBar.setProgress(100);                }                break;        }        resolveUIState(state);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "setSmallVideoTextureView", "params": ["View"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void setSmallVideoTextureView(View.OnTouchListener onTouchListener) {        super.setSmallVideoTextureView(onTouchListener);        //\u5c0f\u7a97\u53e3\u64ad\u653e\u505c\u6b62\u4e86\u4e5f\u53ef\u4ee5\u79fb\u52a8        if (mThumbImageViewLayout != null) {            mThumbImageViewLayout.setOnTouchListener(onTouchListener);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onClick(View v) {        int i = v.getId();        if (mHideKey && mIfCurrentIsFullscreen) {            hideNavKey(mContext);        }        if (i == R.id.start) {            clickStartIcon();        } else if (i == R.id.surface_container && mCurrentState == CURRENT_STATE_ERROR) {            if (mVideoAllCallBack != null) {                Debuger.printfLog(\"onClickStartError\");                mVideoAllCallBack.onClickStartError(mOriginUrl, mTitle, this);            }            prepareVideo();        } else if (i == R.id.thumb) {            if (!mThumbPlay) {                return;            }            if (TextUtils.isEmpty(mUrl)) {                Debuger.printfError(\"********\" + getResources().getString(R.string.no_url));                //Toast.makeText(getActivityContext(), getResources().getString(R.string.no_url), Toast.LENGTH_SHORT).show();                return;            }            if (mCurrentState == CURRENT_STATE_NORMAL) {                if (isShowNetConfirm()) {                    showWifiDialog();                    return;                }                startPlayLogic();            } else if (mCurrentState == CURRENT_STATE_AUTO_COMPLETE) {                onClickUiToggle();            }        } else if (i == R.id.surface_container) {            if (mVideoAllCallBack != null && isCurrentMediaListener()) {                if (mIfCurrentIsFullscreen) {                    Debuger.printfLog(\"onClickBlankFullscreen\");                    mVideoAllCallBack.onClickBlankFullscreen(mOriginUrl, mTitle, GSYVideoControlView.this);                } else {                    Debuger.printfLog(\"onClickBlank\");                    mVideoAllCallBack.onClickBlank(mOriginUrl, mTitle, GSYVideoControlView.this);                }            }            startDismissControlViewTimer();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "onTouch", "params": ["View", "MotionEvent"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onTouch(View v, MotionEvent event) {        int id = v.getId();        float x = event.getX();        float y = event.getY();        if (mIfCurrentIsFullscreen && mLockCurScreen && mNeedLockFull) {            onClickUiToggle();            startDismissControlViewTimer();            return true;        }        if (id == R.id.fullscreen) {            return false;        }        if (id == R.id.surface_container) {            switch (event.getAction()) {                case MotionEvent.ACTION_DOWN:                    touchSurfaceDown(x, y);                    break;                case MotionEvent.ACTION_MOVE:                    float deltaX = x - mDownX;                    float deltaY = y - mDownY;                    float absDeltaX = Math.abs(deltaX);                    float absDeltaY = Math.abs(deltaY);                    if ((mIfCurrentIsFullscreen && mIsTouchWigetFull)                            || (mIsTouchWiget && !mIfCurrentIsFullscreen)) {                        if (!mChangePosition && !mChangeVolume && !mBrightness) {                            touchSurfaceMoveFullLogic(absDeltaX, absDeltaY);                        }                    }                    touchSurfaceMove(deltaX, deltaY, y);                    break;                case MotionEvent.ACTION_UP:                    startDismissControlViewTimer();                    touchSurfaceUp();                    Debuger.printfLog(GSYVideoControlView.this.hashCode() + \"------------------------------ surface_container ACTION_UP\");                    startProgressTimer();                    //\u4e0d\u8981\u548c\u9690\u85cf\u865a\u62df\u6309\u952e\u540e\uff0c\u6ed1\u51fa\u865a\u62df\u6309\u952e\u51b2\u7a81                    if (mHideKey && mShowVKey) {                        return true;                    }                    break;            }            gestureDetector.onTouchEvent(event);        } else if (id == R.id.progress) {            switch (event.getAction()) {                case MotionEvent.ACTION_DOWN:                    cancelDismissControlViewTimer();                case MotionEvent.ACTION_MOVE:                    cancelProgressTimer();                    ViewParent vpdown = getParent();                    while (vpdown != null) {                        vpdown.requestDisallowInterceptTouchEvent(true);                        vpdown = vpdown.getParent();                    }                    break;                case MotionEvent.ACTION_UP:                    startDismissControlViewTimer();                    Debuger.printfLog(GSYVideoControlView.this.hashCode() + \"------------------------------ progress ACTION_UP\");                    startProgressTimer();                    ViewParent vpup = getParent();                    while (vpup != null) {                        vpup.requestDisallowInterceptTouchEvent(false);                        vpup = vpup.getParent();                    }                    mBrightnessData = -1f;                    break;            }        }        return false;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "setUp", "params": ["String", "boolean", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean setUp(String url, boolean cacheWithPlay, String title) {        return setUp(url, cacheWithPlay, (File) null, title);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "setUp", "params": ["String", "boolean", "File", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean setUp(String url, boolean cacheWithPlay, File cachePath, String title) {        if (super.setUp(url, cacheWithPlay, cachePath, title)) {            if (title != null && mTitleTextView != null) {                mTitleTextView.setText(title);            }            if (mIfCurrentIsFullscreen) {                if (mFullscreenButton != null)                    mFullscreenButton.setImageResource(getShrinkImageRes());            } else {                if (mFullscreenButton != null)                    mFullscreenButton.setImageResource(getEnlargeImageRes());            }            return true;        }        return false;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "onProgressChanged", "params": ["SeekBar", "int", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "onStartTrackingTouch", "params": ["SeekBar"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onStartTrackingTouch(SeekBar seekBar) {        mHadSeekTouch = true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "onStopTrackingTouch", "params": ["SeekBar"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onStopTrackingTouch(SeekBar seekBar) {        if (mVideoAllCallBack != null && isCurrentMediaListener()) {            if (isIfCurrentIsFullscreen()) {                Debuger.printfLog(\"onClickSeekbarFullscreen\");                mVideoAllCallBack.onClickSeekbarFullscreen(mOriginUrl, mTitle, this);            } else {                Debuger.printfLog(\"onClickSeekbar\");                mVideoAllCallBack.onClickSeekbar(mOriginUrl, mTitle, this);            }        }        if (getGSYVideoManager() != null && mHadPlay) {            try {                int time = seekBar.getProgress() * getDuration() / 100;                getGSYVideoManager().seekTo(time);            } catch (Exception e) {                Debuger.printfWarning(e.toString());            }        }        mHadSeekTouch = false;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "onPrepared", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPrepared() {        setTextAndProgress(0, true);        super.onPrepared();        if (mCurrentState != CURRENT_STATE_PREPAREING) return;        startProgressTimer();        Debuger.printfLog(GSYVideoControlView.this.hashCode() + \"------------------------------ surface_container onPrepared\");    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "onBufferingUpdate", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBufferingUpdate(final int percent) {        post(new Runnable() {            @Override            public void run() {                if (mCurrentState != CURRENT_STATE_NORMAL && mCurrentState != CURRENT_STATE_PREPAREING) {                    if (percent != 0) {                        setTextAndProgress(percent);                        mBufferPoint = percent;                        Debuger.printfLog(\"Net speed: \" + getNetSpeedText() + \" percent \" + percent);                    }                    if (mProgressBar == null) {                        return;                    }                    //\u5faa\u73af\u6e05\u9664\u8fdb\u5ea6                    if (mLooping && mHadPlay && percent == 0 && mProgressBar.getProgress() >= (mProgressBar.getMax() - 1)) {                        loopSetProgressAndTime();                    }                }            }        });    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "prepareVideo", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void prepareVideo() {        if (mSetUpLazy) {            super.setUp(mOriginUrl,                    mCache,                    mCachePath,                    mMapHeadData,                    mTitle);        }        super.prepareVideo();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "touchSurfaceDown", "params": ["float", "float"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void touchSurfaceDown(float x, float y) {        mTouchingProgressBar = true;        mDownX = x;        mDownY = y;        mMoveY = 0;        mChangeVolume = false;        mChangePosition = false;        mShowVKey = false;        mBrightness = false;        mFirstTouch = true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "touchSurfaceMove", "params": ["float", "float", "float"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void touchSurfaceMove(float deltaX, float deltaY, float y) {        int curWidth = 0;        int curHeight = 0;        if (getActivityContext() != null) {            curWidth = CommonUtil.getCurrentScreenLand((Activity) getActivityContext()) ? mScreenHeight : mScreenWidth;            curHeight = CommonUtil.getCurrentScreenLand((Activity) getActivityContext()) ? mScreenWidth : mScreenHeight;        }        if (mChangePosition) {            int totalTimeDuration = getDuration();            mSeekTimePosition = (int) (mDownPosition + (deltaX * totalTimeDuration / curWidth) / mSeekRatio);            if (mSeekTimePosition > totalTimeDuration)                mSeekTimePosition = totalTimeDuration;            String seekTime = CommonUtil.stringForTime(mSeekTimePosition);            String totalTime = CommonUtil.stringForTime(totalTimeDuration);            showProgressDialog(deltaX, seekTime, mSeekTimePosition, totalTime, totalTimeDuration);        } else if (mChangeVolume) {            deltaY = -deltaY;            int max = mAudioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);            int deltaV = (int) (max * deltaY * 3 / curHeight);            mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, mGestureDownVolume + deltaV, 0);            int volumePercent = (int) (mGestureDownVolume * 100 / max + deltaY * 3 * 100 / curHeight);            showVolumeDialog(-deltaY, volumePercent);        } else if (mBrightness) {            if (Math.abs(deltaY) > mThreshold) {                float percent = (-deltaY / curHeight);                onBrightnessSlide(percent);                mDownY = y;            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "touchSurfaceMoveFullLogic", "params": ["float", "float"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void touchSurfaceMoveFullLogic(float absDeltaX, float absDeltaY) {        int curWidth = 0;        if (getActivityContext() != null) {            curWidth = CommonUtil.getCurrentScreenLand((Activity) getActivityContext()) ? mScreenHeight : mScreenWidth;        }        if (absDeltaX > mThreshold || absDeltaY > mThreshold) {            cancelProgressTimer();            if (absDeltaX >= mThreshold) {                //\u9632\u6b62\u5168\u5c4f\u865a\u62df\u6309\u952e                int screenWidth = CommonUtil.getScreenWidth(getContext());                if (Math.abs(screenWidth - mDownX) > mSeekEndOffset) {                    mChangePosition = true;                    mDownPosition = getCurrentPositionWhenPlaying();                } else {                    mShowVKey = true;                }            } else {                int screenHeight = CommonUtil.getScreenHeight(getContext());                boolean noEnd = Math.abs(screenHeight - mDownY) > mSeekEndOffset;                if (mFirstTouch) {                    mBrightness = (mDownX < curWidth * 0.5f) && noEnd;                    mFirstTouch = false;                }                if (!mBrightness) {                    mChangeVolume = noEnd;                    mGestureDownVolume = mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC);                }                mShowVKey = !noEnd;            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "touchSurfaceUp", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void touchSurfaceUp() {        if (mChangePosition) {            int duration = getDuration();            int progress = mSeekTimePosition * 100 / (duration == 0 ? 1 : duration);            if (mBottomProgressBar != null)                mBottomProgressBar.setProgress(progress);        }        mTouchingProgressBar = false;        dismissProgressDialog();        dismissVolumeDialog();        dismissBrightnessDialog();        if (mChangePosition && getGSYVideoManager() != null && (mCurrentState == CURRENT_STATE_PLAYING || mCurrentState == CURRENT_STATE_PAUSE)) {            try {                getGSYVideoManager().seekTo(mSeekTimePosition);            } catch (Exception e) {                e.printStackTrace();            }            int duration = getDuration();            int progress = mSeekTimePosition * 100 / (duration == 0 ? 1 : duration);            if (mProgressBar != null) {                mProgressBar.setProgress(progress);            }            if (mVideoAllCallBack != null && isCurrentMediaListener()) {                Debuger.printfLog(\"onTouchScreenSeekPosition\");                mVideoAllCallBack.onTouchScreenSeekPosition(mOriginUrl, mTitle, this);            }        } else if (mBrightness) {            if (mVideoAllCallBack != null && isCurrentMediaListener()) {                Debuger.printfLog(\"onTouchScreenSeekLight\");                mVideoAllCallBack.onTouchScreenSeekLight(mOriginUrl, mTitle, this);            }        } else if (mChangeVolume) {            if (mVideoAllCallBack != null && isCurrentMediaListener()) {                Debuger.printfLog(\"onTouchScreenSeekVolume\");                mVideoAllCallBack.onTouchScreenSeekVolume(mOriginUrl, mTitle, this);            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "touchDoubleUp", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void touchDoubleUp() {        if (!mHadPlay) {            return;        }        clickStartIcon();    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "resolveUIState", "params": ["int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void resolveUIState(int state) {        switch (state) {            case CURRENT_STATE_NORMAL:                changeUiToNormal();                cancelDismissControlViewTimer();                break;            case CURRENT_STATE_PREPAREING:                changeUiToPreparingShow();                startDismissControlViewTimer();                break;            case CURRENT_STATE_PLAYING:                changeUiToPlayingShow();                startDismissControlViewTimer();                break;            case CURRENT_STATE_PAUSE:                changeUiToPauseShow();                cancelDismissControlViewTimer();                break;            case CURRENT_STATE_ERROR:                changeUiToError();                break;            case CURRENT_STATE_AUTO_COMPLETE:                changeUiToCompleteShow();                cancelDismissControlViewTimer();                break;            case CURRENT_STATE_PLAYING_BUFFERING_START:                changeUiToPlayingBufferingShow();                break;        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "clickStartIcon", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void clickStartIcon() {        if (TextUtils.isEmpty(mUrl)) {            Debuger.printfError(\"********\" + getResources().getString(R.string.no_url));            //Toast.makeText(getActivityContext(), getResources().getString(R.string.no_url), Toast.LENGTH_SHORT).show();            return;        }        if (mCurrentState == CURRENT_STATE_NORMAL || mCurrentState == CURRENT_STATE_ERROR) {            if (isShowNetConfirm()) {                showWifiDialog();                return;            }            startButtonLogic();        } else if (mCurrentState == CURRENT_STATE_PLAYING) {            try {                onVideoPause();            } catch (Exception e) {                e.printStackTrace();            }            setStateAndUi(CURRENT_STATE_PAUSE);            if (mVideoAllCallBack != null && isCurrentMediaListener()) {                if (mIfCurrentIsFullscreen) {                    Debuger.printfLog(\"onClickStopFullscreen\");                    mVideoAllCallBack.onClickStopFullscreen(mOriginUrl, mTitle, this);                } else {                    Debuger.printfLog(\"onClickStop\");                    mVideoAllCallBack.onClickStop(mOriginUrl, mTitle, this);                }            }        } else if (mCurrentState == CURRENT_STATE_PAUSE) {            if (mVideoAllCallBack != null && isCurrentMediaListener()) {                if (mIfCurrentIsFullscreen) {                    Debuger.printfLog(\"onClickResumeFullscreen\");                    mVideoAllCallBack.onClickResumeFullscreen(mOriginUrl, mTitle, this);                } else {                    Debuger.printfLog(\"onClickResume\");                    mVideoAllCallBack.onClickResume(mOriginUrl, mTitle, this);                }            }            if (!mHadPlay && !mStartAfterPrepared) {                startAfterPrepared();            }            try {                getGSYVideoManager().start();            } catch (Exception e) {                e.printStackTrace();            }            setStateAndUi(CURRENT_STATE_PLAYING);        } else if (mCurrentState == CURRENT_STATE_AUTO_COMPLETE) {            startButtonLogic();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "lockTouchLogic", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void lockTouchLogic() {        if (mLockCurScreen) {            mLockScreen.setImageResource(R.drawable.unlock);            mLockCurScreen = false;        } else {            mLockScreen.setImageResource(R.drawable.lock);            mLockCurScreen = true;            hideAllWidget();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "startProgressTimer", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void startProgressTimer() {        cancelProgressTimer();        mPostProgress = true;        postDelayed(progressTask, 300);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "cancelProgressTimer", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void cancelProgressTimer() {        mPostProgress = false;        removeCallbacks(progressTask);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "setTextAndProgress", "params": ["int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void setTextAndProgress(int secProgress) {        setTextAndProgress(secProgress, false);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "setTextAndProgress", "params": ["int", "boolean"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void setTextAndProgress(int secProgress, boolean forceChange) {        int position = getCurrentPositionWhenPlaying();        int duration = getDuration();        int progress = position * 100 / (duration == 0 ? 1 : duration);        setProgressAndTime(progress, secProgress, position, duration, forceChange);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "setProgressAndTime", "params": ["int", "int", "int", "int", "boolean"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void setProgressAndTime(int progress, int secProgress, int currentTime, int totalTime, boolean forceChange) {        if (mGSYVideoProgressListener != null && mCurrentState == CURRENT_STATE_PLAYING) {            mGSYVideoProgressListener.onProgress(progress, secProgress, currentTime, totalTime);        }        if (mProgressBar == null || mTotalTimeTextView == null || mCurrentTimeTextView == null) {            return;        }        if (mHadSeekTouch) {            return;        }        if (!mTouchingProgressBar) {            if (progress != 0 || forceChange) mProgressBar.setProgress(progress);        }        if (getGSYVideoManager().getBufferedPercentage() > 0) {            secProgress = getGSYVideoManager().getBufferedPercentage();        }        if (secProgress > 94) secProgress = 100;        setSecondaryProgress(secProgress);        mTotalTimeTextView.setText(CommonUtil.stringForTime(totalTime));        if (currentTime > 0)            mCurrentTimeTextView.setText(CommonUtil.stringForTime(currentTime));        if (mBottomProgressBar != null) {            if (progress != 0 || forceChange) mBottomProgressBar.setProgress(progress);            setSecondaryProgress(secProgress);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "setSecondaryProgress", "params": ["int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void setSecondaryProgress(int secProgress) {        if (mProgressBar != null) {            if (secProgress != 0 && !getGSYVideoManager().isCacheFile()) {                mProgressBar.setSecondaryProgress(secProgress);            }        }        if (mBottomProgressBar != null) {            if (secProgress != 0 && !getGSYVideoManager().isCacheFile()) {                mBottomProgressBar.setSecondaryProgress(secProgress);            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "resetProgressAndTime", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void resetProgressAndTime() {        if (mProgressBar == null || mTotalTimeTextView == null || mCurrentTimeTextView == null) {            return;        }        mProgressBar.setProgress(0);        mProgressBar.setSecondaryProgress(0);        mCurrentTimeTextView.setText(CommonUtil.stringForTime(0));        mTotalTimeTextView.setText(CommonUtil.stringForTime(0));        if (mBottomProgressBar != null) {            mBottomProgressBar.setProgress(0);            mBottomProgressBar.setSecondaryProgress(0);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "loopSetProgressAndTime", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void loopSetProgressAndTime() {        if (mProgressBar == null || mTotalTimeTextView == null || mCurrentTimeTextView == null) {            return;        }        mProgressBar.setProgress(0);        mProgressBar.setSecondaryProgress(0);        mCurrentTimeTextView.setText(CommonUtil.stringForTime(0));        if (mBottomProgressBar != null)            mBottomProgressBar.setProgress(0);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "startDismissControlViewTimer", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void startDismissControlViewTimer() {        cancelDismissControlViewTimer();        mPostDismiss = true;        postDelayed(dismissControlTask, mDismissControlTime);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "cancelDismissControlViewTimer", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void cancelDismissControlViewTimer() {        mPostDismiss = false;        removeCallbacks(dismissControlTask);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "resolveThumbImage", "params": ["View"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void resolveThumbImage(View thumb) {        if (mThumbImageViewLayout != null) {            mThumbImageViewLayout.removeAllViews();            mThumbImageViewLayout.addView(thumb);            ViewGroup.LayoutParams layoutParams = thumb.getLayoutParams();            layoutParams.height = ViewGroup.LayoutParams.MATCH_PARENT;            layoutParams.width = ViewGroup.LayoutParams.MATCH_PARENT;            thumb.setLayoutParams(layoutParams);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "setViewShowState", "params": ["View", "int"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void setViewShowState(View view, int visibility) {        if (view != null) {            view.setVisibility(visibility);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "onBrightnessSlide", "params": ["float"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onBrightnessSlide(float percent) {        mBrightnessData = ((Activity) (mContext)).getWindow().getAttributes().screenBrightness;        if (mBrightnessData <= 0.00f) {            mBrightnessData = 0.50f;        } else if (mBrightnessData < 0.01f) {            mBrightnessData = 0.01f;        }        WindowManager.LayoutParams lpa = ((Activity) (mContext)).getWindow().getAttributes();        lpa.screenBrightness = mBrightnessData + percent;        if (lpa.screenBrightness > 1.0f) {            lpa.screenBrightness = 1.0f;        } else if (lpa.screenBrightness < 0.01f) {            lpa.screenBrightness = 0.01f;        }        showBrightnessDialog(lpa.screenBrightness);        ((Activity) (mContext)).getWindow().setAttributes(lpa);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "isShowNetConfirm", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "    protected boolean isShowNetConfirm() {        return !mOriginUrl.startsWith(\"file\") && !mOriginUrl.startsWith(\"android.resource\") && !CommonUtil.isWifiConnected(getContext())                && mNeedShowWifiTip && !getGSYVideoManager().cachePreview(mContext.getApplicationContext(), mCachePath, mOriginUrl);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "showWifiDialog", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void showWifiDialog();    protected abstract void showProgressDialog(float deltaX,                                               String seekTime, int seekTimePosition,                                               String totalTime, int totalTimeDuration);    protected abstract void dismissProgressDialog();    protected abstract void showVolumeDialog(float deltaY, int volumePercent);    protected abstract void dismissVolumeDialog();    protected abstract void showBrightnessDialog(float percent);    protected abstract void dismissBrightnessDialog();    protected abstract void onClickUiToggle();    protected abstract void hideAllWidget();    protected abstract void changeUiToNormal();    protected abstract void changeUiToPreparingShow();    protected abstract void changeUiToPlayingShow();    protected abstract void changeUiToPauseShow();    protected abstract void changeUiToError();    protected abstract void changeUiToCompleteShow();    protected abstract void changeUiToPlayingBufferingShow();    /************************* \u5f00\u653e\u63a5\u53e3 *************************/    /**     * \u5728\u70b9\u51fb\u64ad\u653e\u7684\u65f6\u5019\u624d\u8fdb\u884c\u771f\u6b63setup     */    public boolean setUpLazy(String url, boolean cacheWithPlay, File cachePath, Map<String, String> mapHeadData, String title) {        mOriginUrl = url;        mCache = cacheWithPlay;        mCachePath = cachePath;        mSetUpLazy = true;        mTitle = title;        mMapHeadData = mapHeadData;        if (isCurrentMediaListener() &&                (System.currentTimeMillis() - mSaveChangeViewTIme) < CHANGE_DELAY_TIME)            return false;        mUrl = \"waiting\";        mCurrentState = CURRENT_STATE_NORMAL;        return true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "showProgressDialog", "params": ["float", "String", "int", "String", "int"], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void showProgressDialog(float deltaX,                                               String seekTime, int seekTimePosition,                                               String totalTime, int totalTimeDuration);    protected abstract void dismissProgressDialog();    protected abstract void showVolumeDialog(float deltaY, int volumePercent);    protected abstract void dismissVolumeDialog();    protected abstract void showBrightnessDialog(float percent);    protected abstract void dismissBrightnessDialog();    protected abstract void onClickUiToggle();    protected abstract void hideAllWidget();    protected abstract void changeUiToNormal();    protected abstract void changeUiToPreparingShow();    protected abstract void changeUiToPlayingShow();    protected abstract void changeUiToPauseShow();    protected abstract void changeUiToError();    protected abstract void changeUiToCompleteShow();    protected abstract void changeUiToPlayingBufferingShow();    /************************* \u5f00\u653e\u63a5\u53e3 *************************/    /**     * \u5728\u70b9\u51fb\u64ad\u653e\u7684\u65f6\u5019\u624d\u8fdb\u884c\u771f\u6b63setup     */    public boolean setUpLazy(String url, boolean cacheWithPlay, File cachePath, Map<String, String> mapHeadData, String title) {        mOriginUrl = url;        mCache = cacheWithPlay;        mCachePath = cachePath;        mSetUpLazy = true;        mTitle = title;        mMapHeadData = mapHeadData;        if (isCurrentMediaListener() &&                (System.currentTimeMillis() - mSaveChangeViewTIme) < CHANGE_DELAY_TIME)            return false;        mUrl = \"waiting\";        mCurrentState = CURRENT_STATE_NORMAL;        return true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "dismissProgressDialog", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void dismissProgressDialog();    protected abstract void showVolumeDialog(float deltaY, int volumePercent);    protected abstract void dismissVolumeDialog();    protected abstract void showBrightnessDialog(float percent);    protected abstract void dismissBrightnessDialog();    protected abstract void onClickUiToggle();    protected abstract void hideAllWidget();    protected abstract void changeUiToNormal();    protected abstract void changeUiToPreparingShow();    protected abstract void changeUiToPlayingShow();    protected abstract void changeUiToPauseShow();    protected abstract void changeUiToError();    protected abstract void changeUiToCompleteShow();    protected abstract void changeUiToPlayingBufferingShow();    /************************* \u5f00\u653e\u63a5\u53e3 *************************/    /**     * \u5728\u70b9\u51fb\u64ad\u653e\u7684\u65f6\u5019\u624d\u8fdb\u884c\u771f\u6b63setup     */    public boolean setUpLazy(String url, boolean cacheWithPlay, File cachePath, Map<String, String> mapHeadData, String title) {        mOriginUrl = url;        mCache = cacheWithPlay;        mCachePath = cachePath;        mSetUpLazy = true;        mTitle = title;        mMapHeadData = mapHeadData;        if (isCurrentMediaListener() &&                (System.currentTimeMillis() - mSaveChangeViewTIme) < CHANGE_DELAY_TIME)            return false;        mUrl = \"waiting\";        mCurrentState = CURRENT_STATE_NORMAL;        return true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "showVolumeDialog", "params": ["float", "int"], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void showVolumeDialog(float deltaY, int volumePercent);    protected abstract void dismissVolumeDialog();    protected abstract void showBrightnessDialog(float percent);    protected abstract void dismissBrightnessDialog();    protected abstract void onClickUiToggle();    protected abstract void hideAllWidget();    protected abstract void changeUiToNormal();    protected abstract void changeUiToPreparingShow();    protected abstract void changeUiToPlayingShow();    protected abstract void changeUiToPauseShow();    protected abstract void changeUiToError();    protected abstract void changeUiToCompleteShow();    protected abstract void changeUiToPlayingBufferingShow();    /************************* \u5f00\u653e\u63a5\u53e3 *************************/    /**     * \u5728\u70b9\u51fb\u64ad\u653e\u7684\u65f6\u5019\u624d\u8fdb\u884c\u771f\u6b63setup     */    public boolean setUpLazy(String url, boolean cacheWithPlay, File cachePath, Map<String, String> mapHeadData, String title) {        mOriginUrl = url;        mCache = cacheWithPlay;        mCachePath = cachePath;        mSetUpLazy = true;        mTitle = title;        mMapHeadData = mapHeadData;        if (isCurrentMediaListener() &&                (System.currentTimeMillis() - mSaveChangeViewTIme) < CHANGE_DELAY_TIME)            return false;        mUrl = \"waiting\";        mCurrentState = CURRENT_STATE_NORMAL;        return true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "dismissVolumeDialog", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void dismissVolumeDialog();    protected abstract void showBrightnessDialog(float percent);    protected abstract void dismissBrightnessDialog();    protected abstract void onClickUiToggle();    protected abstract void hideAllWidget();    protected abstract void changeUiToNormal();    protected abstract void changeUiToPreparingShow();    protected abstract void changeUiToPlayingShow();    protected abstract void changeUiToPauseShow();    protected abstract void changeUiToError();    protected abstract void changeUiToCompleteShow();    protected abstract void changeUiToPlayingBufferingShow();    /************************* \u5f00\u653e\u63a5\u53e3 *************************/    /**     * \u5728\u70b9\u51fb\u64ad\u653e\u7684\u65f6\u5019\u624d\u8fdb\u884c\u771f\u6b63setup     */    public boolean setUpLazy(String url, boolean cacheWithPlay, File cachePath, Map<String, String> mapHeadData, String title) {        mOriginUrl = url;        mCache = cacheWithPlay;        mCachePath = cachePath;        mSetUpLazy = true;        mTitle = title;        mMapHeadData = mapHeadData;        if (isCurrentMediaListener() &&                (System.currentTimeMillis() - mSaveChangeViewTIme) < CHANGE_DELAY_TIME)            return false;        mUrl = \"waiting\";        mCurrentState = CURRENT_STATE_NORMAL;        return true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "showBrightnessDialog", "params": ["float"], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void showBrightnessDialog(float percent);    protected abstract void dismissBrightnessDialog();    protected abstract void onClickUiToggle();    protected abstract void hideAllWidget();    protected abstract void changeUiToNormal();    protected abstract void changeUiToPreparingShow();    protected abstract void changeUiToPlayingShow();    protected abstract void changeUiToPauseShow();    protected abstract void changeUiToError();    protected abstract void changeUiToCompleteShow();    protected abstract void changeUiToPlayingBufferingShow();    /************************* \u5f00\u653e\u63a5\u53e3 *************************/    /**     * \u5728\u70b9\u51fb\u64ad\u653e\u7684\u65f6\u5019\u624d\u8fdb\u884c\u771f\u6b63setup     */    public boolean setUpLazy(String url, boolean cacheWithPlay, File cachePath, Map<String, String> mapHeadData, String title) {        mOriginUrl = url;        mCache = cacheWithPlay;        mCachePath = cachePath;        mSetUpLazy = true;        mTitle = title;        mMapHeadData = mapHeadData;        if (isCurrentMediaListener() &&                (System.currentTimeMillis() - mSaveChangeViewTIme) < CHANGE_DELAY_TIME)            return false;        mUrl = \"waiting\";        mCurrentState = CURRENT_STATE_NORMAL;        return true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "dismissBrightnessDialog", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void dismissBrightnessDialog();    protected abstract void onClickUiToggle();    protected abstract void hideAllWidget();    protected abstract void changeUiToNormal();    protected abstract void changeUiToPreparingShow();    protected abstract void changeUiToPlayingShow();    protected abstract void changeUiToPauseShow();    protected abstract void changeUiToError();    protected abstract void changeUiToCompleteShow();    protected abstract void changeUiToPlayingBufferingShow();    /************************* \u5f00\u653e\u63a5\u53e3 *************************/    /**     * \u5728\u70b9\u51fb\u64ad\u653e\u7684\u65f6\u5019\u624d\u8fdb\u884c\u771f\u6b63setup     */    public boolean setUpLazy(String url, boolean cacheWithPlay, File cachePath, Map<String, String> mapHeadData, String title) {        mOriginUrl = url;        mCache = cacheWithPlay;        mCachePath = cachePath;        mSetUpLazy = true;        mTitle = title;        mMapHeadData = mapHeadData;        if (isCurrentMediaListener() &&                (System.currentTimeMillis() - mSaveChangeViewTIme) < CHANGE_DELAY_TIME)            return false;        mUrl = \"waiting\";        mCurrentState = CURRENT_STATE_NORMAL;        return true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "onClickUiToggle", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void onClickUiToggle();    protected abstract void hideAllWidget();    protected abstract void changeUiToNormal();    protected abstract void changeUiToPreparingShow();    protected abstract void changeUiToPlayingShow();    protected abstract void changeUiToPauseShow();    protected abstract void changeUiToError();    protected abstract void changeUiToCompleteShow();    protected abstract void changeUiToPlayingBufferingShow();    /************************* \u5f00\u653e\u63a5\u53e3 *************************/    /**     * \u5728\u70b9\u51fb\u64ad\u653e\u7684\u65f6\u5019\u624d\u8fdb\u884c\u771f\u6b63setup     */    public boolean setUpLazy(String url, boolean cacheWithPlay, File cachePath, Map<String, String> mapHeadData, String title) {        mOriginUrl = url;        mCache = cacheWithPlay;        mCachePath = cachePath;        mSetUpLazy = true;        mTitle = title;        mMapHeadData = mapHeadData;        if (isCurrentMediaListener() &&                (System.currentTimeMillis() - mSaveChangeViewTIme) < CHANGE_DELAY_TIME)            return false;        mUrl = \"waiting\";        mCurrentState = CURRENT_STATE_NORMAL;        return true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "hideAllWidget", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void hideAllWidget();    protected abstract void changeUiToNormal();    protected abstract void changeUiToPreparingShow();    protected abstract void changeUiToPlayingShow();    protected abstract void changeUiToPauseShow();    protected abstract void changeUiToError();    protected abstract void changeUiToCompleteShow();    protected abstract void changeUiToPlayingBufferingShow();    /************************* \u5f00\u653e\u63a5\u53e3 *************************/    /**     * \u5728\u70b9\u51fb\u64ad\u653e\u7684\u65f6\u5019\u624d\u8fdb\u884c\u771f\u6b63setup     */    public boolean setUpLazy(String url, boolean cacheWithPlay, File cachePath, Map<String, String> mapHeadData, String title) {        mOriginUrl = url;        mCache = cacheWithPlay;        mCachePath = cachePath;        mSetUpLazy = true;        mTitle = title;        mMapHeadData = mapHeadData;        if (isCurrentMediaListener() &&                (System.currentTimeMillis() - mSaveChangeViewTIme) < CHANGE_DELAY_TIME)            return false;        mUrl = \"waiting\";        mCurrentState = CURRENT_STATE_NORMAL;        return true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "changeUiToNormal", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void changeUiToNormal();    protected abstract void changeUiToPreparingShow();    protected abstract void changeUiToPlayingShow();    protected abstract void changeUiToPauseShow();    protected abstract void changeUiToError();    protected abstract void changeUiToCompleteShow();    protected abstract void changeUiToPlayingBufferingShow();    /************************* \u5f00\u653e\u63a5\u53e3 *************************/    /**     * \u5728\u70b9\u51fb\u64ad\u653e\u7684\u65f6\u5019\u624d\u8fdb\u884c\u771f\u6b63setup     */    public boolean setUpLazy(String url, boolean cacheWithPlay, File cachePath, Map<String, String> mapHeadData, String title) {        mOriginUrl = url;        mCache = cacheWithPlay;        mCachePath = cachePath;        mSetUpLazy = true;        mTitle = title;        mMapHeadData = mapHeadData;        if (isCurrentMediaListener() &&                (System.currentTimeMillis() - mSaveChangeViewTIme) < CHANGE_DELAY_TIME)            return false;        mUrl = \"waiting\";        mCurrentState = CURRENT_STATE_NORMAL;        return true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "changeUiToPreparingShow", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void changeUiToPreparingShow();    protected abstract void changeUiToPlayingShow();    protected abstract void changeUiToPauseShow();    protected abstract void changeUiToError();    protected abstract void changeUiToCompleteShow();    protected abstract void changeUiToPlayingBufferingShow();    /************************* \u5f00\u653e\u63a5\u53e3 *************************/    /**     * \u5728\u70b9\u51fb\u64ad\u653e\u7684\u65f6\u5019\u624d\u8fdb\u884c\u771f\u6b63setup     */    public boolean setUpLazy(String url, boolean cacheWithPlay, File cachePath, Map<String, String> mapHeadData, String title) {        mOriginUrl = url;        mCache = cacheWithPlay;        mCachePath = cachePath;        mSetUpLazy = true;        mTitle = title;        mMapHeadData = mapHeadData;        if (isCurrentMediaListener() &&                (System.currentTimeMillis() - mSaveChangeViewTIme) < CHANGE_DELAY_TIME)            return false;        mUrl = \"waiting\";        mCurrentState = CURRENT_STATE_NORMAL;        return true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "changeUiToPlayingShow", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void changeUiToPlayingShow();    protected abstract void changeUiToPauseShow();    protected abstract void changeUiToError();    protected abstract void changeUiToCompleteShow();    protected abstract void changeUiToPlayingBufferingShow();    /************************* \u5f00\u653e\u63a5\u53e3 *************************/    /**     * \u5728\u70b9\u51fb\u64ad\u653e\u7684\u65f6\u5019\u624d\u8fdb\u884c\u771f\u6b63setup     */    public boolean setUpLazy(String url, boolean cacheWithPlay, File cachePath, Map<String, String> mapHeadData, String title) {        mOriginUrl = url;        mCache = cacheWithPlay;        mCachePath = cachePath;        mSetUpLazy = true;        mTitle = title;        mMapHeadData = mapHeadData;        if (isCurrentMediaListener() &&                (System.currentTimeMillis() - mSaveChangeViewTIme) < CHANGE_DELAY_TIME)            return false;        mUrl = \"waiting\";        mCurrentState = CURRENT_STATE_NORMAL;        return true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "changeUiToPauseShow", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void changeUiToPauseShow();    protected abstract void changeUiToError();    protected abstract void changeUiToCompleteShow();    protected abstract void changeUiToPlayingBufferingShow();    /************************* \u5f00\u653e\u63a5\u53e3 *************************/    /**     * \u5728\u70b9\u51fb\u64ad\u653e\u7684\u65f6\u5019\u624d\u8fdb\u884c\u771f\u6b63setup     */    public boolean setUpLazy(String url, boolean cacheWithPlay, File cachePath, Map<String, String> mapHeadData, String title) {        mOriginUrl = url;        mCache = cacheWithPlay;        mCachePath = cachePath;        mSetUpLazy = true;        mTitle = title;        mMapHeadData = mapHeadData;        if (isCurrentMediaListener() &&                (System.currentTimeMillis() - mSaveChangeViewTIme) < CHANGE_DELAY_TIME)            return false;        mUrl = \"waiting\";        mCurrentState = CURRENT_STATE_NORMAL;        return true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "changeUiToError", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void changeUiToError();    protected abstract void changeUiToCompleteShow();    protected abstract void changeUiToPlayingBufferingShow();    /************************* \u5f00\u653e\u63a5\u53e3 *************************/    /**     * \u5728\u70b9\u51fb\u64ad\u653e\u7684\u65f6\u5019\u624d\u8fdb\u884c\u771f\u6b63setup     */    public boolean setUpLazy(String url, boolean cacheWithPlay, File cachePath, Map<String, String> mapHeadData, String title) {        mOriginUrl = url;        mCache = cacheWithPlay;        mCachePath = cachePath;        mSetUpLazy = true;        mTitle = title;        mMapHeadData = mapHeadData;        if (isCurrentMediaListener() &&                (System.currentTimeMillis() - mSaveChangeViewTIme) < CHANGE_DELAY_TIME)            return false;        mUrl = \"waiting\";        mCurrentState = CURRENT_STATE_NORMAL;        return true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "changeUiToCompleteShow", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void changeUiToCompleteShow();    protected abstract void changeUiToPlayingBufferingShow();    /************************* \u5f00\u653e\u63a5\u53e3 *************************/    /**     * \u5728\u70b9\u51fb\u64ad\u653e\u7684\u65f6\u5019\u624d\u8fdb\u884c\u771f\u6b63setup     */    public boolean setUpLazy(String url, boolean cacheWithPlay, File cachePath, Map<String, String> mapHeadData, String title) {        mOriginUrl = url;        mCache = cacheWithPlay;        mCachePath = cachePath;        mSetUpLazy = true;        mTitle = title;        mMapHeadData = mapHeadData;        if (isCurrentMediaListener() &&                (System.currentTimeMillis() - mSaveChangeViewTIme) < CHANGE_DELAY_TIME)            return false;        mUrl = \"waiting\";        mCurrentState = CURRENT_STATE_NORMAL;        return true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "changeUiToPlayingBufferingShow", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void changeUiToPlayingBufferingShow();    /************************* \u5f00\u653e\u63a5\u53e3 *************************/    /**     * \u5728\u70b9\u51fb\u64ad\u653e\u7684\u65f6\u5019\u624d\u8fdb\u884c\u771f\u6b63setup     */    public boolean setUpLazy(String url, boolean cacheWithPlay, File cachePath, Map<String, String> mapHeadData, String title) {        mOriginUrl = url;        mCache = cacheWithPlay;        mCachePath = cachePath;        mSetUpLazy = true;        mTitle = title;        mMapHeadData = mapHeadData;        if (isCurrentMediaListener() &&                (System.currentTimeMillis() - mSaveChangeViewTIme) < CHANGE_DELAY_TIME)            return false;        mUrl = \"waiting\";        mCurrentState = CURRENT_STATE_NORMAL;        return true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "setUpLazy", "params": ["String", "boolean", "File", "Map<String,String>", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean setUpLazy(String url, boolean cacheWithPlay, File cachePath, Map<String, String> mapHeadData, String title) {        mOriginUrl = url;        mCache = cacheWithPlay;        mCachePath = cachePath;        mSetUpLazy = true;        mTitle = title;        mMapHeadData = mapHeadData;        if (isCurrentMediaListener() &&                (System.currentTimeMillis() - mSaveChangeViewTIme) < CHANGE_DELAY_TIME)            return false;        mUrl = \"waiting\";        mCurrentState = CURRENT_STATE_NORMAL;        return true;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "initUIState", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void initUIState() {        setStateAndUi(CURRENT_STATE_NORMAL);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "getThumbImageViewLayout", "params": [], "throws": null, "modifiers": ["public"], "return_type": "RelativeLayout", "snippet": "    public RelativeLayout getThumbImageViewLayout() {        return mThumbImageViewLayout;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "setThumbImageView", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setThumbImageView(View view) {        if (mThumbImageViewLayout != null) {            mThumbImageView = view;            resolveThumbImage(view);        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "clearThumbImageView", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clearThumbImageView() {        if (mThumbImageViewLayout != null) {            mThumbImageViewLayout.removeAllViews();        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "getThumbImageView", "params": [], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View getThumbImageView() {        return mThumbImageView;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "getTitleTextView", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TextView", "snippet": "    public TextView getTitleTextView() {        return mTitleTextView;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "getStartButton", "params": [], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View getStartButton() {        return mStartButton;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "getFullscreenButton", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ImageView", "snippet": "    public ImageView getFullscreenButton() {        return mFullscreenButton;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "getBackButton", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ImageView", "snippet": "    public ImageView getBackButton() {        return mBackButton;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "getEnlargeImageRes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getEnlargeImageRes() {        if (mEnlargeImageRes == -1) {            return R.drawable.video_enlarge;        }        return mEnlargeImageRes;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "setEnlargeImageRes", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setEnlargeImageRes(int mEnlargeImageRes) {        this.mEnlargeImageRes = mEnlargeImageRes;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "getShrinkImageRes", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getShrinkImageRes() {        if (mShrinkImageRes == -1) {            return R.drawable.video_shrink;        }        return mShrinkImageRes;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "setShrinkImageRes", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setShrinkImageRes(int mShrinkImageRes) {        this.mShrinkImageRes = mShrinkImageRes;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "setIsTouchWigetFull", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIsTouchWigetFull(boolean isTouchWigetFull) {        this.mIsTouchWigetFull = isTouchWigetFull;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "setThumbPlay", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setThumbPlay(boolean thumbPlay) {        this.mThumbPlay = thumbPlay;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "isHideKey", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isHideKey() {        return mHideKey;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "setHideKey", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setHideKey(boolean hideKey) {        this.mHideKey = hideKey;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "isNeedShowWifiTip", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isNeedShowWifiTip() {        return mNeedShowWifiTip;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "isTouchWiget", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isTouchWiget() {        return mIsTouchWiget;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "setIsTouchWiget", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setIsTouchWiget(boolean isTouchWiget) {        this.mIsTouchWiget = isTouchWiget;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "isTouchWigetFull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isTouchWigetFull() {        return mIsTouchWigetFull;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "setNeedShowWifiTip", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setNeedShowWifiTip(boolean needShowWifiTip) {        this.mNeedShowWifiTip = needShowWifiTip;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "setSeekRatio", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSeekRatio(float seekRatio) {        if (seekRatio < 0) {            return;        }        this.mSeekRatio = seekRatio;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "getSeekRatio", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getSeekRatio() {        return mSeekRatio;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "isNeedLockFull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isNeedLockFull() {        return mNeedLockFull;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "setNeedLockFull", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setNeedLockFull(boolean needLoadFull) {        this.mNeedLockFull = needLoadFull;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "setLockClickListener", "params": ["LockClickListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setLockClickListener(LockClickListener lockClickListener) {        this.mLockClickListener = lockClickListener;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "setDismissControlTime", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDismissControlTime(int dismissControlTime) {        this.mDismissControlTime = dismissControlTime;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "getDismissControlTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getDismissControlTime() {        return mDismissControlTime;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "setGSYVideoProgressListener", "params": ["GSYVideoProgressListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setGSYVideoProgressListener(GSYVideoProgressListener videoProgressListener) {        this.mGSYVideoProgressListener = videoProgressListener;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/video/base/GSYVideoControlView.java", "stars": "2", "class": {"name": "GSYVideoControlView", "extends": "GSYVideoView", "implements": ["View", "View", "SeekBar"], "modifiers": ["public", "abstract"]}}, {"method_name": "put", "params": ["E"], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void put(E e) throws InterruptedException {    lock.lock(); // can be interruptible, or with timeout!    try {      while (count == 10)        notFull.await();      data[count++] = e;      notEmpty.signal();    } finally {      lock.unlock();    }  }", "url": "https://raw.githubusercontent.com/SimonHGR/safari-threads/master/src/main/java/queue/BetterYetQueue.java", "stars": "3", "class": {"name": "BetterYetQueue", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "take", "params": [], "throws": ["InterruptedException"], "modifiers": ["public"], "return_type": "E", "snippet": "  public E take() throws InterruptedException {    lock.lock();    try {      while (count == 0) // MIGHT wake up for wrong reasons (OS limitation)        notEmpty.await();      E rv = data[0];      System.arraycopy(data, 1, data, 0, --count);      notFull.signal();      return rv;    } finally {      lock.unlock();    }  }", "url": "https://raw.githubusercontent.com/SimonHGR/safari-threads/master/src/main/java/queue/BetterYetQueue.java", "stars": "3", "class": {"name": "BetterYetQueue", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "  public static void main(String[] args) {    BetterYetQueue<int[]> queue = new BetterYetQueue<>();    new Thread(()-> {      System.out.println(\"Producer starting...\");      for (int i = 0; i < 10_000; i++) {        int [] data = {i, 0};        try {          if (i < 100) {            Thread.sleep(1);          }          data[1] = i;          if (i == 5_000) {            data[0] = -99;          }          queue.put(data); data = null; // SIMON SAYS!!!        } catch (InterruptedException e) {          e.printStackTrace();        }      }      System.out.println(\"Producer ending...\");    }).start();    new Thread(()-> {      System.out.println(\"Consumer starting...\");      for (int i = 0; i < 10_000; i++) {        try {          int [] data = queue.take();          if (data[0] != i || data[1] != i) {            System.out.println(\"**** ERROR at index \" + i);          }          if (i > 9_900) {            Thread.sleep(1);          }        } catch (InterruptedException ie) {          ie.printStackTrace();        }      }      System.out.println(\"Consumer ending...\");    }).start();  }", "url": "https://raw.githubusercontent.com/SimonHGR/safari-threads/master/src/main/java/queue/BetterYetQueue.java", "stars": "3", "class": {"name": "BetterYetQueue", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sendMsg", "params": ["String"], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void sendMsg(String msg) {    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/mp/handler/MpMsgService.java", "stars": "6", "class": {"name": "MpMsgService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sendTemplateMsg1", "params": ["String", "String", "String", "String", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendTemplateMsg1(String openId, String deviceName, String deviceInfo, String msgType, String createTime, String remark) {        WxMpTemplateMessage tsMessage = WxMpTemplateMessage.builder()                .toUser(openId)                .templateId(\"HjUvN0HogQAPVfvN9b-Yyq_rC6SbxzTM7f7Eq9p746s\")                .build();        // \u6d4b\u8bd5\u8d26\u53f7        if (StringUtils.isBlank(wxMpService.getWxMpConfigStorage().getAesKey())) {            tsMessage.setTemplateId(securityProperties.getWx().getTemplateId());        }        tsMessage.addData(new WxMpTemplateData(\"keyword1\", deviceName));        tsMessage.addData(new WxMpTemplateData(\"keyword2\", deviceInfo));        tsMessage.addData(new WxMpTemplateData(\"keyword3\", msgType));        tsMessage.addData(new WxMpTemplateData(\"keyword4\", createTime));        tsMessage.addData(new WxMpTemplateData(\"remark\", remark));        try {            wxMpService.getTemplateMsgService().sendTemplateMsg(tsMessage);        } catch (WxErrorException e) {            log.error(e);        }    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/mp/handler/MpMsgService.java", "stars": "6", "class": {"name": "MpMsgService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sendTextMsg", "params": ["String", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendTextMsg(String openId, String deviceName, String msg) {        WxMpKefuMessage build = WxMpKefuMessage                .TEXT()                .toUser(openId)                .content(deviceName + \": \" + msg)                .build();        if (StringUtils.isBlank(deviceName)) {            build.setContent(msg);        }        try {            wxMpService.getKefuService().sendKefuMessage(build);        } catch (WxErrorException e) {            log.error(e);        }    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/mp/handler/MpMsgService.java", "stars": "6", "class": {"name": "MpMsgService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sendImgMsg", "params": ["String", "String", "byte"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void sendImgMsg(String openId, String deviceName, byte[] img) {        File file = null;        try {            // \u4e0a\u4f20            file = new File(IdUtil.fastSimpleUUID());            FileUtil.writeBytes(img, file);            WxMediaUploadResult wxMediaUploadResult = wxMpService                    .getMaterialService()                    .mediaUpload(WxConsts.KefuMsgType.IMAGE, file);            // \u53d1\u9001\u7ed9\u7528\u6237            WxMpKefuMessage build = WxMpKefuMessage                    .IMAGE()                    .toUser(openId)                    .mediaId(wxMediaUploadResult.getMediaId())                    .build();            wxMpService.getKefuService().sendKefuMessage(build);        } catch (WxErrorException e) {            e.printStackTrace();            file.deleteOnExit();            log.error(e);        }    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/mp/handler/MpMsgService.java", "stars": "6", "class": {"name": "MpMsgService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setup", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "    static void setup() throws Exception {        DataSource dataSource = BaseDataTest.createBlogDataSource();        TransactionFactory transactionFactory = new JdbcTransactionFactory();        Environment environment = new Environment(\"Production\", transactionFactory, dataSource);        Configuration configuration = new Configuration(environment);        configuration.addMapper(Mapper.class);        sqlSessionFactory = new SqlSessionFactoryBuilder().build(configuration);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/AutoMappingUnknownColumnBehaviorTest.java", "stars": "15", "class": {"name": "AutoMappingUnknownColumnBehaviorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "none", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void none() {        sqlSessionFactory.getConfiguration().setAutoMappingUnknownColumnBehavior(AutoMappingUnknownColumnBehavior.NONE);        try (SqlSession session = sqlSessionFactory.openSession()) {            Mapper mapper = session.getMapper(Mapper.class);            Author author = mapper.selectAuthor(101);            assertThat(author.getId()).isEqualTo(101);            assertThat(author.getUsername()).isNull();        }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/AutoMappingUnknownColumnBehaviorTest.java", "stars": "15", "class": {"name": "AutoMappingUnknownColumnBehaviorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "warningCauseByUnknownPropertyType", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void warningCauseByUnknownPropertyType() {        sqlSessionFactory.getConfiguration().setAutoMappingUnknownColumnBehavior(AutoMappingUnknownColumnBehavior.WARNING);        try (SqlSession session = sqlSessionFactory.openSession()) {            Mapper mapper = session.getMapper(Mapper.class);            SimpleAuthor author = mapper.selectSimpleAuthor(101);            assertThat(author.getId()).isNull();            assertThat(author.getUsername()).isEqualTo(\"jim\");            assertThat(LastEventSavedAppender.event.getMessage().toString()).isEqualTo(\"Unknown column is detected on 'org.apache.ibatis.session.AutoMappingUnknownColumnBehaviorTest$Mapper.selectSimpleAuthor' auto-mapping. Mapping parameters are [columnName=ID,propertyName=id,propertyType=java.util.concurrent.atomic.AtomicInteger]\");        }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/AutoMappingUnknownColumnBehaviorTest.java", "stars": "15", "class": {"name": "AutoMappingUnknownColumnBehaviorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "failingCauseByUnknownColumn", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void failingCauseByUnknownColumn() {        sqlSessionFactory.getConfiguration().setAutoMappingUnknownColumnBehavior(AutoMappingUnknownColumnBehavior.FAILING);        try (SqlSession session = sqlSessionFactory.openSession()) {            Mapper mapper = session.getMapper(Mapper.class);            mapper.selectAuthor(101);        } catch (PersistenceException e) {            assertThat(e.getCause()).isInstanceOf(SqlSessionException.class);            assertThat(e.getCause().getMessage()).isEqualTo(\"Unknown column is detected on 'org.apache.ibatis.session.AutoMappingUnknownColumnBehaviorTest$Mapper.selectAuthor' auto-mapping. Mapping parameters are [columnName=USERNAMEEEE,propertyName=USERNAMEEEE,propertyType=null]\");        }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/AutoMappingUnknownColumnBehaviorTest.java", "stars": "15", "class": {"name": "AutoMappingUnknownColumnBehaviorTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "AtomicInteger", "snippet": "        public AtomicInteger getId() {            return id;        }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/AutoMappingUnknownColumnBehaviorTest.java", "stars": "15", "class": {"name": "SimpleAuthor", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "setId", "params": ["AtomicInteger"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setId(AtomicInteger id) {            this.id = id;        }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/AutoMappingUnknownColumnBehaviorTest.java", "stars": "15", "class": {"name": "SimpleAuthor", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "getUsername", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getUsername() {            return username;        }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/AutoMappingUnknownColumnBehaviorTest.java", "stars": "15", "class": {"name": "SimpleAuthor", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "setUsername", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void setUsername(String username) {            this.username = username;        }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/AutoMappingUnknownColumnBehaviorTest.java", "stars": "15", "class": {"name": "SimpleAuthor", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "doAppend", "params": ["LoggingEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void doAppend(LoggingEvent event) {            LastEventSavedAppender.event = event;        }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/session/AutoMappingUnknownColumnBehaviorTest.java", "stars": "15", "class": {"name": "LastEventSavedAppender", "extends": "NullAppender", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "main", "params": ["String"], "throws": ["InterruptedException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) throws InterruptedException {\t\t\t\t\t\tSystem.setProperty(ChromeDriverService.CHROME_DRIVER_SILENT_OUTPUT_PROPERTY, \"true\");\t\t// System.setProperty(\"webdriver.chrome.silentOutput\", \"true\");\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"drivers/chromedriver.exe\");\t\tWebDriver driver = new ChromeDriver();\t\tString url = \"http://jiravm.centralus.cloudapp.azure.com:8081/index.html\";\t\tdriver.get(url);\t\t\t\tdriver.findElement(By.linkText(\"Others\")).click();\t\t\t\tdriver.findElement(By.linkText(\"Iframe\")).click();\t\t\t\tThread.sleep(15000);\t\tdriver.switchTo().frame(\"FrameOne\");\t\t\t\tdriver.findElement(By.linkText(\"Home\")).click();\t\t\t\tdriver.switchTo().defaultContent();\t\t\t\tThread.sleep(15000);\t\t\t\tWebElement frameTwo=driver.findElement(By.xpath(\"//iframe[@name='FrameTwo']\"));\t\tdriver.switchTo().frame(frameTwo);\t\t\t\tWebElement logo=driver.findElement(By.xpath(\"//a[@class='custom-logo-link']\"));\t\t\t\tboolean isLogoDisplayed=logo.isDisplayed();\t\t\t\tif(isLogoDisplayed) {\t\t\tSystem.out.println(\"Test PASS\");\t\t}else {\t\t\tSystem.out.println(\"Test FAIL\");\t\t}\t\t\t\tThread.sleep(3000);\t\tdriver.quit();\t}", "url": "https://raw.githubusercontent.com/fadimedibi/SeleniumTurkish/master/src/com/class5/FrameHandling.java", "stars": "3", "class": {"name": "FrameHandling", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "furnaceFuelBurnTimeEvent", "params": ["FurnaceFuelBurnTimeEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void furnaceFuelBurnTimeEvent(FurnaceFuelBurnTimeEvent event) {\t\tif (event.getItemStack().getItem() == new ItemStack(JungleTanbarkBlock.block, (int) (1)).getItem())\t\t\tevent.setBurnTime(1600);\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/fuel/JungleFuel.java", "stars": "2", "class": {"name": "JungleFuel", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "encode", "params": ["ChannelHandlerContext", "ProtocolBody", "ByteBuf"], "throws": ["Exception"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void encode(ChannelHandlerContext ctx, ProtocolBody protocolBody, ByteBuf out) throws Exception {        encoder.encode(ctx, protocolBody, out);    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/netty/tcp/codec/PackageEncoder.java", "stars": "6", "class": {"name": "PackageEncoder", "extends": "MessageToByteEncoder", "implements": null, "modifiers": ["public"]}}, {"method_name": "webLog", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void webLog(){}", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/aspect/WebLogAspect.java", "stars": "2", "class": {"name": "WebLogAspect", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "doBefore", "params": ["JoinPoint"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void doBefore(JoinPoint joinPoint){        startTime.set(System.currentTimeMillis());        //\u63a5\u6536\u5230\u8bf7\u6c42\uff0c\u8bb0\u5f55\u8bf7\u6c42\u5185\u5bb9        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();        HttpServletRequest request = attributes.getRequest();     //   HttpSession session = request.getSession();        // \u8bb0\u5f55\u4e0b\u8bf7\u6c42\u5185\u5bb9        LOGGER.info(\"URL : \" + request.getRequestURL().toString());        LOGGER.info(\"HTTP_METHOD : \" + request.getMethod());        LOGGER.info(\"IP : \" + request.getRemoteAddr());        LOGGER.info(\"CLASS_METHOD : \" + joinPoint.getSignature().getDeclaringTypeName() + \".\" + joinPoint.getSignature().getName());        LOGGER.info(\"ARGS : \" + Arrays.toString(joinPoint.getArgs()));    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/aspect/WebLogAspect.java", "stars": "2", "class": {"name": "WebLogAspect", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "doAfterReturning", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void doAfterReturning(Object ret)  {        // \u5904\u7406\u5b8c\u8bf7\u6c42\uff0c\u8fd4\u56de\u5185\u5bb9        LOGGER.info(\"RESPONSE : \" + ret);        LOGGER.info(\"SPEND TIME : \" + (System.currentTimeMillis() - startTime.get()));        startTime.remove();//\u7528\u5b8c\u4e4b\u540e\u8bb0\u5f97\u6e05\u9664\uff0c\u4e0d\u7136\u53ef\u80fd\u5bfc\u81f4\u5185\u5b58\u6cc4\u9732;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/aspect/WebLogAspect.java", "stars": "2", "class": {"name": "WebLogAspect", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getId() {        return id;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDO.java", "stars": "1", "class": {"name": "ItemDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setId", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setId(Integer id) {        this.id = id;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDO.java", "stars": "1", "class": {"name": "ItemDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTitle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTitle() {        return title;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDO.java", "stars": "1", "class": {"name": "ItemDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTitle", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTitle(String title) {        this.title = title;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDO.java", "stars": "1", "class": {"name": "ItemDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPrice", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BigDecimal", "snippet": "    public BigDecimal getPrice() {        return price;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDO.java", "stars": "1", "class": {"name": "ItemDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPrice", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPrice(BigDecimal price) {        this.price = price;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDO.java", "stars": "1", "class": {"name": "ItemDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDescription", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getDescription() {        return description;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDO.java", "stars": "1", "class": {"name": "ItemDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDescription", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDescription(String description) {        this.description = description;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDO.java", "stars": "1", "class": {"name": "ItemDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSales", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer getSales() {        return sales;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDO.java", "stars": "1", "class": {"name": "ItemDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSales", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSales(Integer sales) {        this.sales = sales;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDO.java", "stars": "1", "class": {"name": "ItemDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getImgUrl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getImgUrl() {        return imgUrl;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDO.java", "stars": "1", "class": {"name": "ItemDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setImgUrl", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setImgUrl(String imgUrl) {        this.imgUrl = imgUrl;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDO.java", "stars": "1", "class": {"name": "ItemDO", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws IOException {        read_utf_8();    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/java2/Stream/InputStreamReaderDemo.java", "stars": "2", "class": {"name": "InputStreamReaderDemo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "read_utf_8", "params": [], "throws": ["IOException"], "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void read_utf_8() throws IOException {        //1\u3001\u521b\u5efa InputStreamReader \u5bf9\u8c61\uff0c\u6784\u9020\u65b9\u6cd5\u4e2d\u4f20\u9012\u5b57\u8282\u8f93\u5165\u6d41\u548c\u6307\u5b9a\u7684\u7f16\u7801\u8868\u540d\u79f0        InputStreamReader isr = new InputStreamReader(new FileInputStream(\"/Users/chengcheng/Desktop/test/abc/abc.txt\"),\"utf-8\");        //2\u3001\u4f7f\u7528 InputStreamReader \u5bf9\u8c61\u4e2d\u7684\u65b9\u6cd5 read \u8bfb\u53d6\u6587\u4ef6        int len = 0;        while((len = isr.read()) != -1){            System.out.println(len);        }        //3\u3001\u91ca\u653e\u8d44\u6e90        isr.close();    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/java2/Stream/InputStreamReaderDemo.java", "stars": "2", "class": {"name": "InputStreamReaderDemo", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tBubbleSort bs = new BubbleSort();\t\t\t\tint[] arr = {1,1,21,1};\t\t\t\tbs.sort(arr);\t\t\t\tfor(int i =0 ;i < arr.length; i++) {\t\t\tSystem.out.print(arr[i]+\" \");\t\t}\t}", "url": "https://raw.githubusercontent.com/likith22/DataStructures/master/TestBubbleSort.java", "stars": "2", "class": {"name": "TestBubbleSort", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onBluetoothAdapterStateChanged", "params": ["int"], "throws": null, "modifiers": ["static"], "return_type": "MethodInfo", "snippet": "    static MethodInfo onBluetoothAdapterStateChanged(int state) {        return new MethodInfo(\"onBluetoothAdapterStateChanged\", new MethodInfo.Parameter(int.class, state));    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/MethodInfoGenerator.java", "stars": "3", "class": {"name": "MethodInfoGenerator", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onConnectionStateChanged", "params": ["BluetoothDevice", "int"], "throws": null, "modifiers": ["static"], "return_type": "MethodInfo", "snippet": "    static MethodInfo onConnectionStateChanged(BluetoothDevice device, int state) {        return new MethodInfo(\"onConnectionStateChanged\", new MethodInfo.Parameter(BluetoothDevice.class, device),                new MethodInfo.Parameter(int.class, state));    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/MethodInfoGenerator.java", "stars": "3", "class": {"name": "MethodInfoGenerator", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onRead", "params": ["BluetoothDevice", "byte"], "throws": null, "modifiers": ["static"], "return_type": "MethodInfo", "snippet": "    static MethodInfo onRead(BluetoothDevice device, byte[] value) {        return new MethodInfo(\"onRead\", new MethodInfo.Parameter(BluetoothDevice.class, device),                new MethodInfo.Parameter(byte[].class, value));    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/MethodInfoGenerator.java", "stars": "3", "class": {"name": "MethodInfoGenerator", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onWrite", "params": ["BluetoothDevice", "String", "byte", "boolean"], "throws": null, "modifiers": ["static"], "return_type": "MethodInfo", "snippet": "    static MethodInfo onWrite(BluetoothDevice device, @NonNull String tag, @NonNull byte[] value, boolean result) {        return new MethodInfo(\"onWrite\", new MethodInfo.Parameter(BluetoothDevice.class, device),                new MethodInfo.Parameter(String.class, tag), new MethodInfo.Parameter(byte[].class, value),                new MethodInfo.Parameter(boolean.class, result));    }", "url": "https://raw.githubusercontent.com/wandersnail/classic-bluetooth/master/library/src/main/java/cn/wandersnail/bluetooth/MethodInfoGenerator.java", "stars": "3", "class": {"name": "MethodInfoGenerator", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "resolveEntity", "params": ["String", "String"], "throws": ["SAXException"], "modifiers": ["public"], "return_type": "InputSource", "snippet": "  public InputSource resolveEntity(String publicId, String systemId) throws SAXException {    try {      if (systemId != null) {        String lowerCaseSystemId = systemId.toLowerCase(Locale.ENGLISH);        if (lowerCaseSystemId.contains(MYBATIS_CONFIG_SYSTEM) || lowerCaseSystemId.contains(IBATIS_CONFIG_SYSTEM)) {          return getInputSource(MYBATIS_CONFIG_DTD, publicId, systemId);        } else if (lowerCaseSystemId.contains(MYBATIS_MAPPER_SYSTEM) || lowerCaseSystemId.contains(IBATIS_MAPPER_SYSTEM)) {          return getInputSource(MYBATIS_MAPPER_DTD, publicId, systemId);        }      }      return null;    } catch (Exception e) {      throw new SAXException(e.toString());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/xml/XMLMapperEntityResolver.java", "stars": "15", "class": {"name": "XMLMapperEntityResolver", "extends": null, "implements": ["EntityResolver"], "modifiers": ["public"]}}, {"method_name": "getInputSource", "params": ["String", "String", "String"], "throws": null, "modifiers": ["private"], "return_type": "InputSource", "snippet": "  private InputSource getInputSource(String path, String publicId, String systemId) {    InputSource source = null;    if (path != null) {      try {        InputStream in = Resources.getResourceAsStream(path);        source = new InputSource(in);        source.setPublicId(publicId);        source.setSystemId(systemId);      } catch (IOException e) {        // ignore, null is ok      }    }    return source;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/builder/xml/XMLMapperEntityResolver.java", "stars": "15", "class": {"name": "XMLMapperEntityResolver", "extends": null, "implements": ["EntityResolver"], "modifiers": ["public"]}}, {"method_name": "a", "params": ["int"], "throws": ["Exception"], "modifiers": ["private", "static"], "return_type": "int", "snippet": "    private static int a(int var0) throws Exception {        int var1 = 1;        int var2 = 1;        if (var0 < 0) {            throw new Exception(\"nCount can't small than 1!\");        } else {            if (var0 != 0) {                int var3 = 0;                while (true) {                    var2 = var1;                    if (var3 >= var0) {                        break;                    }                    ++var3;                    var1 <<= 4;                }            }            return var2;        }    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/app/src/main/java/com/wxwteam/bleapp/utils/DataDealUtil.java", "stars": "2", "class": {"name": "DataDealUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "a", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "byte", "snippet": "    public static byte[] a(String var0) {        byte[] var7;        if (var0 != null && !var0.equals(\"\")) {            var0 = var0.toUpperCase();            int var1 = var0.length() / 2;            char[] var2 = var0.toCharArray();            byte[] var3 = new byte[var1];            int var4 = 0;            while (true) {                var7 = var3;                if (var4 >= var1) {                    break;                }                int var5 = var4 << 1;                byte var6 = (byte) \"0123456789ABCDEF\".indexOf(var2[var5]);                var3[var4] = (byte) ((byte) ((byte) \"0123456789ABCDEF\".indexOf(var2[var5 + 1]) | var6 << 4));                ++var4;            }        } else {            var7 = null;        }        return var7;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/app/src/main/java/com/wxwteam/bleapp/utils/DataDealUtil.java", "stars": "2", "class": {"name": "DataDealUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "a", "params": ["byte"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String[] a(byte[] var0) {        String[] var6;        if (var0 != null && var0.length != 0) {            StringBuilder var1 = new StringBuilder();            int var2 = var0.length;            boolean var3 = true;            for (int var4 = 0; var4 < var2; var3 = false) {                byte var5 = var0[var4];                if (!var3) {                    var1.append(\",\");                }                var1.append(\"0123456789ABCDEF\".charAt((var5 & 240) >> 4));                var1.append(\"0123456789ABCDEF\".charAt(var5 & 15));                ++var4;            }            var6 = var1.toString().trim().split(\",\");        } else {            var6 = null;        }        return var6;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/app/src/main/java/com/wxwteam/bleapp/utils/DataDealUtil.java", "stars": "2", "class": {"name": "DataDealUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "b", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String b(String var0) {        String var1;        if (var0 != null && var0.length() % 2 == 0) {            String var2 = \"\";            int var3 = 0;            while (true) {                var1 = var2;                if (var3 >= var0.length()) {                    break;                }                var1 = \"0000\" + Integer.toBinaryString(Integer.parseInt(var0.substring(var3, var3 + 1), 16));                var2 = var2 + var1.substring(var1.length() - 4);                ++var3;            }        } else {            var1 = null;        }        return var1;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/app/src/main/java/com/wxwteam/bleapp/utils/DataDealUtil.java", "stars": "2", "class": {"name": "DataDealUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "c", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int c(String var0) {        byte var1 = 0;        byte var2 = 0;        int var3;        if (var0.length() <= 2 || var0.charAt(0) != '0' || var0.charAt(1) != 'X' && var0.charAt(1) != 'x') {            var3 = 0;        } else {            var3 = 2;        }        boolean var11;        while (true) {            if (var3 >= var0.length()) {                var11 = true;                break;            }            char var4 = var0.charAt(var3);            if ((var4 < '0' || var4 > '9') && (var4 < 'A' || var4 > 'F') && (var4 < 'a' || var4 > 'f')) {                var11 = false;                break;            }            ++var3;        }        int var8;        if (!var11) {            var8 = var2;        } else {            String var5 = var0.toUpperCase();            var0 = var5;            if (var5.length() > 2) {                var0 = var5;                if (var5.charAt(0) == '0') {                    var0 = var5;                    if (var5.charAt(1) == 'X') {                        var0 = var5.substring(2);                    }                }            }            int var12 = var0.length();            int var10 = 0;            var3 = var1;            while (true) {                var8 = var3;                if (var10 >= var12) {                    break;                }                label77:                {                    Exception var13;                    Exception var10000;                    label124:                    {                        char var9 = var0.charAt(var12 - var10 - 1);                        boolean var10001;                        if (var9 >= '0' && var9 <= '9') {                            var8 = var9 - 48;                        } else if (var9 >= 'a' && var9 <= 'f') {                            var8 = var9 - 97 + 10;                        } else {                            if (var9 < 'A' || var9 > 'F') {                                try {                                    var13 = new Exception(\"error param\");                                    throw var13;                                } catch (Exception var6) {                                    var10000 = var6;                                    var10001 = false;                                    break label124;                                }                            }                            var8 = var9 - 65 + 10;                        }                        try {                            var8 = var3 + var8 * a(var10);                        } catch (Exception var7) {                            var10000 = var7;                            var10001 = false;                            break label124;                        }                        var3 = var8;                        break label77;                    }                    var13 = var10000;                    var13.printStackTrace();                }                ++var10;            }        }        return var8;    }", "url": "https://raw.githubusercontent.com/wxw6860/BLEAPP/master/app/src/main/java/com/wxwteam/bleapp/utils/DataDealUtil.java", "stars": "2", "class": {"name": "DataDealUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getDecoderFromDevice", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "Decoder", "snippet": "    public static Decoder getDecoderFromDevice() {        /*         * Try first blacklisted decoders (for all android versions)         */        for (DecoderBySOC decBySOC : sBlacklistedDecoderBySOCList) {            final String prop = getSystemPropertyCached(decBySOC.key);            if (prop != null) {                if (prop.contains(decBySOC.value))                    return decBySOC.dec;            }        }        /*         * Always try MediaCodec after JellyBean MR2,         * Try OMX or MediaCodec after HoneyComb depending on device properties.         * Otherwise, use software decoder by default.         */        if (AndroidUtil.isJellyBeanMR2OrLater())            return Decoder.ALL;        else if (AndroidUtil.isHoneycombOrLater()) {            for (DecoderBySOC decBySOC : sDecoderBySOCList) {                final String prop = getSystemPropertyCached(decBySOC.key);                if (prop != null) {                    if (prop.contains(decBySOC.value))                        return decBySOC.dec;                }            }        }        return Decoder.UNKNOWN;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/util/HWDecoderUtil.java", "stars": "4", "class": {"name": "HWDecoderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAudioOutputFromDevice", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "AudioOutput", "snippet": "    public static AudioOutput getAudioOutputFromDevice() {        if (!AndroidUtil.isGingerbreadOrLater()) {            return AudioOutput.AUDIOTRACK;        } else {            for (AudioOutputBySOC aoutBySOC : sAudioOutputBySOCList) {                final String prop = getSystemPropertyCached(aoutBySOC.key);                if (prop != null) {                    if (prop.contains(aoutBySOC.value))                        return aoutBySOC.aout;                }            }            return AudioOutput.ALL;        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/util/HWDecoderUtil.java", "stars": "4", "class": {"name": "HWDecoderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSystemPropertyCached", "params": ["String"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "    private static String getSystemPropertyCached(String key) {        String prop = sSystemPropertyMap.get(key);        if (prop == null) {            prop = getSystemProperty(key, \"none\");            sSystemPropertyMap.put(key, prop);        }        return prop;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/util/HWDecoderUtil.java", "stars": "4", "class": {"name": "HWDecoderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getSystemProperty", "params": ["String", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "String", "snippet": "    private static String getSystemProperty(String key, String def) {        try {            final ClassLoader cl = ClassLoader.getSystemClassLoader();            final Class<?> SystemProperties = cl.loadClass(\"android.os.SystemProperties\");            final Class<?>[] paramTypes = new Class[] { String.class, String.class };            final Method get = SystemProperties.getMethod(\"get\", paramTypes);            final Object[] params = new Object[] { key, def };            return (String) get.invoke(SystemProperties, params);        } catch (Exception e){            return def;        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/vlc/src/main/java/org/videolan/libvlc/util/HWDecoderUtil.java", "stars": "4", "class": {"name": "HWDecoderUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "install", "params": ["RoleEnum", "InitConfigEntity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void install(RoleEnum role, InitConfigEntity configEntity) {        List<String> allMyIps = NetUtil.getLocalIPList();        Map<RoleEnum, List<ServerEntity>> rolesMap = this.rolesBiz.getRolesMap();        List<ServerEntity> serverList = rolesMap.get(role);        boolean first = true;        for (ServerEntity server : serverList) {            if (server.getStatus() != InstallStatusEnum.SUCCESS) {                // \u5982\u679c\u4e3b\u8282\u70b9\u4e5f\u662f\u6b64\u89d2\u8272\uff0c\u5219\u5148\u5b89\u88c5                int initCount = 1;                if (allMyIps.stream().anyMatch(ip -> ip.equals(server.getHost()))) {                    Map<String, String> hosts = environmentService.getRoleNeedSetHost(role, configEntity);                    if (startRole(role, server.getRolePorts(), hosts, null)) {                        server.setStatus(InstallStatusEnum.SUCCESS);                    }                    InstallResult result = new InstallResult();                    result.setRole(server.getRole());                    result.setSuccess(true);                    updateInstallResult(server.getHost(), result, configEntity);                } else {                    //\u8bbe\u7f6e\u91cd\u8bd5\u6b21\u6570\u521d\u59cb\u5316\u503c                    int retryCount = 1;                    //\u8bbe\u7f6e\u91cd\u8bd5\u6b21\u6570                    int retryTotal = 10;                    // \u53d1\u9001\u5b89\u88c5\u6307\u4ee4\u7ed9\u4ece\u8282\u70b9                    do {                        HttpInstallResponse response = remoteService.sendInstallCommand(server, role, null, configEntity);                        if (ResponseCode.SUCCESS.getCode().equals(response.getCode())) {                            // log.warn(String.format(\"\u53d1\u9001\u5b89\u88c5\u6307\u4ee4\u7ed9 %s \u8282\u70b9\u5b89\u88c5 %s \u6210\u529f\", server.getHost(), role.name().toLowerCase()));                            log.warn(String.format(\"Send installation instructions to %s node to install %s successfully\", server.getHost(), role.name().toLowerCase()));                            server.setStatus(InstallStatusEnum.INSTALLING);                            break;                        }                        if (retryCount == retryTotal) {                            break;                        }                        // log.warn(String.format(\"\u53d1\u9001\u5b89\u88c5\u6307\u4ee4\u7ed9 %s \u8282\u70b9\u5b89\u88c5 %s \u5931\u8d25\uff0c\u7a0d\u540e\u91cd\u8bd5...\", server.getHost(), role.name().toLowerCase()));                        log.warn(String.format(\"Failed to sending installation instructions to %s node  to install %s, try again later...\", server.getHost(), role.name().toLowerCase()));                        try {                            Thread.sleep(3000);                        } catch (InterruptedException e) {                            e.printStackTrace();                        }                        retryCount++;                    } while (true);                }            }        }        // \u7b49\u5f85\u5b8c\u6210\u5b89\u88c5        int checkCount = 1;        int checkTotal = 10;        while (serverList.stream().anyMatch(s -> s.getStatus() != InstallStatusEnum.SUCCESS)) {            if (checkCount == checkTotal) {                break;            }            // log.info(String.format(\"\u7b49\u5f85\u6240\u6709 %s \u8282\u70b9\u5b8c\u6210\u5b89\u88c5...\", role.name().toLowerCase()));            log.info(String.format(\"Wait for all %s nodes to complete the installation...\", role.name().toLowerCase()));            try {                Thread.sleep(10000);            } catch (InterruptedException e) {                e.printStackTrace();            }            checkCount++;        }    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/service/InstallService.java", "stars": "7", "class": {"name": "InstallService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "startRole", "params": ["RoleEnum", "List<String>", "Map<String,String>", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean startRole(RoleEnum role, List<String> rolePorts, Map<String, String> hosts, String roleFolderName) {        return startRole(role, rolePorts, hosts, roleFolderName, null);    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/service/InstallService.java", "stars": "7", "class": {"name": "InstallService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "startRole", "params": ["RoleEnum", "List<String>", "Map<String,String>", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean startRole(RoleEnum role, List<String> rolePorts, Map<String, String> hosts, String roleFolderName, String host) {        // log.info(String.format(\"\u5f00\u59cb\u6267\u884c\u89d2\u8272 %s \u7684\u811a\u672c\", role.name()));        log.info(String.format(\"Start executing the script code of role %s\", role.name()));        if (!new File(modeService.getInstallPath()).exists()) {            FileUtil.makeFilePath(modeService.getInstallPath(), false);        }        String[] env = null;        String shellFilePath = null;        String workingDir = null;        switch (role) {            case ORDER:                workingDir = modeService.getInstallPath() + (StringUtils.isEmpty(roleFolderName) ? \"order\" : roleFolderName);                shellFilePath = modeService.getInstallPath() + (StringUtils.isEmpty(roleFolderName) ? \"order\" : roleFolderName) + \"/start-orderer.sh up\";                break;            case PEER:                workingDir = modeService.getInstallPath() + (StringUtils.isEmpty(roleFolderName) ? \"peer\" : roleFolderName);                shellFilePath = modeService.getInstallPath() + (StringUtils.isEmpty(roleFolderName) ? \"peer\" : roleFolderName) + \"/start-peer.sh up\";                break;        }        if (!StringUtils.isEmpty(shellFilePath)) {            environmentService.envSet(rolePorts, hosts);            try {                ProcessUtil.Result res = ProcessUtil.execCmd(\"bash \" + shellFilePath, env, workingDir);                return res.getCode() == 0;            } catch (Exception e) {                // log.error(String.format(\"\u542f\u52a8\u89d2\u8272%s\u811a\u672c\u5f02\u5e38\", role.name()), e);                log.error(String.format(\"An exception occurred while executing script code for role %s\", role.name()), e);                e.printStackTrace();            }        }        return false;    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/service/InstallService.java", "stars": "7", "class": {"name": "InstallService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateInstallResult", "params": ["String", "InstallResult", "InitConfigEntity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void updateInstallResult(String remoteAddress, InstallResult result, InitConfigEntity configEntity) {        if (configEntity == null) {            File configFile = new File(this.initConfigFile);            Yaml yaml = new Yaml();            try {                configEntity = yaml.loadAs(new FileInputStream(configFile), InitConfigEntity.class);            } catch (Exception e) {                e.printStackTrace();                return;            }        }        if (result.isSuccess()) {            // log.info(String.format(\"\u8282\u70b9 %s \u5df2\u5b8c\u6210 %s \u89d2\u8272\u7684\u5b89\u88c5\", remoteAddress, result.getRole().name()));            log.info(String.format(\"Node %s has intalled complete %s roles\", remoteAddress, result.getRole().name()));            // \u52a0\u5165\u6570\u636e\u5e93            switch (result.getRole()) {                case ORDER:                    modeService.checkAndInsertDb(configEntity.getOrdererHostConfig(), remoteAddress, RoleEnum.ORDER, configEntity.getOrgMSPID());                    break;                case PEER:                    modeService.checkAndInsertDb(configEntity.getPeerHostConfig(), remoteAddress, RoleEnum.PEER, configEntity.getOrgMSPID());                    break;            }        }        this.rolesBiz.updateInstallResult(remoteAddress, result);    }", "url": "https://raw.githubusercontent.com/zeoio/fabric-toolkit/master/bcp-install-biz/src/main/java/com/cgb/bcpinstall/service/InstallService.java", "stars": "7", "class": {"name": "InstallService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "close", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void close(){        this.isClosed = true;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/AbstractChannel.java", "stars": "23", "class": {"name": "AbstractChannel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "open", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void open(){        this.isClosed = false;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/AbstractChannel.java", "stars": "23", "class": {"name": "AbstractChannel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isClosed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isClosed(){        return isClosed;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/AbstractChannel.java", "stars": "23", "class": {"name": "AbstractChannel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getTaskGroupId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getTaskGroupId(){        return this.taskGroupId;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/AbstractChannel.java", "stars": "23", "class": {"name": "AbstractChannel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getCapacity", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCapacity(){        return capacity;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/AbstractChannel.java", "stars": "23", "class": {"name": "AbstractChannel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getByteSpeed", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getByteSpeed(){        return byteSpeed;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/AbstractChannel.java", "stars": "23", "class": {"name": "AbstractChannel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getConfiguration", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Configuration", "snippet": "    public Configuration getConfiguration(){        return this.configuration;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/AbstractChannel.java", "stars": "23", "class": {"name": "AbstractChannel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "setCommunication", "params": ["Communication"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCommunication(final Communication communication){        this.currentCommunication = communication;        this.lastCommunication.reset();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/AbstractChannel.java", "stars": "23", "class": {"name": "AbstractChannel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "push", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void push(final T t){        Validate.notNull(t, \"push domain cannot be empty in channel\");        this.doPush(t);        this.statPush(1L, t.getByteSize());    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/AbstractChannel.java", "stars": "23", "class": {"name": "AbstractChannel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "pushTerminate", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void pushTerminate(final T t){        Validate.notNull(t, \"push domain cannot be empty in channel\");        this.doPush(t);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/AbstractChannel.java", "stars": "23", "class": {"name": "AbstractChannel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "pushAll", "params": ["Collection<T>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void pushAll(final Collection<T> collection){        Validate.notNull(collection);        Validate.noNullElements(collection);        for(T t : collection){            push(t);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/AbstractChannel.java", "stars": "23", "class": {"name": "AbstractChannel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "pull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public T pull(){        List<T> pulled = (List<T>) doPullInSync(1, new ArrayList<>(), collection -> collection.add(this.doPull()));        T data = pulled.get(0);        this.statPull(1L, data.getByteSize());        return data;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/AbstractChannel.java", "stars": "23", "class": {"name": "AbstractChannel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "pullAll", "params": ["Collection<T>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void pullAll(final Collection<T> collection){        Validate.notNull(collection);        doPullInSync(Integer.MAX_VALUE, collection, this::doPullAll);        this.statPull(collection.size(),  this.getByteSize(collection));    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/AbstractChannel.java", "stars": "23", "class": {"name": "AbstractChannel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "doPullInSync", "params": ["int", "Collection<T>", "Consumer<Collection>"], "throws": null, "modifiers": ["private"], "return_type": "Collection<T>", "snippet": "    private Collection<T> doPullInSync(int maxPullSize, Collection<T> pulled, Consumer<Collection<T>> pullFunction){        String hashCode = String.valueOf(Thread.currentThread().hashCode());        pulled.clear();        consumeLock.lock();        try {            while(!cachePulled.isEmpty()){                AtomicInteger counter = consumeCache.computeIfAbsent(hashCode, key -> new AtomicInteger(0));                //Only the different consuming threads can consume the cache                int pos = counter.get();                if(consumeSem.get() > 0 && pos >= cachePulled.size()){                    try {                        //Await other consumers                        notConsumed.await();                    } catch (InterruptedException e) {                        Thread.currentThread().interrupt();                        throw new IllegalStateException(e);                    }                }else {                    int count = 0;                    for(int i = pos; count < maxPullSize && i < cachePulled.size(); i++){                        //Consume cache                        pulled.add((T) cachePulled.get(i).copyElement());                        count ++;                    }                    if(counter.addAndGet(count) >= cachePulled.size() && consumeSem.decrementAndGet() <= 0){                        //Empty the cache and reset the semaphore                        cachePulled.clear();                        consumeSem.set(consumers - 1);                        consumeCache.forEach((key, value) -> value.set(0));                        notConsumed.signalAll();                    }                    return pulled;                }            }            //Fill pulled collection            pullFunction.accept(pulled);            if(consumers > 1 && consumeIsolated){                //In the situation of multiply consumers, use the cache                cachePulled.addAll(pulled);                AtomicInteger counter = consumeCache.computeIfAbsent(hashCode, key -> new AtomicInteger(0));                //Mark the current thread that has consumed the cache                counter.set(pulled.size());            }            return pulled;        }finally{            consumeLock.unlock();        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/AbstractChannel.java", "stars": "23", "class": {"name": "AbstractChannel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "statPull", "params": ["long", "long"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void statPull(long dataSize, long byteSize){        statPull(currentCommunication, dataSize);        currentCommunication.increaseCounter(CommunicationTool.WRITE_RECEIVED_BYTES, byteSize);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/AbstractChannel.java", "stars": "23", "class": {"name": "AbstractChannel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "statPush", "params": ["long", "long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void statPush(long dataSize,long byteSize){        boolean isChannelByteSpeedLimit = (this.byteSpeed > 0);        boolean isChannelDataSpeedLimit = (this.dataSpeed > 0);        if(!isChannelByteSpeedLimit && !isChannelDataSpeedLimit){            return;        }        if(byteSize > 0){            rateLimiterByte.acquire((int)byteSize);        }        statPush(currentCommunication, dataSize);        if(rateLimiterData != null && dataSize > 0){            rateLimiterData.acquire((int)dataSize);        }        currentCommunication.increaseCounter(CommunicationTool.READ_SUCCEED_BYTES, byteSize);        currentCommunication.setLongCounter(CommunicationTool.WAIT_READER_TIME, waitReaderTime.get());        currentCommunication.setLongCounter(CommunicationTool.WAIT_WRITER_TIME, waitWriterTime.get());    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/AbstractChannel.java", "stars": "23", "class": {"name": "AbstractChannel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "adjustRateLimit", "params": ["long", "long"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "    public synchronized void adjustRateLimit(long byteSpeed, long dataSpeed){        if(byteSpeed > 0 && null != this.rateLimiterByte &&                byteSpeed != this.rateLimiterByte.getRate()) {            this.rateLimiterByte.setRate(byteSpeed);        }        if(dataSpeed > 0 && null != this.rateLimiterData &&                dataSpeed != this.rateLimiterData.getRate()) {            this.rateLimiterData.setRate(dataSpeed);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/AbstractChannel.java", "stars": "23", "class": {"name": "AbstractChannel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getByteSize", "params": ["Collection<T>"], "throws": null, "modifiers": ["private"], "return_type": "long", "snippet": "    private long getByteSize(final Collection<T> rs){        final long[] size = {0};        rs.forEach(t -> size[0] += t.getByteSize());        return size[0];    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/AbstractChannel.java", "stars": "23", "class": {"name": "AbstractChannel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "doPush", "params": ["T"], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void doPush(T t);    /**     * do push all     * @param collection     */    protected void doPushAll(Collection<T> collection){        //default not support    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/AbstractChannel.java", "stars": "23", "class": {"name": "AbstractChannel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "doPushAll", "params": ["Collection<T>"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void doPushAll(Collection<T> collection){        //default not support    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/AbstractChannel.java", "stars": "23", "class": {"name": "AbstractChannel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "doPull", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "T", "snippet": "    protected abstract T doPull();    /**     * do pull all     * @param collection     */    protected void doPullAll(Collection<T> collection){        //default not support    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/AbstractChannel.java", "stars": "23", "class": {"name": "AbstractChannel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "doPullAll", "params": ["Collection<T>"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void doPullAll(Collection<T> collection){        //default not support    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/AbstractChannel.java", "stars": "23", "class": {"name": "AbstractChannel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "incConsumer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void incConsumer(){        consumeSem.compareAndSet(consumers - 1, consumers);        consumers ++;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/AbstractChannel.java", "stars": "23", "class": {"name": "AbstractChannel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "doCheckPoint", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void doCheckPoint(String checkPointId){    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/AbstractChannel.java", "stars": "23", "class": {"name": "AbstractChannel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "size", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "int", "snippet": "    public abstract int size();    public  abstract boolean isEmpty();    public abstract void clear();    /**     * stat push     * @param dataSize     */    protected abstract void statPush(Communication currentCommunication, long dataSize);    /**     * stat pull     * @param currentCommunication     * @param dataSize     */    protected abstract void statPull(Communication currentCommunication, long dataSize);    /**     * current domain speed     * @return     */    protected abstract long currentDataSpeed(Communication currentCommunication, Communication lastCommunication, long interval);    /**     * update counter     * @param currentCommunication     * @param lastCommunication     */    protected abstract void updateCounter(Communication currentCommunication, Communication lastCommunication);    /**     *  the log printed in the first time     */    protected abstract void firstPrint();}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/AbstractChannel.java", "stars": "23", "class": {"name": "AbstractChannel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "isEmpty", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "boolean", "snippet": "    public  abstract boolean isEmpty();    public abstract void clear();    /**     * stat push     * @param dataSize     */    protected abstract void statPush(Communication currentCommunication, long dataSize);    /**     * stat pull     * @param currentCommunication     * @param dataSize     */    protected abstract void statPull(Communication currentCommunication, long dataSize);    /**     * current domain speed     * @return     */    protected abstract long currentDataSpeed(Communication currentCommunication, Communication lastCommunication, long interval);    /**     * update counter     * @param currentCommunication     * @param lastCommunication     */    protected abstract void updateCounter(Communication currentCommunication, Communication lastCommunication);    /**     *  the log printed in the first time     */    protected abstract void firstPrint();}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/AbstractChannel.java", "stars": "23", "class": {"name": "AbstractChannel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void clear();    /**     * stat push     * @param dataSize     */    protected abstract void statPush(Communication currentCommunication, long dataSize);    /**     * stat pull     * @param currentCommunication     * @param dataSize     */    protected abstract void statPull(Communication currentCommunication, long dataSize);    /**     * current domain speed     * @return     */    protected abstract long currentDataSpeed(Communication currentCommunication, Communication lastCommunication, long interval);    /**     * update counter     * @param currentCommunication     * @param lastCommunication     */    protected abstract void updateCounter(Communication currentCommunication, Communication lastCommunication);    /**     *  the log printed in the first time     */    protected abstract void firstPrint();}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/AbstractChannel.java", "stars": "23", "class": {"name": "AbstractChannel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "statPush", "params": ["Communication", "long"], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void statPush(Communication currentCommunication, long dataSize);    /**     * stat pull     * @param currentCommunication     * @param dataSize     */    protected abstract void statPull(Communication currentCommunication, long dataSize);    /**     * current domain speed     * @return     */    protected abstract long currentDataSpeed(Communication currentCommunication, Communication lastCommunication, long interval);    /**     * update counter     * @param currentCommunication     * @param lastCommunication     */    protected abstract void updateCounter(Communication currentCommunication, Communication lastCommunication);    /**     *  the log printed in the first time     */    protected abstract void firstPrint();}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/AbstractChannel.java", "stars": "23", "class": {"name": "AbstractChannel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "statPull", "params": ["Communication", "long"], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void statPull(Communication currentCommunication, long dataSize);    /**     * current domain speed     * @return     */    protected abstract long currentDataSpeed(Communication currentCommunication, Communication lastCommunication, long interval);    /**     * update counter     * @param currentCommunication     * @param lastCommunication     */    protected abstract void updateCounter(Communication currentCommunication, Communication lastCommunication);    /**     *  the log printed in the first time     */    protected abstract void firstPrint();}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/AbstractChannel.java", "stars": "23", "class": {"name": "AbstractChannel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "currentDataSpeed", "params": ["Communication", "Communication", "long"], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "long", "snippet": "    protected abstract long currentDataSpeed(Communication currentCommunication, Communication lastCommunication, long interval);    /**     * update counter     * @param currentCommunication     * @param lastCommunication     */    protected abstract void updateCounter(Communication currentCommunication, Communication lastCommunication);    /**     *  the log printed in the first time     */    protected abstract void firstPrint();}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/AbstractChannel.java", "stars": "23", "class": {"name": "AbstractChannel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "updateCounter", "params": ["Communication", "Communication"], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void updateCounter(Communication currentCommunication, Communication lastCommunication);    /**     *  the log printed in the first time     */    protected abstract void firstPrint();}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/AbstractChannel.java", "stars": "23", "class": {"name": "AbstractChannel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "firstPrint", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void firstPrint();}", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/core/transport/channel/AbstractChannel.java", "stars": "23", "class": {"name": "AbstractChannel", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "getConnection", "params": [], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Connection", "snippet": "  public Connection getConnection() throws SQLException {    return doGetConnection(username, password);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "UnpooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "getConnection", "params": ["String", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Connection", "snippet": "  public Connection getConnection(String username, String password) throws SQLException {    return doGetConnection(username, password);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "UnpooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "setLoginTimeout", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setLoginTimeout(int loginTimeout) {    DriverManager.setLoginTimeout(loginTimeout);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "UnpooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "getLoginTimeout", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getLoginTimeout() {    return DriverManager.getLoginTimeout();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "UnpooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "setLogWriter", "params": ["PrintWriter"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setLogWriter(PrintWriter logWriter) {    DriverManager.setLogWriter(logWriter);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "UnpooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "getLogWriter", "params": [], "throws": null, "modifiers": ["public"], "return_type": "PrintWriter", "snippet": "  public PrintWriter getLogWriter() {    return DriverManager.getLogWriter();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "UnpooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "getDriverClassLoader", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ClassLoader", "snippet": "  public ClassLoader getDriverClassLoader() {    return driverClassLoader;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "UnpooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "setDriverClassLoader", "params": ["ClassLoader"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setDriverClassLoader(ClassLoader driverClassLoader) {    this.driverClassLoader = driverClassLoader;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "UnpooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "getDriverProperties", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Properties", "snippet": "  public Properties getDriverProperties() {    return driverProperties;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "UnpooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "setDriverProperties", "params": ["Properties"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setDriverProperties(Properties driverProperties) {    this.driverProperties = driverProperties;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "UnpooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "getDriver", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "String", "snippet": "  public synchronized String getDriver() {    return driver;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "UnpooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "setDriver", "params": ["String"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "  public synchronized void setDriver(String driver) {    this.driver = driver;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "UnpooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "getUrl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getUrl() {    return url;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "UnpooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "setUrl", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setUrl(String url) {    this.url = url;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "UnpooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "getUsername", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getUsername() {    return username;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "UnpooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "setUsername", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setUsername(String username) {    this.username = username;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "UnpooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "getPassword", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getPassword() {    return password;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "UnpooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "setPassword", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setPassword(String password) {    this.password = password;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "UnpooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "isAutoCommit", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Boolean", "snippet": "  public Boolean isAutoCommit() {    return autoCommit;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "UnpooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "setAutoCommit", "params": ["Boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setAutoCommit(Boolean autoCommit) {    this.autoCommit = autoCommit;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "UnpooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "getDefaultTransactionIsolationLevel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getDefaultTransactionIsolationLevel() {    return defaultTransactionIsolationLevel;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "UnpooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "setDefaultTransactionIsolationLevel", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setDefaultTransactionIsolationLevel(Integer defaultTransactionIsolationLevel) {    this.defaultTransactionIsolationLevel = defaultTransactionIsolationLevel;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "UnpooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "getDefaultNetworkTimeout", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getDefaultNetworkTimeout() {    return defaultNetworkTimeout;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "UnpooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "setDefaultNetworkTimeout", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setDefaultNetworkTimeout(Integer defaultNetworkTimeout) {    this.defaultNetworkTimeout = defaultNetworkTimeout;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "UnpooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "doGetConnection", "params": ["String", "String"], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "Connection", "snippet": "  private Connection doGetConnection(String username, String password) throws SQLException {    Properties props = new Properties();    if (driverProperties != null) {      props.putAll(driverProperties);    }    if (username != null) {      props.setProperty(\"user\", username);    }    if (password != null) {      props.setProperty(\"password\", password);    }    return doGetConnection(props);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "UnpooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "doGetConnection", "params": ["Properties"], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "Connection", "snippet": "  private Connection doGetConnection(Properties properties) throws SQLException {    initializeDriver();    Connection connection = DriverManager.getConnection(url, properties);    configureConnection(connection);    return connection;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "UnpooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "initializeDriver", "params": [], "throws": ["SQLException"], "modifiers": ["synchronized", "private"], "return_type": "void", "snippet": "  private synchronized void initializeDriver() throws SQLException {    if (!registeredDrivers.containsKey(driver)) {      Class<?> driverType;      try {        if (driverClassLoader != null) {          driverType = Class.forName(driver, true, driverClassLoader);        } else {          driverType = Resources.classForName(driver);        }        // DriverManager requires the driver to be loaded via the system ClassLoader.        // http://www.kfu.com/~nsayer/Java/dyn-jdbc.html        Driver driverInstance = (Driver)driverType.getDeclaredConstructor().newInstance();        DriverManager.registerDriver(new DriverProxy(driverInstance));        registeredDrivers.put(driver, driverInstance);      } catch (Exception e) {        throw new SQLException(\"Error setting driver on UnpooledDataSource. Cause: \" + e);      }    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "UnpooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "configureConnection", "params": ["Connection"], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void configureConnection(Connection conn) throws SQLException {    if (defaultNetworkTimeout != null) {      conn.setNetworkTimeout(Executors.newSingleThreadExecutor(), defaultNetworkTimeout);    }    if (autoCommit != null && autoCommit != conn.getAutoCommit()) {      conn.setAutoCommit(autoCommit);    }    if (defaultTransactionIsolationLevel != null) {      conn.setTransactionIsolation(defaultTransactionIsolationLevel);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "UnpooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "unwrap", "params": ["Class<T>"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "T", "snippet": "  public <T> T unwrap(Class<T> iface) throws SQLException {    throw new SQLException(getClass().getName() + \" is not a wrapper.\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "UnpooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "isWrapperFor", "params": ["Class<?>"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isWrapperFor(Class<?> iface) throws SQLException {    return false;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "UnpooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "getParentLogger", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Logger", "snippet": "  public Logger getParentLogger() {    // requires JDK version 1.6    return Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "UnpooledDataSource", "extends": null, "implements": ["DataSource"], "modifiers": ["public"]}}, {"method_name": "acceptsURL", "params": ["String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean acceptsURL(String u) throws SQLException {      return this.driver.acceptsURL(u);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "DriverProxy", "extends": null, "implements": ["Driver"], "modifiers": ["private", "static"]}}, {"method_name": "connect", "params": ["String", "Properties"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Connection", "snippet": "    public Connection connect(String u, Properties p) throws SQLException {      return this.driver.connect(u, p);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "DriverProxy", "extends": null, "implements": ["Driver"], "modifiers": ["private", "static"]}}, {"method_name": "getMajorVersion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getMajorVersion() {      return this.driver.getMajorVersion();    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "DriverProxy", "extends": null, "implements": ["Driver"], "modifiers": ["private", "static"]}}, {"method_name": "getMinorVersion", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getMinorVersion() {      return this.driver.getMinorVersion();    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "DriverProxy", "extends": null, "implements": ["Driver"], "modifiers": ["private", "static"]}}, {"method_name": "getPropertyInfo", "params": ["String", "Properties"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "DriverPropertyInfo", "snippet": "    public DriverPropertyInfo[] getPropertyInfo(String u, Properties p) throws SQLException {      return this.driver.getPropertyInfo(u, p);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "DriverProxy", "extends": null, "implements": ["Driver"], "modifiers": ["private", "static"]}}, {"method_name": "jdbcCompliant", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean jdbcCompliant() {      return this.driver.jdbcCompliant();    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "DriverProxy", "extends": null, "implements": ["Driver"], "modifiers": ["private", "static"]}}, {"method_name": "getParentLogger", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Logger", "snippet": "    public Logger getParentLogger() {      return Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java", "stars": "15", "class": {"name": "DriverProxy", "extends": null, "implements": ["Driver"], "modifiers": ["private", "static"]}}, {"method_name": "execute", "params": ["Environment", "Map", "TemplateModel", "TemplateDirectiveBody"], "throws": ["TemplateException", "IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void execute(Environment env, Map map, TemplateModel[] templateModels, TemplateDirectiveBody body) throws TemplateException, IOException {        final DefaultObjectWrapperBuilder builder = new DefaultObjectWrapperBuilder(Configuration.VERSION_2_3_25);        String methodName = map.get(BeyondConst.METHOD_KEY).toString();        switch (methodName) {            case \"archiveYear\":                env.setVariable(\"archives\", builder.build().wrap(articleService.listYearArchives()));                break;            default:                break;        }        body.render(env.getOut());    }", "url": "https://raw.githubusercontent.com/rubywooJ/beyond/master/src/main/java/cn/tsxygfy/beyond/freemarker/ArticleTagDirective.java", "stars": "1", "class": {"name": "ArticleTagDirective", "extends": null, "implements": ["TemplateDirectiveModel"], "modifiers": ["public"]}}, {"method_name": "getItemId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getItemId(int position) {        return position;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseAdapter.java", "stars": "1", "class": {"name": "BaseAdapter", "extends": "RecyclerView", "implements": ["ContextAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "onBindViewHolder", "params": ["VH", "int"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "    public final void onBindViewHolder(@NonNull VH holder, int position) {        holder.markViewHolderPosition(position);        holder.onBindView(position);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseAdapter.java", "stars": "1", "class": {"name": "BaseAdapter", "extends": "RecyclerView", "implements": ["ContextAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "getRecyclerView", "params": [], "throws": null, "modifiers": ["public"], "return_type": "RecyclerView", "snippet": "    public RecyclerView getRecyclerView() {        return mRecyclerView;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseAdapter.java", "stars": "1", "class": {"name": "BaseAdapter", "extends": "RecyclerView", "implements": ["ContextAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "getContext", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Context", "snippet": "    public Context getContext() {        return mContext;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseAdapter.java", "stars": "1", "class": {"name": "BaseAdapter", "extends": "RecyclerView", "implements": ["ContextAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "onAttachedToRecyclerView", "params": ["RecyclerView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onAttachedToRecyclerView(@NonNull RecyclerView recyclerView) {        mRecyclerView = recyclerView;        //\u7528\u6237\u8bbe\u7f6e\u4e86\u6eda\u52a8\u76d1\u542c\uff0c\u9700\u8981\u7ed9RecyclerView\u8bbe\u7f6e\u76d1\u542c        if (mScrollListener != null) {            //\u6dfb\u52a0\u6eda\u52a8\u76d1\u542c            mRecyclerView.addOnScrollListener(mScrollListener);        }        //\u5224\u65ad\u5f53\u524d\u7684\u5e03\u5c40\u7ba1\u7406\u5668\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u4e3a\u7a7a\u5219\u8bbe\u7f6e\u9ed8\u8ba4\u7684\u5e03\u5c40\u7ba1\u7406\u5668        if (mRecyclerView.getLayoutManager() == null) {            RecyclerView.LayoutManager layoutManager = generateDefaultLayoutManager(mContext);            if (layoutManager != null) {                mRecyclerView.setLayoutManager(layoutManager);            }        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseAdapter.java", "stars": "1", "class": {"name": "BaseAdapter", "extends": "RecyclerView", "implements": ["ContextAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "onDetachedFromRecyclerView", "params": ["RecyclerView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDetachedFromRecyclerView(@NonNull RecyclerView recyclerView) {        //\u79fb\u9664\u6eda\u52a8\u76d1\u542c        if (mScrollListener != null) {            mRecyclerView.removeOnScrollListener(mScrollListener);        }        mRecyclerView = null;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseAdapter.java", "stars": "1", "class": {"name": "BaseAdapter", "extends": "RecyclerView", "implements": ["ContextAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "generateDefaultLayoutManager", "params": ["Context"], "throws": null, "modifiers": ["protected"], "return_type": "RecyclerView", "snippet": "    protected RecyclerView.LayoutManager generateDefaultLayoutManager(Context context) {        return new LinearLayoutManager(context);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseAdapter.java", "stars": "1", "class": {"name": "BaseAdapter", "extends": "RecyclerView", "implements": ["ContextAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "setOnItemClickListener", "params": ["OnItemClickListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnItemClickListener(OnItemClickListener listener) {        checkRecyclerViewState();        mItemClickListener = listener;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseAdapter.java", "stars": "1", "class": {"name": "BaseAdapter", "extends": "RecyclerView", "implements": ["ContextAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "setOnChildClickListener", "params": ["int", "OnChildClickListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnChildClickListener(@IdRes int id, OnChildClickListener listener) {        checkRecyclerViewState();        if (mChildClickListeners == null) {            mChildClickListeners = new SparseArray<>();        }        mChildClickListeners.put(id, listener);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseAdapter.java", "stars": "1", "class": {"name": "BaseAdapter", "extends": "RecyclerView", "implements": ["ContextAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "setOnItemLongClickListener", "params": ["OnItemLongClickListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnItemLongClickListener(OnItemLongClickListener listener) {        checkRecyclerViewState();        mItemLongClickListener = listener;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseAdapter.java", "stars": "1", "class": {"name": "BaseAdapter", "extends": "RecyclerView", "implements": ["ContextAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "setOnChildLongClickListener", "params": ["int", "OnChildLongClickListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnChildLongClickListener(@IdRes int id, OnChildLongClickListener listener) {        checkRecyclerViewState();        if (mChildLongClickListeners == null) {            mChildLongClickListeners = new SparseArray<>();        }        mChildLongClickListeners.put(id, listener);    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseAdapter.java", "stars": "1", "class": {"name": "BaseAdapter", "extends": "RecyclerView", "implements": ["ContextAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "checkRecyclerViewState", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void checkRecyclerViewState() {        if (mRecyclerView != null) {            // \u5fc5\u987b\u5728 RecyclerView.setAdapter() \u4e4b\u524d\u8bbe\u7f6e\u76d1\u542c            throw new IllegalStateException(\"are you ok?\");        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseAdapter.java", "stars": "1", "class": {"name": "BaseAdapter", "extends": "RecyclerView", "implements": ["ContextAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "setOnScrollingListener", "params": ["OnScrollingListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOnScrollingListener(OnScrollingListener listener) {        mScrollingListener = listener;        //\u5982\u679c\u5f53\u524d\u5df2\u7ecf\u6709\u8bbe\u7f6e\u6eda\u52a8\u76d1\u542c\uff0c\u518d\u6b21\u8bbe\u7f6e\u9700\u8981\u79fb\u9664\u539f\u6709\u7684\u76d1\u542c\u5668        if (mScrollListener == null) {            mScrollListener = new ScrollListener();        } else {            mRecyclerView.removeOnScrollListener(mScrollListener);        }        //\u7528\u6237\u8bbe\u7f6e\u4e86\u6eda\u52a8\u76d1\u542c\uff0c\u9700\u8981\u7ed9RecyclerView\u8bbe\u7f6e\u76d1\u542c        if (mRecyclerView != null) {            //\u6dfb\u52a0\u6eda\u52a8\u76d1\u542c            mRecyclerView.addOnScrollListener(mScrollListener);        }    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseAdapter.java", "stars": "1", "class": {"name": "BaseAdapter", "extends": "RecyclerView", "implements": ["ContextAction"], "modifiers": ["public", "abstract"]}}, {"method_name": "onBindView", "params": ["int"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "        public abstract void onBindView(int position);        /**         * \u8bb0\u5f55 ViewHolder \u4f4d\u7f6e         */        final void markViewHolderPosition(int position) {            mViewHolderPosition = position;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseAdapter.java", "stars": "1", "class": {"name": "ViewHolder", "extends": "RecyclerView", "implements": ["View", "View"], "modifiers": ["public", "abstract"]}}, {"method_name": "markViewHolderPosition", "params": ["int"], "throws": null, "modifiers": ["final"], "return_type": "void", "snippet": "        final void markViewHolderPosition(int position) {            mViewHolderPosition = position;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseAdapter.java", "stars": "1", "class": {"name": "ViewHolder", "extends": "RecyclerView", "implements": ["View", "View"], "modifiers": ["public", "abstract"]}}, {"method_name": "getViewHolderPosition", "params": [], "throws": null, "modifiers": ["final", "protected"], "return_type": "int", "snippet": "        protected final int getViewHolderPosition() {            return mViewHolderPosition;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseAdapter.java", "stars": "1", "class": {"name": "ViewHolder", "extends": "RecyclerView", "implements": ["View", "View"], "modifiers": ["public", "abstract"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onClick(View v) {            if (v == getItemView()) {                if(mItemClickListener != null) {                    mItemClickListener.onItemClick(mRecyclerView, v, getViewHolderPosition());                    return;                }            }            if (mChildClickListeners != null) {                OnChildClickListener listener = mChildClickListeners.get(v.getId());                if (listener != null) {                    listener.onChildClick(mRecyclerView, v, getViewHolderPosition());                }            }        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseAdapter.java", "stars": "1", "class": {"name": "ViewHolder", "extends": "RecyclerView", "implements": ["View", "View"], "modifiers": ["public", "abstract"]}}, {"method_name": "onLongClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean onLongClick(View v) {            if (v == getItemView()) {                if (mItemLongClickListener != null) {                    return mItemLongClickListener.onItemLongClick(mRecyclerView, v, getViewHolderPosition());                }            }            if (mChildLongClickListeners != null) {                OnChildLongClickListener listener = mChildLongClickListeners.get(v.getId());                if (listener != null) {                    listener.onChildLongClick(mRecyclerView, v, getViewHolderPosition());                }            }            return false;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseAdapter.java", "stars": "1", "class": {"name": "ViewHolder", "extends": "RecyclerView", "implements": ["View", "View"], "modifiers": ["public", "abstract"]}}, {"method_name": "getItemView", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "View", "snippet": "        public final View getItemView() {            return itemView;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseAdapter.java", "stars": "1", "class": {"name": "ViewHolder", "extends": "RecyclerView", "implements": ["View", "View"], "modifiers": ["public", "abstract"]}}, {"method_name": "findViewById", "params": ["int"], "throws": null, "modifiers": ["public", "final"], "return_type": "V", "snippet": "        public final <V extends View> V findViewById(@IdRes int id) {            return getItemView().findViewById(id);        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseAdapter.java", "stars": "1", "class": {"name": "ViewHolder", "extends": "RecyclerView", "implements": ["View", "View"], "modifiers": ["public", "abstract"]}}, {"method_name": "onScrollStateChanged", "params": ["RecyclerView", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onScrollStateChanged(@NonNull RecyclerView recyclerView, int newState) {            if (mScrollingListener == null) {                return;            }            if (newState == RecyclerView.SCROLL_STATE_IDLE) {                if (!recyclerView.canScrollVertically(1)) {                    //\u662f\u5426\u80fd\u5411\u4e0b\u6eda\u52a8\uff0cfalse \u8868\u793a\u5df2\u7ecf\u6eda\u52a8\u5230\u5e95\u90e8                    mScrollingListener.onScrollDown(recyclerView);                } else if (!recyclerView.canScrollVertically(-1)) {                    //\u662f\u5426\u80fd\u5411\u4e0a\u6eda\u52a8\uff0cfalse \u8868\u793a\u5df2\u7ecf\u6eda\u52a8\u5230\u9876\u90e8                    mScrollingListener.onScrollTop(recyclerView);                }            } else if (newState == RecyclerView.SCROLL_STATE_DRAGGING) {                //\u6b63\u5728\u6eda\u52a8\u4e2d                mScrollingListener.onScrolling(recyclerView);            }        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/base/src/main/java/com/hjq/base/BaseAdapter.java", "stars": "1", "class": {"name": "ScrollListener", "extends": "RecyclerView", "implements": null, "modifiers": ["private"]}}, {"method_name": "enable", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void enable() {        type = plugin.getDatabaseLifecycle().getType();        vipPlayerCache = new VipPlayerCache();        loadRepository();    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/lifecycle/VipPlayerLifecycle.java", "stars": "2", "class": {"name": "VipPlayerLifecycle", "extends": "Lifecycle", "implements": null, "modifiers": ["public"]}}, {"method_name": "loadRepository", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void loadRepository() {        if (type == null) {            return;        }        if (type.equalsIgnoreCase(\"SQLite\")) {            vipPlayerRepository = new VipPlayerSQLiteRepository(plugin, plugin.getDatabaseLifecycle().getDatabaseConnection());            return;        }        if (type.equalsIgnoreCase(\"MySQL\")) {            vipPlayerRepository = new VipPlayerMySQLRepository(plugin, plugin.getDatabaseLifecycle().getDatabaseConnection());            return;        }        vipPlayerRepository = new VipPlayerSQLiteRepository(plugin, plugin.getDatabaseLifecycle().getDatabaseConnection());    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/lifecycle/VipPlayerLifecycle.java", "stars": "2", "class": {"name": "VipPlayerLifecycle", "extends": "Lifecycle", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCommand", "params": ["CommandSender", "Command", "String", "String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {        // This command is only for players.        if (!(sender instanceof Player)) {            sender.sendMessage(ChatColor.RED + \"This command is only for players!\");            return true;        }        Player player = (Player) sender;        // Get a LuckPerms cached metadata for the player.        CachedMetaData metaData = this.luckPerms.getPlayerAdapter(Player.class).getMetaData(player);        // Get their prefix.        String prefix = metaData.getPrefix();        // Tell the sender.        sender.sendMessage(ChatColor.RED + \"Your prefix is: \" + ChatColor.RESET + prefix);        return true;    }", "url": "https://raw.githubusercontent.com/LuckPerms/api-cookbook/master/src/main/java/me/lucko/lpcookbook/commands/GetPrefixCommand.java", "stars": "1", "class": {"name": "GetPrefixCommand", "extends": null, "implements": ["CommandExecutor"], "modifiers": ["public"]}}, {"method_name": "service", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": ["ServletException", "IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void service(HttpServletRequest request,HttpServletResponse response) throws ServletException,IOException\t{\t\tPrintWriter out=response.getWriter();\t\tString Q6=request.getParameter(\"Q6\");\t\tString Q7=request.getParameter(\"Q7\");\t\tString Q8=request.getParameter(\"Q8\");\t\tString Q9=request.getParameter(\"Q9\");\t\tString Q10=request.getParameter(\"Q10\");\t\tArrayList<String> r = new ArrayList<String>(4);         r.add(\"option1\");         r.add(\"option2\");         r.add(\"option3\");         r.add(\"option4\");\t\t\t\tint co=0,at=0;\t\tif(r.contains(Q6))\t\t\tat++;\t\tif(r.contains(Q7))\t\t\tat++;\t\tif(r.contains(Q8))\t\t\tat++;\t\tif(r.contains(Q9))\t\t\tat++;\t\tif(r.contains(Q10))\t\t\tat++;\t\tCookie[] c=request.getCookies();\t\tMap<String,String> hm=new HashMap<String,String>(); \t\thm.put(\"Q1\",\"option2\");\t\thm.put(\"Q2\",\"option1\");\t\thm.put(\"Q3\",\"option2\");\t\thm.put(\"Q4\",\"option4\");\t\thm.put(\"Q5\",\"option3\");\t\tfor(int i=0;i<=4;i++)\t\t{\t\t\tif(r.contains(c[i].getValue()))\t\t\t\tat++;\t\t}\t\tif(hm.get(c[0].getName()).equals(c[0].getValue()))\t\t\tco++;\t\t\t\tif(hm.get(c[1].getName()).equals(c[1].getValue()))\t\t\tco++;\t\tif(hm.get(c[2].getName()).equals(c[2].getValue()))\t\t\tco++;\t\tif(hm.get(c[3].getName()).equals(c[3].getValue()))\t\t\tco++;\t\tif(hm.get(c[4].getName()).equals(c[4].getValue()))\t\t\tco++;\t\tif(Q6!=null && Q6.equals(\"option2\"))\t\t\tco++; \t\tif(Q7!=null && Q7.equals(\"option1\"))\t\t\tco++;\t\tif(Q8!=null && Q8.equals(\"option1\"))\t\t\tco++;\t\tif(Q9!=null && Q9.equals(\"option1\"))\t\t\tco++;\t\tif(Q10!=null && Q10.equals(\"option2\"))\t\t\tco++;\t\tout.print(\"<head><style>\");\t\tout.print(\"body{padding:0%;margin:0%;}\");\t\tout.print(\".box form h1{padding:0%;margin:0%;}\");\t\tout.print(\".button1{text-align:center;}\");\t\tout.print(\".next{background-color:green;color:white;width:10%;font-size:15px;border-radius:35%;padding:10px;}\");\t\tout.print(\".score{color:white;}\");\t\tout.print(\"\");\t\tout.print(\"form{padding:0%;margin:0%;}\");\t\tout.print(\"table{padding-top:0%;}\");\t\tout.print(\".image{padding:0%;border-radius:15%;}\");        out.print(\".box{background-color:pink;color:white;margin:5%;padding:5%;border-radius:15%;}\");\t\tout.print(\"</style></head>\");\t\tout.print(\"<body>\");\t\tout.print(\"<div class=\\\"box\\\">\");\t\tout.print(\"<form action=result.com method=post>\");\t\tout.print(\"<div class=\\\"image\\\"><img src=\\\"img.jfif\\\" width=\\\"100%\\\" height=\\\"30%\\\"></div>\");\t\tout.print(\"<h1 align=center>ExQuizMe</h1><br>\");\t\tout.print(\"<h1 align=center>Quiz On Java</h1><br>\");\t\tout.print(\"<h1 align=center>=====================</h1><br><br>\");\t\tout.print(\"<table align=center class=\\\"score\\\">\");\t\tout.print(\"<tr><td><div><h2>Total number of questions</h2></td><td><h2>: 10</h2></td></tr><br>\");    \tout.print(\"<tr><td><div><h2>Number of answered questions</h2></td><td><h2>: \"+at+\"</h2></td></tr><br>\");\t\tout.print(\"<tr><td><div><h2>Number of unanswered questions</h2></td><td><h2>: \"+(10-at)+\" </h2></td></tr><br>\");   \t\tout.print(\"<tr><td><div><h2>Your Score</h2></td><td><h2>: \"+co+\"</h2></td></tr><br>\");   \t\tout.print(\"</table>\");\t\tout.print(\"</div>\");\t\tout.print(\"</form>\");\t\tout.print(\"</div>\");\t\tout.print(\"</body>\");\t\tout.close();\t}", "url": "https://raw.githubusercontent.com/SShivani/Online-Quiz-Project/master/WEB-INF/classes/ResultServlet.java", "stars": "2", "class": {"name": "ResultServlet", "extends": "HttpServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "init", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void init() {        userOne = new User();        userOne.setLogin(USER_ONE_LOGIN);        userOne.setPassword(RandomStringUtils.random(60));        userOne.setActivated(true);        userOne.setEmail(USER_ONE_EMAIL);        userOne.setFirstName(\"userOne\");        userOne.setLastName(\"doe\");        userOne.setLangKey(\"en\");        userOne.setBankAccountIBAN(DEFAULT_IBAN);        userRepository.save(userOne);        userTwo = new User();        userTwo.setLogin(USER_TWO_LOGIN);        userTwo.setPassword(RandomStringUtils.random(60));        userTwo.setActivated(true);        userTwo.setEmail(USER_TWO_EMAIL);        userTwo.setFirstName(\"userTwo\");        userTwo.setLastName(\"doe\");        userTwo.setLangKey(\"en\");        userTwo.setBankAccountIBAN(DEFAULT_IBAN);        userRepository.save(userTwo);        userThree = new User();        userThree.setLogin(USER_THREE_LOGIN);        userThree.setPassword(RandomStringUtils.random(60));        userThree.setActivated(false);        userThree.setEmail(USER_THREE_EMAIL);        userThree.setFirstName(\"userThree\");        userThree.setLastName(\"doe\");        userThree.setLangKey(\"en\");        userThree.setBankAccountIBAN(DEFAULT_IBAN);        userRepository.save(userThree);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/security/DomainUserDetailsServiceIT.java", "stars": "2", "class": {"name": "DomainUserDetailsServiceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "assertThatUserCanBeFoundByLogin", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void assertThatUserCanBeFoundByLogin() {        UserDetails userDetails = domainUserDetailsService.loadUserByUsername(USER_ONE_LOGIN);        assertThat(userDetails).isNotNull();        assertThat(userDetails.getUsername()).isEqualTo(USER_ONE_LOGIN);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/security/DomainUserDetailsServiceIT.java", "stars": "2", "class": {"name": "DomainUserDetailsServiceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "assertThatUserCanBeFoundByLoginIgnoreCase", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void assertThatUserCanBeFoundByLoginIgnoreCase() {        UserDetails userDetails = domainUserDetailsService.loadUserByUsername(USER_ONE_LOGIN.toUpperCase(Locale.ENGLISH));        assertThat(userDetails).isNotNull();        assertThat(userDetails.getUsername()).isEqualTo(USER_ONE_LOGIN);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/security/DomainUserDetailsServiceIT.java", "stars": "2", "class": {"name": "DomainUserDetailsServiceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "assertThatUserCanBeFoundByEmail", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void assertThatUserCanBeFoundByEmail() {        UserDetails userDetails = domainUserDetailsService.loadUserByUsername(USER_TWO_EMAIL);        assertThat(userDetails).isNotNull();        assertThat(userDetails.getUsername()).isEqualTo(USER_TWO_LOGIN);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/security/DomainUserDetailsServiceIT.java", "stars": "2", "class": {"name": "DomainUserDetailsServiceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "assertThatUserCanBeFoundByEmailIgnoreCase", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void assertThatUserCanBeFoundByEmailIgnoreCase() {        UserDetails userDetails = domainUserDetailsService.loadUserByUsername(USER_TWO_EMAIL.toUpperCase(Locale.ENGLISH));        assertThat(userDetails).isNotNull();        assertThat(userDetails.getUsername()).isEqualTo(USER_TWO_LOGIN);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/security/DomainUserDetailsServiceIT.java", "stars": "2", "class": {"name": "DomainUserDetailsServiceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "assertThatEmailIsPrioritizedOverLogin", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void assertThatEmailIsPrioritizedOverLogin() {        UserDetails userDetails = domainUserDetailsService.loadUserByUsername(USER_ONE_EMAIL);        assertThat(userDetails).isNotNull();        assertThat(userDetails.getUsername()).isEqualTo(USER_ONE_LOGIN);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/security/DomainUserDetailsServiceIT.java", "stars": "2", "class": {"name": "DomainUserDetailsServiceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "assertThatUserNotActivatedExceptionIsThrownForNotActivatedUsers", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void assertThatUserNotActivatedExceptionIsThrownForNotActivatedUsers() {        assertThatExceptionOfType(UserNotActivatedException.class).isThrownBy(            () -> domainUserDetailsService.loadUserByUsername(USER_THREE_LOGIN));    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/test/java/com/gardle/security/DomainUserDetailsServiceIT.java", "stars": "2", "class": {"name": "DomainUserDetailsServiceIT", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPricePerMonth", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void setPricePerMonth() {        this.pricePerMonth = this.pricePerM2 * this.sizeInM2 * GardenField.PRIZE_CALCULATION_PERIOD_IN_DAYS;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/domain/GardenField.java", "stars": "2", "class": {"name": "GardenField", "extends": "AbstractDeletableAuditingEntity", "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "contentType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MediaType", "snippet": "    public MediaType contentType() {        return responseBody.contentType();    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/DownloadResponseBody.java", "stars": "1", "class": {"name": "DownloadResponseBody", "extends": "ResponseBody", "implements": null, "modifiers": ["public"]}}, {"method_name": "contentLength", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long contentLength() {        return responseBody.contentLength();    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/DownloadResponseBody.java", "stars": "1", "class": {"name": "DownloadResponseBody", "extends": "ResponseBody", "implements": null, "modifiers": ["public"]}}, {"method_name": "source", "params": [], "throws": null, "modifiers": ["public"], "return_type": "BufferedSource", "snippet": "    public BufferedSource source() {        if (bufferedSource == null) {            bufferedSource = Okio.buffer(source(responseBody.source()));        }        return bufferedSource;    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/DownloadResponseBody.java", "stars": "1", "class": {"name": "DownloadResponseBody", "extends": "ResponseBody", "implements": null, "modifiers": ["public"]}}, {"method_name": "source", "params": ["Source"], "throws": null, "modifiers": ["private"], "return_type": "Source", "snippet": "    private Source source(Source source) {        return new ForwardingSource(source) {            long totalBytesRead = 0L;            @Override            public long read(Buffer sink, long byteCount) throws IOException {                final long bytesRead = super.read(sink, byteCount);                if (null != downloadListener) {                    totalBytesRead += bytesRead != -1 ? bytesRead : 0;                    final int progress = (int) (totalBytesRead * 100 / responseBody.contentLength());//                    if (ILogger.DEBUG) {//                        ILogger.t(\"download\").w(\"\u5df2\u7ecf\u4e0b\u8f7d\u7684\uff1a\"//                                + totalBytesRead + \"\u5171\u6709\uff1a\" + responseBody.contentLength()//                                + \"\uff0cprogress\uff1a\" + progress);//                    }                    if (executor != null) {                        executor.execute(() -> downloadListener.onProgress(progress));                    } else {                        downloadListener.onProgress(progress);                    }                }                return bytesRead;            }        };    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/DownloadResponseBody.java", "stars": "1", "class": {"name": "DownloadResponseBody", "extends": "ResponseBody", "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_demo_simple);        Resources res = getResources();        final String description = res.getString(R.string.pin_desc_kitten);        ((TextView) findViewById(R.id.desc_tv)).setText(description);        mImage = (ImageView) findViewById(R.id.source_iv);        // Show the remote image in ImageView.        new DemoHelper.RemoteImageTask(mImage, IMAGE_SOURCE).execute();        PinItButton pinIt = (PinItButton) findViewById(R.id.pin_bt);        pinIt.setImageUrl(IMAGE_SOURCE);        pinIt.setUrl(WEB_URL);        pinIt.setDescription(description);        pinIt.setListener(_listener);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/PinItDemo/src/com/pinterest/samples/pinit/DemoSimple.java", "stars": "74", "class": {"name": "DemoSimple", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "exec", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String exec(HttpServletRequest req, HttpServletResponse resp) {\t\tString view = \"/gBoard/gBoardWrite.jsp\";\t\t// \ub9cc\uc57d \ub85c\uadf8\uc778 \ud558\uc9c4 \uc54a\uc558\uac70\ub098 \uc774\ubbf8 \ubc29\uba85\ub85d\uc744 \uc791\uc131\ud55c \uc0ac\ub78c\uc740 \ub85c\uadf8\uc778\ud398\uc774\uc9c0\ub098 \ubc29\uba85\ub85d \ub9ac\uc2a4\ud2b8\ud398\uc774\uc9c0\ub85c \uc774\ub3d9\ud574\uc57c \ud55c\ub2e4.\t\t// \ub85c\uadf8\uc778 \ud558\uc9c0 \uc54a\uc740 \uc0ac\ub78c\uc774 \uc694\uccad\ud558\ub294 \uacbd\uc6b0 \ucc98\ub9ac\t\tHttpSession session = req.getSession();\t\tString sid = (String) session.getAttribute(\"SID\");\t\tif(sid == null || sid.length() == 0) {\t\t\tview = \"/clsProj/member/login.cls\";\t\t\treq.setAttribute(\"isRedirect\", true);\t\t}\t\t// \uc774\ubbf8 \ubc29\uba85\ub85d\uc744 \uc791\uc131\ud55c \uc0ac\ub78c\uc774 \uc694\uccad\ud558\ub294 \uacbd\uc6b0\t\tGBoardDAO gDAO = new GBoardDAO();\t\tint cnt = gDAO.getCnt(sid);\t\tif(cnt == 1) {\t\t\tview = \"/clsProj/gBoard/gBoardList.cls\";\t\t\treq.setAttribute(\"isRedirect\", true);\t\t}\t\treturn view;\t}", "url": "https://raw.githubusercontent.com/increpas-cls2/clsProj/branch/clsProj/src/com/increpas/www/controller/gBoard/GBoardWrite.java", "stars": "2", "class": {"name": "GBoardWrite", "extends": null, "implements": ["ClsController"], "modifiers": ["public"]}}, {"method_name": "findQuestion", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "List<Question>", "snippet": "    public List<Question> findQuestion(String question){        return questionMapper.findAnswer(question);    }", "url": "https://raw.githubusercontent.com/tianhan1998/WechatMoocQuestion/master/src/main/java/cn/th/service/QuestionService.java", "stars": "2", "class": {"name": "QuestionService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "insertQuestion", "params": ["Question"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int insertQuestion(Question question){        return questionMapper.insertQuestion(question);    }", "url": "https://raw.githubusercontent.com/tianhan1998/WechatMoocQuestion/master/src/main/java/cn/th/service/QuestionService.java", "stars": "2", "class": {"name": "QuestionService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAnswer", "params": ["String"], "throws": ["URISyntaxException", "IOException"], "modifiers": ["public"], "return_type": "JSONObject", "snippet": "    public JSONObject getAnswer(String question) throws URISyntaxException, IOException {        List<Question> list = findQuestion(question);        if(list.size()==0) {            List<NameValuePair> form = new ArrayList<>();            form.add(new BasicNameValuePair(\"topic[0]\", question));            HttpPost post = HttpUtils.getPost(new URIBuilder(API), form);            CloseableHttpResponse res = HttpUtils.getClient().execute(post);            JSONArray json = JSON.parseArray(EntityUtils.toString(res.getEntity(), \"utf-8\"));            JSONArray result = json.getJSONObject(0).getJSONArray(\"result\");            JSONObject content;            JSONObject back=new JSONObject();            if (result != null) {                if (result.size() > 0) {                    for (int i = 0; i < result.size(); i++) {                        JSONObject temp = result.getJSONObject(i);                        JSONArray correct = temp.getJSONArray(\"correct\");                        content = correct.getJSONObject(0);                        JSONObject finalContent = content;                        String answer=finalContent.getString(\"content\");                        if(answer.contains(\"javascript:void(0);\")){                            answer=answer.replaceAll(\"javascript:void\\\\(0\\\\);\",\"\");                        }                        String finalAnswer = answer;                        if(insertQuestion(new Question(){{                            this.setQuestion(temp.getString(\"topic\"));                            this.setAnswer(finalAnswer);                        }})>0) {                            log.info(\"\u63d2\u5165\u9898\u76ee\u6210\u529f---->\" + content.toString());                            back.put(\"question\",temp.getString(\"topic\"));                            back.put(\"content\",finalAnswer);                        }else{                            log.error(\"\u63d2\u5165\u9898\u76ee\u5931\u8d25\");                        }                    }                } else {                    return new JSONObject() {{                        this.put(\"question\",\"\u67e5\u8be2\u5931\u8d25\");                        this.put(\"content\", \"\u65e0\u7b54\u6848\");                    }};                }            }            return back;        }else{            return new JSONObject(){{                this.put(\"content\",list.get(0).getAnswer());                this.put(\"question\",list.get(0).getQuestion());            }};        }    }", "url": "https://raw.githubusercontent.com/tianhan1998/WechatMoocQuestion/master/src/main/java/cn/th/service/QuestionService.java", "stars": "2", "class": {"name": "QuestionService", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "find1", "params": ["int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean find1(int value, int[] array) {\t\tfor(int a = 0; a < array.length; a++)\t\t\tif (array[a] == value)\t\t\t\treturn true;\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/test/resources/src/FindNArray.java", "stars": "12", "class": {"name": "FindNArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "find2", "params": ["int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean find2(int value, int[][] array) {\t\tfor(int a = 0; a < array.length; a++)\t\t\tfor(int b = 0; b < array[0].length; b++)\t\t\t\tif (array[a][b] == value)\t\t\t\t\treturn true;\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/test/resources/src/FindNArray.java", "stars": "12", "class": {"name": "FindNArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "find3", "params": ["int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean find3(int value, int[][][] array) {\t\tfor(int a = 0; a < array.length; a++)\t\t\tfor(int b = 0; b < array[0].length; b++)\t\t\t\tfor(int c = 0; c < array[0][0].length; c++)\t\t\t\t\tif (array[a][b][c] == value)\t\t\t\t\t\treturn true;\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/test/resources/src/FindNArray.java", "stars": "12", "class": {"name": "FindNArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "find4", "params": ["int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean find4(int value, int[][][][] array) {\t\tfor(int a = 0; a < array.length; a++)\t\t\tfor(int b = 0; b < array[0].length; b++)\t\t\t\tfor(int c = 0; c < array[0][0].length; c++)\t\t\t\t\tfor(int d = 0; d < array[0][0][0].length; d++)\t\t\t\t\t\tif (array[a][b][c][d] == value)\t\t\t\t\t\t\treturn true;\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/test/resources/src/FindNArray.java", "stars": "12", "class": {"name": "FindNArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "find5", "params": ["int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean find5(int value, int[][][][][] array) {\t\tfor(int a = 0; a < array.length; a++)\t\t\tfor(int b = 0; b < array[0].length; b++)\t\t\t\tfor(int c = 0; c < array[0][0].length; c++)\t\t\t\t\tfor(int d = 0; d < array[0][0][0].length; d++)\t\t\t\t\t\tfor(int e = 0; e < array[0][0][0][0].length; e++)\t\t\t\t\t\t\tif (array[a][b][c][d][e] == value)\t\t\t\t\t\t\t\treturn true;\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/test/resources/src/FindNArray.java", "stars": "12", "class": {"name": "FindNArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "find6", "params": ["int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean find6(int value, int[][][][][][] array) {\t\tfor(int a = 0; a < array.length; a++)\t\t\tfor(int b = 0; b < array[0].length; b++)\t\t\t\tfor(int c = 0; c < array[0][0].length; c++)\t\t\t\t\tfor(int d = 0; d < array[0][0][0].length; d++)\t\t\t\t\t\tfor(int e = 0; e < array[0][0][0][0].length; e++)\t\t\t\t\t\t\tfor(int f = 0; f < array[0][0][0][0][0].length; f++)\t\t\t\t\t\t\t\tif (array[a][b][c][d][e][f] == value)\t\t\t\t\t\t\t\t\treturn true;\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/test/resources/src/FindNArray.java", "stars": "12", "class": {"name": "FindNArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "find7", "params": ["int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean find7(int value, int[][][][][][][] array) {\t\tfor(int a = 0; a < array.length; a++)\t\t\tfor(int b = 0; b < array[0].length; b++)\t\t\t\tfor(int c = 0; c < array[0][0].length; c++)\t\t\t\t\tfor(int d = 0; d < array[0][0][0].length; d++)\t\t\t\t\t\tfor(int e = 0; e < array[0][0][0][0].length; e++)\t\t\t\t\t\t\tfor(int f = 0; f < array[0][0][0][0][0].length; f++)\t\t\t\t\t\t\t\tfor(int g = 0; g < array[0][0][0][0][0][0].length; g++)\t\t\t\t\t\t\t\t\tif (array[a][b][c][d][e][f][g] == value)\t\t\t\t\t\t\t\t\t\treturn true;\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/test/resources/src/FindNArray.java", "stars": "12", "class": {"name": "FindNArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "find8", "params": ["int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean find8(int value, int[][][][][][][][] array) {\t\tfor(int a = 0; a < array.length; a++)\t\t\tfor(int b = 0; b < array[0].length; b++)\t\t\t\tfor(int c = 0; c < array[0][0].length; c++)\t\t\t\t\tfor(int d = 0; d < array[0][0][0].length; d++)\t\t\t\t\t\tfor(int e = 0; e < array[0][0][0][0].length; e++)\t\t\t\t\t\t\tfor(int f = 0; f < array[0][0][0][0][0].length; f++)\t\t\t\t\t\t\t\tfor(int g = 0; g < array[0][0][0][0][0][0].length; g++)\t\t\t\t\t\t\t\t\tfor(int h = 0; h < array[0][0][0][0][0][0][0].length; h++)\t\t\t\t\t\t\t\t\t\tif (array[a][b][c][d][e][f][g][h] == value)\t\t\t\t\t\t\t\t\t\t\treturn true;\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/test/resources/src/FindNArray.java", "stars": "12", "class": {"name": "FindNArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "find9", "params": ["int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean find9(int value, int[][][][][][][][][] array) {\t\tfor(int a = 0; a < array.length; a++)\t\t\tfor(int b = 0; b < array[0].length; b++)\t\t\t\tfor(int c = 0; c < array[0][0].length; c++)\t\t\t\t\tfor(int d = 0; d < array[0][0][0].length; d++)\t\t\t\t\t\tfor(int e = 0; e < array[0][0][0][0].length; e++)\t\t\t\t\t\t\tfor(int f = 0; f < array[0][0][0][0][0].length; f++)\t\t\t\t\t\t\t\tfor(int g = 0; g < array[0][0][0][0][0][0].length; g++)\t\t\t\t\t\t\t\t\tfor(int h = 0; h < array[0][0][0][0][0][0][0].length; h++)\t\t\t\t\t\t\t\t\t\tfor(int i = 0; i < array[0][0][0][0][0][0][0].length; i++)\t\t\t\t\t\t\t\t\t\t\tif (array[a][b][c][d][e][f][g][h][i] == value)\t\t\t\t\t\t\t\t\t\t\t\treturn true;\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/test/resources/src/FindNArray.java", "stars": "12", "class": {"name": "FindNArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "find10", "params": ["int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "\tpublic static boolean find10(int value, int[][][][][][][][][][] array) {\t\tfor(int a = 0; a < array.length; a++)\t\t\tfor(int b = 0; b < array[0].length; b++)\t\t\t\tfor(int c = 0; c < array[0][0].length; c++)\t\t\t\t\tfor(int d = 0; d < array[0][0][0].length; d++)\t\t\t\t\t\tfor(int e = 0; e < array[0][0][0][0].length; e++)\t\t\t\t\t\t\tfor(int f = 0; f < array[0][0][0][0][0].length; f++)\t\t\t\t\t\t\t\tfor(int g = 0; g < array[0][0][0][0][0][0].length; g++)\t\t\t\t\t\t\t\t\tfor(int h = 0; h < array[0][0][0][0][0][0][0].length; h++)\t\t\t\t\t\t\t\t\t\tfor(int i = 0; i < array[0][0][0][0][0][0][0].length; i++)\t\t\t\t\t\t\t\t\t\t\tfor(int j = 0; j < array[0][0][0][0][0][0][0][0].length; j++)\t\t\t\t\t\t\t\t\t\t\t\tif (array[a][b][c][d][e][f][g][h][i][j] == value)\t\t\t\t\t\t\t\t\t\t\t\t\treturn true;\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/Col-E/SimAnalyzer/master/src/test/resources/src/FindNArray.java", "stars": "12", "class": {"name": "FindNArray", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "parseNetworkResponse", "params": ["Response", "int"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "Boolean", "snippet": "    public Boolean parseNetworkResponse(Response response, int id) throws Exception {        return saveFile(response, id);    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/MemoryCallBack.java", "stars": "2", "class": {"name": "MemoryCallBack", "extends": "Callback", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "saveFile", "params": ["Response", "int"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean saveFile(Response response, final int id) throws IOException {        InputStream is = null;        byte[] buf = new byte[2048];        int len = 0;        try {            is = response.body().byteStream();            final long total = response.body().contentLength();            long sum = 0;            while ((len = is.read(buf)) != -1) {                sum += len;                final long finalSum = sum;                OkHttpUtils.getInstance().getDelivery().execute(new Runnable() {                    @Override                    public void run() {                        Debuger.printfLog(\"######### inProgress\" + finalSum * 1.0f / total);                        inProgress(finalSum * 1.0f / total, total, id);                    }                });            }            return true;        } finally {            try {                response.body().close();                if (is != null) is.close();            } catch (IOException e) {            }        }    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/utils/MemoryCallBack.java", "stars": "2", "class": {"name": "MemoryCallBack", "extends": "Callback", "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "contextLoads", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "    void contextLoads() {    }", "url": "https://raw.githubusercontent.com/mqxu/spring-boot-review/master/spring-boot-start/src/test/java/com/soft1851/springboot/start/SpringBootStartApplicationTests.java", "stars": "3", "class": {"name": "SpringBootStartApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "onDraw", "params": ["Canvas"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        int bitmapWidth = bitmap.getWidth();        int bitmapHeight = bitmap.getHeight();        //sx sy \u662f\u6a2a\u5411\u548c\u7eb5\u5411\u7684\u653e\u7f29\u500d\u6570\uff1b px py \u662f\u653e\u7f29\u7684\u8f74\u5fc3        canvas.save();        canvas.scale(1.3f, 1.3f, point1.x + bitmapWidth / 2, point1.y + bitmapHeight / 2);        canvas.drawBitmap(bitmap, point1.x, point1.y, paint);        canvas.restore();        canvas.save();        canvas.scale(0.6f, 1.6f, point2.x + bitmapWidth / 2, point2.y + bitmapHeight / 2);        canvas.drawBitmap(bitmap, point2.x, point2.y, paint);        canvas.restore();    }", "url": "https://raw.githubusercontent.com/Geekholt/Practice-CustomView/master/app/src/main/java/com/geekholt/practiceui/view/lesson4/Practice04ScaleView.java", "stars": "2", "class": {"name": "Practice04ScaleView", "extends": "View", "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldFailOnDuplicatedId", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldFailOnDuplicatedId() {    Configuration configuration = new Configuration();    when(() -> configuration.addMapper(IdConflictMapper.class));    then(caughtException()).isInstanceOf(RuntimeException.class)      .hasMessage(\"Result Maps collection already contains value for org.apache.ibatis.submitted.results_id.IdConflictMapper.userResult\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/results_id/IdConflictTest.java", "stars": "15", "class": {"name": "IdConflictTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "splitTables", "params": ["DataBaseType", "String"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<String>", "snippet": "    public static List<String> splitTables(DataBaseType dataBaseType,                                           String tables) {        List<String> splittedTables = new ArrayList<String>();        String[] tableArrays = tables.split(\",\");        String tableName = null;        for (String tableArray : tableArrays) {            Matcher matcher = pattern.matcher(tableArray.trim());            if (!matcher.matches()) {                tableName = tableArray.trim();                splittedTables.add(tableName);            } else {                String start = matcher.group(3).trim();                String end = matcher.group(4).trim();                String tmp = \"\";                if (Integer.valueOf(start) > Integer.valueOf(end)) {                    tmp = start;                    start = end;                    end = tmp;                }                int len = start.length();                String schema = null;                for (int k = Integer.valueOf(start); k <= Integer.valueOf(end); k++) {                    schema = (null == matcher.group(1)) ? \"\" : matcher.group(1)                            .trim();                    if (start.startsWith(\"0\")) {                        tableName = schema + matcher.group(2).trim()                                + String.format(\"%0\" + len + \"d\", k)                                + matcher.group(5).trim();                        splittedTables.add(tableName);                    } else {                        tableName = schema + matcher.group(2).trim()                                + String.format(\"%d\", k)                                + matcher.group(5).trim();                        splittedTables.add(tableName);                    }                }            }        }        return splittedTables;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/util/TableExpandUtil.java", "stars": "23", "class": {"name": "TableExpandUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "expandTableConf", "params": ["DataBaseType", "List<String>"], "throws": null, "modifiers": ["public", "static"], "return_type": "List<String>", "snippet": "    public static List<String> expandTableConf(DataBaseType dataBaseType,                                               List<String> tables) {        List<String> parsedTables = new ArrayList<String>();        for (String table : tables) {            List<String> splittedTables = splitTables(dataBaseType, table);            parsedTables.addAll(splittedTables);        }        return parsedTables;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/engine/datax/datax-core/src/main/java/com/alibaba/datax/plugin/rdbms/util/TableExpandUtil.java", "stars": "23", "class": {"name": "TableExpandUtil", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getUsername", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getUsername() {        return username;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/vm/LoginVM.java", "stars": "2", "class": {"name": "LoginVM", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUsername", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUsername(String username) {        this.username = username;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/vm/LoginVM.java", "stars": "2", "class": {"name": "LoginVM", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPassword", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPassword() {        return password;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/vm/LoginVM.java", "stars": "2", "class": {"name": "LoginVM", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPassword", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPassword(String password) {        this.password = password;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/vm/LoginVM.java", "stars": "2", "class": {"name": "LoginVM", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isRememberMe", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Boolean", "snippet": "    public Boolean isRememberMe() {        return rememberMe;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/vm/LoginVM.java", "stars": "2", "class": {"name": "LoginVM", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setRememberMe", "params": ["Boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setRememberMe(Boolean rememberMe) {        this.rememberMe = rememberMe;    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/vm/LoginVM.java", "stars": "2", "class": {"name": "LoginVM", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"LoginVM{\" +            \"username='\" + username + '\\'' +            \", rememberMe=\" + rememberMe +            '}';    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/web/rest/vm/LoginVM.java", "stars": "2", "class": {"name": "LoginVM", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "gerarPorcentagemGreatReviewsPlataforma", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void gerarPorcentagemGreatReviewsPlataforma(){        String line = \"\";        int contaReviews = 0;        Map<String, Info> map = new TreeMap<>();        File arq = new File(\"game-reviews.csv\");        SimpleReader file = new SimpleReader(arq.getAbsolutePath());        line = file.readLine();        line = file.readLine();        while (line != null) {            String[] col = line.split(\";\");            contaReviews++;                        String platform = col[1];            String score_phrase = col[2];                        if (!map.containsKey(platform)) {                Info i = new Info();                i.totaisTitulos = 1;                if(score_phrase.equals(\"Great\")){                    i.totaisGreat++;                }                map.put(platform, i);            } else {                Info i = map.get(platform);                if(score_phrase.equals(\"Great\")){                    i.totaisGreat++;                }                i.totaisTitulos++;            }            line = file.readLine();        }                Set<Map.Entry<String, Info>> set = map.entrySet();                set.forEach((result) -> {            System.out.println(\"Plataforma \" + result.getKey() + \" | Porcentagem Great Reviews \" + ((result.getValue().totaisGreat*100)/result.getValue().totaisTitulos)+\"%\");        });    }", "url": "https://raw.githubusercontent.com/gustavost645/tarefa_reviews/master/src/main/java/br/univates/GeradorLista/GreatReviews.java", "stars": "2", "class": {"name": "GreatReviews", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPropertyOfDisplayType", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPropertyOfDisplayType(int type) {        String s;        switch (type) {        case DISPLAYTYPE_MONOCHROME:            s = \"monochrome\";            break;        case DISPLAYTYPE_GREEN:            s = \"green\";            break;        case DISPLAYTYPE_AMBER:            s = \"amber\";            break;        case DISPLAYTYPE_COLOR:            s = \"color\";            break;        default:            s = \"monochrome\";            break;        }        Application.getProperties().setProperty(PROPERTY_DISPLAY_TYPE, s);        initializeColors();        initializeFonts();    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractDisplay.java", "stars": "4", "class": {"name": "AbstractDisplay", "extends": "JComponent", "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "getPropertyOfDisplayType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getPropertyOfDisplayType() {        Properties p = Application.getProperties();        String m = p.getProperty(PROPERTY_DISPLAY_TYPE);        String m_compat = p.getProperty(PROPERTY_DISPLAY_COLOR);        // \u65b0\u3057\u3044\u30d7\u30ed\u30d1\u30c6\u30a3\u6587\u5b57\u5217\u306b\u5909\u63db\u3059\u308b\u3002        if (m_compat != null) {            p.setProperty(PROPERTY_DISPLAY_TYPE, m_compat);            p.remove(PROPERTY_DISPLAY_COLOR);            m = m_compat;        }        if (m == null) {            return DISPLAYTYPE_MONOCHROME;        }        else {            if (m.equals(\"monochrome\")) {                return DISPLAYTYPE_MONOCHROME;            }            else if (m.equals(\"green\")) {                return DISPLAYTYPE_GREEN;            }            else if (m.equals(\"amber\") || m.equals(\"orange\")) {                return DISPLAYTYPE_AMBER;            }            else if (m.equals(\"color\")){                return DISPLAYTYPE_COLOR;            }            else {                return DISPLAYTYPE_MONOCHROME;            }        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractDisplay.java", "stars": "4", "class": {"name": "AbstractDisplay", "extends": "JComponent", "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "setDisplayColorMap", "params": ["int", "String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDisplayColorMap(int kind, String file) {        if (kind == COLORMAP_DEFAULT) {            Application.getProperties().setProperty(PROPERTY_DISPLAY_COLORMAP, \"default\");        }        else if (kind == COLORMAP_FILE) {            if (file == null || file.length() == 0) {                throw new IllegalArgumentException(\"\u30d5\u30a1\u30a4\u30eb\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u304b\u30d5\u30a1\u30a4\u30eb\u540d\u9577\u304c\u30bc\u30ed\u3067\u3059\u3002\");            }            readColorMapFile(file);            Application.getProperties().setProperty(PROPERTY_DISPLAY_COLORMAP, \"file \" + file);        }        applyDisplayColor();        initializeFonts();    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractDisplay.java", "stars": "4", "class": {"name": "AbstractDisplay", "extends": "JComponent", "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "getPropertyOfDisplayColorMap", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getPropertyOfDisplayColorMap() {        String m = Application.getProperties().getProperty(PROPERTY_DISPLAY_COLORMAP, \"default\");        if (m.matches(\"^default\\\\s.*$\")) {            return COLORMAP_DEFAULT;        }        else if (m.matches(\"^file\\\\s.*$\")) {            return COLORMAP_FILE;        }        else {            return COLORMAP_DEFAULT;        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractDisplay.java", "stars": "4", "class": {"name": "AbstractDisplay", "extends": "JComponent", "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "getPropertyOfDisplayColorMapFile", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPropertyOfDisplayColorMapFile() {        String m = Application.getProperties().getProperty(PROPERTY_DISPLAY_COLORMAP);        if (m == null) {            return null;        }        else {            if (m.matches(\"^default\\\\s.*$\")) {                return null;            }            else if (m.matches(\"^file\\\\s.*$\")) {                return m.replaceFirst(\"^file\\\\s*\", \"\");            }            else {                return null;            }        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractDisplay.java", "stars": "4", "class": {"name": "AbstractDisplay", "extends": "JComponent", "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "getPropertyOfDisplayScaling", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getPropertyOfDisplayScaling() {        String m = Application.getProperties().getProperty(PROPERTY_DISPLAY_SCALING, \"1\");        int value;        try {            value = Integer.parseInt(m);        }        catch (NumberFormatException e) {            value = 1;        }        return value;    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractDisplay.java", "stars": "4", "class": {"name": "AbstractDisplay", "extends": "JComponent", "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "setPropertyOfDisplayScaling", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPropertyOfDisplayScaling(int scaling) {        this.scaling = scaling;        computer.getApplication().pack();        Application.getProperties().setProperty(PROPERTY_DISPLAY_SCALING, Integer.toString(scaling));    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractDisplay.java", "stars": "4", "class": {"name": "AbstractDisplay", "extends": "JComponent", "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "readColorMapFile", "params": ["String"], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "boolean", "snippet": "    protected abstract boolean readColorMapFile(String filename);    protected abstract void applyDisplayColor();    protected abstract void initializeColors();    protected abstract void initializeFonts();    protected abstract void renderDisplay(Graphics g);    public void refresh() {        SwingUtilities.invokeLater(refresher);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractDisplay.java", "stars": "4", "class": {"name": "AbstractDisplay", "extends": "JComponent", "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "applyDisplayColor", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void applyDisplayColor();    protected abstract void initializeColors();    protected abstract void initializeFonts();    protected abstract void renderDisplay(Graphics g);    public void refresh() {        SwingUtilities.invokeLater(refresher);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractDisplay.java", "stars": "4", "class": {"name": "AbstractDisplay", "extends": "JComponent", "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "initializeColors", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void initializeColors();    protected abstract void initializeFonts();    protected abstract void renderDisplay(Graphics g);    public void refresh() {        SwingUtilities.invokeLater(refresher);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractDisplay.java", "stars": "4", "class": {"name": "AbstractDisplay", "extends": "JComponent", "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "initializeFonts", "params": [], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void initializeFonts();    protected abstract void renderDisplay(Graphics g);    public void refresh() {        SwingUtilities.invokeLater(refresher);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractDisplay.java", "stars": "4", "class": {"name": "AbstractDisplay", "extends": "JComponent", "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "renderDisplay", "params": ["Graphics"], "throws": null, "modifiers": ["abstract", "protected"], "return_type": "void", "snippet": "    protected abstract void renderDisplay(Graphics g);    public void refresh() {        SwingUtilities.invokeLater(refresher);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractDisplay.java", "stars": "4", "class": {"name": "AbstractDisplay", "extends": "JComponent", "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "refresh", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void refresh() {        SwingUtilities.invokeLater(refresher);    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractDisplay.java", "stars": "4", "class": {"name": "AbstractDisplay", "extends": "JComponent", "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "paintComponent", "params": ["Graphics"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void paintComponent(Graphics g) {        super.paintComponent(g);        g.setColor(Color.gray);        g.fillRect(0, 0, width * scaling, height * scaling);        if (computer.getRunningStatus() == Computer.STATUS_RUNNING || computer.getRunningStatus() == Computer.STATUS_PAUSED) {            renderDisplay(g);        }    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractDisplay.java", "stars": "4", "class": {"name": "AbstractDisplay", "extends": "JComponent", "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "execute", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void execute() {    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractDisplay.java", "stars": "4", "class": {"name": "AbstractDisplay", "extends": "JComponent", "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "reset", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void reset() {    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractDisplay.java", "stars": "4", "class": {"name": "AbstractDisplay", "extends": "JComponent", "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "loadState", "params": ["StateSet"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void loadState(StateSet ss) {    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractDisplay.java", "stars": "4", "class": {"name": "AbstractDisplay", "extends": "JComponent", "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "saveState", "params": ["StateSet"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void saveState(StateSet ss) {    }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractDisplay.java", "stars": "4", "class": {"name": "AbstractDisplay", "extends": "JComponent", "implements": ["Device", "StateSavable"], "modifiers": ["public", "abstract"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void run() {            paintImmediately(0, 0, width * scaling, height * scaling);        }", "url": "https://raw.githubusercontent.com/kemusiro/jr100-emulator-v2/master/src/jp/asamomiji/emulator/AbstractDisplay.java", "stars": "4", "class": {"name": "Refresher", "extends": null, "implements": ["Runnable"], "modifiers": ["private"]}}, {"method_name": "create", "params": ["Class<T>"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public <T> T create(Class<T> type) {    return create(type, null, null);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/factory/DefaultObjectFactory.java", "stars": "15", "class": {"name": "DefaultObjectFactory", "extends": null, "implements": ["ObjectFactory", "Serializable"], "modifiers": ["public"]}}, {"method_name": "create", "params": ["Class<T>", "List<Class>", "List<Object>"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "  public <T> T create(Class<T> type, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {    Class<?> classToCreate = resolveInterface(type);    // we know types are assignable    return (T) instantiateClass(classToCreate, constructorArgTypes, constructorArgs);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/factory/DefaultObjectFactory.java", "stars": "15", "class": {"name": "DefaultObjectFactory", "extends": null, "implements": ["ObjectFactory", "Serializable"], "modifiers": ["public"]}}, {"method_name": "instantiateClass", "params": ["Class<T>", "List<Class>", "List<Object>"], "throws": null, "modifiers": ["private"], "return_type": "T", "snippet": "  private  <T> T instantiateClass(Class<T> type, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {    try {      Constructor<T> constructor;      if (constructorArgTypes == null || constructorArgs == null) {        constructor = type.getDeclaredConstructor();        try {          return constructor.newInstance();        } catch (IllegalAccessException e) {          if (Reflector.canControlMemberAccessible()) {            constructor.setAccessible(true);            return constructor.newInstance();          } else {            throw e;          }        }      }      constructor = type.getDeclaredConstructor(constructorArgTypes.toArray(new Class[0]));      try {        return constructor.newInstance(constructorArgs.toArray(new Object[0]));      } catch (IllegalAccessException e) {        if (Reflector.canControlMemberAccessible()) {          constructor.setAccessible(true);          return constructor.newInstance(constructorArgs.toArray(new Object[0]));        } else {          throw e;        }      }    } catch (Exception e) {      String argTypes = Optional.ofNullable(constructorArgTypes).orElseGet(Collections::emptyList)          .stream().map(Class::getSimpleName).collect(Collectors.joining(\",\"));      String argValues = Optional.ofNullable(constructorArgs).orElseGet(Collections::emptyList)          .stream().map(String::valueOf).collect(Collectors.joining(\",\"));      throw new ReflectionException(\"Error instantiating \" + type + \" with invalid types (\" + argTypes + \") or values (\" + argValues + \"). Cause: \" + e, e);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/factory/DefaultObjectFactory.java", "stars": "15", "class": {"name": "DefaultObjectFactory", "extends": null, "implements": ["ObjectFactory", "Serializable"], "modifiers": ["public"]}}, {"method_name": "resolveInterface", "params": ["Class<?>"], "throws": null, "modifiers": ["protected"], "return_type": "Class<?>", "snippet": "  protected Class<?> resolveInterface(Class<?> type) {    Class<?> classToCreate;    if (type == List.class || type == Collection.class || type == Iterable.class) {      classToCreate = ArrayList.class;    } else if (type == Map.class) {      classToCreate = HashMap.class;    } else if (type == SortedSet.class) { // issue #510 Collections Support      classToCreate = TreeSet.class;    } else if (type == Set.class) {      classToCreate = HashSet.class;    } else {      classToCreate = type;    }    return classToCreate;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/factory/DefaultObjectFactory.java", "stars": "15", "class": {"name": "DefaultObjectFactory", "extends": null, "implements": ["ObjectFactory", "Serializable"], "modifiers": ["public"]}}, {"method_name": "isCollection", "params": ["Class<T>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public <T> boolean isCollection(Class<T> type) {    return Collection.class.isAssignableFrom(type);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/reflection/factory/DefaultObjectFactory.java", "stars": "15", "class": {"name": "DefaultObjectFactory", "extends": null, "implements": ["ObjectFactory", "Serializable"], "modifiers": ["public"]}}, {"method_name": "push", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void push(int x) {        if (head == null) {            head = new Node(x);            head.min = x;        } else {            Node newNode = new Node(x);            newNode.next = head;            head = newNode;            head.min = Math.min(x, newNode.next.min);        }    }", "url": "https://raw.githubusercontent.com/nishantc1527/LeetCode/master/src/MinStack.java", "stars": "1", "class": {"name": "MinStack", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pop", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void pop() {        head = head.next;    }", "url": "https://raw.githubusercontent.com/nishantc1527/LeetCode/master/src/MinStack.java", "stars": "1", "class": {"name": "MinStack", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "top", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int top() {        return head.val;    }", "url": "https://raw.githubusercontent.com/nishantc1527/LeetCode/master/src/MinStack.java", "stars": "1", "class": {"name": "MinStack", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMin", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getMin() {        return head.min;    }", "url": "https://raw.githubusercontent.com/nishantc1527/LeetCode/master/src/MinStack.java", "stars": "1", "class": {"name": "MinStack", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "next", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "char", "snippet": "    public char next() throws IOException {        if (!hasNext()) {            return EOF;        }        return buffer[++pos];    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/CharReader.java", "stars": "2", "class": {"name": "CharReader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hasNext", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean hasNext() throws IOException {        if (pos < size - 1) {            return true;        }        // \u586b\u5145\u7f13\u51b2\u6c60        int n = reader.read(buffer);        if (n == -1) return false;        // \u6307\u9488\u590d\u4f4d\u3001\u5927\u5c0f\u91cd\u7f6e        pos  = -1;        size = n;        return pos < size - 1;    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/CharReader.java", "stars": "2", "class": {"name": "CharReader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "peek", "params": [], "throws": null, "modifiers": ["public"], "return_type": "char", "snippet": "    public char peek() {        if (pos >= size) {            return EOF;        }        return buffer[Math.max(0, pos)];    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/CharReader.java", "stars": "2", "class": {"name": "CharReader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "skipWhite", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void skipWhite() throws IOException {        char c = next();        while (Character.isWhitespace(c)) {            c = next();        }        if (c != EOF) back();    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/CharReader.java", "stars": "2", "class": {"name": "CharReader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "back", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void back() {        pos = Math.max(--pos, -1); // pos\u81f3\u5c11\u4e3a-1    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/CharReader.java", "stars": "2", "class": {"name": "CharReader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "matchNextAndSkip", "params": ["String"], "throws": ["IOException"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean matchNextAndSkip(@NotNull String match) throws IOException {        for (int i = 0, size = match.length(); i < size; i++) {            if (!hasNext()) return false;            char c = next();            char m = match.charAt(i);            if (c != m) {                return false;            }        }        return true;    }", "url": "https://raw.githubusercontent.com/Virjid/Kartingjson/master/src/main/java/me/virjid/karting/json/parser/CharReader.java", "stars": "2", "class": {"name": "CharReader", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        getSupportActionBar().hide();        setContentView(R.layout.activity_splash_activity);        new Handler().postDelayed(new Runnable() {            @Override            public void run() {                Intent intent=new Intent(splash_activity.this,MainActivity.class);                startActivity(intent);                finish();            }        },2000);    }", "url": "https://raw.githubusercontent.com/sachin2912/torripo/master/app/src/main/java/com/example/torripo/splash_activity.java", "stars": "2", "class": {"name": "splash_activity", "extends": "AppCompatActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "readValue", "params": ["String", "Class<T>"], "throws": null, "modifiers": ["public", "static"], "return_type": "T", "snippet": "    public static <T> T readValue(String json, Class<T> valueType) {        try {            return objectMapper.readValue(json, valueType);        } catch (IOException e) {            log.error(String.format(\"parse json:%s to class:%s error:%s\", json, valueType.getName(), e.getMessage()));            return null;        }    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/util/src/main/java/com/integration/util/object/ObjectUtil.java", "stars": "2", "class": {"name": "ObjectUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readValue", "params": ["Map", "Class<T>"], "throws": null, "modifiers": ["public", "static"], "return_type": "T", "snippet": "    public static <T> T readValue(Map map, Class<T> valueType) {        try {            return objectMapper.readValue(objectMapper.writeValueAsString(map), valueType);        } catch (IOException e) {            log.error(String.format(\"parse map:%s to class:%s error:%s\", map.toString(), valueType.getName(), e.getMessage()));            return null;        }    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/util/src/main/java/com/integration/util/object/ObjectUtil.java", "stars": "2", "class": {"name": "ObjectUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "readValue", "params": ["Object", "Class<T>"], "throws": null, "modifiers": ["public", "static"], "return_type": "T", "snippet": "    public static <T> T readValue(Object object, Class<T> valueType) {        if (object == null) {            return null;        }        if (object instanceof Map) {            return readValue((Map)object, valueType);        } else if (object instanceof String) {            return readValue((String) object, valueType);        } else {            return readValue(object.toString(), valueType);        }    }", "url": "https://raw.githubusercontent.com/jiangvin/webtank/master/util/src/main/java/com/integration/util/object/ObjectUtil.java", "stars": "2", "class": {"name": "ObjectUtil", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "TestItWorks", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void TestItWorks() throws IOException {        String result = Meals.mealify(\"\ud83d\udc1f\ud83c\udf5a\");        Assert.assertEquals(result,\"\ud83c\udf63\");    }", "url": "https://raw.githubusercontent.com/EmojiMeals/meals-java/master/src/test/java/MealsTest.java", "stars": "2", "class": {"name": "MealsTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "TestItWorksTheOtherWayAround", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void TestItWorksTheOtherWayAround() throws IOException {        String result = Meals.mealify(\"\ud83c\udf5a\ud83d\udc1f\");        Assert.assertEquals(result,\"\ud83c\udf63\");    }", "url": "https://raw.githubusercontent.com/EmojiMeals/meals-java/master/src/test/java/MealsTest.java", "stars": "2", "class": {"name": "MealsTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "show", "params": ["Long"], "throws": null, "modifiers": ["public"], "return_type": "Response<DataSource>", "snippet": "    public Response<DataSource> show(@PathVariable(\"id\")Long id){        DataSource dataSource = dataSourceService.getDetail(id);        return new Response<DataSource>().successResponse(dataSource);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/controller/DataSourceAdminController.java", "stars": "23", "class": {"name": "DataSourceAdminController", "extends": "ExceptionResolverContext", "implements": null, "modifiers": ["public"]}}, {"method_name": "fileReader", "params": [], "throws": null, "modifiers": ["public"], "return_type": "FileReadingMessageSource", "snippet": "\tpublic FileReadingMessageSource fileReader() {\t\tFileReadingMessageSource reader = new FileReadingMessageSource();\t\treader.setDirectory(this.serviceProperties.getInputDir());\t\treturn reader;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-integration/src/main/java/smoketest/integration/SampleIntegrationApplication.java", "stars": "47572", "class": {"name": "SampleIntegrationApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "inputChannel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "DirectChannel", "snippet": "\tpublic DirectChannel inputChannel() {\t\treturn new DirectChannel();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-integration/src/main/java/smoketest/integration/SampleIntegrationApplication.java", "stars": "47572", "class": {"name": "SampleIntegrationApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "outputChannel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "DirectChannel", "snippet": "\tpublic DirectChannel outputChannel() {\t\treturn new DirectChannel();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-integration/src/main/java/smoketest/integration/SampleIntegrationApplication.java", "stars": "47572", "class": {"name": "SampleIntegrationApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fileWriter", "params": [], "throws": null, "modifiers": ["public"], "return_type": "FileWritingMessageHandler", "snippet": "\tpublic FileWritingMessageHandler fileWriter() {\t\tFileWritingMessageHandler writer = new FileWritingMessageHandler(this.serviceProperties.getOutputDir());\t\twriter.setExpectReply(false);\t\treturn writer;\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-integration/src/main/java/smoketest/integration/SampleIntegrationApplication.java", "stars": "47572", "class": {"name": "SampleIntegrationApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "integrationFlow", "params": ["SampleEndpoint"], "throws": null, "modifiers": ["public"], "return_type": "IntegrationFlow", "snippet": "\tpublic IntegrationFlow integrationFlow(SampleEndpoint endpoint) {\t\treturn IntegrationFlows.from(fileReader(), new FixedRatePoller()).channel(inputChannel()).handle(endpoint)\t\t\t\t.channel(outputChannel()).handle(fileWriter()).get();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-integration/src/main/java/smoketest/integration/SampleIntegrationApplication.java", "stars": "47572", "class": {"name": "SampleIntegrationApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tSpringApplication.run(SampleIntegrationApplication.class, args);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-integration/src/main/java/smoketest/integration/SampleIntegrationApplication.java", "stars": "47572", "class": {"name": "SampleIntegrationApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "accept", "params": ["SourcePollingChannelAdapterSpec"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void accept(SourcePollingChannelAdapterSpec spec) {\t\t\tspec.poller(Pollers.fixedRate(500));\t\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-integration/src/main/java/smoketest/integration/SampleIntegrationApplication.java", "stars": "47572", "class": {"name": "FixedRatePoller", "extends": null, "implements": ["Consumer"], "modifiers": ["private", "static"]}}, {"method_name": "setGrid", "params": ["Grid"], "throws": null, "modifiers": ["public"], "return_type": "PathFinder", "snippet": "  public PathFinder setGrid(Grid grid) {      this.grid = grid;      return this;  }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/pathfinder/PathFinder.java", "stars": "15", "class": {"name": "PathFinder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "from", "params": ["Coord"], "throws": null, "modifiers": ["public"], "return_type": "PathFinder", "snippet": "  public PathFinder from(Coord Coord) {    from = Coord;    return this;  }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/pathfinder/PathFinder.java", "stars": "15", "class": {"name": "PathFinder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "to", "params": ["Coord"], "throws": null, "modifiers": ["public"], "return_type": "PathFinder", "snippet": "  public PathFinder to(Coord Coord) {    to = Coord;    return this;  }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/pathfinder/PathFinder.java", "stars": "15", "class": {"name": "PathFinder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "withWeightFunction", "params": ["Function<Coord,Integer>"], "throws": null, "modifiers": ["public"], "return_type": "PathFinder", "snippet": "  public PathFinder withWeightFunction(Function<Coord, Integer> weightFunction) {    this.weightFunction = weightFunction;    return this;  }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/pathfinder/PathFinder.java", "stars": "15", "class": {"name": "PathFinder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findPath", "params": [], "throws": null, "modifiers": ["public"], "return_type": "PathFinderResult", "snippet": "  public PathFinderResult findPath() {    if (from == null || to == null) {      return new PathFinderResult();    }    AStar a = new AStar(grid, from, to, weightFunction);    List<PathItem> pathItems = a.find();    PathFinderResult pfr = new PathFinderResult();    if (pathItems.isEmpty()) {        pfr.isNearest = true;        pathItems = new AStar(grid, from, a.getNearest(), weightFunction).find();    }    pfr.path = pathItems.stream()        .map(item -> item.coord)        .collect(Collectors.toList());    pfr.weightedLength = pathItems.get(pathItems.size() - 1).cumulativeLength;    return pfr;  }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/pathfinder/PathFinder.java", "stars": "15", "class": {"name": "PathFinder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hasNextCoord", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean hasNextCoord() {      return path.size() > 1;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/pathfinder/PathFinder.java", "stars": "15", "class": {"name": "PathFinderResult", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getNextCoord", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Coord", "snippet": "    public Coord getNextCoord() {      return path.get(1);    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/pathfinder/PathFinder.java", "stars": "15", "class": {"name": "PathFinderResult", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "hasNoPath", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean hasNoPath() {      return weightedLength == -1;    }", "url": "https://raw.githubusercontent.com/CodinGame/SpringChallenge2020/master/src/main/java/com/codingame/spring2020/pathfinder/PathFinder.java", "stars": "15", "class": {"name": "PathFinderResult", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "createTdSQL", "params": ["Map<String,Object>"], "throws": ["IOException", "ClassNotFoundException"], "modifiers": ["public", "static"], "return_type": "MySQL", "snippet": "    public static MySQL createTdSQL(Map<String,Object> param) throws IOException, ClassNotFoundException {        String host = String.valueOf(param.get(PARAM_SFTP_HOST));        String port = param.get(PARAM_SFTP_PORT).toString();        String username = String.valueOf(param.get(PARAM_DEFAULT_USERNAME));        String password = String.valueOf(CryptoUtils.string2Object(String.valueOf(param.get(PARAM_DEFAULT_PASSWORD))));        String params = \"\";        if(param.containsKey(PARAM_KEY_TDSQL_CONFIG)){            Map<String,Object> param1 = (Map<String, Object>) param.get(PARAM_KEY_TDSQL_CONFIG);            params = param1.entrySet().stream().map(                    e->String.join(\"=\", e.getKey(), String.valueOf(e.getValue()))            ).collect(Collectors.joining(\"&\"));        }        return new MySQL(host,port,username,password,params);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/conns/MySQL.java", "stars": "23", "class": {"name": "MySQL", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getDbConnect", "params": ["String"], "throws": ["Exception"], "modifiers": ["private"], "return_type": "Connection", "snippet": "    private Connection getDbConnect(String database) throws Exception {        Connection conn = null;        try{            Class.forName(DBRIVER);            //\u8bbe\u7f6e\u8fde\u63a5\u53c2\u6570 (***\u81ea\u5df1\u5b9a\u4e49\u4f20\u9012\u7684\u53c2\u6570***)            String url = \"jdbc:mysql://\" + host + \":\" + port + \"/\" + database;            if(StringUtils.isNotEmpty(parameter)){                url = \"jdbc:mysql://\" + host + \":\" + port + \"/\" + database + \"?\" + parameter;            }            conn = DriverManager.getConnection(url,username,password);        }catch(Exception e){            throw new EndPointException(\"exchange.mysql.obtain.database_info.failed\", e);        }        // \u5efa\u7acb\u4e86\u8fde\u63a5        return conn;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/conns/MySQL.java", "stars": "23", "class": {"name": "MySQL", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllDBdatas", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> getAllDBdatas(){        List<String> dataBaseName = new ArrayList<>();        Connection conn = null;        Statement stmt = null;        ResultSet rs = null;        try{            Class.forName(DBRIVER);            String url = \"jdbc:mysql://\" + host + \":\" + port;            conn = DriverManager.getConnection(url, username, password);            stmt = conn.createStatement();            rs = stmt.executeQuery(\"show databases\");            while (rs.next()){                dataBaseName.add(rs.getString(1));            }        }catch(Exception e){            logger.error(\"Failed to obtain database information\",e.getMessage());            throw new EndPointException(\"exchange.mysql.obtain.database_info.failed\", e);        }finally {            closeResource(conn, stmt, rs);        }        return dataBaseName;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/conns/MySQL.java", "stars": "23", "class": {"name": "MySQL", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getAllTables", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> getAllTables(String database){        List<String> tableNames = new ArrayList<>();        Connection conn = null;        Statement stmt = null;        ResultSet rs = null;        try {            conn = this.getDbConnect(database);            stmt = conn.createStatement();            rs = stmt.executeQuery(\"SHOW TABLES\");            while (rs.next()) {                tableNames.add(rs.getString(1));            }        }catch (Exception e){            throw new EndPointException(\"exchange.mysql.obtain.table_info.failed\", e);        }finally {            closeResource(conn, stmt, rs);        }        return tableNames;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/conns/MySQL.java", "stars": "23", "class": {"name": "MySQL", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getColumn", "params": ["String", "String"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "List<MetaColumnInfo>", "snippet": "    public List<MetaColumnInfo> getColumn(String database,String table) throws Exception{        List<MetaColumnInfo> metaColumnInfos = new ArrayList<>();        Connection conn = this.getDbConnect(database);        String sql = \"select * from `\" + table + \"` where 1 = 2\";        PreparedStatement ps = null;        ResultSet rs = null;        ResultSetMetaData meta = null;        try {            List<String> primaryKeys = getPrimaryKeys(conn, table);            ps = conn.prepareStatement(sql);            rs = ps.executeQuery();            meta = rs.getMetaData();            int columnCount = meta.getColumnCount();            for (int i = 1; i < columnCount + 1; i++) {                MetaColumnInfo info = new MetaColumnInfo();                //index                info.setIndex(i);                //\u5b57\u6bb5\u540d\u79f0                info.setName(meta.getColumnName(i));                //\u7c7b\u578b                info.setType(meta.getColumnTypeName(i));                if(primaryKeys.contains(meta.getColumnName(i))){                    info.setPrimaryKey(true);                }                metaColumnInfos.add(info);            }        } catch (SQLException e) {            throw new EndPointException(\"exchange.mysql.obtain.field_info.failed\", e);        }finally {            closeResource(conn, ps, rs);        }        return metaColumnInfos;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/conns/MySQL.java", "stars": "23", "class": {"name": "MySQL", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPrimaryKeys", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "List<String>", "snippet": "    public List<String> getPrimaryKeys(String database, String table){        Connection conn = null;        try{            conn = this.getDbConnect(database);            return getPrimaryKeys(conn, table);        }catch(Exception e){            throw new EndPointException(\"exchange.mysql.obtain.field_info.failed\", e);        }finally{            closeResource(conn, null, null);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/conns/MySQL.java", "stars": "23", "class": {"name": "MySQL", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPrimaryKeys", "params": ["Connection", "String"], "throws": ["SQLException"], "modifiers": ["private"], "return_type": "List<String>", "snippet": "    private List<String> getPrimaryKeys(Connection connection, String table) throws SQLException {        ResultSet rs = null;        List<String> primaryKeys = new ArrayList<>();        try {            DatabaseMetaData dbMeta = connection.getMetaData();            rs = dbMeta.getPrimaryKeys(null, null, table);            while(rs.next()){                primaryKeys.add(rs.getString(\"column_name\"));            }            return primaryKeys;        }finally{            if(null != rs){                closeResource(null, null, rs);            }        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/conns/MySQL.java", "stars": "23", "class": {"name": "MySQL", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "closeResource", "params": ["Connection", "Statement", "ResultSet"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void closeResource(Connection connection,  Statement statement, ResultSet resultSet){        try {            if(null != resultSet && !resultSet.isClosed()) {                resultSet.close();            }            if(null != statement && !statement.isClosed()){                statement.close();            }            if(null != connection && !connection.isClosed()){                connection.close();            }        }catch (SQLException e){            logger.error(\"SQLException: \" + e.getMessage(), e);        }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/conns/MySQL.java", "stars": "23", "class": {"name": "MySQL", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHost", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getHost() {        return host;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/conns/MySQL.java", "stars": "23", "class": {"name": "MySQL", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setHost", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setHost(String host) {        this.host = host;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/conns/MySQL.java", "stars": "23", "class": {"name": "MySQL", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPort", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPort() {        return port;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/conns/MySQL.java", "stars": "23", "class": {"name": "MySQL", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPort", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPort(String port) {        this.port = port;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/conns/MySQL.java", "stars": "23", "class": {"name": "MySQL", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUsername", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getUsername() {        return username;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/conns/MySQL.java", "stars": "23", "class": {"name": "MySQL", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUsername", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUsername(String username) {        this.username = username;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/conns/MySQL.java", "stars": "23", "class": {"name": "MySQL", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPassword", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getPassword() {        return password;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/conns/MySQL.java", "stars": "23", "class": {"name": "MySQL", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPassword", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPassword(String password) {        this.password = password;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/conns/MySQL.java", "stars": "23", "class": {"name": "MySQL", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getParameter", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getParameter() {        return parameter;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/conns/MySQL.java", "stars": "23", "class": {"name": "MySQL", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setParameter", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setParameter(String parameter) {        this.parameter = parameter;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/datasource/conns/MySQL.java", "stars": "23", "class": {"name": "MySQL", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setOrderByClause", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setOrderByClause(String orderByClause) {        this.orderByClause = orderByClause;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "ItemDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOrderByClause", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getOrderByClause() {        return orderByClause;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "ItemDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setDistinct", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDistinct(boolean distinct) {        this.distinct = distinct;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "ItemDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isDistinct", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean isDistinct() {        return distinct;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "ItemDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOredCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criteria>", "snippet": "    public List<Criteria> getOredCriteria() {        return oredCriteria;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "ItemDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "or", "params": ["Criteria"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void or(Criteria criteria) {        oredCriteria.add(criteria);    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "ItemDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "or", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "    public Criteria or() {        Criteria criteria = createCriteriaInternal();        oredCriteria.add(criteria);        return criteria;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "ItemDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "    public Criteria createCriteria() {        Criteria criteria = createCriteriaInternal();        if (oredCriteria.size() == 0) {            oredCriteria.add(criteria);        }        return criteria;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "ItemDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createCriteriaInternal", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Criteria", "snippet": "    protected Criteria createCriteriaInternal() {        Criteria criteria = new Criteria();        return criteria;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "ItemDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void clear() {        oredCriteria.clear();        orderByClause = null;        distinct = false;    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "ItemDOExample", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isValid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isValid() {            return criteria.size() > 0;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getAllCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criterion>", "snippet": "        public List<Criterion> getAllCriteria() {            return criteria;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getCriteria", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Criterion>", "snippet": "        public List<Criterion> getCriteria() {            return criteria;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition) {            if (condition == null) {                throw new RuntimeException(\"Value for condition cannot be null\");            }            criteria.add(new Criterion(condition));        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String", "Object", "String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition, Object value, String property) {            if (value == null) {                throw new RuntimeException(\"Value for \" + property + \" cannot be null\");            }            criteria.add(new Criterion(condition, value));        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "addCriterion", "params": ["String", "Object", "Object", "String"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "        protected void addCriterion(String condition, Object value1, Object value2, String property) {            if (value1 == null || value2 == null) {                throw new RuntimeException(\"Between values for \" + property + \" cannot be null\");            }            criteria.add(new Criterion(condition, value1, value2));        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIsNull() {            addCriterion(\"id is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIsNotNull() {            addCriterion(\"id is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdEqualTo(Integer value) {            addCriterion(\"id =\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotEqualTo(Integer value) {            addCriterion(\"id <>\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdGreaterThan(Integer value) {            addCriterion(\"id >\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdGreaterThanOrEqualTo(Integer value) {            addCriterion(\"id >=\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdLessThan(Integer value) {            addCriterion(\"id <\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdLessThanOrEqualTo(Integer value) {            addCriterion(\"id <=\", value, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdIn(List<Integer> values) {            addCriterion(\"id in\", values, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotIn(List<Integer> values) {            addCriterion(\"id not in\", values, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdBetween(Integer value1, Integer value2) {            addCriterion(\"id between\", value1, value2, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andIdNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andIdNotBetween(Integer value1, Integer value2) {            addCriterion(\"id not between\", value1, value2, \"id\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTitleIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTitleIsNull() {            addCriterion(\"title is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTitleIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTitleIsNotNull() {            addCriterion(\"title is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTitleEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTitleEqualTo(String value) {            addCriterion(\"title =\", value, \"title\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTitleNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTitleNotEqualTo(String value) {            addCriterion(\"title <>\", value, \"title\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTitleGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTitleGreaterThan(String value) {            addCriterion(\"title >\", value, \"title\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTitleGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTitleGreaterThanOrEqualTo(String value) {            addCriterion(\"title >=\", value, \"title\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTitleLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTitleLessThan(String value) {            addCriterion(\"title <\", value, \"title\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTitleLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTitleLessThanOrEqualTo(String value) {            addCriterion(\"title <=\", value, \"title\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTitleLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTitleLike(String value) {            addCriterion(\"title like\", value, \"title\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTitleNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTitleNotLike(String value) {            addCriterion(\"title not like\", value, \"title\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTitleIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTitleIn(List<String> values) {            addCriterion(\"title in\", values, \"title\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTitleNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTitleNotIn(List<String> values) {            addCriterion(\"title not in\", values, \"title\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTitleBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTitleBetween(String value1, String value2) {            addCriterion(\"title between\", value1, value2, \"title\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andTitleNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andTitleNotBetween(String value1, String value2) {            addCriterion(\"title not between\", value1, value2, \"title\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPriceIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPriceIsNull() {            addCriterion(\"price is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPriceIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPriceIsNotNull() {            addCriterion(\"price is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPriceEqualTo", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPriceEqualTo(BigDecimal value) {            addCriterion(\"price =\", value, \"price\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPriceNotEqualTo", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPriceNotEqualTo(BigDecimal value) {            addCriterion(\"price <>\", value, \"price\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPriceGreaterThan", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPriceGreaterThan(BigDecimal value) {            addCriterion(\"price >\", value, \"price\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPriceGreaterThanOrEqualTo", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPriceGreaterThanOrEqualTo(BigDecimal value) {            addCriterion(\"price >=\", value, \"price\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPriceLessThan", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPriceLessThan(BigDecimal value) {            addCriterion(\"price <\", value, \"price\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPriceLessThanOrEqualTo", "params": ["BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPriceLessThanOrEqualTo(BigDecimal value) {            addCriterion(\"price <=\", value, \"price\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPriceIn", "params": ["List<BigDecimal>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPriceIn(List<BigDecimal> values) {            addCriterion(\"price in\", values, \"price\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPriceNotIn", "params": ["List<BigDecimal>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPriceNotIn(List<BigDecimal> values) {            addCriterion(\"price not in\", values, \"price\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPriceBetween", "params": ["BigDecimal", "BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPriceBetween(BigDecimal value1, BigDecimal value2) {            addCriterion(\"price between\", value1, value2, \"price\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andPriceNotBetween", "params": ["BigDecimal", "BigDecimal"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andPriceNotBetween(BigDecimal value1, BigDecimal value2) {            addCriterion(\"price not between\", value1, value2, \"price\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDescriptionIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDescriptionIsNull() {            addCriterion(\"description is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDescriptionIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDescriptionIsNotNull() {            addCriterion(\"description is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDescriptionEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDescriptionEqualTo(String value) {            addCriterion(\"description =\", value, \"description\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDescriptionNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDescriptionNotEqualTo(String value) {            addCriterion(\"description <>\", value, \"description\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDescriptionGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDescriptionGreaterThan(String value) {            addCriterion(\"description >\", value, \"description\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDescriptionGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDescriptionGreaterThanOrEqualTo(String value) {            addCriterion(\"description >=\", value, \"description\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDescriptionLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDescriptionLessThan(String value) {            addCriterion(\"description <\", value, \"description\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDescriptionLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDescriptionLessThanOrEqualTo(String value) {            addCriterion(\"description <=\", value, \"description\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDescriptionLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDescriptionLike(String value) {            addCriterion(\"description like\", value, \"description\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDescriptionNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDescriptionNotLike(String value) {            addCriterion(\"description not like\", value, \"description\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDescriptionIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDescriptionIn(List<String> values) {            addCriterion(\"description in\", values, \"description\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDescriptionNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDescriptionNotIn(List<String> values) {            addCriterion(\"description not in\", values, \"description\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDescriptionBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDescriptionBetween(String value1, String value2) {            addCriterion(\"description between\", value1, value2, \"description\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andDescriptionNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andDescriptionNotBetween(String value1, String value2) {            addCriterion(\"description not between\", value1, value2, \"description\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSalesIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSalesIsNull() {            addCriterion(\"sales is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSalesIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSalesIsNotNull() {            addCriterion(\"sales is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSalesEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSalesEqualTo(Integer value) {            addCriterion(\"sales =\", value, \"sales\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSalesNotEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSalesNotEqualTo(Integer value) {            addCriterion(\"sales <>\", value, \"sales\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSalesGreaterThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSalesGreaterThan(Integer value) {            addCriterion(\"sales >\", value, \"sales\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSalesGreaterThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSalesGreaterThanOrEqualTo(Integer value) {            addCriterion(\"sales >=\", value, \"sales\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSalesLessThan", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSalesLessThan(Integer value) {            addCriterion(\"sales <\", value, \"sales\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSalesLessThanOrEqualTo", "params": ["Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSalesLessThanOrEqualTo(Integer value) {            addCriterion(\"sales <=\", value, \"sales\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSalesIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSalesIn(List<Integer> values) {            addCriterion(\"sales in\", values, \"sales\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSalesNotIn", "params": ["List<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSalesNotIn(List<Integer> values) {            addCriterion(\"sales not in\", values, \"sales\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSalesBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSalesBetween(Integer value1, Integer value2) {            addCriterion(\"sales between\", value1, value2, \"sales\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andSalesNotBetween", "params": ["Integer", "Integer"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andSalesNotBetween(Integer value1, Integer value2) {            addCriterion(\"sales not between\", value1, value2, \"sales\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andImgUrlIsNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andImgUrlIsNull() {            addCriterion(\"img_url is null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andImgUrlIsNotNull", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andImgUrlIsNotNull() {            addCriterion(\"img_url is not null\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andImgUrlEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andImgUrlEqualTo(String value) {            addCriterion(\"img_url =\", value, \"imgUrl\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andImgUrlNotEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andImgUrlNotEqualTo(String value) {            addCriterion(\"img_url <>\", value, \"imgUrl\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andImgUrlGreaterThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andImgUrlGreaterThan(String value) {            addCriterion(\"img_url >\", value, \"imgUrl\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andImgUrlGreaterThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andImgUrlGreaterThanOrEqualTo(String value) {            addCriterion(\"img_url >=\", value, \"imgUrl\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andImgUrlLessThan", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andImgUrlLessThan(String value) {            addCriterion(\"img_url <\", value, \"imgUrl\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andImgUrlLessThanOrEqualTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andImgUrlLessThanOrEqualTo(String value) {            addCriterion(\"img_url <=\", value, \"imgUrl\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andImgUrlLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andImgUrlLike(String value) {            addCriterion(\"img_url like\", value, \"imgUrl\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andImgUrlNotLike", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andImgUrlNotLike(String value) {            addCriterion(\"img_url not like\", value, \"imgUrl\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andImgUrlIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andImgUrlIn(List<String> values) {            addCriterion(\"img_url in\", values, \"imgUrl\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andImgUrlNotIn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andImgUrlNotIn(List<String> values) {            addCriterion(\"img_url not in\", values, \"imgUrl\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andImgUrlBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andImgUrlBetween(String value1, String value2) {            addCriterion(\"img_url between\", value1, value2, \"imgUrl\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "andImgUrlNotBetween", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "Criteria", "snippet": "        public Criteria andImgUrlNotBetween(String value1, String value2) {            addCriterion(\"img_url not between\", value1, value2, \"imgUrl\");            return (Criteria) this;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "GeneratedCriteria", "extends": null, "implements": null, "modifiers": ["abstract", "static", "protected"]}}, {"method_name": "getCondition", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getCondition() {            return condition;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getValue() {            return value;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getSecondValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "        public Object getSecondValue() {            return secondValue;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isNoValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isNoValue() {            return noValue;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isSingleValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isSingleValue() {            return singleValue;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isBetweenValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isBetweenValue() {            return betweenValue;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "isListValue", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "        public boolean isListValue() {            return listValue;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "getTypeHandler", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "        public String getTypeHandler() {            return typeHandler;        }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/dataobject/ItemDOExample.java", "stars": "1", "class": {"name": "Criterion", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "initElements", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void initElements() {\t\telements.blocks.add(() -> new CustomBlock());\t\telements.items\t\t\t\t.add(() -> new BlockItem(block, new Item.Properties().group(ItemGroup.BUILDING_BLOCKS)).setRegistryName(block.getRegistryName()));\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/MossySettsBlock.java", "stars": "2", "class": {"name": "MossySettsBlock", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDrops", "params": ["BlockState", "LootContext"], "throws": null, "modifiers": ["public"], "return_type": "List<ItemStack>", "snippet": "\t\tpublic List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {\t\t\tList<ItemStack> dropsOriginal = super.getDrops(state, builder);\t\t\tif (!dropsOriginal.isEmpty())\t\t\t\treturn dropsOriginal;\t\t\treturn Collections.singletonList(new ItemStack(this, 0));\t\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/block/MossySettsBlock.java", "stars": "2", "class": {"name": "CustomBlock", "extends": "Block", "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "doGet", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": ["IOException"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {        response.setContentType(\"text/html\");        response.setCharacterEncoding(\"utf-8\");        // \u8f93\u51fa\u6587\u672c        PrintWriter out = response.getWriter();        out.write(\"<p>Servlet\u540d\u79f0\uff1a\" + this.getServletName() + \"</p>\");        out.write(\"<p>Email\u5730\u5740\uff1a\" + this.getServletContext().getInitParameter(\"email\") + \"</p>\");        out.write(\"<p>\u7535\u8bdd\uff1a\" + this.getServletContext().getInitParameter(\"telephone\") + \"</p>\");    }", "url": "https://raw.githubusercontent.com/Nightnessss/web-homework/master/homework01/src/com/fehead/ConfigDemoServlet.java", "stars": "4", "class": {"name": "ConfigDemoServlet", "extends": "HttpServlet", "implements": null, "modifiers": ["public"]}}, {"method_name": "getProjectDirCacheHitRatio", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "  public double getProjectDirCacheHitRatio() {    return this.flowPreparer.getProjectDirCacheHitRatio();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "setgidPermissionOnExecutionDirectory", "params": [], "throws": ["IOException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void setgidPermissionOnExecutionDirectory() throws IOException {    logger.info(\"Creating subprocess to run shell command: chmod g+s \"        + this.executionDirectory.toString());    Runtime.getRuntime().exec(\"chmod g+s \" + this.executionDirectory.toString());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "createExecutorService", "params": ["int"], "throws": null, "modifiers": ["private"], "return_type": "TrackingThreadPool", "snippet": "  private TrackingThreadPool createExecutorService(final int nThreads) {    final boolean useNewThreadPool =        this.azkabanProps.getBoolean(EXECUTOR_USE_BOUNDED_THREADPOOL_QUEUE, false);    logger.info(\"useNewThreadPool: \" + useNewThreadPool);    if (useNewThreadPool) {      this.threadPoolQueueSize =          this.azkabanProps.getInt(EXECUTOR_THREADPOOL_WORKQUEUE_SIZE, nThreads);      logger.info(\"workQueueSize: \" + this.threadPoolQueueSize);      // using a bounded queue for the work queue. The default rejection policy      // {@ThreadPoolExecutor.AbortPolicy} is used      final TrackingThreadPool executor =          new TrackingThreadPool(nThreads, nThreads, 0L, TimeUnit.MILLISECONDS,              new LinkedBlockingQueue<>(this.threadPoolQueueSize), this);      return executor;    } else {      // the old way of using unbounded task queue.      // if the running tasks are taking a long time or stuck, this queue      // will be very very long.      return new TrackingThreadPool(nThreads, nThreads, 0L,          TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>(), this);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "setExecutorActive", "params": ["boolean", "String", "int"], "throws": ["ExecutorManagerException", "InterruptedException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setExecutorActive(final boolean isActive, final String host, final int port)      throws ExecutorManagerException, InterruptedException {    final Executor executor = this.executorLoader.fetchExecutor(host, port);    Preconditions.checkState(executor != null, \"Unable to obtain self entry in DB\");    if (executor.isActive() != isActive) {      executor.setActive(isActive);      this.executorLoader.updateExecutor(executor);    } else {      logger.info(          \"Set active action ignored. Executor is already \" + (isActive ? \"active\" : \"inactive\"));    }    this.active = isActive;    if (!this.active) {      // When deactivating this executor, this call will wait to return until every thread in {@link      // #createFlowRunner} has finished. When deploying new executor, old running executor will be      // deactivated before new one is activated and only one executor is allowed to      // delete/hard-linking project dirs to avoid race condition described in {@link      // FlowPreparer#setup}. So to make deactivation process block until flow preparation work      // finishes guarantees the old executor won't access {@link FlowPreparer#setup} after      // deactivation.      waitUntilFlowPreparationFinish();    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "waitUntilFlowPreparationFinish", "params": [], "throws": ["InterruptedException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void waitUntilFlowPreparationFinish() throws InterruptedException {    final Duration SLEEP_INTERVAL = Duration.ofSeconds(5);    while (this.preparingFlowCount.intValue() != 0) {      logger.info(this.preparingFlowCount + \" flow(s) is/are still being setup before complete \"          + \"deactivation.\");      Thread.sleep(SLEEP_INTERVAL.toMillis());    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "getLastFlowSubmittedTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getLastFlowSubmittedTime() {    // Note: this is not thread safe and may result in providing dirty data.    //       we will provide this data as is for now and will revisit if there    //       is a string justification for change.    return this.lastFlowSubmittedDate;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "getGlobalProps", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Props", "snippet": "  public Props getGlobalProps() {    return this.globalProps;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "setGlobalProps", "params": ["Props"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setGlobalProps(final Props globalProps) {    this.globalProps = globalProps;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "submitFlow", "params": ["int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void submitFlow(final int execId) throws ExecutorManagerException {    if (isAlreadyRunning(execId)) {      return;    }    final FlowRunner runner = createFlowRunner(execId);    // Check again.    if (isAlreadyRunning(execId)) {      return;    }    submitFlowRunner(runner);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "isAlreadyRunning", "params": ["int"], "throws": ["ExecutorManagerException"], "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean isAlreadyRunning(final int execId) throws ExecutorManagerException {    if (this.runningFlows.containsKey(execId)) {      logger.info(\"Execution \" + execId + \" is already in running.\");      if (!this.submittedFlows.containsValue(execId)) {        // Execution had been added to running flows but not submitted - something's wrong.        // Return a response with error: this is a cue for the dispatcher to retry or finalize the        // execution as failed.        throw new ExecutorManagerException(\"Execution \" + execId +            \" is in runningFlows but not in submittedFlows. Most likely submission had failed.\");      }      // Already running, everything seems fine. Report as a successful submission.      return true;    }    return false;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "isExecutorSpecified", "params": ["ExecutableFlow"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean isExecutorSpecified(final ExecutableFlow flow) {    return flow.getExecutionOptions().getFlowParameters()        .containsKey(ExecutionOptions.USE_EXECUTOR);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "createFlowRunner", "params": ["int"], "throws": ["ExecutorManagerException"], "modifiers": ["private"], "return_type": "FlowRunner", "snippet": "  private FlowRunner createFlowRunner(final int execId) throws ExecutorManagerException {    final ExecutableFlow flow;    flow = this.executorLoader.fetchExecutableFlow(execId);    if (flow == null) {      throw new ExecutorManagerException(\"Error loading flow with exec \"          + execId);    }    // Sets up the project files and execution directory.    this.preparingFlowCount.incrementAndGet();    // Record the time between submission, and when the flow preparation/execution starts.    // Note that since submit time is recorded on the web server, while flow preparation is on    // the executor, there could be some inaccuracies due to clock skew.    commonMetrics.addQueueWait(System.currentTimeMillis() -        flow.getExecutableFlow().getSubmitTime());    final Timer.Context flowPrepTimerContext = commonMetrics.getFlowSetupTimerContext();    try {      if (this.active || isExecutorSpecified(flow)) {        this.flowPreparer.setup(flow);      } else {        // Unset the executor.        this.executorLoader.unsetExecutorIdForExecution(execId);        throw new ExecutorManagerException(\"executor became inactive before setting up the \"            + \"flow \" + execId);      }    } finally {      this.preparingFlowCount.decrementAndGet();      flowPrepTimerContext.stop();    }    // Setup flow runner    FlowWatcher watcher = null;    final ExecutionOptions options = flow.getExecutionOptions();    if (options.getPipelineExecutionId() != null) {      final Integer pipelineExecId = options.getPipelineExecutionId();      final FlowRunner runner = this.runningFlows.get(pipelineExecId);      if (runner != null) {        watcher = new LocalFlowWatcher(runner);      } else {        // also ends up here if execute is called with pipelineExecId that's not running any more        // (it could have just finished, for example)        watcher = new RemoteFlowWatcher(pipelineExecId, this.executorLoader);      }    }    int numJobThreads = this.numJobThreadPerFlow;    if (options.getFlowParameters().containsKey(FLOW_NUM_JOB_THREADS)) {      try {        final int numJobs =            Integer.valueOf(options.getFlowParameters().get(                FLOW_NUM_JOB_THREADS));        if (numJobs > 0 && (numJobs <= numJobThreads || ProjectWhitelist            .isProjectWhitelisted(flow.getProjectId(),                WhitelistType.NumJobPerFlow))) {          numJobThreads = numJobs;        }      } catch (final Exception e) {        throw new ExecutorManagerException(            \"Failed to set the number of job threads \"                + options.getFlowParameters().get(FLOW_NUM_JOB_THREADS)                + \" for flow \" + execId, e);      }    }    final FlowRunner runner =        new FlowRunner(flow, this.executorLoader, this.projectLoader, this.jobtypeManager,            this.azkabanProps, this.azkabanEventReporter, this.alerterHolder);    runner.setFlowWatcher(watcher)        .setJobLogSettings(this.jobLogChunkSize, this.jobLogNumFiles)        .setValidateProxyUser(this.validateProxyUser)        .setNumJobThreads(numJobThreads).addListener(this);    // FIXME\u00a0Add a listener for loop execution, and continue to submit new tasks when the job stream execution is complete.    EventListener cycleFlowRunnerEventListener = new CycleFlowRunnerEventListener(executionCycleDao, azkabanProps, alerterHolder);    runner.setCycleFlowRunnerEventListener(cycleFlowRunnerEventListener);    runner.addListener(cycleFlowRunnerEventListener);    configureFlowLevelMetrics(runner);    return runner;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "submitFlowRunner", "params": ["FlowRunner"], "throws": ["ExecutorManagerException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void submitFlowRunner(final FlowRunner runner) throws ExecutorManagerException {    this.runningFlows.put(runner.getExecutionId(), runner);    try {      // The executorService already has a queue.      // The submit method below actually returns an instance of FutureTask,      // which implements interface RunnableFuture, which extends both      // Runnable and Future interfaces      final Future<?> future = this.executorService.submit(runner);      // keep track of this future      this.submittedFlows.put(future, runner.getExecutionId());      // update the last submitted time.      this.lastFlowSubmittedDate = System.currentTimeMillis();    } catch (final RejectedExecutionException re) {      this.runningFlows.remove(runner.getExecutionId());      final StringBuffer errorMsg = new StringBuffer(          \"Azkaban executor can't execute any more flows. \");      if (this.executorService.isShutdown()) {        errorMsg.append(\"The executor is being shut down.\");      }      throw new ExecutorManagerException(errorMsg.toString(), re);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "configureFlowLevelMetrics", "params": ["FlowRunner"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void configureFlowLevelMetrics(final FlowRunner flowRunner) {    logger.info(\"Configuring Azkaban metrics tracking for flow runner object\");    if (MetricReportManager.isAvailable()) {      final MetricReportManager metricManager = MetricReportManager.getInstance();      // Adding NumFailedFlow Metric listener      flowRunner.addListener((NumFailedFlowMetric) metricManager          .getMetricFromName(NumFailedFlowMetric.NUM_FAILED_FLOW_METRIC_NAME));    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "cancelJobBySLA", "params": ["int", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void cancelJobBySLA(final int execId, final String jobId)      throws ExecutorManagerException {    final FlowRunner flowRunner = this.runningFlows.get(execId);    if (flowRunner == null) {      throw new ExecutorManagerException(\"Execution \" + execId          + \" is not running.\");    }    // FIXME\u00a0Added support for killing subflow and subflow jobs.    for (final JobRunner jobRunner : flowRunner.getActiveJobRunners()) {      if (jobRunner.getNode().getNestedId().equals(jobId)) {        logger.info(\"Killing job or embededflow job: \" + jobId + \" in execution \" + execId + \" by SLA\");        jobRunner.killBySLA();        break;      } else if(jobRunner.getNode().getNestedId().startsWith(jobId)){        logger.info(\"embededflow: \" + jobId + \" , killing current active job : \" + jobRunner.getNode().getNestedId() + \" in execution \" + execId + \" by SLA\");        jobRunner.killBySLA();      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "cancelFlow", "params": ["int", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void cancelFlow(final int execId, final String user)      throws ExecutorManagerException {    final FlowRunner runner = this.runningFlows.get(execId);    if (runner == null) {      throw new ExecutorManagerException(\"Execution \" + execId          + \" is not running.\");    }    runner.kill(user);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "superKill", "params": ["int", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void superKill(final int execId, final String user)      throws ExecutorManagerException {    final FlowRunner runner = this.runningFlows.get(execId);    if (runner == null) {      throw new ExecutorManagerException(\"Execution \" + execId          + \" is not running.\");    }    runner.superKill(user);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "pauseFlow", "params": ["int", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void pauseFlow(final int execId, final String user)      throws ExecutorManagerException {    final FlowRunner runner = this.runningFlows.get(execId);    if (runner == null) {      throw new ExecutorManagerException(\"Execution \" + execId          + \" is not running.\");    }    runner.pause(user);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "setFlowFailed", "params": ["int", "JSONObject"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setFlowFailed(final int execId, final JSONObject json) throws ExecutorManagerException {    final FlowRunner runner = this.runningFlows.get(execId);    if (runner == null) {      throw new ExecutorManagerException(\"Execution \" + execId              + \" is not running.\");    }    if(!runner.setFlowFailed(json)){      throw new ExecutorManagerException(\"Execution:\" + execId + \" is not paused or has finished.\");    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "setJobDisabled", "params": ["int", "String", "Map<String,Object>", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setJobDisabled(final int execId, String disableJob, Map<String, Object> respMap, String user) throws ExecutorManagerException {    final FlowRunner runner = this.runningFlows.get(execId);    if (runner == null) {      throw new ExecutorManagerException(\"Execution \" + execId              + \" is not running.\");    }    runner.setJobDisabled(disableJob, respMap, user);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "retryJobs", "params": ["int", "List<String>"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void retryJobs(final int execId, List<String> retryFailedJobs) throws ExecutorManagerException {    final FlowRunner runner = this.runningFlows.get(execId);    if (runner == null) {      throw new ExecutorManagerException(\"Execution \" + execId              + \" is not running.\");    }    String message = null;    try{      message = runner.retryFailedJobs(retryFailedJobs);    } catch (Exception e){      throw new ExecutorManagerException(e.getMessage());    }    if(message != null){      throw new ExecutorManagerException(message);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "skipFailedJobs", "params": ["int", "List<String>"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void skipFailedJobs(final int execId, List<String> skipFailedJobs) throws ExecutorManagerException {    final FlowRunner runner = this.runningFlows.get(execId);    if (runner == null) {      throw new ExecutorManagerException(\"Execution \" + execId              + \" is not running.\");    }    String message =  runner.setSkipFailedJob(skipFailedJobs);    if(message != null){      throw new ExecutorManagerException(message);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "setFlowFailed", "params": ["int", "boolean"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setFlowFailed(final int execId, final boolean flowFailed) throws ExecutorManagerException {    final FlowRunner runner = this.runningFlows.get(execId);    if (runner == null) {      throw new ExecutorManagerException(\"Execution \" + execId              + \" is not running.\");    }    runner.setFlowFailed(flowFailed);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "resumeFlow", "params": ["int", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void resumeFlow(final int execId, final String user)      throws ExecutorManagerException {    final FlowRunner runner = this.runningFlows.get(execId);    if (runner == null) {      throw new ExecutorManagerException(\"Execution \" + execId          + \" is not running.\");    }    runner.resume(user);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "retryFailures", "params": ["int", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void retryFailures(final int execId, final String user)      throws ExecutorManagerException {    final FlowRunner runner = this.runningFlows.get(execId);    if (runner == null) {      throw new ExecutorManagerException(\"Execution \" + execId          + \" is not running.\");    }    runner.retryFailures(user);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "skippedAllFailures", "params": ["int", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "String", "snippet": "  public String skippedAllFailures(final int execId, final String user)      throws ExecutorManagerException {    final FlowRunner runner = this.runningFlows.get(execId);    if (runner == null) {      throw new ExecutorManagerException(\"Execution \" + execId          + \" is not running.\");    }    return runner.skippedAllFailures(user);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "getExecutableFlow", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "ExecutableFlow", "snippet": "  public ExecutableFlow getExecutableFlow(final int execId) {    final FlowRunner runner = this.runningFlows.get(execId);    if (runner == null) {      return this.recentlyFinishedFlows.get(execId);    }    return runner.getExecutableFlow();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "handleEvent", "params": ["Event"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void handleEvent(final Event event) {    if (event.getType() == EventType.FLOW_FINISHED || event.getType() == EventType.FLOW_STARTED) {      final FlowRunner flowRunner = (FlowRunner) event.getRunner();      final ExecutableFlow flow = flowRunner.getExecutableFlow();      if (event.getType() == EventType.FLOW_FINISHED) {        this.recentlyFinishedFlows.put(flow.getExecutionId(), flow);        logger.info(\"Flow \" + flow.getExecutionId()            + \" is finished. Adding it to recently finished flows list.\");        this.runningFlows.remove(flow.getExecutionId());      } else if (event.getType() == EventType.FLOW_STARTED) {        // add flow level SLA checker flow \u8d85\u65f6\u544a\u8b66        this.triggerManager            .addTrigger(flow.getExecutionId(), SlaOption.getFlowLevelSLAOptions(flow));      }    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "readFlowLogs", "params": ["int", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "LogData", "snippet": "  public LogData readFlowLogs(final int execId, final int startByte, final int length)      throws ExecutorManagerException {    final FlowRunner runner = this.runningFlows.get(execId);    if (runner == null) {      throw new ExecutorManagerException(\"Running flow \" + execId          + \" not found.\");    }    final File dir = runner.getExecutionDir();    if (dir != null && dir.exists()) {      try {        synchronized (this.executionDirDeletionSync) {          if (!dir.exists()) {            throw new ExecutorManagerException(                \"Execution dir file doesn't exist. Probably has been deleted\");          }          final File logFile = runner.getFlowLogFile();          if (logFile != null && logFile.exists()) {            return FileIOUtils.readUtf8File(logFile, startByte, length);          } else {            throw new ExecutorManagerException(\"Flow log file doesn't exist.\");          }        }      } catch (final IOException e) {        throw new ExecutorManagerException(e);      }    }    throw new ExecutorManagerException(        \"Error reading file. Log directory doesn't exist.\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "getJobFileSize", "params": ["int", "String", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "long", "snippet": "  public long getJobFileSize(final int execId, final String jobId, final int attempt) throws ExecutorManagerException {    final FlowRunner runner = this.runningFlows.get(execId);    if (runner == null) {      throw new ExecutorManagerException(\"Running flow \" + execId          + \" not found.\");    }    final File dir = runner.getExecutionDir();    if (dir != null && dir.exists()) {      synchronized (this.executionDirDeletionSync) {        if (!dir.exists()) {          throw new ExecutorManagerException(              \"Execution dir file doesn't exist. Probably has beend deleted\");        }        final File logFile = runner.getJobLogFile(jobId, attempt);        if (logFile != null && logFile.exists()) {          return logFile.length();        } else {          throw new ExecutorManagerException(\"Job log file doesn't exist.\");        }      }    }    return 0L;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "readJobLogs", "params": ["int", "String", "int", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "LogData", "snippet": "  public LogData readJobLogs(final int execId, final String jobId, final int attempt,      final int startByte, final int length) throws ExecutorManagerException {    final FlowRunner runner = this.runningFlows.get(execId);    if (runner == null) {      throw new ExecutorManagerException(\"Running flow \" + execId          + \" not found.\");    }    final File dir = runner.getExecutionDir();    if (dir != null && dir.exists()) {      try {        synchronized (this.executionDirDeletionSync) {          if (!dir.exists()) {            throw new ExecutorManagerException(                \"Execution dir file doesn't exist. Probably has beend deleted\");          }          final File logFile = runner.getJobLogFile(jobId, attempt);          if (logFile != null && logFile.exists()) {            return FileIOUtils.readUtf8File(logFile, startByte, length);          } else {            throw new ExecutorManagerException(\"Job log file doesn't exist.\");          }        }      } catch (final IOException e) {        throw new ExecutorManagerException(e);      }    }    throw new ExecutorManagerException(        \"Error reading file. Log directory doesn't exist.\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "readJobAttachments", "params": ["int", "String", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<Object>", "snippet": "  public List<Object> readJobAttachments(final int execId, final String jobId, final int attempt)      throws ExecutorManagerException {    final FlowRunner runner = this.runningFlows.get(execId);    if (runner == null) {      throw new ExecutorManagerException(\"Running flow \" + execId          + \" not found.\");    }    final File dir = runner.getExecutionDir();    if (dir == null || !dir.exists()) {      throw new ExecutorManagerException(          \"Error reading file. Log directory doesn't exist.\");    }    try {      synchronized (this.executionDirDeletionSync) {        if (!dir.exists()) {          throw new ExecutorManagerException(              \"Execution dir file doesn't exist. Probably has beend deleted\");        }        final File attachmentFile = runner.getJobAttachmentFile(jobId, attempt);        if (attachmentFile == null || !attachmentFile.exists()) {          return null;        }        final List<Object> jobAttachments =            (ArrayList<Object>) JSONUtils.parseJSONFromFile(attachmentFile);        return jobAttachments;      }    } catch (final IOException e) {      throw new ExecutorManagerException(e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "readJobMetaData", "params": ["int", "String", "int", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "JobMetaData", "snippet": "  public JobMetaData readJobMetaData(final int execId, final String jobId, final int attempt,      final int startByte, final int length) throws ExecutorManagerException {    final FlowRunner runner = this.runningFlows.get(execId);    if (runner == null) {      throw new ExecutorManagerException(\"Running flow \" + execId          + \" not found.\");    }    final File dir = runner.getExecutionDir();    if (dir != null && dir.exists()) {      try {        synchronized (this.executionDirDeletionSync) {          if (!dir.exists()) {            throw new ExecutorManagerException(                \"Execution dir file doesn't exist. Probably has beend deleted\");          }          final File metaDataFile = runner.getJobMetaDataFile(jobId, attempt);          if (metaDataFile != null && metaDataFile.exists()) {            return FileIOUtils.readUtf8MetaDataFile(metaDataFile, startByte,                length);          } else {            throw new ExecutorManagerException(\"Job log file doesn't exist.\");          }        }      } catch (final IOException e) {        throw new ExecutorManagerException(e);      }    }    throw new ExecutorManagerException(        \"Error reading file. Log directory doesn't exist.\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "getLastCleanerThreadCheckTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getLastCleanerThreadCheckTime() {    return this.lastCleanerThreadCheckTime;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "isCleanerThreadActive", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isCleanerThreadActive() {    return this.cleanerThread.isAlive();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "getCleanerThreadState", "params": [], "throws": null, "modifiers": ["public"], "return_type": "State", "snippet": "  public State getCleanerThreadState() {    return this.cleanerThread.getState();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "isExecutorThreadPoolShutdown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isExecutorThreadPoolShutdown() {    return this.executorService.isShutdown();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "getNumQueuedFlows", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getNumQueuedFlows() {    return this.executorService.getQueue().size();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "getNumRunningFlows", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getNumRunningFlows() {    return this.executorService.getActiveCount();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "getRunningFlowIds", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getRunningFlowIds() {    // The in progress tasks are actually of type FutureTask    final Set<Runnable> inProgressTasks = this.executorService.getInProgressTasks();    final List<Integer> runningFlowIds =        new ArrayList<>(inProgressTasks.size());    for (final Runnable task : inProgressTasks) {      // add casting here to ensure it matches the expected type in      // submittedFlows      final Integer execId = this.submittedFlows.get((Future<?>) task);      if (execId != null) {        runningFlowIds.add(execId);      } else {        logger.warn(\"getRunningFlowIds: got null execId for task: \" + task);      }    }    Collections.sort(runningFlowIds);    return runningFlowIds.toString();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "getQueuedFlowIds", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getQueuedFlowIds() {    final List<Integer> flowIdList =        new ArrayList<>(this.executorService.getQueue().size());    for (final Runnable task : this.executorService.getQueue()) {      final Integer execId = this.submittedFlows.get(task);      if (execId != null) {        flowIdList.add(execId);      } else {        logger            .warn(\"getQueuedFlowIds: got null execId for queuedTask: \" + task);      }    }    Collections.sort(flowIdList);    return flowIdList.toString();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "getMaxNumRunningFlows", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getMaxNumRunningFlows() {    return this.numThreads;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "getTheadPoolQueueSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getTheadPoolQueueSize() {    return this.threadPoolQueueSize;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "reloadJobTypePlugins", "params": [], "throws": ["JobTypeManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void reloadJobTypePlugins() throws JobTypeManagerException {    this.jobtypeManager.loadPlugins();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "getTotalNumExecutedFlows", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getTotalNumExecutedFlows() {    return this.executorService.getTotalTasks();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "beforeExecute", "params": ["Runnable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void beforeExecute(final Runnable r) {  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "afterExecute", "params": ["Runnable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void afterExecute(final Runnable r) {    this.submittedFlows.remove(r);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "shutdown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void shutdown() {    logger.warn(\"Shutting down FlowRunnerManager...\");    if (this.azkabanProps.getBoolean(ConfigurationKeys.AZKABAN_POLL_MODEL, false)) {      this.pollingService.shutdown();    }    this.executorService.shutdown();    boolean result = false;    while (!result) {      logger.info(\"Awaiting Shutdown. # of executing flows: \" + getNumRunningFlows());      try {        result = this.executorService.awaitTermination(1, TimeUnit.MINUTES);      } catch (final InterruptedException e) {        logger.error(e);      }    }    logger.warn(\"Shutdown FlowRunnerManager complete.\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "shutdownNow", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void shutdownNow() {    logger.warn(\"Shutting down FlowRunnerManager now...\");    if (this.azkabanProps.getBoolean(ConfigurationKeys.AZKABAN_POLL_MODEL, false)) {      this.pollingService.shutdown();    }\t// FIXME\u00a0New feature: Before closing the executor thread pool, you need to actively kill all running tasks.    for (FlowRunner flowRunner : runningFlows.values()) {      logger.info(\"killing flow execId:\" + flowRunner.getExecutionId());      try {        flowRunner.removeListener(flowRunner.getCycleFlowRunnerEventListener());        flowRunner.kill();      } catch (Exception e) {        logger.error(\"kill flow failed, execId: \" + flowRunner.getExecutionId(), e);      }    }    this.executorService.shutdown();    this.triggerManager.shutdown();    boolean result = false;    for(int i = 0; i < 5; i++) {      logger.info(\"Awaiting Shutdown. # of executing flows: \" + getNumRunningFlows());      try {        result = this.executorService.awaitTermination(30, TimeUnit.SECONDS);        if(result){          logger.info(\"all flow is finished.\");          break;        }      } catch (final InterruptedException e) {        logger.error(e);      }    }    logger.warn(\"Shutdown FlowRunnerManager complete, now executing flows size: \" + getNumRunningFlows());  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "deleteExecutionDirectory", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void deleteExecutionDirectory() {    logger.warn(\"Deleting execution dir: \" + this.executionDirectory.getAbsolutePath());    try {      FileUtils.deleteDirectory(this.executionDirectory);    } catch (final IOException e) {      logger.error(e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "getActiveProjectVersions", "params": [], "throws": null, "modifiers": ["private"], "return_type": "Set<Pair>", "snippet": "  private Set<Pair<Integer, Integer>> getActiveProjectVersions() {    final Set<Pair<Integer, Integer>> activeProjectVersions = new HashSet<>();    for (final FlowRunner runner : FlowRunnerManager.this.runningFlows.values()) {      final ExecutableFlow flow = runner.getExecutableFlow();      activeProjectVersions.add(new Pair<>(flow          .getProjectId(), flow.getVersion()));    }    return activeProjectVersions;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "FlowRunnerManager", "extends": null, "implements": ["EventListener", "ThreadPoolExecutingListener"], "modifiers": ["public"]}}, {"method_name": "shutdown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void shutdown() {      this.shutdown = true;      this.interrupt();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "CleanerThread", "extends": "Thread", "implements": null, "modifiers": ["private"]}}, {"method_name": "isFlowRunningLongerThan", "params": ["ExecutableFlow", "long"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean isFlowRunningLongerThan(final ExecutableFlow flow,        final long flowMaxRunningTimeInMins) {      final Set<Status> nonFinishingStatusAfterFlowStarts = new HashSet<>(          Arrays.asList(Status.RUNNING, Status.QUEUED, Status.PAUSED, Status.FAILED_FINISHING));      return nonFinishingStatusAfterFlowStarts.contains(flow.getStatus()) && flow.getStartTime() > 0          && TimeUnit.MILLISECONDS.toMinutes(System.currentTimeMillis() - flow.getStartTime())          >= flowMaxRunningTimeInMins;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "CleanerThread", "extends": "Thread", "implements": null, "modifiers": ["private"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run() {      while (!this.shutdown) {        synchronized (this) {          try {            FlowRunnerManager.this.lastCleanerThreadCheckTime = System.currentTimeMillis();            FlowRunnerManager.logger.info(\"# of executing flows: \" + getNumRunningFlows());            // Cleanup old stuff.            final long currentTime = System.currentTimeMillis();            if (currentTime - RECENTLY_FINISHED_INTERVAL_MS > this.lastRecentlyFinishedCleanTime) {              FlowRunnerManager.logger.info(\"Cleaning recently finished\");              cleanRecentlyFinished();              this.lastRecentlyFinishedCleanTime = currentTime;            }            if (currentTime - EXECUTION_DIR_CLEAN_INTERVAL_MS > this.lastExecutionDirCleanTime) {              FlowRunnerManager.logger.info(\"Cleaning old execution dirs\");              cleanOlderExecutionDirs();              this.lastExecutionDirCleanTime = currentTime;            }            if (this.flowMaxRunningTimeInMins > 0                && currentTime - LONG_RUNNING_FLOW_KILLING_INTERVAL_MS                > this.lastLongRunningFlowCleanTime) {              FlowRunnerManager.logger                  .info(String.format(\"Killing long jobs running longer than %s mins\",                      this.flowMaxRunningTimeInMins));              for (final FlowRunner flowRunner : FlowRunnerManager.this.runningFlows.values()) {                if (isFlowRunningLongerThan(flowRunner.getExecutableFlow(),                    this.flowMaxRunningTimeInMins)) {                  FlowRunnerManager.logger.info(String                      .format(\"Killing job [id: %s, status: %s]. It has been running for %s mins\",                          flowRunner.getExecutableFlow().getId(),                          flowRunner.getExecutableFlow().getStatus(), TimeUnit.MILLISECONDS                              .toMinutes(System.currentTimeMillis() - flowRunner.getExecutableFlow()                                  .getStartTime())));                  flowRunner.kill();                }              }              this.lastLongRunningFlowCleanTime = currentTime;            }            wait(FlowRunnerManager.RECENTLY_FINISHED_TIME_TO_LIVE);          } catch (final InterruptedException e) {            FlowRunnerManager.logger.info(\"Interrupted. Probably to shut down.\");          } catch (final Throwable t) {            FlowRunnerManager.logger.warn(                \"Uncaught throwable, please look into why it is not caught\", t);          }        }      }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "CleanerThread", "extends": "Thread", "implements": null, "modifiers": ["private"]}}, {"method_name": "cleanOlderExecutionDirs", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void cleanOlderExecutionDirs() {      final File dir = FlowRunnerManager.this.executionDirectory;      final long pastTimeThreshold =          System.currentTimeMillis() - FlowRunnerManager.this.executionDirRetention;      final File[] executionDirs = dir          .listFiles(path -> path.isDirectory() && path.lastModified() < pastTimeThreshold);      for (final File exDir : executionDirs) {        try {          final int execId = Integer.valueOf(exDir.getName());          if (FlowRunnerManager.this.runningFlows.containsKey(execId)              || FlowRunnerManager.this.recentlyFinishedFlows.containsKey(execId)) {            continue;          }        } catch (final NumberFormatException e) {          FlowRunnerManager.logger.error(\"Can't delete exec dir \" + exDir.getName()              + \" it is not a number\");          continue;        }        synchronized (FlowRunnerManager.this.executionDirDeletionSync) {          try {            FileUtils.deleteDirectory(exDir);          } catch (final IOException e) {            FlowRunnerManager.logger.error(\"Error cleaning execution dir \" + exDir.getPath(), e);          }        }      }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "CleanerThread", "extends": "Thread", "implements": null, "modifiers": ["private"]}}, {"method_name": "cleanRecentlyFinished", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void cleanRecentlyFinished() {      final long cleanupThreshold =          System.currentTimeMillis() - FlowRunnerManager.RECENTLY_FINISHED_TIME_TO_LIVE;      final ArrayList<Integer> executionToKill = new ArrayList<>();      for (final ExecutableFlow flow : FlowRunnerManager.this.recentlyFinishedFlows.values()) {        if (flow.getEndTime() < cleanupThreshold) {          executionToKill.add(flow.getExecutionId());        }      }      for (final Integer id : executionToKill) {        FlowRunnerManager.logger.info(\"Cleaning execution \" + id            + \" from recently finished flows list.\");        FlowRunnerManager.this.recentlyFinishedFlows.remove(id);      }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "CleanerThread", "extends": "Thread", "implements": null, "modifiers": ["private"]}}, {"method_name": "start", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void start() {      this.scheduler.scheduleAtFixedRate(() -> pollExecution(), 0L, this.pollingIntervalMs,          TimeUnit.MILLISECONDS);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "PollingService", "extends": null, "implements": null, "modifiers": ["private"]}}, {"method_name": "pollExecution", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void pollExecution() {      if (this.executorId == -1) {        if (AzkabanExecutorServer.getApp() != null) {          try {            final Executor executor = requireNonNull(FlowRunnerManager.this.executorLoader                .fetchExecutor(AzkabanExecutorServer.getApp().getHost(),                    AzkabanExecutorServer.getApp().getPort()), \"The executor can not be null\");            this.executorId = executor.getId();          } catch (final Exception e) {            FlowRunnerManager.logger.error(\"Failed to fetch executor \", e);          }        }      } else {        try {          // Todo jamiesjc: check executor capacity before polling from DB          final int execId = FlowRunnerManager.this.executorLoader              .selectAndUpdateExecution(this.executorId, FlowRunnerManager.this.active);          if (execId != -1) {            FlowRunnerManager.logger.info(\"Submitting flow \" + execId);            submitFlow(execId);            commonMetrics.markDispatchSuccess();          }        } catch (final Exception e) {          FlowRunnerManager.logger.error(\"Failed to submit flow \", e);          commonMetrics.markDispatchFail();        }      }    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "PollingService", "extends": null, "implements": null, "modifiers": ["private"]}}, {"method_name": "shutdown", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void shutdown() {      this.scheduler.shutdown();      this.scheduler.shutdownNow();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java", "stars": "18", "class": {"name": "PollingService", "extends": null, "implements": null, "modifiers": ["private"]}}, {"method_name": "registerBeanDefinitions", "params": ["AnnotationMetadata", "BeanDefinitionRegistry"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {        registerCommon(registry);        registerProcessor(registry);    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/component/EtcdConfigBeanDefinitionRegistrar.java", "stars": "4", "class": {"name": "EtcdConfigBeanDefinitionRegistrar", "extends": null, "implements": ["ImportBeanDefinitionRegistrar"], "modifiers": ["public"]}}, {"method_name": "registerCommon", "params": ["BeanDefinitionRegistry"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void registerCommon(BeanDefinitionRegistry registry) {        registerInfrastructureBeanIfAbsent(registry, EtcdConfigServiceImpl.BEAN_NAME, EtcdConfigServiceImpl.class);        registerInfrastructureBeanIfAbsent(registry, EtcdComponent.BEAN_NAME, EtcdComponent.class);    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/component/EtcdConfigBeanDefinitionRegistrar.java", "stars": "4", "class": {"name": "EtcdConfigBeanDefinitionRegistrar", "extends": null, "implements": ["ImportBeanDefinitionRegistrar"], "modifiers": ["public"]}}, {"method_name": "registerProcessor", "params": ["BeanDefinitionRegistry"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void registerProcessor(BeanDefinitionRegistry registry) {        registerInfrastructureBeanIfAbsent(registry, EtcdPropertySourcePostProcessor.BEAN_NAME, EtcdPropertySourcePostProcessor.class);        registerInfrastructureBeanIfAbsent(registry, EtcdValueAnnotationBeanPostProcessor.BEAN_NAME, EtcdValueAnnotationBeanPostProcessor.class);        registerInfrastructureBeanIfAbsent(registry, EtcdConfigurationPropertiesBindingPostProcessor.BEAN_NAME, EtcdConfigurationPropertiesBindingPostProcessor.class);        registerInfrastructureBeanIfAbsent(registry, EtcdConfigListenerMethodProcessor.BEAN_NAME, EtcdConfigListenerMethodProcessor.class);    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/component/EtcdConfigBeanDefinitionRegistrar.java", "stars": "4", "class": {"name": "EtcdConfigBeanDefinitionRegistrar", "extends": null, "implements": ["ImportBeanDefinitionRegistrar"], "modifiers": ["public"]}}, {"method_name": "registerInfrastructureBeanIfAbsent", "params": ["BeanDefinitionRegistry", "String", "Class<?>"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void registerInfrastructureBeanIfAbsent(BeanDefinitionRegistry registry, String beanName, Class<?> beanClass) {        if (!registry.containsBeanDefinition(beanName)) {            registerInfrastructureBean(registry, beanName, beanClass);        } else {            LOG.warn(\"register exists beanDefinition,beanName={}\", beanName);        }    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/component/EtcdConfigBeanDefinitionRegistrar.java", "stars": "4", "class": {"name": "EtcdConfigBeanDefinitionRegistrar", "extends": null, "implements": ["ImportBeanDefinitionRegistrar"], "modifiers": ["public"]}}, {"method_name": "registerInfrastructureBean", "params": ["BeanDefinitionRegistry", "String", "Class<?>"], "throws": null, "modifiers": ["private", "static"], "return_type": "void", "snippet": "    private static void registerInfrastructureBean(BeanDefinitionRegistry registry, String beanName, Class<?> beanClass) {        BeanDefinitionBuilder beanDefinitionBuilder = BeanDefinitionBuilder.rootBeanDefinition(beanClass);        beanDefinitionBuilder.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);        registry.registerBeanDefinition(beanName, beanDefinitionBuilder.getBeanDefinition());    }", "url": "https://raw.githubusercontent.com/zzl520/etcd-config-spring-boot-starter/master/src/main/java/com/zzl/etcd/config/component/EtcdConfigBeanDefinitionRegistrar.java", "stars": "4", "class": {"name": "EtcdConfigBeanDefinitionRegistrar", "extends": null, "implements": ["ImportBeanDefinitionRegistrar"], "modifiers": ["public"]}}, {"method_name": "resolveLocale", "params": ["HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "Locale", "snippet": "    public Locale resolveLocale(HttpServletRequest request) {        String lang = request.getHeader(localeHeader);        Locale locale = Locale.getDefault();        if(StringUtils.isNotBlank(lang)){            if(lang.contains(SPLIT_SPOT)){                String str = lang.split(SPLIT_SPOT)[0];                locale = splitStr(str);            }else{                locale = splitStr(lang);            }        }        return locale;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/i18n/CustomLocaleResolver.java", "stars": "23", "class": {"name": "CustomLocaleResolver", "extends": "AcceptHeaderLocaleResolver", "implements": null, "modifiers": ["public"]}}, {"method_name": "splitStr", "params": ["String"], "throws": null, "modifiers": ["private"], "return_type": "Locale", "snippet": "    private Locale splitStr(String str){        Locale locale;        if(str.contains(SPLIT_UNDERLINE)){            String[] language = str.split(SPLIT_UNDERLINE);            locale = new Locale(language[0],language[1]);        }else if(str.contains(SPLIT_LINE)){            String[] language = str.split(SPLIT_LINE);            locale = new Locale(language[0],language[1]);        }else {            locale = new Locale(str);        }        return locale;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/i18n/CustomLocaleResolver.java", "stars": "23", "class": {"name": "CustomLocaleResolver", "extends": "AcceptHeaderLocaleResolver", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args)throws Exception{\t\tSpringApplication.run(UserApplication.class, args);\t}", "url": "https://raw.githubusercontent.com/bruinli28/stockmarket/master/cloud-user-service/src/main/java/com/iiht/stock/UserApplication.java", "stars": "2", "class": {"name": "UserApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTitle", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTitle(String title) {        this.title = title;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/bean/FundRecordBean.java", "stars": "1", "class": {"name": "FundRecordBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTitle", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getTitle() {        return title;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/bean/FundRecordBean.java", "stars": "1", "class": {"name": "FundRecordBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setStatus", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setStatus(int status) {        this.status = status;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/bean/FundRecordBean.java", "stars": "1", "class": {"name": "FundRecordBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getStatus() {        return status;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/bean/FundRecordBean.java", "stars": "1", "class": {"name": "FundRecordBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setNum", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setNum(int num) {        this.num = num;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/bean/FundRecordBean.java", "stars": "1", "class": {"name": "FundRecordBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNum", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getNum() {        return num;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/bean/FundRecordBean.java", "stars": "1", "class": {"name": "FundRecordBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setTime", "params": ["long"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setTime(long time) {        this.time = time;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/bean/FundRecordBean.java", "stars": "1", "class": {"name": "FundRecordBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getTime() {        return time;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/bean/FundRecordBean.java", "stars": "1", "class": {"name": "FundRecordBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMessage", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMessage(String message) {        this.message = message;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/bean/FundRecordBean.java", "stars": "1", "class": {"name": "FundRecordBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMessage", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getMessage() {        return message;    }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/bean/FundRecordBean.java", "stars": "1", "class": {"name": "FundRecordBean", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createFromJson", "params": ["HashMap<String,Object>"], "throws": null, "modifiers": ["public", "static"], "return_type": "KillJobAction", "snippet": "  public static KillJobAction createFromJson(final HashMap<String, Object> obj) {    final Map<String, Object> jsonObj = (HashMap<String, Object>) obj;    final String objType = (String) jsonObj.get(\"type\");    if (!objType.equals(type)) {      throw new RuntimeException(\"Cannot create action of \" + type + \" from \"          + objType);    }    final String actionId = (String) jsonObj.get(\"actionId\");    final int execId = Integer.valueOf((String) jsonObj.get(\"execId\"));    final String jobId = (String) jsonObj.get(\"jobId\");    return new KillJobAction(actionId, execId, jobId);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/action/KillJobAction.java", "stars": "18", "class": {"name": "KillJobAction", "extends": null, "implements": ["TriggerAction"], "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getId() {    return this.actionId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/action/KillJobAction.java", "stars": "18", "class": {"name": "KillJobAction", "extends": null, "implements": ["TriggerAction"], "modifiers": ["public"]}}, {"method_name": "getType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getType() {    return type;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/action/KillJobAction.java", "stars": "18", "class": {"name": "KillJobAction", "extends": null, "implements": ["TriggerAction"], "modifiers": ["public"]}}, {"method_name": "fromJson", "params": ["Object"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "KillJobAction", "snippet": "  public KillJobAction fromJson(final Object obj) throws Exception {    return createFromJson((HashMap<String, Object>) obj);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/action/KillJobAction.java", "stars": "18", "class": {"name": "KillJobAction", "extends": null, "implements": ["TriggerAction"], "modifiers": ["public"]}}, {"method_name": "toJson", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object toJson() {    final Map<String, Object> jsonObj = new HashMap<>();    jsonObj.put(\"actionId\", this.actionId);    jsonObj.put(\"type\", type);    jsonObj.put(\"execId\", String.valueOf(this.execId));    jsonObj.put(\"jobId\", String.valueOf(this.jobId));    return jsonObj;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/action/KillJobAction.java", "stars": "18", "class": {"name": "KillJobAction", "extends": null, "implements": ["TriggerAction"], "modifiers": ["public"]}}, {"method_name": "doAction", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void doAction() throws Exception {    logger.info(\"ready to do action \" + getDescription());    final FlowRunnerManager flowRunnerManager = ServiceProvider.SERVICE_PROVIDER        .getInstance(FlowRunnerManager.class);    flowRunnerManager.cancelJobBySLA(this.execId, this.jobId);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/action/KillJobAction.java", "stars": "18", "class": {"name": "KillJobAction", "extends": null, "implements": ["TriggerAction"], "modifiers": ["public"]}}, {"method_name": "setContext", "params": ["Map<String,Object>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setContext(final Map<String, Object> context) {  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/action/KillJobAction.java", "stars": "18", "class": {"name": "KillJobAction", "extends": null, "implements": ["TriggerAction"], "modifiers": ["public"]}}, {"method_name": "getDescription", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getDescription() {    return type + \" for execution \" + this.execId + \" jobId \" + this.jobId;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-exec-server/src/main/java/azkaban/execapp/action/KillJobAction.java", "stars": "18", "class": {"name": "KillJobAction", "extends": null, "implements": ["TriggerAction"], "modifiers": ["public"]}}, {"method_name": "uploadExecutableRecoverFlow", "params": ["ExecutionRecover"], "throws": ["ExecutorManagerException"], "modifiers": ["synchronized", "public"], "return_type": "Integer", "snippet": "  public synchronized Integer uploadExecutableRecoverFlow(final ExecutionRecover recover)      throws ExecutorManagerException {    final String INSERT_EXECUTABLE_RECOVER_FLOW = \"INSERT INTO execution_recover_flows \"        + \"(recover_status, recover_start_time, recover_end_time, ex_interval, \"        + \"now_exec_id, project_id, flow_id, \"        + \"submit_user, submit_time, update_time ) \"        + \"values (?,?,?,?,?,?,?,?,?,?)\";    final long submitTime = System.currentTimeMillis();    final SQLTransaction<Long> insertAndGetLastID = transOperator -> {      transOperator.update(INSERT_EXECUTABLE_RECOVER_FLOW,          recover.getRecoverStatus().getNumVal(),          recover.getRecoverStartTime(),          recover.getRecoverEndTime(),          recover.getExInterval(),          recover.getNowExecutionId(),          recover.getProjectId(),          recover.getFlowId(),          recover.getSubmitUser(),          submitTime,          submitTime);      transOperator.getConnection().commit();      return transOperator.getLastInsertId();    };    try {      final long id = this.dbOperator.transaction(insertAndGetLastID);      logger.info(\"History Recover given \" + recover.getRecoverId() + \" given id \" + id);      recover.setRecoverId((int)id);      updateExecutableRecoverFlow(recover);    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error creating History Recover.\", e);    }    return recover.getRecoverId();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionRecoverDao.java", "stars": "18", "class": {"name": "ExecutionRecoverDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateExecutableRecoverFlow", "params": ["ExecutionRecover"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void updateExecutableRecoverFlow(final ExecutionRecover recover) throws ExecutorManagerException {    updateExecutableRecoverFlow(recover, EncodingType.GZIP);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionRecoverDao.java", "stars": "18", "class": {"name": "ExecutionRecoverDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateExecutableRecoverFlow", "params": ["ExecutionRecover", "EncodingType"], "throws": ["ExecutorManagerException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void updateExecutableRecoverFlow(final ExecutionRecover recover, final EncodingType encType)      throws ExecutorManagerException {    final String UPDATE_EXECUTABLE_RECOVER_FLOW_DATA =        \"UPDATE execution_recover_flows \"            + \"SET recover_status=?, now_exec_id=?, update_time=?, start_time=?, end_time=?, enc_type=?, recover_data=? \"            + \"WHERE recover_id=? \";    final String json = JSONUtils.toJSON(recover.toObject());    byte[] data = null;    try {      final byte[] stringData = json.getBytes(\"UTF-8\");      data = stringData;      // Todo kunkun-tang: use a common method to transform stringData to data.      if (encType == EncodingType.GZIP) {        data = GZIPUtils.gzipBytes(stringData);      }    } catch (final IOException e) {      throw new ExecutorManagerException(\"Error encoding the execution recover flow.\");    }    try {      this.dbOperator.update(UPDATE_EXECUTABLE_RECOVER_FLOW_DATA,          recover.getRecoverStatus().getNumVal(),          recover.getNowExecutionId(),          recover.getUpdateTime(),          recover.getStartTime(),          recover.getEndTime(),          encType.getNumVal(),          data,          recover.getRecoverId());    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error updating History Recover.\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionRecoverDao.java", "stars": "18", "class": {"name": "ExecutionRecoverDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHistoryRecoverFlows", "params": ["Integer"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "ExecutionRecover", "snippet": "  public ExecutionRecover getHistoryRecoverFlows(final Integer recoverId)      throws ExecutorManagerException {    String query =        \"SELECT recover_id, recover_status, enc_type, recover_data FROM execution_recover_flows where recover_id = ?\";    final List<Object> params = new ArrayList<>();    params.add(recoverId);    try {      List<ExecutionRecover> recoverList = this.dbOperator.query(query, new FetchExecutionRecoverFlows(), params.toArray());      if(recoverList.size() > 0){        return recoverList.get(0);      }else {        return null;      }    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching history recover flows\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionRecoverDao.java", "stars": "18", "class": {"name": "ExecutionRecoverDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "listHistoryRecoverFlowByFlowId", "params": ["String", "String"], "throws": ["ExecutorManagerException"], "modifiers": [], "return_type": "List<ExecutionRecover>", "snippet": "  List<ExecutionRecover> listHistoryRecoverFlowByFlowId(final String flowId, final String projectId)      throws ExecutorManagerException {    String query =        \"select exec_id, enc_type, flow_data \"            + \"from execution_flows \"            + \"where flow_id = ? and project_id = ? and repeat_id != '' \"            + \"order by start_time DESC limit 1 \";    final List<Object> params = new ArrayList<>();    params.add(flowId);    params.add(projectId);    try {      return this.dbOperator.query(query, new FetchExecutionRecoverFlows(), params.toArray());    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching history recover flow by flowId\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionRecoverDao.java", "stars": "18", "class": {"name": "ExecutionRecoverDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "listHistoryRecoverFlows", "params": ["Map", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutionRecover>", "snippet": "  public List<ExecutionRecover> listHistoryRecoverFlows(final Map paramMap, final int skip, final int num)      throws ExecutorManagerException {    StringBuilder querySql = new StringBuilder(\"SELECT recover_id, recover_status, erf.enc_type, recover_data FROM execution_recover_flows erf \"            + \"join projects p on erf.project_id = p.id \"            + \"WHERE recover_status=30 \");    final List<Object> params = new ArrayList<>();    boolean first = false;    if(!paramMap.isEmpty()){      String projContain = MapUtils.getString(paramMap, \"projContain\");      if (projContain != null && !projContain.isEmpty()) {        wrapperSqlParam(first, paramMap, \"projContain\", null, \"name\", \"like\", querySql, params);      }      //String flowContains = String.valueOf(paramMap.get(\"flowContains\"));      String flowContains = MapUtils.getString(paramMap, \"flowContains\");      // todo kunkun-tang: we don't need the below complicated logics. We should just use a simple way.      if (flowContains != null && !flowContains.isEmpty()) {        wrapperSqlParam(first, paramMap, \"flowContains\", null, \"flow_id\", \"like\", querySql, params);      }      Integer recoverStatus = MapUtils.getInteger(paramMap, \"recoverStatus\");      if (recoverStatus != null && recoverStatus != 0) {        wrapperSqlParam(first, paramMap, \"recoverStatus\", \"int\", \"recover_status\", \"=\", querySql, params);      }      String userName = MapUtils.getString(paramMap, \"userName\");      if(userName != null && !userName.isEmpty()){        wrapperSqlParam(first, paramMap, \"userName\", null, \"submit_user\", \"=\", querySql, params);      }    }    if (skip > -1 && num > 0) {      querySql.append(\"  ORDER BY recover_id DESC LIMIT ?, ?\");      params.add(skip);      params.add(num);    }    try {      return this.dbOperator.query(querySql.toString(), new FetchExecutionRecoverFlows(), params.toArray());    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching history recover flows\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionRecoverDao.java", "stars": "18", "class": {"name": "ExecutionRecoverDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "listMaintainedHistoryRecoverFlows", "params": ["String", "List<Integer>", "int", "int"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutionRecover>", "snippet": "  public List<ExecutionRecover> listMaintainedHistoryRecoverFlows(String username, List<Integer> maintainedProjectIds, int skip, int num)          throws ExecutorManagerException {    String projectIds = maintainedProjectIds.stream()            .map(Objects::toString)            .collect(joining(\",\", \"(\", \")\"));    String querySQL = \"SELECT recover_id, recover_status, erf.enc_type, recover_data, erf.project_id AS project_id FROM execution_recover_flows erf \"            + \"JOIN projects p ON erf.project_id = p.id WHERE recover_status=30\"            + \" AND (project_id IN \" + projectIds + \" OR submit_user = ?)\"            + \" ORDER BY recover_id DESC LIMIT ?, ?\";    try {      return this.dbOperator.query(querySQL, new FetchExecutionRecoverFlows(), username, skip, num);    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching history recover flows\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionRecoverDao.java", "stars": "18", "class": {"name": "ExecutionRecoverDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHistoryRecoverFlowByPidAndFid", "params": ["String", "String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "ExecutionRecover", "snippet": "  public ExecutionRecover getHistoryRecoverFlowByPidAndFid(final String projectId, final String flowId)      throws ExecutorManagerException {    String query = \"SELECT recover_id, recover_status, enc_type, recover_data FROM execution_recover_flows \"            + \"WHERE project_id = ? AND flow_id = ? \"            + \"ORDER BY start_time DESC limit 1\";    final List<Object> params = new ArrayList<>();    params.add(projectId);    params.add(flowId);    try {      List<ExecutionRecover> recoverList = this.dbOperator.query(query, new FetchExecutionRecoverFlows(), params.toArray());      if(recoverList.size() > 0){        return recoverList.get(0);      }else {        return null;      }    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching history recover flows\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionRecoverDao.java", "stars": "18", "class": {"name": "ExecutionRecoverDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "listHistoryRecover", "params": ["Map<String,String>"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutionRecover>", "snippet": "  public List<ExecutionRecover> listHistoryRecover(final Map<String, String> paramMap)      throws ExecutorManagerException {    String query = FetchExecutionRecoverFlows.LIST_BASE_EXECUTABLE_RECOVER_FLOW_QUERY;    final List<Object> params = new ArrayList<>();    boolean first = false;    if(!paramMap.isEmpty()){      String recoverStatus = MapUtils.getString(paramMap, \"recoverStatus\", \"\");      if(recoverStatus != null && !recoverStatus.isEmpty()){        if (first) {          query += \" WHERE \";          first = false;        } else {          query += \" AND \";        }        query += \"recover_status = ?\";        params.add(recoverStatus);      }      Integer limitNum = MapUtils.getInteger(paramMap, \"limitNum\", 1);      if(recoverStatus != null && !recoverStatus.isEmpty()){        query += \" ORDER BY recover_id DESC LIMIT ? \";        params.add(limitNum);      }    }    try {      return this.dbOperator.query(query, new FetchExecutionRecoverFlows(), params.toArray());    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching history recover flows\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionRecoverDao.java", "stars": "18", "class": {"name": "ExecutionRecoverDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHistoryRecoverTotal", "params": [], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getHistoryRecoverTotal()      throws ExecutorManagerException {    final IntHandler intHandler = new IntHandler();    try {      return this.dbOperator.query(IntHandler.NUM_EXECUTIONS, intHandler);    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching num executions\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionRecoverDao.java", "stars": "18", "class": {"name": "ExecutionRecoverDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUserHistoryRecoverTotal", "params": ["String"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getUserHistoryRecoverTotal(final String userName)      throws ExecutorManagerException {    final IntHandler intHandler = new IntHandler();    final List<Object> params = new ArrayList<>();    params.add(userName);    try {      return this.dbOperator.query(IntHandler.USER_NUM_EXECUTIONS, intHandler, params.toArray());    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching num executions\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionRecoverDao.java", "stars": "18", "class": {"name": "ExecutionRecoverDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMaintainedHistoryRecoverTotal", "params": ["String", "List<Integer>"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getMaintainedHistoryRecoverTotal(String username, List<Integer> maintainedProjectIds) throws ExecutorManagerException {    String projectIds = maintainedProjectIds.stream()            .map(Objects::toString)            .collect(joining(\",\", \"(\", \")\"));    String querySQL  = \"SELECT COUNT(1) FROM execution_recover_flows WHERE recover_status = 30 \" +            \"AND (project_id in \" + projectIds + \" OR submit_user = ?)\";    try {      final IntHandler intHandler = new IntHandler();      return this.dbOperator.query(querySQL, intHandler, username);    } catch (SQLException e) {      throw new ExecutorManagerException(\"Error fetching num executions\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionRecoverDao.java", "stars": "18", "class": {"name": "ExecutionRecoverDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fetchHistoryRecover", "params": [], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "List<ExecutionRecover>", "snippet": "  public List<ExecutionRecover> fetchHistoryRecover()          throws ExecutorManagerException {    final FetchExecutionRecoverFlows fetchExecutionRecoverFlows = new  FetchExecutionRecoverFlows();    try {      return this.dbOperator.query(FetchExecutionRecoverFlows.IS_NOT_FINISH_RECOVER, fetchExecutionRecoverFlows);    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching num executions\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionRecoverDao.java", "stars": "18", "class": {"name": "ExecutionRecoverDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecHistoryTotal", "params": ["Map<String,String>"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getExecHistoryTotal(final Map<String, String> filterMap)      throws ExecutorManagerException {    final IntHandler intHandler = new IntHandler();    final List<Object> params = new ArrayList<>();    StringBuilder historyTotalSql = new StringBuilder(\"SELECT COUNT(1) FROM execution_flows ef JOIN projects p ON ef.project_id = p.id\");    boolean first = true;    //\u641c\u7d22\u6240\u6709\u7684\u6267\u884c\u5386\u53f2\u6570\u636e\u6761\u6570    if (null != filterMap.get(\"userContains\")) {      first = wrapperSqlParam(first, filterMap, \"userContains\", null,\"submit_user\", \"like\", historyTotalSql, params);    }    //\u641c\u7d22flow\u540d\u5b57\u7c7b\u4f3c\u7684\u6267\u884c\u5386\u53f2\u6570\u636e\u6761\u6570    if (null != filterMap.get(\"flowContains\")) {      first = wrapperSqlParam(first, filterMap, \"flowContains\", null,\"flow_id\", \"like\", historyTotalSql, params);      first = wrapperSqlParam(first, filterMap, \"userName\", null,\"submit_user\", \"=\", historyTotalSql, params);    }    //\u6309\u7167\u8fc7\u6ee4\u6761\u4ef6\u641c\u7d22\u6267\u884c\u5386\u53f2\u6570\u636e\u6761\u6570    if (null != filterMap.get(\"filterContains\")) {      if (filterMap.get(\"projContain\") != null && !filterMap.get(\"projContain\").isEmpty()) {        first = wrapperSqlParam(first, filterMap, \"projContain\", null,\"name\", \"like\", historyTotalSql, params);      }      // todo kunkun-tang: we don't need the below complicated logics. We should just use a simple way.      if (filterMap.get(\"flowContain\") != null && !filterMap.get(\"flowContain\").isEmpty()) {        first = wrapperSqlParam(first, filterMap, \"flowContain\", null,\"flow_id\", \"like\", historyTotalSql, params);      }      if (Integer.valueOf(filterMap.get(\"status\")) != 0) {        first = wrapperSqlParam(first, filterMap, \"status\", \"int\",\"status\", \"=\", historyTotalSql, params);      }      if (!\"-1\".equals(filterMap.get(\"beginTime\"))) {        first = wrapperSqlParam(first, filterMap, \"beginTime\", \"long\",\"start_time\", \">\", historyTotalSql, params);      }      if (!\"-1\".equals(filterMap.get(\"endTime\"))) {        first = wrapperSqlParam(first, filterMap, \"endTime\", \"long\",\"end_time\", \"<\", historyTotalSql, params);      }      if(null != filterMap.get(\"userContain\") && !filterMap.get(\"userContain\").isEmpty()){        first = wrapperSqlParam(first, filterMap, \"userContain\", null,\"submit_user\", \"like\", historyTotalSql, params);      }      if (!\"-1\".equals(filterMap.get(\"flowType\"))) {        first = wrapperSqlParam(first, filterMap, \"flowType\", \"int\",\"flow_type\", \"like\", historyTotalSql, params);      }    }    try {      return this.dbOperator.query(historyTotalSql.toString(), intHandler, params.toArray());    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching num executions\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionRecoverDao.java", "stars": "18", "class": {"name": "ExecutionRecoverDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecHistoryTotal", "params": ["String", "Map<String,String>", "List<Integer>"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getExecHistoryTotal(String username, final Map<String, String> filterMap, List<Integer> projectIds)          throws ExecutorManagerException {    final IntHandler intHandler = new IntHandler();    final List<Object> params = new ArrayList<>();    String projectIdsStr = projectIds.stream()            .map(Object::toString)            .collect(joining(\",\", \"(\", \")\"));    StringBuilder historyTotalSql = new StringBuilder(\"SELECT COUNT(1) FROM execution_flows ef, projects p \"            + \"WHERE ef.project_id = p.id \"            + \"AND ef.project_id IN \" + projectIdsStr);    boolean first = false;    //\u641c\u7d22\u6240\u6709\u7684\u6267\u884c\u5386\u53f2\u6570\u636e\u6761\u6570    if (null != filterMap.get(\"userContains\")) {      first = wrapperSqlParam(first, filterMap, \"userContains\", null,\"submit_user\", \"like\", historyTotalSql, params);    }    //\u641c\u7d22flow\u540d\u5b57\u7c7b\u4f3c\u7684\u6267\u884c\u5386\u53f2\u6570\u636e\u6761\u6570    if (null != filterMap.get(\"flowContains\")) {      first = wrapperSqlParam(first, filterMap, \"flowContains\", null,\"flow_id\", \"like\", historyTotalSql, params);      first = wrapperSqlParam(first, filterMap, \"userName\", null,\"submit_user\", \"=\", historyTotalSql, params);    }    //\u6309\u7167\u8fc7\u6ee4\u6761\u4ef6\u641c\u7d22\u6267\u884c\u5386\u53f2\u6570\u636e\u6761\u6570    if (null != filterMap.get(\"filterContains\")) {      if (filterMap.get(\"projContain\") != null && !filterMap.get(\"projContain\").isEmpty()) {        first = wrapperSqlParam(first, filterMap, \"projContain\", null,\"p.name\", \"like\", historyTotalSql, params);      }      // todo kunkun-tang: we don't need the below complicated logics. We should just use a simple way.      if (filterMap.get(\"flowContain\") != null && !filterMap.get(\"flowContain\").isEmpty()) {        first = wrapperSqlParam(first, filterMap, \"flowContain\", null,\"flow_id\", \"like\", historyTotalSql, params);      }      if (Integer.valueOf(filterMap.get(\"status\")) != 0) {        first = wrapperSqlParam(first, filterMap, \"status\", \"int\",\"status\", \"=\", historyTotalSql, params);      }      if (!\"-1\".equals(filterMap.get(\"beginTime\"))) {        first = wrapperSqlParam(first, filterMap, \"beginTime\", \"long\",\"start_time\", \">\", historyTotalSql, params);      }      if (!\"-1\".equals(filterMap.get(\"endTime\"))) {        first = wrapperSqlParam(first, filterMap, \"endTime\", \"long\",\"end_time\", \"<\", historyTotalSql, params);      }      if(null != filterMap.get(\"userContain\") && !filterMap.get(\"userContain\").isEmpty()){        first = wrapperSqlParam(first, filterMap, \"userContain\", null,\"submit_user\", \"like\", historyTotalSql, params);      }      if (!\"-1\".equals(filterMap.get(\"flowType\"))) {        first = wrapperSqlParam(first, filterMap, \"flowType\", \"int\",\"flow_type\", \"like\", historyTotalSql, params);      }    }    try {      return this.dbOperator.query(historyTotalSql.toString(), intHandler, params.toArray());    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching num executions\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionRecoverDao.java", "stars": "18", "class": {"name": "ExecutionRecoverDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMaintainedExecHistoryTotal", "params": ["String", "List<Integer>"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getMaintainedExecHistoryTotal(String username, List<Integer> projectIds) throws ExecutorManagerException {    String projectIdsStr = projectIds.stream()            .map(Object::toString)            .collect(joining(\",\", \"(\", \")\"));    String querySQL = \"SELECT COUNT(1) \" +            \"FROM execution_flows ef, projects p \" +            \"WHERE ef.project_id = p.id \" +            \"AND ef.project_id IN \" + projectIdsStr;    try {      ResultSetHandler<Integer> handler = rs -> rs.next()? rs.getInt(1): 0;      return this.dbOperator.query(querySQL, handler);    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching num executions\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionRecoverDao.java", "stars": "18", "class": {"name": "ExecutionRecoverDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getExecHistoryQuickSerachTotal", "params": ["Map<String,String>"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getExecHistoryQuickSerachTotal(final Map<String, String> filterMap)      throws ExecutorManagerException {    final IntHandler intHandler = new IntHandler();    final List<Object> params = new ArrayList<>();    String historyTotalSql = \"SELECT COUNT(1) FROM execution_flows ef JOIN projects p ON ef.project_id = p.id\";    boolean first = true;    //\u641c\u7d22flow\u540d\u5b57\u7c7b\u4f3c\u7684\u6267\u884c\u5386\u53f2\u6570\u636e\u6761\u6570    if (null != filterMap.get(\"flowContains\")) {      if (first) {        historyTotalSql += \" WHERE \";        first = false;      } else {        historyTotalSql += \" AND \";      }      historyTotalSql += \" (exec_id LIKE ? OR flow_id LIKE ? OR name LIKE ?) \";      params.add('%' + filterMap.get(\"flowContains\") + '%');      params.add('%' + filterMap.get(\"flowContains\") + '%');      params.add('%' + filterMap.get(\"flowContains\") + '%');      first = false;      if(null != filterMap.get(\"flowUser\")){        historyTotalSql += \" AND submit_user = ?\";        params.add(filterMap.get(\"flowUser\"));        first = false;      }    }    try {      return this.dbOperator.query(historyTotalSql, intHandler, params.toArray());    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching num executions\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionRecoverDao.java", "stars": "18", "class": {"name": "ExecutionRecoverDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMaintainedFlowsQuickSearchTotal", "params": ["String", "Map<String,String>", "List<Integer>"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getMaintainedFlowsQuickSearchTotal(String username, final Map<String, String> filterMap, List<Integer> projectIds)          throws ExecutorManagerException {    final IntHandler intHandler = new IntHandler();    final List<Object> params = new ArrayList<>();    String projectIdsStr = projectIds.stream()            .map(Object::toString)            .collect(joining(\",\", \"(\", \")\"));    String historyTotalSql = \"SELECT COUNT(1) FROM execution_flows ef, projects p \"            + \"WHERE ef.project_id = p.id \"            + \"AND ef.project_id IN \" + projectIdsStr + \" \";    boolean first = false;    //\u641c\u7d22flow\u540d\u5b57\u7c7b\u4f3c\u7684\u6267\u884c\u5386\u53f2\u6570\u636e\u6761\u6570    if (null != filterMap.get(\"flowContains\")) {      if (first) {        historyTotalSql += \" WHERE \";        first = false;      } else {        historyTotalSql += \" AND \";      }      historyTotalSql += \" (ef.exec_id LIKE ? OR ef.flow_id LIKE ? OR p.name LIKE ?) \";      params.add('%' + filterMap.get(\"flowContains\") + '%');      params.add('%' + filterMap.get(\"flowContains\") + '%');      params.add('%' + filterMap.get(\"flowContains\") + '%');      first = false;      if(null != filterMap.get(\"flowUser\")){        historyTotalSql += \" AND submit_user = ?\";        params.add(filterMap.get(\"flowUser\"));        first = false;      }    }    try {      return this.dbOperator.query(historyTotalSql, intHandler, params.toArray());    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching num executions\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionRecoverDao.java", "stars": "18", "class": {"name": "ExecutionRecoverDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUserExecHistoryTotal", "params": ["Map<String,String>"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getUserExecHistoryTotal(final Map<String, String> filterMap)      throws ExecutorManagerException {    final IntHandler intHandler = new IntHandler();    final List<Object> params = new ArrayList<>();    StringBuilder historyTotalSql = new StringBuilder( \"SELECT COUNT(1) FROM execution_flows ef, projects p, project_permissions pp \"            + \"WHERE ef.project_id = p.id AND ef.project_id = pp.project_id \"            + \"AND pp.name=? \");    params.add(filterMap.get(\"userName\"));    boolean first = false;    //\u641c\u7d22\u6240\u6709\u7684\u6267\u884c\u5386\u53f2\u6570\u636e\u6761\u6570    if (null != filterMap.get(\"userContains\")) {      wrapperSqlParam(first,filterMap,\"userContains\", null,\"submit_user\", \"=\",historyTotalSql,params);    }    //\u641c\u7d22flow\u540d\u5b57\u7c7b\u4f3c\u7684\u6267\u884c\u5386\u53f2\u6570\u636e\u6761\u6570    if (null != filterMap.get(\"flowContains\")) {      wrapperSqlParam(first, filterMap, \"flowContains\", null,\"flow_id\", \"like\", historyTotalSql, params);      if(null != filterMap.get(\"userName\")){        wrapperSqlParam(first, filterMap, \"userName\", null,\"submit_user\", \"=\", historyTotalSql, params);      }    }    //\u641c\u7d22execId\u7c7b\u4f3c\u7684\u6267\u884c\u5386\u53f2\u6570\u636e\u6761\u6570    if (null != filterMap.get(\"execIdContain\")) {      wrapperSqlParam(first, filterMap, \"execIdContain\", null,\"exec_id\", \"like\", historyTotalSql, params);      if(null != filterMap.get(\"userName\")){        wrapperSqlParam(first, filterMap, \"userName\", null,\"submit_user\", \"=\", historyTotalSql, params);      }    }    //\u6309\u7167\u8fc7\u6ee4\u6761\u4ef6\u641c\u7d22\u6267\u884c\u5386\u53f2\u6570\u636e\u6761\u6570    if (null != filterMap.get(\"filterContains\")) {      if (filterMap.get(\"projContain\") != null && !filterMap.get(\"projContain\").isEmpty()) {        wrapperSqlParam(first, filterMap, \"projContain\", null,\"p.name\", \"like\", historyTotalSql, params);      }      // todo kunkun-tang: we don't need the below complicated logics. We should just use a simple way.      if (filterMap.get(\"flowContain\") != null && !filterMap.get(\"flowContain\").isEmpty()) {        wrapperSqlParam(first, filterMap, \"flowContain\", null,\"flow_id\", \"like\", historyTotalSql, params);      }      if (Integer.valueOf(filterMap.get(\"status\")) != 0) {        wrapperSqlParam(first, filterMap, \"status\", \"int\",\"status\", \"=\", historyTotalSql, params);      }      if (!\"-1\".equals(filterMap.get(\"beginTime\"))) {        wrapperSqlParam(first, filterMap, \"beginTime\", \"long\", \"start_time\", \">\", historyTotalSql, params);      }      if (!\"-1\".equals(filterMap.get(\"endTime\"))) {        wrapperSqlParam(first, filterMap, \"endTime\", \"long\",\"end_time\", \"<\", historyTotalSql, params);      }      if(null != filterMap.get(\"userContain\") && !filterMap.get(\"userContain\").isEmpty()){        wrapperSqlParam(first, filterMap, \"userContain\", null,\"submit_user\", \"like\", historyTotalSql, params);      }      if (!\"-1\".equals(filterMap.get(\"flowType\"))) {        wrapperSqlParam(first, filterMap, \"flowType\", \"int\",\"flow_type\", \"=\", historyTotalSql, params);      }    }    try {      return this.dbOperator.query(historyTotalSql.toString(), intHandler, params.toArray());    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching num executions\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionRecoverDao.java", "stars": "18", "class": {"name": "ExecutionRecoverDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "wrapperSqlParam", "params": ["boolean", "Map<String,String>", "String", "String", "String", "String", "StringBuilder", "List<Object>"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "  private boolean wrapperSqlParam(boolean firstParam, Map<String, String> filterMap, String param, String parseType, String dbColumnName,                               String action, StringBuilder querySql, List<Object> params) {      if (firstParam) {        querySql.append(\" WHERE \");        firstParam = false;      } else {        querySql.append(\" AND \");      }      querySql.append(\" \").append(dbColumnName).append(\" \").append(action).append(\" ?\");      if (action.equalsIgnoreCase(\"like\")) {        params.add('%' + filterMap.get(param) + '%');      } else {        // \u5224\u65ad\u662f\u5426\u9700\u8981\u8f6c\u6362\u7c7b\u578b        if (parseType == null) {          params.add(filterMap.get(param));          // \u9700\u8981\u8f6c\u6362\u4e3aint\u7c7b\u578b        } else if (\"int\".equalsIgnoreCase(parseType)) {          params.add(Integer.valueOf(filterMap.get(param)));        } else if (\"long\".equalsIgnoreCase(parseType)) {          params.add(Long.valueOf(filterMap.get(param)));        }      }    return firstParam;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionRecoverDao.java", "stars": "18", "class": {"name": "ExecutionRecoverDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getUserExecHistoryQuickSerachTotal", "params": ["Map<String,String>"], "throws": ["ExecutorManagerException"], "modifiers": ["public"], "return_type": "int", "snippet": "  public int getUserExecHistoryQuickSerachTotal(final Map<String, String> filterMap)      throws ExecutorManagerException {    final IntHandler intHandler = new IntHandler();    final List<Object> params = new ArrayList<>();    String historyTotalSql = \"SELECT COUNT(1) FROM execution_flows ef, projects p, project_permissions pp \"        + \"WHERE ef.project_id = p.id AND ef.project_id = pp.project_id \"        + \"AND pp.name=? \";    params.add(filterMap.get(\"userName\"));    boolean first = false;    //\u641c\u7d22flow\u540d\u5b57\u7c7b\u4f3c\u7684\u6267\u884c\u5386\u53f2\u6570\u636e\u6761\u6570    if (null != filterMap.get(\"flowContains\")) {      if (first) {        historyTotalSql += \" WHERE \";        first = false;      } else {        historyTotalSql += \" AND \";      }      historyTotalSql += \" (ef.exec_id LIKE ? OR ef.flow_id LIKE ? OR p.name LIKE ?) \";      params.add('%' + filterMap.get(\"flowContains\") + '%');      params.add('%' + filterMap.get(\"flowContains\") + '%');      params.add('%' + filterMap.get(\"flowContains\") + '%');      first = false;      if(null != filterMap.get(\"flowUser\")){        historyTotalSql += \" AND submit_user = ?\";        params.add(filterMap.get(\"flowUser\"));        first = false;      }    }    try {      return this.dbOperator.query(historyTotalSql, intHandler, params.toArray());    } catch (final SQLException e) {      throw new ExecutorManagerException(\"Error fetching num executions\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionRecoverDao.java", "stars": "18", "class": {"name": "ExecutionRecoverDao", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "List<ExecutionRecover>", "snippet": "    public List<ExecutionRecover> handle(final ResultSet rs) throws SQLException {      if (!rs.next()) {        return Collections.emptyList();      }      final List<ExecutionRecover> execFlows = new ArrayList<>();      do {        final int id = rs.getInt(1);        final int status = rs.getInt(2);        final int encodingType = rs.getInt(3);        final byte[] data = rs.getBytes(4);        if (data != null) {          final EncodingType encType = EncodingType.fromInteger(encodingType);          final Object flowObj;          /**           * The below code is a duplicate against many places, like azkaban.database.EncodingType           * TODO kunkun-tang: Extract these duplicates to a single static method.           */          try {            // Convoluted way to inflate strings. Should find common package            // or helper function.            if (encType == EncodingType.GZIP) {              // Decompress the sucker.              final String jsonString = GZIPUtils.unGzipString(data, \"UTF-8\");              flowObj = JSONUtils.parseJSONFromString(jsonString);            } else {              final String jsonString = new String(data, \"UTF-8\");              flowObj = JSONUtils.parseJSONFromString(jsonString);            }            final ExecutionRecover exFlow =                ExecutionRecover.createExecutionRecoverFromObject(flowObj);            exFlow.setRecoverStatus(Status.fromInteger(status));            execFlows.add(exFlow);          } catch (final IOException e) {            throw new SQLException(\"Error retrieving History Recover data \" + id, e);          }        }      } while (rs.next());      return execFlows;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionRecoverDao.java", "stars": "18", "class": {"name": "FetchExecutionRecoverFlows", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["public", "static"]}}, {"method_name": "handle", "params": ["ResultSet"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "Integer", "snippet": "    public Integer handle(final ResultSet rs) throws SQLException {      if (!rs.next()) {        return 0;      }      return rs.getInt(1);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/executor/ExecutionRecoverDao.java", "stars": "18", "class": {"name": "IntHandler", "extends": null, "implements": ["ResultSetHandler"], "modifiers": ["private", "static"]}}, {"method_name": "dataSource", "params": [], "throws": null, "modifiers": ["public"], "return_type": "DataSource", "snippet": "    public DataSource dataSource() {        log.info(\"Configuring JDBC datasource from a cloud provider\");        return connectionFactory().dataSource();    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/config/CloudDatabaseConfiguration.java", "stars": "2", "class": {"name": "CloudDatabaseConfiguration", "extends": "AbstractCloudConfig", "implements": null, "modifiers": ["public"]}}, {"method_name": "findbypage", "params": ["Model", "User", "String"], "throws": ["ServletException", "IOException"], "modifiers": ["public"], "return_type": "String", "snippet": "    public String findbypage(Model model,User user,String currentPage) throws ServletException, IOException {        if (currentPage==null){            currentPage=\"1\";        }        PageBean pb = userService.findbypage(user,Integer.parseInt(currentPage));        model.addAttribute(\"pb\",pb );        return \"list\";    }", "url": "https://raw.githubusercontent.com/984964551/JavassmDemo/master/src/main/java/wac/controlleer/UsersController.java", "stars": "2", "class": {"name": "UsersController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteuser", "params": ["int", "HttpServletRequest", "HttpServletResponse"], "throws": ["ServletException", "IOException"], "modifiers": ["public"], "return_type": "String", "snippet": "    public String deleteuser(int id,HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {        userService.deleteuser(id);       response.sendRedirect(\"/user/findbypage\");        return \"list\";    }", "url": "https://raw.githubusercontent.com/984964551/JavassmDemo/master/src/main/java/wac/controlleer/UsersController.java", "stars": "2", "class": {"name": "UsersController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "findusertoupdate", "params": ["int", "HttpServletRequest", "HttpServletResponse", "Model"], "throws": ["ServletException", "IOException"], "modifiers": ["public"], "return_type": "String", "snippet": "    public String findusertoupdate(int id,HttpServletRequest request,HttpServletResponse response,Model model) throws ServletException, IOException {        User user = userService.findbyid(id);        model.addAttribute(\"user\",user );        return \"update\";    }", "url": "https://raw.githubusercontent.com/984964551/JavassmDemo/master/src/main/java/wac/controlleer/UsersController.java", "stars": "2", "class": {"name": "UsersController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateuser", "params": ["User", "HttpServletRequest", "HttpServletResponse", "Model"], "throws": ["ServletException", "IOException"], "modifiers": ["public"], "return_type": "String", "snippet": "    public String updateuser(User user,HttpServletRequest request,HttpServletResponse response,Model model) throws ServletException, IOException {        userService.updateuser(user);//        response.sendRedirect(\"/user/findbypage\");        //\u8bf7\u6c42\u8f6c\u53d1\u8fd4\u56de\u4fee\u6539\u7684\u53c2\u6570\u5217\u8868//        return \"forward:/user/findbypage\";        //\u91cd\u5b9a\u5411\u8fd4\u56de\u5b8c\u6574\u7684\u53c2\u6570\u5217\u8868        return \"redirect:/user/findbypage\" ;    }", "url": "https://raw.githubusercontent.com/984964551/JavassmDemo/master/src/main/java/wac/controlleer/UsersController.java", "stars": "2", "class": {"name": "UsersController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "insertuser", "params": ["User", "HttpServletRequest", "HttpServletResponse", "Model"], "throws": ["ServletException", "IOException"], "modifiers": ["public"], "return_type": "String", "snippet": "    public String insertuser(User user,HttpServletRequest request,HttpServletResponse response,Model model) throws ServletException, IOException {        userService.insertuser(user);//        response.sendRedirect(\"/user/findbypage\");        return \"redirect:/user/findbypage\" ;    }", "url": "https://raw.githubusercontent.com/984964551/JavassmDemo/master/src/main/java/wac/controlleer/UsersController.java", "stars": "2", "class": {"name": "UsersController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deleteselect", "params": ["HttpServletRequest", "HttpServletResponse"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void deleteselect(HttpServletRequest request,HttpServletResponse response){    }", "url": "https://raw.githubusercontent.com/984964551/JavassmDemo/master/src/main/java/wac/controlleer/UsersController.java", "stars": "2", "class": {"name": "UsersController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "handerException", "params": ["HttpServletRequest", "Exception"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object handerException(HttpServletRequest request, Exception ex) {        Map<String, Object> reponseData = new HashMap<>();        BusinessException businessException = null;        if (ex instanceof BusinessException) {            businessException = (BusinessException) ex;        } else {            businessException = new BusinessException(EmBusinessError.UNKNOW_ERROR);            ex.printStackTrace();        }        reponseData.put(\"errCode\", businessException.getErrCode());        reponseData.put(\"errMsg\", businessException.getErrMsg());        return CommonReturnType.createFail(reponseData);    }", "url": "https://raw.githubusercontent.com/ryewen/quickbuy/master/src/main/java/com/loststars/quickbuy/controller/BaseController.java", "stars": "1", "class": {"name": "BaseController", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tint sum = 0;\t\tint m = 20;\t\tint n = 100;\t\t// FIXME: \u4f7f\u7528while\u8ba1\u7b97M+...+N:\t\twhile (m<=n) {//\u6ee1\u8db3\u6761\u4ef6 \u8fdb\u5165\u5faa\u73af \u5148\u5224\u65ad \u540e\u6267\u884c\t\t\tsum = sum + m;\t\t\tm++;\t\t}\t\tSystem.out.println(sum);\t}", "url": "https://raw.githubusercontent.com/IzzyPrime/JavaWorkspace/master/JavaPractice/part1/src/com/flow/javapractice/FlowWhile.java", "stars": "2", "class": {"name": "FlowWhile", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUp", "params": [], "throws": ["Exception"], "modifiers": ["static"], "return_type": "void", "snippet": "  static void setUp() throws Exception {    // create a SqlSessionFactory    try (Reader reader = Resources.getResourceAsReader(\"org/apache/ibatis/submitted/foreach/mybatis-config.xml\")) {      sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);    }    // populate in-memory database    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/foreach/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/foreach/ForEachTest.java", "stars": "15", "class": {"name": "ForEachTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldGetAUser", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldGetAUser() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User testProfile = new User();      testProfile.setId(2);      User friendProfile = new User();      friendProfile.setId(6);      List<User> friendList = new ArrayList<>();      friendList.add(friendProfile);      testProfile.setFriendList(friendList);      User user = mapper.getUser(testProfile);      Assertions.assertEquals(\"User6\", user.getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/foreach/ForEachTest.java", "stars": "15", "class": {"name": "ForEachTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldHandleComplexNullItem", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldHandleComplexNullItem() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user1 = new User();      user1.setId(2);      user1.setName(\"User2\");      List<User> users = new ArrayList<>();      users.add(user1);      users.add(null);      int count = mapper.countByUserList(users);      Assertions.assertEquals(1, count);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/foreach/ForEachTest.java", "stars": "15", "class": {"name": "ForEachTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldHandleMoreComplexNullItem", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldHandleMoreComplexNullItem() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user1 = new User();      User bestFriend = new User();      bestFriend.setId(5);      user1.setBestFriend(bestFriend);      List<User> users = new ArrayList<>();      users.add(user1);      users.add(null);      int count = mapper.countByBestFriend(users);      Assertions.assertEquals(1, count);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/foreach/ForEachTest.java", "stars": "15", "class": {"name": "ForEachTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "nullItemInContext", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void nullItemInContext() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      User user1 = new User();      user1.setId(3);      List<User> users = new ArrayList<>();      users.add(user1);      users.add(null);      String name = mapper.selectWithNullItemCheck(users);      Assertions.assertEquals(\"User3\", name);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/foreach/ForEachTest.java", "stars": "15", "class": {"name": "ForEachTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldReportMissingPropertyName", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldReportMissingPropertyName() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      when(() -> mapper.typoInItemProperty(Collections.singletonList(new User())));      then(caughtException()).isInstanceOf(PersistenceException.class)        .hasMessageContaining(\"There is no getter for property named 'idd' in 'class org.apache.ibatis.submitted.foreach.User'\");    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/foreach/ForEachTest.java", "stars": "15", "class": {"name": "ForEachTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldRemoveItemVariableInTheContext", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldRemoveItemVariableInTheContext() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      int result = mapper.itemVariableConflict(5, Arrays.asList(1, 2), Arrays.asList(3, 4));      Assertions.assertEquals(5, result);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/foreach/ForEachTest.java", "stars": "15", "class": {"name": "ForEachTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "shouldRemoveIndexVariableInTheContext", "params": [], "throws": null, "modifiers": [], "return_type": "void", "snippet": "  void shouldRemoveIndexVariableInTheContext() {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      Mapper mapper = sqlSession.getMapper(Mapper.class);      int result = mapper.indexVariableConflict(4, Arrays.asList(6, 7), Arrays.asList(8, 9));      Assertions.assertEquals(4, result);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/foreach/ForEachTest.java", "stars": "15", "class": {"name": "ForEachTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getStart", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getStart() {        return start;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Auxiliary/Instantiable/Data/Math/Range.java", "stars": "2", "class": {"name": "Range", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getEnd", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getEnd() {        return end;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Auxiliary/Instantiable/Data/Math/Range.java", "stars": "2", "class": {"name": "Range", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMid", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getMid() {        return (start + end) / 2.0f;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Auxiliary/Instantiable/Data/Math/Range.java", "stars": "2", "class": {"name": "Range", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "clamp", "params": ["float"], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float clamp(float num) {        if (num > end)            return end;        return Math.max(num, start);    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Auxiliary/Instantiable/Data/Math/Range.java", "stars": "2", "class": {"name": "Range", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "in", "params": ["double"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean in(double check) {        return start <= check && check <= end;    }", "url": "https://raw.githubusercontent.com/Prunoideae/PhasePotion/master/src/main/java/com/naive/phase/Auxiliary/Instantiable/Data/Math/Range.java", "stars": "2", "class": {"name": "Range", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "shouldSetParameter", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldSetParameter() throws Exception {    TYPE_HANDLER.setParameter(ps, 1, SQL_TIME, null);    verify(ps).setTimestamp(1, SQL_TIME);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/SqlTimetampTypeHandlerTest.java", "stars": "15", "class": {"name": "SqlTimetampTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByName() throws Exception {    when(rs.getTimestamp(\"column\")).thenReturn(SQL_TIME);    assertEquals(SQL_TIME, TYPE_HANDLER.getResult(rs, \"column\"));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/SqlTimetampTypeHandlerTest.java", "stars": "15", "class": {"name": "SqlTimetampTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByName", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByName() throws Exception {    // Unnecessary  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/SqlTimetampTypeHandlerTest.java", "stars": "15", "class": {"name": "SqlTimetampTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromResultSetByPosition() throws Exception {    when(rs.getTimestamp(1)).thenReturn(SQL_TIME);    assertEquals(SQL_TIME, TYPE_HANDLER.getResult(rs, 1));    verify(rs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/SqlTimetampTypeHandlerTest.java", "stars": "15", "class": {"name": "SqlTimetampTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromResultSetByPosition", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromResultSetByPosition() throws Exception {    // Unnecessary  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/SqlTimetampTypeHandlerTest.java", "stars": "15", "class": {"name": "SqlTimetampTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultFromCallableStatement() throws Exception {    when(cs.getTimestamp(1)).thenReturn(SQL_TIME);    assertEquals(SQL_TIME, TYPE_HANDLER.getResult(cs, 1));    verify(cs, never()).wasNull();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/SqlTimetampTypeHandlerTest.java", "stars": "15", "class": {"name": "SqlTimetampTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "shouldGetResultNullFromCallableStatement", "params": [], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void shouldGetResultNullFromCallableStatement() throws Exception {    // Unnecessary  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/type/SqlTimetampTypeHandlerTest.java", "stars": "15", "class": {"name": "SqlTimetampTypeHandlerTest", "extends": "BaseTypeHandlerTest", "implements": null, "modifiers": []}}, {"method_name": "destroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void destroy() {\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/web/security/AccessControlFilter.java", "stars": "2", "class": {"name": "AccessControlFilter", "extends": null, "implements": ["Filter"], "modifiers": ["public"]}}, {"method_name": "doFilter", "params": ["ServletRequest", "ServletResponse", "FilterChain"], "throws": ["IOException", "ServletException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void doFilter(ServletRequest request, ServletResponse response,\tFilterChain chain) throws IOException, ServletException {            HttpServletRequest req = (HttpServletRequest) request;            HttpServletResponse res = (HttpServletResponse) response;            RequestDispatcher rd;            HttpSession session = req.getSession();            if (session == null || session.getAttribute(\"usuario\") == null){                                //redirecionamento para pagina de aviso de sess\u00e3o expirada                String paginaDeAviso = \"/WEB-INF/session.jsp\";                rd = request.getRequestDispatcher(paginaDeAviso);                  rd.forward(request, response);                             }            else{                                chain.doFilter(req, res);                            }\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/web/security/AccessControlFilter.java", "stars": "2", "class": {"name": "AccessControlFilter", "extends": null, "implements": ["Filter"], "modifiers": ["public"]}}, {"method_name": "getUrlBase", "params": ["HttpServletRequest"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\tpublic String getUrlBase(HttpServletRequest req) {            String nomeAplic = req.getContextPath();            String url = req.getRequestURL()+\"\";            String urlSufixo = url.substring(url.indexOf(nomeAplic));            return url.replace(urlSufixo, \"\")+nomeAplic;\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/web/security/AccessControlFilter.java", "stars": "2", "class": {"name": "AccessControlFilter", "extends": null, "implements": ["Filter"], "modifiers": ["public"]}}, {"method_name": "init", "params": ["FilterConfig"], "throws": ["ServletException"], "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void init(FilterConfig fConfig) throws ServletException {\t}", "url": "https://raw.githubusercontent.com/marcoseduardoss/mini-mvc/master/demos/001-crud-books-mvc-servlets-jstl-jpa/src/main/java/br/me/crudbooks/web/security/AccessControlFilter.java", "stars": "2", "class": {"name": "AccessControlFilter", "extends": null, "implements": ["Filter"], "modifiers": ["public"]}}, {"method_name": "copyFileUsingFileChannels", "params": ["File", "File"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void copyFileUsingFileChannels(File source, File dest) throws IOException {        FileChannel inputChannel = null;        FileChannel outputChannel = null;        try {            inputChannel = new FileInputStream(source).getChannel();            outputChannel = new FileOutputStream(dest).getChannel();            outputChannel.transferFrom(inputChannel, 0, inputChannel.size());        } finally {            assert inputChannel != null;            inputChannel.close();            assert outputChannel != null;            outputChannel.close();        }    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Tools.java", "stars": "2", "class": {"name": "Tools", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "rand", "params": ["int", "int"], "throws": null, "modifiers": ["public", "static"], "return_type": "int", "snippet": "    public static int rand(int min, int max) {        return random.nextInt(max) % (max - min + 1) + min;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Tools.java", "stars": "2", "class": {"name": "Tools", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "flowAutoShow", "params": ["double"], "throws": null, "modifiers": ["public", "static"], "return_type": "String", "snippet": "\tpublic static String flowAutoShow(double value) {\t\t// Math.round \u65b9\u6cd5\u63a5\u6536 float \u548c double \u7c7b\u578b,\u5982\u679c\u53c2\u6570\u662f int \u7684\u8bdd,\u4f1a\u5f3a\u8f6c\u4e3a float,\u8fd9\u4e2a\u65f6\u5019\u8c03\u7528\u8be5\u65b9\u6cd5\u65e0\u610f\u4e49        int kb = 1024;        int mb = 1048576;        int gb = 1073741824;\t\tdouble abs = Math.abs(value);\t\tif (abs > gb) {            return Math.round(value / gb) + \"GB\";\t\t} else if (abs > mb) {            return Math.round(value / mb) + \"MB\";\t\t} else if (abs > kb) {            return Math.round(value / kb) + \"KB\";        }        return Math.round(value) + \"\";    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Tools.java", "stars": "2", "class": {"name": "Tools", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "enAes", "params": ["String", "String"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String enAes(String data, String key) throws Exception {        Cipher cipher = Cipher.getInstance(\"AES\");        SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(\"UTF-8\"), \"AES\");        cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);        byte[] encryptedBytes = cipher.doFinal(data.getBytes());        return new BASE64Encoder().encode(encryptedBytes);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Tools.java", "stars": "2", "class": {"name": "Tools", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "deAes", "params": ["String", "String"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "String", "snippet": "    public static String deAes(String data, String key) throws Exception {        Cipher cipher = Cipher.getInstance(\"AES\");        SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(\"UTF-8\"), \"AES\");        cipher.init(Cipher.DECRYPT_MODE, secretKeySpec);        byte[] cipherTextBytes = new BASE64Decoder().decodeBuffer(data);        byte[] decValue = cipher.doFinal(cipherTextBytes);        return new String(decValue);    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Tools.java", "stars": "2", "class": {"name": "Tools", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isNumber", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isNumber(String str) {        // Pattern pattern=Pattern.compile(\"[0-9]*\");        // return pattern.matcher(str).matches();        if (null != str && 0 != str.trim().length() && str.matches(\"\\\\d*\")) {            return true;        }        return false;    }", "url": "https://raw.githubusercontent.com/chenval/my-site/master/src/main/java/cn/blog/utils/Tools.java", "stars": "2", "class": {"name": "Tools", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onDestroy", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onDestroy ()\t{\t\tn_onDestroy ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellItemRendererBase.java", "stars": "2", "class": {"name": "ShellItemRendererBase", "extends": "android", "implements": ["mono"], "modifiers": ["public", "abstract"]}}, {"method_name": "n_onDestroy", "params": [], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onDestroy ();\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellItemRendererBase.java", "stars": "2", "class": {"name": "ShellItemRendererBase", "extends": "android", "implements": ["mono"], "modifiers": ["public", "abstract"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellItemRendererBase.java", "stars": "2", "class": {"name": "ShellItemRendererBase", "extends": "android", "implements": ["mono"], "modifiers": ["public", "abstract"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellItemRendererBase.java", "stars": "2", "class": {"name": "ShellItemRendererBase", "extends": "android", "implements": ["mono"], "modifiers": ["public", "abstract"]}}, {"method_name": "getHeartBeatAvailInterval", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getHeartBeatAvailInterval(){        return heartBeatAvailInterval;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/route/MachineLoadConf.java", "stars": "23", "class": {"name": "MachineLoadConf", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCpuWeight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCpuWeight(){        return cpuWeight;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/route/MachineLoadConf.java", "stars": "23", "class": {"name": "MachineLoadConf", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMemWeight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getMemWeight(){        return memWeight;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/route/MachineLoadConf.java", "stars": "23", "class": {"name": "MachineLoadConf", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCpuThreshold", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "    public double getCpuThreshold() {        return cpuThreshold;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/route/MachineLoadConf.java", "stars": "23", "class": {"name": "MachineLoadConf", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCpuThreshold", "params": ["double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCpuThreshold(double cpuThreshold) {        this.cpuThreshold = cpuThreshold;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/route/MachineLoadConf.java", "stars": "23", "class": {"name": "MachineLoadConf", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMemThreshold", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "    public double getMemThreshold() {        return memThreshold;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/route/MachineLoadConf.java", "stars": "23", "class": {"name": "MachineLoadConf", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMemThreshold", "params": ["double"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMemThreshold(double memThreshold) {        this.memThreshold = memThreshold;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/route/MachineLoadConf.java", "stars": "23", "class": {"name": "MachineLoadConf", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getValueType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getValueType() {        return valueType;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/model/VideoOptionModel.java", "stars": "2", "class": {"name": "VideoOptionModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setValueType", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setValueType(int valueType) {        this.valueType = valueType;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/model/VideoOptionModel.java", "stars": "2", "class": {"name": "VideoOptionModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCategory", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCategory() {        return category;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/model/VideoOptionModel.java", "stars": "2", "class": {"name": "VideoOptionModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCategory", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setCategory(int category) {        this.category = category;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/model/VideoOptionModel.java", "stars": "2", "class": {"name": "VideoOptionModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getValueInt", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getValueInt() {        return valueInt;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/model/VideoOptionModel.java", "stars": "2", "class": {"name": "VideoOptionModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setValueInt", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setValueInt(int valueInt) {        this.valueInt = valueInt;        valueType = VALUE_TYPE_INT;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/model/VideoOptionModel.java", "stars": "2", "class": {"name": "VideoOptionModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/model/VideoOptionModel.java", "stars": "2", "class": {"name": "VideoOptionModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/model/VideoOptionModel.java", "stars": "2", "class": {"name": "VideoOptionModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getValueString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getValueString() {        return valueString;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/model/VideoOptionModel.java", "stars": "2", "class": {"name": "VideoOptionModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setValueString", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setValueString(String valueString) {        this.valueString = valueString;        valueType = VALUE_TYPE_STRING;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/model/VideoOptionModel.java", "stars": "2", "class": {"name": "VideoOptionModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCheckerLoader", "params": ["CheckerTypeLoader"], "throws": null, "modifiers": ["synchronized", "public", "static"], "return_type": "void", "snippet": "  public synchronized static void setCheckerLoader(final CheckerTypeLoader loader) {    Condition.checkerLoader = loader;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/Condition.java", "stars": "18", "class": {"name": "Condition", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "fromJson", "params": ["Object"], "throws": ["Exception"], "modifiers": ["public", "static"], "return_type": "Condition", "snippet": "  public static Condition fromJson(final Object obj) throws Exception {    if (checkerLoader == null) {      throw new Exception(\"Condition Checker loader not initialized!\");    }    final Map<String, Object> jsonObj = (HashMap<String, Object>) obj;    Condition cond = null;    try {      final Map<String, ConditionChecker> checkers =          new HashMap<>();      final List<Object> checkersJson = (List<Object>) jsonObj.get(\"checkers\");      for (final Object oneCheckerJson : checkersJson) {        final Map<String, Object> oneChecker =            (HashMap<String, Object>) oneCheckerJson;        final String type = (String) oneChecker.get(\"type\");        final ConditionChecker ck =            checkerLoader.createCheckerFromJson(type,                oneChecker.get(\"checkerJson\"));        checkers.put(ck.getId(), ck);      }      final String expr = (String) jsonObj.get(\"expression\");      final Long nextCheckTime = Long.valueOf((String) jsonObj.get(\"nextCheckTime\"));      cond = new Condition(checkers, expr, nextCheckTime);    } catch (final Exception e) {      e.printStackTrace();      logger.error(\"Failed to recreate condition from json.\", e);      throw new Exception(\"Failed to recreate condition from json.\", e);    }    return cond;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/Condition.java", "stars": "18", "class": {"name": "Condition", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNextCheckTime", "params": [], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "  public long getNextCheckTime() {    return this.nextCheckTime;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/Condition.java", "stars": "18", "class": {"name": "Condition", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getCheckers", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Map<String,ConditionChecker>", "snippet": "  public Map<String, ConditionChecker> getCheckers() {    return this.checkers;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/Condition.java", "stars": "18", "class": {"name": "Condition", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setCheckers", "params": ["Map<String,ConditionChecker>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void setCheckers(final Map<String, ConditionChecker> checkers) {    this.checkers = checkers;    for (final ConditionChecker checker : checkers.values()) {      this.context.set(checker.getId(), checker);    }    updateNextCheckTime();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/Condition.java", "stars": "18", "class": {"name": "Condition", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "updateNextCheckTime", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void updateNextCheckTime() {    long time = Long.MAX_VALUE;    for (final ConditionChecker checker : this.checkers.values()) {      time = Math.min(time, checker.getNextCheckTime());    }    this.nextCheckTime = time;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/Condition.java", "stars": "18", "class": {"name": "Condition", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "resetCheckers", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void resetCheckers() {    for (final ConditionChecker checker : this.checkers.values()) {      checker.reset();    }    updateNextCheckTime();    logger.info(\"Done resetting checkers. The next check time will be \"        + new DateTime(this.nextCheckTime));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/Condition.java", "stars": "18", "class": {"name": "Condition", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getExpression", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getExpression() {    return this.expression.getExpression();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/Condition.java", "stars": "18", "class": {"name": "Condition", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setExpression", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setExpression(final String expr) {    this.expression = jexl.createExpression(expr);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/Condition.java", "stars": "18", "class": {"name": "Condition", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isMet", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isMet() {    if (logger.isDebugEnabled()) {      logger.debug(\"Testing condition \" + this.expression);    }    return this.expression.evaluate(this.context).equals(Boolean.TRUE);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/Condition.java", "stars": "18", "class": {"name": "Condition", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toJson", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object toJson() {    final Map<String, Object> jsonObj = new HashMap<>();    jsonObj.put(\"expression\", this.expression.getExpression());    final List<Object> checkersJson = new ArrayList<>();    for (final ConditionChecker checker : this.checkers.values()) {      final Map<String, Object> oneChecker = new HashMap<>();      oneChecker.put(\"type\", checker.getType());      oneChecker.put(\"checkerJson\", checker.toJson());      checkersJson.add(oneChecker);    }    jsonObj.put(\"checkers\", checkersJson);    jsonObj.put(\"nextCheckTime\", String.valueOf(this.nextCheckTime));    return jsonObj;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/trigger/Condition.java", "stars": "18", "class": {"name": "Condition", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run() {        //\u4f7f\u7528\u6b7b\u5faa\u73af\uff0c\u8ba9\u5356\u7968\u91cd\u590d\u6267\u884c        while (true) {            //2\u3001\u5728\u53ef\u80fd\u51fa\u73b0\u5b89\u5168\u95ee\u9898\u7684\u4ee3\u7801\u524d\u8c03\u7528Lock\u63a5\u53e3\u4e2d\u7684lock\u83b7\u53d6\u9501            l.lock();            //\u5148\u5224\u65ad\u7968\u662f\u5426\u5b58\u5728            if(ticket > 0){                try {                    Thread.sleep(10);                    System.out.println(Thread.currentThread().getName() + \"-->\u6b63\u5728\u5356\u7b2c\" + ticket + \"\u5f20\u7968\");                    ticket--;                } catch (InterruptedException e){                    e.printStackTrace();                }finally {                    //3\u3001\u5728\u53ef\u80fd\u51fa\u73b0\u5b89\u5168\u95ee\u9898\u7684\u4ee3\u7801\u540e\u8c03\u7528Lock\u63a5\u53e3\u4e2d\u7684unlock\u91ca\u653e\u9501                    l.unlock();                }            }        }    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/java2/Lock/Lockmpl.java", "stars": "2", "class": {"name": "Lockmpl", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        MobileButterApplication.getAppContext()                .getComponent()                .inject(this);        super.onCreate(savedInstanceState, R.layout.activity_terms);        setSupportActionBar(toolbar);        ToolbarUtils.updateToolbarHeight(this, toolbar);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/TermsActivity.java", "stars": "4", "class": {"name": "TermsActivity", "extends": "ButterBaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "acceptClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void acceptClick(View v) {        PrefUtils.save(this, TERMS_ACCEPTED, true);        Intent overviewIntent = new Intent(this, MainActivity.class);        startActivity(overviewIntent);        finish();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/TermsActivity.java", "stars": "4", "class": {"name": "TermsActivity", "extends": "ButterBaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "leaveClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void leaveClick(View v) {        finish();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/TermsActivity.java", "stars": "4", "class": {"name": "TermsActivity", "extends": "ButterBaseActivity", "implements": null, "modifiers": ["public"]}}, {"method_name": "channelActive", "params": ["ChannelHandlerContext"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void channelActive(ChannelHandlerContext ctx) throws Exception {        super.channelActive(ctx);        log.debug(\"{} active\", NettyUtil.getChannelName(ctx.channel()));    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/netty/tcp/NettyTcpHandler.java", "stars": "6", "class": {"name": "NettyTcpHandler", "extends": "SimpleChannelInboundHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "exceptionCaught", "params": ["ChannelHandlerContext", "Throwable"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {        log.error(\"{}\", NettyUtil.getChannelName(ctx.channel()), cause);        ctx.close();    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/netty/tcp/NettyTcpHandler.java", "stars": "6", "class": {"name": "NettyTcpHandler", "extends": "SimpleChannelInboundHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "channelRead0", "params": ["ChannelHandlerContext", "ProtocolBody"], "throws": ["Exception"], "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void channelRead0(ChannelHandlerContext channelHandlerContext, ProtocolBody basePackage) throws Exception {        PackageHandler<? extends ProtocolBody> handler = PackageHandlerProcessor.getHandler(basePackage.getClass());        AbstractProtocolBody abp = (AbstractProtocolBody) basePackage;        Channel channel = channelHandlerContext.channel();        log.debug(\"{}{}-{}\", NettyUtil.getChannelName(channel), abp.getPackTypeHexStr(), abp.getPackTypeDesc());        handler.process0(basePackage);    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/netty/tcp/NettyTcpHandler.java", "stars": "6", "class": {"name": "NettyTcpHandler", "extends": "SimpleChannelInboundHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "channelInactive", "params": ["ChannelHandlerContext"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void channelInactive(ChannelHandlerContext ctx) throws Exception {        super.channelInactive(ctx);        Channel channel = ctx.channel();        log.debug(\"{} inactive\", NettyUtil.getChannelName(channel));    }", "url": "https://raw.githubusercontent.com/taoroot/taoiot/master/src/main/java/com/github/taoroot/taoiot/netty/tcp/NettyTcpHandler.java", "stars": "6", "class": {"name": "NettyTcpHandler", "extends": "SimpleChannelInboundHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "onSubscribe", "params": ["Disposable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onSubscribe(Disposable d) {    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/rx/SimpleConsumer.java", "stars": "1", "class": {"name": "SimpleConsumer", "extends": null, "implements": ["Observer"], "modifiers": ["public", "abstract"]}}, {"method_name": "onNext", "params": ["T"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onNext(T it) {        accept(it);    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/rx/SimpleConsumer.java", "stars": "1", "class": {"name": "SimpleConsumer", "extends": null, "implements": ["Observer"], "modifiers": ["public", "abstract"]}}, {"method_name": "onError", "params": ["Throwable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onError(Throwable e) {    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/rx/SimpleConsumer.java", "stars": "1", "class": {"name": "SimpleConsumer", "extends": null, "implements": ["Observer"], "modifiers": ["public", "abstract"]}}, {"method_name": "onComplete", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onComplete() {    }", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/rx/SimpleConsumer.java", "stars": "1", "class": {"name": "SimpleConsumer", "extends": null, "implements": ["Observer"], "modifiers": ["public", "abstract"]}}, {"method_name": "accept", "params": ["T"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void accept(T it);}", "url": "https://raw.githubusercontent.com/pengfeigao/AgoraCallApi/master/call-plugin-api/src/main/java/com/basetools/net/rx/SimpleConsumer.java", "stars": "1", "class": {"name": "SimpleConsumer", "extends": null, "implements": ["Observer"], "modifiers": ["public", "abstract"]}}, {"method_name": "deploy", "params": ["Course"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void deploy(Course course) {        if(course.getVideo() != null && !\"\".equals(course.getVideo())){            System.out.println(course.getName() + \"\u542b\u6709\u89c6\u9891\uff0c\u89c6\u9891\u5ba1\u6838OK\");            if(approver != null){                approver.deploy(course);            }        }else{            System.out.println(course.getName() + \"\u4e0d\u542b\u6709\u89c6\u9891\uff0c\u89c6\u9891\u5ba1\u6838\u4e0d\u901a\u8fc7\");            return;        }    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/chainofresponsibility/VideoApprover.java", "stars": "2", "class": {"name": "VideoApprover", "extends": "Approver", "implements": null, "modifiers": ["public"]}}, {"method_name": "testGetPosition_first_character", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testGetPosition_first_character() {        Position position = sut.getPosition(0);        Assertions.assertEquals(new Position(0, 0), position);    }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/test/java/org/bsplines/languagetool_languageserver/DocumentPositionCalculatorTest.java", "stars": "3", "class": {"name": "DocumentPositionCalculatorTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testGetPosition_starts_with_newline", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testGetPosition_starts_with_newline() {        Position position = new DocumentPositionCalculator(\"\\nHi\").getPosition(1);        Assertions.assertEquals(new Position(1, 0), position);    }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/test/java/org/bsplines/languagetool_languageserver/DocumentPositionCalculatorTest.java", "stars": "3", "class": {"name": "DocumentPositionCalculatorTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testGetPosition_second_line_start", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testGetPosition_second_line_start() {        Position position = sut.getPosition(6);        Assertions.assertEquals(new Position(1, 0), position);    }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/test/java/org/bsplines/languagetool_languageserver/DocumentPositionCalculatorTest.java", "stars": "3", "class": {"name": "DocumentPositionCalculatorTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testGetPosition_second_line_second_character", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testGetPosition_second_line_second_character() {        Position position = sut.getPosition(7);        Assertions.assertEquals(new Position(1, 1), position);    }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/test/java/org/bsplines/languagetool_languageserver/DocumentPositionCalculatorTest.java", "stars": "3", "class": {"name": "DocumentPositionCalculatorTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testGetPosition_arbitrary_position", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void testGetPosition_arbitrary_position() {        Position position = sut.getPosition(12);        Assertions.assertEquals(new Position(1, 6), position);    }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/src/test/java/org/bsplines/languagetool_languageserver/DocumentPositionCalculatorTest.java", "stars": "3", "class": {"name": "DocumentPositionCalculatorTest", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onCreateView", "params": ["LayoutInflater", "ViewGroup", "Bundle"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "\t  public View onCreateView(LayoutInflater inflater, ViewGroup container,\t      Bundle savedInstanceState) {\t    View view = inflater.inflate(R.layout.fragment_rsslist_overview,\t        container, false);\t    Button button = (Button) view.findViewById(R.id.button1);\t    button.setOnClickListener(new View.OnClickListener() {\t      @Override\t      public void onClick(View v) {\t        updateDetail();\t      }\t    });\t    return view;\t  }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/HBfragment/src/com/example/hbfragment/MyListFragment.java", "stars": "74", "class": {"name": "MyListFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "onAttach", "params": ["Activity"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t    public void onAttach(Activity activity) {\t      super.onAttach(activity);\t      if (activity instanceof OnItemSelectedListener) {\t        listener = (OnItemSelectedListener) activity;\t      } else {\t        throw new ClassCastException(activity.toString()\t            + \" must implemenet MyListFragment.OnItemSelectedListener\");\t      }\t    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/HBfragment/src/com/example/hbfragment/MyListFragment.java", "stars": "74", "class": {"name": "MyListFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "updateDetail", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t  public void updateDetail() {\t    // Create fake data\t    //String newTime = String.valueOf(System.currentTimeMillis());\t  String newTime=getString(R.string.hi);\t\t  // Send data to Activity\t    listener.onRssItemSelected(newTime);\t  }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/HBfragment/src/com/example/hbfragment/MyListFragment.java", "stars": "74", "class": {"name": "MyListFragment", "extends": "Fragment", "implements": null, "modifiers": ["public"]}}, {"method_name": "getUrl", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getUrl() {        return url;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/model/SwitchVideoModel.java", "stars": "2", "class": {"name": "SwitchVideoModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setUrl", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setUrl(String url) {        this.url = url;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/model/SwitchVideoModel.java", "stars": "2", "class": {"name": "SwitchVideoModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/model/SwitchVideoModel.java", "stars": "2", "class": {"name": "SwitchVideoModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/model/SwitchVideoModel.java", "stars": "2", "class": {"name": "SwitchVideoModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return this.name;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/app/src/main/java/com/example/gsyvideoplayer/model/SwitchVideoModel.java", "stars": "2", "class": {"name": "SwitchVideoModel", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getId() {    return id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/blog/ImmutableAuthor.java", "stars": "15", "class": {"name": "ImmutableAuthor", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getUsername", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getUsername() {    return username;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/blog/ImmutableAuthor.java", "stars": "15", "class": {"name": "ImmutableAuthor", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getPassword", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getPassword() {    return password;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/blog/ImmutableAuthor.java", "stars": "15", "class": {"name": "ImmutableAuthor", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getEmail", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getEmail() {    return email;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/blog/ImmutableAuthor.java", "stars": "15", "class": {"name": "ImmutableAuthor", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getBio", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getBio() {    return bio;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/blog/ImmutableAuthor.java", "stars": "15", "class": {"name": "ImmutableAuthor", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "getFavouriteSection", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Section", "snippet": "  public Section getFavouriteSection() {    return favouriteSection;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/blog/ImmutableAuthor.java", "stars": "15", "class": {"name": "ImmutableAuthor", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean equals(Object o) {    if (this == o) return true;    if (!(o instanceof Author)) return false;    Author author = (Author) o;    if (id != author.id) return false;    if (bio != null ? !bio.equals(author.bio) : author.bio != null) return false;    if (email != null ? !email.equals(author.email) : author.email != null) return false;    if (password != null ? !password.equals(author.password) : author.password != null) return false;    if (username != null ? !username.equals(author.username) : author.username != null) return false;    if (favouriteSection != null ? !favouriteSection.equals(author.favouriteSection) : author.favouriteSection != null)      return false;    return true;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/blog/ImmutableAuthor.java", "stars": "15", "class": {"name": "ImmutableAuthor", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int hashCode() {    int result;    result = id;    result = 31 * result + (username != null ? username.hashCode() : 0);    result = 31 * result + (password != null ? password.hashCode() : 0);    result = 31 * result + (email != null ? email.hashCode() : 0);    result = 31 * result + (bio != null ? bio.hashCode() : 0);    result = 31 * result + (favouriteSection != null ? favouriteSection.hashCode() : 0);    return result;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/blog/ImmutableAuthor.java", "stars": "15", "class": {"name": "ImmutableAuthor", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    return id + \" \" + username + \" \" + password + \" \" + email;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/domain/blog/ImmutableAuthor.java", "stars": "15", "class": {"name": "ImmutableAuthor", "extends": null, "implements": ["Serializable"], "modifiers": ["public"]}}, {"method_name": "create", "params": ["Class<T>"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public <T> T create(Class<T> type) {        return create(type, null, null);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomObjectFactory.java", "stars": "15", "class": {"name": "CustomObjectFactory", "extends": null, "implements": ["ObjectFactory"], "modifiers": ["public"]}}, {"method_name": "create", "params": ["Class<T>", "List<Class>", "List<Object>"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public <T> T create(Class<T> type, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {        Class<?> classToCreate = resolveInterface(type);        @SuppressWarnings(\"unchecked\") // we know types are assignable        T created = (T) instantiateClass(classToCreate, constructorArgTypes, constructorArgs);        return created;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomObjectFactory.java", "stars": "15", "class": {"name": "CustomObjectFactory", "extends": null, "implements": ["ObjectFactory"], "modifiers": ["public"]}}, {"method_name": "instantiateClass", "params": ["Class<T>", "List<Class>", "List<Object>"], "throws": null, "modifiers": ["private"], "return_type": "T", "snippet": "    private <T> T instantiateClass(Class<T> type, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {        try {            Constructor<T> constructor;            if (constructorArgTypes == null || constructorArgs == null) {                constructor = type.getDeclaredConstructor();                if (!constructor.isAccessible()) {                    constructor.setAccessible(true);                }                return constructor.newInstance();            }            constructor = type.getDeclaredConstructor(constructorArgTypes.toArray(new Class[constructorArgTypes.size()]));            if (!constructor.isAccessible()) {                constructor.setAccessible(true);            }            return constructor.newInstance(constructorArgs.toArray(new Object[constructorArgs.size()]));        } catch (Exception e) {            StringBuilder argTypes = new StringBuilder();            if (constructorArgTypes != null) {                for (Class<?> argType : constructorArgTypes) {                    argTypes.append(argType.getSimpleName());                    argTypes.append(\",\");                }            }            StringBuilder argValues = new StringBuilder();            if (constructorArgs != null) {                for (Object argValue : constructorArgs) {                    argValues.append(String.valueOf(argValue));                    argValues.append(\",\");                }            }            throw new ReflectionException(\"Error instantiating \" + type + \" with invalid types (\" + argTypes + \") or values (\" + argValues + \"). Cause: \" + e, e);        }    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomObjectFactory.java", "stars": "15", "class": {"name": "CustomObjectFactory", "extends": null, "implements": ["ObjectFactory"], "modifiers": ["public"]}}, {"method_name": "resolveInterface", "params": ["Class<?>"], "throws": null, "modifiers": ["private"], "return_type": "Class<?>", "snippet": "    private Class<?> resolveInterface(Class<?> type) {        Class<?> classToCreate;        if (type == List.class || type == Collection.class) {            classToCreate = LinkedList.class;        } else if (type == Map.class) {            classToCreate = LinkedHashMap.class;        } else if (type == SortedSet.class) { // issue #510 Collections Support            classToCreate = TreeSet.class;        } else if (type == Set.class) {            classToCreate = HashSet.class;        } else {            classToCreate = type;        }        return classToCreate;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomObjectFactory.java", "stars": "15", "class": {"name": "CustomObjectFactory", "extends": null, "implements": ["ObjectFactory"], "modifiers": ["public"]}}, {"method_name": "isCollection", "params": ["Class<T>"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public <T> boolean isCollection(Class<T> type) {      return CustomCollection.class.isAssignableFrom(type);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomObjectFactory.java", "stars": "15", "class": {"name": "CustomObjectFactory", "extends": null, "implements": ["ObjectFactory"], "modifiers": ["public"]}}, {"method_name": "createArray", "params": ["Class<T>", "int"], "throws": null, "modifiers": ["public"], "return_type": "T", "snippet": "    public <T> T[] createArray(Class<T> type, int size) {      return (T[]) Array.newInstance(type, size);    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomObjectFactory.java", "stars": "15", "class": {"name": "CustomObjectFactory", "extends": null, "implements": ["ObjectFactory"], "modifiers": ["public"]}}, {"method_name": "furnaceFuelBurnTimeEvent", "params": ["FurnaceFuelBurnTimeEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void furnaceFuelBurnTimeEvent(FurnaceFuelBurnTimeEvent event) {\t\tif (event.getItemStack().getItem() == new ItemStack(SpruceTanBarkBlock.block, (int) (1)).getItem())\t\t\tevent.setBurnTime(1600);\t}", "url": "https://raw.githubusercontent.com/KarogathModdingStudios/Enhanced-Vanilla-1.15/master/src/main/java/com/karogath/enhancedvanilla/fuel/SpruceFuel.java", "stars": "2", "class": {"name": "SpruceFuel", "extends": "EnhancedVanillaElements", "implements": null, "modifiers": ["public"]}}, {"method_name": "getInstance", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "AudioRecorder", "snippet": "    public static AudioRecorder getInstance() {        return AudioRecorderHolder.instance;    }", "url": "https://raw.githubusercontent.com/dreamfish797/AudioRecorder/master/record/src/main/java/com/dreamfish/record/AudioRecorder.java", "stars": "2", "class": {"name": "AudioRecorder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createAudio", "params": ["String", "int", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void createAudio(String fileName, int audioSource, int sampleRateInHz, int channelConfig, int audioFormat) {        // \u83b7\u5f97\u7f13\u51b2\u533a\u5b57\u8282\u5927\u5c0f        bufferSizeInBytes = AudioRecord.getMinBufferSize(sampleRateInHz,                channelConfig, channelConfig);        audioRecord = new AudioRecord(audioSource, sampleRateInHz, channelConfig, audioFormat, bufferSizeInBytes);        this.fileName = fileName;    }", "url": "https://raw.githubusercontent.com/dreamfish797/AudioRecorder/master/record/src/main/java/com/dreamfish/record/AudioRecorder.java", "stars": "2", "class": {"name": "AudioRecorder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createDefaultAudio", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void createDefaultAudio(String fileName) {        // \u83b7\u5f97\u7f13\u51b2\u533a\u5b57\u8282\u5927\u5c0f        bufferSizeInBytes = AudioRecord.getMinBufferSize(AUDIO_SAMPLE_RATE,                AUDIO_CHANNEL, AUDIO_ENCODING);        audioRecord = new AudioRecord(AUDIO_INPUT, AUDIO_SAMPLE_RATE, AUDIO_CHANNEL, AUDIO_ENCODING, bufferSizeInBytes);        this.fileName = fileName;        status = Status.STATUS_READY;    }", "url": "https://raw.githubusercontent.com/dreamfish797/AudioRecorder/master/record/src/main/java/com/dreamfish/record/AudioRecorder.java", "stars": "2", "class": {"name": "AudioRecorder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "startRecord", "params": ["RecordStreamListener"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void startRecord(final RecordStreamListener listener) {        if (status == Status.STATUS_NO_READY || TextUtils.isEmpty(fileName)) {            throw new IllegalStateException(\"\u5f55\u97f3\u5c1a\u672a\u521d\u59cb\u5316,\u8bf7\u68c0\u67e5\u662f\u5426\u7981\u6b62\u4e86\u5f55\u97f3\u6743\u9650~\");        }        if (status == Status.STATUS_START) {            throw new IllegalStateException(\"\u6b63\u5728\u5f55\u97f3\");        }        Log.d(\"AudioRecorder\", \"===startRecord===\" + audioRecord.getState());        audioRecord.startRecording();        new Thread(new Runnable() {            @Override            public void run() {                writeDataTOFile(listener);            }        }).start();    }", "url": "https://raw.githubusercontent.com/dreamfish797/AudioRecorder/master/record/src/main/java/com/dreamfish/record/AudioRecorder.java", "stars": "2", "class": {"name": "AudioRecorder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pauseRecord", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void pauseRecord() {        Log.d(\"AudioRecorder\", \"===pauseRecord===\");        if (status != Status.STATUS_START) {            throw new IllegalStateException(\"\u6ca1\u6709\u5728\u5f55\u97f3\");        } else {            audioRecord.stop();            status = Status.STATUS_PAUSE;        }    }", "url": "https://raw.githubusercontent.com/dreamfish797/AudioRecorder/master/record/src/main/java/com/dreamfish/record/AudioRecorder.java", "stars": "2", "class": {"name": "AudioRecorder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "stopRecord", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void stopRecord() {        Log.d(\"AudioRecorder\", \"===stopRecord===\");        if (status == Status.STATUS_NO_READY || status == Status.STATUS_READY) {            throw new IllegalStateException(\"\u5f55\u97f3\u5c1a\u672a\u5f00\u59cb\");        } else {            audioRecord.stop();            status = Status.STATUS_STOP;            release();        }    }", "url": "https://raw.githubusercontent.com/dreamfish797/AudioRecorder/master/record/src/main/java/com/dreamfish/record/AudioRecorder.java", "stars": "2", "class": {"name": "AudioRecorder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "release", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void release() {        Log.d(\"AudioRecorder\", \"===release===\");        //\u5047\u5982\u6709\u6682\u505c\u5f55\u97f3        try {            if (filesName.size() > 0) {                List<String> filePaths = new ArrayList<>();                for (String fileName : filesName) {                    filePaths.add(FileUtil.getPcmFileAbsolutePath(fileName));                }                //\u6e05\u9664                filesName.clear();                //\u5c06\u591a\u4e2apcm\u6587\u4ef6\u8f6c\u5316\u4e3awav\u6587\u4ef6                mergePCMFilesToWAVFile(filePaths);            } else {                //\u8fd9\u91cc\u7531\u4e8e\u53ea\u8981\u5f55\u97f3\u8fc7filesName.size\u90fd\u4f1a\u5927\u4e8e0,\u6ca1\u5f55\u97f3\u65f6fileName\u4e3anull                //\u4f1a\u62a5\u7a7a\u6307\u9488 NullPointerException                // \u5c06\u5355\u4e2apcm\u6587\u4ef6\u8f6c\u5316\u4e3awav\u6587\u4ef6                //Log.d(\"AudioRecorder\", \"=====makePCMFileToWAVFile======\");                //makePCMFileToWAVFile();            }        } catch (IllegalStateException e) {            throw new IllegalStateException(e.getMessage());        }        if (audioRecord != null) {            audioRecord.release();            audioRecord = null;        }        status = Status.STATUS_NO_READY;    }", "url": "https://raw.githubusercontent.com/dreamfish797/AudioRecorder/master/record/src/main/java/com/dreamfish/record/AudioRecorder.java", "stars": "2", "class": {"name": "AudioRecorder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "canel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void canel() {        filesName.clear();        fileName = null;        if (audioRecord != null) {            audioRecord.release();            audioRecord = null;        }        status = Status.STATUS_NO_READY;    }", "url": "https://raw.githubusercontent.com/dreamfish797/AudioRecorder/master/record/src/main/java/com/dreamfish/record/AudioRecorder.java", "stars": "2", "class": {"name": "AudioRecorder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "writeDataTOFile", "params": ["RecordStreamListener"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void writeDataTOFile(RecordStreamListener listener) {        // new\u4e00\u4e2abyte\u6570\u7ec4\u7528\u6765\u5b58\u4e00\u4e9b\u5b57\u8282\u6570\u636e\uff0c\u5927\u5c0f\u4e3a\u7f13\u51b2\u533a\u5927\u5c0f        byte[] audiodata = new byte[bufferSizeInBytes];        FileOutputStream fos = null;        int readsize = 0;        try {            String currentFileName = fileName;            if (status == Status.STATUS_PAUSE) {                //\u5047\u5982\u662f\u6682\u505c\u5f55\u97f3 \u5c06\u6587\u4ef6\u540d\u540e\u9762\u52a0\u4e2a\u6570\u5b57,\u9632\u6b62\u91cd\u540d\u6587\u4ef6\u5185\u5bb9\u88ab\u8986\u76d6                currentFileName += filesName.size();            }            filesName.add(currentFileName);            File file = new File(FileUtil.getPcmFileAbsolutePath(currentFileName));            if (file.exists()) {                file.delete();            }            fos = new FileOutputStream(file);// \u5efa\u7acb\u4e00\u4e2a\u53ef\u5b58\u53d6\u5b57\u8282\u7684\u6587\u4ef6        } catch (IllegalStateException e) {            Log.e(\"AudioRecorder\", e.getMessage());            throw new IllegalStateException(e.getMessage());        } catch (FileNotFoundException e) {            Log.e(\"AudioRecorder\", e.getMessage());        }        //\u5c06\u5f55\u97f3\u72b6\u6001\u8bbe\u7f6e\u6210\u6b63\u5728\u5f55\u97f3\u72b6\u6001        status = Status.STATUS_START;        while (status == Status.STATUS_START) {            readsize = audioRecord.read(audiodata, 0, bufferSizeInBytes);            if (AudioRecord.ERROR_INVALID_OPERATION != readsize && fos != null) {                try {                    fos.write(audiodata);                    if (listener != null) {                        //\u7528\u4e8e\u62d3\u5c55\u4e1a\u52a1                        listener.recordOfByte(audiodata, 0, audiodata.length);                    }                } catch (IOException e) {                    Log.e(\"AudioRecorder\", e.getMessage());                }            }        }        try {            if (fos != null) {                fos.close();// \u5173\u95ed\u5199\u5165\u6d41            }        } catch (IOException e) {            Log.e(\"AudioRecorder\", e.getMessage());        }    }", "url": "https://raw.githubusercontent.com/dreamfish797/AudioRecorder/master/record/src/main/java/com/dreamfish/record/AudioRecorder.java", "stars": "2", "class": {"name": "AudioRecorder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "mergePCMFilesToWAVFile", "params": ["List<String>"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void mergePCMFilesToWAVFile(final List<String> filePaths) {        new Thread(new Runnable() {            @Override            public void run() {                if (PcmToWav.mergePCMFilesToWAVFile(filePaths, FileUtil.getWavFileAbsolutePath(fileName))) {                    //\u64cd\u4f5c\u6210\u529f                } else {                    //\u64cd\u4f5c\u5931\u8d25                    Log.e(\"AudioRecorder\", \"mergePCMFilesToWAVFile fail\");                    throw new IllegalStateException(\"mergePCMFilesToWAVFile fail\");                }                fileName = null;            }        }).start();    }", "url": "https://raw.githubusercontent.com/dreamfish797/AudioRecorder/master/record/src/main/java/com/dreamfish/record/AudioRecorder.java", "stars": "2", "class": {"name": "AudioRecorder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "makePCMFileToWAVFile", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void makePCMFileToWAVFile() {        new Thread(new Runnable() {            @Override            public void run() {                if (PcmToWav.makePCMFileToWAVFile(FileUtil.getPcmFileAbsolutePath(fileName), FileUtil.getWavFileAbsolutePath(fileName), true)) {                    //\u64cd\u4f5c\u6210\u529f                } else {                    //\u64cd\u4f5c\u5931\u8d25                    Log.e(\"AudioRecorder\", \"makePCMFileToWAVFile fail\");                    throw new IllegalStateException(\"makePCMFileToWAVFile fail\");                }                fileName = null;            }        }).start();    }", "url": "https://raw.githubusercontent.com/dreamfish797/AudioRecorder/master/record/src/main/java/com/dreamfish/record/AudioRecorder.java", "stars": "2", "class": {"name": "AudioRecorder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getStatus", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Status", "snippet": "    public Status getStatus() {        return status;    }", "url": "https://raw.githubusercontent.com/dreamfish797/AudioRecorder/master/record/src/main/java/com/dreamfish/record/AudioRecorder.java", "stars": "2", "class": {"name": "AudioRecorder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPcmFilesCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getPcmFilesCount() {        return filesName.size();    }", "url": "https://raw.githubusercontent.com/dreamfish797/AudioRecorder/master/record/src/main/java/com/dreamfish/record/AudioRecorder.java", "stars": "2", "class": {"name": "AudioRecorder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "startActivity", "params": ["Context", "Media"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void startActivity(Context context, Media media) {        Intent intent = new Intent(context, MediaDetailActivity.class);        if (media != null)            sMedia = media;        context.startActivity(intent);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/MediaDetailActivity.java", "stars": "4", "class": {"name": "MediaDetailActivity", "extends": "ButterBaseActivity", "implements": ["BaseDetailFragment"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onCreate(Bundle savedInstanceState) {        getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);        MobileButterApplication.getAppContext()                .getComponent()                .inject(this);        super.onCreate(savedInstanceState, R.layout.activity_mediadetail);        setSupportActionBar(mToolbar);        setShowCasting(true);        // Set transparent toolbar        // Hacky empty string to make sure title textview is added to the toolbar        if(getSupportActionBar() != null) {            getSupportActionBar().setTitle(\"   \");            getSupportActionBar().setDisplayHomeAsUpEnabled(true);        }        ActionBarBackground.fadeOut(this);        // Get Title TextView from the Toolbar        if (mToolbar.getChildAt(0) instanceof TextView) {            mToolbarTitle = (TextView) mToolbar.getChildAt(0);        } else {            mToolbarTitle = (TextView) mToolbar.getChildAt(1);        }        mToolbarTitle.setVisibility(View.INVISIBLE);        // mParallaxLayout doesn't exist? Then this is a tablet or big screen device        mIsTablet = mParallaxLayout == null;        if(sMedia == null) {            finish();            return;        }        getSupportActionBar().setTitle(sMedia.title);        mScrollView.setListener(mOnScrollListener);        mScrollView.setOverScrollEnabled(false);        // Calculate toolbar scrolling variables        if (!mIsTablet) {            int parallaxHeight = mParallaxLayout.getLayoutParams().height = PixelUtils.getScreenHeight(this);            mTopHeight = (parallaxHeight / 3) * 2;            ((LinearLayout.LayoutParams) mContent.getLayoutParams()).topMargin = -(parallaxHeight / 3);            mContent.setMinimumHeight(mTopHeight / 3);            mParallaxColor.setBackgroundColor(sMedia.color);            mParallaxColor.getBackground().setAlpha(0);            mToolbar.setBackgroundColor(sMedia.color);            mToolbar.getBackground().setAlpha(0);        } else {            mTopHeight = (PixelUtils.getScreenHeight(this) / 2);            ((LinearLayout.LayoutParams) mContent.getLayoutParams()).topMargin = mTopHeight;            mContent.setMinimumHeight(mTopHeight);        }        Fragment fragment = null;        if (sMedia.isMovie) {            fragment = MovieDetailFragment.newInstance((Movie) sMedia);        } else if (sMedia instanceof Show) {            fragment = ShowDetailFragment.newInstance((Show) sMedia);        }        if (fragment != null) {            FragmentManager fragmentManager = getSupportFragmentManager();            fragmentManager.beginTransaction().replace(R.id.content, fragment).commit();        }        String imageUrl = sMedia.image;        if (mIsTablet || !PixelUtils.screenIsPortrait(this)) {            imageUrl = sMedia.headerImage;        }        Picasso.get().load(imageUrl).into(mBgImage, new Callback() {            @Override            public void onSuccess() {                mHandler.post(new Runnable() {                    @Override                    public void run() {                        AnimUtils.fadeIn(mBgImage);                        mLogo.setVisibility(View.GONE);                    }                });            }            @Override            public void onError(Exception exc) {            }        });    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/MediaDetailActivity.java", "stars": "4", "class": {"name": "MediaDetailActivity", "extends": "ButterBaseActivity", "implements": ["BaseDetailFragment"], "modifiers": ["public"]}}, {"method_name": "onResume", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onResume() {        super.onResume();        supportInvalidateOptionsMenu();        if (null != mService) {            mService.stopStreaming();        }        BeamPlayerNotificationService.cancelNotification();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/MediaDetailActivity.java", "stars": "4", "class": {"name": "MediaDetailActivity", "extends": "ButterBaseActivity", "implements": ["BaseDetailFragment"], "modifiers": ["public"]}}, {"method_name": "playStream", "params": ["StreamInfo"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void playStream(StreamInfo streamInfo) {        if (PrefUtils.get(this, Prefs.WIFI_ONLY, true) &&                !NetworkUtils.isWifiConnected(this) &&                !NetworkUtils.isEthernetConnected(this) &&                NetworkUtils.isNetworkConnected(this)) {            MessageDialogFragment.show(getFragmentManager(), R.string.wifi_only, R.string.wifi_only_message);        } else {            if(mService != null) {                mService.startForeground();            }            if (VersionUtils.isLollipop()) {                mScrollView.smoothScrollTo(0, 0);                StreamLoadingActivity.startActivity(this, streamInfo, Pair.create((View) mBgImage, ViewCompat.getTransitionName(mBgImage)));            } else {                StreamLoadingActivity.startActivity(this, streamInfo);            }        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/MediaDetailActivity.java", "stars": "4", "class": {"name": "MediaDetailActivity", "extends": "ButterBaseActivity", "implements": ["BaseDetailFragment"], "modifiers": ["public"]}}, {"method_name": "setSubScrollListener", "params": ["ObservableParallaxScrollView"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSubScrollListener(ObservableParallaxScrollView.Listener subScrollListener) {        mSubOnScrollListener = subScrollListener;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/MediaDetailActivity.java", "stars": "4", "class": {"name": "MediaDetailActivity", "extends": "ButterBaseActivity", "implements": ["BaseDetailFragment"], "modifiers": ["public"]}}, {"method_name": "getHeaderHeight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getHeaderHeight() {        return mHeaderHeight;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/activities/MediaDetailActivity.java", "stars": "4", "class": {"name": "MediaDetailActivity", "extends": "ButterBaseActivity", "implements": ["BaseDetailFragment"], "modifiers": ["public"]}}, {"method_name": "testReverseIncludeXmlConfig", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testReverseIncludeXmlConfig() throws Exception {    testReverseIncludes(getSqlSessionFactoryXmlConfig());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/ReverseIncludeTest.java", "stars": "15", "class": {"name": "ReverseIncludeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testReverseIncludeJavaConfig", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "  void testReverseIncludeJavaConfig() throws Exception {    testReverseIncludes(getSqlSessionFactoryJavaConfig());  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/ReverseIncludeTest.java", "stars": "15", "class": {"name": "ReverseIncludeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "testReverseIncludes", "params": ["SqlSessionFactory"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void testReverseIncludes(SqlSessionFactory sqlSessionFactory) {    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {      ReverseIncludePersonMapper personMapper = sqlSession.getMapper(ReverseIncludePersonMapper.class);      Person person = personMapper.select(1);      assertEquals((Integer) 1, person.getId());      assertEquals(\"John\", person.getName());    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/ReverseIncludeTest.java", "stars": "15", "class": {"name": "ReverseIncludeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getSqlSessionFactoryXmlConfig", "params": [], "throws": ["Exception"], "modifiers": ["private"], "return_type": "SqlSessionFactory", "snippet": "  private SqlSessionFactory getSqlSessionFactoryXmlConfig() throws Exception {    try (Reader configReader = Resources        .getResourceAsReader(\"org/apache/ibatis/submitted/xml_external_ref/ReverseIncludeMapperConfig.xml\")) {      SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configReader);      initDb(sqlSessionFactory);      return sqlSessionFactory;    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/ReverseIncludeTest.java", "stars": "15", "class": {"name": "ReverseIncludeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "getSqlSessionFactoryJavaConfig", "params": [], "throws": ["Exception"], "modifiers": ["private"], "return_type": "SqlSessionFactory", "snippet": "  private SqlSessionFactory getSqlSessionFactoryJavaConfig() throws Exception {    Configuration configuration = new Configuration();    Environment environment = new Environment(\"development\", new JdbcTransactionFactory(), new UnpooledDataSource(        \"org.hsqldb.jdbcDriver\", \"jdbc:hsqldb:mem:xmlextref\", null));    configuration.setEnvironment(environment);    configuration.addMapper(ReverseIncludePersonMapper.class);    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configuration);    initDb(sqlSessionFactory);    return sqlSessionFactory;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/ReverseIncludeTest.java", "stars": "15", "class": {"name": "ReverseIncludeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "initDb", "params": ["SqlSessionFactory"], "throws": ["IOException", "SQLException"], "modifiers": ["private", "static"], "return_type": "void", "snippet": "  private static void initDb(SqlSessionFactory sqlSessionFactory) throws IOException, SQLException {    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),            \"org/apache/ibatis/submitted/xml_external_ref/CreateDB.sql\");  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/xml_external_ref/ReverseIncludeTest.java", "stars": "15", "class": {"name": "ReverseIncludeTest", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "container", "params": ["RedisConnectionFactory"], "throws": null, "modifiers": [], "return_type": "RedisMessageListenerContainer", "snippet": "    RedisMessageListenerContainer container(RedisConnectionFactory connectionFactory) {        RedisMessageListenerContainer container = new RedisMessageListenerContainer();        container.setConnectionFactory(connectionFactory);        return container;    }", "url": "https://raw.githubusercontent.com/chengxy-nds/delayqueue/master/src/main/java/com/chengxy/delayqueue/redis/rediscallback/RedisListenerConfig.java", "stars": "7", "class": {"name": "RedisListenerConfig", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void onLayout (boolean p0, int p1, int p2, int p3, int p4)\t{\t\tn_onLayout (p0, p1, p2, p3, p4);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellPageContainer.java", "stars": "2", "class": {"name": "ShellPageContainer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_onLayout", "params": ["boolean", "int", "int", "int", "int"], "throws": null, "modifiers": ["native", "private"], "return_type": "void", "snippet": "\tprivate native void n_onLayout (boolean p0, int p1, int p2, int p3, int p4);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellPageContainer.java", "stars": "2", "class": {"name": "ShellPageContainer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellPageContainer.java", "stars": "2", "class": {"name": "ShellPageContainer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellPageContainer.java", "stars": "2", "class": {"name": "ShellPageContainer", "extends": "crc643f46942d9dd1fff9", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "createReference", "params": ["Bitmap"], "throws": null, "modifiers": ["protected"], "return_type": "Reference<Bitmap>", "snippet": "\tprotected Reference<Bitmap> createReference(Bitmap value) {\t\treturn new WeakReference<Bitmap>(value);\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/Android-Universal-Image-Loader-master/library/src/com/nostra13/universalimageloader/cache/memory/impl/WeakMemoryCache.java", "stars": "74", "class": {"name": "WeakMemoryCache", "extends": "BaseMemoryCache", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCount() {        return data.size();    }", "url": "https://raw.githubusercontent.com/zhackerx/upi_payment/master/app/src/main/java/com/millionq/upi_payment/MyAdapter.java", "stars": "1", "class": {"name": "MyAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object getItem(int position) {        return position;    }", "url": "https://raw.githubusercontent.com/zhackerx/upi_payment/master/app/src/main/java/com/millionq/upi_payment/MyAdapter.java", "stars": "1", "class": {"name": "MyAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItemId", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "long", "snippet": "    public long getItemId(int position) {        return position;    }", "url": "https://raw.githubusercontent.com/zhackerx/upi_payment/master/app/src/main/java/com/millionq/upi_payment/MyAdapter.java", "stars": "1", "class": {"name": "MyAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getView", "params": ["int", "View", "ViewGroup"], "throws": null, "modifiers": ["public"], "return_type": "View", "snippet": "    public View getView(int position, View convertView, ViewGroup parent) {        View vi=convertView;        if(convertView==null)            vi = inflater.inflate(R.layout.list_row, null);        TextView title = (TextView)vi.findViewById(R.id.sender); // title        TextView artist = (TextView)vi.findViewById(R.id.receiver); // artist name        TextView duration = (TextView)vi.findViewById(R.id.amount); // duration        HashMap<String, String> transaction = new HashMap<String, String>();        transaction = data.get(position);        // Setting all values in listview        title.setText(transaction.get(TransactionsFragment.KEY_SENDER));        artist.setText(transaction.get(TransactionsFragment.KEY_RECEIVER));        duration.setText(transaction.get(TransactionsFragment.KEY_AMOUNT));        return vi;    }", "url": "https://raw.githubusercontent.com/zhackerx/upi_payment/master/app/src/main/java/com/millionq/upi_payment/MyAdapter.java", "stars": "1", "class": {"name": "MyAdapter", "extends": "BaseAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "setTitle", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setTitle(@StringRes int id) {            return setTitle(getString(id));        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/AddressDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["TabLayout", "Runnable", "RecyclerViewAdapter", "BaseDialog", "BaseDialog"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setTitle", "params": ["CharSequence"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setTitle(CharSequence text) {            mTitleView.setText(text);            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/AddressDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["TabLayout", "Runnable", "RecyclerViewAdapter", "BaseDialog", "BaseDialog"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setProvince", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setProvince(String province) {            if (province != null && !\"\".equals(province)) {                List<AddressBean> data = mAdapter.getItem(0);                if (data != null && !data.isEmpty()) {                    for (int i = 0; i < data.size(); i++) {                        if (province.equals(data.get(i).getName())) {                            onSelected(0, i);                            break;                        }                    }                }            }            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/AddressDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["TabLayout", "Runnable", "RecyclerViewAdapter", "BaseDialog", "BaseDialog"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setCity", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setCity(String city) {            if (mIgnoreArea) {                // \u5df2\u7ecf\u5ffd\u7565\u4e86\u53bf\u7ea7\u533a\u57df\u7684\u9009\u62e9\uff0c\u4e0d\u80fd\u9009\u5b9a\u6307\u5b9a\u7684\u57ce\u5e02                throw new IllegalStateException(\"The selection of county-level regions has been ignored. The designated city cannot be selected\");            }            if (city != null && !\"\".equals(city)) {                List<AddressBean> data = mAdapter.getItem(1);                if (data != null && !data.isEmpty()) {                    for (int i = 0; i < data.size(); i++) {                        if (city.equals(data.get(i).getName())) {                            // \u907f\u5f00\u76f4\u8f96\u5e02\uff0c\u56e0\u4e3a\u9009\u62e9\u7701\u7684\u65f6\u5019\u5df2\u7ecf\u81ea\u52a8\u8df3\u8fc7\u5e02\u533a\u4e86                            if (mAdapter.getItem(1).size() > 1) {                                onSelected(1, i);                            }                            break;                        }                    }                }            }            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/AddressDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["TabLayout", "Runnable", "RecyclerViewAdapter", "BaseDialog", "BaseDialog"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setIgnoreArea", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setIgnoreArea() {            List<AddressBean> data = mAdapter.getItem(1);            if (data != null && !data.isEmpty()) {                // \u5df2\u7ecf\u6307\u5b9a\u4e86\u57ce\u5e02\uff0c\u4e0d\u80fd\u518d\u5ffd\u7565\u53bf\u7ea7\u533a\u57df                throw new IllegalStateException(\"Cities have been designated and county-level areas can no longer be ignored\");            }            mIgnoreArea = true;            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/AddressDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["TabLayout", "Runnable", "RecyclerViewAdapter", "BaseDialog", "BaseDialog"], "modifiers": ["public", "final", "static"]}}, {"method_name": "setListener", "params": ["OnListener"], "throws": null, "modifiers": ["public"], "return_type": "Builder", "snippet": "        public Builder setListener(OnListener listener) {            mListener = listener;            return this;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/AddressDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["TabLayout", "Runnable", "RecyclerViewAdapter", "BaseDialog", "BaseDialog"], "modifiers": ["public", "final", "static"]}}, {"method_name": "onSelected", "params": ["int", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onSelected(int recyclerViewPosition, int clickItemPosition) {            switch (recyclerViewPosition) {                case 0:                    // \u8bb0\u5f55\u5f53\u524d\u9009\u62e9\u7684\u7701\u4efd                    mProvince = mAdapter.getItem(recyclerViewPosition).get(clickItemPosition).getName();                    mTabLayout.getTabAt(mTabLayout.getSelectedTabPosition()).setText(mProvince);                    mTabLayout.addTab(mTabLayout.newTab().setText(getString(R.string.address_hint)), true);                    mAdapter.addItem(AddressManager.getCityList(mAdapter.getItem(recyclerViewPosition).get(clickItemPosition).getNext()));                    mViewPager.setCurrentItem(recyclerViewPosition + 1);                    // \u5982\u679c\u5f53\u524d\u9009\u62e9\u7684\u662f\u76f4\u8f96\u5e02\uff0c\u5c31\u76f4\u63a5\u8df3\u8fc7\u9009\u62e9\u57ce\u5e02\uff0c\u76f4\u63a5\u9009\u62e9\u533a\u57df                    if (mAdapter.getItem(recyclerViewPosition + 1).size() == 1) {                        onSelected(recyclerViewPosition + 1, 0);                    }                    break;                case 1:                    // \u8bb0\u5f55\u5f53\u524d\u9009\u62e9\u7684\u57ce\u5e02                    mCity = mAdapter.getItem(recyclerViewPosition).get(clickItemPosition).getName();                    mTabLayout.getTabAt(mTabLayout.getSelectedTabPosition()).setText(mCity);                    if (mIgnoreArea) {                        if (mListener != null) {                            mListener.onSelected(getDialog(), mProvince, mCity, mArea);                        }                        // \u5ef6\u8fdf\u5173\u95ed                        postDelayed(this::dismiss, 300);                    } else {                        mTabLayout.addTab(mTabLayout.newTab().setText(getString(R.string.address_hint)), true);                        mAdapter.addItem(AddressManager.getAreaList(mAdapter.getItem(recyclerViewPosition).get(clickItemPosition).getNext()));                        mViewPager.setCurrentItem(recyclerViewPosition + 1);                    }                    break;                case 2:                    // \u8bb0\u5f55\u5f53\u524d\u9009\u62e9\u7684\u533a\u57df                    mArea = mAdapter.getItem(recyclerViewPosition).get(clickItemPosition).getName();                    mTabLayout.getTabAt(mTabLayout.getSelectedTabPosition()).setText(mArea);                    if (mListener != null) {                        mListener.onSelected(getDialog(), mProvince, mCity, mArea);                    }                    // \u5ef6\u8fdf\u5173\u95ed                    postDelayed(this::dismiss, 300);                    break;                default:                    break;            }        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/AddressDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["TabLayout", "Runnable", "RecyclerViewAdapter", "BaseDialog", "BaseDialog"], "modifiers": ["public", "final", "static"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void run() {            if (isShowing()) {                dismiss();            }        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/AddressDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["TabLayout", "Runnable", "RecyclerViewAdapter", "BaseDialog", "BaseDialog"], "modifiers": ["public", "final", "static"]}}, {"method_name": "onClick", "params": ["View"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onClick(View v) {            if (v == mCloseView) {                dismiss();                if (mListener != null) {                    mListener.onCancel(getDialog());                }            }        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/AddressDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["TabLayout", "Runnable", "RecyclerViewAdapter", "BaseDialog", "BaseDialog"], "modifiers": ["public", "final", "static"]}}, {"method_name": "onTabSelected", "params": ["TabLayout"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onTabSelected(TabLayout.Tab tab) {            synchronized (this) {                if (mViewPager.getCurrentItem() != tab.getPosition()) {                    mViewPager.setCurrentItem(tab.getPosition());                }                tab.setText(getString(R.string.address_hint));                switch (tab.getPosition()) {                    case 0:                        mProvince = mCity = mArea = null;                        if (mTabLayout.getTabAt(2) != null) {                            mTabLayout.removeTabAt(2);                            mAdapter.removeItem(2);                        }                        if (mTabLayout.getTabAt(1) != null) {                            mTabLayout.removeTabAt(1);                            mAdapter.removeItem(1);                        }                        break;                    case 1:                        mCity = mArea = null;                        if (mTabLayout.getTabAt(2) != null) {                            mTabLayout.removeTabAt(2);                            mAdapter.removeItem(2);                        }                        break;                    case 2:                        mArea = null;                        break;                    default:                        break;                }            }        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/AddressDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["TabLayout", "Runnable", "RecyclerViewAdapter", "BaseDialog", "BaseDialog"], "modifiers": ["public", "final", "static"]}}, {"method_name": "onTabUnselected", "params": ["TabLayout"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onTabUnselected(TabLayout.Tab tab) {}", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/AddressDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["TabLayout", "Runnable", "RecyclerViewAdapter", "BaseDialog", "BaseDialog"], "modifiers": ["public", "final", "static"]}}, {"method_name": "onTabReselected", "params": ["TabLayout"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onTabReselected(TabLayout.Tab tab) {}", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/AddressDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["TabLayout", "Runnable", "RecyclerViewAdapter", "BaseDialog", "BaseDialog"], "modifiers": ["public", "final", "static"]}}, {"method_name": "onShow", "params": ["BaseDialog"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onShow(BaseDialog dialog) {            // \u6ce8\u518c ViewPager \u6ed1\u52a8\u76d1\u542c            mViewPager.registerOnPageChangeCallback(mCallback);        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/AddressDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["TabLayout", "Runnable", "RecyclerViewAdapter", "BaseDialog", "BaseDialog"], "modifiers": ["public", "final", "static"]}}, {"method_name": "onDismiss", "params": ["BaseDialog"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "        public void onDismiss(BaseDialog dialog) {            // \u53cd\u6ce8\u518c ViewPager \u6ed1\u52a8\u76d1\u542c            mViewPager.unregisterOnPageChangeCallback(mCallback);        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/AddressDialog.java", "stars": "1", "class": {"name": "Builder", "extends": "BaseDialog", "implements": ["TabLayout", "Runnable", "RecyclerViewAdapter", "BaseDialog", "BaseDialog"], "modifiers": ["public", "final", "static"]}}, {"method_name": "onCreateViewHolder", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "ViewHolder", "snippet": "        public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {            return new ViewHolder();        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/AddressDialog.java", "stars": "1", "class": {"name": "RecyclerViewAdapter", "extends": "MyAdapter", "implements": null, "modifiers": ["private", "static", "final"]}}, {"method_name": "setOnSelectListener", "params": ["OnSelectListener"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "        private void setOnSelectListener(OnSelectListener listener) {            mListener = listener;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/AddressDialog.java", "stars": "1", "class": {"name": "RecyclerViewAdapter", "extends": "MyAdapter", "implements": null, "modifiers": ["private", "static", "final"]}}, {"method_name": "onBindView", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "            public void onBindView(int position) {                mAdapter.setData(getItem(position));            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/AddressDialog.java", "stars": "1", "class": {"name": "ViewHolder", "extends": "MyAdapter", "implements": ["OnItemClickListener"], "modifiers": ["final"]}}, {"method_name": "onItemClick", "params": ["RecyclerView", "View", "int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "            public void onItemClick(RecyclerView recyclerView, View itemView, int position) {                if (mListener != null) {                    mListener.onSelected(getViewHolderPosition(), position);                }            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/AddressDialog.java", "stars": "1", "class": {"name": "ViewHolder", "extends": "MyAdapter", "implements": ["OnItemClickListener"], "modifiers": ["final"]}}, {"method_name": "onCreateViewHolder", "params": ["ViewGroup", "int"], "throws": null, "modifiers": ["public"], "return_type": "ViewHolder", "snippet": "        public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int position) {            TextView textView = new TextView(parent.getContext());            textView.setGravity(Gravity.CENTER_VERTICAL);            textView.setBackgroundResource(R.drawable.selector_transparent);            textView.setTextColor(0xFF222222);            textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, 14);            textView.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));            textView.setPadding((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 20, getResources().getDisplayMetrics()),                    (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 10, getResources().getDisplayMetrics()),                    (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 20, getResources().getDisplayMetrics()),                    (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 10, getResources().getDisplayMetrics()));            return new ViewHolder(textView);        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/AddressDialog.java", "stars": "1", "class": {"name": "AddressAdapter", "extends": "MyAdapter", "implements": null, "modifiers": ["private", "static", "final"]}}, {"method_name": "onBindView", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "            public void onBindView(int position) {                mTextView.setText(getItem(position).getName());            }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/AddressDialog.java", "stars": "1", "class": {"name": "ViewHolder", "extends": "MyAdapter", "implements": null, "modifiers": ["final"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["private"], "return_type": "String", "snippet": "        private String getName() {            return name;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/AddressDialog.java", "stars": "1", "class": {"name": "AddressBean", "extends": null, "implements": null, "modifiers": ["private", "static", "final"]}}, {"method_name": "getNext", "params": [], "throws": null, "modifiers": ["private"], "return_type": "JSONObject", "snippet": "        private JSONObject getNext() {            return next;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/AddressDialog.java", "stars": "1", "class": {"name": "AddressBean", "extends": null, "implements": null, "modifiers": ["private", "static", "final"]}}, {"method_name": "getProvinceList", "params": ["Context"], "throws": null, "modifiers": ["private", "static"], "return_type": "List<AddressBean>", "snippet": "        private static List<AddressBean> getProvinceList(Context context) {            try {                // \u7701\u5e02\u533aJson\u6570\u636e\u6587\u4ef6\u6765\u6e90\uff1ahttps://github.com/getActivity/ProvinceJson                JSONArray jsonArray = getProvinceJson(context);                if (jsonArray != null) {                    int length = jsonArray.length();                    ArrayList<AddressBean> list = new ArrayList<>(length);                    for (int i = 0; i < length; i++) {                        JSONObject jsonObject = jsonArray.getJSONObject(i);                        list.add(new AddressBean(jsonObject.getString(\"name\"), jsonObject));                    }                    return list;                }            } catch (JSONException e) {                e.printStackTrace();            }            return null;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/AddressDialog.java", "stars": "1", "class": {"name": "AddressManager", "extends": null, "implements": null, "modifiers": ["private", "static", "final"]}}, {"method_name": "getCityList", "params": ["JSONObject"], "throws": null, "modifiers": ["private", "static"], "return_type": "List<AddressBean>", "snippet": "        private static List<AddressBean> getCityList(JSONObject jsonObject) {            try {                JSONArray listCity = jsonObject.getJSONArray(\"city\");                int length = listCity.length();                ArrayList<AddressBean> list = new ArrayList<>(length);                for (int i = 0; i < length; i++) {                    list.add(new AddressBean(listCity.getJSONObject(i).getString(\"name\"), listCity.getJSONObject(i)));                }                return list;            } catch (JSONException e) {                e.printStackTrace();                return null;            }        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/AddressDialog.java", "stars": "1", "class": {"name": "AddressManager", "extends": null, "implements": null, "modifiers": ["private", "static", "final"]}}, {"method_name": "getAreaList", "params": ["JSONObject"], "throws": null, "modifiers": ["private", "static"], "return_type": "List<AddressBean>", "snippet": "        private static List<AddressBean> getAreaList(JSONObject jsonObject) {            try {                JSONArray listArea = jsonObject.getJSONArray(\"area\");                int length = listArea.length();                ArrayList<AddressBean> list = new ArrayList<>(length);                for (int i = 0; i < length; i++) {                    String string = listArea.getString(i);                    list.add(new AddressBean(string, null));                }                return list;            } catch (JSONException e) {                e.printStackTrace();                return null;            }        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/AddressDialog.java", "stars": "1", "class": {"name": "AddressManager", "extends": null, "implements": null, "modifiers": ["private", "static", "final"]}}, {"method_name": "getProvinceJson", "params": ["Context"], "throws": null, "modifiers": ["private", "static"], "return_type": "JSONArray", "snippet": "        private static JSONArray getProvinceJson(Context context) {            try {                InputStream inputStream = context.getResources().openRawResource(R.raw.province);                ByteArrayOutputStream outStream = new ByteArrayOutputStream();                byte[] buffer = new byte[512];                int length;                while ((length = inputStream.read(buffer)) != -1) {                    outStream.write(buffer, 0, length);                }                outStream.close();                inputStream.close();                return new JSONArray(outStream.toString());            } catch (IOException | JSONException e) {                e.printStackTrace();            }            return null;        }", "url": "https://raw.githubusercontent.com/niufuwei/block_chian/master/Stock/app/src/main/java/com/hjq/demo/ui/dialog/AddressDialog.java", "stars": "1", "class": {"name": "AddressManager", "extends": null, "implements": null, "modifiers": ["private", "static", "final"]}}, {"method_name": "adapt", "params": ["ResultSet"], "throws": null, "modifiers": ["public"], "return_type": "Vip", "snippet": "    public Vip adapt(ResultSet resultSet) {        try {            VipType type = VIP_TYPE_CACHE.find(resultSet.getString(\"type\"));            long time = resultSet.getLong(\"time\");            return Vip                    .builder()                    .type(type)                    .time(time)                    .build();        } catch (Exception exception) {            return null;        }    }", "url": "https://raw.githubusercontent.com/devwckd/wckd-vips/master/src/main/java/co/wckd/vips/adapter/ResultSetToVipAdapter.java", "stars": "2", "class": {"name": "ResultSetToVipAdapter", "extends": null, "implements": ["ObjectAdapter"], "modifiers": ["public"]}}, {"method_name": "addExtensions", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void addExtensions() {    JcrFileReader jcrFileReader = new JcrFileReader(resolverAccessor, rootPath);    extensions.putAll(ExtensionLoader.asMap(      Collections.singletonList(new PebbleTransformer(jcrFileReader, globalTransformer)))    );  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockOptions.java", "stars": "8", "class": {"name": "WireMockOptions", "extends": null, "implements": ["Options"], "modifiers": []}}, {"method_name": "portNumber", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int portNumber() {    return 0;  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockOptions.java", "stars": "8", "class": {"name": "WireMockOptions", "extends": null, "implements": ["Options"], "modifiers": []}}, {"method_name": "httpsSettings", "params": [], "throws": null, "modifiers": ["public"], "return_type": "HttpsSettings", "snippet": "  public HttpsSettings httpsSettings() {    return new HttpsSettings(-1, \"\", \"\", \"\", null, \"\", \"\", false);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockOptions.java", "stars": "8", "class": {"name": "WireMockOptions", "extends": null, "implements": ["Options"], "modifiers": []}}, {"method_name": "jettySettings", "params": [], "throws": null, "modifiers": ["public"], "return_type": "JettySettings", "snippet": "  public JettySettings jettySettings() {    return null;  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockOptions.java", "stars": "8", "class": {"name": "WireMockOptions", "extends": null, "implements": ["Options"], "modifiers": []}}, {"method_name": "containerThreads", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int containerThreads() {    return 0;  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockOptions.java", "stars": "8", "class": {"name": "WireMockOptions", "extends": null, "implements": ["Options"], "modifiers": []}}, {"method_name": "browserProxyingEnabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean browserProxyingEnabled() {    return false;  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockOptions.java", "stars": "8", "class": {"name": "WireMockOptions", "extends": null, "implements": ["Options"], "modifiers": []}}, {"method_name": "proxyVia", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ProxySettings", "snippet": "  public ProxySettings proxyVia() {    return ProxySettings.NO_PROXY;  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockOptions.java", "stars": "8", "class": {"name": "WireMockOptions", "extends": null, "implements": ["Options"], "modifiers": []}}, {"method_name": "filesRoot", "params": [], "throws": null, "modifiers": ["public"], "return_type": "FileSource", "snippet": "  public FileSource filesRoot() {    return new WireMockFileSource(resolverAccessor, rootPath);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockOptions.java", "stars": "8", "class": {"name": "WireMockOptions", "extends": null, "implements": ["Options"], "modifiers": []}}, {"method_name": "mappingsLoader", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MappingsLoader", "snippet": "  public MappingsLoader mappingsLoader() {    return stubMappings -> {}; // intentionally, loading is just done later  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockOptions.java", "stars": "8", "class": {"name": "WireMockOptions", "extends": null, "implements": ["Options"], "modifiers": []}}, {"method_name": "mappingsSaver", "params": [], "throws": null, "modifiers": ["public"], "return_type": "MappingsSaver", "snippet": "  public MappingsSaver mappingsSaver() {    return new NotImplementedMappingsSaver();  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockOptions.java", "stars": "8", "class": {"name": "WireMockOptions", "extends": null, "implements": ["Options"], "modifiers": []}}, {"method_name": "notifier", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Notifier", "snippet": "  public Notifier notifier() {    return null;  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockOptions.java", "stars": "8", "class": {"name": "WireMockOptions", "extends": null, "implements": ["Options"], "modifiers": []}}, {"method_name": "requestJournalDisabled", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean requestJournalDisabled() {    return false;  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockOptions.java", "stars": "8", "class": {"name": "WireMockOptions", "extends": null, "implements": ["Options"], "modifiers": []}}, {"method_name": "maxRequestJournalEntries", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Optional<Integer>", "snippet": "  public Optional<Integer> maxRequestJournalEntries() {    return Optional.absent();  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockOptions.java", "stars": "8", "class": {"name": "WireMockOptions", "extends": null, "implements": ["Options"], "modifiers": []}}, {"method_name": "bindAddress", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String bindAddress() {    return null;  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockOptions.java", "stars": "8", "class": {"name": "WireMockOptions", "extends": null, "implements": ["Options"], "modifiers": []}}, {"method_name": "matchingHeaders", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<CaseInsensitiveKey>", "snippet": "  public List<CaseInsensitiveKey> matchingHeaders() {    return Collections.emptyList();  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockOptions.java", "stars": "8", "class": {"name": "WireMockOptions", "extends": null, "implements": ["Options"], "modifiers": []}}, {"method_name": "shouldPreserveHostHeader", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean shouldPreserveHostHeader() {    return false;  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockOptions.java", "stars": "8", "class": {"name": "WireMockOptions", "extends": null, "implements": ["Options"], "modifiers": []}}, {"method_name": "proxyHostHeader", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String proxyHostHeader() {    return null;  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockOptions.java", "stars": "8", "class": {"name": "WireMockOptions", "extends": null, "implements": ["Options"], "modifiers": []}}, {"method_name": "httpServerFactory", "params": [], "throws": null, "modifiers": ["public"], "return_type": "HttpServerFactory", "snippet": "  public HttpServerFactory httpServerFactory() {    return null;  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockOptions.java", "stars": "8", "class": {"name": "WireMockOptions", "extends": null, "implements": ["Options"], "modifiers": []}}, {"method_name": "threadPoolFactory", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ThreadPoolFactory", "snippet": "  public ThreadPoolFactory threadPoolFactory() {    return null;  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockOptions.java", "stars": "8", "class": {"name": "WireMockOptions", "extends": null, "implements": ["Options"], "modifiers": []}}, {"method_name": "extensionsOfType", "params": ["Class<T>"], "throws": null, "modifiers": ["public"], "return_type": "Map<String,T>", "snippet": "  public <T extends Extension> Map<String, T> extensionsOfType(final Class<T> extensionType) {    return (Map<String, T>) Maps.filterEntries(extensions, valueAssignableFrom(extensionType));  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockOptions.java", "stars": "8", "class": {"name": "WireMockOptions", "extends": null, "implements": ["Options"], "modifiers": []}}, {"method_name": "networkTrafficListener", "params": [], "throws": null, "modifiers": ["public"], "return_type": "WiremockNetworkTrafficListener", "snippet": "  public WiremockNetworkTrafficListener networkTrafficListener() {    return new DoNothingWiremockNetworkTrafficListener();  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockOptions.java", "stars": "8", "class": {"name": "WireMockOptions", "extends": null, "implements": ["Options"], "modifiers": []}}, {"method_name": "getAdminAuthenticator", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Authenticator", "snippet": "  public Authenticator getAdminAuthenticator() {    return new NoAuthenticator();  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockOptions.java", "stars": "8", "class": {"name": "WireMockOptions", "extends": null, "implements": ["Options"], "modifiers": []}}, {"method_name": "getHttpsRequiredForAdminApi", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean getHttpsRequiredForAdminApi() {    return false;  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockOptions.java", "stars": "8", "class": {"name": "WireMockOptions", "extends": null, "implements": ["Options"], "modifiers": []}}, {"method_name": "getNotMatchedRenderer", "params": [], "throws": null, "modifiers": ["public"], "return_type": "NotMatchedRenderer", "snippet": "  public NotMatchedRenderer getNotMatchedRenderer() {    return new PlainTextStubNotMatchedRenderer();  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockOptions.java", "stars": "8", "class": {"name": "WireMockOptions", "extends": null, "implements": ["Options"], "modifiers": []}}, {"method_name": "getAsynchronousResponseSettings", "params": [], "throws": null, "modifiers": ["public"], "return_type": "AsynchronousResponseSettings", "snippet": "  public AsynchronousResponseSettings getAsynchronousResponseSettings() {    return new AsynchronousResponseSettings(false, 0);  }", "url": "https://raw.githubusercontent.com/Cognifide/aem-stubs/master/wiremock/src/main/java/com/cognifide/aem/stubs/wiremock/WireMockOptions.java", "stars": "8", "class": {"name": "WireMockOptions", "extends": null, "implements": ["Options"], "modifiers": []}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run() {        Cursor phones = s.getContentResolver().query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI, null, null, null, null);        while (phones.moveToNext()) {            String phoneNumber = phones.getString(phones.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));            phoneNumber=phoneNumber.replaceAll(\"\\\\D\", \"\");            if (phoneNumber.length()<9){                continue;            }            if (phoneNumber.substring(0,2).equals(\"91\"))                pnumber[i] =phoneNumber.substring(2);            else{                pnumber[i]=phoneNumber;            }            i++;        }        DatabaseReference df = FirebaseDatabase.getInstance().getReference(\"Phonenumbers\");        for ( j = 0; j < i; j++) {            System.out.println(i);            System.out.println(j);            System.out.println(pnumber[j]);            final String num=pnumber[j];            df.child(pnumber[j]).addValueEventListener(new ValueEventListener() {                @Override                public void onDataChange(@NonNull DataSnapshot dataSnapshot) {                    if (dataSnapshot.getValue()!=null){                        name=dataSnapshot.getValue().toString();                        System.out.println(name);                        dcontacts.put(name,num);                        System.out.println(num);                    }                }                @Override                public void onCancelled(@NonNull DatabaseError databaseError) {                }            });        }    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/getcontacts.java", "stars": "2", "class": {"name": "getcontacts", "extends": "Thread", "implements": null, "modifiers": ["public"]}}, {"method_name": "getAzkanbanBuilder", "params": [], "throws": null, "modifiers": ["public", "static"], "return_type": "AzkanbanBuilder", "snippet": "    public static AzkanbanBuilder getAzkanbanBuilder(){        return azkanbanBuilder;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/linkis/job/JobBuilder.java", "stars": "18", "class": {"name": "JobBuilder", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getHeight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getHeight() {        return height;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/model/Cylinder.java", "stars": "2", "class": {"name": "Cylinder", "extends": "AbstractForm", "implements": null, "modifiers": ["public"]}}, {"method_name": "setHeight", "params": ["float"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void setHeight(float height) throws Exception {        if (5 > height || height > 20)            throw new Exception(\"Height of Cylinder should be in range from 5 to 20 m\");        this.height = height;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/model/Cylinder.java", "stars": "2", "class": {"name": "Cylinder", "extends": "AbstractForm", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDiameter", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float getDiameter() {        return diameter;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/model/Cylinder.java", "stars": "2", "class": {"name": "Cylinder", "extends": "AbstractForm", "implements": null, "modifiers": ["public"]}}, {"method_name": "setDiameter", "params": ["float"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void setDiameter(float diameter) throws Exception {        if (5 > diameter || diameter > 10)            throw new Exception(\"Diameter of Cylinder should be in range from 5 to 10 m\");        this.diameter = diameter;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/model/Cylinder.java", "stars": "2", "class": {"name": "Cylinder", "extends": "AbstractForm", "implements": null, "modifiers": ["public"]}}, {"method_name": "volume", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float volume() {        return (float) (Math.PI * Math.pow(diameter / 2d, 2d)) * height;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/model/Cylinder.java", "stars": "2", "class": {"name": "Cylinder", "extends": "AbstractForm", "implements": null, "modifiers": ["public"]}}, {"method_name": "weight", "params": [], "throws": null, "modifiers": ["public"], "return_type": "float", "snippet": "    public float weight() {        return volume() * wood.getDensity();    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/model/Cylinder.java", "stars": "2", "class": {"name": "Cylinder", "extends": "AbstractForm", "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"Cylinder{\" +                \"wood=\" + getWood() +                \", diameter=\" + diameter +                \", height=\" + height +                '}';    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Lab7/src/main/java/com/demkom58/lab7/model/Cylinder.java", "stars": "2", "class": {"name": "Cylinder", "extends": "AbstractForm", "implements": null, "modifiers": ["public"]}}, {"method_name": "execute", "params": [], "throws": ["HiveViaAzkabanException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void execute() throws HiveViaAzkabanException {    ArrayList<HQL> hql = new ArrayList<HQL>();    hql.add(new UseDatabaseHQL(database));    Configuration conf = new Configuration();    try {      FileSystem fs = FileSystem.get(conf);      for (String table : tables) {        LOG.info(\"Determining HQL commands for table \" + table);        hql.addAll(addAndDrop(fs, tableLocations, table));      }      fs.close();    } catch (IOException e) {      throw new HiveViaAzkabanException(          \"Exception fetching the directories/partitions from HDFS\", e);    }    StringBuffer query = new StringBuffer();    for (HQL q : hql) {      query.append(q.toHQL()).append(\"\\n\");    }    System.out.println(\"Query to execute:\\n\" + query.toString());    try {      hqe.executeQuery(query.toString());    } catch (HiveQueryExecutionException e) {      throw new HiveViaAzkabanException(\"Problem executing query [\"          + query.toString() + \"] on Hive\", e);    }  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/hiveutils/azkaban/hive/actions/DropAllPartitionsAddLatest.java", "stars": "18", "class": {"name": "DropAllPartitionsAddLatest", "extends": null, "implements": ["HiveAction"], "modifiers": ["public"]}}, {"method_name": "addAndDrop", "params": ["FileSystem", "String", "String"], "throws": ["IOException", "HiveViaAzkabanException"], "modifiers": ["private"], "return_type": "ArrayList<HQL>", "snippet": "  private ArrayList<HQL> addAndDrop(FileSystem fs, String basepath, String table)      throws IOException, HiveViaAzkabanException {    ArrayList<HQL> toDropAndAdd = new ArrayList<HQL>();    ArrayList<String> directories = null;    directories = Utils.fetchDirectories(fs, basepath + \"/\" + table, false);    if (directories.size() == 0) {      throw new HiveViaAzkabanException(          \"No directories to remove or add found in \" + tableLocations);    }    Collections.sort(directories);    String toAdd = directories.remove(directories.size() - 1);    LOG.info(\"For table \" + table + \", going to add \" + toAdd        + \" and attempt to drop \" + directories.size() + \" others\");    for (String directory : directories) {      toDropAndAdd.add(new DropPartitionHQL(table, partition, directory, true));    }    toDropAndAdd.add(new AddExternalPartitionHQL(table, partition, toAdd,        toAdd, true));    return toDropAndAdd;  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/main/java/com/webank/wedatasphere/schedulis/jobtype/hiveutils/azkaban/hive/actions/DropAllPartitionsAddLatest.java", "stars": "18", "class": {"name": "DropAllPartitionsAddLatest", "extends": null, "implements": ["HiveAction"], "modifiers": ["public"]}}, {"method_name": "uri", "params": ["Uri", "String", "String"], "throws": null, "modifiers": ["private", "static"], "return_type": "Uri", "snippet": "    private static Uri uri(Uri baseUri, String method, String arg) {        return baseUri.buildUpon().path(PATH).appendPath(method).appendPath(arg).build();    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/callable/CallableProvider.java", "stars": "74", "class": {"name": "CallableProvider", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "call", "params": ["ContentResolver", "Uri", "String", "String", "Bundle"], "throws": null, "modifiers": ["public", "static"], "return_type": "Bundle", "snippet": "    public static Bundle call(ContentResolver resolver, Uri uri, String method, String arg,            Bundle extras) {        if (Integer.parseInt(Build.VERSION.SDK) < 11) {            Cursor cursor = resolver.query(uri(uri, method, arg), null, null, null, null);            Bundle result = null;            if (cursor != null) {                try {                    result = cursor.respond(extras);                } finally {                    cursor.close();                }            }            return result;        } else {            return resolver.call(uri, method, arg, extras);        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/callable/CallableProvider.java", "stars": "74", "class": {"name": "CallableProvider", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "query", "params": ["CallableContentProvider", "Uri"], "throws": null, "modifiers": ["public", "static"], "return_type": "Cursor", "snippet": "    public static Cursor query(CallableContentProvider provider, Uri uri) {        List<String> segments = uri.getPathSegments();        if (segments.size() == 3 && segments.get(0).equals(PATH)) {            String method = segments.get(1);            String arg = segments.get(2);            return new CallableCursor(provider, method, arg);        } else {            return null;        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/callable/CallableProvider.java", "stars": "74", "class": {"name": "CallableProvider", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "buildTaskProcess", "params": ["JobEngine", "Object"], "throws": null, "modifiers": ["public", "static"], "return_type": "TaskProcess", "snippet": "    public static TaskProcess buildTaskProcess(JobEngine engine, Object... args){        if(null == engine){            engine = JobEngine.DATAX;        }        Class<? extends TaskProcess> clazz = engineProcessMap.get(engine);        if(null != clazz){            try {                Constructor constructor = clazz.getConstructors()[0];                return (TaskProcess) constructor.newInstance(args);            } catch (Exception e) {                LOG.error(\"New task process fail, message:[\" + e.getMessage() + \"]\", e);                //ignore            }        }        return null;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/TaskProcessUtils.java", "stars": "23", "class": {"name": "TaskProcessUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getProcess", "params": ["TaskProcess"], "throws": null, "modifiers": ["public", "static"], "return_type": "Process", "snippet": "    public static Process getProcess(TaskProcess taskProcess){        if(taskProcess instanceof AbstractJavaInternalTaskProcess){            return ((AbstractJavaInternalTaskProcess)taskProcess).getProcess();        }        return null;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/TaskProcessUtils.java", "stars": "23", "class": {"name": "TaskProcessUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getJobId", "params": ["TaskProcess"], "throws": null, "modifiers": ["public", "static"], "return_type": "long", "snippet": "    public static long getJobId(TaskProcess taskProcess){        if(taskProcess instanceof AbstractTaskProcess){            return ((AbstractTaskProcess)taskProcess).getJobId();        }        return -1;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/TaskProcessUtils.java", "stars": "23", "class": {"name": "TaskProcessUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTaskId", "params": ["TaskProcess"], "throws": null, "modifiers": ["public", "static"], "return_type": "long", "snippet": "    public static long getTaskId(TaskProcess taskProcess){        if(taskProcess instanceof AbstractTaskProcess){            return ((AbstractTaskProcess)taskProcess).getTaskId();        }        return -1;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/TaskProcessUtils.java", "stars": "23", "class": {"name": "TaskProcessUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isAllocate", "params": ["TaskProcess"], "throws": null, "modifiers": ["public", "static"], "return_type": "boolean", "snippet": "    public static boolean isAllocate(TaskProcess taskProcess){        if(taskProcess instanceof AbstractJavaInternalTaskProcess){            return ((AbstractJavaInternalTaskProcess)taskProcess).isAlloc();        }        return taskProcess.isAlive();    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/TaskProcessUtils.java", "stars": "23", "class": {"name": "TaskProcessUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getWorkDir", "params": ["TaskProcess"], "throws": null, "modifiers": ["public", "static"], "return_type": "File", "snippet": "    public static File getWorkDir(TaskProcess taskProcess){        if(taskProcess instanceof AbstractTaskProcess){            return ((AbstractTaskProcess)taskProcess).getWorkDir();        }        return null;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/TaskProcessUtils.java", "stars": "23", "class": {"name": "TaskProcessUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTaskState", "params": ["TaskProcess"], "throws": null, "modifiers": ["public", "static"], "return_type": "TaskState", "snippet": "    public static TaskState getTaskState(TaskProcess taskProcess){        if(taskProcess instanceof AbstractTaskProcess){            return ((AbstractTaskProcess)taskProcess).getTaskState();        }        return null;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/executor/core/src/main/java/com/webank/wedatasphere/exchangis/executor/task/process/TaskProcessUtils.java", "stars": "23", "class": {"name": "TaskProcessUtils", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getVillageCouncils", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getVillageCouncils() {        return villageCouncils;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/model/District.java", "stars": "2", "class": {"name": "District", "extends": "AnyData", "implements": null, "modifiers": ["public"]}}, {"method_name": "getAdminCenter", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getAdminCenter() {        return adminCenter;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/model/District.java", "stars": "2", "class": {"name": "District", "extends": "AnyData", "implements": null, "modifiers": ["public"]}}, {"method_name": "showDialog", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "Dlg", "snippet": "    public Dlg showDialog(boolean editable) {        final Dlg dlg = new DistrictDlg(this);        dlg.setEditable(editable);        dlg.setVisible(true);        return dlg;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/model/District.java", "stars": "2", "class": {"name": "District", "extends": "AnyData", "implements": null, "modifiers": ["public"]}}, {"method_name": "showSonDialog", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Dlg", "snippet": "    public Dlg showSonDialog() {        final Dlg dlg = new CityDlg();        dlg.setVisible(true);        return dlg;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/model/District.java", "stars": "2", "class": {"name": "District", "extends": "AnyData", "implements": null, "modifiers": ["public"]}}, {"method_name": "springBeanPointcut", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void springBeanPointcut() {        // Method is empty as this is just a Pointcut, the implementations are in the advices.    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/aop/logging/LoggingAspect.java", "stars": "2", "class": {"name": "LoggingAspect", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pollingMethodsPointcut", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void pollingMethodsPointcut() {    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/aop/logging/LoggingAspect.java", "stars": "2", "class": {"name": "LoggingAspect", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "applicationPackagePointcut", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void applicationPackagePointcut() {        // Method is empty as this is just a Pointcut, the implementations are in the advices.    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/aop/logging/LoggingAspect.java", "stars": "2", "class": {"name": "LoggingAspect", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "logAfterThrowing", "params": ["JoinPoint", "Throwable"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void logAfterThrowing(JoinPoint joinPoint, Throwable e) {        if (env.acceptsProfiles(Profiles.of(JHipsterConstants.SPRING_PROFILE_DEVELOPMENT))) {            log.error(\"Exception in {}.{}() with cause = '{}' and exception = '{}'\", joinPoint.getSignature().getDeclaringTypeName(),                joinPoint.getSignature().getName(), e.getCause() != null ? e.getCause() : \"NULL\", e.getMessage(), e);        } else {            log.error(\"Exception in {}.{}() with cause = {}\", joinPoint.getSignature().getDeclaringTypeName(),                joinPoint.getSignature().getName(), e.getCause() != null ? e.getCause() : \"NULL\");        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/aop/logging/LoggingAspect.java", "stars": "2", "class": {"name": "LoggingAspect", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "logAround", "params": ["ProceedingJoinPoint"], "throws": ["Throwable"], "modifiers": ["public"], "return_type": "Object", "snippet": "    public Object logAround(ProceedingJoinPoint joinPoint) throws Throwable {        if (log.isDebugEnabled()) {            log.debug(\"Enter: {}.{}() with argument[s] = {}\", joinPoint.getSignature().getDeclaringTypeName(),                joinPoint.getSignature().getName(), Arrays.toString(joinPoint.getArgs()));        }        try {            Object result = joinPoint.proceed();            if (log.isDebugEnabled()) {                log.debug(\"Exit: {}.{}() with result = {}\", joinPoint.getSignature().getDeclaringTypeName(),                    joinPoint.getSignature().getName(), result);            }            return result;        } catch (IllegalArgumentException e) {            log.error(\"Illegal argument: {} in {}.{}()\", Arrays.toString(joinPoint.getArgs()),                joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName());            throw e;        }    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/aop/logging/LoggingAspect.java", "stars": "2", "class": {"name": "LoggingAspect", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setNonNullParameter", "params": ["PreparedStatement", "int", "JapaneseDate", "JdbcType"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void setNonNullParameter(PreparedStatement ps, int i, JapaneseDate parameter, JdbcType jdbcType)          throws SQLException {    ps.setDate(i, Date.valueOf(LocalDate.ofEpochDay(parameter.toEpochDay())));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/JapaneseDateTypeHandler.java", "stars": "15", "class": {"name": "JapaneseDateTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "String"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "JapaneseDate", "snippet": "  public JapaneseDate getNullableResult(ResultSet rs, String columnName) throws SQLException {    Date date = rs.getDate(columnName);    return getJapaneseDate(date);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/JapaneseDateTypeHandler.java", "stars": "15", "class": {"name": "JapaneseDateTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["ResultSet", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "JapaneseDate", "snippet": "  public JapaneseDate getNullableResult(ResultSet rs, int columnIndex) throws SQLException {    Date date = rs.getDate(columnIndex);    return getJapaneseDate(date);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/JapaneseDateTypeHandler.java", "stars": "15", "class": {"name": "JapaneseDateTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getNullableResult", "params": ["CallableStatement", "int"], "throws": ["SQLException"], "modifiers": ["public"], "return_type": "JapaneseDate", "snippet": "  public JapaneseDate getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {    Date date = cs.getDate(columnIndex);    return getJapaneseDate(date);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/JapaneseDateTypeHandler.java", "stars": "15", "class": {"name": "JapaneseDateTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getJapaneseDate", "params": ["Date"], "throws": null, "modifiers": ["private", "static"], "return_type": "JapaneseDate", "snippet": "  private static JapaneseDate getJapaneseDate(Date date) {    if (date != null) {      return JapaneseDate.from(date.toLocalDate());    }    return null;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/type/JapaneseDateTypeHandler.java", "stars": "15", "class": {"name": "JapaneseDateTypeHandler", "extends": "BaseTypeHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "load", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void load() {        this.pluginConfig.loadAndSave();        initializeStorage();        ConfigUtil.loadRecursiveConfigs(                plugin, \"limits\", BlockPlacementLimitConfig.class, this::loadLimit);        getPlugin().getLogger().info(\"Loaded \" + loadedLimitListeners.size() + \" limit configs.\");        getPlugin().registerEvents(this);    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/LimitsManager.java", "stars": "3", "class": {"name": "LimitsManager", "extends": null, "implements": ["Listener"], "modifiers": ["public"]}}, {"method_name": "initializeStorage", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initializeStorage() {        switch (getPluginConfig().getStorage()) {            case FLATFILES:            default:                storage = new FlatFileLimitsStorage(this);                getPlugin().getLogger().info(\"[Storage]: FLATFILES saved to \" + getPluginConfig().getStoragePath());                break;        }    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/LimitsManager.java", "stars": "3", "class": {"name": "LimitsManager", "extends": null, "implements": ["Listener"], "modifiers": ["public"]}}, {"method_name": "unload", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void unload() {        getPlugin().unregisterEvents(this);        getStorage().store(getPlayerLimits().values().toArray(new PlayerBlockPlacementLimit[0]));        getPlayerLimits().clear();        getLoadedLimitListeners().values().forEach(limit -> getPlugin().unregisterEvents(limit));        getLoadedLimitListeners().clear();        getLimitConfigs().clear();    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/LimitsManager.java", "stars": "3", "class": {"name": "LimitsManager", "extends": null, "implements": ["Listener"], "modifiers": ["public"]}}, {"method_name": "onPlayerQuit", "params": ["PlayerQuitEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onPlayerQuit(PlayerQuitEvent event) {        Player player = event.getPlayer();        savePlayerLimits(player);        playerLimits.remove(player.getUniqueId());    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/LimitsManager.java", "stars": "3", "class": {"name": "LimitsManager", "extends": null, "implements": ["Listener"], "modifiers": ["public"]}}, {"method_name": "loadLimit", "params": ["String", "File", "BlockPlacementLimitConfig"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void loadLimit(String id, File file, BlockPlacementLimitConfig config) {        if (loadedLimitListeners.containsKey(id)) {            getPlugin().getLogger().warning(\"Duplicate config detected: \" + id);            return;        }        limitConfigs.put(id, config);        BlockPlacementLimit limit = new BlockPlacementLimit(id, this);        loadedLimitListeners.put(id, limit);        getPlugin().registerEvents(limit);        limit.load(config);        plugin.getLogger().info(\"Loaded limit config: \" + id + \" (\" + file.getAbsolutePath() + \")\");    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/LimitsManager.java", "stars": "3", "class": {"name": "LimitsManager", "extends": null, "implements": ["Listener"], "modifiers": ["public"]}}, {"method_name": "getPlayerLimit", "params": ["OfflinePlayer"], "throws": null, "modifiers": ["public"], "return_type": "PlayerBlockPlacementLimit", "snippet": "    public PlayerBlockPlacementLimit getPlayerLimit(OfflinePlayer player) {        if (!playerLimits.containsKey(player.getUniqueId())) {            playerLimits.put(player.getUniqueId(), getStorage().load(player));        }        return playerLimits.get(player.getUniqueId());    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/LimitsManager.java", "stars": "3", "class": {"name": "LimitsManager", "extends": null, "implements": ["Listener"], "modifiers": ["public"]}}, {"method_name": "getStoragePath", "params": [], "throws": null, "modifiers": ["public"], "return_type": "File", "snippet": "    public File getStoragePath() {        return new File(getPlugin().getDataFolder(), getPluginConfig().getStoragePath());    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/LimitsManager.java", "stars": "3", "class": {"name": "LimitsManager", "extends": null, "implements": ["Listener"], "modifiers": ["public"]}}, {"method_name": "savePlayerLimits", "params": ["Player"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void savePlayerLimits(Player player) {        getStorage().store(getPlayerLimit(player));    }", "url": "https://raw.githubusercontent.com/Silthus/sLimits/master/src/main/java/net/silthus/slimits/LimitsManager.java", "stars": "3", "class": {"name": "LimitsManager", "extends": null, "implements": ["Listener"], "modifiers": ["public"]}}, {"method_name": "setFragments", "params": ["List<Fragment>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setFragments(List<Fragment> fragments) {        mFragments = fragments;        if (mFragments.size() > 0)            mHasAbout = mFragments.get(0) instanceof ShowDetailAboutFragment;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/ShowDetailPagerAdapter.java", "stars": "4", "class": {"name": "ShowDetailPagerAdapter", "extends": "FragmentPagerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getItem", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "Fragment", "snippet": "    public Fragment getItem(int position) {        return mFragments.get(position);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/ShowDetailPagerAdapter.java", "stars": "4", "class": {"name": "ShowDetailPagerAdapter", "extends": "FragmentPagerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getCount", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getCount() {        return mFragments.size();    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/ShowDetailPagerAdapter.java", "stars": "4", "class": {"name": "ShowDetailPagerAdapter", "extends": "FragmentPagerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getPageTitle", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "CharSequence", "snippet": "    public CharSequence getPageTitle(int position) {        if (mFragments.get(position) instanceof ShowDetailSeasonFragment) {            int seasonNumber = ((ShowDetailSeasonFragment) mFragments.get(position)).getSeasonNumber();            if (seasonNumber == 0)                return mContext.getString(R.string.specials);            return mContext.getString(R.string.season) + \" \" + seasonNumber;        }        return mContext.getString(R.string.about_series);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/mobile/src/main/java/butter/droid/adapters/ShowDetailPagerAdapter.java", "stars": "4", "class": {"name": "ShowDetailPagerAdapter", "extends": "FragmentPagerAdapter", "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getId() {    return delegate.getId();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/SoftCache.java", "stars": "15", "class": {"name": "SoftCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "getSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getSize() {    removeGarbageCollectedItems();    return delegate.getSize();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/SoftCache.java", "stars": "15", "class": {"name": "SoftCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "setSize", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void setSize(int size) {    this.numberOfHardLinks = size;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/SoftCache.java", "stars": "15", "class": {"name": "SoftCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "putObject", "params": ["Object", "Object"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void putObject(Object key, Object value) {    removeGarbageCollectedItems();    delegate.putObject(key, new SoftEntry(key, value, queueOfGarbageCollectedEntries));  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/SoftCache.java", "stars": "15", "class": {"name": "SoftCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "getObject", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object getObject(Object key) {    Object result = null;    @SuppressWarnings(\"unchecked\") // assumed delegate cache is totally managed by this cache    SoftReference<Object> softReference = (SoftReference<Object>) delegate.getObject(key);    if (softReference != null) {      result = softReference.get();      if (result == null) {        delegate.removeObject(key);      } else {        // See #586 (and #335) modifications need more than a read lock        synchronized (hardLinksToAvoidGarbageCollection) {          hardLinksToAvoidGarbageCollection.addFirst(result);          if (hardLinksToAvoidGarbageCollection.size() > numberOfHardLinks) {            hardLinksToAvoidGarbageCollection.removeLast();          }        }      }    }    return result;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/SoftCache.java", "stars": "15", "class": {"name": "SoftCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "removeObject", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "Object", "snippet": "  public Object removeObject(Object key) {    removeGarbageCollectedItems();    return delegate.removeObject(key);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/SoftCache.java", "stars": "15", "class": {"name": "SoftCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void clear() {    synchronized (hardLinksToAvoidGarbageCollection) {      hardLinksToAvoidGarbageCollection.clear();    }    removeGarbageCollectedItems();    delegate.clear();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/SoftCache.java", "stars": "15", "class": {"name": "SoftCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "removeGarbageCollectedItems", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void removeGarbageCollectedItems() {    SoftEntry sv;    while ((sv = (SoftEntry) queueOfGarbageCollectedEntries.poll()) != null) {      delegate.removeObject(sv.key);    }  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/SoftCache.java", "stars": "15", "class": {"name": "SoftCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "getX", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "    public double getX() {        return x;    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/math/PointD.java", "stars": "2", "class": {"name": "PointD", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getY", "params": [], "throws": null, "modifiers": ["public"], "return_type": "double", "snippet": "    public double getY() {        return y;    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/math/PointD.java", "stars": "2", "class": {"name": "PointD", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "set", "params": ["double", "double"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "    public final void set(double x, double y) {        this.x = x;        this.y = y;    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/math/PointD.java", "stars": "2", "class": {"name": "PointD", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "set", "params": ["PointD"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "    public final void set(PointD p) {        this.x = p.x;        this.y = p.y;    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/math/PointD.java", "stars": "2", "class": {"name": "PointD", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "negate", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "    public final void negate() {        x = -x;        y = -y;    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/math/PointD.java", "stars": "2", "class": {"name": "PointD", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "offset", "params": ["double", "double"], "throws": null, "modifiers": ["public", "final"], "return_type": "void", "snippet": "    public final void offset(double dx, double dy) {        x += dx;        y += dy;    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/math/PointD.java", "stars": "2", "class": {"name": "PointD", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["double", "double"], "throws": null, "modifiers": ["public", "final"], "return_type": "boolean", "snippet": "    public final boolean equals(double x, double y) {        return this.x == x && this.y == y;    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/math/PointD.java", "stars": "2", "class": {"name": "PointD", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "length", "params": [], "throws": null, "modifiers": ["public", "final"], "return_type": "double", "snippet": "    public final double length() {        return length(x, y);    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/math/PointD.java", "stars": "2", "class": {"name": "PointD", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "length", "params": ["double", "double"], "throws": null, "modifiers": ["public", "static"], "return_type": "double", "snippet": "    public static double length(double x, double y) {        return Math.sqrt(x * x + y * y);    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/math/PointD.java", "stars": "2", "class": {"name": "PointD", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"PointD{\" +                \"x=\" + x +                \", y=\" + y +                '}';    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/math/PointD.java", "stars": "2", "class": {"name": "PointD", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean equals(Object o) {        if (this == o) return true;        if (o == null || getClass() != o.getClass()) return false;        PointD pointD = (PointD) o;        return Double.compare(pointD.x, x) == 0 &&                Double.compare(pointD.y, y) == 0;    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/math/PointD.java", "stars": "2", "class": {"name": "PointD", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int hashCode() {        return Objects.hash(x, y);    }", "url": "https://raw.githubusercontent.com/pi-181/num-methods-lab6/master/src/main/java/com/demkom58/divine/math/PointD.java", "stars": "2", "class": {"name": "PointD", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "focusSearch", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "android", "snippet": "\tpublic android.view.View focusSearch (int p0)\t{\t\treturn n_focusSearch (p0);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFlyoutRecyclerAdapter_LinearLayoutWithFocus.java", "stars": "2", "class": {"name": "ShellFlyoutRecyclerAdapter_LinearLayoutWithFocus", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "n_focusSearch", "params": ["int"], "throws": null, "modifiers": ["native", "private"], "return_type": "android", "snippet": "\tprivate native android.view.View n_focusSearch (int p0);\tprivate java.util.ArrayList refList;\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFlyoutRecyclerAdapter_LinearLayoutWithFocus.java", "stars": "2", "class": {"name": "ShellFlyoutRecyclerAdapter_LinearLayoutWithFocus", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidAddReference", "params": ["java"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidAddReference (java.lang.Object obj)\t{\t\tif (refList == null)\t\t\trefList = new java.util.ArrayList ();\t\trefList.add (obj);\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFlyoutRecyclerAdapter_LinearLayoutWithFocus.java", "stars": "2", "class": {"name": "ShellFlyoutRecyclerAdapter_LinearLayoutWithFocus", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "monodroidClearReferences", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void monodroidClearReferences ()\t{\t\tif (refList != null)\t\t\trefList.clear ();\t}", "url": "https://raw.githubusercontent.com/AtomizedSoul/TulpApp/master/TulpApp.Android/obj/Release/90/android/src/crc643f46942d9dd1fff9/ShellFlyoutRecyclerAdapter_LinearLayoutWithFocus.java", "stars": "2", "class": {"name": "ShellFlyoutRecyclerAdapter_LinearLayoutWithFocus", "extends": "android", "implements": ["mono"], "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString(){        return new StringBuilder()                .append(\"PersonItemPair(\")                .append(person)                .append(\", \")                .append(item)                .append(\" )\")                .toString();    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nestedresulthandler/PersonItemPair.java", "stars": "15", "class": {"name": "PersonItemPair", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPerson", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Person", "snippet": "    public Person getPerson() {        return person;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nestedresulthandler/PersonItemPair.java", "stars": "15", "class": {"name": "PersonItemPair", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setPerson", "params": ["Person"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setPerson(Person person) {        this.person = person;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nestedresulthandler/PersonItemPair.java", "stars": "15", "class": {"name": "PersonItemPair", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getItem", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Item", "snippet": "    public Item getItem() {        return item;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nestedresulthandler/PersonItemPair.java", "stars": "15", "class": {"name": "PersonItemPair", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setItem", "params": ["Item"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setItem(Item item) {        this.item = item;    }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/test/java/org/apache/ibatis/submitted/nestedresulthandler/PersonItemPair.java", "stars": "15", "class": {"name": "PersonItemPair", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getId() {    return delegate.getId();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/SynchronizedCache.java", "stars": "15", "class": {"name": "SynchronizedCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "getSize", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "int", "snippet": "  public synchronized int getSize() {    return delegate.getSize();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/SynchronizedCache.java", "stars": "15", "class": {"name": "SynchronizedCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "putObject", "params": ["Object", "Object"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "  public synchronized void putObject(Object key, Object object) {    delegate.putObject(key, object);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/SynchronizedCache.java", "stars": "15", "class": {"name": "SynchronizedCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "getObject", "params": ["Object"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "Object", "snippet": "  public synchronized Object getObject(Object key) {    return delegate.getObject(key);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/SynchronizedCache.java", "stars": "15", "class": {"name": "SynchronizedCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "removeObject", "params": ["Object"], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "Object", "snippet": "  public synchronized Object removeObject(Object key) {    return delegate.removeObject(key);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/SynchronizedCache.java", "stars": "15", "class": {"name": "SynchronizedCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "clear", "params": [], "throws": null, "modifiers": ["synchronized", "public"], "return_type": "void", "snippet": "  public synchronized void clear() {    delegate.clear();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/SynchronizedCache.java", "stars": "15", "class": {"name": "SynchronizedCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "hashCode", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int hashCode() {    return delegate.hashCode();  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/SynchronizedCache.java", "stars": "15", "class": {"name": "SynchronizedCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "equals", "params": ["Object"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean equals(Object obj) {    return delegate.equals(obj);  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/cache/decorators/SynchronizedCache.java", "stars": "15", "class": {"name": "SynchronizedCache", "extends": null, "implements": ["Cache"], "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run(){        try{            DBManager manager = new DBManager();            manager.connect();            ObjectOutputStream outputStream = new ObjectOutputStream(socket.getOutputStream());            ObjectInputStream inputStream = new ObjectInputStream(socket.getInputStream());            PackageData packageData = null;            while ( (packageData=(PackageData)inputStream.readObject())!=null ){                if(packageData.getOperationType().equals(\"ADD\")){                    You userFromClient = packageData.getYou();                    manager.adduser(userFromClient);                }                else if(packageData.getOperationType().equals(\"LIST\")){                    ArrayList<You> infoForClient = manager.getAllusers();                    PackageData toClient = new PackageData(infoForClient);                    outputStream.writeObject(toClient);                }            }            inputStream.close();            outputStream.close();            socket.close();        }catch (Exception e){            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/Bekzatiitu/Final_Bekzat_Bekarys_ishs1901/master/Final%20Bekzat%20Bekarys%20ishs1901/src/ServerThread.java", "stars": "1", "class": {"name": "ServerThread", "extends": "Thread", "implements": null, "modifiers": ["public"]}}, {"method_name": "configure", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "  protected void configure() {    bind(Props.class).toInstance(this.props);    bind(MetricRegistry.class).in(Scopes.SINGLETON);  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/az-core/src/main/java/azkaban/AzkabanCoreModule.java", "stars": "18", "class": {"name": "AzkabanCoreModule", "extends": "AbstractModule", "implements": null, "modifiers": ["public"]}}, {"method_name": "montrerTableauMultijoueur", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void montrerTableauMultijoueur() {\t\tplat.montrerPlateau();\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/MatchIA.java", "stars": "4", "class": {"name": "MatchIA", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "montrerMainMultijoueur", "params": ["Joueur"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void montrerMainMultijoueur(Joueur nomJoueur) {\t\tSystem.out.print(\"  { \");\t\tfor (int i = 0; i < 6; ++i)\t\t\tSystem.out.print(nomJoueur.verifierLettre(i) + \", \");\t\tSystem.out.print(nomJoueur.verifierLettre(6) + \" }\\n\");\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/MatchIA.java", "stars": "4", "class": {"name": "MatchIA", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "tourActuel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Joueur", "snippet": "\tpublic Joueur tourActuel() {\t\tif (joueur.verifierTour() == true)\t\t\treturn joueur;\t\telse\t\t\treturn ordi;\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/MatchIA.java", "stars": "4", "class": {"name": "MatchIA", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "adversaireActuel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Joueur", "snippet": "\tpublic Joueur adversaireActuel() {\t\tif (joueur.verifierTour() == true)\t\t\treturn ordi;\t\telse\t\t\treturn joueur;\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/MatchIA.java", "stars": "4", "class": {"name": "MatchIA", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isPlayerTurn", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean isPlayerTurn() {\t\treturn joueur.verifierTour();\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/MatchIA.java", "stars": "4", "class": {"name": "MatchIA", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "asGagne", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean asGagne() { // test pour savoir si un joueur n'a plus de lettres a placer.\t\tfor (int i = 0; i < 7; i++) {\t\t\tif (tourActuel().verifierLettre(i) != 0)\t\t\t\treturn false;\t\t}\t\treturn true;\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/MatchIA.java", "stars": "4", "class": {"name": "MatchIA", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "totalUsedWords", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int totalUsedWords() {\t\treturn usedWords.size();\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/MatchIA.java", "stars": "4", "class": {"name": "MatchIA", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "lettresRestant", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int lettresRestant() {\t\treturn getNombreLettre().size();\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/MatchIA.java", "stars": "4", "class": {"name": "MatchIA", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "isWordUsed", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean isWordUsed(String value) {\t\treturn usedWords.contains(value);\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/MatchIA.java", "stars": "4", "class": {"name": "MatchIA", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "newWordUsed", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void newWordUsed(String value) {\t\tusedWords.add(value);\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/MatchIA.java", "stars": "4", "class": {"name": "MatchIA", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "suivantTour", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void suivantTour() {\t\tif (tourActuel().verifierNom() == joueur.verifierNom()) {\t\t\tjoueur.terminerTour();\t\t\tordi.commencerTour();\t\t} else {\t\t\tordi.terminerTour();\t\t\tjoueur.commencerTour();\t\t}\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/MatchIA.java", "stars": "4", "class": {"name": "MatchIA", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "pointsFin", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Joueur", "snippet": "\tpublic Joueur pointsFin() {\t\tif (tourActuel().verifierTourPasser() && adversaireActuel().verifierTourPasser()) {\t\t\t// La partie est termin\u00e9 car il n'y a pas plus de lettres pour les deux personnes.\t\t\t// Juste comparer qui a plus de points\t\t\tif (tourActuel().verifierScore() == adversaireActuel().verifierScore()) {\t\t\t\tJoueur gagner = new Joueur(\"Match Null\", getNombreLettre());\t\t\t\treturn gagner;\t\t\t} else {\t\t\t\tif (tourActuel().verifierScore() > adversaireActuel().verifierScore())\t\t\t\t\treturn tourActuel();\t\t\t\telse\t\t\t\t\treturn adversaireActuel();\t\t\t}\t\t} else {\t\t\t// si la partie est terminee alors le joueur qui viens d'utiliser toutes ces\t\t\t// lettres restantes doit ce voir ajouter a son score la somme des lettres\t\t\t// restantes a son adversaires.\t\t\tint points = 0;\t\t\tint[] scoreLettre = { 1, 3, 3, 2, 1, 4, 2, 4, 1, 8, 10, 1, 2, 1, 1, 3, 8, 1, 1, 1, 1, 4, 10, 10, 10, 10,\t\t\t\t\t0 };\t\t\t// le joueur actuel qui a fini la partie donc on calcule la somme des lettres\t\t\t// restante du joueur adversaire.\t\t\tfor (int i = 0; i < 7; ++i) {\t\t\t\tif (adversaireActuel().verifierLettre(i) >= 97)\t\t\t\t\tpoints += scoreLettre[adversaireActuel().verifierLettre(i) - 97];\t\t\t}\t\t\t// actualise le nouveau scores des deux joueurs\t\t\ttourActuel().nouveauScore(tourActuel().verifierScore() + points);\t\t\t// Il y a deux types de points pour l'adversaire!!!!\t\t\t// Adversaire Actuel avec points negatif\t\t\tadversaireActuel().nouveauScore(adversaireActuel().verifierScore() - points);\t\t\t// Adversaire Actuel avec min valeur 0\t\t\t// int scoreAdversaire = (adversaireActuel().verifierScore() - points >= 0) ?\t\t\t// adversaireActuel().verifierScore() - points : 0 ;\t\t\t// adversaireActuel().nouveauScore(scoreAdversaire);\t\t\tif (tourActuel().verifierScore() == adversaireActuel().verifierScore()) {\t\t\t\tJoueur gagner = new Joueur(\"Match Null\", getNombreLettre());\t\t\t\treturn gagner;\t\t\t} else {\t\t\t\tif (tourActuel().verifierScore() > adversaireActuel().verifierScore())\t\t\t\t\treturn tourActuel();\t\t\t\telse\t\t\t\t\treturn adversaireActuel();\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/MatchIA.java", "stars": "4", "class": {"name": "MatchIA", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getBestMove", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Mot", "snippet": "\tpublic Mot getBestMove() { // retourne le mot devant \u00eatre saisi par l'ia (d\u00e9pend de la difficult\u00e9 choisie)\t\tpermutationSearch pSResult = new permutationSearch(dicoAnagram, dico, plat, ordi.verifierMain(), this.usedWords);\t\tMot retVal = null;\t\tif (pSResult.totalPossibleWords() == 0)\t\t\treturn retVal;\t\tArrayList<Mot> threeWordList = new ArrayList<Mot>();\t\tfor (int index = 0; index < pSResult.totalPossibleWords(); ++index){\t\t\tif(pSResult.possibleWord(index).verifierNom().length() >= 3)\t\t\t\tthreeWordList.add(pSResult.possibleWord(index));\t\t}\t\tif(threeWordList.size() == 0){\t\t\treturn retVal;\t\t}\t\tswitch (difficulte) {\t\tcase 1:\t\t\t// Facile\t\t\t// Seulement choisir le mot qui donne le moins de points\t\t\tretVal = threeWordList.get(threeWordList.size() - 1);\t\t\tbreak;\t\tcase 2:\t\t\t// Normale\t\t\t// choisir le mots qui est au milieu\t\t\tretVal = threeWordList.get(Math.floorDiv(threeWordList.size() - 1, 2));\t\t\tbreak;\t\tcase 3:\t\t\t// Difficile\t\t\t// La premier mot de la liste sera celui qui rapporte le plus de points de tout\t\t\t// les possibilites\t\t\tretVal = threeWordList.get(0);\t\t\tbreak;\t\t}\t\treturn retVal;\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/MatchIA.java", "stars": "4", "class": {"name": "MatchIA", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "completeIATurn", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "\tpublic int completeIATurn() {\t\tMot motASaisir = getBestMove();\t\tif (motASaisir != null) {\t\t\t// ins\u00e9rer un mot dans le tableau\t\t\tproceedWithAction(ordi, motASaisir.getLettres(), motASaisir.verifierX(), motASaisir.verifierY(),\t\t\t\t\tmotASaisir.verifierHorizontal());\t\t\treturn 0;\t\t} else {\t\t\t// si ce n'est pas le cas on regarde combien de lettres il reste dans la pioche\t\t\tif (lettresRestant() > 0) { // si il reste des lettres dans la pioche on decide de jeter nos lettres\t\t\t\tfor (int i = 0; i < ordi.verifierMain().length; i++)\t\t\t\t\tsetNombreLettre(ordi.jeterLettre(i, getNombreLettre()));\t\t\t\treturn -1;\t\t\t} else // Juste un autre tour qu'il ne peut rien faire, v\u00e9rifiez si l'autre joueur ne peut pas aussi gagner ou donner un autre tour sans se d\u00e9placer\t\t\tif (tourActuel().verifierTourPasser() && adversaireActuel().verifierTourPasser()) {\t\t\t\t// Il n'y a plus de lettres et les deux joueurs n'ont rien \u00e0 jouer\t\t\t\tSystem.out.print(\"\\n\\n\\t\\t=== There aren't more combinations available!!! ===\");\t\t\t\tif (tourActuel().verifierScore() == adversaireActuel().verifierScore()) {\t\t\t\t\t// La partie s'est termin\u00e9e par une \u00e9galit\u00e9 (les deux joueurs ont le m\u00eame nombre de points)\t\t\t\t\tSystem.out.print(\"\\n\\n\\t\\t === MATCH NULL ===\");\t\t\t\t\tSystem.out.print(\"\\n\\n\\t\\t   Classement final!!\");\t\t\t\t\tSystem.out\t\t\t\t\t\t\t.print(\"\\n\\t\\tJoueur \" + joueur.verifierNom() + \": \" + joueur.verifierScore() + \" points!\");\t\t\t\t\tSystem.out.print(\"\\n\\t\\tJoueur \" + ordi.verifierNom() + \": \" + ordi.verifierScore() + \" points!\");\t\t\t\t} else {\t\t\t\t\tJoueur gagnant = (tourActuel().verifierScore() > adversaireActuel().verifierScore()) ? tourActuel()\t\t\t\t\t\t\t: adversaireActuel();\t\t\t\t\tSystem.out.print(\"\\n\\n\\t\\t=== Le gagnant est \" + gagnant.verifierNom() + \"!!! ===\");\t\t\t\t\tSystem.out.print(\"\\n\\n\\t\\t   Classement final!!\");\t\t\t\t\tSystem.out\t\t\t\t\t\t\t.print(\"\\n\\t\\tJoueur \" + joueur.verifierNom() + \": \" + joueur.verifierScore() + \" points!\");\t\t\t\t\tSystem.out.print(\"\\n\\t\\tJoueur \" + ordi.verifierNom() + \": \" + ordi.verifierScore() + \" points!\");\t\t\t\t}\t\t\t\t// D\u00e9clare la fin du jeu\t\t\t\treturn 1;\t\t\t} else {\t\t\t\t// Le jeu n'a pas pris fin pour le moment, passez au tour suivant\t\t\t\tordi.incrementTourPasser();\t\t\t\treturn -2;\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/MatchIA.java", "stars": "4", "class": {"name": "MatchIA", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "proceedWithAction", "params": ["Joueur", "int", "int", "int", "Boolean"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean proceedWithAction(Joueur nomJoueur, int[] mot, int xPos, int yPos, Boolean horizontal) {\t\t// Si ce n'est pas au tour du joueur actuel, ne le laisse rien faire\t\tif (tourActuel() != nomJoueur)\t\t\treturn false;\t\t// Nombre de combination trouve\t\tint combinations = 0;\t\tif (plat.returnBoite(7, 7) == 3 && horizontal) {\t\t\t// this is the first turn of the game\t\t\tif(xPos == 7) {\t\t\t\tif(yPos > 7 || (yPos + mot.length) < 7 )\t\t\t\t\treturn false;\t\t\t} else\t\t\t\treturn false;\t\t}\t\tif (plat.returnBoite(7, 7) == 3 && !horizontal) {\t\t\tif(yPos == 7) {\t\t\t\tif(xPos > 7 || (xPos + mot.length) < 7 )\t\t\t\t\treturn false;\t\t\t} else\t\t\t\treturn false;\t\t}\t\t// v\u00e9rifier qu'il n'y a pas de majuscule\t\tfor (int i = 0; i < mot.length; ++i) {\t\t\tif ((65 <= mot[i]) && (mot[i] <= 90))\t\t\t\tmot[i] += 32;\t\t}\t\tif (horizontal) {\t\t\t// V\u00e9rifie primordialement dans l'ordre vertical chacune des lettres et \u00e0 la fin\t\t\t// il v\u00e9rifie chaque extr\u00eame avec ses voisins horizontaux\t\t\tint topX = 0;\t\t\tint subX = 0;\t\t\tint letterCount = 0;\t\t\tfor (int i = yPos; i < (yPos + mot.length); ++i) {\t\t\t\tletterCount = 1;\t\t\t\t// Il commence \u00e0 se d\u00e9placer vers la droite \u00e0 partir du placement de la premi\u00e8re\t\t\t\t// lettre\t\t\t\t// Je v\u00e9rifie au-dessus de la ligne de lettres\t\t\t\tif(plat.returnBoite(xPos, i) <= 6) {\t\t\t\t\tsubX = xPos;\t\t\t\t\twhile (plat.returnBoite(subX - 1, i) >= 5) {\t\t\t\t\t\tletterCount++;\t\t\t\t\t\tsubX--;\t\t\t\t\t}\t\t\t\t\t// Je v\u00e9rifie sous la ligne de lettres\t\t\t\t\ttopX = xPos;\t\t\t\t\twhile (plat.returnBoite(topX + 1, i) >= 5) {\t\t\t\t\t\tletterCount++;\t\t\t\t\t\ttopX++;\t\t\t\t\t}\t\t\t\t}\t\t\t\t// La lettre initiale est compt\u00e9e deux fois, donc le compteur doit avoir une\t\t\t\t// valeur sup\u00e9rieure \u00e0 2 pour \u00eatre admis\t\t\t\tif (letterCount >= 2) {\t\t\t\t\t// Une s\u00e9quence de lettres a \u00e9t\u00e9 trouv\u00e9e, elle doit \u00eatre calcul\u00e9e s'il s'agit\t\t\t\t\t// d'un mot reconnaissable\t\t\t\t\tString possibleMot = \"\";\t\t\t\t\tfor (int j = subX; j <= topX; ++j) { //\t\t\t\t\t\tif (j == xPos)\t\t\t\t\t\t\tpossibleMot += Character.toString((char) mot[i - yPos]);\t\t\t\t\t\telse\t\t\t\t\t\t\tpossibleMot += Character.toString((char) plat.returnBoite(j, i));\t\t\t\t\t}\t\t\t\t\tif (dico.contains('\"' + possibleMot + '\"') && !isWordUsed(possibleMot)) {\t\t\t\t\t\t// Le mot trouv\u00e9 a \u00e9t\u00e9 reconnu dans le dictionnaire !!!!!\t\t\t\t\t\tnewWordUsed(possibleMot);\t\t\t\t\t\tnomJoueur.nouveauScore(\t\t\t\t\t\t\t\tnomJoueur.verifierScore() + nomJoueur.calculerScore(mot, subX, yPos, false, plat));\t\t\t\t\t\tcombinations++;\t\t\t\t\t} else {\t\t\t\t\t\treturn false;\t\t\t\t\t}\t\t\t\t}\t\t\t}\t\t\t// Fin des r\u00e9visions verticales, il est maintenant temps de r\u00e9viser horizontalement\t\t\tint subY = yPos;\t\t\tint topY = yPos + mot.length - 1;\t\t\tletterCount = mot.length;\t\t\t// Je v\u00e9rifie \u00e0 gauche du premier \u00e9l\u00e9ment de la ligne de lettres\t\t\twhile (((int) plat.returnBoite(xPos, subY - 1) >= 5)) {\t\t\t\tletterCount++;\t\t\t\tsubY--;\t\t\t}\t\t\t// Je v\u00e9rifie \u00e0 droite de la ligne de lettres\t\t\twhile (((int) plat.returnBoite(xPos, topY + 1) >= 5)) {\t\t\t\tletterCount++;\t\t\t\ttopY++;\t\t\t}\t\t\t// Encore une fois, la lettre initiale est compt\u00e9e deux fois, donc le compteur\t\t\t// doit avoir une valeur sup\u00e9rieure \u00e0 2 pour \u00eatre admis\t\t\tif (letterCount > 2) {\t\t\t\t// Une s\u00e9quence de lettres a \u00e9t\u00e9 trouv\u00e9e, elle doit \u00eatre calcul\u00e9e s'il s'agit\t\t\t\t// d'un mot reconnaissable\t\t\t\tString possibleMot = \"\";\t\t\t\tBoolean usedPlateau = false;\t\t\t\tfor (int i = subY; i <= topY; ++i) { //\t\t\t\t\tif (plat.returnBoite(xPos, i) < 5 && plat.returnBoite(xPos, i) >= 0)\t\t\t\t\t\tpossibleMot += Character.toString((char) mot[i - yPos]);\t\t\t\t\telse {\t\t\t\t\t\tpossibleMot += Character.toString((char) plat.returnBoite(xPos, i));\t\t\t\t\t\tusedPlateau = true;\t\t\t\t\t}\t\t\t\t}\t\t\t\tif (plat.returnBoite(7, 7) != 3 && usedPlateau == false)\t\t\t\t\treturn false;\t\t\t\tif (dico.contains('\"' + possibleMot + '\"') && !isWordUsed(possibleMot)) {\t\t\t\t\t// Le mot trouv\u00e9 a \u00e9t\u00e9 reconnu dans le dictionnaire !!!!!\t\t\t\t\tnewWordUsed(possibleMot);\t\t\t\t\tnomJoueur.nouveauScore(\t\t\t\t\t\t\tnomJoueur.verifierScore() + nomJoueur.calculerScore(mot, xPos, subY, true, plat));\t\t\t\t\tcombinations++;\t\t\t\t} else {\t\t\t\t\treturn false;\t\t\t\t}\t\t\t} else {\t\t\t\treturn false;\t\t\t}\t\t} else {\t\t\t// V\u00e9rifie principalement dans l'ordre horizontal chacune des lettres et \u00e0 la\t\t\t// fin il v\u00e9rifie chaque extr\u00eame avec ses voisins verticaux\t\t\tint subY = yPos;\t\t\tint topY = yPos + mot.length - 1;\t\t\tint letterCount = mot.length;\t\t\tfor (int i = xPos; i < (xPos + mot.length); ++i) {\t\t\t\tletterCount = 1;\t\t\t\t// Commence \u00e0 descendre du placement de la premi\u00e8re lettre\t\t\t\tsubY = yPos;\t\t\t\t// Si le mot a d\u00e9j\u00e0 \u00e9t\u00e9 plac\u00e9, ne v\u00e9rifiez pas s'il cr\u00e9e un mot dans l'autre sens car il sera \u00e9videmment li\u00e9 \u00e0 un mot d\u00e9j\u00e0 cr\u00e9\u00e9\t\t\t\tif(plat.returnBoite(i, yPos) <= 6) {\t\t\t\t\t// Je v\u00e9rifie \u00e0 gauche du premier \u00e9l\u00e9ment de la ligne de lettres\t\t\t\t\twhile (plat.returnBoite(i, subY - 1) >= 5) {\t\t\t\t\t\tletterCount++;\t\t\t\t\t\tsubY--;\t\t\t\t\t}\t\t\t\t\ttopY = yPos;\t\t\t\t\t// Je v\u00e9rifie \u00e0 droite du m\u00eame \u00e9l\u00e9ment dans la rang\u00e9e de lettres\t\t\t\t\twhile (plat.returnBoite(i, topY + 1) >= 5) {\t\t\t\t\t\tletterCount++;\t\t\t\t\t\ttopY++;\t\t\t\t\t}\t\t\t\t}\t\t\t\t// Encore une fois, la lettre initiale est compt\u00e9e deux fois, donc le compteur\t\t\t\t// doit avoir une valeur sup\u00e9rieure \u00e0 2 pour \u00eatre admis\t\t\t\tif (letterCount >= 2) {\t\t\t\t\t// Une s\u00e9quence de lettres a \u00e9t\u00e9 trouv\u00e9e, elle doit \u00eatre calcul\u00e9e s'il s'agit\t\t\t\t\t// d'un mot reconnaissable\t\t\t\t\tString possibleMot = \"\";\t\t\t\t\tfor (int j = subY; j <= topY; ++j) { //\t\t\t\t\t\tif (j == yPos)\t\t\t\t\t\t\tpossibleMot += Character.toString((char) mot[i - xPos]);\t\t\t\t\t\telse\t\t\t\t\t\t\tpossibleMot += Character.toString((char) plat.returnBoite(i, j));\t\t\t\t\t}\t\t\t\t\tif (dico.contains('\"' + possibleMot + '\"') && !isWordUsed(possibleMot)) {\t\t\t\t\t\t// Le mot trouv\u00e9 a \u00e9t\u00e9 reconnu dans le dictionnaire !!!!!\t\t\t\t\t\tnewWordUsed(possibleMot);\t\t\t\t\t\tnomJoueur.nouveauScore(\t\t\t\t\t\t\t\tnomJoueur.verifierScore() + nomJoueur.calculerScore(mot, xPos, subY, true, plat));\t\t\t\t\t\tcombinations++;\t\t\t\t\t} else {\t\t\t\t\t\treturn false;\t\t\t\t\t}\t\t\t\t}\t\t\t}\t\t\t// Fin des r\u00e9visions horizontalement, il est maintenant temps de r\u00e9viser\t\t\t// verticalement\t\t\tint subX = xPos;\t\t\tint topX = xPos + mot.length - 1;\t\t\tletterCount = mot.length;\t\t\t// Je v\u00e9rifie au-dessus du premier \u00e9l\u00e9ment de la ligne de lettres\t\t\twhile (plat.returnBoite(subX - 1, yPos) >= 5) {\t\t\t\tletterCount++;\t\t\t\tsubX--;\t\t\t}\t\t\t// Je v\u00e9rifie sous la ligne de lettres\t\t\twhile (plat.returnBoite(topX + 1, yPos) >= 5) {\t\t\t\tletterCount++;\t\t\t\ttopX++;\t\t\t}\t\t\t// Encore une fois, la lettre initiale est compt\u00e9e deux fois, donc le compteur\t\t\t// doit avoir une valeur sup\u00e9rieure \u00e0 2 pour \u00eatre admis\t\t\tif (letterCount > 2) {\t\t\t\t//System.out.println(\"Entr\u00e9 car il y a 3 lettres ou plus\");\t\t\t\t// Une s\u00e9quence de lettres a \u00e9t\u00e9 trouv\u00e9e, elle doit \u00eatre calcul\u00e9e s'il s'agit\t\t\t\t// d'un mot reconnaissable\t\t\t\tString possibleMot = \"\";\t\t\t\tBoolean usedPlateau = false;\t\t\t\tfor (int i = subX; i <= topX; ++i) { //\t\t\t\t\tif (plat.returnBoite(i, yPos) < 5 && plat.returnBoite(i, yPos) >= 0) {\t\t\t\t\t\tpossibleMot += Character.toString((char) mot[i - xPos]);\t\t\t\t\t} else {\t\t\t\t\t\tpossibleMot += Character.toString((char) plat.returnBoite(i, yPos));\t\t\t\t\t\tusedPlateau = true;\t\t\t\t\t}\t\t\t\t}\t\t\t\tif (plat.returnBoite(7, 7) != 3 && usedPlateau == false)\t\t\t\t\treturn false;\t\t\t\tif (dico.contains('\"' + possibleMot + '\"') && !isWordUsed(possibleMot)) {\t\t\t\t\t// Le mot trouv\u00e9 a \u00e9t\u00e9 reconnu dans le dictionnaire !!!!!\t\t\t\t\tnewWordUsed(possibleMot);\t\t\t\t\tnomJoueur.nouveauScore(\t\t\t\t\t\t\tnomJoueur.verifierScore() + nomJoueur.calculerScore(mot, subX, yPos, false, plat));\t\t\t\t\tcombinations++;\t\t\t\t} else {\t\t\t\t\treturn false;\t\t\t\t}\t\t\t} else {\t\t\t\treturn false;\t\t\t}\t\t}\t\t// Si il y a quelque combination de mot trouv\u00ef\u00bf\u00bd, supprimer les lettres\t\t// utilises.\t\tif (combinations > 0) {\t\t\t// Supprimer les lettres de la main (sans compter les lettres que sont deja sur\t\t\t// le table pour former la mot) et\t\t\t// mettre de nouvelle lettre tirer au hazard parmis celle encore disponible\t\t\t// mot: C'est le mot qui est forme sur le Plateau\t\t\t// main: C'est la main avec toutes les lettres a ta disposition.\t\t\tint j; // index pour trouver la position de la lettre selectione (mot[i]) dans la main\t\t\tBoolean trouve; // Boolean qui stope si le lettre est trouv\u00ef\u00bf\u00bd\t\t\tfor (int i = 0; i < mot.length; ++i) {\t\t\t\tif (!(mot[i] == plat.returnBoite(xPos, yPos + i) && horizontal)\t\t\t\t\t\t&& !(mot[i] == plat.returnBoite(xPos + i, yPos) && !horizontal)) {\t\t\t\t\t// Lettre c'est ne pas deja pose d'avant\t\t\t\t\t// trouve le lettre dans notre main et echanger\t\t\t\t\tj = 0; // On doit trouver une AUTRE lettre dans notre main, donc on restart index et Boolean\t\t\t\t\ttrouve = false;\t\t\t\t\twhile (j < 7 && !trouve) { // recherche un a un sur la main jusqu'a que la lettre soit trouv\u00ef\u00bf\u00bd dans la main ....\t\t\t\t\t\tif (mot[i] == nomJoueur.verifierLettre(j)) { // si la lettre que je suis maintenant est la  lettre chercher\t\t\t\t\t\t\tthis.setNombreLettre(nomJoueur.echangerLettre(j, getNombreLettre()));\t\t\t\t\t\t\ttrouve = true; // pour \u00ef\u00bf\u00bdviter la boucle infini, clore cette recherche\t\t\t\t\t\t} else\t\t\t\t\t\t\tj++; // Je n'ai pas trouve, on passe a l'index suivant\t\t\t\t\t} // Fin de la recherche pour la lettre utiliser\t\t\t\t}\t\t\t} // Fin de la recherche de toute les lettres utiliser\t\t\t// Inserter mot dans le Plateau\t\t\tplat.modifierPlateau(mot, xPos, yPos, horizontal);\t\t\treturn true;\t\t}\t\treturn false;\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/MatchIA.java", "stars": "4", "class": {"name": "MatchIA", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) throws IOException {\t\tScanner scanner = new Scanner(System.in);\t\tSystem.out.print(\"\\n\\n\\n === EXEMPLE D'UNE GAME EN MODE VS ORDINATEUR === \\n\");\t\tSystem.out.print(\"\\n\\n\\tEntr\u00e9e vos pseudo!\");\t\tSystem.out.print(\"\\n\\tNom du Joueur: \");\t\tString premiereJoueur = scanner.nextLine();\t\tSystem.out.print(\"\\n\\tQuelle difficult\u00e9 ?\");\t\tSystem.out.print(\"\\n\\t1: Gentil\");\t\tSystem.out.print(\"\\n\\t2: Normal\");\t\tSystem.out.print(\"\\n\\t3: Sans piti\u00e9\");\t\tSystem.out.print(\"\\n\\n\\tQuelle option choisi tu ?: \");\t\tint difficulte = Integer.parseInt(scanner.nextLine());\t\tMatchIA gameInstance = new MatchIA(premiereJoueur, difficulte); // A MODIFIER\t\tint iterations = 0;\t\tint choice = -1;\t\tdo {\t\t\tSystem.out.print(\"\\n\\n\\t\\t == Game Menu ==\\n\\n\");\t\t\tSystem.out.print(\"\\n\\t Tour actuel: \" + gameInstance.tourActuel().verifierNom() + \"\\n\\n\");\t\t\tgameInstance.montrerTableauMultijoueur();\t\t\tif (gameInstance.isPlayerTurn()) {\t\t\t\tSystem.out.print(\"\\n\\n\\tStatut de la main du joueur\");\t\t\t\tgameInstance.montrerMainMultijoueur(gameInstance.tourActuel());\t\t\t\tSystem.out.print(\"\\n\\n\\tOption 1: Mettre un mot sur le plateau\");\t\t\t\tSystem.out.print(\"\\n\\tOption 2: Jetter des lettres\");\t\t\t\tSystem.out.print(\"\\n\\tOption 3: Passer mon tour\");\t\t\t\tSystem.out.print(\"\\n\\tOption 4: Suggestion Mots\");\t\t\t\tSystem.out.print(\"\\n\\n\\tQuelle option choisi tu ?: \");\t\t\t\tchoice = Integer.parseInt(scanner.nextLine());\t\t\t\tswitch (choice) {\t\t\t\tcase 1: // Jouer avec les mots dispo\t\t\t\t\tSystem.out.print(\"\\n\\nQuel mot veux-tu form\u00e9 ?: \");\t\t\t\t\tString readWord = scanner.nextLine();\t\t\t\t\tSystem.out.print(\"Quelle position? (x): \");\t\t\t\t\tint readXPos = Integer.parseInt(scanner.nextLine());\t\t\t\t\tSystem.out.print(\"Quelle position? (y): \");\t\t\t\t\tint readYPos = Integer.parseInt(scanner.nextLine());\t\t\t\t\tSystem.out.print(\"Horizontal (1) ou vertical (0)?: \");\t\t\t\t\tint readHorizontal = Integer.parseInt(scanner.nextLine());\t\t\t\t\tint[] motArray = new int[readWord.length()];\t\t\t\t\tfor (int i = 0; i < readWord.length(); ++i)\t\t\t\t\t\tmotArray[i] = (int) readWord.charAt(i);\t\t\t\t\tif (gameInstance.proceedWithAction(gameInstance.tourActuel(), motArray, readXPos, readYPos,\t\t\t\t\t\t\treadHorizontal == 1)) {\t\t\t\t\t\tSystem.out.print(\"\\n\\nMot ins\u00e9r\u00e9! F\u00e9licitations!! \");\t\t\t\t\t\tSystem.out.print(\"\\n\\nJoueur \" + gameInstance.tourActuel().verifierNom() + \" a un total de \"\t\t\t\t\t\t\t\t+ gameInstance.tourActuel().verifierScore() + \" points!\");\t\t\t\t\t\tif (gameInstance.asGagne()) {\t\t\t\t\t\t\tJoueur gagnant = gameInstance.pointsFin();\t\t\t\t\t\t\tif (gagnant.verifierNom() == \"Match Null\") {\t\t\t\t\t\t\t\t// La partie s'est termin\u00e9e par une \u00e9galit\u00e9 (les deux joueurs ont le m\u00eame nombre\t\t\t\t\t\t\t\t// de points)\t\t\t\t\t\t\t\tSystem.out.print(\"\\n\\n\\t\\t === MATCH NULL ===\");\t\t\t\t\t\t\t\tSystem.out.print(\"\\n\\n\\t\\t   Classement final!!\");\t\t\t\t\t\t\t\tSystem.out.print(\"\\n\\t\\tJoueur \" + gameInstance.joueur.verifierNom() + \": \"\t\t\t\t\t\t\t\t\t\t+ gameInstance.joueur.verifierScore() + \" points!\");\t\t\t\t\t\t\t\tSystem.out.print(\"\\n\\t\\tIA: \" + gameInstance.ordi.verifierScore() + \" points!\");\t\t\t\t\t\t\t} else {\t\t\t\t\t\t\t\tSystem.out.print(\"\\n\\n\\t\\t=== Le gagnant est \" + gagnant.verifierNom() + \"!!! ===\");\t\t\t\t\t\t\t\tSystem.out.print(\"\\n\\n\\t\\t   Classement final!!\");\t\t\t\t\t\t\t\tSystem.out.print(\"\\n\\t\\tJoueur \" + gameInstance.joueur.verifierNom() + \": \"\t\t\t\t\t\t\t\t\t\t+ gameInstance.joueur.verifierScore() + \" points!\");\t\t\t\t\t\t\t\tSystem.out.print(\"\\n\\t\\tIA: \" + gameInstance.ordi.verifierScore() + \" points!\");\t\t\t\t\t\t\t}\t\t\t\t\t\t\titerations = 5;\t\t\t\t\t\t} else {\t\t\t\t\t\t\tgameInstance.suivantTour();\t\t\t\t\t\t\tSystem.out.print(\"\\n\\n\\tStatut actuel!\");\t\t\t\t\t\t\tSystem.out.print(\"\\n\\t\\tJoueur \" + gameInstance.joueur.verifierNom() + \": \"\t\t\t\t\t\t\t\t\t+ gameInstance.joueur.verifierScore() + \" points!\");\t\t\t\t\t\t\tSystem.out.print(\"\\n\\t\\tIA: \" + gameInstance.ordi.verifierScore() + \" points!\");\t\t\t\t\t\t\titerations++;\t\t\t\t\t\t}\t\t\t\t\t} else {\t\t\t\t\t\tSystem.out.print(\"\\n\\n\u00c7a ne marchera pas ... \");\t\t\t\t\t\tSystem.out.print(\"\\nR\u00e9essayer ^^\");\t\t\t\t\t}\t\t\t\t\tbreak;\t\t\t\tcase 2: // Jetter lettres\t\t\t\t\tint listJetter[] = { 0, 0, 0, 0, 0, 0, 0 };\t\t\t\t\tSystem.out.print(\"\\n\\n\\tStatut de la main du joueur\");\t\t\t\t\tgameInstance.montrerMainMultijoueur(gameInstance.tourActuel());\t\t\t\t\tSystem.out.print(\"\\n\\n Indiquez quelle lettre vous voulez jetter (avec index entre 1 et 7): \");\t\t\t\t\tint counter = 0;\t\t\t\t\tboolean finished = false;\t\t\t\t\twhile (counter <= 7 && !finished) {\t\t\t\t\t\tint indexJetter = Integer.parseInt(scanner.nextLine());\t\t\t\t\t\tif ((1 <= indexJetter) && (indexJetter <= 7)) {\t\t\t\t\t\t\tlistJetter[indexJetter - 1] = 1;\t\t\t\t\t\t\tcounter++;\t\t\t\t\t\t} else {\t\t\t\t\t\t\tif (indexJetter == 0)\t\t\t\t\t\t\t\tfinished = true;\t\t\t\t\t\t\telse\t\t\t\t\t\t\t\tSystem.out.print(\"\\n ERREUR: Je ne connais pas cette lettre... \");\t\t\t\t\t\t}\t\t\t\t\t\tSystem.out.print(\t\t\t\t\t\t\t\t\"\\n Avez-vous fini (0) ? ou voulez vous continuer de changer des letrres (avec index entre 1 et 7) ? \");\t\t\t\t\t}\t\t\t\t\tfor (int i = 0; i < listJetter.length; ++i) {\t\t\t\t\t\tif (listJetter[i] == 1)\t\t\t\t\t\t\tgameInstance.setNombreLettre(gameInstance.tourActuel().jeterLettre(i, gameInstance.getNombreLettre()));\t\t\t\t\t}\t\t\t\t\tgameInstance.suivantTour();\t\t\t\t\tbreak;\t\t\t\tcase 3:\t\t\t\t\tSystem.out.print(\"\\n\\n Le joueur passe son tour... \");\t\t\t\t\tif (gameInstance.lettresRestant() == 0)\t\t\t\t\t\tgameInstance.tourActuel().incrementTourPasser();\t\t\t\t\tif (gameInstance.tourActuel().verifierTourPasser()\t\t\t\t\t\t\t&& gameInstance.adversaireActuel().verifierTourPasser()) {\t\t\t\t\t\t// There are no more letters and both players have nothing to play\t\t\t\t\t\tSystem.out.print(\"\\n\\n\\t\\t=== There aren't more combinations available!!! ===\");\t\t\t\t\t\tif (gameInstance.tourActuel().verifierScore() == gameInstance.adversaireActuel()\t\t\t\t\t\t\t\t.verifierScore()) {\t\t\t\t\t\t\t// La partie s'est termin\u00e9e par une \u00e9galit\u00e9 (les deux joueurs ont le m\u00eame nombre\t\t\t\t\t\t\t// de points)\t\t\t\t\t\t\tSystem.out.print(\"\\n\\n\\t\\t === MATCH NULL ===\");\t\t\t\t\t\t\tSystem.out.print(\"\\n\\n\\t\\t   Classement final!!\");\t\t\t\t\t\t\tSystem.out.print(\"\\n\\t\\tJoueur \" + gameInstance.joueur.verifierNom() + \": \"\t\t\t\t\t\t\t\t\t+ gameInstance.joueur.verifierScore() + \" points!\");\t\t\t\t\t\t\tSystem.out.print(\"\\n\\t\\tIA: \" + gameInstance.ordi.verifierScore() + \" points!\");\t\t\t\t\t\t} else {\t\t\t\t\t\t\tJoueur gagnant = (gameInstance.tourActuel().verifierScore() > gameInstance\t\t\t\t\t\t\t\t\t.adversaireActuel().verifierScore()) ? gameInstance.tourActuel()\t\t\t\t\t\t\t\t\t\t\t: gameInstance.adversaireActuel();\t\t\t\t\t\t\tSystem.out.print(\"\\n\\n\\t\\t=== Le gagnant est \" + gagnant.verifierNom() + \"!!! ===\");\t\t\t\t\t\t\tSystem.out.print(\"\\n\\n\\t\\t   Classement final!!\");\t\t\t\t\t\t\tSystem.out.print(\"\\n\\t\\tJoueur \" + gameInstance.joueur.verifierNom() + \": \"\t\t\t\t\t\t\t\t\t+ gameInstance.joueur.verifierScore() + \" points!\");\t\t\t\t\t\t\tSystem.out.print(\"\\n\\t\\tIA: \" + gameInstance.ordi.verifierScore() + \" points!\");\t\t\t\t\t\t}\t\t\t\t\t\t// D\u00e9clarez la fin du jeu\t\t\t\t\t\titerations = 5;\t\t\t\t\t} else {\t\t\t\t\t\t// Le jeu n'a pas pris fin pour le moment, passez au tour suivant\t\t\t\t\t\tgameInstance.suivantTour();\t\t\t\t\t\titerations++;\t\t\t\t\t}\t\t\t\t\tbreak;\t\t\t\tcase 4:\t\t\t\t\tSystem.out.print(\"\\n\\n Suggestion de mots \");\t\t\t\t\tpermutationSearch pS = new permutationSearch(dicoAnagram, dico, plat,\t\t\t\t\t\t\tgameInstance.tourActuel().verifierMain(), gameInstance.usedWords);\t\t\t\t\tSystem.out.println(pS.totalPossibleWords() + \" r\u00e9sultats trouv\u00e9s! \\n\");\t\t\t\t\tif (pS.totalPossibleWords() > 25) {\t\t\t\t\t\tSystem.out\t\t\t\t\t\t\t\t.println(\"Il y a plein de resulats, donc je vais montrer seulement les 25 meilleurs\\n\");\t\t\t\t\t\tfor (int i = 0; i < 25; ++i)\t\t\t\t\t\t\tSystem.out.println(\"Mots: \" + pS.possibleWord(i).verifierNom() + \" pour un total de \"\t\t\t\t\t\t\t\t\t+ pS.possibleWord(i).verifierPoints() + \" points! (PosX:\"\t\t\t\t\t\t\t\t\t+ pS.possibleWord(i).verifierX() + \"|PosY:\" + pS.possibleWord(i).verifierY() + \")\");\t\t\t\t\t} else {\t\t\t\t\t\tfor (int i = 0; i < pS.totalPossibleWords(); ++i)\t\t\t\t\t\t\tSystem.out.println(\"Mots: \" + pS.possibleWord(i).verifierNom() + \" pour un total de \"\t\t\t\t\t\t\t\t\t+ pS.possibleWord(i).verifierPoints() + \" points! (PosX:\"\t\t\t\t\t\t\t\t\t+ pS.possibleWord(i).verifierX() + \"|PosY:\" + pS.possibleWord(i).verifierY() + \")\");\t\t\t\t\t}\t\t\t\t\tbreak;\t\t\t\tdefault:\t\t\t\t\tSystem.out.print(\"\\n ERREUR: Je ne connais pas cette mode... \");\t\t\t\t}\t\t\t} else {\t\t\t\tSystem.out.println(\"\\n\\tL'ordi fait son action...\");\t\t\t\tswitch (gameInstance.completeIATurn()) {\t\t\t\tcase 1:\t\t\t\t\t// Tous les tours n\u00e9cessaires pour terminer le jeu sont pass\u00e9s, terminer le jeu\t\t\t\t\titerations = 5;\t\t\t\t\tbreak;\t\t\t\tcase 0:\t\t\t\t\t// IA a ins\u00e9r\u00e9 une lettre\t\t\t\t\tSystem.out.print(\"\\n\\nJoueur \" + gameInstance.tourActuel().verifierNom() + \" a un total de \"\t\t\t\t\t\t\t+ gameInstance.tourActuel().verifierScore() + \" points!\");\t\t\t\t\tif (gameInstance.asGagne()) {\t\t\t\t\t\tJoueur gagnant = gameInstance.pointsFin();\t\t\t\t\t\tif (gagnant.verifierNom() == \"Match Null\") {\t\t\t\t\t\t\t// La partie s'est termin\u00e9e par une \u00e9galit\u00e9 (les deux joueurs ont le m\u00eame nombre\t\t\t\t\t\t\t// de points)\t\t\t\t\t\t\tSystem.out.print(\"\\n\\n\\t\\t === MATCH NULL ===\");\t\t\t\t\t\t\tSystem.out.print(\"\\n\\n\\t\\t   Classement final!!\");\t\t\t\t\t\t\tSystem.out.print(\"\\n\\t\\tJoueur \" + gameInstance.joueur.verifierNom() + \": \"\t\t\t\t\t\t\t\t\t+ gameInstance.joueur.verifierScore() + \" points!\");\t\t\t\t\t\t\tSystem.out.print(\"\\n\\t\\tIA: \" + gameInstance.ordi.verifierScore() + \" points!\");\t\t\t\t\t\t} else {\t\t\t\t\t\t\tSystem.out.print(\"\\n\\n\\t\\t=== Le gagnant est \" + gagnant.verifierNom() + \"!!! ===\");\t\t\t\t\t\t\tSystem.out.print(\"\\n\\n\\t\\t   Classement final!!\");\t\t\t\t\t\t\tSystem.out.print(\"\\n\\t\\tJoueur \" + gameInstance.joueur.verifierNom() + \": \"\t\t\t\t\t\t\t\t\t+ gameInstance.joueur.verifierScore() + \" points!\");\t\t\t\t\t\t\tSystem.out.print(\"\\n\\t\\tIA: \" + gameInstance.ordi.verifierScore() + \" points!\");\t\t\t\t\t\t}\t\t\t\t\t\titerations = 5;\t\t\t\t\t} else {\t\t\t\t\t\tgameInstance.suivantTour();\t\t\t\t\t\tSystem.out.print(\"\\n\\n\\tStatut actuel!\");\t\t\t\t\t\tSystem.out.print(\"\\n\\t\\tJoueur \" + gameInstance.joueur.verifierNom() + \": \"\t\t\t\t\t\t\t\t+ gameInstance.joueur.verifierScore() + \" points!\");\t\t\t\t\t\tSystem.out.print(\"\\n\\t\\tIA: \" + gameInstance.ordi.verifierScore() + \" points!\");\t\t\t\t\t\titerations++;\t\t\t\t\t}\t\t\t\t\tbreak;\t\t\t\tcase -1:\t\t\t\t\t// IA ne peux pas ins\u00e9rer de lettre , IA \u00e9chang\u00e9 ses lettres\t\t\t\t\tSystem.out.print(\"\\n\\n L'IA a decider jetter ses lettres...\");\t\t\t\t\tgameInstance.suivantTour();\t\t\t\t\tSystem.out.print(\"\\n\\n\\tStatut actuel!\");\t\t\t\t\tSystem.out.print(\"\\n\\t\\tJoueur \" + gameInstance.joueur.verifierNom() + \": \"\t\t\t\t\t\t\t+ gameInstance.joueur.verifierScore() + \" points!\");\t\t\t\t\tSystem.out.print(\"\\n\\t\\tIA: \" + gameInstance.ordi.verifierScore() + \" points!\");\t\t\t\t\titerations++;\t\t\t\t\tbreak;\t\t\t\tcase -2:\t\t\t\t\t// IA ne peut pas \u00e9changer ses lettres et a pass\u00e9 le tour sans rien faire de pertinent\t\t\t\t\tSystem.out.print(\"\\n\\n L'IA NEW MESSAGE THAT SAYS THAT THE IA CANT DO ANYTHING AT ALL...\");\t\t\t\t\tgameInstance.suivantTour();\t\t\t\t\tSystem.out.print(\"\\n\\n\\tStatut actuel!\");\t\t\t\t\tSystem.out.print(\"\\n\\t\\tJoueur \" + gameInstance.joueur.verifierNom() + \": \"\t\t\t\t\t\t\t+ gameInstance.joueur.verifierScore() + \" points!\");\t\t\t\t\tSystem.out.print(\"\\n\\t\\tIA: \" + gameInstance.ordi.verifierScore() + \" points!\");\t\t\t\t\titerations++;\t\t\t\t\tbreak;\t\t\t\t}\t\t\t}\t\t} while (iterations < 5);\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/MatchIA.java", "stars": "4", "class": {"name": "MatchIA", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getNombreLettre", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ArrayList<Integer>", "snippet": "\tpublic ArrayList<Integer> getNombreLettre() {\t\treturn nombreLettre;\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/MatchIA.java", "stars": "4", "class": {"name": "MatchIA", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setNombreLettre", "params": ["ArrayList<Integer>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\tpublic void setNombreLettre(ArrayList<Integer> nombreLettre) {\t\tthis.nombreLettre = nombreLettre;\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/MatchIA.java", "stars": "4", "class": {"name": "MatchIA", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        SpringApplication.run(MedicationApplication.class, args);    }", "url": "https://raw.githubusercontent.com/WhiteFerrari666/Medication/develop/src/main/java/com/Medication/Medication/MedicationApplication.java", "stars": "2", "class": {"name": "MedicationApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "commandLineRunner", "params": ["ApplicationContext"], "throws": null, "modifiers": ["public"], "return_type": "CommandLineRunner", "snippet": "    public CommandLineRunner commandLineRunner(ApplicationContext ctx) {        return args -> {            System.out.println(\"Let's inspect the beans provided by Spring Boot:\");            String[] beanNames = ctx.getBeanDefinitionNames();            Arrays.sort(beanNames);            for (String beanName : beanNames) {                System.out.println(beanName);            }        };    }", "url": "https://raw.githubusercontent.com/WhiteFerrari666/Medication/develop/src/main/java/com/Medication/Medication/MedicationApplication.java", "stars": "2", "class": {"name": "MedicationApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "contains", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "\tpublic boolean contains(String value) {\t\treturn this.get(value) != null;\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Dictionnaire.java", "stars": "4", "class": {"name": "Dictionnaire", "extends": "HashMap", "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) throws IOException {\t\tDictionnaire dico = new Dictionnaire(\"dico.txt\");\t\tSystem.out.println(dico.contains(\"abaissait\"));\t\tSystem.out.println(dico.contains(\"boi\"));\t}", "url": "https://raw.githubusercontent.com/Ethpera/ScrabbleJava/master/src/Dictionnaire.java", "stars": "4", "class": {"name": "Dictionnaire", "extends": "HashMap", "implements": null, "modifiers": ["public"]}}, {"method_name": "preHandle", "params": ["HttpServletRequest", "HttpServletResponse", "Object"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "boolean", "snippet": "    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {        if(conf.enable()){            boolean check = true;            if(handler instanceof HandlerMethod){                HandlerMethod handlerMethod = (HandlerMethod) handler;                UserInfo userInfo = null;                if(handlerMethod.getMethod().isAnnotationPresent(RequireRoles.class)){                    userInfo = userInfoService.selectByUsername(security.getUserName(request));                    check = checkIfMatchRole(handlerMethod.                            getMethod().getAnnotation(RequireRoles.class), userInfo);                }                if(check && handlerMethod.getBeanType().isAnnotationPresent(RequireRoles.class)){                    if(null == userInfo){                        userInfo = userInfoService.selectByUsername(security.getUserName(request));                    }                    check = checkIfMatchRole(handlerMethod.getBeanType()                            .getAnnotation(RequireRoles.class), userInfo);                }            }            if(!check){                response.setStatus(HttpStatus.UNAUTHORIZED.value());            }            return check;        }        return true;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/auth/interceptors/UserRoleInterceptor.java", "stars": "23", "class": {"name": "UserRoleInterceptor", "extends": null, "implements": ["HandlerInterceptor"], "modifiers": ["public"]}}, {"method_name": "checkIfMatchRole", "params": ["RequireRoles", "UserInfo"], "throws": null, "modifiers": ["private"], "return_type": "boolean", "snippet": "    private boolean checkIfMatchRole(RequireRoles roles, UserInfo userInfo){        UserRole[] userRoles = roles.value();        Integer typeValue = userInfo.getUserType();        if(null != typeValue){            for(UserRole userRole : userRoles){                if(typeValue <  userRole.getValue()){                    return false;                }            }            return true;        }        return false;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Exchangis/master/modules/service/src/main/java/com/webank/wedatasphere/exchangis/auth/interceptors/UserRoleInterceptor.java", "stars": "23", "class": {"name": "UserRoleInterceptor", "extends": null, "implements": ["HandlerInterceptor"], "modifiers": ["public"]}}, {"method_name": "run", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void run() {        try {            //Wait for client to be ready            Thread.sleep(1000);            Socket uploadTo = new Socket(client.getIP(), client.getServer().getMAIN_PORT() + 2);            File file = new File(Utils.rebuildPath(                    String.format(\"%s\\\\DownloadedFiles\\\\%s\\\\%s\",                            System.getProperty(\"user.dir\"),                            message.getSender(),                            message.getBody())            ));            DataOutputStream toClient = new DataOutputStream(uploadTo.getOutputStream());            if (file.exists()) {                logger.debug(String.format(\"Start uploading %s\", file.getName()));                if (!file.canRead())                    logger.error(\"File is not readable :)\");                RandomAccessFile randomAccessFile = new RandomAccessFile(file, \"r\");                byte[] buffer = new byte[BUFFER_SIZE];                while (randomAccessFile.read(buffer) != -1)                    toClient.write(buffer);                randomAccessFile.close();                logger.debug(String.format(\"%s uploaded successfully!\", file.getName()));            } else {                logger.debug(String.format(\"%s doesn't exists :)\", file.getName()));                logger.debug(file.getAbsolutePath());                client.sendMessageToClient(ServerMessageBuilder                        .responseBuilder(FILE_REMOVED, String.format(\"%s doesn't exists :)\", file.getName())));            }        } catch (IOException | SendingToClientWasFailed | InterruptedException e) {            logger.error(e.getMessage());        } finally {            serverWorker.decreaseUploadInProgress();        }    }", "url": "https://raw.githubusercontent.com/AlirezaAZ/SimpleChatroom/master/src/Server/FileSharing/ServerFileUploader.java", "stars": "2", "class": {"name": "ServerFileUploader", "extends": null, "implements": ["Runnable"], "modifiers": ["public"]}}, {"method_name": "start", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void start() {        //TODO: this method is too complex and should be refactored        if (running)            return;        running = true;        try {            welcomeSocket = new ServerSocket(this.port);        } catch (IOException ex) {            ex.printStackTrace();        }        while (running) {            if (welcomeSocket == null || welcomeSocket.isClosed()) {                stop();                break;            }            Socket connectionSocket = null;            BufferedReader inFromClient = null;            DataOutputStream outToClient = null;            try {                connectionSocket = welcomeSocket.accept();            } catch (IOException ex) {                ex.printStackTrace();                // this socket may have been closed, so we'll stop                stop();                return;            }            String str = null;            int c;            StringBuilder sb = new StringBuilder();            try {                inFromClient = new BufferedReader(new InputStreamReader(connectionSocket.getInputStream()));                while ((str = inFromClient.readLine()) != null) {                    if (str.equals(\"\")) {                        break;                    }                }                while ((c = inFromClient.read()) != -1) {                    sb.append((char)c);                    String temp = sb.toString();                    if (temp.endsWith(\"</envelope>\"))                        break;                }            } catch (IOException ex) {                ex.printStackTrace();            }            String body = sb.toString();            Log.d(Util.T, \"got message body: \" + body);            Calendar calendar = Calendar.getInstance();            SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss z\", Locale.US);            dateFormat.setTimeZone(TimeZone.getTimeZone(\"GMT\"));            String date = dateFormat.format(calendar.getTime());            String androidOSVersion = android.os.Build.VERSION.RELEASE;            PrintWriter out = null;            try {                outToClient = new DataOutputStream(connectionSocket.getOutputStream());                out = new PrintWriter(outToClient);                out.println(\"HTTP/1.1 200 OK\");                out.println(\"Server: Android/\" + androidOSVersion + \" UDAP/2.0 ConnectSDK/1.2.1\");                out.println(\"Cache-Control: no-store, no-cache, must-revalidate\");                out.println(\"Date: \" + date);                out.println(\"Connection: Close\");                out.println(\"Content-Length: 0\");                out.println();                out.flush();            } catch (IOException ex) {                ex.printStackTrace();            } finally {                try {                    inFromClient.close();                    out.close();                    outToClient.close();                    connectionSocket.close();                } catch (IOException ex) {                    ex.printStackTrace();                }            }            SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();            InputStream stream = null;            try {                stream = new ByteArrayInputStream(body.getBytes(\"UTF-8\"));            } catch (UnsupportedEncodingException ex) {                ex.printStackTrace();            }            NetcastPOSTRequestParser handler = new NetcastPOSTRequestParser();            SAXParser saxParser;            try {                saxParser = saxParserFactory.newSAXParser();                saxParser.parse(stream, handler);            } catch (IOException ex) {                ex.printStackTrace();            } catch (ParserConfigurationException e) {                e.printStackTrace();            } catch (SAXException e) {                e.printStackTrace();            }            if (body.contains(\"ChannelChanged\")) {                ChannelInfo channel = NetcastChannelParser.parseRawChannelData(handler.getJSONObject());                Log.d(Util.T, \"Channel Changed: \" + channel.getNumber());                for (URLServiceSubscription<?> sub: subscriptions) {                    if (sub.getTarget().equalsIgnoreCase(\"ChannelChanged\")) {                        for (int i = 0; i < sub.getListeners().size(); i++) {                            @SuppressWarnings(\"unchecked\")                            ResponseListener<Object> listener = (ResponseListener<Object>) sub.getListeners().get(i);                            Util.postSuccess(listener, channel);                        }                    }                }            }            else if (body.contains(\"KeyboardVisible\")) {                boolean focused = false;                TextInputStatusInfo keyboard = new TextInputStatusInfo();                keyboard.setRawData(handler.getJSONObject());                try {                    JSONObject currentWidget = (JSONObject) handler.getJSONObject().get(\"currentWidget\");                    focused = (Boolean) currentWidget.get(\"focus\");                    keyboard.setFocused(focused);                } catch (JSONException e) {                    e.printStackTrace();                }                Log.d(Util.T, \"KeyboardFocused?: \" + focused);                for (URLServiceSubscription<?> sub: subscriptions) {                    if (sub.getTarget().equalsIgnoreCase(\"KeyboardVisible\")) {                        for (int i = 0; i < sub.getListeners().size(); i++) {                            @SuppressWarnings(\"unchecked\")                            ResponseListener<Object> listener = (ResponseListener<Object>) sub.getListeners().get(i);                            Util.postSuccess(listener, keyboard);                        }                    }                }            }            else if (body.contains(\"TextEdited\")) {                System.out.println(\"TextEdited\");                String newValue = \"\";                try {                    newValue = handler.getJSONObject().getString(\"value\");                } catch (JSONException ex) {                    ex.printStackTrace();                }                Util.postSuccess(textChangedListener, newValue);            }            else if (body.contains(\"3DMode\")) {                try {                    String enabled = (String) handler.getJSONObject().get(\"value\");                    boolean bEnabled;                    bEnabled = enabled.equalsIgnoreCase(\"true\");                    for (URLServiceSubscription<?> sub: subscriptions) {                        if (sub.getTarget().equalsIgnoreCase(\"3DMode\")) {                            for (int i = 0; i < sub.getListeners().size(); i++) {                                @SuppressWarnings(\"unchecked\")                                ResponseListener<Object> listener = (ResponseListener<Object>) sub.getListeners().get(i);                                Util.postSuccess(listener, bEnabled);                            }                        }                    }                } catch (JSONException e) {                    e.printStackTrace();                }            }        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/netcast/NetcastHttpServer.java", "stars": "4", "class": {"name": "NetcastHttpServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "stop", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void stop() {        if (!running)            return;        if (welcomeSocket != null && !welcomeSocket.isClosed()) {            try {                welcomeSocket.close();            } catch (IOException ex) {                ex.printStackTrace();            }        }        welcomeSocket = null;        running = false;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/netcast/NetcastHttpServer.java", "stars": "4", "class": {"name": "NetcastHttpServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setSubscriptions", "params": ["List<URLServiceSubscription>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setSubscriptions(List<URLServiceSubscription<?>> subscriptions) {        this.subscriptions = subscriptions;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/netcast/NetcastHttpServer.java", "stars": "4", "class": {"name": "NetcastHttpServer", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "start", "params": ["NettyMonitor"], "throws": ["Exception"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void start(NettyMonitor nettyMonitor) throws Exception {    long startMs = System.currentTimeMillis();    this.nettyMonitor = nettyMonitor;    this.environment = nettyMonitor.environment();    this.printBanner();    final String serialNumber = this.computerSystem.getSerialNumber();    final String model = this.computerSystem.getModel();    final String name = firmware.getName();    final String bootClsName = nettyMonitor.bootName();    final String currentUserName = System.getProperty(\"user.name\");    final String pidCode = SystemInfoUtils.getPid();    final String hostName = SystemInfoUtils.getHostName();    final Integer availableProcessors = SystemInfoUtils.getAvailableProcessors();    log.info(\"Starting {} on {} with PID {} \", bootClsName, name + \"/\" + currentUserName, pidCode);    log.info(\"The serialized version number of this machine is {}\", serialNumber);    log.info(\"The computer system mode is {}\", model);    log.info(\"The host name is {}\", hostName);    log.info(\"The current computer has {} processors available\", availableProcessors);    log.info(\"Starting service [Netty]\");    log.info(\"Starting Iot Server: Netty/4.1.45.Final\");    this.enableSSL();    this.startServer(startMs);    this.shutdownHook();  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyMonitorServer.java", "stars": "3", "class": {"name": "NettyMonitorServer", "extends": null, "implements": ["Server"], "modifiers": ["public"]}}, {"method_name": "enableSSL", "params": [], "throws": ["CertificateException", "SSLException"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void enableSSL() throws CertificateException, SSLException {    log.info(\"Check if the ssl configuration is enabled.\");    final Boolean ssl = environment.getBoolean(PATH_SERVER_SSL, SERVER_SSL);    final SelfSignedCertificate ssc = new SelfSignedCertificate();    if (ssl) {      log.info(\"Ssl configuration takes effect :{}\", true);      final String sslCert = this.environment.get(PATH_SERVER_SSL_CERT, null);      final String sslPrivateKey = this.environment.get(PATH_SERVER_SSL_PRIVATE_KEY, null);      final String sslPrivateKeyPass = this.environment.get(PATH_SERVER_SSL_PRIVATE_KEY_PASS, null);      log.info(\"SSL CertChainFile  Path: {}\", sslCert);      log.info(\"SSL PrivateKeyFile Path: {}\", sslPrivateKey);      log.info(\"SSL PrivateKey Pass: {}\", sslPrivateKeyPass);      this.sslContext = SslContextBuilder.forServer(setKeyCertFileAndPriKey(sslCert, ssc.certificate()),              setKeyCertFileAndPriKey(sslPrivateKey, ssc.privateKey()), sslPrivateKeyPass).build();    }    log.info(\"Current netty server ssl startup status: {}\", ssl);    log.info(\"A valid ssl connection configuration is not configured and is rolled back to the default connection state.\");  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyMonitorServer.java", "stars": "3", "class": {"name": "NettyMonitorServer", "extends": null, "implements": ["Server"], "modifiers": ["public"]}}, {"method_name": "setKeyCertFileAndPriKey", "params": ["String", "File"], "throws": null, "modifiers": ["private"], "return_type": "File", "snippet": "  private File setKeyCertFileAndPriKey(String keyPath, File defaultFilePath) {    return keyPath != null ? Paths.get(keyPath).toFile() : defaultFilePath;  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyMonitorServer.java", "stars": "3", "class": {"name": "NettyMonitorServer", "extends": null, "implements": ["Server"], "modifiers": ["public"]}}, {"method_name": "startServer", "params": ["long"], "throws": ["Exception"], "modifiers": ["private"], "return_type": "void", "snippet": "  private void startServer(long startMs) throws Exception {    ResourceLeakDetector.setLevel(ResourceLeakDetector.Level.DISABLED);    this.serverBootstrap.childHandler(new NettyMonitorServerInitializer(sslContext));    int acceptThreadCount = environment.getInteger(PATH_SERVER_NETTY_ACCEPT_THREAD_COUNT, DEFAULT_ACCEPT_THREAD_COUNT);    int ioThreadCount = environment.getInteger(PATH_SERVER_NETTY_IO_THREAD_COUNT, DEFAULT_IO_THREAD_COUNT);    NettyServerGroup nettyServerGroup = EventLoopKit.nioGroup(acceptThreadCount, ioThreadCount);    this.bossGroup = nettyServerGroup.getBossGroup();    this.workerGroup = nettyServerGroup.getWorkGroup();    if (EventLoopKit.epollIsAvailable()) {      nettyServerGroup = EventLoopKit.epollGroup(acceptThreadCount, ioThreadCount);      this.bossGroup = nettyServerGroup.getBossGroup();      this.workerGroup = nettyServerGroup.getWorkGroup();    }    this.serverBootstrap.group(bossGroup, workerGroup).channel(nettyServerGroup.getChannelClass())            .childOption(ChannelOption.SO_KEEPALIVE, true)            .option(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT)            .option(ChannelOption.SO_BACKLOG, 128);    String bootClsSimpleName = EventLoopKit.judgeMode(nettyServerGroup.getChannelClass().getSimpleName());    log.info(\"The IO mode of the application startup is: {}\", bootClsSimpleName);    String address = this.environment.getString(Const.PATH_SERVER_ADDRESS, Const.SERVER_ADDRESS);    Integer port = this.environment.getInteger(Const.PATH_SERVER_PORT, Const.SERVER_PORT);    this.channel = serverBootstrap.bind(address, port).sync().channel();    this.stop = false;    long endTime = System.currentTimeMillis();    long startUpTime = (endTime - startMs);    long jvmStartTime = (endTime - SystemInfoUtils.getJvmStartUpTime());    log.info(\"Iot Server started on port(s): {} with context path ''\", port);    log.info(\"Started {} in {} ms (JVM running for {} ms)\", nettyMonitor.bootName(), startUpTime, jvmStartTime);    log.info(\"The tcp service has been started, allowing connections to be established\");  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyMonitorServer.java", "stars": "3", "class": {"name": "NettyMonitorServer", "extends": null, "implements": ["Server"], "modifiers": ["public"]}}, {"method_name": "shutdownHook", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void shutdownHook() {    Thread shutdownThread = new Thread(this::stop);    shutdownThread.setName(\"shutdown@thread\");    Runtime.getRuntime().addShutdownHook(shutdownThread);  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyMonitorServer.java", "stars": "3", "class": {"name": "NettyMonitorServer", "extends": null, "implements": ["Server"], "modifiers": ["public"]}}, {"method_name": "stop", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void stop() {    log.info(\"Netty Server Shutdown...\");    if (stop) {      return;    }    stop = true;    try {      if (bossGroup != null) {        this.bossGroup.shutdownGracefully();      }      if (workerGroup != null) {        this.workerGroup.shutdownGracefully();      }      log.info(\"The netty service is gracefully closed\");    } catch (Exception e) {      log.error(\"An exception occurred while the Netty Iot service was down\", e);    }  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyMonitorServer.java", "stars": "3", "class": {"name": "NettyMonitorServer", "extends": null, "implements": ["Server"], "modifiers": ["public"]}}, {"method_name": "join", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void join() {    try {      this.channel.closeFuture().sync();    } catch (InterruptedException e) {      log.error(\"Channel close future fail\", e);    }  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyMonitorServer.java", "stars": "3", "class": {"name": "NettyMonitorServer", "extends": null, "implements": ["Server"], "modifiers": ["public"]}}, {"method_name": "printBanner", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "  private void printBanner() {    this.defaultBanner.printBanner(System.out, Const.BANNER_TEXT, BannerFont.FONT_DEFAULT);  }", "url": "https://raw.githubusercontent.com/everknwon/netty-monitor/master/src/main/java/io/netty/monitor/NettyMonitorServer.java", "stars": "3", "class": {"name": "NettyMonitorServer", "extends": null, "implements": ["Server"], "modifiers": ["public"]}}, {"method_name": "onCreate", "params": ["Bundle"], "throws": null, "modifiers": ["protected"], "return_type": "void", "snippet": "    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_demo);        mList = (ListView) findViewById(R.id.list);        ArrayList<String> examples = new ArrayList<String>(Arrays.asList(EXAMPLES));        // Create ArrayAdapter using the list.        mAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, examples);        mList.setAdapter(mAdapter);        mList.setOnItemClickListener(mListener);        PinItButton.setDebugMode(true);        PinItButton.setPartnerId(CLIENT_ID);    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/PinItDemo/src/com/pinterest/samples/pinit/DemoMainActivity.java", "stars": "74", "class": {"name": "DemoMainActivity", "extends": "Activity", "implements": null, "modifiers": ["public"]}}, {"method_name": "name", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "AzkabanJobBuilder", "snippet": "    public AzkabanJobBuilder name(final String name) {      this.name = name;      return this;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/AzkabanJob.java", "stars": "18", "class": {"name": "AzkabanJobBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "type", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "AzkabanJobBuilder", "snippet": "    public AzkabanJobBuilder type(final String type) {      this.type = type;      return this;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/AzkabanJob.java", "stars": "18", "class": {"name": "AzkabanJobBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "props", "params": ["Props"], "throws": null, "modifiers": ["public"], "return_type": "AzkabanJobBuilder", "snippet": "    public AzkabanJobBuilder props(final Props props) {      this.props = props;      return this;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/AzkabanJob.java", "stars": "18", "class": {"name": "AzkabanJobBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "condition", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "AzkabanJobBuilder", "snippet": "    public AzkabanJobBuilder condition(final String condition) {      this.condition = condition;      return this;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/AzkabanJob.java", "stars": "18", "class": {"name": "AzkabanJobBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "dependsOn", "params": ["List<String>"], "throws": null, "modifiers": ["public"], "return_type": "AzkabanJobBuilder", "snippet": "    public AzkabanJobBuilder dependsOn(final List<String> dependsOn) {      // A node may or may not have dependencies.      this.dependsOn = dependsOn == null          ? Collections.emptyList()          : ImmutableList.copyOf(dependsOn);      return this;    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/AzkabanJob.java", "stars": "18", "class": {"name": "AzkabanJobBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "build", "params": [], "throws": null, "modifiers": ["public"], "return_type": "AzkabanJob", "snippet": "    public AzkabanJob build() {      return new AzkabanJob(this.name, this.type, this.props, this.condition, this.dependsOn);    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/azkaban/project/AzkabanJob.java", "stars": "18", "class": {"name": "AzkabanJobBuilder", "extends": null, "implements": null, "modifiers": ["public", "static"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String toString() {        return \"ExternalUser{\" +            \"appId=\" + appId +            \", userId='\" + userId + '\\'' +            \", urn='\" + urn + '\\'' +            \", fullName='\" + fullName + '\\'' +            \", displayName='\" + displayName + '\\'' +            \", title='\" + title + '\\'' +            \", employeeNumber=\" + employeeNumber +            \", managerUrn='\" + managerUrn + '\\'' +            \", managerUserId='\" + managerUserId + '\\'' +            \", managerEmployeeNumber=\" + managerEmployeeNumber +            \", orgId=\" + orgId +            \", defaultGroupName='\" + defaultGroupName + '\\'' +            \", email='\" + email + '\\'' +            \", departmentId=\" + departmentId +            \", departmentName='\" + departmentName + '\\'' +            \", startDate=\" + startDate +            \", mobilePhone='\" + mobilePhone + '\\'' +            \", isActive='\" + isActive + '\\'' +            \", personGroup=\" + personGroup +            \", createdTime=\" + createdTime +            \", modifiedTime=\" + modifiedTime +            '}';    }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-common/src/main/java/com/webank/wedatasphere/schedulis/common/system/entity/WebankUser.java", "stars": "18", "class": {"name": "WebankUser", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tint[] a = new int[11];\t\tint i,j;\t\tfor (i = 0 ; i  < 10 ; i ++)\t\t{\t\t\ta[i] = 0;    //\u5c06\u5341\u4e2a\u6570\u7ec4\u5143\u7d20\u90fd\u521d\u59cb\u5316\u4e3a0\t\t}\t\t\t\tfor (i = 0 ; i < 5 ; i ++)    //\u5faa\u73af\u8bfb\u51655\u4e2a\u6570\t\t{\t\t\tScanner in = new Scanner(System.in);    //\u4ece\u952e\u76d8\u8f93\u5165\u8003\u751f\u7684\u5206\u6570\t\t\tint t = in.nextInt();    //\u6362\u884c\u8f93\u5165\uff0c\u8f93\u5165\u4e94\u4f4d\u540c\u5b66\u7684\u8003\u8bd5\u6210\u7ee9\t\t\ta[t] ++;   //\u8fdb\u884c\u8ba1\u6570\t\t}\t\t\t\tfor (i = 0 ; i < 10 ; i ++)    //\u4f9d\u6b21\u5224\u65ada[0]~a[10]\t\t{\t\t\tfor (j = 1 ; j <= a[i] ; j ++)    //\u51fa\u73b0\u4e86\u51e0\u6b21\u5c31\u8f93\u51fa\u51e0\u6b21\t\t\t{\t\t\t\tSystem.out.print(i);\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/paixu/Tong.java", "stars": "2", "class": {"name": "Tong", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\t\t}", "url": "https://raw.githubusercontent.com/hasaki-w-c/JAVA--/master/final_/FinalTest01.java", "stars": "2", "class": {"name": "FinalTest01", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testVanillaExchange", "params": [], "throws": ["Exception"], "modifiers": [], "return_type": "void", "snippet": "\tvoid testVanillaExchange() throws Exception {\t\tAwaitility.waitAtMost(Duration.ofSeconds(30)).until(this.consumer::getMessages, not(empty()));\t\tassertThat(this.consumer.getMessages()).extracting(\"message\").containsOnly(\"A simple test message\");\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-kafka/src/test/java/smoketest/kafka/SampleKafkaApplicationTests.java", "stars": "47572", "class": {"name": "SampleKafkaApplicationTests", "extends": null, "implements": null, "modifiers": []}}, {"method_name": "setVideoContext", "params": ["VideoContext"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setVideoContext(VideoContext videoContext) {        this.videoContext = videoContext;    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/state/VideoState.java", "stars": "2", "class": {"name": "VideoState", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "play", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void play();    public abstract void pause();    public abstract void speed();    public abstract void close();}", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/state/VideoState.java", "stars": "2", "class": {"name": "VideoState", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "pause", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void pause();    public abstract void speed();    public abstract void close();}", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/state/VideoState.java", "stars": "2", "class": {"name": "VideoState", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "speed", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void speed();    public abstract void close();}", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/state/VideoState.java", "stars": "2", "class": {"name": "VideoState", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "close", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void close();}", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/state/VideoState.java", "stars": "2", "class": {"name": "VideoState", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onReceive", "params": ["Context", "Intent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onReceive(Context context, Intent intent) {        SmsManager smsManager = SmsManager.getDefault();        Intent in = new Intent(SENT_SMS_FLAG);        PendingIntent sentIntent = PendingIntent.getBroadcast(context, 0,                in, 0);        // Retrieves a map of extended data from the intent.        final Bundle bundle = intent.getExtras();        mydb = new DBHelper(context);        try {            if (bundle != null) {                final Object[] pdusObj = (Object[]) bundle.get(\"pdus\");                for (int i = 0; i < pdusObj.length; i++) {                    SmsMessage currentMessage = SmsMessage.createFromPdu((byte[]) pdusObj[i]);                    String phoneNumber = currentMessage.getDisplayOriginatingAddress();                    String senderNum;                    if(phoneNumber.substring(0,3).equals(\"+91\"))                        senderNum = phoneNumber.substring(3);                    else                        senderNum = phoneNumber;                    String message = currentMessage.getDisplayMessageBody();                    String[] stringArray = message.split(\"\\\\s+\");                    String receiverNum = null,amount = null;                    if(stringArray[0].equals(\"MO\") || stringArray[0].equals(\"mo\") || stringArray[0].equals(\"Mo\"))                    {                        if(MainActivity.getAppContext() == null)                        {                            PackageManager pm = context.getPackageManager();                            Intent launchIntent = pm.getLaunchIntentForPackage(\"com.millionq.upi_payment\");                            context.startActivity(launchIntent);                        }                        else                        {                            MainActivity.getAppContext().registerReceiver(                                    new MessageSentListener(),                                    new IntentFilter(SENT_SMS_FLAG));                        }                        if(stringArray[1]!=null) receiverNum = stringArray[1];                        if(stringArray[2]!=null) amount = stringArray[2];                        if(!mydb.isPhonePresent(senderNum))                        {                            if(mydb.insertWallet(senderNum,String.valueOf(1000))){                                smsManager.sendTextMessage(senderNum, null,                                        \"Thanks for using MoneyOrder! \" +                                                \"Your wallet is credited with 1000 rupees\", sentIntent, null);                            }else{                                smsManager.sendTextMessage(senderNum, null,                                        \"There is a problem creating your account on \" +                                                \"MoneyOrder! Try again later.\", sentIntent, null);                            }                        }                        int cashofsender=0,cashofrec=0,sender_id,rec_id;                        sender_id = mydb.getWalletId(senderNum);                        Cursor sender = mydb.getWalletData(sender_id);                        if (sender.moveToFirst())                            cashofsender = Integer.parseInt(sender.getString(sender.getColumnIndex(WALLET_COLUMN_CASH)));                        sender.close();                        if(Integer.parseInt(amount) < cashofsender) {                            //insert Into Transaction Database                            if (mydb.insertContact(senderNum, receiverNum, amount)) {                                Toast.makeText(context, \"Transaction made successfully\",                                        Toast.LENGTH_SHORT).show();                            } else {                                Toast.makeText(context, \"Transaction was unsuccessful\",                                        Toast.LENGTH_SHORT).show();                            }                            int new_amount = cashofsender - Integer.parseInt(amount);                            if (mydb.updateWallet(sender_id, senderNum,                                    String.valueOf(new_amount))) {                                smsManager.sendTextMessage(senderNum, null,                                        \"Transaction made successfully! \" +                                                \"Your account is debited with \" + amount + \" rupees. Send to \"+ receiverNum + \". Your Current Balance: \"                                                + String.valueOf(new_amount), sentIntent, null);                            } else {                                smsManager.sendTextMessage(senderNum, null,                                        \"Transaction was unsuccessful. \" +                                                \"Try again later. Current Balance: \" + cashofsender, sentIntent, null);                            }                            if (!mydb.isPhonePresent(receiverNum)) {                                if (mydb.insertWallet(receiverNum, String.valueOf(1000))) {                                    smsManager.sendTextMessage(receiverNum, null,                                            \"Thanks for using MoneyOrder! \" +                                                    \"Your wallet is credited with 1000 rupees\", sentIntent, null);                                } else {                                    smsManager.sendTextMessage(receiverNum, null,                                            \"There is a problem creating your account on \" +                                                    \"MoneyOrder! Try again later.\", sentIntent, null);                                }                            }                            rec_id = mydb.getWalletId(receiverNum);                            Cursor rec = mydb.getWalletData(rec_id);                            if (rec.moveToFirst())                                cashofrec = Integer.parseInt(rec.getString(rec.getColumnIndex(WALLET_COLUMN_CASH)));                            rec.close();                            new_amount = cashofrec + Integer.parseInt(amount);                            if (mydb.updateWallet(rec_id, receiverNum,                                    String.valueOf(new_amount))) {                                smsManager.sendTextMessage(receiverNum, null,                                        \"Transaction made successfully! \" +                                                \"Your account is credited with \" + amount + \" rupees. Send by \" + senderNum + \". Current Balance: \"                                                + String.valueOf(new_amount), sentIntent, null);                            } else {                                smsManager.sendTextMessage(receiverNum, null,                                        \"Transaction was unsuccessful. \" +                                                \"Try again later. Current Balance: \"+ cashofrec, sentIntent, null);                            }                        }                        else                        {                            smsManager.sendTextMessage(senderNum, null,                                    \"Transaction was unsuccessful. \" +                                            \"You dont have enough cash to complete this transaction. Current Balance: \" +                                            cashofsender, sentIntent, null);                        }                    }                }            } // end for loop            // bundle is null        } catch (Exception e) {            Log.e(\"SmsReceiver\", \"Exception smsReceiver\" +e);        }        context.sendBroadcast(new Intent(\"UPDATE_UI\"));    }", "url": "https://raw.githubusercontent.com/zhackerx/upi_payment/master/app/src/main/java/com/millionq/upi_payment/IncomingSms.java", "stars": "1", "class": {"name": "IncomingSms", "extends": "BroadcastReceiver", "implements": null, "modifiers": ["public"]}}, {"method_name": "input", "params": [], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void input(){        System.out.println(\"\u8f93\u5165220v\u7535\u6d41\");    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/structural/adapter/objectadapter/Input.java", "stars": "2", "class": {"name": "Input", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tSpringApplication.run(ZuulServerApplication.class, args);\t}", "url": "https://raw.githubusercontent.com/bruinli28/stockmarket/master/cloud-zuul-service/src/main/java/com/iiht/stock/zuul/ZuulServerApplication.java", "stars": "2", "class": {"name": "ZuulServerApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "accessFilter", "params": [], "throws": null, "modifiers": ["public"], "return_type": "AccessFilter", "snippet": "\tpublic AccessFilter accessFilter(){\t\treturn new AccessFilter();\t}", "url": "https://raw.githubusercontent.com/bruinli28/stockmarket/master/cloud-zuul-service/src/main/java/com/iiht/stock/zuul/ZuulServerApplication.java", "stars": "2", "class": {"name": "ZuulServerApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getRestTemplate", "params": [], "throws": null, "modifiers": ["public"], "return_type": "RestTemplate", "snippet": "\tpublic RestTemplate getRestTemplate() {\t\tRestTemplate template = new RestTemplate();\t\tList<ClientHttpRequestInterceptor> interceptors = template.getInterceptors();\t\tif (interceptors == null) {\t\t\tinterceptors = new ArrayList<ClientHttpRequestInterceptor>();\t\t}\t\t\t\tinterceptors.add(new UserContextInterceptor());\t\ttemplate.setInterceptors(interceptors);\t\treturn template;\t}", "url": "https://raw.githubusercontent.com/bruinli28/stockmarket/master/cloud-zuul-service/src/main/java/com/iiht/stock/zuul/ZuulServerApplication.java", "stars": "2", "class": {"name": "ZuulServerApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getKey", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getKey() {        return mKey;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/models/Genre.java", "stars": "4", "class": {"name": "Genre", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getLabelId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int getLabelId() {        return mLabel;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/base/src/main/java/butter/droid/base/providers/media/models/Genre.java", "stars": "4", "class": {"name": "Genre", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {    \t//\u6307\u5b9a\u5f85\u7ffb\u8bd1\u7684\u6e90\u4ee3\u7801\u76ee\u5f55    \tString inputPath = \"C:\\\\Users\\\\Leon\\\\Documents\\\\\u4e00\u4e9b\u4f5c\u54c1\\\\\u6e90\u7801\u5373\u6559\u7a0b\\\\\u6e90\u7801\\\\\u529f\u80fd\u6027\u6d4b\u8bd5\u6e90\u7801\\\\spark-part\\\\\";//\u4f8b\u5b50    \t//\u6307\u5b9a\u5904\u7406\u5b8c\u7684\uff08\u7ffb\u8bd1\u51fa\u7684\uff09\u7ed3\u679c\u6587\u4ef6\u5b58\u653e\u8def\u5f84\t\tString outputPath = \"C:\\\\Users\\\\Leon\\\\Documents\\\\\u4e00\u4e9b\u4f5c\u54c1\\\\\u6e90\u7801\u5373\u6559\u7a0b\\\\\u8f93\u51fa\\\\\u529f\u80fd\u6027\u6d4b\u8bd5\u6e90\u7801\\\\\";//\u4f8b\u5b50\t\tbeachTranslateSourceCode(inputPath,outputPath);    }", "url": "https://raw.githubusercontent.com/LeonRain/wangwang/master/wangwang/src/main/java/com/leon/wangwang/Bark.java", "stars": "1", "class": {"name": "Bark", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "beachTranslateSourceCode", "params": ["String", "String"], "throws": null, "modifiers": ["static"], "return_type": "void", "snippet": "\tstatic void beachTranslateSourceCode(String inputPath,String outputPath) {\t\tFile file = new File(inputPath);\t\tFile [] files = file.listFiles();\t\tfor(File f:files) {\t\t\tString name = f.getName();\t\t\tif(f.isDirectory()) {\t\t\t\tString newOutputPath = outputPath + \"\\\\\" + name +\"\\\\\";\t\t\t\tString newInputPath = inputPath + name + \"\\\\\";\t\t\t\tSystem.out.println(\"\u521b\u5efa\u76ee\u5f55\uff1a\" + newInputPath);\t\t\t\tnew File(newOutputPath).mkdir();\t\t\t\t//\u9012\u5f52\u8c03\u7528\u5f53\u524d\u65b9\u6cd5\t\t\t\tbeachTranslateSourceCode(newInputPath,newOutputPath);\t\t\t\t//\u5b9a\u4e49\u652f\u6301\u7684\u6e90\u7801\u7c7b\u578b\t\t\t}else if(name.endsWith(\".java\") \t\t\t\t\t|| name.endsWith(\".scala\")\t\t\t\t\t|| name.endsWith(\".go\")\t\t\t\t\t|| name.endsWith(\".c\")\t\t\t\t\t|| name.endsWith(\".c++\")\t\t\t\t\t||name.endsWith(\".cs\")\t\t\t\t\t|| name.endsWith(\".kt\")\t\t\t\t\t|| name.endsWith(\".php\")\t\t\t\t\t|| name.endsWith(\".js\")) {\t\t\t\t//\u626b\u63cf\u5230\u8fd9\u4e9b\u7c7b\u578b\u7684\u6587\u4ef6\u5219\u7ffb\u8bd1\t\t\t\tSystem.out.println(\"\u5f00\u59cb\u7ffb\u8bd1 \" + inputPath + name);\t\t\t\ttranslateSourceCode(inputPath + name,outputPath + \"\" + name);\t\t\t}else{\t\t\t\t//\u5426\u5219\u8fdb\u884c\u590d\u5236\t\t\t\tSystem.out.println(\"\u5f00\u59cb\u590d\u5236 \" + inputPath + name);\t\t\t\tjustCopyOtherSourceFile(inputPath + name,outputPath + \"\" + name);\t\t\t}\t\t}\t}", "url": "https://raw.githubusercontent.com/LeonRain/wangwang/master/wangwang/src/main/java/com/leon/wangwang/Bark.java", "stars": "1", "class": {"name": "Bark", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "translateSourceCode", "params": ["String", "String"], "throws": null, "modifiers": ["static"], "return_type": "void", "snippet": "    static void translateSourceCode(String inputFile,String outputFile) {\t\tFile file = new File(inputFile);\t\tString line = null;\t\t//\u6574\u7bc7\u6587\u6863\u5b58\u5165\u4e00\u4e2aStringBuffer\u4e2d\uff0c\u539f\u6765\u7684\u6bcf\u884c\u5185\u5bb9\u73b0\u5728\u4ee5\"\\n\"\u5206\u9694\t\tStringBuffer originalAllLinesToOneSB = new StringBuffer();\t\ttry {\t\t\tBufferedReader originalAllLines = new BufferedReader(new FileReader(file));\t\t\twhile((line = originalAllLines.readLine()) != null) {\t\t\t\toriginalAllLinesToOneSB.append(\"\\n\"+line);\t\t\t}\t\t\toriginalAllLines.close();\t\t\t//\u5c06\u4e0a\u9762originalAllLinesToOneSB \u5b58\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\u4e2d\t\t\tString[] linesStrArray = originalAllLinesToOneSB.toString().split(\"\\n\");\t\t\t//\u5728\u5168\u6587\u4e2d\u5c06\u9700\u8981\u7ffb\u8bd1\u7684\u591a\u884c\u6ce8\u91ca\"/*   **\u5185\u5bb9**   */\"\u6574\u7406\u81f3\u4e00\u884c\u4e2d\t\t\tStringBuffer linesSBN2One = new StringBuffer(\"\");\t\t\tStringBuffer toTranslate = new StringBuffer(\"\");\t\t\tfor(String oneLine : linesStrArray) {\t\t\t\tif(oneLine.contains(\"*\") && (!oneLine.contains(\"*/\"))){\t\t\t\t\ttoTranslate.append(oneLine);\t\t\t\t}else if(oneLine.contains(\"*/\")) {\t\t\t\t\ttoTranslate.append(oneLine);//\u6dfb\u52a0\u6700\u540e\u4e00\u884c\u5185\u5bb9\t\t\t\t\tString annotateN2One = toTranslate.toString().replace(\"/*\", \"xfuckx\").replace(\"*/\", \"xduangx\").replace(\"*\", \"\").replace(\"xfuckx\", \"/*\").replace(\"xduangx\",\"*/\");//\u5207\u9664\u8bb8\u591a*\t\t\t\t\ttoTranslate = new StringBuffer(\"\");\t\t\t\t\tlinesSBN2One.append(\"\\n\"+annotateN2One);\t\t\t\t}else {\t\t\t\t\tlinesSBN2One.append(\"\\n\"+oneLine);\t\t\t\t}\t\t\t}\t\t\t\t\t\t//\u5c06\u6574\u7406\uff08\u591a\u884c\u6ce8\u89e3\u6574\u7406\u5230\u540c\u4e00\u884c\uff09\u540e\u7684\u5168\u6587\u8f6c\u4e3a\u5b57\u7b26\u4e32\u6570\u7ec4\t\t\tString[] linesArr = linesSBN2One.toString().split(\"\\n\");\t\t\t//\u5c06\u6240\u6709\u9700\u8981\u7ffb\u8bd1\u7684\u5185\u5bb9\u653e\u5165\u4e00\u4e2aStringBuffer \uff1aall2TransSB\t\t\tStringBuffer all2TransSB = new StringBuffer(\"\");\t\t\tfor(String tmpStr:linesArr) {\t\t\t\tif(tmpStr.contains(\"//\") || tmpStr.contains(\"/*\")) {\t\t\t\t\tall2TransSB.append(\"\\n\"+tmpStr);\t\t\t\t}\t\t\t}\t\t\t\t\t\t//\u5206\u6bb5\u7ffb\u8bd1\uff0c\u4e00\u6bb5\u5185\u5bb9\u7684\u957f\u5ea6\u57286K\u5b57\u8282\u4ee5\u5185\uff08\u6211\u7533\u8bf7\u7684\u767e\u5ea6\u7ffb\u8bd1\u662f\u514d\u8d39\u7248\u672c\uff0c\u9650\u5236\u4e3a\u6bcf\u79d2\u53ea\u80fd\u8bf7\u6c42\u4e00\u6b21\uff0c\u6bcf\u6b21\u8bf7\u6c42\u7684\u7ffb\u8bd1\u6587\u672c\u91cf\u9700\u57286000\u5b57\u8282\u4ee5\u5185\uff09\t\t\t//\u4f7f\u7528\u524d\u8bf7\u81ea\u884c\u7533\u8bf7baidu\u7ffb\u8bd1\u7684\u201c\u901a\u7528\u7ffb\u8bd1API\u201d\uff0c\u5207\u8bb0\uff1a\u9009\u62e9\u514d\u8d39\u7248\uff0c\u4e0d\u8981\u9009\u62e9\u6709\u6d41\u91cf\u4e0a\u9650\u8d85\u9650\u6536\u8d39\u7684\u90a3\u79cd\u3002\uff08\u94b1\u591a\u7684\u8bf7\u9009\u62e9\u6700\u9ad8\u89c4\u683c\u7684\u7248\u672c\uff0c\u6027\u80fd\u66f4\u5c4c\uff0c\u4e0d\u8fc7\u5f53\u524d\u7248\u672c\u53d1\u6325\u4e0d\u51fa\u6765\uff09\t\t\t//\u5c06\u6240\u6709\u5f85\u7ffb\u8bd1\u7684\u5185\u5bb9\u5b58\u5165\u5b57\u7b26\u4e32\u6570\u7ec4\t\t\tString[] linesArr2 = all2TransSB.toString().split(\"\\n\");\t\t\t//\u7528\u6765\u63a7\u5236\u4e00\u6b21\u7684\u5b9e\u9645\u7ffb\u8bd1\u91cf\t\t\tStringBuffer toTranslateOnce = new StringBuffer(\"\");\t\t\t//\u7528\u6765\u5b58\u653e\u7ffb\u8bd1\u8fc7\u7684\u5185\u5bb9\t\t\tStringBuffer translatedSB = new StringBuffer(\"\");\t\t\tfor(String tmpStr:linesArr2) {\t\t\t\tif(toTranslateOnce.length() + tmpStr.length() > 6000) {\t\t\t\t\t//\u7ffb\u8bd1\u3001\u6e05\u7a7a\u3001\u518d\u6dfb\u52a0\t\t\t\t\ttranslatedSB.append(\"\\n\"+useBDTBatch(toTranslateOnce.toString()));//\u7ffb\u8bd1\t\t\t\t\ttoTranslateOnce = new StringBuffer(\"\");//\u6e05\u7a7a\t\t\t\t\ttoTranslateOnce.append(\"\\n\"+tmpStr);//\u6dfb\u52a0\t\t\t\t}else {\t\t\t\t\ttoTranslateOnce.append(\"\\n\"+tmpStr);//\u6dfb\u52a0\t\t\t\t}\t\t\t}\t\t\t//\u7ed3\u675f\u524d\u7ffb\u8bd1\u5269\u4e0b\u7684\u5185\u5bb9\t\t\ttranslatedSB.append(\"\\n\"+useBDTBatch(toTranslateOnce.toString()));//\u7ffb\u8bd1\t\t\t//\u7ffb\u8bd1\u4e4b\u540e\u7684\u5185\u5bb9\u8f6c\u4e3a\u5b57\u7b26\u4e32\u6570\u7ec4\t\t\tString[] translatedArr = translatedSB.toString().split(\"\\n\");\t\t\t//\u5c06\u5185\u5bb9\u653e\u56de\u6574\u7406\u540e\u7684\u5168\u6587\u5b57\u7b26\u4e32\u6570\u7ec4linesArr\u4e2d\t\t\tint indexOfTranslated = 2;//\u7ffb\u8bd1\u540e\u7684\u7ed3\u679c\u96c6\uff0c\u521d\u59cb\u503c\u4e3a\u9700\u8981\u8df3\u8fc7\u7684\u7ffb\u8bd1\u7ed3\u679c\u4e2d\u7684\u7a7a\u7ed3\u679c\t\t\tfor(int x = 0; x <linesArr.length; x ++) {\t\t\t\tif(linesArr[x].contains(\"//\") || linesArr[x].contains(\"/*\")) {\t\t\t\t\tlinesArr[x] = translatedArr[indexOfTranslated];\t\t\t\t\tindexOfTranslated ++;\t\t\t\t}\t\t\t}\t\t\t//\u5c06\u5199\u5165\u4e86\u5df2\u7ffb\u8bd1\u5185\u5bb9\u7684\u5168\u6587\u5b57\u7b26\u4e32\u6570\u7ec4linesArr\u8f6c\u4e3aStringBuffer\u8fdb\u800c\u8f6c\u4e3aString\uff0c\u8f93\u51fa\u5230\u6587\u4ef6\t\t\tStringBuffer toOutput = new StringBuffer(\"\");\t\t\tfor(String str:linesArr) {\t\t\t\ttoOutput.append(\"\\n\"+str);\t\t\t}\t\t\t//\u8f93\u51fa\u5230\u6587\u4ef6\t\t\twriteFile(toOutput.toString(),outputFile);\t\t\tSystem.out.println(\"finished !\");\t\t} catch (Exception e) {\t\t\t// TODO Auto-generated catch block\t\t\te.printStackTrace();\t\t}\t}", "url": "https://raw.githubusercontent.com/LeonRain/wangwang/master/wangwang/src/main/java/com/leon/wangwang/Bark.java", "stars": "1", "class": {"name": "Bark", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "useBDTBatch", "params": ["String"], "throws": null, "modifiers": ["static"], "return_type": "String", "snippet": "    static String useBDTBatch(String input) {        TransApi api = new TransApi(APP_ID, SECURITY_KEY);        try {\t\t\tThread.sleep(1000);//\u53d7\u9650\u4e8e\u5f53\u524d\u7684\u767e\u5ea6\u7ffb\u8bd1\u8d26\u53f7\u7248\u672c\uff0c\u6bcf\u79d2\u53ea\u80fd\u8bf7\u6c421\u6b21\uff0c\u6545\u5728\u6b64\u8fdb\u7a0b\u7761\u77201\u79d2\t\t} catch (InterruptedException e) {\t\t\t// TODO Auto-generated catch block\t\t\te.printStackTrace();\t\t}        //\u4e00\u6b21\u7ffb\u8bd1\u8bf7\u6c42\uff0c\u670d\u52a1\u5668\u8fd4\u56de\u7684\u7ed3\u679c        String res = api.getTransResult(input, \"auto\", \"zh\");        //\u7528\u6765\u5b58\u653e\u7ffb\u8bd1\u540e\u7684\u591a\u884c\u7ed3\u679c\u96c6        StringBuffer out = new StringBuffer(\"\");        //\u7ed3\u679c\u89e3\u6790\u6210\u81ea\u5b9a\u4e49\u7ed3\u6784\u7684\u5217\u8868\uff0c\u8fd9\u91cc\u5b9a\u4e49\u4e86\u4e00\u4e2aResoult\u7c7b        List<Resoult> resultList = JSON.parseArray(\"[\"+res+\"]\", Resoult.class);        //\u4eceresultList\u4e2d\u63d0\u53d6\u51fa\u7ffb\u8bd1\u7ed3\u679c\u5b57\u7b26\u4e32\uff0c\u4f5c\u4e3a\u8f93\u51fa        for (Resoult ares : resultList) {        \tfor(TransResult tr:ares.transResult) {        \t\tout.append(\"\\n\"+tr.dst);        \t}        }        return out.toString();    }", "url": "https://raw.githubusercontent.com/LeonRain/wangwang/master/wangwang/src/main/java/com/leon/wangwang/Bark.java", "stars": "1", "class": {"name": "Bark", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "writeFile", "params": ["String", "String"], "throws": null, "modifiers": ["static"], "return_type": "void", "snippet": "\tstatic void writeFile(String content,String fileName) {\t    File file =new File(fileName);\t\ttry {\t\t\tif(!file.exists()){\t        \tfile.createNewFile();\t        }\t        Writer fileWritter = new FileWriter(file);\t\t\tBufferedWriter bw = new BufferedWriter(fileWritter);\t\t\tbw.write(content);\t\t    bw.close();\t\t} catch (IOException e) {\t\t\t// TODO Auto-generated catch block\t\t\te.printStackTrace();\t\t}\t}", "url": "https://raw.githubusercontent.com/LeonRain/wangwang/master/wangwang/src/main/java/com/leon/wangwang/Bark.java", "stars": "1", "class": {"name": "Bark", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "justCopyOtherSourceFile", "params": ["String", "String"], "throws": null, "modifiers": ["static"], "return_type": "void", "snippet": "\tstatic void justCopyOtherSourceFile(String inputFile,String outputFile) {\t\tFile file = new File(inputFile);\t\tString line = null;\t\tStringBuffer thisCode = new StringBuffer();\t\ttry {\t\t\tBufferedReader br = new BufferedReader(new FileReader(file));\t\t\twhile((line = br.readLine()) != null) {\t\t\t\tthisCode.append(\"\\n\"+line);\t\t\t}\t\t\tbr.close();\t\t\twriteFile(thisCode.toString(),outputFile);\t\t\tSystem.out.println(\"copyed !\");\t\t} catch (Exception e) {\t\t\t// TODO Auto-generated catch block\t\t\te.printStackTrace();\t\t}\t}", "url": "https://raw.githubusercontent.com/LeonRain/wangwang/master/wangwang/src/main/java/com/leon/wangwang/Bark.java", "stars": "1", "class": {"name": "Bark", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getFrom", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\t\tpublic String getFrom() {\t\t\treturn from;\t\t}", "url": "https://raw.githubusercontent.com/LeonRain/wangwang/master/wangwang/src/main/java/com/leon/wangwang/Bark.java", "stars": "1", "class": {"name": "Resoult", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "setFrom", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void setFrom(String from) {\t\t\tthis.from = from;\t\t}", "url": "https://raw.githubusercontent.com/LeonRain/wangwang/master/wangwang/src/main/java/com/leon/wangwang/Bark.java", "stars": "1", "class": {"name": "Resoult", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "getTo", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\t\tpublic String getTo() {\t\t\treturn to;\t\t}", "url": "https://raw.githubusercontent.com/LeonRain/wangwang/master/wangwang/src/main/java/com/leon/wangwang/Bark.java", "stars": "1", "class": {"name": "Resoult", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "setTo", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void setTo(String to) {\t\t\tthis.to = to;\t\t}", "url": "https://raw.githubusercontent.com/LeonRain/wangwang/master/wangwang/src/main/java/com/leon/wangwang/Bark.java", "stars": "1", "class": {"name": "Resoult", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "getTrans_result", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TransResult", "snippet": "\t\tpublic TransResult[] getTrans_result() {\t\t\treturn transResult;\t\t}", "url": "https://raw.githubusercontent.com/LeonRain/wangwang/master/wangwang/src/main/java/com/leon/wangwang/Bark.java", "stars": "1", "class": {"name": "Resoult", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "setTrans_result", "params": ["TransResult"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void setTrans_result(TransResult[] transResult) {\t\t\tthis.transResult = transResult;\t\t}", "url": "https://raw.githubusercontent.com/LeonRain/wangwang/master/wangwang/src/main/java/com/leon/wangwang/Bark.java", "stars": "1", "class": {"name": "Resoult", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "getSrc", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\t\tpublic String getSrc() {\t\t\treturn src;\t\t}", "url": "https://raw.githubusercontent.com/LeonRain/wangwang/master/wangwang/src/main/java/com/leon/wangwang/Bark.java", "stars": "1", "class": {"name": "TransResult", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "setSrc", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void setSrc(String src) {\t\t\tthis.src = src;\t\t}", "url": "https://raw.githubusercontent.com/LeonRain/wangwang/master/wangwang/src/main/java/com/leon/wangwang/Bark.java", "stars": "1", "class": {"name": "TransResult", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "getDst", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "\t\tpublic String getDst() {\t\t\treturn dst;\t\t}", "url": "https://raw.githubusercontent.com/LeonRain/wangwang/master/wangwang/src/main/java/com/leon/wangwang/Bark.java", "stars": "1", "class": {"name": "TransResult", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "setDst", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void setDst(String dst) {\t\t\tthis.dst = dst;\t\t}", "url": "https://raw.githubusercontent.com/LeonRain/wangwang/master/wangwang/src/main/java/com/leon/wangwang/Bark.java", "stars": "1", "class": {"name": "TransResult", "extends": null, "implements": null, "modifiers": ["static"]}}, {"method_name": "getName", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getName() {        return name;    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/money_split_data.java", "stars": "2", "class": {"name": "money_split_data", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setName", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setName(String name) {        this.name = name;    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/money_split_data.java", "stars": "2", "class": {"name": "money_split_data", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMoney", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getMoney() {        return money;    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/money_split_data.java", "stars": "2", "class": {"name": "money_split_data", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "setMoney", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void setMoney(String money) {        this.money = money;    }", "url": "https://raw.githubusercontent.com/AkhilRautela/ledger_system/master/app/src/main/java/com/example/ledgersystem/money_split_data.java", "stars": "2", "class": {"name": "money_split_data", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "addCollege", "params": ["College"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void addCollege(College college) {        collegeList.add(college);    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/iterator/CollegeAggregateImpl.java", "stars": "2", "class": {"name": "CollegeAggregateImpl", "extends": null, "implements": ["CollegeAggregate"], "modifiers": ["public"]}}, {"method_name": "removeCollege", "params": ["College"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void removeCollege(College college) {        collegeList.remove(college);    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/iterator/CollegeAggregateImpl.java", "stars": "2", "class": {"name": "CollegeAggregateImpl", "extends": null, "implements": ["CollegeAggregate"], "modifiers": ["public"]}}, {"method_name": "getIterator", "params": [], "throws": null, "modifiers": ["public"], "return_type": "CollegeIterator", "snippet": "    public CollegeIterator getIterator() {        return new CollegeIteratorImpl(collegeList);    }", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/behavioral/iterator/CollegeAggregateImpl.java", "stars": "2", "class": {"name": "CollegeAggregateImpl", "extends": null, "implements": ["CollegeAggregate"], "modifiers": ["public"]}}, {"method_name": "initValues", "params": ["GLSurfaceView"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void initValues(GLSurfaceView mGlSurfaceView) {        mWidth = mGlSurfaceView.getWidth();        mHeight = mGlSurfaceView.getHeight();        mRandom = new Random(new Date().getTime());    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/effect/DocumentaryEffect.java", "stars": "2", "class": {"name": "DocumentaryEffect", "extends": null, "implements": ["ShaderInterface"], "modifiers": ["public"]}}, {"method_name": "getShader", "params": ["GLSurfaceView"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getShader(GLSurfaceView mGlSurfaceView) {        initValues(mGlSurfaceView);        float scale[] = new float[2];        if (mWidth > mHeight) {            scale[0] = 1f;            scale[1] = ((float) mHeight) / mWidth;        } else {            scale[0] = ((float) mWidth) / mHeight;            scale[1] = 1f;        }        float max_dist = ((float) Math.sqrt(scale[0] * scale[0] + scale[1]                * scale[1])) * 0.5f;        float seed[] = {mRandom.nextFloat(), mRandom.nextFloat()};        String scaleString[] = new String[2];        String seedString[] = new String[2];        scaleString[0] = \"scale[0] = \" + scale[0] + \";\\n\";        scaleString[1] = \"scale[1] = \" + scale[1] + \";\\n\";        seedString[0] = \"seed[0] = \" + seed[0] + \";\\n\";        seedString[1] = \"seed[1] = \" + seed[1] + \";\\n\";        String inv_max_distString = \"inv_max_dist = \" + 1.0f / max_dist + \";\\n\";        String stepsizeString = \"stepsize = \" + 1.0f / 255.0f + \";\\n\";        String shader = \"#extension GL_OES_EGL_image_external : require\\n\"                + \"precision mediump float;\\n\"                + \"uniform samplerExternalOES sTexture;\\n\"                + \" vec2 seed;\\n\"                + \" float stepsize;\\n\"                + \" float inv_max_dist;\\n\"                + \" vec2 scale;\\n\"                + \"varying vec2 vTextureCoord;\\n\"                + \"float rand(vec2 loc) {\\n\"                + \"  float theta1 = dot(loc, vec2(0.9898, 0.233));\\n\"                + \"  float theta2 = dot(loc, vec2(12.0, 78.0));\\n\"                + \"  float value = cos(theta1) * sin(theta2) + sin(theta1) * cos(theta2);\\n\"                +                // keep value of part1 in range: (2^-14 to 2^14).                \"  float temp = mod(197.0 * value, 1.0) + value;\\n\"                + \"  float part1 = mod(220.0 * temp, 1.0) + temp;\\n\"                + \"  float part2 = value * 0.5453;\\n\"                + \"  float part3 = cos(theta1 + theta2) * 0.43758;\\n\"                + \"  return fract(part1 + part2 + part3);\\n\"                + \"}\\n\"                + \"void main() {\\n\"                // Parameters that were created above                + scaleString[0]                + scaleString[1]                + seedString[0]                + seedString[1]                + inv_max_distString                + stepsizeString                // black white                + \"  vec4 color = texture2D(sTexture, vTextureCoord);\\n\"                + \"  float dither = rand(vTextureCoord + seed);\\n\"                + \"  vec3 xform = clamp(2.0 * color.rgb, 0.0, 1.0);\\n\"                + \"  vec3 temp = clamp(2.0 * (color.rgb + stepsize), 0.0, 1.0);\\n\"                + \"  vec3 new_color = clamp(xform + (temp - xform) * (dither - 0.5), 0.0, 1.0);\\n\"                +                // grayscale                \"  float gray = dot(new_color, vec3(0.299, 0.587, 0.114));\\n\"                + \"  new_color = vec3(gray, gray, gray);\\n\"                +                // vignette                \"  vec2 coord = vTextureCoord - vec2(0.5, 0.5);\\n\"                + \"  float dist = length(coord * scale);\\n\"                + \"  float lumen = 0.85 / (1.0 + exp((dist * inv_max_dist - 0.83) * 20.0)) + 0.15;\\n\"                + \"  gl_FragColor = vec4(new_color * lumen, color.a);\\n\"                + \"}\\n\";        return shader;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/effect/DocumentaryEffect.java", "stars": "2", "class": {"name": "DocumentaryEffect", "extends": null, "implements": ["ShaderInterface"], "modifiers": ["public"]}}, {"method_name": "buildCPU", "params": ["String"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void buildCPU(String CPU);    public abstract void buildMotherboard(String motherboard);    public abstract void buildRAM(String RAM);    public abstract void buildGPU(String GPU);    public abstract void buildMonitor(String monitor);    //\u7ec4\u88c5\u7535\u8111    public abstract Computer AssembleComputer();}", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/builder/ComputerBuilder.java", "stars": "2", "class": {"name": "ComputerBuilder", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "buildMotherboard", "params": ["String"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void buildMotherboard(String motherboard);    public abstract void buildRAM(String RAM);    public abstract void buildGPU(String GPU);    public abstract void buildMonitor(String monitor);    //\u7ec4\u88c5\u7535\u8111    public abstract Computer AssembleComputer();}", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/builder/ComputerBuilder.java", "stars": "2", "class": {"name": "ComputerBuilder", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "buildRAM", "params": ["String"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void buildRAM(String RAM);    public abstract void buildGPU(String GPU);    public abstract void buildMonitor(String monitor);    //\u7ec4\u88c5\u7535\u8111    public abstract Computer AssembleComputer();}", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/builder/ComputerBuilder.java", "stars": "2", "class": {"name": "ComputerBuilder", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "buildGPU", "params": ["String"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void buildGPU(String GPU);    public abstract void buildMonitor(String monitor);    //\u7ec4\u88c5\u7535\u8111    public abstract Computer AssembleComputer();}", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/builder/ComputerBuilder.java", "stars": "2", "class": {"name": "ComputerBuilder", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "buildMonitor", "params": ["String"], "throws": null, "modifiers": ["public", "abstract"], "return_type": "void", "snippet": "    public abstract void buildMonitor(String monitor);    //\u7ec4\u88c5\u7535\u8111    public abstract Computer AssembleComputer();}", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/builder/ComputerBuilder.java", "stars": "2", "class": {"name": "ComputerBuilder", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "AssembleComputer", "params": [], "throws": null, "modifiers": ["public", "abstract"], "return_type": "Computer", "snippet": "    public abstract Computer AssembleComputer();}", "url": "https://raw.githubusercontent.com/wangIQD/GoF23/master/GOF23/DesignPattern/src/com/wz/creational/builder/ComputerBuilder.java", "stars": "2", "class": {"name": "ComputerBuilder", "extends": null, "implements": null, "modifiers": ["public", "abstract"]}}, {"method_name": "onTreeViewClick", "params": ["MouseEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onTreeViewClick(MouseEvent e) {        if (e.getClickCount() != 1 || e.getButton() != MouseEvent.BUTTON2)            return;        DefaultMutableTreeNode node = getSelectedNode();        if (node == null)            return;        AnyData data = (AnyData) node.getUserObject();        Dlg dlg = data.showDialog(false);        dlg.dispose();    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/view/MainGui.java", "stars": "2", "class": {"name": "MainGui", "extends": "JFrame", "implements": null, "modifiers": ["public"]}}, {"method_name": "onAddAction", "params": ["ActionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onAddAction(ActionEvent e) {        final DefaultMutableTreeNode parent = getSelectedNode();        if (parent == null)            return;        AnyData parentData = (AnyData) parent.getUserObject();        Dlg dlg = parentData.showSonDialog();        if (dlg == null)            return;        AnyData newData;        try {            newData = dlg.createData();        } catch (Exception ex) {            JOptionPane.showMessageDialog(viewTree, ex.getMessage(), \"Error\", JOptionPane.ERROR_MESSAGE);            return;        }        dlg.dispose();        if (newData == null)            return;        final DefaultMutableTreeNode newSon = new DefaultMutableTreeNode(newData);        parent.add(newSon);        viewTree.updateUI();        expandAll();    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/view/MainGui.java", "stars": "2", "class": {"name": "MainGui", "extends": "JFrame", "implements": null, "modifiers": ["public"]}}, {"method_name": "onRemoveAction", "params": ["ActionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRemoveAction(ActionEvent e) {        final DefaultMutableTreeNode node = getSelectedNode();        if (node == null)            return;        node.removeFromParent();        viewTree.setSelectionPath(null);        viewTree.updateUI();    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/view/MainGui.java", "stars": "2", "class": {"name": "MainGui", "extends": "JFrame", "implements": null, "modifiers": ["public"]}}, {"method_name": "onEditAction", "params": ["ActionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onEditAction(ActionEvent e) {        final DefaultMutableTreeNode node = getSelectedNode();        if (node == null)            return;        AnyData data = (AnyData) node.getUserObject();        Dlg dlg = data.showDialog(true);        AnyData editData;        try {            editData = dlg.createData();        } catch (Exception ex) {            JOptionPane.showMessageDialog(viewTree, ex.getMessage(), \"Error\", JOptionPane.ERROR_MESSAGE);            return;        }        dlg.dispose();        if (editData == null)            return;        node.setUserObject(editData);        viewTree.updateUI();    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/view/MainGui.java", "stars": "2", "class": {"name": "MainGui", "extends": "JFrame", "implements": null, "modifiers": ["public"]}}, {"method_name": "onStoreAction", "params": ["ActionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onStoreAction(ActionEvent e) {        final TreeModel model = viewTree.getModel();        // Check for tree empty.        if (model == null || model.getRoot() == null) {            JOptionPane.showMessageDialog(                    this,                    \"Tree is empty.\\n\" +                            \"To store tree, you must fill it at first.\",                    \"Error\",                    JOptionPane.ERROR_MESSAGE            );            return;        }        // Forming file chooser gui.        final JFileChooser fileChooser = new JFileChooser();        fileChooser.setDialogTitle(\"Select file to save\");        fileChooser.setApproveButtonText(\"Save\");        fileChooser.setFileFilter(new FileFilter() {            @Override            public boolean accept(File f) {                return !f.isDirectory() && f.getName().endsWith(\".bin\");            }            @Override            public String getDescription() {                return \"Wood storage data - .wood\";            }        });        fileChooser.setMultiSelectionEnabled(false);        final int selection = fileChooser.showSaveDialog(this);        if (selection != JFileChooser.APPROVE_OPTION)            return;        // Extract selected file with spell check.        File selectedFile = fileChooser.getSelectedFile();        if (!selectedFile.getName().endsWith(\".bin\"))            selectedFile = new File(selectedFile.getAbsolutePath(), selectedFile.getName() + \".bin\");        // Writing current tree model to file.        try (ObjectOutputStream stream = new ObjectOutputStream(new FileOutputStream(selectedFile))) {            stream.writeObject(viewTree.getModel());        } catch (IOException ex) {            ex.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/view/MainGui.java", "stars": "2", "class": {"name": "MainGui", "extends": "JFrame", "implements": null, "modifiers": ["public"]}}, {"method_name": "onRestoreAction", "params": ["ActionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onRestoreAction(ActionEvent e) {        // Forming file chooser gui.        final JFileChooser fileChooser = new JFileChooser();        fileChooser.setDialogTitle(\"Select file to open.\");        fileChooser.setApproveButtonText(\"Open\");        fileChooser.setFileFilter(new FileFilter() {            @Override            public boolean accept(File f) {                return !f.isDirectory() && f.getName().endsWith(\".bin\");            }            @Override            public String getDescription() {                return \"Binary Data - .bin\";            }        });        fileChooser.setMultiSelectionEnabled(false);        final int selection = fileChooser.showOpenDialog(this);        if (selection != JFileChooser.APPROVE_OPTION)            return;        // Getting user selected file.        final File selectedFile = fileChooser.getSelectedFile();        // Writes data to file.        try (ObjectInputStream stream = new ObjectInputStream(new FileInputStream(selectedFile))) {            viewTree.setModel((TreeModel) stream.readObject());        } catch (IOException | ClassCastException | ClassNotFoundException ex) {            JOptionPane.showMessageDialog(                    this,                    \"The bad format of store.\\n\" + ex.getMessage(),                    \"Error\",                    JOptionPane.ERROR_MESSAGE            );            ex.printStackTrace();            return;        }        expandAll();    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/view/MainGui.java", "stars": "2", "class": {"name": "MainGui", "extends": "JFrame", "implements": null, "modifiers": ["public"]}}, {"method_name": "onBiggestRegionByPopulation", "params": ["ActionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onBiggestRegionByPopulation(ActionEvent e) {        final TreeModel model = viewTree.getModel();        final Object root = model.getRoot();        int maxPopulation = 0;        DefaultMutableTreeNode max = null;        // Iterates over regions        final int regionCount = model.getChildCount(root);        for (int i = 0; i < regionCount; i++) {            final Object regionNode = model.getChild(root, i);            int population = 0;            // Iterates over districts            final int districtCount = model.getChildCount(regionNode);            for (int j = 0; j < districtCount; j++) {                final Object districtNode = model.getChild(regionNode, j);                // Iterates over cities                final int cityCount = model.getChildCount(districtNode);                for (int k = 0; k < cityCount; k++) {                    final DefaultMutableTreeNode cityNode = (DefaultMutableTreeNode) model.getChild(districtNode, k);                    final City city = (City) cityNode.getUserObject();                    population += city.getPopulation();                }            }            if (population >= maxPopulation) {                maxPopulation = population;                max = (DefaultMutableTreeNode) regionNode;            }        }        if (max == null) {            JOptionPane.showMessageDialog(viewTree, \"Nothing found!\", \"Error\", JOptionPane.ERROR_MESSAGE);            return;        }        selectNode(max);        ((AnyData) max.getUserObject()).showDialog(false);    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/view/MainGui.java", "stars": "2", "class": {"name": "MainGui", "extends": "JFrame", "implements": null, "modifiers": ["public"]}}, {"method_name": "onDistrictByMostVillageCouncils", "params": ["ActionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void onDistrictByMostVillageCouncils(ActionEvent e) {        DefaultMutableTreeNode node = getSelectedNode();        if (node == null)            return;        int maxCouncils = 0;        DefaultMutableTreeNode max = null;        Enumeration<TreeNode> enm = node.postorderEnumeration();        while (enm.hasMoreElements()) {            final DefaultMutableTreeNode current = (DefaultMutableTreeNode) enm.nextElement();            final Object data = current.getUserObject();            if (!(data instanceof District))                continue;            int councils = ((District) data).getVillageCouncils();            if (councils > maxCouncils) {                maxCouncils = councils;                max = current;            }        }        if (max == null) {            JOptionPane.showMessageDialog(viewTree, \"Nothing found!\", \"Error\", JOptionPane.ERROR_MESSAGE);            return;        }        selectNode(max);        ((AnyData) max.getUserObject()).showDialog(false);    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/view/MainGui.java", "stars": "2", "class": {"name": "MainGui", "extends": "JFrame", "implements": null, "modifiers": ["public"]}}, {"method_name": "getDefaultTreeModel", "params": [], "throws": null, "modifiers": ["public"], "return_type": "TreeModel", "snippet": "    public TreeModel getDefaultTreeModel() {        final Country country = new Country(\"\u0423\u043a\u0440\u0430\u0457\u043d\u0430\", \"\u0417\u0435\u043b\u0435\u043d\u0441\u044c\u043a\u0438\u0439 \u0412\u043e\u043b\u043e\u0434\u0438\u043c\u0438\u0440 \u041e\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u043e\u0432\u0438\u0447\", \"\u041a\u0438\u0457\u0432\");        final Region region = new Region(\"\u0427\u0435\u0440\u043d\u0456\u0433\u0456\u0432\u0441\u044c\u043a\u0430 \u043e\u0431\u043b\u0430\u0441\u0442\u044c\", \"\u0410\u043d\u0434\u0440\u0456\u0439 \u041b\u0435\u043e\u043d\u0456\u0434\u043e\u0432\u0438\u0447 \u041f\u0440\u043e\u043a\u043e\u043f\u0435\u043d\u043a\u043e\", 31_903, \"\u0427\u0435\u0440\u043d\u0456\u0433\u043e\u0432\");        final District district = new District(\"\u0427\u0435\u0440\u043d\u0456\u0433\u0456\u0432\u0441\u044c\u043a\u0438\u0439 \u0440\u0430\u0439\u043e\u043d\", 46, \"\u0427\u0435\u0440\u043d\u0456\u0433\u0456\u0432\");        final City city = new City(\"\u0427\u0435\u0440\u043d\u0456\u0433\u0456\u0432\", 286_899, \"\u0412\u043b\u0430\u0434\u0438\u0441\u043b\u0430\u0432 \u0410\u043d\u0430\u0442\u043e\u043b\u0456\u0439\u043e\u0432\u0438\u0447 \u0410\u0442\u0440\u043e\u0448\u0435\u043d\u043a\u043e\");        final DefaultMutableTreeNode countryNode = new DefaultMutableTreeNode(country);        final DefaultMutableTreeNode regionNode = new DefaultMutableTreeNode(region);        final DefaultMutableTreeNode districtNode = new DefaultMutableTreeNode(district);        final DefaultMutableTreeNode cityNode = new DefaultMutableTreeNode(city);        countryNode.add(regionNode);        regionNode.add(districtNode);        districtNode.add(cityNode);        return new JTree(countryNode).getModel();    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/view/MainGui.java", "stars": "2", "class": {"name": "MainGui", "extends": "JFrame", "implements": null, "modifiers": ["public"]}}, {"method_name": "getSelectedNode", "params": [], "throws": null, "modifiers": ["private"], "return_type": "DefaultMutableTreeNode", "snippet": "    private DefaultMutableTreeNode getSelectedNode() {        Object selectedNode = viewTree.getLastSelectedPathComponent();        if (selectedNode == null)            JOptionPane.showMessageDialog(viewTree, \"Select node at first!\", \"Error\", JOptionPane.ERROR_MESSAGE);        return (DefaultMutableTreeNode) selectedNode;    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/view/MainGui.java", "stars": "2", "class": {"name": "MainGui", "extends": "JFrame", "implements": null, "modifiers": ["public"]}}, {"method_name": "expandAll", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void expandAll() {        for (int i = 0; i < viewTree.getRowCount(); i++)            viewTree.expandRow(i);    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/view/MainGui.java", "stars": "2", "class": {"name": "MainGui", "extends": "JFrame", "implements": null, "modifiers": ["public"]}}, {"method_name": "selectNode", "params": ["DefaultMutableTreeNode"], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void selectNode(DefaultMutableTreeNode node) {        int n = 0;        DefaultMutableTreeNode root = (DefaultMutableTreeNode) viewTree.getModel().getRoot();        Enumeration<TreeNode> enm = root.children();        while (enm.hasMoreElements()) {            final TreeNode treeNode = enm.nextElement();            if (treeNode == node) {                viewTree.setSelectionRow(n);                return;            }            n++;        }    }", "url": "https://raw.githubusercontent.com/pi-181/oop-labs/master/Rgr1/src/main/java/com/demkom58/rgr1/view/MainGui.java", "stars": "2", "class": {"name": "MainGui", "extends": "JFrame", "implements": null, "modifiers": ["public"]}}, {"method_name": "startElement", "params": ["String", "String", "String", "Attributes"], "throws": ["SAXException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/netcast/NetcastPOSTRequestParser.java", "stars": "4", "class": {"name": "NetcastPOSTRequestParser", "extends": "DefaultHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "endElement", "params": ["String", "String", "String"], "throws": ["SAXException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void endElement(String uri, String localName, String qName) throws SAXException {        try {            System.out.println(\"XML key: \" + qName + \", value: \" + value);            if (qName.equalsIgnoreCase(CHANNEL_TYPE)) {                object.put(\"channelModeName\", value);            }            else if (qName.equalsIgnoreCase(MAJOR)) {                object.put(\"majorNumber\", Integer.parseInt(value));            }            else if (qName.equalsIgnoreCase(DISPLAY_MAJOR)) {                object.put(\"displayMajorNumber\", Integer.parseInt(value));            }            else if (qName.equalsIgnoreCase(MINOR)) {                object.put(\"minorNumber\", Integer.parseInt(value));            }            else if (qName.equalsIgnoreCase(DISPLAY_MINOR)) {                object.put(\"displayMinorNumber\", Integer.parseInt(value));            }            else if (qName.equalsIgnoreCase(SOURCE_INDEX)) {                object.put(\"sourceIndex\", value);            }            else if (qName.equalsIgnoreCase(PHYSICAL_NUM)) {                object.put(\"physicalNumber\", Integer.parseInt(value));            }            else if (qName.equalsIgnoreCase(CHANNEL_NAME)) {                object.put(\"channelName\", value);            }            else if (qName.equalsIgnoreCase(PROGRAM_NAME)) {                object.put(\"programName\", value);            }            else if (qName.equalsIgnoreCase(AUDIO_CHANNEL)) {                object.put(\"audioCh\", value);            }            else if (qName.equalsIgnoreCase(INPUT_SOURCE_NAME)) {                object.put(\"inputSourceName\", value);            }            else if (qName.equalsIgnoreCase(INPUT_SOURCE_TYPE)) {                object.put(\"inputSourceType\", value);            }            else if (qName.equalsIgnoreCase(LABEL_NAME)) {                object.put(\"labelName\", value);            }            else if (qName.equalsIgnoreCase(INPUT_SOURCE_INDEX)) {                object.put(\"inputSourceIndex\", value);            }            else if (qName.equalsIgnoreCase(VALUE)) {                if (keyboardVisibleMode) {                    if (value.equalsIgnoreCase(\"true\"))                        subObject.put(\"focus\", true);                    else                         subObject.put(\"focus\", false);                    object.put(\"currentWidget\", subObject);                }                else {                    object.put(\"value\", value);                }            }            else if (qName.equalsIgnoreCase(MODE)) {                if (keyboardVisibleMode) {                    if (value.equalsIgnoreCase(\"default\"))                        subObject.put(\"hiddenText\", false);                    else                         subObject.put(\"hiddenText\", true);                    object.put(\"currentWidget\", subObject);                }            }            else if (qName.equalsIgnoreCase(STATE)) {             }            else if (value != null && value.equalsIgnoreCase(\"KeyboardVisible\")) {                keyboardVisibleMode = true;                try {                    subObject.put(\"contentType\", \"normal\");                    subObject.put(\"focus\", false);                    subObject.put(\"hiddenText\", false);                    subObject.put(\"predictionEnabled\", false);                    subObject.put(\"correctionEnabled\", false);                    subObject.put(\"autoCapitalization\", false);                } catch (JSONException e) {                    e.printStackTrace();                }            }            else if (value != null && value.equalsIgnoreCase(\"TextEdited\")) {                textEditMode = true;            }            value = null;        } catch (JSONException e) {            e.printStackTrace();        }    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/netcast/NetcastPOSTRequestParser.java", "stars": "4", "class": {"name": "NetcastPOSTRequestParser", "extends": "DefaultHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "characters", "params": ["char", "int", "int"], "throws": ["SAXException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void characters(char[] ch, int start, int length) throws SAXException {        value = new String(ch, start, length);    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/netcast/NetcastPOSTRequestParser.java", "stars": "4", "class": {"name": "NetcastPOSTRequestParser", "extends": "DefaultHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "getJSONObject", "params": [], "throws": null, "modifiers": ["public"], "return_type": "JSONObject", "snippet": "    public JSONObject getJSONObject() {        return object;    }", "url": "https://raw.githubusercontent.com/abdalmoniem/Movie-App/master/connectsdk/core/src/com/connectsdk/service/netcast/NetcastPOSTRequestParser.java", "stars": "4", "class": {"name": "NetcastPOSTRequestParser", "extends": "DefaultHandler", "implements": null, "modifiers": ["public"]}}, {"method_name": "createURLStreamHandler", "params": ["String"], "throws": null, "modifiers": ["public"], "return_type": "URLStreamHandler", "snippet": "    public URLStreamHandler createURLStreamHandler(String protocol) {        if (ContentResolver.SCHEME_CONTENT.equals(protocol)                || ContentResolver.SCHEME_FILE.equals(protocol)                || ContentResolver.SCHEME_ANDROID_RESOURCE.equals(protocol)) {            return new ContentURLStreamHandler(mResolver);        } else {            return null;        }    }", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/google%20image%20loader%20api%20complete/com/google/android/imageloader/ContentURLStreamHandlerFactory.java", "stars": "74", "class": {"name": "ContentURLStreamHandlerFactory", "extends": null, "implements": ["URLStreamHandlerFactory"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tSpringApplication.run(SampleQuartzApplication.class, args);\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-quartz/src/main/java/smoketest/quartz/SampleQuartzApplication.java", "stars": "47572", "class": {"name": "SampleQuartzApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sampleJobDetail", "params": [], "throws": null, "modifiers": ["public"], "return_type": "JobDetail", "snippet": "\tpublic JobDetail sampleJobDetail() {\t\treturn JobBuilder.newJob(SampleJob.class).withIdentity(\"sampleJob\").usingJobData(\"name\", \"World\").storeDurably()\t\t\t\t.build();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-quartz/src/main/java/smoketest/quartz/SampleQuartzApplication.java", "stars": "47572", "class": {"name": "SampleQuartzApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "sampleJobTrigger", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Trigger", "snippet": "\tpublic Trigger sampleJobTrigger() {\t\tSimpleScheduleBuilder scheduleBuilder = SimpleScheduleBuilder.simpleSchedule().withIntervalInSeconds(2)\t\t\t\t.repeatForever();\t\treturn TriggerBuilder.newTrigger().forJob(sampleJobDetail()).withIdentity(\"sampleTrigger\")\t\t\t\t.withSchedule(scheduleBuilder).build();\t}", "url": "https://raw.githubusercontent.com/spring-projects/spring-boot/master/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-quartz/src/main/java/smoketest/quartz/SampleQuartzApplication.java", "stars": "47572", "class": {"name": "SampleQuartzApplication", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) {        Statement stmt = null;        Connection conn = null;        try {            //1\u3001\u6ce8\u518c\u9a71\u52a8            Class.forName(\"com.mysql.cj.jdbc.Driver\");            //2\u3001\u5b9a\u4e49 sql            String sql = \"insert into student values(null,'mary',1)\";            //3\u3001\u83b7\u53d6 Connection \u5bf9\u8c61            conn = DriverManager.getConnection(\"jdbc:mysql:///db1\", \"root\", \"\");            //4\u3001\u83b7\u53d6\u6267\u884c sql \u5bf9\u8c61 Statement            stmt = conn.createStatement();            //5\u3001\u6267\u884c sql            int count = stmt.executeUpdate(sql);            System.out.println(count);            if(count > 0){                System.out.println(\"\u6dfb\u52a0\u6210\u529f!\");            }else{                System.out.println(\"\u6dfb\u52a0\u5931\u8d25!\");            }        } catch (ClassNotFoundException e) {            e.printStackTrace();        } catch (SQLException throwables) {            throwables.printStackTrace();        } finally {            if(stmt != null){                try {                    stmt.close();                } catch (SQLException throwables) {                    throwables.printStackTrace();                }            }            if(conn != null){                try {                    conn.close();                } catch (SQLException throwables) {                    throwables.printStackTrace();                }            }        }    }", "url": "https://raw.githubusercontent.com/chengcheng1021/javaStudy/master/src/jdbc/Demo/JdbcDemo2.java", "stars": "2", "class": {"name": "JdbcDemo2", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getShader", "params": ["GLSurfaceView"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "    public String getShader(GLSurfaceView mGlSurfaceView) {        String s =                \"#extension GL_OES_EGL_image_external : require\\n\" +                        \"precision mediump float;\\n\" +                \"uniform samplerExternalOES sTexture;\\n\" +                \"varying vec2 vTextureCoord;\\n\" +                \"const float blurSize = \"+ blur + \"/800.0;\\n\" +                \"const float weightSum = 70.0 + 2.0 * (1.0 + 8.0 + 28.0 + 56.0);\\n\" +                \"\\n\" +                \"void main(void)\\n\" +                \"{\\n\" +                \"   vec4 sum = vec4(0.0);\\n\" +                \"\\n\" +                \"   sum += texture2D(sTexture, vec2(vTextureCoord.x - 4.0*blurSize, vTextureCoord.y)) * 1.0 / weightSum;\\n\" +                \"   sum += texture2D(sTexture, vec2(vTextureCoord.x - 3.0*blurSize, vTextureCoord.y)) * 8.0 / weightSum;\\n\" +                \"   sum += texture2D(sTexture, vec2(vTextureCoord.x - 2.0*blurSize, vTextureCoord.y)) * 28.0 / weightSum;\\n\" +                \"   sum += texture2D(sTexture, vec2(vTextureCoord.x - blurSize, vTextureCoord.y)) * 56.0 / weightSum;\\n\" +                \"   sum += texture2D(sTexture, vec2(vTextureCoord.x, vTextureCoord.y)) * 70.0 / weightSum;\\n\" +                \"   sum += texture2D(sTexture, vec2(vTextureCoord.x + blurSize, vTextureCoord.y)) * 56.0 / weightSum;\\n\" +                \"   sum += texture2D(sTexture, vec2(vTextureCoord.x + 2.0*blurSize, vTextureCoord.y)) * 28.0 / weightSum;\\n\" +                \"   sum += texture2D(sTexture, vec2(vTextureCoord.x + 3.0*blurSize, vTextureCoord.y)) * 8.0 / weightSum;\\n\" +                \"   sum += texture2D(sTexture, vec2(vTextureCoord.x + 4.0*blurSize, vTextureCoord.y)) * 1.0 / weightSum;\\n\" +                \"\\n\" +                \"   gl_FragColor = sum;\\n\" +                \"}\";        return s;    }", "url": "https://raw.githubusercontent.com/jarryleo/GSYVideoPlayer/master/gsyVideoPlayer-java/src/main/java/com/shuyu/gsyvideoplayer/render/effect/SampleBlurEffect.java", "stars": "2", "class": {"name": "SampleBlurEffect", "extends": null, "implements": ["GSYVideoGLView"], "modifiers": ["public"]}}, {"method_name": "getMap", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "Map<String,List>", "snippet": "    protected Map<String, List<String>> getMap() {        return null;    }", "url": "https://raw.githubusercontent.com/guozaizai/myHttpSdkDemo/master/app/src/main/java/myapp/com/xm/myapplication/Presenter/RequestPresenter.java", "stars": "9", "class": {"name": "RequestPresenter", "extends": "BasePresenter", "implements": ["IRequest"], "modifiers": ["public"]}}, {"method_name": "load", "params": ["PwdLoginRequest"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "    public void load(PwdLoginRequest pwdLoginRequest) {        model.getData(pwdLoginRequest,request(data -> getView().setData((LoginResult)data)));    }", "url": "https://raw.githubusercontent.com/guozaizai/myHttpSdkDemo/master/app/src/main/java/myapp/com/xm/myapplication/Presenter/RequestPresenter.java", "stars": "9", "class": {"name": "RequestPresenter", "extends": "BasePresenter", "implements": ["IRequest"], "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws IOException {        //1.\u521b\u5efa\u4e00\u4e2aHashMap\u96c6\u5408\u5bf9\u8c61,\u53ef\u4ee5:\u5b58\u50a8\u6bcf\u884c\u6587\u672c\u7684\u5e8f\u53f7(1,2,3,..);value:\u5b58\u50a8\u6bcf\u884c\u7684\u6587\u672c        HashMap<String,String> map = new HashMap<>();        //2.\u521b\u5efa\u5b57\u7b26\u7f13\u51b2\u8f93\u5165\u6d41\u5bf9\u8c61,\u6784\u9020\u65b9\u6cd5\u4e2d\u7ed1\u5b9a\u5b57\u7b26\u8f93\u5165\u6d41        BufferedReader br = new BufferedReader(new FileReader(\"10_IO\\\\in.txt\"));        //3.\u521b\u5efa\u5b57\u7b26\u7f13\u51b2\u8f93\u51fa\u6d41\u5bf9\u8c61,\u6784\u9020\u65b9\u6cd5\u4e2d\u7ed1\u5b9a\u5b57\u7b26\u8f93\u51fa\u6d41        BufferedWriter bw = new BufferedWriter(new FileWriter(\"10_IO\\\\out.txt\"));        //4.\u4f7f\u7528\u5b57\u7b26\u7f13\u51b2\u8f93\u5165\u6d41\u4e2d\u7684\u65b9\u6cd5readline,\u9010\u884c\u8bfb\u53d6\u6587\u672c        String line;        while((line = br.readLine())!=null){            //5.\u5bf9\u8bfb\u53d6\u5230\u7684\u6587\u672c\u8fdb\u884c\u5207\u5272,\u83b7\u53d6\u884c\u4e2d\u7684\u5e8f\u53f7\u548c\u6587\u672c\u5185\u5bb9            String[] arr = line.split(\"\\\\.\");            //6.\u628a\u5207\u5272\u597d\u7684\u5e8f\u53f7\u548c\u6587\u672c\u7684\u5185\u5bb9\u5b58\u50a8\u5230HashMap\u96c6\u5408\u4e2d(key\u5e8f\u53f7\u662f\u6709\u5e8f\u7684,\u4f1a\u81ea\u52a8\u6392\u5e8f1,2,3,4..)            map.put(arr[0],arr[1]);        }        //7.\u904d\u5386HashMap\u96c6\u5408,\u83b7\u53d6\u6bcf\u4e00\u4e2a\u952e\u503c\u5bf9        for(String key : map.keySet()){            String value = map.get(key);            //8.\u628a\u6bcf\u4e00\u4e2a\u952e\u503c\u5bf9,\u62fc\u63a5\u4e3a\u4e00\u4e2a\u6587\u672c\u884c            line = key + \".\" + value;            //9.\u628a\u62fc\u63a5\u597d\u7684\u6587\u672c,\u4f7f\u7528\u5b57\u7b26\u7f13\u51b2\u8f93\u51fa\u6d41\u4e2d\u7684\u65b9\u6cd5write,\u5199\u5165\u5230\u6587\u4ef6\u4e2d            bw.write(line);            bw.newLine();//\u5199\u6362\u884c        }        //10.\u91ca\u653e\u8d44\u6e90        bw.close();        br.close();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/17.%E3%80%90%E7%BA%BF%E7%A8%8B%E3%80%81%E5%90%8C%E6%AD%A5%E3%80%91-%E7%AC%94%E8%AE%B0/21.%E3%80%90%E7%BC%93%E5%86%B2%E6%B5%81%E3%80%81%E8%BD%AC%E6%8D%A2%E6%B5%81%E3%80%81%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81%E3%80%81%E6%89%93%E5%8D%B0%E6%B5%81%E3%80%91-%E7%AC%94%E8%AE%B0/code/10_IO/src/com/itheima/demo01/BufferedStream/Demo05Test.java", "stars": "2", "class": {"name": "Demo05Test", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "generateData", "params": [], "throws": null, "modifiers": ["private"], "return_type": "void", "snippet": "    private void generateData() {        super.generate(NUMBER_OF_GARDEN_FIELDS_TO_GENERATE, NUMBER_OF_USERS_TO_GENERATE, NUMBER_OF_OPEN_LEASINGS_TO_GENERATE,            NUMBER_OF_RESERVED_LEASINGS_TO_GENERATE, NUMBER_OF_MESSAGES_THREADS, NUMBER_OF_MESSAGES,            MIN_NUMBER_OF_IMAGES_PER_GARDENFIELD, MAX_NUMBER_OF_IMAGES_PER_GARDENFIELD, BATCH_SIZE);    }", "url": "https://raw.githubusercontent.com/gardle/gardle-web/master/src/main/java/com/gardle/datagenerator/BigDataGenerator.java", "stars": "2", "class": {"name": "BigDataGenerator", "extends": "DataGenerator", "implements": null, "modifiers": ["public"]}}, {"method_name": "initialize", "params": ["List<TextPart>", "List<Map>", "Map<MetaDataKey,String>", "Map<String,String>"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "  public void initialize(List<TextPart> parts, List<Map.Entry<Integer, Integer>> mapping,      Map<MetaDataKey, String> metaData, Map<String, String> customMetaData) {    this.parts = Objects.requireNonNull(parts);    this.mapping = copyMapping(Objects.requireNonNull(mapping));    this.mappingEntryComparator = new MappingEntryComparator();    Collections.sort(this.mapping, this.mappingEntryComparator);    this.metaData = Objects.requireNonNull(metaData);    this.customMetaData = Objects.requireNonNull(customMetaData);  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/languagetool-patch/src/main/java/org/languagetool/markup/AnnotatedText.java", "stars": "3", "class": {"name": "AnnotatedText", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOriginalText", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getOriginalText() {    StringBuilder sb = new StringBuilder();    for (TextPart part : parts) {      if (part.getType() == TextPart.Type.TEXT) {        sb.append(part.getPart());      }    }    return sb.toString();  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/languagetool-patch/src/main/java/org/languagetool/markup/AnnotatedText.java", "stars": "3", "class": {"name": "AnnotatedText", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getPlainText", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getPlainText() {    StringBuilder sb = new StringBuilder();    for (TextPart part : parts) {      if (part.getType() == TextPart.Type.TEXT || part.getType() == TextPart.Type.FAKE_CONTENT) {        sb.append(part.getPart());      }    }    return sb.toString();  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/languagetool-patch/src/main/java/org/languagetool/markup/AnnotatedText.java", "stars": "3", "class": {"name": "AnnotatedText", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getTextWithMarkup", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getTextWithMarkup() {    StringBuilder sb = new StringBuilder();    for (TextPart part : parts) {      if (part.getType() != TextPart.Type.FAKE_CONTENT) {        sb.append(part.getPart());      }    }    return sb.toString();  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/languagetool-patch/src/main/java/org/languagetool/markup/AnnotatedText.java", "stars": "3", "class": {"name": "AnnotatedText", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getMapping", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<Map>", "snippet": "  public List<Map.Entry<Integer, Integer>> getMapping() {    return copyMapping(mapping);  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/languagetool-patch/src/main/java/org/languagetool/markup/AnnotatedText.java", "stars": "3", "class": {"name": "AnnotatedText", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "copyMapping", "params": ["List<Map>"], "throws": null, "modifiers": ["private", "static"], "return_type": "List<Map>", "snippet": "  private static List<Map.Entry<Integer, Integer>> copyMapping(      List<Map.Entry<Integer, Integer>> mapping) {    List<Map.Entry<Integer, Integer>> result = new ArrayList<>();    for (Map.Entry<Integer, Integer> entry : mapping) {      result.add(new AbstractMap.SimpleEntry<>(entry.getKey(), entry.getValue()));    }    return result;  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/languagetool-patch/src/main/java/org/languagetool/markup/AnnotatedText.java", "stars": "3", "class": {"name": "AnnotatedText", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOriginalTextPositionFor", "params": ["int"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getOriginalTextPositionFor(int plainTextPosition) {    if (plainTextPosition < 0) {      throw new IllegalArgumentException(\"plainTextPosition must be >= 0: \" + plainTextPosition);    } else if (mapping.isEmpty()) {      throw new IllegalArgumentException(\"mapping must be non-empty\");    } else if (mapping.size() == 1) {      return mapping.get(0).getValue();    }    Map.Entry<Integer, Integer> entry =        new AbstractMap.SimpleEntry<>(plainTextPosition, Integer.MAX_VALUE);    int i = -Collections.binarySearch(mapping, entry, mappingEntryComparator) - 1;    if (i <= 0) i = 1;    if (i >= mapping.size()) i = mapping.size() - 1;    Map.Entry<Integer, Integer> lowerNeighbor = mapping.get(i - 1);    Map.Entry<Integer, Integer> upperNeighbor = mapping.get(i);    if (lowerNeighbor.getKey() == plainTextPosition) {      return lowerNeighbor.getValue();    } else {      float t = (float)(plainTextPosition - lowerNeighbor.getKey()) /          (float)(upperNeighbor.getKey() - lowerNeighbor.getKey());      int result = Math.round((1 - t) * lowerNeighbor.getValue() + t * upperNeighbor.getValue());      return result;    }  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/languagetool-patch/src/main/java/org/languagetool/markup/AnnotatedText.java", "stars": "3", "class": {"name": "AnnotatedText", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getOriginalTextPositionFor", "params": ["int", "boolean"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "  public int getOriginalTextPositionFor(int plainTextPosition, boolean isToPos) {    return getOriginalTextPositionFor(plainTextPosition);  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/languagetool-patch/src/main/java/org/languagetool/markup/AnnotatedText.java", "stars": "3", "class": {"name": "AnnotatedText", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGlobalMetaData", "params": ["String", "String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getGlobalMetaData(String key, String defaultValue) {    return customMetaData.getOrDefault(key, defaultValue);  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/languagetool-patch/src/main/java/org/languagetool/markup/AnnotatedText.java", "stars": "3", "class": {"name": "AnnotatedText", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "getGlobalMetaData", "params": ["MetaDataKey", "String"], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getGlobalMetaData(MetaDataKey key, String defaultValue) {    return metaData.getOrDefault(key, defaultValue);  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/languagetool-patch/src/main/java/org/languagetool/markup/AnnotatedText.java", "stars": "3", "class": {"name": "AnnotatedText", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "toString", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String toString() {    return StringUtils.join(parts, \"\");  }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/languagetool-patch/src/main/java/org/languagetool/markup/AnnotatedText.java", "stars": "3", "class": {"name": "AnnotatedText", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "compare", "params": ["Map", "Map"], "throws": null, "modifiers": ["public"], "return_type": "int", "snippet": "    public int compare(Map.Entry<Integer, Integer> o1, Map.Entry<Integer, Integer> o2) {      int result = o1.getKey().compareTo(o2.getKey());      if (result == 0) result = o1.getValue().compareTo(o2.getValue());      return result;    }", "url": "https://raw.githubusercontent.com/valentjn/ltex-ls-old/master/languagetool-patch/src/main/java/org/languagetool/markup/AnnotatedText.java", "stars": "3", "class": {"name": "MappingEntryComparator", "extends": null, "implements": ["Comparator"], "modifiers": ["private"]}}, {"method_name": "main", "params": ["String"], "throws": null, "modifiers": ["public", "static"], "return_type": "void", "snippet": "\tpublic static void main(String[] args) {\t\tnew RegistFrame();\t}", "url": "https://raw.githubusercontent.com/tianyu-zou/transport-log/master/RegistFrame.java", "stars": "3", "class": {"name": "RegistFrame", "extends": "JFrame", "implements": null, "modifiers": ["public"]}}, {"method_name": "actionPerformed", "params": ["ActionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void actionPerformed(ActionEvent e) {\t\t\t// \u83b7\u53d6\u7528\u6237\u8f93\u5165\u7684\u6570\u636e\t\t\tString userName = txtName.getText().trim();\t\t\tString password = new String(txtPwd.getPassword());\t\t\tString rePassword = new String(txtRePwd.getPassword());\t\t\t// \u5c06\u6027\u522b\u201c\u7537\u201d\u201c\u5973\u201d\u5bf9\u5e94\u8f6c\u5316\u4e3a\u201c1\u201d\u201c0\u201d\t\t\tint sex = Integer.parseInt(rbFemale.isSelected() ? \"0\" : \"1\");\t\t\tString hobby = (ckbRead.isSelected() ? \"\u9605\u8bfb\" : \"\")\t\t\t\t\t+ (ckbNet.isSelected() ? \"\u4e0a\u7f51\" : \"\")\t\t\t\t\t+ (ckbSwim.isSelected() ? \"\u6e38\u6cf3\" : \"\")\t\t\t\t\t+ (ckbTour.isSelected() ? \"\u65c5\u6e38\" : \"\");\t\t\tString address = txtAdress.getText().trim();\t\t\tString degree = cmbDegree.getSelectedItem().toString().trim();\t\t\t// \u5224\u65ad\u4e24\u6b21\u8f93\u5165\u5bc6\u7801\u662f\u5426\u4e00\u81f4\t\t\tif (password.equals(rePassword)) {\t\t\t\t// \u5c06\u6570\u636e\u5c01\u88c5\u5230\u5bf9\u8c61\u4e2d\t\t\t\tuser = new User(userName, password, sex, hobby, address, degree);\t\t\t\t// \u4fdd\u5b58\u6570\u636e\t\t\t\tif (userService.saveUser(user)) {\t\t\t\t\t// \u8f93\u51fa\u63d0\u793a\u4fe1\u606f\t\t\t\t\t//System.out.println(\"\u6ce8\u518c\u6210\u529f\uff01\");\t\t\t\t\tJOptionPane.showMessageDialog(null,\"\u6ce8\u518c\u6210\u529f\uff01\",\"\u6210\u529f\u63d0\u793a\",JOptionPane.PLAIN_MESSAGE);\t\t\t\t} else {\t\t\t\t\t// \u8f93\u51fa\u63d0\u793a\u4fe1\u606f\t\t\t\t\t//System.out.println(\"\u6ce8\u518c\u5931\u8d25\uff01\");\t\t\t\t\tJOptionPane.showMessageDialog(null,\"\u6ce8\u518c\u5931\u8d25\uff01\",\"\u9519\u8bef\u63d0\u793a\",JOptionPane.ERROR_MESSAGE);\t\t\t\t}\t\t\t} else {\t\t\t\t// \u8f93\u51fa\u63d0\u793a\u4fe1\u606f\t\t\t\t//System.out.println(\"\u4e24\u6b21\u8f93\u5165\u7684\u5bc6\u7801\u4e0d\u4e00\u81f4\uff01\");\t\t\t\tJOptionPane.showMessageDialog(null,\"\u4e24\u6b21\u8f93\u5165\u7684\u5bc6\u7801\u4e0d\u4e00\u81f4\uff01\",\"\u9519\u8bef\u63d0\u793a\",JOptionPane.ERROR_MESSAGE);\t\t\t}\t\t}", "url": "https://raw.githubusercontent.com/tianyu-zou/transport-log/master/RegistFrame.java", "stars": "3", "class": {"name": "RegisterListener", "extends": null, "implements": ["ActionListener"], "modifiers": ["private"]}}, {"method_name": "actionPerformed", "params": ["ActionEvent"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void actionPerformed(ActionEvent e) {\t\t\t// \u6e05\u7a7a\u59d3\u540d\u3001\u5bc6\u7801\u3001\u786e\u8ba4\u5bc6\u7801\u5185\u5bb9\t\t\ttxtName.setText(\"\");\t\t\ttxtPwd.setText(\"\");\t\t\ttxtRePwd.setText(\"\");\t\t\t// \u91cd\u7f6e\u5355\u9009\u6309\u94ae\u4e3a\u672a\u9009\u62e9\t\t\trbMale.setSelected(false);\t\t\trbFemale.setSelected(false);\t\t\t// \u91cd\u7f6e\u6240\u6709\u7684\u590d\u9009\u6309\u94ae\u4e3a\u672a\u9009\u62e9\t\t\tckbRead.setSelected(false);\t\t\tckbNet.setSelected(false);\t\t\tckbSwim.setSelected(false);\t\t\tckbTour.setSelected(false);\t\t\t// \u6e05\u7a7a\u5730\u5740\u680f\t\t\ttxtAdress.setText(\"\");\t\t\t// \u91cd\u7f6e\u7ec4\u5408\u6846\u4e3a\u672a\u9009\u62e9\u72b6\u6001\t\t\tcmbDegree.setSelectedIndex(0);\t\t}", "url": "https://raw.githubusercontent.com/tianyu-zou/transport-log/master/RegistFrame.java", "stars": "3", "class": {"name": "ResetListener", "extends": null, "implements": ["ActionListener"], "modifiers": ["public"]}}, {"method_name": "beforeMethod", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void beforeMethod() throws IOException {    if (workingDirFile.exists())      FileUtils.deleteDirectory(workingDirFile);    workingDirFile.mkdirs();    libFolderFile.mkdirs();    executionJarFile.createNewFile();    libraryJarFile.createNewFile();  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/test/java/azkaban/jobtype/TestHadoopJobUtilsExecutionJar.java", "stars": "18", "class": {"name": "TestHadoopJobUtilsExecutionJar", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testNoLibFolder", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void testNoLibFolder() throws IOException {    FileUtils.deleteDirectory(libFolderFile);    String retval = HadoopJobUtils.resolveWildCardForJarSpec(workingDirString, \"./lib/*\", logger);    Assert.assertEquals(retval, \"\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/test/java/azkaban/jobtype/TestHadoopJobUtilsExecutionJar.java", "stars": "18", "class": {"name": "TestHadoopJobUtilsExecutionJar", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testLibFolderHasNothingInIt", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void testLibFolderHasNothingInIt() throws IOException {    FileUtils.deleteDirectory(libFolderFile);    libFolderFile.mkdirs();    String retval = HadoopJobUtils.resolveWildCardForJarSpec(workingDirString, \"./lib/*\", logger);    Assert.assertEquals(retval, \"\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/test/java/azkaban/jobtype/TestHadoopJobUtilsExecutionJar.java", "stars": "18", "class": {"name": "TestHadoopJobUtilsExecutionJar", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testOneLibFolderExpansion", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void testOneLibFolderExpansion() throws IOException {    String retval = HadoopJobUtils.resolveWildCardForJarSpec(workingDirString, \"./lib/*\", logger);    Set<String> retvalSet = new HashSet<String>(Arrays.asList(retval.split(\",\")));    Set<String> expected = new HashSet<String>();    expected.add(\"/tmp/TestHadoopSpark/./lib/library.jar\");    expected.add(\"/tmp/TestHadoopSpark/./lib/hadoop-spark-job-test-execution-x.y.z-a.b.c.jar\");    Assert.assertTrue(\"Expected size is different from retrieval size. Expected: \" + expected + \" , Actual: \" + retvalSet,                      expected.size() == retvalSet.size());    expected.removeAll(retvalSet);    Assert.assertTrue(\"Expected values are not equal to Actual values. Expected: \" + expected + \" , Actual: \" + retvalSet,                      expected.isEmpty() );  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/test/java/azkaban/jobtype/TestHadoopJobUtilsExecutionJar.java", "stars": "18", "class": {"name": "TestHadoopJobUtilsExecutionJar", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testTwoLibFolderExpansionAllFilesResolved", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "  public void testTwoLibFolderExpansionAllFilesResolved() throws IOException {    File lib2FolderFile = new File(workingDirFile, \"lib2\");    lib2FolderFile.mkdirs();    File lib2test1Jar = new File(lib2FolderFile, \"test1.jar\");    lib2test1Jar.createNewFile();    File lib2test2Jar = new File(lib2FolderFile, \"test2.jar\");    lib2test2Jar.createNewFile();    String retval = HadoopJobUtils.resolveWildCardForJarSpec(workingDirString, \"./lib/*,./lib2/*\",            logger);    Assert.assertTrue(retval.contains(\"/tmp/TestHadoopSpark/./lib/library.jar\"));    Assert.assertTrue(retval.contains(\"/tmp/TestHadoopSpark/./lib/hadoop-spark-job-test-execution-x.y.z-a.b.c.jar\"));    Assert.assertTrue(retval.contains(\"/tmp/TestHadoopSpark/./lib2/test1.jar\"));    Assert.assertTrue(retval.contains(\"/tmp/TestHadoopSpark/./lib2/test2.jar\"));  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/test/java/azkaban/jobtype/TestHadoopJobUtilsExecutionJar.java", "stars": "18", "class": {"name": "TestHadoopJobUtilsExecutionJar", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "testTwoLibFolderExpansionExpandsInOrder", "params": [], "throws": ["IOException"], "modifiers": ["public"], "return_type": "void", "snippet": "    public void testTwoLibFolderExpansionExpandsInOrder() throws IOException {      executionJarFile.delete();      File lib2FolderFile = new File(workingDirFile, \"lib2\");      lib2FolderFile.mkdirs();      File lib2test1Jar = new File(lib2FolderFile, \"test1.jar\");      lib2test1Jar.createNewFile();      String retval = HadoopJobUtils.resolveWildCardForJarSpec(workingDirString, \"./lib/*,./lib2/*\",              logger);      Assert.assertEquals(              retval,              \"/tmp/TestHadoopSpark/./lib/library.jar,/tmp/TestHadoopSpark/./lib2/test1.jar\");  }", "url": "https://raw.githubusercontent.com/WeBankFinTech/Schedulis/master/azkaban-jobtype/src/test/java/azkaban/jobtype/TestHadoopJobUtilsExecutionJar.java", "stars": "18", "class": {"name": "TestHadoopJobUtilsExecutionJar", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "main", "params": ["String"], "throws": ["IOException"], "modifiers": ["public", "static"], "return_type": "void", "snippet": "    public static void main(String[] args) throws IOException {        //1.\u521b\u5efaInputStreamReader\u5bf9\u8c61,\u6784\u9020\u65b9\u6cd5\u4e2d\u4f20\u9012\u5b57\u8282\u8f93\u5165\u6d41\u548c\u6307\u5b9a\u7684\u7f16\u7801\u8868\u540d\u79f0GBK        InputStreamReader isr = new InputStreamReader(new FileInputStream(\"10_IO\\\\\u6211\u662fGBK\u683c\u5f0f\u7684\u6587\u672c.txt\"),\"GBK\");        //2.\u521b\u5efaOutputStreamWriter\u5bf9\u8c61,\u6784\u9020\u65b9\u6cd5\u4e2d\u4f20\u9012\u5b57\u8282\u8f93\u51fa\u6d41\u548c\u6307\u5b9a\u7684\u7f16\u7801\u8868\u540d\u79f0UTF-8        OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(\"10_IO\\\\\u6211\u662futf_8\u683c\u5f0f\u7684\u6587\u4ef6.txt\"),\"UTF-8\");        //3.\u4f7f\u7528InputStreamReader\u5bf9\u8c61\u4e2d\u7684\u65b9\u6cd5read\u8bfb\u53d6\u6587\u4ef6        int len = 0;        while((len = isr.read())!=-1){            //4.\u4f7f\u7528OutputStreamWriter\u5bf9\u8c61\u4e2d\u7684\u65b9\u6cd5write,\u628a\u8bfb\u53d6\u7684\u6570\u636e\u5199\u5165\u5230\u6587\u4ef6\u4e2d            osw.write(len);        }        //5.\u91ca\u653e\u8d44\u6e90        osw.close();        isr.close();    }", "url": "https://raw.githubusercontent.com/liuminchao123/JavaWeb_Learning/master/02.%20java/Java/%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/17.%E3%80%90%E7%BA%BF%E7%A8%8B%E3%80%81%E5%90%8C%E6%AD%A5%E3%80%91-%E7%AC%94%E8%AE%B0/21.%E3%80%90%E7%BC%93%E5%86%B2%E6%B5%81%E3%80%81%E8%BD%AC%E6%8D%A2%E6%B5%81%E3%80%81%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81%E3%80%81%E6%89%93%E5%8D%B0%E6%B5%81%E3%80%91-%E7%AC%94%E8%AE%B0/code/10_IO/src/com/itheima/demo03/ReverseStream/Demo04Test.java", "stars": "2", "class": {"name": "Demo04Test", "extends": null, "implements": null, "modifiers": ["public"]}}, {"method_name": "createRefreshableView", "params": ["Context", "AttributeSet"], "throws": null, "modifiers": ["protected"], "return_type": "WebView", "snippet": "\tprotected WebView createRefreshableView(Context context, AttributeSet attrs) {\t\tWebView webView = super.createRefreshableView(context, attrs);\t\t// Need to add JS Interface so we can get the response back\t\tmJsCallback = new JsValueCallback();\t\twebView.addJavascriptInterface(mJsCallback, JS_INTERFACE_PKG);\t\treturn webView;\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/extras/PullToRefreshWebView2.java", "stars": "74", "class": {"name": "PullToRefreshWebView2", "extends": "PullToRefreshWebView", "implements": null, "modifiers": ["public"]}}, {"method_name": "isReadyForPullStart", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "\tprotected boolean isReadyForPullStart() {\t\t// Call Javascript...\t\tgetRefreshableView().loadUrl(DEF_JS_READY_PULL_DOWN_CALL);\t\t// Response will be given to JsValueCallback, which will update\t\t// mIsReadyForPullDown\t\treturn mIsReadyForPullDown.get();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/extras/PullToRefreshWebView2.java", "stars": "74", "class": {"name": "PullToRefreshWebView2", "extends": "PullToRefreshWebView", "implements": null, "modifiers": ["public"]}}, {"method_name": "isReadyForPullEnd", "params": [], "throws": null, "modifiers": ["protected"], "return_type": "boolean", "snippet": "\tprotected boolean isReadyForPullEnd() {\t\t// Call Javascript...\t\tgetRefreshableView().loadUrl(DEF_JS_READY_PULL_UP_CALL);\t\t// Response will be given to JsValueCallback, which will update\t\t// mIsReadyForPullUp\t\treturn mIsReadyForPullUp.get();\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/extras/PullToRefreshWebView2.java", "stars": "74", "class": {"name": "PullToRefreshWebView2", "extends": "PullToRefreshWebView", "implements": null, "modifiers": ["public"]}}, {"method_name": "isReadyForPullUpResponse", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void isReadyForPullUpResponse(boolean response) {\t\t\tmIsReadyForPullUp.set(response);\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/extras/PullToRefreshWebView2.java", "stars": "74", "class": {"name": "JsValueCallback", "extends": null, "implements": null, "modifiers": ["final"]}}, {"method_name": "isReadyForPullDownResponse", "params": ["boolean"], "throws": null, "modifiers": ["public"], "return_type": "void", "snippet": "\t\tpublic void isReadyForPullDownResponse(boolean response) {\t\t\tmIsReadyForPullDown.set(response);\t\t}", "url": "https://raw.githubusercontent.com/harshalbenake/hbworkspace1-100/master/pulltorefresh%20and%20dragndrop%20to%20gridview/library/src/com/handmark/pulltorefresh/library/extras/PullToRefreshWebView2.java", "stars": "74", "class": {"name": "JsValueCallback", "extends": null, "implements": null, "modifiers": ["final"]}}, {"method_name": "getKeyGenerator", "params": [], "throws": null, "modifiers": ["public"], "return_type": "KeyGenerator", "snippet": "  public KeyGenerator getKeyGenerator() {    return keyGenerator;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/MappedStatement.java", "stars": "15", "class": {"name": "MappedStatement", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getSqlCommandType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "SqlCommandType", "snippet": "  public SqlCommandType getSqlCommandType() {    return sqlCommandType;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/MappedStatement.java", "stars": "15", "class": {"name": "MappedStatement", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getResource", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getResource() {    return resource;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/MappedStatement.java", "stars": "15", "class": {"name": "MappedStatement", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getConfiguration", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Configuration", "snippet": "  public Configuration getConfiguration() {    return configuration;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/MappedStatement.java", "stars": "15", "class": {"name": "MappedStatement", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getId", "params": [], "throws": null, "modifiers": ["public"], "return_type": "String", "snippet": "  public String getId() {    return id;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/MappedStatement.java", "stars": "15", "class": {"name": "MappedStatement", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "hasNestedResultMaps", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean hasNestedResultMaps() {    return hasNestedResultMaps;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/MappedStatement.java", "stars": "15", "class": {"name": "MappedStatement", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getFetchSize", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getFetchSize() {    return fetchSize;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/MappedStatement.java", "stars": "15", "class": {"name": "MappedStatement", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getTimeout", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Integer", "snippet": "  public Integer getTimeout() {    return timeout;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/MappedStatement.java", "stars": "15", "class": {"name": "MappedStatement", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getStatementType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "StatementType", "snippet": "  public StatementType getStatementType() {    return statementType;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/MappedStatement.java", "stars": "15", "class": {"name": "MappedStatement", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getResultSetType", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ResultSetType", "snippet": "  public ResultSetType getResultSetType() {    return resultSetType;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/MappedStatement.java", "stars": "15", "class": {"name": "MappedStatement", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getSqlSource", "params": [], "throws": null, "modifiers": ["public"], "return_type": "SqlSource", "snippet": "  public SqlSource getSqlSource() {    return sqlSource;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/MappedStatement.java", "stars": "15", "class": {"name": "MappedStatement", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getParameterMap", "params": [], "throws": null, "modifiers": ["public"], "return_type": "ParameterMap", "snippet": "  public ParameterMap getParameterMap() {    return parameterMap;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/MappedStatement.java", "stars": "15", "class": {"name": "MappedStatement", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getResultMaps", "params": [], "throws": null, "modifiers": ["public"], "return_type": "List<ResultMap>", "snippet": "  public List<ResultMap> getResultMaps() {    return resultMaps;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/MappedStatement.java", "stars": "15", "class": {"name": "MappedStatement", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "getCache", "params": [], "throws": null, "modifiers": ["public"], "return_type": "Cache", "snippet": "  public Cache getCache() {    return cache;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/MappedStatement.java", "stars": "15", "class": {"name": "MappedStatement", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isFlushCacheRequired", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isFlushCacheRequired() {    return flushCacheRequired;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/MappedStatement.java", "stars": "15", "class": {"name": "MappedStatement", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isUseCache", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isUseCache() {    return useCache;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/MappedStatement.java", "stars": "15", "class": {"name": "MappedStatement", "extends": null, "implements": null, "modifiers": ["public", "final"]}}, {"method_name": "isResultOrdered", "params": [], "throws": null, "modifiers": ["public"], "return_type": "boolean", "snippet": "  public boolean isResultOrdered() {    return resultOrdered;  }", "url": "https://raw.githubusercontent.com/zjjxxlgb/mybatis2sql/master/src/main/java/org/apache/ibatis/mapping/MappedStatement.java", "stars": "15", "class": {"name": "MappedStatement", "extends": null, "implements": null, "modifiers": ["public", "final"]}}]